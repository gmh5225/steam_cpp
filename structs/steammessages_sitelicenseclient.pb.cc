// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_sitelicenseclient.proto

#include "steammessages_sitelicenseclient.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CMsgClientSiteInfo::CMsgClientSiteInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : site_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , site_id_(uint64_t{0u})
  , allow_cached_credentials_(false){}
struct CMsgClientSiteInfoDefaultTypeInternal {
  constexpr CMsgClientSiteInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientSiteInfoDefaultTypeInternal() {}
  union {
    CMsgClientSiteInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientSiteInfoDefaultTypeInternal _CMsgClientSiteInfo_default_instance_;
constexpr CMsgClientSiteLicenseCheckout::CMsgClientSiteLicenseCheckout(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appid_(0u){}
struct CMsgClientSiteLicenseCheckoutDefaultTypeInternal {
  constexpr CMsgClientSiteLicenseCheckoutDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientSiteLicenseCheckoutDefaultTypeInternal() {}
  union {
    CMsgClientSiteLicenseCheckout _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientSiteLicenseCheckoutDefaultTypeInternal _CMsgClientSiteLicenseCheckout_default_instance_;
constexpr CMsgClientSiteLicenseCheckoutResponse::CMsgClientSiteLicenseCheckoutResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : eresult_(2){}
struct CMsgClientSiteLicenseCheckoutResponseDefaultTypeInternal {
  constexpr CMsgClientSiteLicenseCheckoutResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientSiteLicenseCheckoutResponseDefaultTypeInternal() {}
  union {
    CMsgClientSiteLicenseCheckoutResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientSiteLicenseCheckoutResponseDefaultTypeInternal _CMsgClientSiteLicenseCheckoutResponse_default_instance_;
constexpr CMsgClientSiteLicenseGetAvailableSeats::CMsgClientSiteLicenseGetAvailableSeats(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appid_(0u){}
struct CMsgClientSiteLicenseGetAvailableSeatsDefaultTypeInternal {
  constexpr CMsgClientSiteLicenseGetAvailableSeatsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientSiteLicenseGetAvailableSeatsDefaultTypeInternal() {}
  union {
    CMsgClientSiteLicenseGetAvailableSeats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientSiteLicenseGetAvailableSeatsDefaultTypeInternal _CMsgClientSiteLicenseGetAvailableSeats_default_instance_;
constexpr CMsgClientSiteLicenseGetAvailableSeatsResponse::CMsgClientSiteLicenseGetAvailableSeatsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : seats_(0u)
  , eresult_(2){}
struct CMsgClientSiteLicenseGetAvailableSeatsResponseDefaultTypeInternal {
  constexpr CMsgClientSiteLicenseGetAvailableSeatsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientSiteLicenseGetAvailableSeatsResponseDefaultTypeInternal() {}
  union {
    CMsgClientSiteLicenseGetAvailableSeatsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientSiteLicenseGetAvailableSeatsResponseDefaultTypeInternal _CMsgClientSiteLicenseGetAvailableSeatsResponse_default_instance_;
constexpr CMsgClientSiteLicenseGetContentCacheInfo::CMsgClientSiteLicenseGetContentCacheInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgClientSiteLicenseGetContentCacheInfoDefaultTypeInternal {
  constexpr CMsgClientSiteLicenseGetContentCacheInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientSiteLicenseGetContentCacheInfoDefaultTypeInternal() {}
  union {
    CMsgClientSiteLicenseGetContentCacheInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientSiteLicenseGetContentCacheInfoDefaultTypeInternal _CMsgClientSiteLicenseGetContentCacheInfo_default_instance_;
constexpr CMsgClientSiteLicenseGetContentCacheInfoResponse::CMsgClientSiteLicenseGetContentCacheInfoResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ip_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , use_cache_(false)
  , ipv4_address_(0u)
  , port_number_(0u)
  , p2p_group_(0u){}
struct CMsgClientSiteLicenseGetContentCacheInfoResponseDefaultTypeInternal {
  constexpr CMsgClientSiteLicenseGetContentCacheInfoResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientSiteLicenseGetContentCacheInfoResponseDefaultTypeInternal() {}
  union {
    CMsgClientSiteLicenseGetContentCacheInfoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientSiteLicenseGetContentCacheInfoResponseDefaultTypeInternal _CMsgClientSiteLicenseGetContentCacheInfoResponse_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steammessages_5fsitelicenseclient_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_steammessages_5fsitelicenseclient_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_steammessages_5fsitelicenseclient_2eproto = nullptr;

const uint32_t TableStruct_steammessages_5fsitelicenseclient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CMsgClientSiteInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSiteInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientSiteInfo, site_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSiteInfo, site_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSiteInfo, allow_cached_credentials_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgClientSiteLicenseCheckout, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSiteLicenseCheckout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientSiteLicenseCheckout, appid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientSiteLicenseCheckoutResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSiteLicenseCheckoutResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientSiteLicenseCheckoutResponse, eresult_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientSiteLicenseGetAvailableSeats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSiteLicenseGetAvailableSeats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientSiteLicenseGetAvailableSeats, appid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientSiteLicenseGetAvailableSeatsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSiteLicenseGetAvailableSeatsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientSiteLicenseGetAvailableSeatsResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSiteLicenseGetAvailableSeatsResponse, seats_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgClientSiteLicenseGetContentCacheInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientSiteLicenseGetContentCacheInfoResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSiteLicenseGetContentCacheInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientSiteLicenseGetContentCacheInfoResponse, use_cache_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSiteLicenseGetContentCacheInfoResponse, ipv4_address_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSiteLicenseGetContentCacheInfoResponse, port_number_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSiteLicenseGetContentCacheInfoResponse, p2p_group_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSiteLicenseGetContentCacheInfoResponse, ip_address_),
  1,
  2,
  3,
  4,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::CMsgClientSiteInfo)},
  { 12, 19, -1, sizeof(::CMsgClientSiteLicenseCheckout)},
  { 20, 27, -1, sizeof(::CMsgClientSiteLicenseCheckoutResponse)},
  { 28, 35, -1, sizeof(::CMsgClientSiteLicenseGetAvailableSeats)},
  { 36, 44, -1, sizeof(::CMsgClientSiteLicenseGetAvailableSeatsResponse)},
  { 46, -1, -1, sizeof(::CMsgClientSiteLicenseGetContentCacheInfo)},
  { 52, 63, -1, sizeof(::CMsgClientSiteLicenseGetContentCacheInfoResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientSiteInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientSiteLicenseCheckout_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientSiteLicenseCheckoutResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientSiteLicenseGetAvailableSeats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientSiteLicenseGetAvailableSeatsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientSiteLicenseGetContentCacheInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientSiteLicenseGetContentCacheInfoResponse_default_instance_),
};

const char descriptor_table_protodef_steammessages_5fsitelicenseclient_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n%steammessages_sitelicenseclient.proto\032"
  "\030steammessages_base.proto\"Z\n\022CMsgClientS"
  "iteInfo\022\017\n\007site_id\030\001 \001(\004\022\021\n\tsite_name\030\002 "
  "\001(\t\022 \n\030allow_cached_credentials\030\003 \001(\010\".\n"
  "\035CMsgClientSiteLicenseCheckout\022\r\n\005appid\030"
  "\001 \001(\r\";\n%CMsgClientSiteLicenseCheckoutRe"
  "sponse\022\022\n\007eresult\030\001 \001(\005:\0012\"7\n&CMsgClient"
  "SiteLicenseGetAvailableSeats\022\r\n\005appid\030\001 "
  "\001(\r\"S\n.CMsgClientSiteLicenseGetAvailable"
  "SeatsResponse\022\022\n\007eresult\030\001 \001(\005:\0012\022\r\n\005sea"
  "ts\030\002 \001(\r\"*\n(CMsgClientSiteLicenseGetCont"
  "entCacheInfo\"\227\001\n0CMsgClientSiteLicenseGe"
  "tContentCacheInfoResponse\022\021\n\tuse_cache\030\001"
  " \001(\010\022\024\n\014ipv4_address\030\002 \001(\r\022\023\n\013port_numbe"
  "r\030\003 \001(\r\022\021\n\tp2p_group\030\004 \001(\r\022\022\n\nip_address"
  "\030\005 \001(\tB\005H\001\200\001\000"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_steammessages_5fsitelicenseclient_2eproto_deps[1] = {
  &::descriptor_table_steammessages_5fbase_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steammessages_5fsitelicenseclient_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fsitelicenseclient_2eproto = {
  false, false, 613, descriptor_table_protodef_steammessages_5fsitelicenseclient_2eproto, "steammessages_sitelicenseclient.proto", 
  &descriptor_table_steammessages_5fsitelicenseclient_2eproto_once, descriptor_table_steammessages_5fsitelicenseclient_2eproto_deps, 1, 7,
  schemas, file_default_instances, TableStruct_steammessages_5fsitelicenseclient_2eproto::offsets,
  file_level_metadata_steammessages_5fsitelicenseclient_2eproto, file_level_enum_descriptors_steammessages_5fsitelicenseclient_2eproto, file_level_service_descriptors_steammessages_5fsitelicenseclient_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_steammessages_5fsitelicenseclient_2eproto_getter() {
  return &descriptor_table_steammessages_5fsitelicenseclient_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_steammessages_5fsitelicenseclient_2eproto(&descriptor_table_steammessages_5fsitelicenseclient_2eproto);

// ===================================================================

class CMsgClientSiteInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientSiteInfo>()._has_bits_);
  static void set_has_site_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_site_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_allow_cached_credentials(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgClientSiteInfo::CMsgClientSiteInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientSiteInfo)
}
CMsgClientSiteInfo::CMsgClientSiteInfo(const CMsgClientSiteInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  site_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    site_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_site_name()) {
    site_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_site_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&site_id_, &from.site_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&allow_cached_credentials_) -
    reinterpret_cast<char*>(&site_id_)) + sizeof(allow_cached_credentials_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientSiteInfo)
}

inline void CMsgClientSiteInfo::SharedCtor() {
site_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  site_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&site_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&allow_cached_credentials_) -
    reinterpret_cast<char*>(&site_id_)) + sizeof(allow_cached_credentials_));
}

CMsgClientSiteInfo::~CMsgClientSiteInfo() {
  // @@protoc_insertion_point(destructor:CMsgClientSiteInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientSiteInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  site_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientSiteInfo::ArenaDtor(void* object) {
  CMsgClientSiteInfo* _this = reinterpret_cast< CMsgClientSiteInfo* >(object);
  (void)_this;
}
void CMsgClientSiteInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientSiteInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientSiteInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientSiteInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    site_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&site_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&allow_cached_credentials_) -
        reinterpret_cast<char*>(&site_id_)) + sizeof(allow_cached_credentials_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientSiteInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 site_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_site_id(&has_bits);
          site_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string site_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_site_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientSiteInfo.site_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool allow_cached_credentials = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_allow_cached_credentials(&has_bits);
          allow_cached_credentials_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientSiteInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientSiteInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 site_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_site_id(), target);
  }

  // optional string site_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_site_name().data(), static_cast<int>(this->_internal_site_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientSiteInfo.site_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_site_name(), target);
  }

  // optional bool allow_cached_credentials = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_allow_cached_credentials(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientSiteInfo)
  return target;
}

size_t CMsgClientSiteInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientSiteInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string site_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_site_name());
    }

    // optional uint64 site_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_site_id());
    }

    // optional bool allow_cached_credentials = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientSiteInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientSiteInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientSiteInfo::GetClassData() const { return &_class_data_; }

void CMsgClientSiteInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientSiteInfo *>(to)->MergeFrom(
      static_cast<const CMsgClientSiteInfo &>(from));
}


void CMsgClientSiteInfo::MergeFrom(const CMsgClientSiteInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientSiteInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_site_name(from._internal_site_name());
    }
    if (cached_has_bits & 0x00000002u) {
      site_id_ = from.site_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      allow_cached_credentials_ = from.allow_cached_credentials_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientSiteInfo::CopyFrom(const CMsgClientSiteInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientSiteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientSiteInfo::IsInitialized() const {
  return true;
}

void CMsgClientSiteInfo::InternalSwap(CMsgClientSiteInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &site_name_, lhs_arena,
      &other->site_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientSiteInfo, allow_cached_credentials_)
      + sizeof(CMsgClientSiteInfo::allow_cached_credentials_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientSiteInfo, site_id_)>(
          reinterpret_cast<char*>(&site_id_),
          reinterpret_cast<char*>(&other->site_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientSiteInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fsitelicenseclient_2eproto_getter, &descriptor_table_steammessages_5fsitelicenseclient_2eproto_once,
      file_level_metadata_steammessages_5fsitelicenseclient_2eproto[0]);
}

// ===================================================================

class CMsgClientSiteLicenseCheckout::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientSiteLicenseCheckout>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientSiteLicenseCheckout::CMsgClientSiteLicenseCheckout(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientSiteLicenseCheckout)
}
CMsgClientSiteLicenseCheckout::CMsgClientSiteLicenseCheckout(const CMsgClientSiteLicenseCheckout& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientSiteLicenseCheckout)
}

inline void CMsgClientSiteLicenseCheckout::SharedCtor() {
appid_ = 0u;
}

CMsgClientSiteLicenseCheckout::~CMsgClientSiteLicenseCheckout() {
  // @@protoc_insertion_point(destructor:CMsgClientSiteLicenseCheckout)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientSiteLicenseCheckout::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientSiteLicenseCheckout::ArenaDtor(void* object) {
  CMsgClientSiteLicenseCheckout* _this = reinterpret_cast< CMsgClientSiteLicenseCheckout* >(object);
  (void)_this;
}
void CMsgClientSiteLicenseCheckout::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientSiteLicenseCheckout::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientSiteLicenseCheckout::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientSiteLicenseCheckout)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientSiteLicenseCheckout::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientSiteLicenseCheckout::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientSiteLicenseCheckout)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientSiteLicenseCheckout)
  return target;
}

size_t CMsgClientSiteLicenseCheckout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientSiteLicenseCheckout)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 appid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientSiteLicenseCheckout::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientSiteLicenseCheckout::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientSiteLicenseCheckout::GetClassData() const { return &_class_data_; }

void CMsgClientSiteLicenseCheckout::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientSiteLicenseCheckout *>(to)->MergeFrom(
      static_cast<const CMsgClientSiteLicenseCheckout &>(from));
}


void CMsgClientSiteLicenseCheckout::MergeFrom(const CMsgClientSiteLicenseCheckout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientSiteLicenseCheckout)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_appid()) {
    _internal_set_appid(from._internal_appid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientSiteLicenseCheckout::CopyFrom(const CMsgClientSiteLicenseCheckout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientSiteLicenseCheckout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientSiteLicenseCheckout::IsInitialized() const {
  return true;
}

void CMsgClientSiteLicenseCheckout::InternalSwap(CMsgClientSiteLicenseCheckout* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(appid_, other->appid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientSiteLicenseCheckout::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fsitelicenseclient_2eproto_getter, &descriptor_table_steammessages_5fsitelicenseclient_2eproto_once,
      file_level_metadata_steammessages_5fsitelicenseclient_2eproto[1]);
}

// ===================================================================

class CMsgClientSiteLicenseCheckoutResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientSiteLicenseCheckoutResponse>()._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientSiteLicenseCheckoutResponse::CMsgClientSiteLicenseCheckoutResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientSiteLicenseCheckoutResponse)
}
CMsgClientSiteLicenseCheckoutResponse::CMsgClientSiteLicenseCheckoutResponse(const CMsgClientSiteLicenseCheckoutResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientSiteLicenseCheckoutResponse)
}

inline void CMsgClientSiteLicenseCheckoutResponse::SharedCtor() {
eresult_ = 2;
}

CMsgClientSiteLicenseCheckoutResponse::~CMsgClientSiteLicenseCheckoutResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientSiteLicenseCheckoutResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientSiteLicenseCheckoutResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientSiteLicenseCheckoutResponse::ArenaDtor(void* object) {
  CMsgClientSiteLicenseCheckoutResponse* _this = reinterpret_cast< CMsgClientSiteLicenseCheckoutResponse* >(object);
  (void)_this;
}
void CMsgClientSiteLicenseCheckoutResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientSiteLicenseCheckoutResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientSiteLicenseCheckoutResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientSiteLicenseCheckoutResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  eresult_ = 2;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientSiteLicenseCheckoutResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientSiteLicenseCheckoutResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientSiteLicenseCheckoutResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_eresult(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientSiteLicenseCheckoutResponse)
  return target;
}

size_t CMsgClientSiteLicenseCheckoutResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientSiteLicenseCheckoutResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 eresult = 1 [default = 2];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_eresult());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientSiteLicenseCheckoutResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientSiteLicenseCheckoutResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientSiteLicenseCheckoutResponse::GetClassData() const { return &_class_data_; }

void CMsgClientSiteLicenseCheckoutResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientSiteLicenseCheckoutResponse *>(to)->MergeFrom(
      static_cast<const CMsgClientSiteLicenseCheckoutResponse &>(from));
}


void CMsgClientSiteLicenseCheckoutResponse::MergeFrom(const CMsgClientSiteLicenseCheckoutResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientSiteLicenseCheckoutResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_eresult()) {
    _internal_set_eresult(from._internal_eresult());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientSiteLicenseCheckoutResponse::CopyFrom(const CMsgClientSiteLicenseCheckoutResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientSiteLicenseCheckoutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientSiteLicenseCheckoutResponse::IsInitialized() const {
  return true;
}

void CMsgClientSiteLicenseCheckoutResponse::InternalSwap(CMsgClientSiteLicenseCheckoutResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientSiteLicenseCheckoutResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fsitelicenseclient_2eproto_getter, &descriptor_table_steammessages_5fsitelicenseclient_2eproto_once,
      file_level_metadata_steammessages_5fsitelicenseclient_2eproto[2]);
}

// ===================================================================

class CMsgClientSiteLicenseGetAvailableSeats::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientSiteLicenseGetAvailableSeats>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientSiteLicenseGetAvailableSeats::CMsgClientSiteLicenseGetAvailableSeats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientSiteLicenseGetAvailableSeats)
}
CMsgClientSiteLicenseGetAvailableSeats::CMsgClientSiteLicenseGetAvailableSeats(const CMsgClientSiteLicenseGetAvailableSeats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientSiteLicenseGetAvailableSeats)
}

inline void CMsgClientSiteLicenseGetAvailableSeats::SharedCtor() {
appid_ = 0u;
}

CMsgClientSiteLicenseGetAvailableSeats::~CMsgClientSiteLicenseGetAvailableSeats() {
  // @@protoc_insertion_point(destructor:CMsgClientSiteLicenseGetAvailableSeats)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientSiteLicenseGetAvailableSeats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientSiteLicenseGetAvailableSeats::ArenaDtor(void* object) {
  CMsgClientSiteLicenseGetAvailableSeats* _this = reinterpret_cast< CMsgClientSiteLicenseGetAvailableSeats* >(object);
  (void)_this;
}
void CMsgClientSiteLicenseGetAvailableSeats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientSiteLicenseGetAvailableSeats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientSiteLicenseGetAvailableSeats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientSiteLicenseGetAvailableSeats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientSiteLicenseGetAvailableSeats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientSiteLicenseGetAvailableSeats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientSiteLicenseGetAvailableSeats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientSiteLicenseGetAvailableSeats)
  return target;
}

size_t CMsgClientSiteLicenseGetAvailableSeats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientSiteLicenseGetAvailableSeats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 appid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientSiteLicenseGetAvailableSeats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientSiteLicenseGetAvailableSeats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientSiteLicenseGetAvailableSeats::GetClassData() const { return &_class_data_; }

void CMsgClientSiteLicenseGetAvailableSeats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientSiteLicenseGetAvailableSeats *>(to)->MergeFrom(
      static_cast<const CMsgClientSiteLicenseGetAvailableSeats &>(from));
}


void CMsgClientSiteLicenseGetAvailableSeats::MergeFrom(const CMsgClientSiteLicenseGetAvailableSeats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientSiteLicenseGetAvailableSeats)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_appid()) {
    _internal_set_appid(from._internal_appid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientSiteLicenseGetAvailableSeats::CopyFrom(const CMsgClientSiteLicenseGetAvailableSeats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientSiteLicenseGetAvailableSeats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientSiteLicenseGetAvailableSeats::IsInitialized() const {
  return true;
}

void CMsgClientSiteLicenseGetAvailableSeats::InternalSwap(CMsgClientSiteLicenseGetAvailableSeats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(appid_, other->appid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientSiteLicenseGetAvailableSeats::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fsitelicenseclient_2eproto_getter, &descriptor_table_steammessages_5fsitelicenseclient_2eproto_once,
      file_level_metadata_steammessages_5fsitelicenseclient_2eproto[3]);
}

// ===================================================================

class CMsgClientSiteLicenseGetAvailableSeatsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientSiteLicenseGetAvailableSeatsResponse>()._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_seats(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientSiteLicenseGetAvailableSeatsResponse::CMsgClientSiteLicenseGetAvailableSeatsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientSiteLicenseGetAvailableSeatsResponse)
}
CMsgClientSiteLicenseGetAvailableSeatsResponse::CMsgClientSiteLicenseGetAvailableSeatsResponse(const CMsgClientSiteLicenseGetAvailableSeatsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&seats_, &from.seats_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&seats_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientSiteLicenseGetAvailableSeatsResponse)
}

inline void CMsgClientSiteLicenseGetAvailableSeatsResponse::SharedCtor() {
seats_ = 0u;
eresult_ = 2;
}

CMsgClientSiteLicenseGetAvailableSeatsResponse::~CMsgClientSiteLicenseGetAvailableSeatsResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientSiteLicenseGetAvailableSeatsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientSiteLicenseGetAvailableSeatsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientSiteLicenseGetAvailableSeatsResponse::ArenaDtor(void* object) {
  CMsgClientSiteLicenseGetAvailableSeatsResponse* _this = reinterpret_cast< CMsgClientSiteLicenseGetAvailableSeatsResponse* >(object);
  (void)_this;
}
void CMsgClientSiteLicenseGetAvailableSeatsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientSiteLicenseGetAvailableSeatsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientSiteLicenseGetAvailableSeatsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientSiteLicenseGetAvailableSeatsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    seats_ = 0u;
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientSiteLicenseGetAvailableSeatsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 seats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_seats(&has_bits);
          seats_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientSiteLicenseGetAvailableSeatsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientSiteLicenseGetAvailableSeatsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_eresult(), target);
  }

  // optional uint32 seats = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_seats(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientSiteLicenseGetAvailableSeatsResponse)
  return target;
}

size_t CMsgClientSiteLicenseGetAvailableSeatsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientSiteLicenseGetAvailableSeatsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 seats = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_seats());
    }

    // optional int32 eresult = 1 [default = 2];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_eresult());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientSiteLicenseGetAvailableSeatsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientSiteLicenseGetAvailableSeatsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientSiteLicenseGetAvailableSeatsResponse::GetClassData() const { return &_class_data_; }

void CMsgClientSiteLicenseGetAvailableSeatsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientSiteLicenseGetAvailableSeatsResponse *>(to)->MergeFrom(
      static_cast<const CMsgClientSiteLicenseGetAvailableSeatsResponse &>(from));
}


void CMsgClientSiteLicenseGetAvailableSeatsResponse::MergeFrom(const CMsgClientSiteLicenseGetAvailableSeatsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientSiteLicenseGetAvailableSeatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      seats_ = from.seats_;
    }
    if (cached_has_bits & 0x00000002u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientSiteLicenseGetAvailableSeatsResponse::CopyFrom(const CMsgClientSiteLicenseGetAvailableSeatsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientSiteLicenseGetAvailableSeatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientSiteLicenseGetAvailableSeatsResponse::IsInitialized() const {
  return true;
}

void CMsgClientSiteLicenseGetAvailableSeatsResponse::InternalSwap(CMsgClientSiteLicenseGetAvailableSeatsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(seats_, other->seats_);
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientSiteLicenseGetAvailableSeatsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fsitelicenseclient_2eproto_getter, &descriptor_table_steammessages_5fsitelicenseclient_2eproto_once,
      file_level_metadata_steammessages_5fsitelicenseclient_2eproto[4]);
}

// ===================================================================

class CMsgClientSiteLicenseGetContentCacheInfo::_Internal {
 public:
};

CMsgClientSiteLicenseGetContentCacheInfo::CMsgClientSiteLicenseGetContentCacheInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CMsgClientSiteLicenseGetContentCacheInfo)
}
CMsgClientSiteLicenseGetContentCacheInfo::CMsgClientSiteLicenseGetContentCacheInfo(const CMsgClientSiteLicenseGetContentCacheInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgClientSiteLicenseGetContentCacheInfo)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientSiteLicenseGetContentCacheInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientSiteLicenseGetContentCacheInfo::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientSiteLicenseGetContentCacheInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fsitelicenseclient_2eproto_getter, &descriptor_table_steammessages_5fsitelicenseclient_2eproto_once,
      file_level_metadata_steammessages_5fsitelicenseclient_2eproto[5]);
}

// ===================================================================

class CMsgClientSiteLicenseGetContentCacheInfoResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientSiteLicenseGetContentCacheInfoResponse>()._has_bits_);
  static void set_has_use_cache(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ipv4_address(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_port_number(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_p2p_group(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ip_address(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientSiteLicenseGetContentCacheInfoResponse::CMsgClientSiteLicenseGetContentCacheInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientSiteLicenseGetContentCacheInfoResponse)
}
CMsgClientSiteLicenseGetContentCacheInfoResponse::CMsgClientSiteLicenseGetContentCacheInfoResponse(const CMsgClientSiteLicenseGetContentCacheInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ip_address()) {
    ip_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip_address(), 
      GetArenaForAllocation());
  }
  ::memcpy(&use_cache_, &from.use_cache_,
    static_cast<size_t>(reinterpret_cast<char*>(&p2p_group_) -
    reinterpret_cast<char*>(&use_cache_)) + sizeof(p2p_group_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientSiteLicenseGetContentCacheInfoResponse)
}

inline void CMsgClientSiteLicenseGetContentCacheInfoResponse::SharedCtor() {
ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&use_cache_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&p2p_group_) -
    reinterpret_cast<char*>(&use_cache_)) + sizeof(p2p_group_));
}

CMsgClientSiteLicenseGetContentCacheInfoResponse::~CMsgClientSiteLicenseGetContentCacheInfoResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientSiteLicenseGetContentCacheInfoResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientSiteLicenseGetContentCacheInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ip_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientSiteLicenseGetContentCacheInfoResponse::ArenaDtor(void* object) {
  CMsgClientSiteLicenseGetContentCacheInfoResponse* _this = reinterpret_cast< CMsgClientSiteLicenseGetContentCacheInfoResponse* >(object);
  (void)_this;
}
void CMsgClientSiteLicenseGetContentCacheInfoResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientSiteLicenseGetContentCacheInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientSiteLicenseGetContentCacheInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientSiteLicenseGetContentCacheInfoResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ip_address_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&use_cache_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&p2p_group_) -
        reinterpret_cast<char*>(&use_cache_)) + sizeof(p2p_group_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientSiteLicenseGetContentCacheInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool use_cache = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_use_cache(&has_bits);
          use_cache_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ipv4_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_ipv4_address(&has_bits);
          ipv4_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 port_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_port_number(&has_bits);
          port_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 p2p_group = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_p2p_group(&has_bits);
          p2p_group_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string ip_address = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_ip_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientSiteLicenseGetContentCacheInfoResponse.ip_address");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientSiteLicenseGetContentCacheInfoResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientSiteLicenseGetContentCacheInfoResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool use_cache = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_use_cache(), target);
  }

  // optional uint32 ipv4_address = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ipv4_address(), target);
  }

  // optional uint32 port_number = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_port_number(), target);
  }

  // optional uint32 p2p_group = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_p2p_group(), target);
  }

  // optional string ip_address = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ip_address().data(), static_cast<int>(this->_internal_ip_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientSiteLicenseGetContentCacheInfoResponse.ip_address");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_ip_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientSiteLicenseGetContentCacheInfoResponse)
  return target;
}

size_t CMsgClientSiteLicenseGetContentCacheInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientSiteLicenseGetContentCacheInfoResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string ip_address = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ip_address());
    }

    // optional bool use_cache = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional uint32 ipv4_address = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ipv4_address());
    }

    // optional uint32 port_number = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_port_number());
    }

    // optional uint32 p2p_group = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_p2p_group());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientSiteLicenseGetContentCacheInfoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientSiteLicenseGetContentCacheInfoResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientSiteLicenseGetContentCacheInfoResponse::GetClassData() const { return &_class_data_; }

void CMsgClientSiteLicenseGetContentCacheInfoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientSiteLicenseGetContentCacheInfoResponse *>(to)->MergeFrom(
      static_cast<const CMsgClientSiteLicenseGetContentCacheInfoResponse &>(from));
}


void CMsgClientSiteLicenseGetContentCacheInfoResponse::MergeFrom(const CMsgClientSiteLicenseGetContentCacheInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientSiteLicenseGetContentCacheInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_ip_address(from._internal_ip_address());
    }
    if (cached_has_bits & 0x00000002u) {
      use_cache_ = from.use_cache_;
    }
    if (cached_has_bits & 0x00000004u) {
      ipv4_address_ = from.ipv4_address_;
    }
    if (cached_has_bits & 0x00000008u) {
      port_number_ = from.port_number_;
    }
    if (cached_has_bits & 0x00000010u) {
      p2p_group_ = from.p2p_group_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientSiteLicenseGetContentCacheInfoResponse::CopyFrom(const CMsgClientSiteLicenseGetContentCacheInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientSiteLicenseGetContentCacheInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientSiteLicenseGetContentCacheInfoResponse::IsInitialized() const {
  return true;
}

void CMsgClientSiteLicenseGetContentCacheInfoResponse::InternalSwap(CMsgClientSiteLicenseGetContentCacheInfoResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ip_address_, lhs_arena,
      &other->ip_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientSiteLicenseGetContentCacheInfoResponse, p2p_group_)
      + sizeof(CMsgClientSiteLicenseGetContentCacheInfoResponse::p2p_group_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientSiteLicenseGetContentCacheInfoResponse, use_cache_)>(
          reinterpret_cast<char*>(&use_cache_),
          reinterpret_cast<char*>(&other->use_cache_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientSiteLicenseGetContentCacheInfoResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fsitelicenseclient_2eproto_getter, &descriptor_table_steammessages_5fsitelicenseclient_2eproto_once,
      file_level_metadata_steammessages_5fsitelicenseclient_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMsgClientSiteInfo* Arena::CreateMaybeMessage< ::CMsgClientSiteInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientSiteInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientSiteLicenseCheckout* Arena::CreateMaybeMessage< ::CMsgClientSiteLicenseCheckout >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientSiteLicenseCheckout >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientSiteLicenseCheckoutResponse* Arena::CreateMaybeMessage< ::CMsgClientSiteLicenseCheckoutResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientSiteLicenseCheckoutResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientSiteLicenseGetAvailableSeats* Arena::CreateMaybeMessage< ::CMsgClientSiteLicenseGetAvailableSeats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientSiteLicenseGetAvailableSeats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientSiteLicenseGetAvailableSeatsResponse* Arena::CreateMaybeMessage< ::CMsgClientSiteLicenseGetAvailableSeatsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientSiteLicenseGetAvailableSeatsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientSiteLicenseGetContentCacheInfo* Arena::CreateMaybeMessage< ::CMsgClientSiteLicenseGetContentCacheInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientSiteLicenseGetContentCacheInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientSiteLicenseGetContentCacheInfoResponse* Arena::CreateMaybeMessage< ::CMsgClientSiteLicenseGetContentCacheInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientSiteLicenseGetContentCacheInfoResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
