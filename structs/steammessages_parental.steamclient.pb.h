// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_parental.steamclient.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_steammessages_5fparental_2esteamclient_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_steammessages_5fparental_2esteamclient_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "steammessages_base.pb.h"
#include "steammessages_unified_base.steamclient.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_5fparental_2esteamclient_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_5fparental_2esteamclient_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[25]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fparental_2esteamclient_2eproto;
class CParental_DisableParentalSettings_Request;
struct CParental_DisableParentalSettings_RequestDefaultTypeInternal;
extern CParental_DisableParentalSettings_RequestDefaultTypeInternal _CParental_DisableParentalSettings_Request_default_instance_;
class CParental_DisableParentalSettings_Response;
struct CParental_DisableParentalSettings_ResponseDefaultTypeInternal;
extern CParental_DisableParentalSettings_ResponseDefaultTypeInternal _CParental_DisableParentalSettings_Response_default_instance_;
class CParental_DisableWithRecoveryCode_Request;
struct CParental_DisableWithRecoveryCode_RequestDefaultTypeInternal;
extern CParental_DisableWithRecoveryCode_RequestDefaultTypeInternal _CParental_DisableWithRecoveryCode_Request_default_instance_;
class CParental_DisableWithRecoveryCode_Response;
struct CParental_DisableWithRecoveryCode_ResponseDefaultTypeInternal;
extern CParental_DisableWithRecoveryCode_ResponseDefaultTypeInternal _CParental_DisableWithRecoveryCode_Response_default_instance_;
class CParental_EnableParentalSettings_Request;
struct CParental_EnableParentalSettings_RequestDefaultTypeInternal;
extern CParental_EnableParentalSettings_RequestDefaultTypeInternal _CParental_EnableParentalSettings_Request_default_instance_;
class CParental_EnableParentalSettings_Response;
struct CParental_EnableParentalSettings_ResponseDefaultTypeInternal;
extern CParental_EnableParentalSettings_ResponseDefaultTypeInternal _CParental_EnableParentalSettings_Response_default_instance_;
class CParental_GetParentalSettings_Request;
struct CParental_GetParentalSettings_RequestDefaultTypeInternal;
extern CParental_GetParentalSettings_RequestDefaultTypeInternal _CParental_GetParentalSettings_Request_default_instance_;
class CParental_GetParentalSettings_Response;
struct CParental_GetParentalSettings_ResponseDefaultTypeInternal;
extern CParental_GetParentalSettings_ResponseDefaultTypeInternal _CParental_GetParentalSettings_Response_default_instance_;
class CParental_GetSignedParentalSettings_Request;
struct CParental_GetSignedParentalSettings_RequestDefaultTypeInternal;
extern CParental_GetSignedParentalSettings_RequestDefaultTypeInternal _CParental_GetSignedParentalSettings_Request_default_instance_;
class CParental_GetSignedParentalSettings_Response;
struct CParental_GetSignedParentalSettings_ResponseDefaultTypeInternal;
extern CParental_GetSignedParentalSettings_ResponseDefaultTypeInternal _CParental_GetSignedParentalSettings_Response_default_instance_;
class CParental_LockClient_Request;
struct CParental_LockClient_RequestDefaultTypeInternal;
extern CParental_LockClient_RequestDefaultTypeInternal _CParental_LockClient_Request_default_instance_;
class CParental_LockClient_Response;
struct CParental_LockClient_ResponseDefaultTypeInternal;
extern CParental_LockClient_ResponseDefaultTypeInternal _CParental_LockClient_Response_default_instance_;
class CParental_ParentalLock_Notification;
struct CParental_ParentalLock_NotificationDefaultTypeInternal;
extern CParental_ParentalLock_NotificationDefaultTypeInternal _CParental_ParentalLock_Notification_default_instance_;
class CParental_ParentalSettingsChange_Notification;
struct CParental_ParentalSettingsChange_NotificationDefaultTypeInternal;
extern CParental_ParentalSettingsChange_NotificationDefaultTypeInternal _CParental_ParentalSettingsChange_Notification_default_instance_;
class CParental_ParentalUnlock_Notification;
struct CParental_ParentalUnlock_NotificationDefaultTypeInternal;
extern CParental_ParentalUnlock_NotificationDefaultTypeInternal _CParental_ParentalUnlock_Notification_default_instance_;
class CParental_RequestRecoveryCode_Request;
struct CParental_RequestRecoveryCode_RequestDefaultTypeInternal;
extern CParental_RequestRecoveryCode_RequestDefaultTypeInternal _CParental_RequestRecoveryCode_Request_default_instance_;
class CParental_RequestRecoveryCode_Response;
struct CParental_RequestRecoveryCode_ResponseDefaultTypeInternal;
extern CParental_RequestRecoveryCode_ResponseDefaultTypeInternal _CParental_RequestRecoveryCode_Response_default_instance_;
class CParental_SetParentalSettings_Request;
struct CParental_SetParentalSettings_RequestDefaultTypeInternal;
extern CParental_SetParentalSettings_RequestDefaultTypeInternal _CParental_SetParentalSettings_Request_default_instance_;
class CParental_SetParentalSettings_Response;
struct CParental_SetParentalSettings_ResponseDefaultTypeInternal;
extern CParental_SetParentalSettings_ResponseDefaultTypeInternal _CParental_SetParentalSettings_Response_default_instance_;
class CParental_ValidatePassword_Request;
struct CParental_ValidatePassword_RequestDefaultTypeInternal;
extern CParental_ValidatePassword_RequestDefaultTypeInternal _CParental_ValidatePassword_Request_default_instance_;
class CParental_ValidatePassword_Response;
struct CParental_ValidatePassword_ResponseDefaultTypeInternal;
extern CParental_ValidatePassword_ResponseDefaultTypeInternal _CParental_ValidatePassword_Response_default_instance_;
class CParental_ValidateToken_Request;
struct CParental_ValidateToken_RequestDefaultTypeInternal;
extern CParental_ValidateToken_RequestDefaultTypeInternal _CParental_ValidateToken_Request_default_instance_;
class CParental_ValidateToken_Response;
struct CParental_ValidateToken_ResponseDefaultTypeInternal;
extern CParental_ValidateToken_ResponseDefaultTypeInternal _CParental_ValidateToken_Response_default_instance_;
class ParentalApp;
struct ParentalAppDefaultTypeInternal;
extern ParentalAppDefaultTypeInternal _ParentalApp_default_instance_;
class ParentalSettings;
struct ParentalSettingsDefaultTypeInternal;
extern ParentalSettingsDefaultTypeInternal _ParentalSettings_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CParental_DisableParentalSettings_Request* Arena::CreateMaybeMessage<::CParental_DisableParentalSettings_Request>(Arena*);
template<> ::CParental_DisableParentalSettings_Response* Arena::CreateMaybeMessage<::CParental_DisableParentalSettings_Response>(Arena*);
template<> ::CParental_DisableWithRecoveryCode_Request* Arena::CreateMaybeMessage<::CParental_DisableWithRecoveryCode_Request>(Arena*);
template<> ::CParental_DisableWithRecoveryCode_Response* Arena::CreateMaybeMessage<::CParental_DisableWithRecoveryCode_Response>(Arena*);
template<> ::CParental_EnableParentalSettings_Request* Arena::CreateMaybeMessage<::CParental_EnableParentalSettings_Request>(Arena*);
template<> ::CParental_EnableParentalSettings_Response* Arena::CreateMaybeMessage<::CParental_EnableParentalSettings_Response>(Arena*);
template<> ::CParental_GetParentalSettings_Request* Arena::CreateMaybeMessage<::CParental_GetParentalSettings_Request>(Arena*);
template<> ::CParental_GetParentalSettings_Response* Arena::CreateMaybeMessage<::CParental_GetParentalSettings_Response>(Arena*);
template<> ::CParental_GetSignedParentalSettings_Request* Arena::CreateMaybeMessage<::CParental_GetSignedParentalSettings_Request>(Arena*);
template<> ::CParental_GetSignedParentalSettings_Response* Arena::CreateMaybeMessage<::CParental_GetSignedParentalSettings_Response>(Arena*);
template<> ::CParental_LockClient_Request* Arena::CreateMaybeMessage<::CParental_LockClient_Request>(Arena*);
template<> ::CParental_LockClient_Response* Arena::CreateMaybeMessage<::CParental_LockClient_Response>(Arena*);
template<> ::CParental_ParentalLock_Notification* Arena::CreateMaybeMessage<::CParental_ParentalLock_Notification>(Arena*);
template<> ::CParental_ParentalSettingsChange_Notification* Arena::CreateMaybeMessage<::CParental_ParentalSettingsChange_Notification>(Arena*);
template<> ::CParental_ParentalUnlock_Notification* Arena::CreateMaybeMessage<::CParental_ParentalUnlock_Notification>(Arena*);
template<> ::CParental_RequestRecoveryCode_Request* Arena::CreateMaybeMessage<::CParental_RequestRecoveryCode_Request>(Arena*);
template<> ::CParental_RequestRecoveryCode_Response* Arena::CreateMaybeMessage<::CParental_RequestRecoveryCode_Response>(Arena*);
template<> ::CParental_SetParentalSettings_Request* Arena::CreateMaybeMessage<::CParental_SetParentalSettings_Request>(Arena*);
template<> ::CParental_SetParentalSettings_Response* Arena::CreateMaybeMessage<::CParental_SetParentalSettings_Response>(Arena*);
template<> ::CParental_ValidatePassword_Request* Arena::CreateMaybeMessage<::CParental_ValidatePassword_Request>(Arena*);
template<> ::CParental_ValidatePassword_Response* Arena::CreateMaybeMessage<::CParental_ValidatePassword_Response>(Arena*);
template<> ::CParental_ValidateToken_Request* Arena::CreateMaybeMessage<::CParental_ValidateToken_Request>(Arena*);
template<> ::CParental_ValidateToken_Response* Arena::CreateMaybeMessage<::CParental_ValidateToken_Response>(Arena*);
template<> ::ParentalApp* Arena::CreateMaybeMessage<::ParentalApp>(Arena*);
template<> ::ParentalSettings* Arena::CreateMaybeMessage<::ParentalSettings>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class ParentalApp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ParentalApp) */ {
 public:
  inline ParentalApp() : ParentalApp(nullptr) {}
  ~ParentalApp() override;
  explicit constexpr ParentalApp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ParentalApp(const ParentalApp& from);
  ParentalApp(ParentalApp&& from) noexcept
    : ParentalApp() {
    *this = ::std::move(from);
  }

  inline ParentalApp& operator=(const ParentalApp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParentalApp& operator=(ParentalApp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ParentalApp& default_instance() {
    return *internal_default_instance();
  }
  static inline const ParentalApp* internal_default_instance() {
    return reinterpret_cast<const ParentalApp*>(
               &_ParentalApp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ParentalApp& a, ParentalApp& b) {
    a.Swap(&b);
  }
  inline void Swap(ParentalApp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ParentalApp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ParentalApp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ParentalApp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ParentalApp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ParentalApp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParentalApp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ParentalApp";
  }
  protected:
  explicit ParentalApp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppidFieldNumber = 1,
    kIsAllowedFieldNumber = 2,
  };
  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional bool is_allowed = 2;
  bool has_is_allowed() const;
  private:
  bool _internal_has_is_allowed() const;
  public:
  void clear_is_allowed();
  bool is_allowed() const;
  void set_is_allowed(bool value);
  private:
  bool _internal_is_allowed() const;
  void _internal_set_is_allowed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ParentalApp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t appid_;
  bool is_allowed_;
  friend struct ::TableStruct_steammessages_5fparental_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class ParentalSettings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ParentalSettings) */ {
 public:
  inline ParentalSettings() : ParentalSettings(nullptr) {}
  ~ParentalSettings() override;
  explicit constexpr ParentalSettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ParentalSettings(const ParentalSettings& from);
  ParentalSettings(ParentalSettings&& from) noexcept
    : ParentalSettings() {
    *this = ::std::move(from);
  }

  inline ParentalSettings& operator=(const ParentalSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParentalSettings& operator=(ParentalSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ParentalSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const ParentalSettings* internal_default_instance() {
    return reinterpret_cast<const ParentalSettings*>(
               &_ParentalSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ParentalSettings& a, ParentalSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(ParentalSettings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ParentalSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ParentalSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ParentalSettings>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ParentalSettings& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ParentalSettings& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParentalSettings* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ParentalSettings";
  }
  protected:
  explicit ParentalSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApplistBaseFieldNumber = 4,
    kApplistCustomFieldNumber = 5,
    kApplistBaseDescriptionFieldNumber = 3,
    kSaltFieldNumber = 7,
    kPasswordhashFieldNumber = 8,
    kRecoveryEmailFieldNumber = 11,
    kSteamidFieldNumber = 1,
    kApplistBaseIdFieldNumber = 2,
    kPasswordhashtypeFieldNumber = 6,
    kEnabledFeaturesFieldNumber = 10,
    kIsEnabledFieldNumber = 9,
    kIsSiteLicenseLockFieldNumber = 12,
  };
  // repeated .ParentalApp applist_base = 4;
  int applist_base_size() const;
  private:
  int _internal_applist_base_size() const;
  public:
  void clear_applist_base();
  ::ParentalApp* mutable_applist_base(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ParentalApp >*
      mutable_applist_base();
  private:
  const ::ParentalApp& _internal_applist_base(int index) const;
  ::ParentalApp* _internal_add_applist_base();
  public:
  const ::ParentalApp& applist_base(int index) const;
  ::ParentalApp* add_applist_base();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ParentalApp >&
      applist_base() const;

  // repeated .ParentalApp applist_custom = 5;
  int applist_custom_size() const;
  private:
  int _internal_applist_custom_size() const;
  public:
  void clear_applist_custom();
  ::ParentalApp* mutable_applist_custom(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ParentalApp >*
      mutable_applist_custom();
  private:
  const ::ParentalApp& _internal_applist_custom(int index) const;
  ::ParentalApp* _internal_add_applist_custom();
  public:
  const ::ParentalApp& applist_custom(int index) const;
  ::ParentalApp* add_applist_custom();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ParentalApp >&
      applist_custom() const;

  // optional string applist_base_description = 3;
  bool has_applist_base_description() const;
  private:
  bool _internal_has_applist_base_description() const;
  public:
  void clear_applist_base_description();
  const std::string& applist_base_description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_applist_base_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_applist_base_description();
  PROTOBUF_NODISCARD std::string* release_applist_base_description();
  void set_allocated_applist_base_description(std::string* applist_base_description);
  private:
  const std::string& _internal_applist_base_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_applist_base_description(const std::string& value);
  std::string* _internal_mutable_applist_base_description();
  public:

  // optional bytes salt = 7;
  bool has_salt() const;
  private:
  bool _internal_has_salt() const;
  public:
  void clear_salt();
  const std::string& salt() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_salt(ArgT0&& arg0, ArgT... args);
  std::string* mutable_salt();
  PROTOBUF_NODISCARD std::string* release_salt();
  void set_allocated_salt(std::string* salt);
  private:
  const std::string& _internal_salt() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_salt(const std::string& value);
  std::string* _internal_mutable_salt();
  public:

  // optional bytes passwordhash = 8;
  bool has_passwordhash() const;
  private:
  bool _internal_has_passwordhash() const;
  public:
  void clear_passwordhash();
  const std::string& passwordhash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_passwordhash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_passwordhash();
  PROTOBUF_NODISCARD std::string* release_passwordhash();
  void set_allocated_passwordhash(std::string* passwordhash);
  private:
  const std::string& _internal_passwordhash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_passwordhash(const std::string& value);
  std::string* _internal_mutable_passwordhash();
  public:

  // optional string recovery_email = 11;
  bool has_recovery_email() const;
  private:
  bool _internal_has_recovery_email() const;
  public:
  void clear_recovery_email();
  const std::string& recovery_email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_recovery_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_recovery_email();
  PROTOBUF_NODISCARD std::string* release_recovery_email();
  void set_allocated_recovery_email(std::string* recovery_email);
  private:
  const std::string& _internal_recovery_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recovery_email(const std::string& value);
  std::string* _internal_mutable_recovery_email();
  public:

  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional uint32 applist_base_id = 2;
  bool has_applist_base_id() const;
  private:
  bool _internal_has_applist_base_id() const;
  public:
  void clear_applist_base_id();
  uint32_t applist_base_id() const;
  void set_applist_base_id(uint32_t value);
  private:
  uint32_t _internal_applist_base_id() const;
  void _internal_set_applist_base_id(uint32_t value);
  public:

  // optional uint32 passwordhashtype = 6;
  bool has_passwordhashtype() const;
  private:
  bool _internal_has_passwordhashtype() const;
  public:
  void clear_passwordhashtype();
  uint32_t passwordhashtype() const;
  void set_passwordhashtype(uint32_t value);
  private:
  uint32_t _internal_passwordhashtype() const;
  void _internal_set_passwordhashtype(uint32_t value);
  public:

  // optional uint32 enabled_features = 10;
  bool has_enabled_features() const;
  private:
  bool _internal_has_enabled_features() const;
  public:
  void clear_enabled_features();
  uint32_t enabled_features() const;
  void set_enabled_features(uint32_t value);
  private:
  uint32_t _internal_enabled_features() const;
  void _internal_set_enabled_features(uint32_t value);
  public:

  // optional bool is_enabled = 9;
  bool has_is_enabled() const;
  private:
  bool _internal_has_is_enabled() const;
  public:
  void clear_is_enabled();
  bool is_enabled() const;
  void set_is_enabled(bool value);
  private:
  bool _internal_is_enabled() const;
  void _internal_set_is_enabled(bool value);
  public:

  // optional bool is_site_license_lock = 12;
  bool has_is_site_license_lock() const;
  private:
  bool _internal_has_is_site_license_lock() const;
  public:
  void clear_is_site_license_lock();
  bool is_site_license_lock() const;
  void set_is_site_license_lock(bool value);
  private:
  bool _internal_is_site_license_lock() const;
  void _internal_set_is_site_license_lock(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ParentalSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ParentalApp > applist_base_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ParentalApp > applist_custom_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr applist_base_description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr salt_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr passwordhash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recovery_email_;
  uint64_t steamid_;
  uint32_t applist_base_id_;
  uint32_t passwordhashtype_;
  uint32_t enabled_features_;
  bool is_enabled_;
  bool is_site_license_lock_;
  friend struct ::TableStruct_steammessages_5fparental_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CParental_EnableParentalSettings_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CParental_EnableParentalSettings_Request) */ {
 public:
  inline CParental_EnableParentalSettings_Request() : CParental_EnableParentalSettings_Request(nullptr) {}
  ~CParental_EnableParentalSettings_Request() override;
  explicit constexpr CParental_EnableParentalSettings_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CParental_EnableParentalSettings_Request(const CParental_EnableParentalSettings_Request& from);
  CParental_EnableParentalSettings_Request(CParental_EnableParentalSettings_Request&& from) noexcept
    : CParental_EnableParentalSettings_Request() {
    *this = ::std::move(from);
  }

  inline CParental_EnableParentalSettings_Request& operator=(const CParental_EnableParentalSettings_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CParental_EnableParentalSettings_Request& operator=(CParental_EnableParentalSettings_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CParental_EnableParentalSettings_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CParental_EnableParentalSettings_Request* internal_default_instance() {
    return reinterpret_cast<const CParental_EnableParentalSettings_Request*>(
               &_CParental_EnableParentalSettings_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CParental_EnableParentalSettings_Request& a, CParental_EnableParentalSettings_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CParental_EnableParentalSettings_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CParental_EnableParentalSettings_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CParental_EnableParentalSettings_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CParental_EnableParentalSettings_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CParental_EnableParentalSettings_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CParental_EnableParentalSettings_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CParental_EnableParentalSettings_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CParental_EnableParentalSettings_Request";
  }
  protected:
  explicit CParental_EnableParentalSettings_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPasswordFieldNumber = 1,
    kSessionidFieldNumber = 3,
    kSettingsFieldNumber = 2,
    kEnablecodeFieldNumber = 4,
    kSteamidFieldNumber = 10,
  };
  // optional string password = 1;
  bool has_password() const;
  private:
  bool _internal_has_password() const;
  public:
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // optional string sessionid = 3;
  bool has_sessionid() const;
  private:
  bool _internal_has_sessionid() const;
  public:
  void clear_sessionid();
  const std::string& sessionid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sessionid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sessionid();
  PROTOBUF_NODISCARD std::string* release_sessionid();
  void set_allocated_sessionid(std::string* sessionid);
  private:
  const std::string& _internal_sessionid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sessionid(const std::string& value);
  std::string* _internal_mutable_sessionid();
  public:

  // optional .ParentalSettings settings = 2;
  bool has_settings() const;
  private:
  bool _internal_has_settings() const;
  public:
  void clear_settings();
  const ::ParentalSettings& settings() const;
  PROTOBUF_NODISCARD ::ParentalSettings* release_settings();
  ::ParentalSettings* mutable_settings();
  void set_allocated_settings(::ParentalSettings* settings);
  private:
  const ::ParentalSettings& _internal_settings() const;
  ::ParentalSettings* _internal_mutable_settings();
  public:
  void unsafe_arena_set_allocated_settings(
      ::ParentalSettings* settings);
  ::ParentalSettings* unsafe_arena_release_settings();

  // optional uint32 enablecode = 4;
  bool has_enablecode() const;
  private:
  bool _internal_has_enablecode() const;
  public:
  void clear_enablecode();
  uint32_t enablecode() const;
  void set_enablecode(uint32_t value);
  private:
  uint32_t _internal_enablecode() const;
  void _internal_set_enablecode(uint32_t value);
  public:

  // optional fixed64 steamid = 10;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CParental_EnableParentalSettings_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sessionid_;
  ::ParentalSettings* settings_;
  uint32_t enablecode_;
  uint64_t steamid_;
  friend struct ::TableStruct_steammessages_5fparental_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CParental_EnableParentalSettings_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CParental_EnableParentalSettings_Response) */ {
 public:
  inline CParental_EnableParentalSettings_Response() : CParental_EnableParentalSettings_Response(nullptr) {}
  explicit constexpr CParental_EnableParentalSettings_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CParental_EnableParentalSettings_Response(const CParental_EnableParentalSettings_Response& from);
  CParental_EnableParentalSettings_Response(CParental_EnableParentalSettings_Response&& from) noexcept
    : CParental_EnableParentalSettings_Response() {
    *this = ::std::move(from);
  }

  inline CParental_EnableParentalSettings_Response& operator=(const CParental_EnableParentalSettings_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CParental_EnableParentalSettings_Response& operator=(CParental_EnableParentalSettings_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CParental_EnableParentalSettings_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CParental_EnableParentalSettings_Response* internal_default_instance() {
    return reinterpret_cast<const CParental_EnableParentalSettings_Response*>(
               &_CParental_EnableParentalSettings_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CParental_EnableParentalSettings_Response& a, CParental_EnableParentalSettings_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CParental_EnableParentalSettings_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CParental_EnableParentalSettings_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CParental_EnableParentalSettings_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CParental_EnableParentalSettings_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CParental_EnableParentalSettings_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CParental_EnableParentalSettings_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CParental_EnableParentalSettings_Response";
  }
  protected:
  explicit CParental_EnableParentalSettings_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CParental_EnableParentalSettings_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fparental_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CParental_DisableParentalSettings_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CParental_DisableParentalSettings_Request) */ {
 public:
  inline CParental_DisableParentalSettings_Request() : CParental_DisableParentalSettings_Request(nullptr) {}
  ~CParental_DisableParentalSettings_Request() override;
  explicit constexpr CParental_DisableParentalSettings_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CParental_DisableParentalSettings_Request(const CParental_DisableParentalSettings_Request& from);
  CParental_DisableParentalSettings_Request(CParental_DisableParentalSettings_Request&& from) noexcept
    : CParental_DisableParentalSettings_Request() {
    *this = ::std::move(from);
  }

  inline CParental_DisableParentalSettings_Request& operator=(const CParental_DisableParentalSettings_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CParental_DisableParentalSettings_Request& operator=(CParental_DisableParentalSettings_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CParental_DisableParentalSettings_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CParental_DisableParentalSettings_Request* internal_default_instance() {
    return reinterpret_cast<const CParental_DisableParentalSettings_Request*>(
               &_CParental_DisableParentalSettings_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CParental_DisableParentalSettings_Request& a, CParental_DisableParentalSettings_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CParental_DisableParentalSettings_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CParental_DisableParentalSettings_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CParental_DisableParentalSettings_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CParental_DisableParentalSettings_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CParental_DisableParentalSettings_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CParental_DisableParentalSettings_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CParental_DisableParentalSettings_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CParental_DisableParentalSettings_Request";
  }
  protected:
  explicit CParental_DisableParentalSettings_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPasswordFieldNumber = 1,
    kSteamidFieldNumber = 10,
  };
  // optional string password = 1;
  bool has_password() const;
  private:
  bool _internal_has_password() const;
  public:
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // optional fixed64 steamid = 10;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CParental_DisableParentalSettings_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  uint64_t steamid_;
  friend struct ::TableStruct_steammessages_5fparental_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CParental_DisableParentalSettings_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CParental_DisableParentalSettings_Response) */ {
 public:
  inline CParental_DisableParentalSettings_Response() : CParental_DisableParentalSettings_Response(nullptr) {}
  explicit constexpr CParental_DisableParentalSettings_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CParental_DisableParentalSettings_Response(const CParental_DisableParentalSettings_Response& from);
  CParental_DisableParentalSettings_Response(CParental_DisableParentalSettings_Response&& from) noexcept
    : CParental_DisableParentalSettings_Response() {
    *this = ::std::move(from);
  }

  inline CParental_DisableParentalSettings_Response& operator=(const CParental_DisableParentalSettings_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CParental_DisableParentalSettings_Response& operator=(CParental_DisableParentalSettings_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CParental_DisableParentalSettings_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CParental_DisableParentalSettings_Response* internal_default_instance() {
    return reinterpret_cast<const CParental_DisableParentalSettings_Response*>(
               &_CParental_DisableParentalSettings_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CParental_DisableParentalSettings_Response& a, CParental_DisableParentalSettings_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CParental_DisableParentalSettings_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CParental_DisableParentalSettings_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CParental_DisableParentalSettings_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CParental_DisableParentalSettings_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CParental_DisableParentalSettings_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CParental_DisableParentalSettings_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CParental_DisableParentalSettings_Response";
  }
  protected:
  explicit CParental_DisableParentalSettings_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CParental_DisableParentalSettings_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fparental_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CParental_GetParentalSettings_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CParental_GetParentalSettings_Request) */ {
 public:
  inline CParental_GetParentalSettings_Request() : CParental_GetParentalSettings_Request(nullptr) {}
  ~CParental_GetParentalSettings_Request() override;
  explicit constexpr CParental_GetParentalSettings_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CParental_GetParentalSettings_Request(const CParental_GetParentalSettings_Request& from);
  CParental_GetParentalSettings_Request(CParental_GetParentalSettings_Request&& from) noexcept
    : CParental_GetParentalSettings_Request() {
    *this = ::std::move(from);
  }

  inline CParental_GetParentalSettings_Request& operator=(const CParental_GetParentalSettings_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CParental_GetParentalSettings_Request& operator=(CParental_GetParentalSettings_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CParental_GetParentalSettings_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CParental_GetParentalSettings_Request* internal_default_instance() {
    return reinterpret_cast<const CParental_GetParentalSettings_Request*>(
               &_CParental_GetParentalSettings_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CParental_GetParentalSettings_Request& a, CParental_GetParentalSettings_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CParental_GetParentalSettings_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CParental_GetParentalSettings_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CParental_GetParentalSettings_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CParental_GetParentalSettings_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CParental_GetParentalSettings_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CParental_GetParentalSettings_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CParental_GetParentalSettings_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CParental_GetParentalSettings_Request";
  }
  protected:
  explicit CParental_GetParentalSettings_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidFieldNumber = 10,
  };
  // optional fixed64 steamid = 10;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CParental_GetParentalSettings_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t steamid_;
  friend struct ::TableStruct_steammessages_5fparental_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CParental_GetParentalSettings_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CParental_GetParentalSettings_Response) */ {
 public:
  inline CParental_GetParentalSettings_Response() : CParental_GetParentalSettings_Response(nullptr) {}
  ~CParental_GetParentalSettings_Response() override;
  explicit constexpr CParental_GetParentalSettings_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CParental_GetParentalSettings_Response(const CParental_GetParentalSettings_Response& from);
  CParental_GetParentalSettings_Response(CParental_GetParentalSettings_Response&& from) noexcept
    : CParental_GetParentalSettings_Response() {
    *this = ::std::move(from);
  }

  inline CParental_GetParentalSettings_Response& operator=(const CParental_GetParentalSettings_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CParental_GetParentalSettings_Response& operator=(CParental_GetParentalSettings_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CParental_GetParentalSettings_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CParental_GetParentalSettings_Response* internal_default_instance() {
    return reinterpret_cast<const CParental_GetParentalSettings_Response*>(
               &_CParental_GetParentalSettings_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CParental_GetParentalSettings_Response& a, CParental_GetParentalSettings_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CParental_GetParentalSettings_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CParental_GetParentalSettings_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CParental_GetParentalSettings_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CParental_GetParentalSettings_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CParental_GetParentalSettings_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CParental_GetParentalSettings_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CParental_GetParentalSettings_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CParental_GetParentalSettings_Response";
  }
  protected:
  explicit CParental_GetParentalSettings_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSettingsFieldNumber = 1,
  };
  // optional .ParentalSettings settings = 1;
  bool has_settings() const;
  private:
  bool _internal_has_settings() const;
  public:
  void clear_settings();
  const ::ParentalSettings& settings() const;
  PROTOBUF_NODISCARD ::ParentalSettings* release_settings();
  ::ParentalSettings* mutable_settings();
  void set_allocated_settings(::ParentalSettings* settings);
  private:
  const ::ParentalSettings& _internal_settings() const;
  ::ParentalSettings* _internal_mutable_settings();
  public:
  void unsafe_arena_set_allocated_settings(
      ::ParentalSettings* settings);
  ::ParentalSettings* unsafe_arena_release_settings();

  // @@protoc_insertion_point(class_scope:CParental_GetParentalSettings_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::ParentalSettings* settings_;
  friend struct ::TableStruct_steammessages_5fparental_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CParental_GetSignedParentalSettings_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CParental_GetSignedParentalSettings_Request) */ {
 public:
  inline CParental_GetSignedParentalSettings_Request() : CParental_GetSignedParentalSettings_Request(nullptr) {}
  ~CParental_GetSignedParentalSettings_Request() override;
  explicit constexpr CParental_GetSignedParentalSettings_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CParental_GetSignedParentalSettings_Request(const CParental_GetSignedParentalSettings_Request& from);
  CParental_GetSignedParentalSettings_Request(CParental_GetSignedParentalSettings_Request&& from) noexcept
    : CParental_GetSignedParentalSettings_Request() {
    *this = ::std::move(from);
  }

  inline CParental_GetSignedParentalSettings_Request& operator=(const CParental_GetSignedParentalSettings_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CParental_GetSignedParentalSettings_Request& operator=(CParental_GetSignedParentalSettings_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CParental_GetSignedParentalSettings_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CParental_GetSignedParentalSettings_Request* internal_default_instance() {
    return reinterpret_cast<const CParental_GetSignedParentalSettings_Request*>(
               &_CParental_GetSignedParentalSettings_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CParental_GetSignedParentalSettings_Request& a, CParental_GetSignedParentalSettings_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CParental_GetSignedParentalSettings_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CParental_GetSignedParentalSettings_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CParental_GetSignedParentalSettings_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CParental_GetSignedParentalSettings_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CParental_GetSignedParentalSettings_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CParental_GetSignedParentalSettings_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CParental_GetSignedParentalSettings_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CParental_GetSignedParentalSettings_Request";
  }
  protected:
  explicit CParental_GetSignedParentalSettings_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriorityFieldNumber = 1,
  };
  // optional uint32 priority = 1;
  bool has_priority() const;
  private:
  bool _internal_has_priority() const;
  public:
  void clear_priority();
  uint32_t priority() const;
  void set_priority(uint32_t value);
  private:
  uint32_t _internal_priority() const;
  void _internal_set_priority(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CParental_GetSignedParentalSettings_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t priority_;
  friend struct ::TableStruct_steammessages_5fparental_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CParental_GetSignedParentalSettings_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CParental_GetSignedParentalSettings_Response) */ {
 public:
  inline CParental_GetSignedParentalSettings_Response() : CParental_GetSignedParentalSettings_Response(nullptr) {}
  ~CParental_GetSignedParentalSettings_Response() override;
  explicit constexpr CParental_GetSignedParentalSettings_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CParental_GetSignedParentalSettings_Response(const CParental_GetSignedParentalSettings_Response& from);
  CParental_GetSignedParentalSettings_Response(CParental_GetSignedParentalSettings_Response&& from) noexcept
    : CParental_GetSignedParentalSettings_Response() {
    *this = ::std::move(from);
  }

  inline CParental_GetSignedParentalSettings_Response& operator=(const CParental_GetSignedParentalSettings_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CParental_GetSignedParentalSettings_Response& operator=(CParental_GetSignedParentalSettings_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CParental_GetSignedParentalSettings_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CParental_GetSignedParentalSettings_Response* internal_default_instance() {
    return reinterpret_cast<const CParental_GetSignedParentalSettings_Response*>(
               &_CParental_GetSignedParentalSettings_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CParental_GetSignedParentalSettings_Response& a, CParental_GetSignedParentalSettings_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CParental_GetSignedParentalSettings_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CParental_GetSignedParentalSettings_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CParental_GetSignedParentalSettings_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CParental_GetSignedParentalSettings_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CParental_GetSignedParentalSettings_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CParental_GetSignedParentalSettings_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CParental_GetSignedParentalSettings_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CParental_GetSignedParentalSettings_Response";
  }
  protected:
  explicit CParental_GetSignedParentalSettings_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSerializedSettingsFieldNumber = 1,
    kSignatureFieldNumber = 2,
  };
  // optional bytes serialized_settings = 1;
  bool has_serialized_settings() const;
  private:
  bool _internal_has_serialized_settings() const;
  public:
  void clear_serialized_settings();
  const std::string& serialized_settings() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serialized_settings(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serialized_settings();
  PROTOBUF_NODISCARD std::string* release_serialized_settings();
  void set_allocated_serialized_settings(std::string* serialized_settings);
  private:
  const std::string& _internal_serialized_settings() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serialized_settings(const std::string& value);
  std::string* _internal_mutable_serialized_settings();
  public:

  // optional bytes signature = 2;
  bool has_signature() const;
  private:
  bool _internal_has_signature() const;
  public:
  void clear_signature();
  const std::string& signature() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_signature(ArgT0&& arg0, ArgT... args);
  std::string* mutable_signature();
  PROTOBUF_NODISCARD std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // @@protoc_insertion_point(class_scope:CParental_GetSignedParentalSettings_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serialized_settings_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  friend struct ::TableStruct_steammessages_5fparental_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CParental_SetParentalSettings_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CParental_SetParentalSettings_Request) */ {
 public:
  inline CParental_SetParentalSettings_Request() : CParental_SetParentalSettings_Request(nullptr) {}
  ~CParental_SetParentalSettings_Request() override;
  explicit constexpr CParental_SetParentalSettings_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CParental_SetParentalSettings_Request(const CParental_SetParentalSettings_Request& from);
  CParental_SetParentalSettings_Request(CParental_SetParentalSettings_Request&& from) noexcept
    : CParental_SetParentalSettings_Request() {
    *this = ::std::move(from);
  }

  inline CParental_SetParentalSettings_Request& operator=(const CParental_SetParentalSettings_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CParental_SetParentalSettings_Request& operator=(CParental_SetParentalSettings_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CParental_SetParentalSettings_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CParental_SetParentalSettings_Request* internal_default_instance() {
    return reinterpret_cast<const CParental_SetParentalSettings_Request*>(
               &_CParental_SetParentalSettings_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CParental_SetParentalSettings_Request& a, CParental_SetParentalSettings_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CParental_SetParentalSettings_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CParental_SetParentalSettings_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CParental_SetParentalSettings_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CParental_SetParentalSettings_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CParental_SetParentalSettings_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CParental_SetParentalSettings_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CParental_SetParentalSettings_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CParental_SetParentalSettings_Request";
  }
  protected:
  explicit CParental_SetParentalSettings_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPasswordFieldNumber = 1,
    kNewPasswordFieldNumber = 3,
    kSessionidFieldNumber = 4,
    kSettingsFieldNumber = 2,
    kSteamidFieldNumber = 10,
  };
  // optional string password = 1;
  bool has_password() const;
  private:
  bool _internal_has_password() const;
  public:
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // optional string new_password = 3;
  bool has_new_password() const;
  private:
  bool _internal_has_new_password() const;
  public:
  void clear_new_password();
  const std::string& new_password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_new_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_new_password();
  PROTOBUF_NODISCARD std::string* release_new_password();
  void set_allocated_new_password(std::string* new_password);
  private:
  const std::string& _internal_new_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_new_password(const std::string& value);
  std::string* _internal_mutable_new_password();
  public:

  // optional string sessionid = 4;
  bool has_sessionid() const;
  private:
  bool _internal_has_sessionid() const;
  public:
  void clear_sessionid();
  const std::string& sessionid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sessionid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sessionid();
  PROTOBUF_NODISCARD std::string* release_sessionid();
  void set_allocated_sessionid(std::string* sessionid);
  private:
  const std::string& _internal_sessionid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sessionid(const std::string& value);
  std::string* _internal_mutable_sessionid();
  public:

  // optional .ParentalSettings settings = 2;
  bool has_settings() const;
  private:
  bool _internal_has_settings() const;
  public:
  void clear_settings();
  const ::ParentalSettings& settings() const;
  PROTOBUF_NODISCARD ::ParentalSettings* release_settings();
  ::ParentalSettings* mutable_settings();
  void set_allocated_settings(::ParentalSettings* settings);
  private:
  const ::ParentalSettings& _internal_settings() const;
  ::ParentalSettings* _internal_mutable_settings();
  public:
  void unsafe_arena_set_allocated_settings(
      ::ParentalSettings* settings);
  ::ParentalSettings* unsafe_arena_release_settings();

  // optional fixed64 steamid = 10;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CParental_SetParentalSettings_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr new_password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sessionid_;
  ::ParentalSettings* settings_;
  uint64_t steamid_;
  friend struct ::TableStruct_steammessages_5fparental_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CParental_SetParentalSettings_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CParental_SetParentalSettings_Response) */ {
 public:
  inline CParental_SetParentalSettings_Response() : CParental_SetParentalSettings_Response(nullptr) {}
  explicit constexpr CParental_SetParentalSettings_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CParental_SetParentalSettings_Response(const CParental_SetParentalSettings_Response& from);
  CParental_SetParentalSettings_Response(CParental_SetParentalSettings_Response&& from) noexcept
    : CParental_SetParentalSettings_Response() {
    *this = ::std::move(from);
  }

  inline CParental_SetParentalSettings_Response& operator=(const CParental_SetParentalSettings_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CParental_SetParentalSettings_Response& operator=(CParental_SetParentalSettings_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CParental_SetParentalSettings_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CParental_SetParentalSettings_Response* internal_default_instance() {
    return reinterpret_cast<const CParental_SetParentalSettings_Response*>(
               &_CParental_SetParentalSettings_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CParental_SetParentalSettings_Response& a, CParental_SetParentalSettings_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CParental_SetParentalSettings_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CParental_SetParentalSettings_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CParental_SetParentalSettings_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CParental_SetParentalSettings_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CParental_SetParentalSettings_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CParental_SetParentalSettings_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CParental_SetParentalSettings_Response";
  }
  protected:
  explicit CParental_SetParentalSettings_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CParental_SetParentalSettings_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fparental_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CParental_ValidateToken_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CParental_ValidateToken_Request) */ {
 public:
  inline CParental_ValidateToken_Request() : CParental_ValidateToken_Request(nullptr) {}
  ~CParental_ValidateToken_Request() override;
  explicit constexpr CParental_ValidateToken_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CParental_ValidateToken_Request(const CParental_ValidateToken_Request& from);
  CParental_ValidateToken_Request(CParental_ValidateToken_Request&& from) noexcept
    : CParental_ValidateToken_Request() {
    *this = ::std::move(from);
  }

  inline CParental_ValidateToken_Request& operator=(const CParental_ValidateToken_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CParental_ValidateToken_Request& operator=(CParental_ValidateToken_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CParental_ValidateToken_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CParental_ValidateToken_Request* internal_default_instance() {
    return reinterpret_cast<const CParental_ValidateToken_Request*>(
               &_CParental_ValidateToken_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CParental_ValidateToken_Request& a, CParental_ValidateToken_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CParental_ValidateToken_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CParental_ValidateToken_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CParental_ValidateToken_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CParental_ValidateToken_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CParental_ValidateToken_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CParental_ValidateToken_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CParental_ValidateToken_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CParental_ValidateToken_Request";
  }
  protected:
  explicit CParental_ValidateToken_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnlockTokenFieldNumber = 1,
  };
  // optional string unlock_token = 1;
  bool has_unlock_token() const;
  private:
  bool _internal_has_unlock_token() const;
  public:
  void clear_unlock_token();
  const std::string& unlock_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_unlock_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_unlock_token();
  PROTOBUF_NODISCARD std::string* release_unlock_token();
  void set_allocated_unlock_token(std::string* unlock_token);
  private:
  const std::string& _internal_unlock_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unlock_token(const std::string& value);
  std::string* _internal_mutable_unlock_token();
  public:

  // @@protoc_insertion_point(class_scope:CParental_ValidateToken_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unlock_token_;
  friend struct ::TableStruct_steammessages_5fparental_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CParental_ValidateToken_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CParental_ValidateToken_Response) */ {
 public:
  inline CParental_ValidateToken_Response() : CParental_ValidateToken_Response(nullptr) {}
  explicit constexpr CParental_ValidateToken_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CParental_ValidateToken_Response(const CParental_ValidateToken_Response& from);
  CParental_ValidateToken_Response(CParental_ValidateToken_Response&& from) noexcept
    : CParental_ValidateToken_Response() {
    *this = ::std::move(from);
  }

  inline CParental_ValidateToken_Response& operator=(const CParental_ValidateToken_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CParental_ValidateToken_Response& operator=(CParental_ValidateToken_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CParental_ValidateToken_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CParental_ValidateToken_Response* internal_default_instance() {
    return reinterpret_cast<const CParental_ValidateToken_Response*>(
               &_CParental_ValidateToken_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CParental_ValidateToken_Response& a, CParental_ValidateToken_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CParental_ValidateToken_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CParental_ValidateToken_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CParental_ValidateToken_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CParental_ValidateToken_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CParental_ValidateToken_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CParental_ValidateToken_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CParental_ValidateToken_Response";
  }
  protected:
  explicit CParental_ValidateToken_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CParental_ValidateToken_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fparental_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CParental_ValidatePassword_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CParental_ValidatePassword_Request) */ {
 public:
  inline CParental_ValidatePassword_Request() : CParental_ValidatePassword_Request(nullptr) {}
  ~CParental_ValidatePassword_Request() override;
  explicit constexpr CParental_ValidatePassword_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CParental_ValidatePassword_Request(const CParental_ValidatePassword_Request& from);
  CParental_ValidatePassword_Request(CParental_ValidatePassword_Request&& from) noexcept
    : CParental_ValidatePassword_Request() {
    *this = ::std::move(from);
  }

  inline CParental_ValidatePassword_Request& operator=(const CParental_ValidatePassword_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CParental_ValidatePassword_Request& operator=(CParental_ValidatePassword_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CParental_ValidatePassword_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CParental_ValidatePassword_Request* internal_default_instance() {
    return reinterpret_cast<const CParental_ValidatePassword_Request*>(
               &_CParental_ValidatePassword_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CParental_ValidatePassword_Request& a, CParental_ValidatePassword_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CParental_ValidatePassword_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CParental_ValidatePassword_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CParental_ValidatePassword_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CParental_ValidatePassword_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CParental_ValidatePassword_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CParental_ValidatePassword_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CParental_ValidatePassword_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CParental_ValidatePassword_Request";
  }
  protected:
  explicit CParental_ValidatePassword_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPasswordFieldNumber = 1,
    kSessionFieldNumber = 2,
    kSendUnlockOnSuccessFieldNumber = 3,
  };
  // optional string password = 1;
  bool has_password() const;
  private:
  bool _internal_has_password() const;
  public:
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // optional string session = 2;
  bool has_session() const;
  private:
  bool _internal_has_session() const;
  public:
  void clear_session();
  const std::string& session() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session();
  PROTOBUF_NODISCARD std::string* release_session();
  void set_allocated_session(std::string* session);
  private:
  const std::string& _internal_session() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session(const std::string& value);
  std::string* _internal_mutable_session();
  public:

  // optional bool send_unlock_on_success = 3;
  bool has_send_unlock_on_success() const;
  private:
  bool _internal_has_send_unlock_on_success() const;
  public:
  void clear_send_unlock_on_success();
  bool send_unlock_on_success() const;
  void set_send_unlock_on_success(bool value);
  private:
  bool _internal_send_unlock_on_success() const;
  void _internal_set_send_unlock_on_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CParental_ValidatePassword_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_;
  bool send_unlock_on_success_;
  friend struct ::TableStruct_steammessages_5fparental_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CParental_ValidatePassword_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CParental_ValidatePassword_Response) */ {
 public:
  inline CParental_ValidatePassword_Response() : CParental_ValidatePassword_Response(nullptr) {}
  ~CParental_ValidatePassword_Response() override;
  explicit constexpr CParental_ValidatePassword_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CParental_ValidatePassword_Response(const CParental_ValidatePassword_Response& from);
  CParental_ValidatePassword_Response(CParental_ValidatePassword_Response&& from) noexcept
    : CParental_ValidatePassword_Response() {
    *this = ::std::move(from);
  }

  inline CParental_ValidatePassword_Response& operator=(const CParental_ValidatePassword_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CParental_ValidatePassword_Response& operator=(CParental_ValidatePassword_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CParental_ValidatePassword_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CParental_ValidatePassword_Response* internal_default_instance() {
    return reinterpret_cast<const CParental_ValidatePassword_Response*>(
               &_CParental_ValidatePassword_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CParental_ValidatePassword_Response& a, CParental_ValidatePassword_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CParental_ValidatePassword_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CParental_ValidatePassword_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CParental_ValidatePassword_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CParental_ValidatePassword_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CParental_ValidatePassword_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CParental_ValidatePassword_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CParental_ValidatePassword_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CParental_ValidatePassword_Response";
  }
  protected:
  explicit CParental_ValidatePassword_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
  };
  // optional string token = 1;
  bool has_token() const;
  private:
  bool _internal_has_token() const;
  public:
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // @@protoc_insertion_point(class_scope:CParental_ValidatePassword_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  friend struct ::TableStruct_steammessages_5fparental_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CParental_LockClient_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CParental_LockClient_Request) */ {
 public:
  inline CParental_LockClient_Request() : CParental_LockClient_Request(nullptr) {}
  ~CParental_LockClient_Request() override;
  explicit constexpr CParental_LockClient_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CParental_LockClient_Request(const CParental_LockClient_Request& from);
  CParental_LockClient_Request(CParental_LockClient_Request&& from) noexcept
    : CParental_LockClient_Request() {
    *this = ::std::move(from);
  }

  inline CParental_LockClient_Request& operator=(const CParental_LockClient_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CParental_LockClient_Request& operator=(CParental_LockClient_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CParental_LockClient_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CParental_LockClient_Request* internal_default_instance() {
    return reinterpret_cast<const CParental_LockClient_Request*>(
               &_CParental_LockClient_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CParental_LockClient_Request& a, CParental_LockClient_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CParental_LockClient_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CParental_LockClient_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CParental_LockClient_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CParental_LockClient_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CParental_LockClient_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CParental_LockClient_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CParental_LockClient_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CParental_LockClient_Request";
  }
  protected:
  explicit CParental_LockClient_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionFieldNumber = 1,
  };
  // optional string session = 1;
  bool has_session() const;
  private:
  bool _internal_has_session() const;
  public:
  void clear_session();
  const std::string& session() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session();
  PROTOBUF_NODISCARD std::string* release_session();
  void set_allocated_session(std::string* session);
  private:
  const std::string& _internal_session() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session(const std::string& value);
  std::string* _internal_mutable_session();
  public:

  // @@protoc_insertion_point(class_scope:CParental_LockClient_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_;
  friend struct ::TableStruct_steammessages_5fparental_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CParental_LockClient_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CParental_LockClient_Response) */ {
 public:
  inline CParental_LockClient_Response() : CParental_LockClient_Response(nullptr) {}
  explicit constexpr CParental_LockClient_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CParental_LockClient_Response(const CParental_LockClient_Response& from);
  CParental_LockClient_Response(CParental_LockClient_Response&& from) noexcept
    : CParental_LockClient_Response() {
    *this = ::std::move(from);
  }

  inline CParental_LockClient_Response& operator=(const CParental_LockClient_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CParental_LockClient_Response& operator=(CParental_LockClient_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CParental_LockClient_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CParental_LockClient_Response* internal_default_instance() {
    return reinterpret_cast<const CParental_LockClient_Response*>(
               &_CParental_LockClient_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CParental_LockClient_Response& a, CParental_LockClient_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CParental_LockClient_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CParental_LockClient_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CParental_LockClient_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CParental_LockClient_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CParental_LockClient_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CParental_LockClient_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CParental_LockClient_Response";
  }
  protected:
  explicit CParental_LockClient_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CParental_LockClient_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fparental_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CParental_RequestRecoveryCode_Request final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CParental_RequestRecoveryCode_Request) */ {
 public:
  inline CParental_RequestRecoveryCode_Request() : CParental_RequestRecoveryCode_Request(nullptr) {}
  explicit constexpr CParental_RequestRecoveryCode_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CParental_RequestRecoveryCode_Request(const CParental_RequestRecoveryCode_Request& from);
  CParental_RequestRecoveryCode_Request(CParental_RequestRecoveryCode_Request&& from) noexcept
    : CParental_RequestRecoveryCode_Request() {
    *this = ::std::move(from);
  }

  inline CParental_RequestRecoveryCode_Request& operator=(const CParental_RequestRecoveryCode_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CParental_RequestRecoveryCode_Request& operator=(CParental_RequestRecoveryCode_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CParental_RequestRecoveryCode_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CParental_RequestRecoveryCode_Request* internal_default_instance() {
    return reinterpret_cast<const CParental_RequestRecoveryCode_Request*>(
               &_CParental_RequestRecoveryCode_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CParental_RequestRecoveryCode_Request& a, CParental_RequestRecoveryCode_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CParental_RequestRecoveryCode_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CParental_RequestRecoveryCode_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CParental_RequestRecoveryCode_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CParental_RequestRecoveryCode_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CParental_RequestRecoveryCode_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CParental_RequestRecoveryCode_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CParental_RequestRecoveryCode_Request";
  }
  protected:
  explicit CParental_RequestRecoveryCode_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CParental_RequestRecoveryCode_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fparental_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CParental_RequestRecoveryCode_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CParental_RequestRecoveryCode_Response) */ {
 public:
  inline CParental_RequestRecoveryCode_Response() : CParental_RequestRecoveryCode_Response(nullptr) {}
  explicit constexpr CParental_RequestRecoveryCode_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CParental_RequestRecoveryCode_Response(const CParental_RequestRecoveryCode_Response& from);
  CParental_RequestRecoveryCode_Response(CParental_RequestRecoveryCode_Response&& from) noexcept
    : CParental_RequestRecoveryCode_Response() {
    *this = ::std::move(from);
  }

  inline CParental_RequestRecoveryCode_Response& operator=(const CParental_RequestRecoveryCode_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CParental_RequestRecoveryCode_Response& operator=(CParental_RequestRecoveryCode_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CParental_RequestRecoveryCode_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CParental_RequestRecoveryCode_Response* internal_default_instance() {
    return reinterpret_cast<const CParental_RequestRecoveryCode_Response*>(
               &_CParental_RequestRecoveryCode_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CParental_RequestRecoveryCode_Response& a, CParental_RequestRecoveryCode_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CParental_RequestRecoveryCode_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CParental_RequestRecoveryCode_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CParental_RequestRecoveryCode_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CParental_RequestRecoveryCode_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CParental_RequestRecoveryCode_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CParental_RequestRecoveryCode_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CParental_RequestRecoveryCode_Response";
  }
  protected:
  explicit CParental_RequestRecoveryCode_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CParental_RequestRecoveryCode_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fparental_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CParental_DisableWithRecoveryCode_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CParental_DisableWithRecoveryCode_Request) */ {
 public:
  inline CParental_DisableWithRecoveryCode_Request() : CParental_DisableWithRecoveryCode_Request(nullptr) {}
  ~CParental_DisableWithRecoveryCode_Request() override;
  explicit constexpr CParental_DisableWithRecoveryCode_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CParental_DisableWithRecoveryCode_Request(const CParental_DisableWithRecoveryCode_Request& from);
  CParental_DisableWithRecoveryCode_Request(CParental_DisableWithRecoveryCode_Request&& from) noexcept
    : CParental_DisableWithRecoveryCode_Request() {
    *this = ::std::move(from);
  }

  inline CParental_DisableWithRecoveryCode_Request& operator=(const CParental_DisableWithRecoveryCode_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CParental_DisableWithRecoveryCode_Request& operator=(CParental_DisableWithRecoveryCode_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CParental_DisableWithRecoveryCode_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CParental_DisableWithRecoveryCode_Request* internal_default_instance() {
    return reinterpret_cast<const CParental_DisableWithRecoveryCode_Request*>(
               &_CParental_DisableWithRecoveryCode_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CParental_DisableWithRecoveryCode_Request& a, CParental_DisableWithRecoveryCode_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CParental_DisableWithRecoveryCode_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CParental_DisableWithRecoveryCode_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CParental_DisableWithRecoveryCode_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CParental_DisableWithRecoveryCode_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CParental_DisableWithRecoveryCode_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CParental_DisableWithRecoveryCode_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CParental_DisableWithRecoveryCode_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CParental_DisableWithRecoveryCode_Request";
  }
  protected:
  explicit CParental_DisableWithRecoveryCode_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecoveryCodeFieldNumber = 1,
    kSteamidFieldNumber = 10,
  };
  // optional uint32 recovery_code = 1;
  bool has_recovery_code() const;
  private:
  bool _internal_has_recovery_code() const;
  public:
  void clear_recovery_code();
  uint32_t recovery_code() const;
  void set_recovery_code(uint32_t value);
  private:
  uint32_t _internal_recovery_code() const;
  void _internal_set_recovery_code(uint32_t value);
  public:

  // optional fixed64 steamid = 10;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CParental_DisableWithRecoveryCode_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t recovery_code_;
  uint64_t steamid_;
  friend struct ::TableStruct_steammessages_5fparental_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CParental_DisableWithRecoveryCode_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CParental_DisableWithRecoveryCode_Response) */ {
 public:
  inline CParental_DisableWithRecoveryCode_Response() : CParental_DisableWithRecoveryCode_Response(nullptr) {}
  explicit constexpr CParental_DisableWithRecoveryCode_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CParental_DisableWithRecoveryCode_Response(const CParental_DisableWithRecoveryCode_Response& from);
  CParental_DisableWithRecoveryCode_Response(CParental_DisableWithRecoveryCode_Response&& from) noexcept
    : CParental_DisableWithRecoveryCode_Response() {
    *this = ::std::move(from);
  }

  inline CParental_DisableWithRecoveryCode_Response& operator=(const CParental_DisableWithRecoveryCode_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CParental_DisableWithRecoveryCode_Response& operator=(CParental_DisableWithRecoveryCode_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CParental_DisableWithRecoveryCode_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CParental_DisableWithRecoveryCode_Response* internal_default_instance() {
    return reinterpret_cast<const CParental_DisableWithRecoveryCode_Response*>(
               &_CParental_DisableWithRecoveryCode_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CParental_DisableWithRecoveryCode_Response& a, CParental_DisableWithRecoveryCode_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CParental_DisableWithRecoveryCode_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CParental_DisableWithRecoveryCode_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CParental_DisableWithRecoveryCode_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CParental_DisableWithRecoveryCode_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CParental_DisableWithRecoveryCode_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CParental_DisableWithRecoveryCode_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CParental_DisableWithRecoveryCode_Response";
  }
  protected:
  explicit CParental_DisableWithRecoveryCode_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CParental_DisableWithRecoveryCode_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fparental_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CParental_ParentalSettingsChange_Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CParental_ParentalSettingsChange_Notification) */ {
 public:
  inline CParental_ParentalSettingsChange_Notification() : CParental_ParentalSettingsChange_Notification(nullptr) {}
  ~CParental_ParentalSettingsChange_Notification() override;
  explicit constexpr CParental_ParentalSettingsChange_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CParental_ParentalSettingsChange_Notification(const CParental_ParentalSettingsChange_Notification& from);
  CParental_ParentalSettingsChange_Notification(CParental_ParentalSettingsChange_Notification&& from) noexcept
    : CParental_ParentalSettingsChange_Notification() {
    *this = ::std::move(from);
  }

  inline CParental_ParentalSettingsChange_Notification& operator=(const CParental_ParentalSettingsChange_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CParental_ParentalSettingsChange_Notification& operator=(CParental_ParentalSettingsChange_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CParental_ParentalSettingsChange_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CParental_ParentalSettingsChange_Notification* internal_default_instance() {
    return reinterpret_cast<const CParental_ParentalSettingsChange_Notification*>(
               &_CParental_ParentalSettingsChange_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CParental_ParentalSettingsChange_Notification& a, CParental_ParentalSettingsChange_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CParental_ParentalSettingsChange_Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CParental_ParentalSettingsChange_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CParental_ParentalSettingsChange_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CParental_ParentalSettingsChange_Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CParental_ParentalSettingsChange_Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CParental_ParentalSettingsChange_Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CParental_ParentalSettingsChange_Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CParental_ParentalSettingsChange_Notification";
  }
  protected:
  explicit CParental_ParentalSettingsChange_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSerializedSettingsFieldNumber = 1,
    kSignatureFieldNumber = 2,
    kPasswordFieldNumber = 3,
    kSessionidFieldNumber = 4,
  };
  // optional bytes serialized_settings = 1;
  bool has_serialized_settings() const;
  private:
  bool _internal_has_serialized_settings() const;
  public:
  void clear_serialized_settings();
  const std::string& serialized_settings() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serialized_settings(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serialized_settings();
  PROTOBUF_NODISCARD std::string* release_serialized_settings();
  void set_allocated_serialized_settings(std::string* serialized_settings);
  private:
  const std::string& _internal_serialized_settings() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serialized_settings(const std::string& value);
  std::string* _internal_mutable_serialized_settings();
  public:

  // optional bytes signature = 2;
  bool has_signature() const;
  private:
  bool _internal_has_signature() const;
  public:
  void clear_signature();
  const std::string& signature() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_signature(ArgT0&& arg0, ArgT... args);
  std::string* mutable_signature();
  PROTOBUF_NODISCARD std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // optional string password = 3;
  bool has_password() const;
  private:
  bool _internal_has_password() const;
  public:
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // optional string sessionid = 4;
  bool has_sessionid() const;
  private:
  bool _internal_has_sessionid() const;
  public:
  void clear_sessionid();
  const std::string& sessionid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sessionid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sessionid();
  PROTOBUF_NODISCARD std::string* release_sessionid();
  void set_allocated_sessionid(std::string* sessionid);
  private:
  const std::string& _internal_sessionid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sessionid(const std::string& value);
  std::string* _internal_mutable_sessionid();
  public:

  // @@protoc_insertion_point(class_scope:CParental_ParentalSettingsChange_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serialized_settings_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sessionid_;
  friend struct ::TableStruct_steammessages_5fparental_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CParental_ParentalUnlock_Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CParental_ParentalUnlock_Notification) */ {
 public:
  inline CParental_ParentalUnlock_Notification() : CParental_ParentalUnlock_Notification(nullptr) {}
  ~CParental_ParentalUnlock_Notification() override;
  explicit constexpr CParental_ParentalUnlock_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CParental_ParentalUnlock_Notification(const CParental_ParentalUnlock_Notification& from);
  CParental_ParentalUnlock_Notification(CParental_ParentalUnlock_Notification&& from) noexcept
    : CParental_ParentalUnlock_Notification() {
    *this = ::std::move(from);
  }

  inline CParental_ParentalUnlock_Notification& operator=(const CParental_ParentalUnlock_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CParental_ParentalUnlock_Notification& operator=(CParental_ParentalUnlock_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CParental_ParentalUnlock_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CParental_ParentalUnlock_Notification* internal_default_instance() {
    return reinterpret_cast<const CParental_ParentalUnlock_Notification*>(
               &_CParental_ParentalUnlock_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(CParental_ParentalUnlock_Notification& a, CParental_ParentalUnlock_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CParental_ParentalUnlock_Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CParental_ParentalUnlock_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CParental_ParentalUnlock_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CParental_ParentalUnlock_Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CParental_ParentalUnlock_Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CParental_ParentalUnlock_Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CParental_ParentalUnlock_Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CParental_ParentalUnlock_Notification";
  }
  protected:
  explicit CParental_ParentalUnlock_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPasswordFieldNumber = 1,
    kSessionidFieldNumber = 2,
  };
  // optional string password = 1;
  bool has_password() const;
  private:
  bool _internal_has_password() const;
  public:
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // optional string sessionid = 2;
  bool has_sessionid() const;
  private:
  bool _internal_has_sessionid() const;
  public:
  void clear_sessionid();
  const std::string& sessionid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sessionid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sessionid();
  PROTOBUF_NODISCARD std::string* release_sessionid();
  void set_allocated_sessionid(std::string* sessionid);
  private:
  const std::string& _internal_sessionid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sessionid(const std::string& value);
  std::string* _internal_mutable_sessionid();
  public:

  // @@protoc_insertion_point(class_scope:CParental_ParentalUnlock_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sessionid_;
  friend struct ::TableStruct_steammessages_5fparental_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CParental_ParentalLock_Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CParental_ParentalLock_Notification) */ {
 public:
  inline CParental_ParentalLock_Notification() : CParental_ParentalLock_Notification(nullptr) {}
  ~CParental_ParentalLock_Notification() override;
  explicit constexpr CParental_ParentalLock_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CParental_ParentalLock_Notification(const CParental_ParentalLock_Notification& from);
  CParental_ParentalLock_Notification(CParental_ParentalLock_Notification&& from) noexcept
    : CParental_ParentalLock_Notification() {
    *this = ::std::move(from);
  }

  inline CParental_ParentalLock_Notification& operator=(const CParental_ParentalLock_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CParental_ParentalLock_Notification& operator=(CParental_ParentalLock_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CParental_ParentalLock_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CParental_ParentalLock_Notification* internal_default_instance() {
    return reinterpret_cast<const CParental_ParentalLock_Notification*>(
               &_CParental_ParentalLock_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(CParental_ParentalLock_Notification& a, CParental_ParentalLock_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CParental_ParentalLock_Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CParental_ParentalLock_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CParental_ParentalLock_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CParental_ParentalLock_Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CParental_ParentalLock_Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CParental_ParentalLock_Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CParental_ParentalLock_Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CParental_ParentalLock_Notification";
  }
  protected:
  explicit CParental_ParentalLock_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionidFieldNumber = 1,
  };
  // optional string sessionid = 1;
  bool has_sessionid() const;
  private:
  bool _internal_has_sessionid() const;
  public:
  void clear_sessionid();
  const std::string& sessionid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sessionid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sessionid();
  PROTOBUF_NODISCARD std::string* release_sessionid();
  void set_allocated_sessionid(std::string* sessionid);
  private:
  const std::string& _internal_sessionid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sessionid(const std::string& value);
  std::string* _internal_mutable_sessionid();
  public:

  // @@protoc_insertion_point(class_scope:CParental_ParentalLock_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sessionid_;
  friend struct ::TableStruct_steammessages_5fparental_2esteamclient_2eproto;
};
// ===================================================================

class Parental_Stub;

class Parental : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline Parental() {};
 public:
  virtual ~Parental();

  typedef Parental_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void EnableParentalSettings(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CParental_EnableParentalSettings_Request* request,
                       ::CParental_EnableParentalSettings_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void DisableParentalSettings(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CParental_DisableParentalSettings_Request* request,
                       ::CParental_DisableParentalSettings_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetParentalSettings(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CParental_GetParentalSettings_Request* request,
                       ::CParental_GetParentalSettings_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetSignedParentalSettings(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CParental_GetSignedParentalSettings_Request* request,
                       ::CParental_GetSignedParentalSettings_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void SetParentalSettings(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CParental_SetParentalSettings_Request* request,
                       ::CParental_SetParentalSettings_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void ValidateToken(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CParental_ValidateToken_Request* request,
                       ::CParental_ValidateToken_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void ValidatePassword(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CParental_ValidatePassword_Request* request,
                       ::CParental_ValidatePassword_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void LockClient(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CParental_LockClient_Request* request,
                       ::CParental_LockClient_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void RequestRecoveryCode(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CParental_RequestRecoveryCode_Request* request,
                       ::CParental_RequestRecoveryCode_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void DisableWithRecoveryCode(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CParental_DisableWithRecoveryCode_Request* request,
                       ::CParental_DisableWithRecoveryCode_Response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Parental);
};

class Parental_Stub : public Parental {
 public:
  Parental_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  Parental_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~Parental_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements Parental ------------------------------------------

  void EnableParentalSettings(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CParental_EnableParentalSettings_Request* request,
                       ::CParental_EnableParentalSettings_Response* response,
                       ::google::protobuf::Closure* done);
  void DisableParentalSettings(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CParental_DisableParentalSettings_Request* request,
                       ::CParental_DisableParentalSettings_Response* response,
                       ::google::protobuf::Closure* done);
  void GetParentalSettings(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CParental_GetParentalSettings_Request* request,
                       ::CParental_GetParentalSettings_Response* response,
                       ::google::protobuf::Closure* done);
  void GetSignedParentalSettings(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CParental_GetSignedParentalSettings_Request* request,
                       ::CParental_GetSignedParentalSettings_Response* response,
                       ::google::protobuf::Closure* done);
  void SetParentalSettings(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CParental_SetParentalSettings_Request* request,
                       ::CParental_SetParentalSettings_Response* response,
                       ::google::protobuf::Closure* done);
  void ValidateToken(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CParental_ValidateToken_Request* request,
                       ::CParental_ValidateToken_Response* response,
                       ::google::protobuf::Closure* done);
  void ValidatePassword(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CParental_ValidatePassword_Request* request,
                       ::CParental_ValidatePassword_Response* response,
                       ::google::protobuf::Closure* done);
  void LockClient(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CParental_LockClient_Request* request,
                       ::CParental_LockClient_Response* response,
                       ::google::protobuf::Closure* done);
  void RequestRecoveryCode(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CParental_RequestRecoveryCode_Request* request,
                       ::CParental_RequestRecoveryCode_Response* response,
                       ::google::protobuf::Closure* done);
  void DisableWithRecoveryCode(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CParental_DisableWithRecoveryCode_Request* request,
                       ::CParental_DisableWithRecoveryCode_Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Parental_Stub);
};


// -------------------------------------------------------------------

class ParentalClient_Stub;

class ParentalClient : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline ParentalClient() {};
 public:
  virtual ~ParentalClient();

  typedef ParentalClient_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void NotifySettingsChange(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CParental_ParentalSettingsChange_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyUnlock(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CParental_ParentalUnlock_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyLock(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CParental_ParentalLock_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ParentalClient);
};

class ParentalClient_Stub : public ParentalClient {
 public:
  ParentalClient_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  ParentalClient_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~ParentalClient_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements ParentalClient ------------------------------------------

  void NotifySettingsChange(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CParental_ParentalSettingsChange_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void NotifyUnlock(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CParental_ParentalUnlock_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void NotifyLock(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CParental_ParentalLock_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ParentalClient_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ParentalApp

// optional uint32 appid = 1;
inline bool ParentalApp::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ParentalApp::has_appid() const {
  return _internal_has_appid();
}
inline void ParentalApp::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t ParentalApp::_internal_appid() const {
  return appid_;
}
inline uint32_t ParentalApp::appid() const {
  // @@protoc_insertion_point(field_get:ParentalApp.appid)
  return _internal_appid();
}
inline void ParentalApp::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  appid_ = value;
}
inline void ParentalApp::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:ParentalApp.appid)
}

// optional bool is_allowed = 2;
inline bool ParentalApp::_internal_has_is_allowed() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ParentalApp::has_is_allowed() const {
  return _internal_has_is_allowed();
}
inline void ParentalApp::clear_is_allowed() {
  is_allowed_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool ParentalApp::_internal_is_allowed() const {
  return is_allowed_;
}
inline bool ParentalApp::is_allowed() const {
  // @@protoc_insertion_point(field_get:ParentalApp.is_allowed)
  return _internal_is_allowed();
}
inline void ParentalApp::_internal_set_is_allowed(bool value) {
  _has_bits_[0] |= 0x00000002u;
  is_allowed_ = value;
}
inline void ParentalApp::set_is_allowed(bool value) {
  _internal_set_is_allowed(value);
  // @@protoc_insertion_point(field_set:ParentalApp.is_allowed)
}

// -------------------------------------------------------------------

// ParentalSettings

// optional fixed64 steamid = 1;
inline bool ParentalSettings::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ParentalSettings::has_steamid() const {
  return _internal_has_steamid();
}
inline void ParentalSettings::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000010u;
}
inline uint64_t ParentalSettings::_internal_steamid() const {
  return steamid_;
}
inline uint64_t ParentalSettings::steamid() const {
  // @@protoc_insertion_point(field_get:ParentalSettings.steamid)
  return _internal_steamid();
}
inline void ParentalSettings::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000010u;
  steamid_ = value;
}
inline void ParentalSettings::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:ParentalSettings.steamid)
}

// optional uint32 applist_base_id = 2;
inline bool ParentalSettings::_internal_has_applist_base_id() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ParentalSettings::has_applist_base_id() const {
  return _internal_has_applist_base_id();
}
inline void ParentalSettings::clear_applist_base_id() {
  applist_base_id_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t ParentalSettings::_internal_applist_base_id() const {
  return applist_base_id_;
}
inline uint32_t ParentalSettings::applist_base_id() const {
  // @@protoc_insertion_point(field_get:ParentalSettings.applist_base_id)
  return _internal_applist_base_id();
}
inline void ParentalSettings::_internal_set_applist_base_id(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  applist_base_id_ = value;
}
inline void ParentalSettings::set_applist_base_id(uint32_t value) {
  _internal_set_applist_base_id(value);
  // @@protoc_insertion_point(field_set:ParentalSettings.applist_base_id)
}

// optional string applist_base_description = 3;
inline bool ParentalSettings::_internal_has_applist_base_description() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ParentalSettings::has_applist_base_description() const {
  return _internal_has_applist_base_description();
}
inline void ParentalSettings::clear_applist_base_description() {
  applist_base_description_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ParentalSettings::applist_base_description() const {
  // @@protoc_insertion_point(field_get:ParentalSettings.applist_base_description)
  return _internal_applist_base_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ParentalSettings::set_applist_base_description(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 applist_base_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ParentalSettings.applist_base_description)
}
inline std::string* ParentalSettings::mutable_applist_base_description() {
  std::string* _s = _internal_mutable_applist_base_description();
  // @@protoc_insertion_point(field_mutable:ParentalSettings.applist_base_description)
  return _s;
}
inline const std::string& ParentalSettings::_internal_applist_base_description() const {
  return applist_base_description_.Get();
}
inline void ParentalSettings::_internal_set_applist_base_description(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  applist_base_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ParentalSettings::_internal_mutable_applist_base_description() {
  _has_bits_[0] |= 0x00000001u;
  return applist_base_description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ParentalSettings::release_applist_base_description() {
  // @@protoc_insertion_point(field_release:ParentalSettings.applist_base_description)
  if (!_internal_has_applist_base_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = applist_base_description_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (applist_base_description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    applist_base_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ParentalSettings::set_allocated_applist_base_description(std::string* applist_base_description) {
  if (applist_base_description != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  applist_base_description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), applist_base_description,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (applist_base_description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    applist_base_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ParentalSettings.applist_base_description)
}

// repeated .ParentalApp applist_base = 4;
inline int ParentalSettings::_internal_applist_base_size() const {
  return applist_base_.size();
}
inline int ParentalSettings::applist_base_size() const {
  return _internal_applist_base_size();
}
inline void ParentalSettings::clear_applist_base() {
  applist_base_.Clear();
}
inline ::ParentalApp* ParentalSettings::mutable_applist_base(int index) {
  // @@protoc_insertion_point(field_mutable:ParentalSettings.applist_base)
  return applist_base_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ParentalApp >*
ParentalSettings::mutable_applist_base() {
  // @@protoc_insertion_point(field_mutable_list:ParentalSettings.applist_base)
  return &applist_base_;
}
inline const ::ParentalApp& ParentalSettings::_internal_applist_base(int index) const {
  return applist_base_.Get(index);
}
inline const ::ParentalApp& ParentalSettings::applist_base(int index) const {
  // @@protoc_insertion_point(field_get:ParentalSettings.applist_base)
  return _internal_applist_base(index);
}
inline ::ParentalApp* ParentalSettings::_internal_add_applist_base() {
  return applist_base_.Add();
}
inline ::ParentalApp* ParentalSettings::add_applist_base() {
  ::ParentalApp* _add = _internal_add_applist_base();
  // @@protoc_insertion_point(field_add:ParentalSettings.applist_base)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ParentalApp >&
ParentalSettings::applist_base() const {
  // @@protoc_insertion_point(field_list:ParentalSettings.applist_base)
  return applist_base_;
}

// repeated .ParentalApp applist_custom = 5;
inline int ParentalSettings::_internal_applist_custom_size() const {
  return applist_custom_.size();
}
inline int ParentalSettings::applist_custom_size() const {
  return _internal_applist_custom_size();
}
inline void ParentalSettings::clear_applist_custom() {
  applist_custom_.Clear();
}
inline ::ParentalApp* ParentalSettings::mutable_applist_custom(int index) {
  // @@protoc_insertion_point(field_mutable:ParentalSettings.applist_custom)
  return applist_custom_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ParentalApp >*
ParentalSettings::mutable_applist_custom() {
  // @@protoc_insertion_point(field_mutable_list:ParentalSettings.applist_custom)
  return &applist_custom_;
}
inline const ::ParentalApp& ParentalSettings::_internal_applist_custom(int index) const {
  return applist_custom_.Get(index);
}
inline const ::ParentalApp& ParentalSettings::applist_custom(int index) const {
  // @@protoc_insertion_point(field_get:ParentalSettings.applist_custom)
  return _internal_applist_custom(index);
}
inline ::ParentalApp* ParentalSettings::_internal_add_applist_custom() {
  return applist_custom_.Add();
}
inline ::ParentalApp* ParentalSettings::add_applist_custom() {
  ::ParentalApp* _add = _internal_add_applist_custom();
  // @@protoc_insertion_point(field_add:ParentalSettings.applist_custom)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ParentalApp >&
ParentalSettings::applist_custom() const {
  // @@protoc_insertion_point(field_list:ParentalSettings.applist_custom)
  return applist_custom_;
}

// optional uint32 passwordhashtype = 6;
inline bool ParentalSettings::_internal_has_passwordhashtype() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ParentalSettings::has_passwordhashtype() const {
  return _internal_has_passwordhashtype();
}
inline void ParentalSettings::clear_passwordhashtype() {
  passwordhashtype_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline uint32_t ParentalSettings::_internal_passwordhashtype() const {
  return passwordhashtype_;
}
inline uint32_t ParentalSettings::passwordhashtype() const {
  // @@protoc_insertion_point(field_get:ParentalSettings.passwordhashtype)
  return _internal_passwordhashtype();
}
inline void ParentalSettings::_internal_set_passwordhashtype(uint32_t value) {
  _has_bits_[0] |= 0x00000040u;
  passwordhashtype_ = value;
}
inline void ParentalSettings::set_passwordhashtype(uint32_t value) {
  _internal_set_passwordhashtype(value);
  // @@protoc_insertion_point(field_set:ParentalSettings.passwordhashtype)
}

// optional bytes salt = 7;
inline bool ParentalSettings::_internal_has_salt() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ParentalSettings::has_salt() const {
  return _internal_has_salt();
}
inline void ParentalSettings::clear_salt() {
  salt_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ParentalSettings::salt() const {
  // @@protoc_insertion_point(field_get:ParentalSettings.salt)
  return _internal_salt();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ParentalSettings::set_salt(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 salt_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ParentalSettings.salt)
}
inline std::string* ParentalSettings::mutable_salt() {
  std::string* _s = _internal_mutable_salt();
  // @@protoc_insertion_point(field_mutable:ParentalSettings.salt)
  return _s;
}
inline const std::string& ParentalSettings::_internal_salt() const {
  return salt_.Get();
}
inline void ParentalSettings::_internal_set_salt(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  salt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ParentalSettings::_internal_mutable_salt() {
  _has_bits_[0] |= 0x00000002u;
  return salt_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ParentalSettings::release_salt() {
  // @@protoc_insertion_point(field_release:ParentalSettings.salt)
  if (!_internal_has_salt()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = salt_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (salt_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    salt_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ParentalSettings::set_allocated_salt(std::string* salt) {
  if (salt != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  salt_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), salt,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (salt_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    salt_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ParentalSettings.salt)
}

// optional bytes passwordhash = 8;
inline bool ParentalSettings::_internal_has_passwordhash() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ParentalSettings::has_passwordhash() const {
  return _internal_has_passwordhash();
}
inline void ParentalSettings::clear_passwordhash() {
  passwordhash_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ParentalSettings::passwordhash() const {
  // @@protoc_insertion_point(field_get:ParentalSettings.passwordhash)
  return _internal_passwordhash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ParentalSettings::set_passwordhash(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 passwordhash_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ParentalSettings.passwordhash)
}
inline std::string* ParentalSettings::mutable_passwordhash() {
  std::string* _s = _internal_mutable_passwordhash();
  // @@protoc_insertion_point(field_mutable:ParentalSettings.passwordhash)
  return _s;
}
inline const std::string& ParentalSettings::_internal_passwordhash() const {
  return passwordhash_.Get();
}
inline void ParentalSettings::_internal_set_passwordhash(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  passwordhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ParentalSettings::_internal_mutable_passwordhash() {
  _has_bits_[0] |= 0x00000004u;
  return passwordhash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ParentalSettings::release_passwordhash() {
  // @@protoc_insertion_point(field_release:ParentalSettings.passwordhash)
  if (!_internal_has_passwordhash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = passwordhash_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (passwordhash_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    passwordhash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ParentalSettings::set_allocated_passwordhash(std::string* passwordhash) {
  if (passwordhash != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  passwordhash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), passwordhash,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (passwordhash_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    passwordhash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ParentalSettings.passwordhash)
}

// optional bool is_enabled = 9;
inline bool ParentalSettings::_internal_has_is_enabled() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ParentalSettings::has_is_enabled() const {
  return _internal_has_is_enabled();
}
inline void ParentalSettings::clear_is_enabled() {
  is_enabled_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool ParentalSettings::_internal_is_enabled() const {
  return is_enabled_;
}
inline bool ParentalSettings::is_enabled() const {
  // @@protoc_insertion_point(field_get:ParentalSettings.is_enabled)
  return _internal_is_enabled();
}
inline void ParentalSettings::_internal_set_is_enabled(bool value) {
  _has_bits_[0] |= 0x00000100u;
  is_enabled_ = value;
}
inline void ParentalSettings::set_is_enabled(bool value) {
  _internal_set_is_enabled(value);
  // @@protoc_insertion_point(field_set:ParentalSettings.is_enabled)
}

// optional uint32 enabled_features = 10;
inline bool ParentalSettings::_internal_has_enabled_features() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ParentalSettings::has_enabled_features() const {
  return _internal_has_enabled_features();
}
inline void ParentalSettings::clear_enabled_features() {
  enabled_features_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline uint32_t ParentalSettings::_internal_enabled_features() const {
  return enabled_features_;
}
inline uint32_t ParentalSettings::enabled_features() const {
  // @@protoc_insertion_point(field_get:ParentalSettings.enabled_features)
  return _internal_enabled_features();
}
inline void ParentalSettings::_internal_set_enabled_features(uint32_t value) {
  _has_bits_[0] |= 0x00000080u;
  enabled_features_ = value;
}
inline void ParentalSettings::set_enabled_features(uint32_t value) {
  _internal_set_enabled_features(value);
  // @@protoc_insertion_point(field_set:ParentalSettings.enabled_features)
}

// optional string recovery_email = 11;
inline bool ParentalSettings::_internal_has_recovery_email() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ParentalSettings::has_recovery_email() const {
  return _internal_has_recovery_email();
}
inline void ParentalSettings::clear_recovery_email() {
  recovery_email_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ParentalSettings::recovery_email() const {
  // @@protoc_insertion_point(field_get:ParentalSettings.recovery_email)
  return _internal_recovery_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ParentalSettings::set_recovery_email(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 recovery_email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ParentalSettings.recovery_email)
}
inline std::string* ParentalSettings::mutable_recovery_email() {
  std::string* _s = _internal_mutable_recovery_email();
  // @@protoc_insertion_point(field_mutable:ParentalSettings.recovery_email)
  return _s;
}
inline const std::string& ParentalSettings::_internal_recovery_email() const {
  return recovery_email_.Get();
}
inline void ParentalSettings::_internal_set_recovery_email(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  recovery_email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ParentalSettings::_internal_mutable_recovery_email() {
  _has_bits_[0] |= 0x00000008u;
  return recovery_email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ParentalSettings::release_recovery_email() {
  // @@protoc_insertion_point(field_release:ParentalSettings.recovery_email)
  if (!_internal_has_recovery_email()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = recovery_email_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (recovery_email_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    recovery_email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ParentalSettings::set_allocated_recovery_email(std::string* recovery_email) {
  if (recovery_email != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  recovery_email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recovery_email,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (recovery_email_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    recovery_email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ParentalSettings.recovery_email)
}

// optional bool is_site_license_lock = 12;
inline bool ParentalSettings::_internal_has_is_site_license_lock() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ParentalSettings::has_is_site_license_lock() const {
  return _internal_has_is_site_license_lock();
}
inline void ParentalSettings::clear_is_site_license_lock() {
  is_site_license_lock_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool ParentalSettings::_internal_is_site_license_lock() const {
  return is_site_license_lock_;
}
inline bool ParentalSettings::is_site_license_lock() const {
  // @@protoc_insertion_point(field_get:ParentalSettings.is_site_license_lock)
  return _internal_is_site_license_lock();
}
inline void ParentalSettings::_internal_set_is_site_license_lock(bool value) {
  _has_bits_[0] |= 0x00000200u;
  is_site_license_lock_ = value;
}
inline void ParentalSettings::set_is_site_license_lock(bool value) {
  _internal_set_is_site_license_lock(value);
  // @@protoc_insertion_point(field_set:ParentalSettings.is_site_license_lock)
}

// -------------------------------------------------------------------

// CParental_EnableParentalSettings_Request

// optional string password = 1;
inline bool CParental_EnableParentalSettings_Request::_internal_has_password() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CParental_EnableParentalSettings_Request::has_password() const {
  return _internal_has_password();
}
inline void CParental_EnableParentalSettings_Request::clear_password() {
  password_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CParental_EnableParentalSettings_Request::password() const {
  // @@protoc_insertion_point(field_get:CParental_EnableParentalSettings_Request.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CParental_EnableParentalSettings_Request::set_password(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CParental_EnableParentalSettings_Request.password)
}
inline std::string* CParental_EnableParentalSettings_Request::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:CParental_EnableParentalSettings_Request.password)
  return _s;
}
inline const std::string& CParental_EnableParentalSettings_Request::_internal_password() const {
  return password_.Get();
}
inline void CParental_EnableParentalSettings_Request::_internal_set_password(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CParental_EnableParentalSettings_Request::_internal_mutable_password() {
  _has_bits_[0] |= 0x00000001u;
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CParental_EnableParentalSettings_Request::release_password() {
  // @@protoc_insertion_point(field_release:CParental_EnableParentalSettings_Request.password)
  if (!_internal_has_password()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = password_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (password_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CParental_EnableParentalSettings_Request::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (password_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CParental_EnableParentalSettings_Request.password)
}

// optional .ParentalSettings settings = 2;
inline bool CParental_EnableParentalSettings_Request::_internal_has_settings() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || settings_ != nullptr);
  return value;
}
inline bool CParental_EnableParentalSettings_Request::has_settings() const {
  return _internal_has_settings();
}
inline void CParental_EnableParentalSettings_Request::clear_settings() {
  if (settings_ != nullptr) settings_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::ParentalSettings& CParental_EnableParentalSettings_Request::_internal_settings() const {
  const ::ParentalSettings* p = settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::ParentalSettings&>(
      ::_ParentalSettings_default_instance_);
}
inline const ::ParentalSettings& CParental_EnableParentalSettings_Request::settings() const {
  // @@protoc_insertion_point(field_get:CParental_EnableParentalSettings_Request.settings)
  return _internal_settings();
}
inline void CParental_EnableParentalSettings_Request::unsafe_arena_set_allocated_settings(
    ::ParentalSettings* settings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(settings_);
  }
  settings_ = settings;
  if (settings) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CParental_EnableParentalSettings_Request.settings)
}
inline ::ParentalSettings* CParental_EnableParentalSettings_Request::release_settings() {
  _has_bits_[0] &= ~0x00000004u;
  ::ParentalSettings* temp = settings_;
  settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ParentalSettings* CParental_EnableParentalSettings_Request::unsafe_arena_release_settings() {
  // @@protoc_insertion_point(field_release:CParental_EnableParentalSettings_Request.settings)
  _has_bits_[0] &= ~0x00000004u;
  ::ParentalSettings* temp = settings_;
  settings_ = nullptr;
  return temp;
}
inline ::ParentalSettings* CParental_EnableParentalSettings_Request::_internal_mutable_settings() {
  _has_bits_[0] |= 0x00000004u;
  if (settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::ParentalSettings>(GetArenaForAllocation());
    settings_ = p;
  }
  return settings_;
}
inline ::ParentalSettings* CParental_EnableParentalSettings_Request::mutable_settings() {
  ::ParentalSettings* _msg = _internal_mutable_settings();
  // @@protoc_insertion_point(field_mutable:CParental_EnableParentalSettings_Request.settings)
  return _msg;
}
inline void CParental_EnableParentalSettings_Request::set_allocated_settings(::ParentalSettings* settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete settings_;
  }
  if (settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ParentalSettings>::GetOwningArena(settings);
    if (message_arena != submessage_arena) {
      settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settings, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  settings_ = settings;
  // @@protoc_insertion_point(field_set_allocated:CParental_EnableParentalSettings_Request.settings)
}

// optional string sessionid = 3;
inline bool CParental_EnableParentalSettings_Request::_internal_has_sessionid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CParental_EnableParentalSettings_Request::has_sessionid() const {
  return _internal_has_sessionid();
}
inline void CParental_EnableParentalSettings_Request::clear_sessionid() {
  sessionid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CParental_EnableParentalSettings_Request::sessionid() const {
  // @@protoc_insertion_point(field_get:CParental_EnableParentalSettings_Request.sessionid)
  return _internal_sessionid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CParental_EnableParentalSettings_Request::set_sessionid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 sessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CParental_EnableParentalSettings_Request.sessionid)
}
inline std::string* CParental_EnableParentalSettings_Request::mutable_sessionid() {
  std::string* _s = _internal_mutable_sessionid();
  // @@protoc_insertion_point(field_mutable:CParental_EnableParentalSettings_Request.sessionid)
  return _s;
}
inline const std::string& CParental_EnableParentalSettings_Request::_internal_sessionid() const {
  return sessionid_.Get();
}
inline void CParental_EnableParentalSettings_Request::_internal_set_sessionid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  sessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CParental_EnableParentalSettings_Request::_internal_mutable_sessionid() {
  _has_bits_[0] |= 0x00000002u;
  return sessionid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CParental_EnableParentalSettings_Request::release_sessionid() {
  // @@protoc_insertion_point(field_release:CParental_EnableParentalSettings_Request.sessionid)
  if (!_internal_has_sessionid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = sessionid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sessionid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sessionid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CParental_EnableParentalSettings_Request::set_allocated_sessionid(std::string* sessionid) {
  if (sessionid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sessionid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sessionid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sessionid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sessionid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CParental_EnableParentalSettings_Request.sessionid)
}

// optional uint32 enablecode = 4;
inline bool CParental_EnableParentalSettings_Request::_internal_has_enablecode() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CParental_EnableParentalSettings_Request::has_enablecode() const {
  return _internal_has_enablecode();
}
inline void CParental_EnableParentalSettings_Request::clear_enablecode() {
  enablecode_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CParental_EnableParentalSettings_Request::_internal_enablecode() const {
  return enablecode_;
}
inline uint32_t CParental_EnableParentalSettings_Request::enablecode() const {
  // @@protoc_insertion_point(field_get:CParental_EnableParentalSettings_Request.enablecode)
  return _internal_enablecode();
}
inline void CParental_EnableParentalSettings_Request::_internal_set_enablecode(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  enablecode_ = value;
}
inline void CParental_EnableParentalSettings_Request::set_enablecode(uint32_t value) {
  _internal_set_enablecode(value);
  // @@protoc_insertion_point(field_set:CParental_EnableParentalSettings_Request.enablecode)
}

// optional fixed64 steamid = 10;
inline bool CParental_EnableParentalSettings_Request::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CParental_EnableParentalSettings_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CParental_EnableParentalSettings_Request::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000010u;
}
inline uint64_t CParental_EnableParentalSettings_Request::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CParental_EnableParentalSettings_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CParental_EnableParentalSettings_Request.steamid)
  return _internal_steamid();
}
inline void CParental_EnableParentalSettings_Request::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000010u;
  steamid_ = value;
}
inline void CParental_EnableParentalSettings_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CParental_EnableParentalSettings_Request.steamid)
}

// -------------------------------------------------------------------

// CParental_EnableParentalSettings_Response

// -------------------------------------------------------------------

// CParental_DisableParentalSettings_Request

// optional string password = 1;
inline bool CParental_DisableParentalSettings_Request::_internal_has_password() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CParental_DisableParentalSettings_Request::has_password() const {
  return _internal_has_password();
}
inline void CParental_DisableParentalSettings_Request::clear_password() {
  password_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CParental_DisableParentalSettings_Request::password() const {
  // @@protoc_insertion_point(field_get:CParental_DisableParentalSettings_Request.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CParental_DisableParentalSettings_Request::set_password(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CParental_DisableParentalSettings_Request.password)
}
inline std::string* CParental_DisableParentalSettings_Request::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:CParental_DisableParentalSettings_Request.password)
  return _s;
}
inline const std::string& CParental_DisableParentalSettings_Request::_internal_password() const {
  return password_.Get();
}
inline void CParental_DisableParentalSettings_Request::_internal_set_password(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CParental_DisableParentalSettings_Request::_internal_mutable_password() {
  _has_bits_[0] |= 0x00000001u;
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CParental_DisableParentalSettings_Request::release_password() {
  // @@protoc_insertion_point(field_release:CParental_DisableParentalSettings_Request.password)
  if (!_internal_has_password()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = password_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (password_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CParental_DisableParentalSettings_Request::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (password_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CParental_DisableParentalSettings_Request.password)
}

// optional fixed64 steamid = 10;
inline bool CParental_DisableParentalSettings_Request::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CParental_DisableParentalSettings_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CParental_DisableParentalSettings_Request::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CParental_DisableParentalSettings_Request::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CParental_DisableParentalSettings_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CParental_DisableParentalSettings_Request.steamid)
  return _internal_steamid();
}
inline void CParental_DisableParentalSettings_Request::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  steamid_ = value;
}
inline void CParental_DisableParentalSettings_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CParental_DisableParentalSettings_Request.steamid)
}

// -------------------------------------------------------------------

// CParental_DisableParentalSettings_Response

// -------------------------------------------------------------------

// CParental_GetParentalSettings_Request

// optional fixed64 steamid = 10;
inline bool CParental_GetParentalSettings_Request::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CParental_GetParentalSettings_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CParental_GetParentalSettings_Request::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CParental_GetParentalSettings_Request::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CParental_GetParentalSettings_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CParental_GetParentalSettings_Request.steamid)
  return _internal_steamid();
}
inline void CParental_GetParentalSettings_Request::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
}
inline void CParental_GetParentalSettings_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CParental_GetParentalSettings_Request.steamid)
}

// -------------------------------------------------------------------

// CParental_GetParentalSettings_Response

// optional .ParentalSettings settings = 1;
inline bool CParental_GetParentalSettings_Response::_internal_has_settings() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || settings_ != nullptr);
  return value;
}
inline bool CParental_GetParentalSettings_Response::has_settings() const {
  return _internal_has_settings();
}
inline void CParental_GetParentalSettings_Response::clear_settings() {
  if (settings_ != nullptr) settings_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ParentalSettings& CParental_GetParentalSettings_Response::_internal_settings() const {
  const ::ParentalSettings* p = settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::ParentalSettings&>(
      ::_ParentalSettings_default_instance_);
}
inline const ::ParentalSettings& CParental_GetParentalSettings_Response::settings() const {
  // @@protoc_insertion_point(field_get:CParental_GetParentalSettings_Response.settings)
  return _internal_settings();
}
inline void CParental_GetParentalSettings_Response::unsafe_arena_set_allocated_settings(
    ::ParentalSettings* settings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(settings_);
  }
  settings_ = settings;
  if (settings) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CParental_GetParentalSettings_Response.settings)
}
inline ::ParentalSettings* CParental_GetParentalSettings_Response::release_settings() {
  _has_bits_[0] &= ~0x00000001u;
  ::ParentalSettings* temp = settings_;
  settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ParentalSettings* CParental_GetParentalSettings_Response::unsafe_arena_release_settings() {
  // @@protoc_insertion_point(field_release:CParental_GetParentalSettings_Response.settings)
  _has_bits_[0] &= ~0x00000001u;
  ::ParentalSettings* temp = settings_;
  settings_ = nullptr;
  return temp;
}
inline ::ParentalSettings* CParental_GetParentalSettings_Response::_internal_mutable_settings() {
  _has_bits_[0] |= 0x00000001u;
  if (settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::ParentalSettings>(GetArenaForAllocation());
    settings_ = p;
  }
  return settings_;
}
inline ::ParentalSettings* CParental_GetParentalSettings_Response::mutable_settings() {
  ::ParentalSettings* _msg = _internal_mutable_settings();
  // @@protoc_insertion_point(field_mutable:CParental_GetParentalSettings_Response.settings)
  return _msg;
}
inline void CParental_GetParentalSettings_Response::set_allocated_settings(::ParentalSettings* settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete settings_;
  }
  if (settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ParentalSettings>::GetOwningArena(settings);
    if (message_arena != submessage_arena) {
      settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settings, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  settings_ = settings;
  // @@protoc_insertion_point(field_set_allocated:CParental_GetParentalSettings_Response.settings)
}

// -------------------------------------------------------------------

// CParental_GetSignedParentalSettings_Request

// optional uint32 priority = 1;
inline bool CParental_GetSignedParentalSettings_Request::_internal_has_priority() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CParental_GetSignedParentalSettings_Request::has_priority() const {
  return _internal_has_priority();
}
inline void CParental_GetSignedParentalSettings_Request::clear_priority() {
  priority_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CParental_GetSignedParentalSettings_Request::_internal_priority() const {
  return priority_;
}
inline uint32_t CParental_GetSignedParentalSettings_Request::priority() const {
  // @@protoc_insertion_point(field_get:CParental_GetSignedParentalSettings_Request.priority)
  return _internal_priority();
}
inline void CParental_GetSignedParentalSettings_Request::_internal_set_priority(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  priority_ = value;
}
inline void CParental_GetSignedParentalSettings_Request::set_priority(uint32_t value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:CParental_GetSignedParentalSettings_Request.priority)
}

// -------------------------------------------------------------------

// CParental_GetSignedParentalSettings_Response

// optional bytes serialized_settings = 1;
inline bool CParental_GetSignedParentalSettings_Response::_internal_has_serialized_settings() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CParental_GetSignedParentalSettings_Response::has_serialized_settings() const {
  return _internal_has_serialized_settings();
}
inline void CParental_GetSignedParentalSettings_Response::clear_serialized_settings() {
  serialized_settings_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CParental_GetSignedParentalSettings_Response::serialized_settings() const {
  // @@protoc_insertion_point(field_get:CParental_GetSignedParentalSettings_Response.serialized_settings)
  return _internal_serialized_settings();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CParental_GetSignedParentalSettings_Response::set_serialized_settings(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 serialized_settings_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CParental_GetSignedParentalSettings_Response.serialized_settings)
}
inline std::string* CParental_GetSignedParentalSettings_Response::mutable_serialized_settings() {
  std::string* _s = _internal_mutable_serialized_settings();
  // @@protoc_insertion_point(field_mutable:CParental_GetSignedParentalSettings_Response.serialized_settings)
  return _s;
}
inline const std::string& CParental_GetSignedParentalSettings_Response::_internal_serialized_settings() const {
  return serialized_settings_.Get();
}
inline void CParental_GetSignedParentalSettings_Response::_internal_set_serialized_settings(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  serialized_settings_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CParental_GetSignedParentalSettings_Response::_internal_mutable_serialized_settings() {
  _has_bits_[0] |= 0x00000001u;
  return serialized_settings_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CParental_GetSignedParentalSettings_Response::release_serialized_settings() {
  // @@protoc_insertion_point(field_release:CParental_GetSignedParentalSettings_Response.serialized_settings)
  if (!_internal_has_serialized_settings()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = serialized_settings_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (serialized_settings_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    serialized_settings_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CParental_GetSignedParentalSettings_Response::set_allocated_serialized_settings(std::string* serialized_settings) {
  if (serialized_settings != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  serialized_settings_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serialized_settings,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (serialized_settings_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    serialized_settings_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CParental_GetSignedParentalSettings_Response.serialized_settings)
}

// optional bytes signature = 2;
inline bool CParental_GetSignedParentalSettings_Response::_internal_has_signature() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CParental_GetSignedParentalSettings_Response::has_signature() const {
  return _internal_has_signature();
}
inline void CParental_GetSignedParentalSettings_Response::clear_signature() {
  signature_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CParental_GetSignedParentalSettings_Response::signature() const {
  // @@protoc_insertion_point(field_get:CParental_GetSignedParentalSettings_Response.signature)
  return _internal_signature();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CParental_GetSignedParentalSettings_Response::set_signature(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 signature_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CParental_GetSignedParentalSettings_Response.signature)
}
inline std::string* CParental_GetSignedParentalSettings_Response::mutable_signature() {
  std::string* _s = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:CParental_GetSignedParentalSettings_Response.signature)
  return _s;
}
inline const std::string& CParental_GetSignedParentalSettings_Response::_internal_signature() const {
  return signature_.Get();
}
inline void CParental_GetSignedParentalSettings_Response::_internal_set_signature(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CParental_GetSignedParentalSettings_Response::_internal_mutable_signature() {
  _has_bits_[0] |= 0x00000002u;
  return signature_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CParental_GetSignedParentalSettings_Response::release_signature() {
  // @@protoc_insertion_point(field_release:CParental_GetSignedParentalSettings_Response.signature)
  if (!_internal_has_signature()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = signature_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (signature_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CParental_GetSignedParentalSettings_Response::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  signature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (signature_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CParental_GetSignedParentalSettings_Response.signature)
}

// -------------------------------------------------------------------

// CParental_SetParentalSettings_Request

// optional string password = 1;
inline bool CParental_SetParentalSettings_Request::_internal_has_password() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CParental_SetParentalSettings_Request::has_password() const {
  return _internal_has_password();
}
inline void CParental_SetParentalSettings_Request::clear_password() {
  password_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CParental_SetParentalSettings_Request::password() const {
  // @@protoc_insertion_point(field_get:CParental_SetParentalSettings_Request.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CParental_SetParentalSettings_Request::set_password(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CParental_SetParentalSettings_Request.password)
}
inline std::string* CParental_SetParentalSettings_Request::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:CParental_SetParentalSettings_Request.password)
  return _s;
}
inline const std::string& CParental_SetParentalSettings_Request::_internal_password() const {
  return password_.Get();
}
inline void CParental_SetParentalSettings_Request::_internal_set_password(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CParental_SetParentalSettings_Request::_internal_mutable_password() {
  _has_bits_[0] |= 0x00000001u;
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CParental_SetParentalSettings_Request::release_password() {
  // @@protoc_insertion_point(field_release:CParental_SetParentalSettings_Request.password)
  if (!_internal_has_password()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = password_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (password_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CParental_SetParentalSettings_Request::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (password_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CParental_SetParentalSettings_Request.password)
}

// optional .ParentalSettings settings = 2;
inline bool CParental_SetParentalSettings_Request::_internal_has_settings() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || settings_ != nullptr);
  return value;
}
inline bool CParental_SetParentalSettings_Request::has_settings() const {
  return _internal_has_settings();
}
inline void CParental_SetParentalSettings_Request::clear_settings() {
  if (settings_ != nullptr) settings_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::ParentalSettings& CParental_SetParentalSettings_Request::_internal_settings() const {
  const ::ParentalSettings* p = settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::ParentalSettings&>(
      ::_ParentalSettings_default_instance_);
}
inline const ::ParentalSettings& CParental_SetParentalSettings_Request::settings() const {
  // @@protoc_insertion_point(field_get:CParental_SetParentalSettings_Request.settings)
  return _internal_settings();
}
inline void CParental_SetParentalSettings_Request::unsafe_arena_set_allocated_settings(
    ::ParentalSettings* settings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(settings_);
  }
  settings_ = settings;
  if (settings) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CParental_SetParentalSettings_Request.settings)
}
inline ::ParentalSettings* CParental_SetParentalSettings_Request::release_settings() {
  _has_bits_[0] &= ~0x00000008u;
  ::ParentalSettings* temp = settings_;
  settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ParentalSettings* CParental_SetParentalSettings_Request::unsafe_arena_release_settings() {
  // @@protoc_insertion_point(field_release:CParental_SetParentalSettings_Request.settings)
  _has_bits_[0] &= ~0x00000008u;
  ::ParentalSettings* temp = settings_;
  settings_ = nullptr;
  return temp;
}
inline ::ParentalSettings* CParental_SetParentalSettings_Request::_internal_mutable_settings() {
  _has_bits_[0] |= 0x00000008u;
  if (settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::ParentalSettings>(GetArenaForAllocation());
    settings_ = p;
  }
  return settings_;
}
inline ::ParentalSettings* CParental_SetParentalSettings_Request::mutable_settings() {
  ::ParentalSettings* _msg = _internal_mutable_settings();
  // @@protoc_insertion_point(field_mutable:CParental_SetParentalSettings_Request.settings)
  return _msg;
}
inline void CParental_SetParentalSettings_Request::set_allocated_settings(::ParentalSettings* settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete settings_;
  }
  if (settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ParentalSettings>::GetOwningArena(settings);
    if (message_arena != submessage_arena) {
      settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settings, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  settings_ = settings;
  // @@protoc_insertion_point(field_set_allocated:CParental_SetParentalSettings_Request.settings)
}

// optional string new_password = 3;
inline bool CParental_SetParentalSettings_Request::_internal_has_new_password() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CParental_SetParentalSettings_Request::has_new_password() const {
  return _internal_has_new_password();
}
inline void CParental_SetParentalSettings_Request::clear_new_password() {
  new_password_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CParental_SetParentalSettings_Request::new_password() const {
  // @@protoc_insertion_point(field_get:CParental_SetParentalSettings_Request.new_password)
  return _internal_new_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CParental_SetParentalSettings_Request::set_new_password(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 new_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CParental_SetParentalSettings_Request.new_password)
}
inline std::string* CParental_SetParentalSettings_Request::mutable_new_password() {
  std::string* _s = _internal_mutable_new_password();
  // @@protoc_insertion_point(field_mutable:CParental_SetParentalSettings_Request.new_password)
  return _s;
}
inline const std::string& CParental_SetParentalSettings_Request::_internal_new_password() const {
  return new_password_.Get();
}
inline void CParental_SetParentalSettings_Request::_internal_set_new_password(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  new_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CParental_SetParentalSettings_Request::_internal_mutable_new_password() {
  _has_bits_[0] |= 0x00000002u;
  return new_password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CParental_SetParentalSettings_Request::release_new_password() {
  // @@protoc_insertion_point(field_release:CParental_SetParentalSettings_Request.new_password)
  if (!_internal_has_new_password()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = new_password_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (new_password_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    new_password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CParental_SetParentalSettings_Request::set_allocated_new_password(std::string* new_password) {
  if (new_password != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  new_password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), new_password,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (new_password_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    new_password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CParental_SetParentalSettings_Request.new_password)
}

// optional string sessionid = 4;
inline bool CParental_SetParentalSettings_Request::_internal_has_sessionid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CParental_SetParentalSettings_Request::has_sessionid() const {
  return _internal_has_sessionid();
}
inline void CParental_SetParentalSettings_Request::clear_sessionid() {
  sessionid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CParental_SetParentalSettings_Request::sessionid() const {
  // @@protoc_insertion_point(field_get:CParental_SetParentalSettings_Request.sessionid)
  return _internal_sessionid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CParental_SetParentalSettings_Request::set_sessionid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 sessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CParental_SetParentalSettings_Request.sessionid)
}
inline std::string* CParental_SetParentalSettings_Request::mutable_sessionid() {
  std::string* _s = _internal_mutable_sessionid();
  // @@protoc_insertion_point(field_mutable:CParental_SetParentalSettings_Request.sessionid)
  return _s;
}
inline const std::string& CParental_SetParentalSettings_Request::_internal_sessionid() const {
  return sessionid_.Get();
}
inline void CParental_SetParentalSettings_Request::_internal_set_sessionid(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  sessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CParental_SetParentalSettings_Request::_internal_mutable_sessionid() {
  _has_bits_[0] |= 0x00000004u;
  return sessionid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CParental_SetParentalSettings_Request::release_sessionid() {
  // @@protoc_insertion_point(field_release:CParental_SetParentalSettings_Request.sessionid)
  if (!_internal_has_sessionid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = sessionid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sessionid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sessionid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CParental_SetParentalSettings_Request::set_allocated_sessionid(std::string* sessionid) {
  if (sessionid != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  sessionid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sessionid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sessionid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sessionid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CParental_SetParentalSettings_Request.sessionid)
}

// optional fixed64 steamid = 10;
inline bool CParental_SetParentalSettings_Request::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CParental_SetParentalSettings_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CParental_SetParentalSettings_Request::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000010u;
}
inline uint64_t CParental_SetParentalSettings_Request::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CParental_SetParentalSettings_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CParental_SetParentalSettings_Request.steamid)
  return _internal_steamid();
}
inline void CParental_SetParentalSettings_Request::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000010u;
  steamid_ = value;
}
inline void CParental_SetParentalSettings_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CParental_SetParentalSettings_Request.steamid)
}

// -------------------------------------------------------------------

// CParental_SetParentalSettings_Response

// -------------------------------------------------------------------

// CParental_ValidateToken_Request

// optional string unlock_token = 1;
inline bool CParental_ValidateToken_Request::_internal_has_unlock_token() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CParental_ValidateToken_Request::has_unlock_token() const {
  return _internal_has_unlock_token();
}
inline void CParental_ValidateToken_Request::clear_unlock_token() {
  unlock_token_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CParental_ValidateToken_Request::unlock_token() const {
  // @@protoc_insertion_point(field_get:CParental_ValidateToken_Request.unlock_token)
  return _internal_unlock_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CParental_ValidateToken_Request::set_unlock_token(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 unlock_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CParental_ValidateToken_Request.unlock_token)
}
inline std::string* CParental_ValidateToken_Request::mutable_unlock_token() {
  std::string* _s = _internal_mutable_unlock_token();
  // @@protoc_insertion_point(field_mutable:CParental_ValidateToken_Request.unlock_token)
  return _s;
}
inline const std::string& CParental_ValidateToken_Request::_internal_unlock_token() const {
  return unlock_token_.Get();
}
inline void CParental_ValidateToken_Request::_internal_set_unlock_token(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  unlock_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CParental_ValidateToken_Request::_internal_mutable_unlock_token() {
  _has_bits_[0] |= 0x00000001u;
  return unlock_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CParental_ValidateToken_Request::release_unlock_token() {
  // @@protoc_insertion_point(field_release:CParental_ValidateToken_Request.unlock_token)
  if (!_internal_has_unlock_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = unlock_token_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (unlock_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    unlock_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CParental_ValidateToken_Request::set_allocated_unlock_token(std::string* unlock_token) {
  if (unlock_token != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  unlock_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unlock_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (unlock_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    unlock_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CParental_ValidateToken_Request.unlock_token)
}

// -------------------------------------------------------------------

// CParental_ValidateToken_Response

// -------------------------------------------------------------------

// CParental_ValidatePassword_Request

// optional string password = 1;
inline bool CParental_ValidatePassword_Request::_internal_has_password() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CParental_ValidatePassword_Request::has_password() const {
  return _internal_has_password();
}
inline void CParental_ValidatePassword_Request::clear_password() {
  password_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CParental_ValidatePassword_Request::password() const {
  // @@protoc_insertion_point(field_get:CParental_ValidatePassword_Request.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CParental_ValidatePassword_Request::set_password(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CParental_ValidatePassword_Request.password)
}
inline std::string* CParental_ValidatePassword_Request::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:CParental_ValidatePassword_Request.password)
  return _s;
}
inline const std::string& CParental_ValidatePassword_Request::_internal_password() const {
  return password_.Get();
}
inline void CParental_ValidatePassword_Request::_internal_set_password(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CParental_ValidatePassword_Request::_internal_mutable_password() {
  _has_bits_[0] |= 0x00000001u;
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CParental_ValidatePassword_Request::release_password() {
  // @@protoc_insertion_point(field_release:CParental_ValidatePassword_Request.password)
  if (!_internal_has_password()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = password_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (password_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CParental_ValidatePassword_Request::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (password_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CParental_ValidatePassword_Request.password)
}

// optional string session = 2;
inline bool CParental_ValidatePassword_Request::_internal_has_session() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CParental_ValidatePassword_Request::has_session() const {
  return _internal_has_session();
}
inline void CParental_ValidatePassword_Request::clear_session() {
  session_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CParental_ValidatePassword_Request::session() const {
  // @@protoc_insertion_point(field_get:CParental_ValidatePassword_Request.session)
  return _internal_session();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CParental_ValidatePassword_Request::set_session(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 session_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CParental_ValidatePassword_Request.session)
}
inline std::string* CParental_ValidatePassword_Request::mutable_session() {
  std::string* _s = _internal_mutable_session();
  // @@protoc_insertion_point(field_mutable:CParental_ValidatePassword_Request.session)
  return _s;
}
inline const std::string& CParental_ValidatePassword_Request::_internal_session() const {
  return session_.Get();
}
inline void CParental_ValidatePassword_Request::_internal_set_session(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  session_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CParental_ValidatePassword_Request::_internal_mutable_session() {
  _has_bits_[0] |= 0x00000002u;
  return session_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CParental_ValidatePassword_Request::release_session() {
  // @@protoc_insertion_point(field_release:CParental_ValidatePassword_Request.session)
  if (!_internal_has_session()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = session_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CParental_ValidatePassword_Request::set_allocated_session(std::string* session) {
  if (session != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  session_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CParental_ValidatePassword_Request.session)
}

// optional bool send_unlock_on_success = 3;
inline bool CParental_ValidatePassword_Request::_internal_has_send_unlock_on_success() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CParental_ValidatePassword_Request::has_send_unlock_on_success() const {
  return _internal_has_send_unlock_on_success();
}
inline void CParental_ValidatePassword_Request::clear_send_unlock_on_success() {
  send_unlock_on_success_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CParental_ValidatePassword_Request::_internal_send_unlock_on_success() const {
  return send_unlock_on_success_;
}
inline bool CParental_ValidatePassword_Request::send_unlock_on_success() const {
  // @@protoc_insertion_point(field_get:CParental_ValidatePassword_Request.send_unlock_on_success)
  return _internal_send_unlock_on_success();
}
inline void CParental_ValidatePassword_Request::_internal_set_send_unlock_on_success(bool value) {
  _has_bits_[0] |= 0x00000004u;
  send_unlock_on_success_ = value;
}
inline void CParental_ValidatePassword_Request::set_send_unlock_on_success(bool value) {
  _internal_set_send_unlock_on_success(value);
  // @@protoc_insertion_point(field_set:CParental_ValidatePassword_Request.send_unlock_on_success)
}

// -------------------------------------------------------------------

// CParental_ValidatePassword_Response

// optional string token = 1;
inline bool CParental_ValidatePassword_Response::_internal_has_token() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CParental_ValidatePassword_Response::has_token() const {
  return _internal_has_token();
}
inline void CParental_ValidatePassword_Response::clear_token() {
  token_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CParental_ValidatePassword_Response::token() const {
  // @@protoc_insertion_point(field_get:CParental_ValidatePassword_Response.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CParental_ValidatePassword_Response::set_token(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CParental_ValidatePassword_Response.token)
}
inline std::string* CParental_ValidatePassword_Response::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:CParental_ValidatePassword_Response.token)
  return _s;
}
inline const std::string& CParental_ValidatePassword_Response::_internal_token() const {
  return token_.Get();
}
inline void CParental_ValidatePassword_Response::_internal_set_token(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CParental_ValidatePassword_Response::_internal_mutable_token() {
  _has_bits_[0] |= 0x00000001u;
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CParental_ValidatePassword_Response::release_token() {
  // @@protoc_insertion_point(field_release:CParental_ValidatePassword_Response.token)
  if (!_internal_has_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = token_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CParental_ValidatePassword_Response::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CParental_ValidatePassword_Response.token)
}

// -------------------------------------------------------------------

// CParental_LockClient_Request

// optional string session = 1;
inline bool CParental_LockClient_Request::_internal_has_session() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CParental_LockClient_Request::has_session() const {
  return _internal_has_session();
}
inline void CParental_LockClient_Request::clear_session() {
  session_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CParental_LockClient_Request::session() const {
  // @@protoc_insertion_point(field_get:CParental_LockClient_Request.session)
  return _internal_session();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CParental_LockClient_Request::set_session(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 session_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CParental_LockClient_Request.session)
}
inline std::string* CParental_LockClient_Request::mutable_session() {
  std::string* _s = _internal_mutable_session();
  // @@protoc_insertion_point(field_mutable:CParental_LockClient_Request.session)
  return _s;
}
inline const std::string& CParental_LockClient_Request::_internal_session() const {
  return session_.Get();
}
inline void CParental_LockClient_Request::_internal_set_session(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  session_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CParental_LockClient_Request::_internal_mutable_session() {
  _has_bits_[0] |= 0x00000001u;
  return session_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CParental_LockClient_Request::release_session() {
  // @@protoc_insertion_point(field_release:CParental_LockClient_Request.session)
  if (!_internal_has_session()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = session_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CParental_LockClient_Request::set_allocated_session(std::string* session) {
  if (session != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  session_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CParental_LockClient_Request.session)
}

// -------------------------------------------------------------------

// CParental_LockClient_Response

// -------------------------------------------------------------------

// CParental_RequestRecoveryCode_Request

// -------------------------------------------------------------------

// CParental_RequestRecoveryCode_Response

// -------------------------------------------------------------------

// CParental_DisableWithRecoveryCode_Request

// optional uint32 recovery_code = 1;
inline bool CParental_DisableWithRecoveryCode_Request::_internal_has_recovery_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CParental_DisableWithRecoveryCode_Request::has_recovery_code() const {
  return _internal_has_recovery_code();
}
inline void CParental_DisableWithRecoveryCode_Request::clear_recovery_code() {
  recovery_code_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CParental_DisableWithRecoveryCode_Request::_internal_recovery_code() const {
  return recovery_code_;
}
inline uint32_t CParental_DisableWithRecoveryCode_Request::recovery_code() const {
  // @@protoc_insertion_point(field_get:CParental_DisableWithRecoveryCode_Request.recovery_code)
  return _internal_recovery_code();
}
inline void CParental_DisableWithRecoveryCode_Request::_internal_set_recovery_code(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  recovery_code_ = value;
}
inline void CParental_DisableWithRecoveryCode_Request::set_recovery_code(uint32_t value) {
  _internal_set_recovery_code(value);
  // @@protoc_insertion_point(field_set:CParental_DisableWithRecoveryCode_Request.recovery_code)
}

// optional fixed64 steamid = 10;
inline bool CParental_DisableWithRecoveryCode_Request::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CParental_DisableWithRecoveryCode_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CParental_DisableWithRecoveryCode_Request::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CParental_DisableWithRecoveryCode_Request::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CParental_DisableWithRecoveryCode_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CParental_DisableWithRecoveryCode_Request.steamid)
  return _internal_steamid();
}
inline void CParental_DisableWithRecoveryCode_Request::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  steamid_ = value;
}
inline void CParental_DisableWithRecoveryCode_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CParental_DisableWithRecoveryCode_Request.steamid)
}

// -------------------------------------------------------------------

// CParental_DisableWithRecoveryCode_Response

// -------------------------------------------------------------------

// CParental_ParentalSettingsChange_Notification

// optional bytes serialized_settings = 1;
inline bool CParental_ParentalSettingsChange_Notification::_internal_has_serialized_settings() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CParental_ParentalSettingsChange_Notification::has_serialized_settings() const {
  return _internal_has_serialized_settings();
}
inline void CParental_ParentalSettingsChange_Notification::clear_serialized_settings() {
  serialized_settings_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CParental_ParentalSettingsChange_Notification::serialized_settings() const {
  // @@protoc_insertion_point(field_get:CParental_ParentalSettingsChange_Notification.serialized_settings)
  return _internal_serialized_settings();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CParental_ParentalSettingsChange_Notification::set_serialized_settings(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 serialized_settings_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CParental_ParentalSettingsChange_Notification.serialized_settings)
}
inline std::string* CParental_ParentalSettingsChange_Notification::mutable_serialized_settings() {
  std::string* _s = _internal_mutable_serialized_settings();
  // @@protoc_insertion_point(field_mutable:CParental_ParentalSettingsChange_Notification.serialized_settings)
  return _s;
}
inline const std::string& CParental_ParentalSettingsChange_Notification::_internal_serialized_settings() const {
  return serialized_settings_.Get();
}
inline void CParental_ParentalSettingsChange_Notification::_internal_set_serialized_settings(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  serialized_settings_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CParental_ParentalSettingsChange_Notification::_internal_mutable_serialized_settings() {
  _has_bits_[0] |= 0x00000001u;
  return serialized_settings_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CParental_ParentalSettingsChange_Notification::release_serialized_settings() {
  // @@protoc_insertion_point(field_release:CParental_ParentalSettingsChange_Notification.serialized_settings)
  if (!_internal_has_serialized_settings()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = serialized_settings_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (serialized_settings_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    serialized_settings_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CParental_ParentalSettingsChange_Notification::set_allocated_serialized_settings(std::string* serialized_settings) {
  if (serialized_settings != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  serialized_settings_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serialized_settings,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (serialized_settings_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    serialized_settings_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CParental_ParentalSettingsChange_Notification.serialized_settings)
}

// optional bytes signature = 2;
inline bool CParental_ParentalSettingsChange_Notification::_internal_has_signature() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CParental_ParentalSettingsChange_Notification::has_signature() const {
  return _internal_has_signature();
}
inline void CParental_ParentalSettingsChange_Notification::clear_signature() {
  signature_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CParental_ParentalSettingsChange_Notification::signature() const {
  // @@protoc_insertion_point(field_get:CParental_ParentalSettingsChange_Notification.signature)
  return _internal_signature();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CParental_ParentalSettingsChange_Notification::set_signature(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 signature_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CParental_ParentalSettingsChange_Notification.signature)
}
inline std::string* CParental_ParentalSettingsChange_Notification::mutable_signature() {
  std::string* _s = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:CParental_ParentalSettingsChange_Notification.signature)
  return _s;
}
inline const std::string& CParental_ParentalSettingsChange_Notification::_internal_signature() const {
  return signature_.Get();
}
inline void CParental_ParentalSettingsChange_Notification::_internal_set_signature(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CParental_ParentalSettingsChange_Notification::_internal_mutable_signature() {
  _has_bits_[0] |= 0x00000002u;
  return signature_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CParental_ParentalSettingsChange_Notification::release_signature() {
  // @@protoc_insertion_point(field_release:CParental_ParentalSettingsChange_Notification.signature)
  if (!_internal_has_signature()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = signature_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (signature_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CParental_ParentalSettingsChange_Notification::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  signature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (signature_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CParental_ParentalSettingsChange_Notification.signature)
}

// optional string password = 3;
inline bool CParental_ParentalSettingsChange_Notification::_internal_has_password() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CParental_ParentalSettingsChange_Notification::has_password() const {
  return _internal_has_password();
}
inline void CParental_ParentalSettingsChange_Notification::clear_password() {
  password_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CParental_ParentalSettingsChange_Notification::password() const {
  // @@protoc_insertion_point(field_get:CParental_ParentalSettingsChange_Notification.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CParental_ParentalSettingsChange_Notification::set_password(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CParental_ParentalSettingsChange_Notification.password)
}
inline std::string* CParental_ParentalSettingsChange_Notification::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:CParental_ParentalSettingsChange_Notification.password)
  return _s;
}
inline const std::string& CParental_ParentalSettingsChange_Notification::_internal_password() const {
  return password_.Get();
}
inline void CParental_ParentalSettingsChange_Notification::_internal_set_password(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CParental_ParentalSettingsChange_Notification::_internal_mutable_password() {
  _has_bits_[0] |= 0x00000004u;
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CParental_ParentalSettingsChange_Notification::release_password() {
  // @@protoc_insertion_point(field_release:CParental_ParentalSettingsChange_Notification.password)
  if (!_internal_has_password()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = password_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (password_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CParental_ParentalSettingsChange_Notification::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (password_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CParental_ParentalSettingsChange_Notification.password)
}

// optional string sessionid = 4;
inline bool CParental_ParentalSettingsChange_Notification::_internal_has_sessionid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CParental_ParentalSettingsChange_Notification::has_sessionid() const {
  return _internal_has_sessionid();
}
inline void CParental_ParentalSettingsChange_Notification::clear_sessionid() {
  sessionid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CParental_ParentalSettingsChange_Notification::sessionid() const {
  // @@protoc_insertion_point(field_get:CParental_ParentalSettingsChange_Notification.sessionid)
  return _internal_sessionid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CParental_ParentalSettingsChange_Notification::set_sessionid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 sessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CParental_ParentalSettingsChange_Notification.sessionid)
}
inline std::string* CParental_ParentalSettingsChange_Notification::mutable_sessionid() {
  std::string* _s = _internal_mutable_sessionid();
  // @@protoc_insertion_point(field_mutable:CParental_ParentalSettingsChange_Notification.sessionid)
  return _s;
}
inline const std::string& CParental_ParentalSettingsChange_Notification::_internal_sessionid() const {
  return sessionid_.Get();
}
inline void CParental_ParentalSettingsChange_Notification::_internal_set_sessionid(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  sessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CParental_ParentalSettingsChange_Notification::_internal_mutable_sessionid() {
  _has_bits_[0] |= 0x00000008u;
  return sessionid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CParental_ParentalSettingsChange_Notification::release_sessionid() {
  // @@protoc_insertion_point(field_release:CParental_ParentalSettingsChange_Notification.sessionid)
  if (!_internal_has_sessionid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = sessionid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sessionid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sessionid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CParental_ParentalSettingsChange_Notification::set_allocated_sessionid(std::string* sessionid) {
  if (sessionid != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  sessionid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sessionid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sessionid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sessionid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CParental_ParentalSettingsChange_Notification.sessionid)
}

// -------------------------------------------------------------------

// CParental_ParentalUnlock_Notification

// optional string password = 1;
inline bool CParental_ParentalUnlock_Notification::_internal_has_password() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CParental_ParentalUnlock_Notification::has_password() const {
  return _internal_has_password();
}
inline void CParental_ParentalUnlock_Notification::clear_password() {
  password_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CParental_ParentalUnlock_Notification::password() const {
  // @@protoc_insertion_point(field_get:CParental_ParentalUnlock_Notification.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CParental_ParentalUnlock_Notification::set_password(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CParental_ParentalUnlock_Notification.password)
}
inline std::string* CParental_ParentalUnlock_Notification::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:CParental_ParentalUnlock_Notification.password)
  return _s;
}
inline const std::string& CParental_ParentalUnlock_Notification::_internal_password() const {
  return password_.Get();
}
inline void CParental_ParentalUnlock_Notification::_internal_set_password(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CParental_ParentalUnlock_Notification::_internal_mutable_password() {
  _has_bits_[0] |= 0x00000001u;
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CParental_ParentalUnlock_Notification::release_password() {
  // @@protoc_insertion_point(field_release:CParental_ParentalUnlock_Notification.password)
  if (!_internal_has_password()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = password_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (password_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CParental_ParentalUnlock_Notification::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (password_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CParental_ParentalUnlock_Notification.password)
}

// optional string sessionid = 2;
inline bool CParental_ParentalUnlock_Notification::_internal_has_sessionid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CParental_ParentalUnlock_Notification::has_sessionid() const {
  return _internal_has_sessionid();
}
inline void CParental_ParentalUnlock_Notification::clear_sessionid() {
  sessionid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CParental_ParentalUnlock_Notification::sessionid() const {
  // @@protoc_insertion_point(field_get:CParental_ParentalUnlock_Notification.sessionid)
  return _internal_sessionid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CParental_ParentalUnlock_Notification::set_sessionid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 sessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CParental_ParentalUnlock_Notification.sessionid)
}
inline std::string* CParental_ParentalUnlock_Notification::mutable_sessionid() {
  std::string* _s = _internal_mutable_sessionid();
  // @@protoc_insertion_point(field_mutable:CParental_ParentalUnlock_Notification.sessionid)
  return _s;
}
inline const std::string& CParental_ParentalUnlock_Notification::_internal_sessionid() const {
  return sessionid_.Get();
}
inline void CParental_ParentalUnlock_Notification::_internal_set_sessionid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  sessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CParental_ParentalUnlock_Notification::_internal_mutable_sessionid() {
  _has_bits_[0] |= 0x00000002u;
  return sessionid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CParental_ParentalUnlock_Notification::release_sessionid() {
  // @@protoc_insertion_point(field_release:CParental_ParentalUnlock_Notification.sessionid)
  if (!_internal_has_sessionid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = sessionid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sessionid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sessionid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CParental_ParentalUnlock_Notification::set_allocated_sessionid(std::string* sessionid) {
  if (sessionid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sessionid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sessionid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sessionid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sessionid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CParental_ParentalUnlock_Notification.sessionid)
}

// -------------------------------------------------------------------

// CParental_ParentalLock_Notification

// optional string sessionid = 1;
inline bool CParental_ParentalLock_Notification::_internal_has_sessionid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CParental_ParentalLock_Notification::has_sessionid() const {
  return _internal_has_sessionid();
}
inline void CParental_ParentalLock_Notification::clear_sessionid() {
  sessionid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CParental_ParentalLock_Notification::sessionid() const {
  // @@protoc_insertion_point(field_get:CParental_ParentalLock_Notification.sessionid)
  return _internal_sessionid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CParental_ParentalLock_Notification::set_sessionid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 sessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CParental_ParentalLock_Notification.sessionid)
}
inline std::string* CParental_ParentalLock_Notification::mutable_sessionid() {
  std::string* _s = _internal_mutable_sessionid();
  // @@protoc_insertion_point(field_mutable:CParental_ParentalLock_Notification.sessionid)
  return _s;
}
inline const std::string& CParental_ParentalLock_Notification::_internal_sessionid() const {
  return sessionid_.Get();
}
inline void CParental_ParentalLock_Notification::_internal_set_sessionid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CParental_ParentalLock_Notification::_internal_mutable_sessionid() {
  _has_bits_[0] |= 0x00000001u;
  return sessionid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CParental_ParentalLock_Notification::release_sessionid() {
  // @@protoc_insertion_point(field_release:CParental_ParentalLock_Notification.sessionid)
  if (!_internal_has_sessionid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = sessionid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sessionid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sessionid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CParental_ParentalLock_Notification::set_allocated_sessionid(std::string* sessionid) {
  if (sessionid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sessionid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sessionid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sessionid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sessionid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CParental_ParentalLock_Notification.sessionid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_steammessages_5fparental_2esteamclient_2eproto
