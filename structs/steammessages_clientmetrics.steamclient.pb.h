// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_clientmetrics.steamclient.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_steammessages_5fclientmetrics_2esteamclient_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_steammessages_5fclientmetrics_2esteamclient_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "steammessages_base.pb.h"
#include "steammessages_unified_base.steamclient.pb.h"
#include "clientmetrics.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_5fclientmetrics_2esteamclient_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_5fclientmetrics_2esteamclient_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[20]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fclientmetrics_2esteamclient_2eproto;
class CClientMetrics_AppInterfaceCreation;
struct CClientMetrics_AppInterfaceCreationDefaultTypeInternal;
extern CClientMetrics_AppInterfaceCreationDefaultTypeInternal _CClientMetrics_AppInterfaceCreation_default_instance_;
class CClientMetrics_AppInterfaceMethodCounts;
struct CClientMetrics_AppInterfaceMethodCountsDefaultTypeInternal;
extern CClientMetrics_AppInterfaceMethodCountsDefaultTypeInternal _CClientMetrics_AppInterfaceMethodCounts_default_instance_;
class CClientMetrics_AppInterfaceStats_Notification;
struct CClientMetrics_AppInterfaceStats_NotificationDefaultTypeInternal;
extern CClientMetrics_AppInterfaceStats_NotificationDefaultTypeInternal _CClientMetrics_AppInterfaceStats_Notification_default_instance_;
class CClientMetrics_ClientBootstrap_Notification;
struct CClientMetrics_ClientBootstrap_NotificationDefaultTypeInternal;
extern CClientMetrics_ClientBootstrap_NotificationDefaultTypeInternal _CClientMetrics_ClientBootstrap_Notification_default_instance_;
class CClientMetrics_CloudAppSyncStats_Notification;
struct CClientMetrics_CloudAppSyncStats_NotificationDefaultTypeInternal;
extern CClientMetrics_CloudAppSyncStats_NotificationDefaultTypeInternal _CClientMetrics_CloudAppSyncStats_Notification_default_instance_;
class CClientMetrics_ContentDownloadResponse_Counts_Notification;
struct CClientMetrics_ContentDownloadResponse_Counts_NotificationDefaultTypeInternal;
extern CClientMetrics_ContentDownloadResponse_Counts_NotificationDefaultTypeInternal _CClientMetrics_ContentDownloadResponse_Counts_Notification_default_instance_;
class CClientMetrics_ContentValidation_Notification;
struct CClientMetrics_ContentValidation_NotificationDefaultTypeInternal;
extern CClientMetrics_ContentValidation_NotificationDefaultTypeInternal _CClientMetrics_ContentValidation_Notification_default_instance_;
class CClientMetrics_DownloadRates_Notification;
struct CClientMetrics_DownloadRates_NotificationDefaultTypeInternal;
extern CClientMetrics_DownloadRates_NotificationDefaultTypeInternal _CClientMetrics_DownloadRates_Notification_default_instance_;
class CClientMetrics_DownloadRates_Notification_StatsInfo;
struct CClientMetrics_DownloadRates_Notification_StatsInfoDefaultTypeInternal;
extern CClientMetrics_DownloadRates_Notification_StatsInfoDefaultTypeInternal _CClientMetrics_DownloadRates_Notification_StatsInfo_default_instance_;
class CClientMetrics_IPv6Connectivity_Notification;
struct CClientMetrics_IPv6Connectivity_NotificationDefaultTypeInternal;
extern CClientMetrics_IPv6Connectivity_NotificationDefaultTypeInternal _CClientMetrics_IPv6Connectivity_Notification_default_instance_;
class CClientMetrics_IPv6Connectivity_Result;
struct CClientMetrics_IPv6Connectivity_ResultDefaultTypeInternal;
extern CClientMetrics_IPv6Connectivity_ResultDefaultTypeInternal _CClientMetrics_IPv6Connectivity_Result_default_instance_;
class CClientMetrics_ReportClientArgs_Notification;
struct CClientMetrics_ReportClientArgs_NotificationDefaultTypeInternal;
extern CClientMetrics_ReportClientArgs_NotificationDefaultTypeInternal _CClientMetrics_ReportClientArgs_Notification_default_instance_;
class CClientMetrics_ReportClientError_Notification;
struct CClientMetrics_ReportClientError_NotificationDefaultTypeInternal;
extern CClientMetrics_ReportClientError_NotificationDefaultTypeInternal _CClientMetrics_ReportClientError_Notification_default_instance_;
class CClientMetrics_ReportClientError_Notification_Error;
struct CClientMetrics_ReportClientError_Notification_ErrorDefaultTypeInternal;
extern CClientMetrics_ReportClientError_Notification_ErrorDefaultTypeInternal _CClientMetrics_ReportClientError_Notification_Error_default_instance_;
class CClientMetrics_ReportReactUsage_Notification;
struct CClientMetrics_ReportReactUsage_NotificationDefaultTypeInternal;
extern CClientMetrics_ReportReactUsage_NotificationDefaultTypeInternal _CClientMetrics_ReportReactUsage_Notification_default_instance_;
class CClientMetrics_ReportReactUsage_Notification_ActionData;
struct CClientMetrics_ReportReactUsage_Notification_ActionDataDefaultTypeInternal;
extern CClientMetrics_ReportReactUsage_Notification_ActionDataDefaultTypeInternal _CClientMetrics_ReportReactUsage_Notification_ActionData_default_instance_;
class CClientMetrics_ReportReactUsage_Notification_ComponentData;
struct CClientMetrics_ReportReactUsage_Notification_ComponentDataDefaultTypeInternal;
extern CClientMetrics_ReportReactUsage_Notification_ComponentDataDefaultTypeInternal _CClientMetrics_ReportReactUsage_Notification_ComponentData_default_instance_;
class CClientMetrics_ReportReactUsage_Notification_RouteData;
struct CClientMetrics_ReportReactUsage_Notification_RouteDataDefaultTypeInternal;
extern CClientMetrics_ReportReactUsage_Notification_RouteDataDefaultTypeInternal _CClientMetrics_ReportReactUsage_Notification_RouteData_default_instance_;
class CClientMetrics_SteamPipeWorkStats_Notification;
struct CClientMetrics_SteamPipeWorkStats_NotificationDefaultTypeInternal;
extern CClientMetrics_SteamPipeWorkStats_NotificationDefaultTypeInternal _CClientMetrics_SteamPipeWorkStats_Notification_default_instance_;
class CClientMetrics_SteamPipeWorkStats_Operation;
struct CClientMetrics_SteamPipeWorkStats_OperationDefaultTypeInternal;
extern CClientMetrics_SteamPipeWorkStats_OperationDefaultTypeInternal _CClientMetrics_SteamPipeWorkStats_Operation_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CClientMetrics_AppInterfaceCreation* Arena::CreateMaybeMessage<::CClientMetrics_AppInterfaceCreation>(Arena*);
template<> ::CClientMetrics_AppInterfaceMethodCounts* Arena::CreateMaybeMessage<::CClientMetrics_AppInterfaceMethodCounts>(Arena*);
template<> ::CClientMetrics_AppInterfaceStats_Notification* Arena::CreateMaybeMessage<::CClientMetrics_AppInterfaceStats_Notification>(Arena*);
template<> ::CClientMetrics_ClientBootstrap_Notification* Arena::CreateMaybeMessage<::CClientMetrics_ClientBootstrap_Notification>(Arena*);
template<> ::CClientMetrics_CloudAppSyncStats_Notification* Arena::CreateMaybeMessage<::CClientMetrics_CloudAppSyncStats_Notification>(Arena*);
template<> ::CClientMetrics_ContentDownloadResponse_Counts_Notification* Arena::CreateMaybeMessage<::CClientMetrics_ContentDownloadResponse_Counts_Notification>(Arena*);
template<> ::CClientMetrics_ContentValidation_Notification* Arena::CreateMaybeMessage<::CClientMetrics_ContentValidation_Notification>(Arena*);
template<> ::CClientMetrics_DownloadRates_Notification* Arena::CreateMaybeMessage<::CClientMetrics_DownloadRates_Notification>(Arena*);
template<> ::CClientMetrics_DownloadRates_Notification_StatsInfo* Arena::CreateMaybeMessage<::CClientMetrics_DownloadRates_Notification_StatsInfo>(Arena*);
template<> ::CClientMetrics_IPv6Connectivity_Notification* Arena::CreateMaybeMessage<::CClientMetrics_IPv6Connectivity_Notification>(Arena*);
template<> ::CClientMetrics_IPv6Connectivity_Result* Arena::CreateMaybeMessage<::CClientMetrics_IPv6Connectivity_Result>(Arena*);
template<> ::CClientMetrics_ReportClientArgs_Notification* Arena::CreateMaybeMessage<::CClientMetrics_ReportClientArgs_Notification>(Arena*);
template<> ::CClientMetrics_ReportClientError_Notification* Arena::CreateMaybeMessage<::CClientMetrics_ReportClientError_Notification>(Arena*);
template<> ::CClientMetrics_ReportClientError_Notification_Error* Arena::CreateMaybeMessage<::CClientMetrics_ReportClientError_Notification_Error>(Arena*);
template<> ::CClientMetrics_ReportReactUsage_Notification* Arena::CreateMaybeMessage<::CClientMetrics_ReportReactUsage_Notification>(Arena*);
template<> ::CClientMetrics_ReportReactUsage_Notification_ActionData* Arena::CreateMaybeMessage<::CClientMetrics_ReportReactUsage_Notification_ActionData>(Arena*);
template<> ::CClientMetrics_ReportReactUsage_Notification_ComponentData* Arena::CreateMaybeMessage<::CClientMetrics_ReportReactUsage_Notification_ComponentData>(Arena*);
template<> ::CClientMetrics_ReportReactUsage_Notification_RouteData* Arena::CreateMaybeMessage<::CClientMetrics_ReportReactUsage_Notification_RouteData>(Arena*);
template<> ::CClientMetrics_SteamPipeWorkStats_Notification* Arena::CreateMaybeMessage<::CClientMetrics_SteamPipeWorkStats_Notification>(Arena*);
template<> ::CClientMetrics_SteamPipeWorkStats_Operation* Arena::CreateMaybeMessage<::CClientMetrics_SteamPipeWorkStats_Operation>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum ESteamPipeWorkType : int {
  k_ESteamPipeClientWorkType_Invalid = 0,
  k_ESteamPipeClientWorkType_StageFromChunkStores = 1
};
bool ESteamPipeWorkType_IsValid(int value);
constexpr ESteamPipeWorkType ESteamPipeWorkType_MIN = k_ESteamPipeClientWorkType_Invalid;
constexpr ESteamPipeWorkType ESteamPipeWorkType_MAX = k_ESteamPipeClientWorkType_StageFromChunkStores;
constexpr int ESteamPipeWorkType_ARRAYSIZE = ESteamPipeWorkType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESteamPipeWorkType_descriptor();
template<typename T>
inline const std::string& ESteamPipeWorkType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ESteamPipeWorkType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ESteamPipeWorkType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ESteamPipeWorkType_descriptor(), enum_t_value);
}
inline bool ESteamPipeWorkType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ESteamPipeWorkType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ESteamPipeWorkType>(
    ESteamPipeWorkType_descriptor(), name, value);
}
enum ESteamPipeOperationType : int {
  k_ESteamPipeOperationType_Invalid = 0,
  k_ESteamPipeOperationType_DecryptCPU = 1,
  k_ESteamPipeOperationType_DiskRead = 2,
  k_ESteamPipeOperationType_DiskWrite = 3
};
bool ESteamPipeOperationType_IsValid(int value);
constexpr ESteamPipeOperationType ESteamPipeOperationType_MIN = k_ESteamPipeOperationType_Invalid;
constexpr ESteamPipeOperationType ESteamPipeOperationType_MAX = k_ESteamPipeOperationType_DiskWrite;
constexpr int ESteamPipeOperationType_ARRAYSIZE = ESteamPipeOperationType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESteamPipeOperationType_descriptor();
template<typename T>
inline const std::string& ESteamPipeOperationType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ESteamPipeOperationType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ESteamPipeOperationType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ESteamPipeOperationType_descriptor(), enum_t_value);
}
inline bool ESteamPipeOperationType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ESteamPipeOperationType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ESteamPipeOperationType>(
    ESteamPipeOperationType_descriptor(), name, value);
}
// ===================================================================

class CClientMetrics_AppInterfaceCreation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CClientMetrics_AppInterfaceCreation) */ {
 public:
  inline CClientMetrics_AppInterfaceCreation() : CClientMetrics_AppInterfaceCreation(nullptr) {}
  ~CClientMetrics_AppInterfaceCreation() override;
  explicit constexpr CClientMetrics_AppInterfaceCreation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CClientMetrics_AppInterfaceCreation(const CClientMetrics_AppInterfaceCreation& from);
  CClientMetrics_AppInterfaceCreation(CClientMetrics_AppInterfaceCreation&& from) noexcept
    : CClientMetrics_AppInterfaceCreation() {
    *this = ::std::move(from);
  }

  inline CClientMetrics_AppInterfaceCreation& operator=(const CClientMetrics_AppInterfaceCreation& from) {
    CopyFrom(from);
    return *this;
  }
  inline CClientMetrics_AppInterfaceCreation& operator=(CClientMetrics_AppInterfaceCreation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CClientMetrics_AppInterfaceCreation& default_instance() {
    return *internal_default_instance();
  }
  static inline const CClientMetrics_AppInterfaceCreation* internal_default_instance() {
    return reinterpret_cast<const CClientMetrics_AppInterfaceCreation*>(
               &_CClientMetrics_AppInterfaceCreation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CClientMetrics_AppInterfaceCreation& a, CClientMetrics_AppInterfaceCreation& b) {
    a.Swap(&b);
  }
  inline void Swap(CClientMetrics_AppInterfaceCreation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CClientMetrics_AppInterfaceCreation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CClientMetrics_AppInterfaceCreation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CClientMetrics_AppInterfaceCreation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CClientMetrics_AppInterfaceCreation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CClientMetrics_AppInterfaceCreation& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CClientMetrics_AppInterfaceCreation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CClientMetrics_AppInterfaceCreation";
  }
  protected:
  explicit CClientMetrics_AppInterfaceCreation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRawVersionFieldNumber = 1,
    kRequestedInterfaceTypeFieldNumber = 2,
  };
  // optional string raw_version = 1;
  bool has_raw_version() const;
  private:
  bool _internal_has_raw_version() const;
  public:
  void clear_raw_version();
  const std::string& raw_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_raw_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_raw_version();
  PROTOBUF_NODISCARD std::string* release_raw_version();
  void set_allocated_raw_version(std::string* raw_version);
  private:
  const std::string& _internal_raw_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_raw_version(const std::string& value);
  std::string* _internal_mutable_raw_version();
  public:

  // optional string requested_interface_type = 2;
  bool has_requested_interface_type() const;
  private:
  bool _internal_has_requested_interface_type() const;
  public:
  void clear_requested_interface_type();
  const std::string& requested_interface_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_requested_interface_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_requested_interface_type();
  PROTOBUF_NODISCARD std::string* release_requested_interface_type();
  void set_allocated_requested_interface_type(std::string* requested_interface_type);
  private:
  const std::string& _internal_requested_interface_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_requested_interface_type(const std::string& value);
  std::string* _internal_mutable_requested_interface_type();
  public:

  // @@protoc_insertion_point(class_scope:CClientMetrics_AppInterfaceCreation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr raw_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requested_interface_type_;
  friend struct ::TableStruct_steammessages_5fclientmetrics_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CClientMetrics_AppInterfaceMethodCounts final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CClientMetrics_AppInterfaceMethodCounts) */ {
 public:
  inline CClientMetrics_AppInterfaceMethodCounts() : CClientMetrics_AppInterfaceMethodCounts(nullptr) {}
  ~CClientMetrics_AppInterfaceMethodCounts() override;
  explicit constexpr CClientMetrics_AppInterfaceMethodCounts(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CClientMetrics_AppInterfaceMethodCounts(const CClientMetrics_AppInterfaceMethodCounts& from);
  CClientMetrics_AppInterfaceMethodCounts(CClientMetrics_AppInterfaceMethodCounts&& from) noexcept
    : CClientMetrics_AppInterfaceMethodCounts() {
    *this = ::std::move(from);
  }

  inline CClientMetrics_AppInterfaceMethodCounts& operator=(const CClientMetrics_AppInterfaceMethodCounts& from) {
    CopyFrom(from);
    return *this;
  }
  inline CClientMetrics_AppInterfaceMethodCounts& operator=(CClientMetrics_AppInterfaceMethodCounts&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CClientMetrics_AppInterfaceMethodCounts& default_instance() {
    return *internal_default_instance();
  }
  static inline const CClientMetrics_AppInterfaceMethodCounts* internal_default_instance() {
    return reinterpret_cast<const CClientMetrics_AppInterfaceMethodCounts*>(
               &_CClientMetrics_AppInterfaceMethodCounts_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CClientMetrics_AppInterfaceMethodCounts& a, CClientMetrics_AppInterfaceMethodCounts& b) {
    a.Swap(&b);
  }
  inline void Swap(CClientMetrics_AppInterfaceMethodCounts* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CClientMetrics_AppInterfaceMethodCounts* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CClientMetrics_AppInterfaceMethodCounts* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CClientMetrics_AppInterfaceMethodCounts>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CClientMetrics_AppInterfaceMethodCounts& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CClientMetrics_AppInterfaceMethodCounts& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CClientMetrics_AppInterfaceMethodCounts* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CClientMetrics_AppInterfaceMethodCounts";
  }
  protected:
  explicit CClientMetrics_AppInterfaceMethodCounts(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInterfaceNameFieldNumber = 1,
    kMethodNameFieldNumber = 2,
    kCallCountFieldNumber = 3,
  };
  // optional string interface_name = 1;
  bool has_interface_name() const;
  private:
  bool _internal_has_interface_name() const;
  public:
  void clear_interface_name();
  const std::string& interface_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_interface_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_interface_name();
  PROTOBUF_NODISCARD std::string* release_interface_name();
  void set_allocated_interface_name(std::string* interface_name);
  private:
  const std::string& _internal_interface_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_interface_name(const std::string& value);
  std::string* _internal_mutable_interface_name();
  public:

  // optional string method_name = 2;
  bool has_method_name() const;
  private:
  bool _internal_has_method_name() const;
  public:
  void clear_method_name();
  const std::string& method_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_method_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_method_name();
  PROTOBUF_NODISCARD std::string* release_method_name();
  void set_allocated_method_name(std::string* method_name);
  private:
  const std::string& _internal_method_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_method_name(const std::string& value);
  std::string* _internal_mutable_method_name();
  public:

  // optional uint32 call_count = 3;
  bool has_call_count() const;
  private:
  bool _internal_has_call_count() const;
  public:
  void clear_call_count();
  uint32_t call_count() const;
  void set_call_count(uint32_t value);
  private:
  uint32_t _internal_call_count() const;
  void _internal_set_call_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CClientMetrics_AppInterfaceMethodCounts)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr interface_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_name_;
  uint32_t call_count_;
  friend struct ::TableStruct_steammessages_5fclientmetrics_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CClientMetrics_AppInterfaceStats_Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CClientMetrics_AppInterfaceStats_Notification) */ {
 public:
  inline CClientMetrics_AppInterfaceStats_Notification() : CClientMetrics_AppInterfaceStats_Notification(nullptr) {}
  ~CClientMetrics_AppInterfaceStats_Notification() override;
  explicit constexpr CClientMetrics_AppInterfaceStats_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CClientMetrics_AppInterfaceStats_Notification(const CClientMetrics_AppInterfaceStats_Notification& from);
  CClientMetrics_AppInterfaceStats_Notification(CClientMetrics_AppInterfaceStats_Notification&& from) noexcept
    : CClientMetrics_AppInterfaceStats_Notification() {
    *this = ::std::move(from);
  }

  inline CClientMetrics_AppInterfaceStats_Notification& operator=(const CClientMetrics_AppInterfaceStats_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CClientMetrics_AppInterfaceStats_Notification& operator=(CClientMetrics_AppInterfaceStats_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CClientMetrics_AppInterfaceStats_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CClientMetrics_AppInterfaceStats_Notification* internal_default_instance() {
    return reinterpret_cast<const CClientMetrics_AppInterfaceStats_Notification*>(
               &_CClientMetrics_AppInterfaceStats_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CClientMetrics_AppInterfaceStats_Notification& a, CClientMetrics_AppInterfaceStats_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CClientMetrics_AppInterfaceStats_Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CClientMetrics_AppInterfaceStats_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CClientMetrics_AppInterfaceStats_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CClientMetrics_AppInterfaceStats_Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CClientMetrics_AppInterfaceStats_Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CClientMetrics_AppInterfaceStats_Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CClientMetrics_AppInterfaceStats_Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CClientMetrics_AppInterfaceStats_Notification";
  }
  protected:
  explicit CClientMetrics_AppInterfaceStats_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInterfacesCreatedFieldNumber = 2,
    kMethodsCalledFieldNumber = 3,
    kGameIdFieldNumber = 1,
    kSessionLengthSecondsFieldNumber = 4,
  };
  // repeated .CClientMetrics_AppInterfaceCreation interfaces_created = 2;
  int interfaces_created_size() const;
  private:
  int _internal_interfaces_created_size() const;
  public:
  void clear_interfaces_created();
  ::CClientMetrics_AppInterfaceCreation* mutable_interfaces_created(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CClientMetrics_AppInterfaceCreation >*
      mutable_interfaces_created();
  private:
  const ::CClientMetrics_AppInterfaceCreation& _internal_interfaces_created(int index) const;
  ::CClientMetrics_AppInterfaceCreation* _internal_add_interfaces_created();
  public:
  const ::CClientMetrics_AppInterfaceCreation& interfaces_created(int index) const;
  ::CClientMetrics_AppInterfaceCreation* add_interfaces_created();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CClientMetrics_AppInterfaceCreation >&
      interfaces_created() const;

  // repeated .CClientMetrics_AppInterfaceMethodCounts methods_called = 3;
  int methods_called_size() const;
  private:
  int _internal_methods_called_size() const;
  public:
  void clear_methods_called();
  ::CClientMetrics_AppInterfaceMethodCounts* mutable_methods_called(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CClientMetrics_AppInterfaceMethodCounts >*
      mutable_methods_called();
  private:
  const ::CClientMetrics_AppInterfaceMethodCounts& _internal_methods_called(int index) const;
  ::CClientMetrics_AppInterfaceMethodCounts* _internal_add_methods_called();
  public:
  const ::CClientMetrics_AppInterfaceMethodCounts& methods_called(int index) const;
  ::CClientMetrics_AppInterfaceMethodCounts* add_methods_called();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CClientMetrics_AppInterfaceMethodCounts >&
      methods_called() const;

  // optional uint64 game_id = 1;
  bool has_game_id() const;
  private:
  bool _internal_has_game_id() const;
  public:
  void clear_game_id();
  uint64_t game_id() const;
  void set_game_id(uint64_t value);
  private:
  uint64_t _internal_game_id() const;
  void _internal_set_game_id(uint64_t value);
  public:

  // optional uint32 session_length_seconds = 4;
  bool has_session_length_seconds() const;
  private:
  bool _internal_has_session_length_seconds() const;
  public:
  void clear_session_length_seconds();
  uint32_t session_length_seconds() const;
  void set_session_length_seconds(uint32_t value);
  private:
  uint32_t _internal_session_length_seconds() const;
  void _internal_set_session_length_seconds(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CClientMetrics_AppInterfaceStats_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CClientMetrics_AppInterfaceCreation > interfaces_created_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CClientMetrics_AppInterfaceMethodCounts > methods_called_;
  uint64_t game_id_;
  uint32_t session_length_seconds_;
  friend struct ::TableStruct_steammessages_5fclientmetrics_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CClientMetrics_IPv6Connectivity_Result final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CClientMetrics_IPv6Connectivity_Result) */ {
 public:
  inline CClientMetrics_IPv6Connectivity_Result() : CClientMetrics_IPv6Connectivity_Result(nullptr) {}
  ~CClientMetrics_IPv6Connectivity_Result() override;
  explicit constexpr CClientMetrics_IPv6Connectivity_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CClientMetrics_IPv6Connectivity_Result(const CClientMetrics_IPv6Connectivity_Result& from);
  CClientMetrics_IPv6Connectivity_Result(CClientMetrics_IPv6Connectivity_Result&& from) noexcept
    : CClientMetrics_IPv6Connectivity_Result() {
    *this = ::std::move(from);
  }

  inline CClientMetrics_IPv6Connectivity_Result& operator=(const CClientMetrics_IPv6Connectivity_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline CClientMetrics_IPv6Connectivity_Result& operator=(CClientMetrics_IPv6Connectivity_Result&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CClientMetrics_IPv6Connectivity_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const CClientMetrics_IPv6Connectivity_Result* internal_default_instance() {
    return reinterpret_cast<const CClientMetrics_IPv6Connectivity_Result*>(
               &_CClientMetrics_IPv6Connectivity_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CClientMetrics_IPv6Connectivity_Result& a, CClientMetrics_IPv6Connectivity_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(CClientMetrics_IPv6Connectivity_Result* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CClientMetrics_IPv6Connectivity_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CClientMetrics_IPv6Connectivity_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CClientMetrics_IPv6Connectivity_Result>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CClientMetrics_IPv6Connectivity_Result& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CClientMetrics_IPv6Connectivity_Result& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CClientMetrics_IPv6Connectivity_Result* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CClientMetrics_IPv6Connectivity_Result";
  }
  protected:
  explicit CClientMetrics_IPv6Connectivity_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProtocolTestedFieldNumber = 1,
    kConnectivityStateFieldNumber = 2,
  };
  // optional uint32 protocol_tested = 1;
  bool has_protocol_tested() const;
  private:
  bool _internal_has_protocol_tested() const;
  public:
  void clear_protocol_tested();
  uint32_t protocol_tested() const;
  void set_protocol_tested(uint32_t value);
  private:
  uint32_t _internal_protocol_tested() const;
  void _internal_set_protocol_tested(uint32_t value);
  public:

  // optional uint32 connectivity_state = 2;
  bool has_connectivity_state() const;
  private:
  bool _internal_has_connectivity_state() const;
  public:
  void clear_connectivity_state();
  uint32_t connectivity_state() const;
  void set_connectivity_state(uint32_t value);
  private:
  uint32_t _internal_connectivity_state() const;
  void _internal_set_connectivity_state(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CClientMetrics_IPv6Connectivity_Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t protocol_tested_;
  uint32_t connectivity_state_;
  friend struct ::TableStruct_steammessages_5fclientmetrics_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CClientMetrics_IPv6Connectivity_Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CClientMetrics_IPv6Connectivity_Notification) */ {
 public:
  inline CClientMetrics_IPv6Connectivity_Notification() : CClientMetrics_IPv6Connectivity_Notification(nullptr) {}
  ~CClientMetrics_IPv6Connectivity_Notification() override;
  explicit constexpr CClientMetrics_IPv6Connectivity_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CClientMetrics_IPv6Connectivity_Notification(const CClientMetrics_IPv6Connectivity_Notification& from);
  CClientMetrics_IPv6Connectivity_Notification(CClientMetrics_IPv6Connectivity_Notification&& from) noexcept
    : CClientMetrics_IPv6Connectivity_Notification() {
    *this = ::std::move(from);
  }

  inline CClientMetrics_IPv6Connectivity_Notification& operator=(const CClientMetrics_IPv6Connectivity_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CClientMetrics_IPv6Connectivity_Notification& operator=(CClientMetrics_IPv6Connectivity_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CClientMetrics_IPv6Connectivity_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CClientMetrics_IPv6Connectivity_Notification* internal_default_instance() {
    return reinterpret_cast<const CClientMetrics_IPv6Connectivity_Notification*>(
               &_CClientMetrics_IPv6Connectivity_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CClientMetrics_IPv6Connectivity_Notification& a, CClientMetrics_IPv6Connectivity_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CClientMetrics_IPv6Connectivity_Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CClientMetrics_IPv6Connectivity_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CClientMetrics_IPv6Connectivity_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CClientMetrics_IPv6Connectivity_Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CClientMetrics_IPv6Connectivity_Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CClientMetrics_IPv6Connectivity_Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CClientMetrics_IPv6Connectivity_Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CClientMetrics_IPv6Connectivity_Notification";
  }
  protected:
  explicit CClientMetrics_IPv6Connectivity_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 2,
    kCellIdFieldNumber = 1,
    kPrivateIpIsRfc6598FieldNumber = 3,
  };
  // repeated .CClientMetrics_IPv6Connectivity_Result results = 2;
  int results_size() const;
  private:
  int _internal_results_size() const;
  public:
  void clear_results();
  ::CClientMetrics_IPv6Connectivity_Result* mutable_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CClientMetrics_IPv6Connectivity_Result >*
      mutable_results();
  private:
  const ::CClientMetrics_IPv6Connectivity_Result& _internal_results(int index) const;
  ::CClientMetrics_IPv6Connectivity_Result* _internal_add_results();
  public:
  const ::CClientMetrics_IPv6Connectivity_Result& results(int index) const;
  ::CClientMetrics_IPv6Connectivity_Result* add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CClientMetrics_IPv6Connectivity_Result >&
      results() const;

  // optional uint32 cell_id = 1;
  bool has_cell_id() const;
  private:
  bool _internal_has_cell_id() const;
  public:
  void clear_cell_id();
  uint32_t cell_id() const;
  void set_cell_id(uint32_t value);
  private:
  uint32_t _internal_cell_id() const;
  void _internal_set_cell_id(uint32_t value);
  public:

  // optional bool private_ip_is_rfc6598 = 3;
  bool has_private_ip_is_rfc6598() const;
  private:
  bool _internal_has_private_ip_is_rfc6598() const;
  public:
  void clear_private_ip_is_rfc6598();
  bool private_ip_is_rfc6598() const;
  void set_private_ip_is_rfc6598(bool value);
  private:
  bool _internal_private_ip_is_rfc6598() const;
  void _internal_set_private_ip_is_rfc6598(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CClientMetrics_IPv6Connectivity_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CClientMetrics_IPv6Connectivity_Result > results_;
  uint32_t cell_id_;
  bool private_ip_is_rfc6598_;
  friend struct ::TableStruct_steammessages_5fclientmetrics_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CClientMetrics_SteamPipeWorkStats_Operation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CClientMetrics_SteamPipeWorkStats_Operation) */ {
 public:
  inline CClientMetrics_SteamPipeWorkStats_Operation() : CClientMetrics_SteamPipeWorkStats_Operation(nullptr) {}
  ~CClientMetrics_SteamPipeWorkStats_Operation() override;
  explicit constexpr CClientMetrics_SteamPipeWorkStats_Operation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CClientMetrics_SteamPipeWorkStats_Operation(const CClientMetrics_SteamPipeWorkStats_Operation& from);
  CClientMetrics_SteamPipeWorkStats_Operation(CClientMetrics_SteamPipeWorkStats_Operation&& from) noexcept
    : CClientMetrics_SteamPipeWorkStats_Operation() {
    *this = ::std::move(from);
  }

  inline CClientMetrics_SteamPipeWorkStats_Operation& operator=(const CClientMetrics_SteamPipeWorkStats_Operation& from) {
    CopyFrom(from);
    return *this;
  }
  inline CClientMetrics_SteamPipeWorkStats_Operation& operator=(CClientMetrics_SteamPipeWorkStats_Operation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CClientMetrics_SteamPipeWorkStats_Operation& default_instance() {
    return *internal_default_instance();
  }
  static inline const CClientMetrics_SteamPipeWorkStats_Operation* internal_default_instance() {
    return reinterpret_cast<const CClientMetrics_SteamPipeWorkStats_Operation*>(
               &_CClientMetrics_SteamPipeWorkStats_Operation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CClientMetrics_SteamPipeWorkStats_Operation& a, CClientMetrics_SteamPipeWorkStats_Operation& b) {
    a.Swap(&b);
  }
  inline void Swap(CClientMetrics_SteamPipeWorkStats_Operation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CClientMetrics_SteamPipeWorkStats_Operation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CClientMetrics_SteamPipeWorkStats_Operation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CClientMetrics_SteamPipeWorkStats_Operation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CClientMetrics_SteamPipeWorkStats_Operation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CClientMetrics_SteamPipeWorkStats_Operation& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CClientMetrics_SteamPipeWorkStats_Operation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CClientMetrics_SteamPipeWorkStats_Operation";
  }
  protected:
  explicit CClientMetrics_SteamPipeWorkStats_Operation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kNumOpsFieldNumber = 2,
    kNumBytesFieldNumber = 3,
    kBusyTimeMsFieldNumber = 4,
    kIdleTimeMsFieldNumber = 5,
    kSumRunTimeMsFieldNumber = 6,
    kSumWaitTimeMsFieldNumber = 7,
  };
  // optional .ESteamPipeOperationType type = 1 [default = k_ESteamPipeOperationType_Invalid];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::ESteamPipeOperationType type() const;
  void set_type(::ESteamPipeOperationType value);
  private:
  ::ESteamPipeOperationType _internal_type() const;
  void _internal_set_type(::ESteamPipeOperationType value);
  public:

  // optional uint32 num_ops = 2;
  bool has_num_ops() const;
  private:
  bool _internal_has_num_ops() const;
  public:
  void clear_num_ops();
  uint32_t num_ops() const;
  void set_num_ops(uint32_t value);
  private:
  uint32_t _internal_num_ops() const;
  void _internal_set_num_ops(uint32_t value);
  public:

  // optional uint64 num_bytes = 3;
  bool has_num_bytes() const;
  private:
  bool _internal_has_num_bytes() const;
  public:
  void clear_num_bytes();
  uint64_t num_bytes() const;
  void set_num_bytes(uint64_t value);
  private:
  uint64_t _internal_num_bytes() const;
  void _internal_set_num_bytes(uint64_t value);
  public:

  // optional uint64 busy_time_ms = 4;
  bool has_busy_time_ms() const;
  private:
  bool _internal_has_busy_time_ms() const;
  public:
  void clear_busy_time_ms();
  uint64_t busy_time_ms() const;
  void set_busy_time_ms(uint64_t value);
  private:
  uint64_t _internal_busy_time_ms() const;
  void _internal_set_busy_time_ms(uint64_t value);
  public:

  // optional uint64 idle_time_ms = 5;
  bool has_idle_time_ms() const;
  private:
  bool _internal_has_idle_time_ms() const;
  public:
  void clear_idle_time_ms();
  uint64_t idle_time_ms() const;
  void set_idle_time_ms(uint64_t value);
  private:
  uint64_t _internal_idle_time_ms() const;
  void _internal_set_idle_time_ms(uint64_t value);
  public:

  // optional uint64 sum_run_time_ms = 6;
  bool has_sum_run_time_ms() const;
  private:
  bool _internal_has_sum_run_time_ms() const;
  public:
  void clear_sum_run_time_ms();
  uint64_t sum_run_time_ms() const;
  void set_sum_run_time_ms(uint64_t value);
  private:
  uint64_t _internal_sum_run_time_ms() const;
  void _internal_set_sum_run_time_ms(uint64_t value);
  public:

  // optional uint64 sum_wait_time_ms = 7;
  bool has_sum_wait_time_ms() const;
  private:
  bool _internal_has_sum_wait_time_ms() const;
  public:
  void clear_sum_wait_time_ms();
  uint64_t sum_wait_time_ms() const;
  void set_sum_wait_time_ms(uint64_t value);
  private:
  uint64_t _internal_sum_wait_time_ms() const;
  void _internal_set_sum_wait_time_ms(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CClientMetrics_SteamPipeWorkStats_Operation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int type_;
  uint32_t num_ops_;
  uint64_t num_bytes_;
  uint64_t busy_time_ms_;
  uint64_t idle_time_ms_;
  uint64_t sum_run_time_ms_;
  uint64_t sum_wait_time_ms_;
  friend struct ::TableStruct_steammessages_5fclientmetrics_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CClientMetrics_SteamPipeWorkStats_Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CClientMetrics_SteamPipeWorkStats_Notification) */ {
 public:
  inline CClientMetrics_SteamPipeWorkStats_Notification() : CClientMetrics_SteamPipeWorkStats_Notification(nullptr) {}
  ~CClientMetrics_SteamPipeWorkStats_Notification() override;
  explicit constexpr CClientMetrics_SteamPipeWorkStats_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CClientMetrics_SteamPipeWorkStats_Notification(const CClientMetrics_SteamPipeWorkStats_Notification& from);
  CClientMetrics_SteamPipeWorkStats_Notification(CClientMetrics_SteamPipeWorkStats_Notification&& from) noexcept
    : CClientMetrics_SteamPipeWorkStats_Notification() {
    *this = ::std::move(from);
  }

  inline CClientMetrics_SteamPipeWorkStats_Notification& operator=(const CClientMetrics_SteamPipeWorkStats_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CClientMetrics_SteamPipeWorkStats_Notification& operator=(CClientMetrics_SteamPipeWorkStats_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CClientMetrics_SteamPipeWorkStats_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CClientMetrics_SteamPipeWorkStats_Notification* internal_default_instance() {
    return reinterpret_cast<const CClientMetrics_SteamPipeWorkStats_Notification*>(
               &_CClientMetrics_SteamPipeWorkStats_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CClientMetrics_SteamPipeWorkStats_Notification& a, CClientMetrics_SteamPipeWorkStats_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CClientMetrics_SteamPipeWorkStats_Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CClientMetrics_SteamPipeWorkStats_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CClientMetrics_SteamPipeWorkStats_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CClientMetrics_SteamPipeWorkStats_Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CClientMetrics_SteamPipeWorkStats_Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CClientMetrics_SteamPipeWorkStats_Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CClientMetrics_SteamPipeWorkStats_Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CClientMetrics_SteamPipeWorkStats_Notification";
  }
  protected:
  explicit CClientMetrics_SteamPipeWorkStats_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOperationsFieldNumber = 4,
    kAppidFieldNumber = 1,
    kDepotidFieldNumber = 2,
    kWorkTypeFieldNumber = 3,
    kHardwareTypeFieldNumber = 5,
  };
  // repeated .CClientMetrics_SteamPipeWorkStats_Operation operations = 4;
  int operations_size() const;
  private:
  int _internal_operations_size() const;
  public:
  void clear_operations();
  ::CClientMetrics_SteamPipeWorkStats_Operation* mutable_operations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CClientMetrics_SteamPipeWorkStats_Operation >*
      mutable_operations();
  private:
  const ::CClientMetrics_SteamPipeWorkStats_Operation& _internal_operations(int index) const;
  ::CClientMetrics_SteamPipeWorkStats_Operation* _internal_add_operations();
  public:
  const ::CClientMetrics_SteamPipeWorkStats_Operation& operations(int index) const;
  ::CClientMetrics_SteamPipeWorkStats_Operation* add_operations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CClientMetrics_SteamPipeWorkStats_Operation >&
      operations() const;

  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional uint32 depotid = 2;
  bool has_depotid() const;
  private:
  bool _internal_has_depotid() const;
  public:
  void clear_depotid();
  uint32_t depotid() const;
  void set_depotid(uint32_t value);
  private:
  uint32_t _internal_depotid() const;
  void _internal_set_depotid(uint32_t value);
  public:

  // optional .ESteamPipeWorkType work_type = 3 [default = k_ESteamPipeClientWorkType_Invalid];
  bool has_work_type() const;
  private:
  bool _internal_has_work_type() const;
  public:
  void clear_work_type();
  ::ESteamPipeWorkType work_type() const;
  void set_work_type(::ESteamPipeWorkType value);
  private:
  ::ESteamPipeWorkType _internal_work_type() const;
  void _internal_set_work_type(::ESteamPipeWorkType value);
  public:

  // optional uint32 hardware_type = 5;
  bool has_hardware_type() const;
  private:
  bool _internal_has_hardware_type() const;
  public:
  void clear_hardware_type();
  uint32_t hardware_type() const;
  void set_hardware_type(uint32_t value);
  private:
  uint32_t _internal_hardware_type() const;
  void _internal_set_hardware_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CClientMetrics_SteamPipeWorkStats_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CClientMetrics_SteamPipeWorkStats_Operation > operations_;
  uint32_t appid_;
  uint32_t depotid_;
  int work_type_;
  uint32_t hardware_type_;
  friend struct ::TableStruct_steammessages_5fclientmetrics_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CClientMetrics_ReportReactUsage_Notification_RouteData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CClientMetrics_ReportReactUsage_Notification.RouteData) */ {
 public:
  inline CClientMetrics_ReportReactUsage_Notification_RouteData() : CClientMetrics_ReportReactUsage_Notification_RouteData(nullptr) {}
  ~CClientMetrics_ReportReactUsage_Notification_RouteData() override;
  explicit constexpr CClientMetrics_ReportReactUsage_Notification_RouteData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CClientMetrics_ReportReactUsage_Notification_RouteData(const CClientMetrics_ReportReactUsage_Notification_RouteData& from);
  CClientMetrics_ReportReactUsage_Notification_RouteData(CClientMetrics_ReportReactUsage_Notification_RouteData&& from) noexcept
    : CClientMetrics_ReportReactUsage_Notification_RouteData() {
    *this = ::std::move(from);
  }

  inline CClientMetrics_ReportReactUsage_Notification_RouteData& operator=(const CClientMetrics_ReportReactUsage_Notification_RouteData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CClientMetrics_ReportReactUsage_Notification_RouteData& operator=(CClientMetrics_ReportReactUsage_Notification_RouteData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CClientMetrics_ReportReactUsage_Notification_RouteData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CClientMetrics_ReportReactUsage_Notification_RouteData* internal_default_instance() {
    return reinterpret_cast<const CClientMetrics_ReportReactUsage_Notification_RouteData*>(
               &_CClientMetrics_ReportReactUsage_Notification_RouteData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CClientMetrics_ReportReactUsage_Notification_RouteData& a, CClientMetrics_ReportReactUsage_Notification_RouteData& b) {
    a.Swap(&b);
  }
  inline void Swap(CClientMetrics_ReportReactUsage_Notification_RouteData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CClientMetrics_ReportReactUsage_Notification_RouteData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CClientMetrics_ReportReactUsage_Notification_RouteData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CClientMetrics_ReportReactUsage_Notification_RouteData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CClientMetrics_ReportReactUsage_Notification_RouteData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CClientMetrics_ReportReactUsage_Notification_RouteData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CClientMetrics_ReportReactUsage_Notification_RouteData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CClientMetrics_ReportReactUsage_Notification.RouteData";
  }
  protected:
  explicit CClientMetrics_ReportReactUsage_Notification_RouteData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRouteFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // optional string route = 1;
  bool has_route() const;
  private:
  bool _internal_has_route() const;
  public:
  void clear_route();
  const std::string& route() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_route(ArgT0&& arg0, ArgT... args);
  std::string* mutable_route();
  PROTOBUF_NODISCARD std::string* release_route();
  void set_allocated_route(std::string* route);
  private:
  const std::string& _internal_route() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_route(const std::string& value);
  std::string* _internal_mutable_route();
  public:

  // optional uint32 count = 2;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  uint32_t count() const;
  void set_count(uint32_t value);
  private:
  uint32_t _internal_count() const;
  void _internal_set_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CClientMetrics_ReportReactUsage_Notification.RouteData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr route_;
  uint32_t count_;
  friend struct ::TableStruct_steammessages_5fclientmetrics_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CClientMetrics_ReportReactUsage_Notification_ComponentData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CClientMetrics_ReportReactUsage_Notification.ComponentData) */ {
 public:
  inline CClientMetrics_ReportReactUsage_Notification_ComponentData() : CClientMetrics_ReportReactUsage_Notification_ComponentData(nullptr) {}
  ~CClientMetrics_ReportReactUsage_Notification_ComponentData() override;
  explicit constexpr CClientMetrics_ReportReactUsage_Notification_ComponentData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CClientMetrics_ReportReactUsage_Notification_ComponentData(const CClientMetrics_ReportReactUsage_Notification_ComponentData& from);
  CClientMetrics_ReportReactUsage_Notification_ComponentData(CClientMetrics_ReportReactUsage_Notification_ComponentData&& from) noexcept
    : CClientMetrics_ReportReactUsage_Notification_ComponentData() {
    *this = ::std::move(from);
  }

  inline CClientMetrics_ReportReactUsage_Notification_ComponentData& operator=(const CClientMetrics_ReportReactUsage_Notification_ComponentData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CClientMetrics_ReportReactUsage_Notification_ComponentData& operator=(CClientMetrics_ReportReactUsage_Notification_ComponentData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CClientMetrics_ReportReactUsage_Notification_ComponentData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CClientMetrics_ReportReactUsage_Notification_ComponentData* internal_default_instance() {
    return reinterpret_cast<const CClientMetrics_ReportReactUsage_Notification_ComponentData*>(
               &_CClientMetrics_ReportReactUsage_Notification_ComponentData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CClientMetrics_ReportReactUsage_Notification_ComponentData& a, CClientMetrics_ReportReactUsage_Notification_ComponentData& b) {
    a.Swap(&b);
  }
  inline void Swap(CClientMetrics_ReportReactUsage_Notification_ComponentData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CClientMetrics_ReportReactUsage_Notification_ComponentData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CClientMetrics_ReportReactUsage_Notification_ComponentData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CClientMetrics_ReportReactUsage_Notification_ComponentData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CClientMetrics_ReportReactUsage_Notification_ComponentData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CClientMetrics_ReportReactUsage_Notification_ComponentData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CClientMetrics_ReportReactUsage_Notification_ComponentData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CClientMetrics_ReportReactUsage_Notification.ComponentData";
  }
  protected:
  explicit CClientMetrics_ReportReactUsage_Notification_ComponentData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // optional string component = 1;
  bool has_component() const;
  private:
  bool _internal_has_component() const;
  public:
  void clear_component();
  const std::string& component() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_component(ArgT0&& arg0, ArgT... args);
  std::string* mutable_component();
  PROTOBUF_NODISCARD std::string* release_component();
  void set_allocated_component(std::string* component);
  private:
  const std::string& _internal_component() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_component(const std::string& value);
  std::string* _internal_mutable_component();
  public:

  // optional uint32 count = 2;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  uint32_t count() const;
  void set_count(uint32_t value);
  private:
  uint32_t _internal_count() const;
  void _internal_set_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CClientMetrics_ReportReactUsage_Notification.ComponentData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr component_;
  uint32_t count_;
  friend struct ::TableStruct_steammessages_5fclientmetrics_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CClientMetrics_ReportReactUsage_Notification_ActionData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CClientMetrics_ReportReactUsage_Notification.ActionData) */ {
 public:
  inline CClientMetrics_ReportReactUsage_Notification_ActionData() : CClientMetrics_ReportReactUsage_Notification_ActionData(nullptr) {}
  ~CClientMetrics_ReportReactUsage_Notification_ActionData() override;
  explicit constexpr CClientMetrics_ReportReactUsage_Notification_ActionData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CClientMetrics_ReportReactUsage_Notification_ActionData(const CClientMetrics_ReportReactUsage_Notification_ActionData& from);
  CClientMetrics_ReportReactUsage_Notification_ActionData(CClientMetrics_ReportReactUsage_Notification_ActionData&& from) noexcept
    : CClientMetrics_ReportReactUsage_Notification_ActionData() {
    *this = ::std::move(from);
  }

  inline CClientMetrics_ReportReactUsage_Notification_ActionData& operator=(const CClientMetrics_ReportReactUsage_Notification_ActionData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CClientMetrics_ReportReactUsage_Notification_ActionData& operator=(CClientMetrics_ReportReactUsage_Notification_ActionData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CClientMetrics_ReportReactUsage_Notification_ActionData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CClientMetrics_ReportReactUsage_Notification_ActionData* internal_default_instance() {
    return reinterpret_cast<const CClientMetrics_ReportReactUsage_Notification_ActionData*>(
               &_CClientMetrics_ReportReactUsage_Notification_ActionData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CClientMetrics_ReportReactUsage_Notification_ActionData& a, CClientMetrics_ReportReactUsage_Notification_ActionData& b) {
    a.Swap(&b);
  }
  inline void Swap(CClientMetrics_ReportReactUsage_Notification_ActionData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CClientMetrics_ReportReactUsage_Notification_ActionData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CClientMetrics_ReportReactUsage_Notification_ActionData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CClientMetrics_ReportReactUsage_Notification_ActionData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CClientMetrics_ReportReactUsage_Notification_ActionData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CClientMetrics_ReportReactUsage_Notification_ActionData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CClientMetrics_ReportReactUsage_Notification_ActionData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CClientMetrics_ReportReactUsage_Notification.ActionData";
  }
  protected:
  explicit CClientMetrics_ReportReactUsage_Notification_ActionData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // optional string action = 1;
  bool has_action() const;
  private:
  bool _internal_has_action() const;
  public:
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // optional uint32 count = 2;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  uint32_t count() const;
  void set_count(uint32_t value);
  private:
  uint32_t _internal_count() const;
  void _internal_set_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CClientMetrics_ReportReactUsage_Notification.ActionData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  uint32_t count_;
  friend struct ::TableStruct_steammessages_5fclientmetrics_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CClientMetrics_ReportReactUsage_Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CClientMetrics_ReportReactUsage_Notification) */ {
 public:
  inline CClientMetrics_ReportReactUsage_Notification() : CClientMetrics_ReportReactUsage_Notification(nullptr) {}
  ~CClientMetrics_ReportReactUsage_Notification() override;
  explicit constexpr CClientMetrics_ReportReactUsage_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CClientMetrics_ReportReactUsage_Notification(const CClientMetrics_ReportReactUsage_Notification& from);
  CClientMetrics_ReportReactUsage_Notification(CClientMetrics_ReportReactUsage_Notification&& from) noexcept
    : CClientMetrics_ReportReactUsage_Notification() {
    *this = ::std::move(from);
  }

  inline CClientMetrics_ReportReactUsage_Notification& operator=(const CClientMetrics_ReportReactUsage_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CClientMetrics_ReportReactUsage_Notification& operator=(CClientMetrics_ReportReactUsage_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CClientMetrics_ReportReactUsage_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CClientMetrics_ReportReactUsage_Notification* internal_default_instance() {
    return reinterpret_cast<const CClientMetrics_ReportReactUsage_Notification*>(
               &_CClientMetrics_ReportReactUsage_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CClientMetrics_ReportReactUsage_Notification& a, CClientMetrics_ReportReactUsage_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CClientMetrics_ReportReactUsage_Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CClientMetrics_ReportReactUsage_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CClientMetrics_ReportReactUsage_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CClientMetrics_ReportReactUsage_Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CClientMetrics_ReportReactUsage_Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CClientMetrics_ReportReactUsage_Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CClientMetrics_ReportReactUsage_Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CClientMetrics_ReportReactUsage_Notification";
  }
  protected:
  explicit CClientMetrics_ReportReactUsage_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CClientMetrics_ReportReactUsage_Notification_RouteData RouteData;
  typedef CClientMetrics_ReportReactUsage_Notification_ComponentData ComponentData;
  typedef CClientMetrics_ReportReactUsage_Notification_ActionData ActionData;

  // accessors -------------------------------------------------------

  enum : int {
    kRoutesFieldNumber = 3,
    kComponentsFieldNumber = 4,
    kActionsFieldNumber = 5,
    kProductFieldNumber = 1,
    kVersionFieldNumber = 2,
  };
  // repeated .CClientMetrics_ReportReactUsage_Notification.RouteData routes = 3;
  int routes_size() const;
  private:
  int _internal_routes_size() const;
  public:
  void clear_routes();
  ::CClientMetrics_ReportReactUsage_Notification_RouteData* mutable_routes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CClientMetrics_ReportReactUsage_Notification_RouteData >*
      mutable_routes();
  private:
  const ::CClientMetrics_ReportReactUsage_Notification_RouteData& _internal_routes(int index) const;
  ::CClientMetrics_ReportReactUsage_Notification_RouteData* _internal_add_routes();
  public:
  const ::CClientMetrics_ReportReactUsage_Notification_RouteData& routes(int index) const;
  ::CClientMetrics_ReportReactUsage_Notification_RouteData* add_routes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CClientMetrics_ReportReactUsage_Notification_RouteData >&
      routes() const;

  // repeated .CClientMetrics_ReportReactUsage_Notification.ComponentData components = 4;
  int components_size() const;
  private:
  int _internal_components_size() const;
  public:
  void clear_components();
  ::CClientMetrics_ReportReactUsage_Notification_ComponentData* mutable_components(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CClientMetrics_ReportReactUsage_Notification_ComponentData >*
      mutable_components();
  private:
  const ::CClientMetrics_ReportReactUsage_Notification_ComponentData& _internal_components(int index) const;
  ::CClientMetrics_ReportReactUsage_Notification_ComponentData* _internal_add_components();
  public:
  const ::CClientMetrics_ReportReactUsage_Notification_ComponentData& components(int index) const;
  ::CClientMetrics_ReportReactUsage_Notification_ComponentData* add_components();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CClientMetrics_ReportReactUsage_Notification_ComponentData >&
      components() const;

  // repeated .CClientMetrics_ReportReactUsage_Notification.ActionData actions = 5;
  int actions_size() const;
  private:
  int _internal_actions_size() const;
  public:
  void clear_actions();
  ::CClientMetrics_ReportReactUsage_Notification_ActionData* mutable_actions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CClientMetrics_ReportReactUsage_Notification_ActionData >*
      mutable_actions();
  private:
  const ::CClientMetrics_ReportReactUsage_Notification_ActionData& _internal_actions(int index) const;
  ::CClientMetrics_ReportReactUsage_Notification_ActionData* _internal_add_actions();
  public:
  const ::CClientMetrics_ReportReactUsage_Notification_ActionData& actions(int index) const;
  ::CClientMetrics_ReportReactUsage_Notification_ActionData* add_actions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CClientMetrics_ReportReactUsage_Notification_ActionData >&
      actions() const;

  // optional string product = 1;
  bool has_product() const;
  private:
  bool _internal_has_product() const;
  public:
  void clear_product();
  const std::string& product() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_product(ArgT0&& arg0, ArgT... args);
  std::string* mutable_product();
  PROTOBUF_NODISCARD std::string* release_product();
  void set_allocated_product(std::string* product);
  private:
  const std::string& _internal_product() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_product(const std::string& value);
  std::string* _internal_mutable_product();
  public:

  // optional string version = 2;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // @@protoc_insertion_point(class_scope:CClientMetrics_ReportReactUsage_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CClientMetrics_ReportReactUsage_Notification_RouteData > routes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CClientMetrics_ReportReactUsage_Notification_ComponentData > components_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CClientMetrics_ReportReactUsage_Notification_ActionData > actions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr product_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  friend struct ::TableStruct_steammessages_5fclientmetrics_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CClientMetrics_ReportClientError_Notification_Error final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CClientMetrics_ReportClientError_Notification.Error) */ {
 public:
  inline CClientMetrics_ReportClientError_Notification_Error() : CClientMetrics_ReportClientError_Notification_Error(nullptr) {}
  ~CClientMetrics_ReportClientError_Notification_Error() override;
  explicit constexpr CClientMetrics_ReportClientError_Notification_Error(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CClientMetrics_ReportClientError_Notification_Error(const CClientMetrics_ReportClientError_Notification_Error& from);
  CClientMetrics_ReportClientError_Notification_Error(CClientMetrics_ReportClientError_Notification_Error&& from) noexcept
    : CClientMetrics_ReportClientError_Notification_Error() {
    *this = ::std::move(from);
  }

  inline CClientMetrics_ReportClientError_Notification_Error& operator=(const CClientMetrics_ReportClientError_Notification_Error& from) {
    CopyFrom(from);
    return *this;
  }
  inline CClientMetrics_ReportClientError_Notification_Error& operator=(CClientMetrics_ReportClientError_Notification_Error&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CClientMetrics_ReportClientError_Notification_Error& default_instance() {
    return *internal_default_instance();
  }
  static inline const CClientMetrics_ReportClientError_Notification_Error* internal_default_instance() {
    return reinterpret_cast<const CClientMetrics_ReportClientError_Notification_Error*>(
               &_CClientMetrics_ReportClientError_Notification_Error_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CClientMetrics_ReportClientError_Notification_Error& a, CClientMetrics_ReportClientError_Notification_Error& b) {
    a.Swap(&b);
  }
  inline void Swap(CClientMetrics_ReportClientError_Notification_Error* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CClientMetrics_ReportClientError_Notification_Error* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CClientMetrics_ReportClientError_Notification_Error* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CClientMetrics_ReportClientError_Notification_Error>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CClientMetrics_ReportClientError_Notification_Error& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CClientMetrics_ReportClientError_Notification_Error& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CClientMetrics_ReportClientError_Notification_Error* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CClientMetrics_ReportClientError_Notification.Error";
  }
  protected:
  explicit CClientMetrics_ReportClientError_Notification_Error(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifierFieldNumber = 1,
    kMessageFieldNumber = 2,
    kCountFieldNumber = 3,
  };
  // optional string identifier = 1;
  bool has_identifier() const;
  private:
  bool _internal_has_identifier() const;
  public:
  void clear_identifier();
  const std::string& identifier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_identifier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_identifier();
  PROTOBUF_NODISCARD std::string* release_identifier();
  void set_allocated_identifier(std::string* identifier);
  private:
  const std::string& _internal_identifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_identifier(const std::string& value);
  std::string* _internal_mutable_identifier();
  public:

  // optional string message = 2;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // optional uint32 count = 3;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  uint32_t count() const;
  void set_count(uint32_t value);
  private:
  uint32_t _internal_count() const;
  void _internal_set_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CClientMetrics_ReportClientError_Notification.Error)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identifier_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  uint32_t count_;
  friend struct ::TableStruct_steammessages_5fclientmetrics_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CClientMetrics_ReportClientError_Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CClientMetrics_ReportClientError_Notification) */ {
 public:
  inline CClientMetrics_ReportClientError_Notification() : CClientMetrics_ReportClientError_Notification(nullptr) {}
  ~CClientMetrics_ReportClientError_Notification() override;
  explicit constexpr CClientMetrics_ReportClientError_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CClientMetrics_ReportClientError_Notification(const CClientMetrics_ReportClientError_Notification& from);
  CClientMetrics_ReportClientError_Notification(CClientMetrics_ReportClientError_Notification&& from) noexcept
    : CClientMetrics_ReportClientError_Notification() {
    *this = ::std::move(from);
  }

  inline CClientMetrics_ReportClientError_Notification& operator=(const CClientMetrics_ReportClientError_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CClientMetrics_ReportClientError_Notification& operator=(CClientMetrics_ReportClientError_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CClientMetrics_ReportClientError_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CClientMetrics_ReportClientError_Notification* internal_default_instance() {
    return reinterpret_cast<const CClientMetrics_ReportClientError_Notification*>(
               &_CClientMetrics_ReportClientError_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CClientMetrics_ReportClientError_Notification& a, CClientMetrics_ReportClientError_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CClientMetrics_ReportClientError_Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CClientMetrics_ReportClientError_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CClientMetrics_ReportClientError_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CClientMetrics_ReportClientError_Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CClientMetrics_ReportClientError_Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CClientMetrics_ReportClientError_Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CClientMetrics_ReportClientError_Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CClientMetrics_ReportClientError_Notification";
  }
  protected:
  explicit CClientMetrics_ReportClientError_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CClientMetrics_ReportClientError_Notification_Error Error;

  // accessors -------------------------------------------------------

  enum : int {
    kErrorsFieldNumber = 3,
    kProductFieldNumber = 1,
    kVersionFieldNumber = 2,
  };
  // repeated .CClientMetrics_ReportClientError_Notification.Error errors = 3;
  int errors_size() const;
  private:
  int _internal_errors_size() const;
  public:
  void clear_errors();
  ::CClientMetrics_ReportClientError_Notification_Error* mutable_errors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CClientMetrics_ReportClientError_Notification_Error >*
      mutable_errors();
  private:
  const ::CClientMetrics_ReportClientError_Notification_Error& _internal_errors(int index) const;
  ::CClientMetrics_ReportClientError_Notification_Error* _internal_add_errors();
  public:
  const ::CClientMetrics_ReportClientError_Notification_Error& errors(int index) const;
  ::CClientMetrics_ReportClientError_Notification_Error* add_errors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CClientMetrics_ReportClientError_Notification_Error >&
      errors() const;

  // optional string product = 1;
  bool has_product() const;
  private:
  bool _internal_has_product() const;
  public:
  void clear_product();
  const std::string& product() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_product(ArgT0&& arg0, ArgT... args);
  std::string* mutable_product();
  PROTOBUF_NODISCARD std::string* release_product();
  void set_allocated_product(std::string* product);
  private:
  const std::string& _internal_product() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_product(const std::string& value);
  std::string* _internal_mutable_product();
  public:

  // optional string version = 2;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // @@protoc_insertion_point(class_scope:CClientMetrics_ReportClientError_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CClientMetrics_ReportClientError_Notification_Error > errors_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr product_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  friend struct ::TableStruct_steammessages_5fclientmetrics_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CClientMetrics_ClientBootstrap_Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CClientMetrics_ClientBootstrap_Notification) */ {
 public:
  inline CClientMetrics_ClientBootstrap_Notification() : CClientMetrics_ClientBootstrap_Notification(nullptr) {}
  ~CClientMetrics_ClientBootstrap_Notification() override;
  explicit constexpr CClientMetrics_ClientBootstrap_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CClientMetrics_ClientBootstrap_Notification(const CClientMetrics_ClientBootstrap_Notification& from);
  CClientMetrics_ClientBootstrap_Notification(CClientMetrics_ClientBootstrap_Notification&& from) noexcept
    : CClientMetrics_ClientBootstrap_Notification() {
    *this = ::std::move(from);
  }

  inline CClientMetrics_ClientBootstrap_Notification& operator=(const CClientMetrics_ClientBootstrap_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CClientMetrics_ClientBootstrap_Notification& operator=(CClientMetrics_ClientBootstrap_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CClientMetrics_ClientBootstrap_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CClientMetrics_ClientBootstrap_Notification* internal_default_instance() {
    return reinterpret_cast<const CClientMetrics_ClientBootstrap_Notification*>(
               &_CClientMetrics_ClientBootstrap_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CClientMetrics_ClientBootstrap_Notification& a, CClientMetrics_ClientBootstrap_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CClientMetrics_ClientBootstrap_Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CClientMetrics_ClientBootstrap_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CClientMetrics_ClientBootstrap_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CClientMetrics_ClientBootstrap_Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CClientMetrics_ClientBootstrap_Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CClientMetrics_ClientBootstrap_Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CClientMetrics_ClientBootstrap_Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CClientMetrics_ClientBootstrap_Notification";
  }
  protected:
  explicit CClientMetrics_ClientBootstrap_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSummaryFieldNumber = 1,
  };
  // optional .CClientMetrics_ClientBootstrap_Summary summary = 1;
  bool has_summary() const;
  private:
  bool _internal_has_summary() const;
  public:
  void clear_summary();
  const ::CClientMetrics_ClientBootstrap_Summary& summary() const;
  PROTOBUF_NODISCARD ::CClientMetrics_ClientBootstrap_Summary* release_summary();
  ::CClientMetrics_ClientBootstrap_Summary* mutable_summary();
  void set_allocated_summary(::CClientMetrics_ClientBootstrap_Summary* summary);
  private:
  const ::CClientMetrics_ClientBootstrap_Summary& _internal_summary() const;
  ::CClientMetrics_ClientBootstrap_Summary* _internal_mutable_summary();
  public:
  void unsafe_arena_set_allocated_summary(
      ::CClientMetrics_ClientBootstrap_Summary* summary);
  ::CClientMetrics_ClientBootstrap_Summary* unsafe_arena_release_summary();

  // @@protoc_insertion_point(class_scope:CClientMetrics_ClientBootstrap_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CClientMetrics_ClientBootstrap_Summary* summary_;
  friend struct ::TableStruct_steammessages_5fclientmetrics_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CClientMetrics_DownloadRates_Notification_StatsInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CClientMetrics_DownloadRates_Notification.StatsInfo) */ {
 public:
  inline CClientMetrics_DownloadRates_Notification_StatsInfo() : CClientMetrics_DownloadRates_Notification_StatsInfo(nullptr) {}
  ~CClientMetrics_DownloadRates_Notification_StatsInfo() override;
  explicit constexpr CClientMetrics_DownloadRates_Notification_StatsInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CClientMetrics_DownloadRates_Notification_StatsInfo(const CClientMetrics_DownloadRates_Notification_StatsInfo& from);
  CClientMetrics_DownloadRates_Notification_StatsInfo(CClientMetrics_DownloadRates_Notification_StatsInfo&& from) noexcept
    : CClientMetrics_DownloadRates_Notification_StatsInfo() {
    *this = ::std::move(from);
  }

  inline CClientMetrics_DownloadRates_Notification_StatsInfo& operator=(const CClientMetrics_DownloadRates_Notification_StatsInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CClientMetrics_DownloadRates_Notification_StatsInfo& operator=(CClientMetrics_DownloadRates_Notification_StatsInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CClientMetrics_DownloadRates_Notification_StatsInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CClientMetrics_DownloadRates_Notification_StatsInfo* internal_default_instance() {
    return reinterpret_cast<const CClientMetrics_DownloadRates_Notification_StatsInfo*>(
               &_CClientMetrics_DownloadRates_Notification_StatsInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CClientMetrics_DownloadRates_Notification_StatsInfo& a, CClientMetrics_DownloadRates_Notification_StatsInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CClientMetrics_DownloadRates_Notification_StatsInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CClientMetrics_DownloadRates_Notification_StatsInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CClientMetrics_DownloadRates_Notification_StatsInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CClientMetrics_DownloadRates_Notification_StatsInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CClientMetrics_DownloadRates_Notification_StatsInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CClientMetrics_DownloadRates_Notification_StatsInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CClientMetrics_DownloadRates_Notification_StatsInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CClientMetrics_DownloadRates_Notification.StatsInfo";
  }
  protected:
  explicit CClientMetrics_DownloadRates_Notification_StatsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostNameFieldNumber = 4,
    kSourceTypeFieldNumber = 1,
    kSourceIdFieldNumber = 2,
    kBytesFieldNumber = 3,
    kMicrosecondsFieldNumber = 5,
    kUsedIpv6FieldNumber = 6,
    kProxiedFieldNumber = 7,
    kUsedHttp2FieldNumber = 8,
    kCacheHitsFieldNumber = 9,
    kHitBytesFieldNumber = 11,
    kMissBytesFieldNumber = 12,
    kCacheMissesFieldNumber = 10,
  };
  // optional string host_name = 4;
  bool has_host_name() const;
  private:
  bool _internal_has_host_name() const;
  public:
  void clear_host_name();
  const std::string& host_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_host_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_host_name();
  PROTOBUF_NODISCARD std::string* release_host_name();
  void set_allocated_host_name(std::string* host_name);
  private:
  const std::string& _internal_host_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_host_name(const std::string& value);
  std::string* _internal_mutable_host_name();
  public:

  // optional uint32 source_type = 1;
  bool has_source_type() const;
  private:
  bool _internal_has_source_type() const;
  public:
  void clear_source_type();
  uint32_t source_type() const;
  void set_source_type(uint32_t value);
  private:
  uint32_t _internal_source_type() const;
  void _internal_set_source_type(uint32_t value);
  public:

  // optional uint32 source_id = 2;
  bool has_source_id() const;
  private:
  bool _internal_has_source_id() const;
  public:
  void clear_source_id();
  uint32_t source_id() const;
  void set_source_id(uint32_t value);
  private:
  uint32_t _internal_source_id() const;
  void _internal_set_source_id(uint32_t value);
  public:

  // optional uint64 bytes = 3;
  bool has_bytes() const;
  private:
  bool _internal_has_bytes() const;
  public:
  void clear_bytes();
  uint64_t bytes() const;
  void set_bytes(uint64_t value);
  private:
  uint64_t _internal_bytes() const;
  void _internal_set_bytes(uint64_t value);
  public:

  // optional uint64 microseconds = 5;
  bool has_microseconds() const;
  private:
  bool _internal_has_microseconds() const;
  public:
  void clear_microseconds();
  uint64_t microseconds() const;
  void set_microseconds(uint64_t value);
  private:
  uint64_t _internal_microseconds() const;
  void _internal_set_microseconds(uint64_t value);
  public:

  // optional bool used_ipv6 = 6;
  bool has_used_ipv6() const;
  private:
  bool _internal_has_used_ipv6() const;
  public:
  void clear_used_ipv6();
  bool used_ipv6() const;
  void set_used_ipv6(bool value);
  private:
  bool _internal_used_ipv6() const;
  void _internal_set_used_ipv6(bool value);
  public:

  // optional bool proxied = 7;
  bool has_proxied() const;
  private:
  bool _internal_has_proxied() const;
  public:
  void clear_proxied();
  bool proxied() const;
  void set_proxied(bool value);
  private:
  bool _internal_proxied() const;
  void _internal_set_proxied(bool value);
  public:

  // optional bool used_http2 = 8;
  bool has_used_http2() const;
  private:
  bool _internal_has_used_http2() const;
  public:
  void clear_used_http2();
  bool used_http2() const;
  void set_used_http2(bool value);
  private:
  bool _internal_used_http2() const;
  void _internal_set_used_http2(bool value);
  public:

  // optional uint32 cache_hits = 9;
  bool has_cache_hits() const;
  private:
  bool _internal_has_cache_hits() const;
  public:
  void clear_cache_hits();
  uint32_t cache_hits() const;
  void set_cache_hits(uint32_t value);
  private:
  uint32_t _internal_cache_hits() const;
  void _internal_set_cache_hits(uint32_t value);
  public:

  // optional uint64 hit_bytes = 11;
  bool has_hit_bytes() const;
  private:
  bool _internal_has_hit_bytes() const;
  public:
  void clear_hit_bytes();
  uint64_t hit_bytes() const;
  void set_hit_bytes(uint64_t value);
  private:
  uint64_t _internal_hit_bytes() const;
  void _internal_set_hit_bytes(uint64_t value);
  public:

  // optional uint64 miss_bytes = 12;
  bool has_miss_bytes() const;
  private:
  bool _internal_has_miss_bytes() const;
  public:
  void clear_miss_bytes();
  uint64_t miss_bytes() const;
  void set_miss_bytes(uint64_t value);
  private:
  uint64_t _internal_miss_bytes() const;
  void _internal_set_miss_bytes(uint64_t value);
  public:

  // optional uint32 cache_misses = 10;
  bool has_cache_misses() const;
  private:
  bool _internal_has_cache_misses() const;
  public:
  void clear_cache_misses();
  uint32_t cache_misses() const;
  void set_cache_misses(uint32_t value);
  private:
  uint32_t _internal_cache_misses() const;
  void _internal_set_cache_misses(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CClientMetrics_DownloadRates_Notification.StatsInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_name_;
  uint32_t source_type_;
  uint32_t source_id_;
  uint64_t bytes_;
  uint64_t microseconds_;
  bool used_ipv6_;
  bool proxied_;
  bool used_http2_;
  uint32_t cache_hits_;
  uint64_t hit_bytes_;
  uint64_t miss_bytes_;
  uint32_t cache_misses_;
  friend struct ::TableStruct_steammessages_5fclientmetrics_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CClientMetrics_DownloadRates_Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CClientMetrics_DownloadRates_Notification) */ {
 public:
  inline CClientMetrics_DownloadRates_Notification() : CClientMetrics_DownloadRates_Notification(nullptr) {}
  ~CClientMetrics_DownloadRates_Notification() override;
  explicit constexpr CClientMetrics_DownloadRates_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CClientMetrics_DownloadRates_Notification(const CClientMetrics_DownloadRates_Notification& from);
  CClientMetrics_DownloadRates_Notification(CClientMetrics_DownloadRates_Notification&& from) noexcept
    : CClientMetrics_DownloadRates_Notification() {
    *this = ::std::move(from);
  }

  inline CClientMetrics_DownloadRates_Notification& operator=(const CClientMetrics_DownloadRates_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CClientMetrics_DownloadRates_Notification& operator=(CClientMetrics_DownloadRates_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CClientMetrics_DownloadRates_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CClientMetrics_DownloadRates_Notification* internal_default_instance() {
    return reinterpret_cast<const CClientMetrics_DownloadRates_Notification*>(
               &_CClientMetrics_DownloadRates_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CClientMetrics_DownloadRates_Notification& a, CClientMetrics_DownloadRates_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CClientMetrics_DownloadRates_Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CClientMetrics_DownloadRates_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CClientMetrics_DownloadRates_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CClientMetrics_DownloadRates_Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CClientMetrics_DownloadRates_Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CClientMetrics_DownloadRates_Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CClientMetrics_DownloadRates_Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CClientMetrics_DownloadRates_Notification";
  }
  protected:
  explicit CClientMetrics_DownloadRates_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CClientMetrics_DownloadRates_Notification_StatsInfo StatsInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kStatsFieldNumber = 2,
    kCellIdFieldNumber = 1,
    kThrottlingKbpsFieldNumber = 3,
  };
  // repeated .CClientMetrics_DownloadRates_Notification.StatsInfo stats = 2;
  int stats_size() const;
  private:
  int _internal_stats_size() const;
  public:
  void clear_stats();
  ::CClientMetrics_DownloadRates_Notification_StatsInfo* mutable_stats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CClientMetrics_DownloadRates_Notification_StatsInfo >*
      mutable_stats();
  private:
  const ::CClientMetrics_DownloadRates_Notification_StatsInfo& _internal_stats(int index) const;
  ::CClientMetrics_DownloadRates_Notification_StatsInfo* _internal_add_stats();
  public:
  const ::CClientMetrics_DownloadRates_Notification_StatsInfo& stats(int index) const;
  ::CClientMetrics_DownloadRates_Notification_StatsInfo* add_stats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CClientMetrics_DownloadRates_Notification_StatsInfo >&
      stats() const;

  // optional uint32 cell_id = 1;
  bool has_cell_id() const;
  private:
  bool _internal_has_cell_id() const;
  public:
  void clear_cell_id();
  uint32_t cell_id() const;
  void set_cell_id(uint32_t value);
  private:
  uint32_t _internal_cell_id() const;
  void _internal_set_cell_id(uint32_t value);
  public:

  // optional uint32 throttling_kbps = 3;
  bool has_throttling_kbps() const;
  private:
  bool _internal_has_throttling_kbps() const;
  public:
  void clear_throttling_kbps();
  uint32_t throttling_kbps() const;
  void set_throttling_kbps(uint32_t value);
  private:
  uint32_t _internal_throttling_kbps() const;
  void _internal_set_throttling_kbps(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CClientMetrics_DownloadRates_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CClientMetrics_DownloadRates_Notification_StatsInfo > stats_;
  uint32_t cell_id_;
  uint32_t throttling_kbps_;
  friend struct ::TableStruct_steammessages_5fclientmetrics_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CClientMetrics_ContentValidation_Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CClientMetrics_ContentValidation_Notification) */ {
 public:
  inline CClientMetrics_ContentValidation_Notification() : CClientMetrics_ContentValidation_Notification(nullptr) {}
  ~CClientMetrics_ContentValidation_Notification() override;
  explicit constexpr CClientMetrics_ContentValidation_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CClientMetrics_ContentValidation_Notification(const CClientMetrics_ContentValidation_Notification& from);
  CClientMetrics_ContentValidation_Notification(CClientMetrics_ContentValidation_Notification&& from) noexcept
    : CClientMetrics_ContentValidation_Notification() {
    *this = ::std::move(from);
  }

  inline CClientMetrics_ContentValidation_Notification& operator=(const CClientMetrics_ContentValidation_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CClientMetrics_ContentValidation_Notification& operator=(CClientMetrics_ContentValidation_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CClientMetrics_ContentValidation_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CClientMetrics_ContentValidation_Notification* internal_default_instance() {
    return reinterpret_cast<const CClientMetrics_ContentValidation_Notification*>(
               &_CClientMetrics_ContentValidation_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CClientMetrics_ContentValidation_Notification& a, CClientMetrics_ContentValidation_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CClientMetrics_ContentValidation_Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CClientMetrics_ContentValidation_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CClientMetrics_ContentValidation_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CClientMetrics_ContentValidation_Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CClientMetrics_ContentValidation_Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CClientMetrics_ContentValidation_Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CClientMetrics_ContentValidation_Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CClientMetrics_ContentValidation_Notification";
  }
  protected:
  explicit CClientMetrics_ContentValidation_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValidationResultFieldNumber = 1,
    kAppIdFieldNumber = 2,
    kStagedFilesFieldNumber = 3,
    kUserInitiatedFieldNumber = 4,
    kEarlyOutFieldNumber = 5,
    kChunksScannedFieldNumber = 6,
    kBytesScannedFieldNumber = 8,
    kChunkBytesCorruptFieldNumber = 9,
    kTotalFileSizeCorruptFieldNumber = 10,
    kChunksCorruptFieldNumber = 7,
  };
  // optional int32 validation_result = 1;
  bool has_validation_result() const;
  private:
  bool _internal_has_validation_result() const;
  public:
  void clear_validation_result();
  int32_t validation_result() const;
  void set_validation_result(int32_t value);
  private:
  int32_t _internal_validation_result() const;
  void _internal_set_validation_result(int32_t value);
  public:

  // optional uint32 app_id = 2;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // optional bool staged_files = 3;
  bool has_staged_files() const;
  private:
  bool _internal_has_staged_files() const;
  public:
  void clear_staged_files();
  bool staged_files() const;
  void set_staged_files(bool value);
  private:
  bool _internal_staged_files() const;
  void _internal_set_staged_files(bool value);
  public:

  // optional bool user_initiated = 4;
  bool has_user_initiated() const;
  private:
  bool _internal_has_user_initiated() const;
  public:
  void clear_user_initiated();
  bool user_initiated() const;
  void set_user_initiated(bool value);
  private:
  bool _internal_user_initiated() const;
  void _internal_set_user_initiated(bool value);
  public:

  // optional bool early_out = 5;
  bool has_early_out() const;
  private:
  bool _internal_has_early_out() const;
  public:
  void clear_early_out();
  bool early_out() const;
  void set_early_out(bool value);
  private:
  bool _internal_early_out() const;
  void _internal_set_early_out(bool value);
  public:

  // optional uint32 chunks_scanned = 6;
  bool has_chunks_scanned() const;
  private:
  bool _internal_has_chunks_scanned() const;
  public:
  void clear_chunks_scanned();
  uint32_t chunks_scanned() const;
  void set_chunks_scanned(uint32_t value);
  private:
  uint32_t _internal_chunks_scanned() const;
  void _internal_set_chunks_scanned(uint32_t value);
  public:

  // optional uint64 bytes_scanned = 8;
  bool has_bytes_scanned() const;
  private:
  bool _internal_has_bytes_scanned() const;
  public:
  void clear_bytes_scanned();
  uint64_t bytes_scanned() const;
  void set_bytes_scanned(uint64_t value);
  private:
  uint64_t _internal_bytes_scanned() const;
  void _internal_set_bytes_scanned(uint64_t value);
  public:

  // optional uint64 chunk_bytes_corrupt = 9;
  bool has_chunk_bytes_corrupt() const;
  private:
  bool _internal_has_chunk_bytes_corrupt() const;
  public:
  void clear_chunk_bytes_corrupt();
  uint64_t chunk_bytes_corrupt() const;
  void set_chunk_bytes_corrupt(uint64_t value);
  private:
  uint64_t _internal_chunk_bytes_corrupt() const;
  void _internal_set_chunk_bytes_corrupt(uint64_t value);
  public:

  // optional uint64 total_file_size_corrupt = 10;
  bool has_total_file_size_corrupt() const;
  private:
  bool _internal_has_total_file_size_corrupt() const;
  public:
  void clear_total_file_size_corrupt();
  uint64_t total_file_size_corrupt() const;
  void set_total_file_size_corrupt(uint64_t value);
  private:
  uint64_t _internal_total_file_size_corrupt() const;
  void _internal_set_total_file_size_corrupt(uint64_t value);
  public:

  // optional uint32 chunks_corrupt = 7;
  bool has_chunks_corrupt() const;
  private:
  bool _internal_has_chunks_corrupt() const;
  public:
  void clear_chunks_corrupt();
  uint32_t chunks_corrupt() const;
  void set_chunks_corrupt(uint32_t value);
  private:
  uint32_t _internal_chunks_corrupt() const;
  void _internal_set_chunks_corrupt(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CClientMetrics_ContentValidation_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t validation_result_;
  uint32_t app_id_;
  bool staged_files_;
  bool user_initiated_;
  bool early_out_;
  uint32_t chunks_scanned_;
  uint64_t bytes_scanned_;
  uint64_t chunk_bytes_corrupt_;
  uint64_t total_file_size_corrupt_;
  uint32_t chunks_corrupt_;
  friend struct ::TableStruct_steammessages_5fclientmetrics_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CClientMetrics_CloudAppSyncStats_Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CClientMetrics_CloudAppSyncStats_Notification) */ {
 public:
  inline CClientMetrics_CloudAppSyncStats_Notification() : CClientMetrics_CloudAppSyncStats_Notification(nullptr) {}
  ~CClientMetrics_CloudAppSyncStats_Notification() override;
  explicit constexpr CClientMetrics_CloudAppSyncStats_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CClientMetrics_CloudAppSyncStats_Notification(const CClientMetrics_CloudAppSyncStats_Notification& from);
  CClientMetrics_CloudAppSyncStats_Notification(CClientMetrics_CloudAppSyncStats_Notification&& from) noexcept
    : CClientMetrics_CloudAppSyncStats_Notification() {
    *this = ::std::move(from);
  }

  inline CClientMetrics_CloudAppSyncStats_Notification& operator=(const CClientMetrics_CloudAppSyncStats_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CClientMetrics_CloudAppSyncStats_Notification& operator=(CClientMetrics_CloudAppSyncStats_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CClientMetrics_CloudAppSyncStats_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CClientMetrics_CloudAppSyncStats_Notification* internal_default_instance() {
    return reinterpret_cast<const CClientMetrics_CloudAppSyncStats_Notification*>(
               &_CClientMetrics_CloudAppSyncStats_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CClientMetrics_CloudAppSyncStats_Notification& a, CClientMetrics_CloudAppSyncStats_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CClientMetrics_CloudAppSyncStats_Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CClientMetrics_CloudAppSyncStats_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CClientMetrics_CloudAppSyncStats_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CClientMetrics_CloudAppSyncStats_Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CClientMetrics_CloudAppSyncStats_Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CClientMetrics_CloudAppSyncStats_Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CClientMetrics_CloudAppSyncStats_Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CClientMetrics_CloudAppSyncStats_Notification";
  }
  protected:
  explicit CClientMetrics_CloudAppSyncStats_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppIdFieldNumber = 1,
    kPlatformTypeFieldNumber = 2,
    kPreloadFieldNumber = 3,
    kBlockingAppLaunchFieldNumber = 4,
    kFilesUploadedFieldNumber = 5,
    kFilesDownloadedFieldNumber = 6,
    kFilesDeletedFieldNumber = 7,
    kBytesUploadedFieldNumber = 8,
    kBytesDownloadedFieldNumber = 9,
    kMicrosecTotalFieldNumber = 10,
    kMicrosecInitCachesFieldNumber = 11,
    kMicrosecValidateStateFieldNumber = 12,
    kMicrosecAcLaunchFieldNumber = 13,
    kMicrosecAcPrepUserFilesFieldNumber = 14,
    kMicrosecAcExitFieldNumber = 15,
    kMicrosecBuildSyncListFieldNumber = 16,
    kMicrosecDeleteFilesFieldNumber = 17,
    kMicrosecDownloadFilesFieldNumber = 18,
    kMicrosecUploadFilesFieldNumber = 19,
    kHardwareTypeFieldNumber = 20,
    kFilesManagedFieldNumber = 21,
  };
  // optional uint32 app_id = 1;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // optional uint32 platform_type = 2;
  bool has_platform_type() const;
  private:
  bool _internal_has_platform_type() const;
  public:
  void clear_platform_type();
  uint32_t platform_type() const;
  void set_platform_type(uint32_t value);
  private:
  uint32_t _internal_platform_type() const;
  void _internal_set_platform_type(uint32_t value);
  public:

  // optional bool preload = 3;
  bool has_preload() const;
  private:
  bool _internal_has_preload() const;
  public:
  void clear_preload();
  bool preload() const;
  void set_preload(bool value);
  private:
  bool _internal_preload() const;
  void _internal_set_preload(bool value);
  public:

  // optional bool blocking_app_launch = 4;
  bool has_blocking_app_launch() const;
  private:
  bool _internal_has_blocking_app_launch() const;
  public:
  void clear_blocking_app_launch();
  bool blocking_app_launch() const;
  void set_blocking_app_launch(bool value);
  private:
  bool _internal_blocking_app_launch() const;
  void _internal_set_blocking_app_launch(bool value);
  public:

  // optional uint32 files_uploaded = 5;
  bool has_files_uploaded() const;
  private:
  bool _internal_has_files_uploaded() const;
  public:
  void clear_files_uploaded();
  uint32_t files_uploaded() const;
  void set_files_uploaded(uint32_t value);
  private:
  uint32_t _internal_files_uploaded() const;
  void _internal_set_files_uploaded(uint32_t value);
  public:

  // optional uint32 files_downloaded = 6;
  bool has_files_downloaded() const;
  private:
  bool _internal_has_files_downloaded() const;
  public:
  void clear_files_downloaded();
  uint32_t files_downloaded() const;
  void set_files_downloaded(uint32_t value);
  private:
  uint32_t _internal_files_downloaded() const;
  void _internal_set_files_downloaded(uint32_t value);
  public:

  // optional uint32 files_deleted = 7;
  bool has_files_deleted() const;
  private:
  bool _internal_has_files_deleted() const;
  public:
  void clear_files_deleted();
  uint32_t files_deleted() const;
  void set_files_deleted(uint32_t value);
  private:
  uint32_t _internal_files_deleted() const;
  void _internal_set_files_deleted(uint32_t value);
  public:

  // optional uint64 bytes_uploaded = 8;
  bool has_bytes_uploaded() const;
  private:
  bool _internal_has_bytes_uploaded() const;
  public:
  void clear_bytes_uploaded();
  uint64_t bytes_uploaded() const;
  void set_bytes_uploaded(uint64_t value);
  private:
  uint64_t _internal_bytes_uploaded() const;
  void _internal_set_bytes_uploaded(uint64_t value);
  public:

  // optional uint64 bytes_downloaded = 9;
  bool has_bytes_downloaded() const;
  private:
  bool _internal_has_bytes_downloaded() const;
  public:
  void clear_bytes_downloaded();
  uint64_t bytes_downloaded() const;
  void set_bytes_downloaded(uint64_t value);
  private:
  uint64_t _internal_bytes_downloaded() const;
  void _internal_set_bytes_downloaded(uint64_t value);
  public:

  // optional uint64 microsec_total = 10;
  bool has_microsec_total() const;
  private:
  bool _internal_has_microsec_total() const;
  public:
  void clear_microsec_total();
  uint64_t microsec_total() const;
  void set_microsec_total(uint64_t value);
  private:
  uint64_t _internal_microsec_total() const;
  void _internal_set_microsec_total(uint64_t value);
  public:

  // optional uint64 microsec_init_caches = 11;
  bool has_microsec_init_caches() const;
  private:
  bool _internal_has_microsec_init_caches() const;
  public:
  void clear_microsec_init_caches();
  uint64_t microsec_init_caches() const;
  void set_microsec_init_caches(uint64_t value);
  private:
  uint64_t _internal_microsec_init_caches() const;
  void _internal_set_microsec_init_caches(uint64_t value);
  public:

  // optional uint64 microsec_validate_state = 12;
  bool has_microsec_validate_state() const;
  private:
  bool _internal_has_microsec_validate_state() const;
  public:
  void clear_microsec_validate_state();
  uint64_t microsec_validate_state() const;
  void set_microsec_validate_state(uint64_t value);
  private:
  uint64_t _internal_microsec_validate_state() const;
  void _internal_set_microsec_validate_state(uint64_t value);
  public:

  // optional uint64 microsec_ac_launch = 13;
  bool has_microsec_ac_launch() const;
  private:
  bool _internal_has_microsec_ac_launch() const;
  public:
  void clear_microsec_ac_launch();
  uint64_t microsec_ac_launch() const;
  void set_microsec_ac_launch(uint64_t value);
  private:
  uint64_t _internal_microsec_ac_launch() const;
  void _internal_set_microsec_ac_launch(uint64_t value);
  public:

  // optional uint64 microsec_ac_prep_user_files = 14;
  bool has_microsec_ac_prep_user_files() const;
  private:
  bool _internal_has_microsec_ac_prep_user_files() const;
  public:
  void clear_microsec_ac_prep_user_files();
  uint64_t microsec_ac_prep_user_files() const;
  void set_microsec_ac_prep_user_files(uint64_t value);
  private:
  uint64_t _internal_microsec_ac_prep_user_files() const;
  void _internal_set_microsec_ac_prep_user_files(uint64_t value);
  public:

  // optional uint64 microsec_ac_exit = 15;
  bool has_microsec_ac_exit() const;
  private:
  bool _internal_has_microsec_ac_exit() const;
  public:
  void clear_microsec_ac_exit();
  uint64_t microsec_ac_exit() const;
  void set_microsec_ac_exit(uint64_t value);
  private:
  uint64_t _internal_microsec_ac_exit() const;
  void _internal_set_microsec_ac_exit(uint64_t value);
  public:

  // optional uint64 microsec_build_sync_list = 16;
  bool has_microsec_build_sync_list() const;
  private:
  bool _internal_has_microsec_build_sync_list() const;
  public:
  void clear_microsec_build_sync_list();
  uint64_t microsec_build_sync_list() const;
  void set_microsec_build_sync_list(uint64_t value);
  private:
  uint64_t _internal_microsec_build_sync_list() const;
  void _internal_set_microsec_build_sync_list(uint64_t value);
  public:

  // optional uint64 microsec_delete_files = 17;
  bool has_microsec_delete_files() const;
  private:
  bool _internal_has_microsec_delete_files() const;
  public:
  void clear_microsec_delete_files();
  uint64_t microsec_delete_files() const;
  void set_microsec_delete_files(uint64_t value);
  private:
  uint64_t _internal_microsec_delete_files() const;
  void _internal_set_microsec_delete_files(uint64_t value);
  public:

  // optional uint64 microsec_download_files = 18;
  bool has_microsec_download_files() const;
  private:
  bool _internal_has_microsec_download_files() const;
  public:
  void clear_microsec_download_files();
  uint64_t microsec_download_files() const;
  void set_microsec_download_files(uint64_t value);
  private:
  uint64_t _internal_microsec_download_files() const;
  void _internal_set_microsec_download_files(uint64_t value);
  public:

  // optional uint64 microsec_upload_files = 19;
  bool has_microsec_upload_files() const;
  private:
  bool _internal_has_microsec_upload_files() const;
  public:
  void clear_microsec_upload_files();
  uint64_t microsec_upload_files() const;
  void set_microsec_upload_files(uint64_t value);
  private:
  uint64_t _internal_microsec_upload_files() const;
  void _internal_set_microsec_upload_files(uint64_t value);
  public:

  // optional uint32 hardware_type = 20;
  bool has_hardware_type() const;
  private:
  bool _internal_has_hardware_type() const;
  public:
  void clear_hardware_type();
  uint32_t hardware_type() const;
  void set_hardware_type(uint32_t value);
  private:
  uint32_t _internal_hardware_type() const;
  void _internal_set_hardware_type(uint32_t value);
  public:

  // optional uint32 files_managed = 21;
  bool has_files_managed() const;
  private:
  bool _internal_has_files_managed() const;
  public:
  void clear_files_managed();
  uint32_t files_managed() const;
  void set_files_managed(uint32_t value);
  private:
  uint32_t _internal_files_managed() const;
  void _internal_set_files_managed(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CClientMetrics_CloudAppSyncStats_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t app_id_;
  uint32_t platform_type_;
  bool preload_;
  bool blocking_app_launch_;
  uint32_t files_uploaded_;
  uint32_t files_downloaded_;
  uint32_t files_deleted_;
  uint64_t bytes_uploaded_;
  uint64_t bytes_downloaded_;
  uint64_t microsec_total_;
  uint64_t microsec_init_caches_;
  uint64_t microsec_validate_state_;
  uint64_t microsec_ac_launch_;
  uint64_t microsec_ac_prep_user_files_;
  uint64_t microsec_ac_exit_;
  uint64_t microsec_build_sync_list_;
  uint64_t microsec_delete_files_;
  uint64_t microsec_download_files_;
  uint64_t microsec_upload_files_;
  uint32_t hardware_type_;
  uint32_t files_managed_;
  friend struct ::TableStruct_steammessages_5fclientmetrics_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CClientMetrics_ContentDownloadResponse_Counts_Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CClientMetrics_ContentDownloadResponse_Counts_Notification) */ {
 public:
  inline CClientMetrics_ContentDownloadResponse_Counts_Notification() : CClientMetrics_ContentDownloadResponse_Counts_Notification(nullptr) {}
  ~CClientMetrics_ContentDownloadResponse_Counts_Notification() override;
  explicit constexpr CClientMetrics_ContentDownloadResponse_Counts_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CClientMetrics_ContentDownloadResponse_Counts_Notification(const CClientMetrics_ContentDownloadResponse_Counts_Notification& from);
  CClientMetrics_ContentDownloadResponse_Counts_Notification(CClientMetrics_ContentDownloadResponse_Counts_Notification&& from) noexcept
    : CClientMetrics_ContentDownloadResponse_Counts_Notification() {
    *this = ::std::move(from);
  }

  inline CClientMetrics_ContentDownloadResponse_Counts_Notification& operator=(const CClientMetrics_ContentDownloadResponse_Counts_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CClientMetrics_ContentDownloadResponse_Counts_Notification& operator=(CClientMetrics_ContentDownloadResponse_Counts_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CClientMetrics_ContentDownloadResponse_Counts_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CClientMetrics_ContentDownloadResponse_Counts_Notification* internal_default_instance() {
    return reinterpret_cast<const CClientMetrics_ContentDownloadResponse_Counts_Notification*>(
               &_CClientMetrics_ContentDownloadResponse_Counts_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CClientMetrics_ContentDownloadResponse_Counts_Notification& a, CClientMetrics_ContentDownloadResponse_Counts_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CClientMetrics_ContentDownloadResponse_Counts_Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CClientMetrics_ContentDownloadResponse_Counts_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CClientMetrics_ContentDownloadResponse_Counts_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CClientMetrics_ContentDownloadResponse_Counts_Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CClientMetrics_ContentDownloadResponse_Counts_Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CClientMetrics_ContentDownloadResponse_Counts_Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CClientMetrics_ContentDownloadResponse_Counts_Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CClientMetrics_ContentDownloadResponse_Counts_Notification";
  }
  protected:
  explicit CClientMetrics_ContentDownloadResponse_Counts_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kCellIdFieldNumber = 1,
  };
  // optional .CClientMetrics_ContentDownloadResponse_Hosts data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::CClientMetrics_ContentDownloadResponse_Hosts& data() const;
  PROTOBUF_NODISCARD ::CClientMetrics_ContentDownloadResponse_Hosts* release_data();
  ::CClientMetrics_ContentDownloadResponse_Hosts* mutable_data();
  void set_allocated_data(::CClientMetrics_ContentDownloadResponse_Hosts* data);
  private:
  const ::CClientMetrics_ContentDownloadResponse_Hosts& _internal_data() const;
  ::CClientMetrics_ContentDownloadResponse_Hosts* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::CClientMetrics_ContentDownloadResponse_Hosts* data);
  ::CClientMetrics_ContentDownloadResponse_Hosts* unsafe_arena_release_data();

  // optional uint32 cell_id = 1;
  bool has_cell_id() const;
  private:
  bool _internal_has_cell_id() const;
  public:
  void clear_cell_id();
  uint32_t cell_id() const;
  void set_cell_id(uint32_t value);
  private:
  uint32_t _internal_cell_id() const;
  void _internal_set_cell_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CClientMetrics_ContentDownloadResponse_Counts_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CClientMetrics_ContentDownloadResponse_Hosts* data_;
  uint32_t cell_id_;
  friend struct ::TableStruct_steammessages_5fclientmetrics_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CClientMetrics_ReportClientArgs_Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CClientMetrics_ReportClientArgs_Notification) */ {
 public:
  inline CClientMetrics_ReportClientArgs_Notification() : CClientMetrics_ReportClientArgs_Notification(nullptr) {}
  ~CClientMetrics_ReportClientArgs_Notification() override;
  explicit constexpr CClientMetrics_ReportClientArgs_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CClientMetrics_ReportClientArgs_Notification(const CClientMetrics_ReportClientArgs_Notification& from);
  CClientMetrics_ReportClientArgs_Notification(CClientMetrics_ReportClientArgs_Notification&& from) noexcept
    : CClientMetrics_ReportClientArgs_Notification() {
    *this = ::std::move(from);
  }

  inline CClientMetrics_ReportClientArgs_Notification& operator=(const CClientMetrics_ReportClientArgs_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CClientMetrics_ReportClientArgs_Notification& operator=(CClientMetrics_ReportClientArgs_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CClientMetrics_ReportClientArgs_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CClientMetrics_ReportClientArgs_Notification* internal_default_instance() {
    return reinterpret_cast<const CClientMetrics_ReportClientArgs_Notification*>(
               &_CClientMetrics_ReportClientArgs_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CClientMetrics_ReportClientArgs_Notification& a, CClientMetrics_ReportClientArgs_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CClientMetrics_ReportClientArgs_Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CClientMetrics_ReportClientArgs_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CClientMetrics_ReportClientArgs_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CClientMetrics_ReportClientArgs_Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CClientMetrics_ReportClientArgs_Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CClientMetrics_ReportClientArgs_Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CClientMetrics_ReportClientArgs_Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CClientMetrics_ReportClientArgs_Notification";
  }
  protected:
  explicit CClientMetrics_ReportClientArgs_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientArgsFieldNumber = 1,
    kGpuWebviewRegkeyDisabledFieldNumber = 2,
    kSuppressGpuChromeFieldNumber = 3,
    kBrowserNotSupportedFieldNumber = 4,
    kHwAccelVideoRegkeyDisabledFieldNumber = 5,
    kMiniModeEnabledFieldNumber = 6,
    kFpsCounterEnabledFieldNumber = 7,
    kLibraryLowBandwidthModeEnabledFieldNumber = 8,
    kLibraryLowPerfModeEnabledFieldNumber = 9,
  };
  // repeated string client_args = 1;
  int client_args_size() const;
  private:
  int _internal_client_args_size() const;
  public:
  void clear_client_args();
  const std::string& client_args(int index) const;
  std::string* mutable_client_args(int index);
  void set_client_args(int index, const std::string& value);
  void set_client_args(int index, std::string&& value);
  void set_client_args(int index, const char* value);
  void set_client_args(int index, const char* value, size_t size);
  std::string* add_client_args();
  void add_client_args(const std::string& value);
  void add_client_args(std::string&& value);
  void add_client_args(const char* value);
  void add_client_args(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& client_args() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_client_args();
  private:
  const std::string& _internal_client_args(int index) const;
  std::string* _internal_add_client_args();
  public:

  // optional bool gpu_webview_regkey_disabled = 2;
  bool has_gpu_webview_regkey_disabled() const;
  private:
  bool _internal_has_gpu_webview_regkey_disabled() const;
  public:
  void clear_gpu_webview_regkey_disabled();
  bool gpu_webview_regkey_disabled() const;
  void set_gpu_webview_regkey_disabled(bool value);
  private:
  bool _internal_gpu_webview_regkey_disabled() const;
  void _internal_set_gpu_webview_regkey_disabled(bool value);
  public:

  // optional bool suppress_gpu_chrome = 3;
  bool has_suppress_gpu_chrome() const;
  private:
  bool _internal_has_suppress_gpu_chrome() const;
  public:
  void clear_suppress_gpu_chrome();
  bool suppress_gpu_chrome() const;
  void set_suppress_gpu_chrome(bool value);
  private:
  bool _internal_suppress_gpu_chrome() const;
  void _internal_set_suppress_gpu_chrome(bool value);
  public:

  // optional bool browser_not_supported = 4;
  bool has_browser_not_supported() const;
  private:
  bool _internal_has_browser_not_supported() const;
  public:
  void clear_browser_not_supported();
  bool browser_not_supported() const;
  void set_browser_not_supported(bool value);
  private:
  bool _internal_browser_not_supported() const;
  void _internal_set_browser_not_supported(bool value);
  public:

  // optional bool hw_accel_video_regkey_disabled = 5;
  bool has_hw_accel_video_regkey_disabled() const;
  private:
  bool _internal_has_hw_accel_video_regkey_disabled() const;
  public:
  void clear_hw_accel_video_regkey_disabled();
  bool hw_accel_video_regkey_disabled() const;
  void set_hw_accel_video_regkey_disabled(bool value);
  private:
  bool _internal_hw_accel_video_regkey_disabled() const;
  void _internal_set_hw_accel_video_regkey_disabled(bool value);
  public:

  // optional bool mini_mode_enabled = 6;
  bool has_mini_mode_enabled() const;
  private:
  bool _internal_has_mini_mode_enabled() const;
  public:
  void clear_mini_mode_enabled();
  bool mini_mode_enabled() const;
  void set_mini_mode_enabled(bool value);
  private:
  bool _internal_mini_mode_enabled() const;
  void _internal_set_mini_mode_enabled(bool value);
  public:

  // optional bool fps_counter_enabled = 7;
  bool has_fps_counter_enabled() const;
  private:
  bool _internal_has_fps_counter_enabled() const;
  public:
  void clear_fps_counter_enabled();
  bool fps_counter_enabled() const;
  void set_fps_counter_enabled(bool value);
  private:
  bool _internal_fps_counter_enabled() const;
  void _internal_set_fps_counter_enabled(bool value);
  public:

  // optional bool library_low_bandwidth_mode_enabled = 8;
  bool has_library_low_bandwidth_mode_enabled() const;
  private:
  bool _internal_has_library_low_bandwidth_mode_enabled() const;
  public:
  void clear_library_low_bandwidth_mode_enabled();
  bool library_low_bandwidth_mode_enabled() const;
  void set_library_low_bandwidth_mode_enabled(bool value);
  private:
  bool _internal_library_low_bandwidth_mode_enabled() const;
  void _internal_set_library_low_bandwidth_mode_enabled(bool value);
  public:

  // optional bool library_low_perf_mode_enabled = 9;
  bool has_library_low_perf_mode_enabled() const;
  private:
  bool _internal_has_library_low_perf_mode_enabled() const;
  public:
  void clear_library_low_perf_mode_enabled();
  bool library_low_perf_mode_enabled() const;
  void set_library_low_perf_mode_enabled(bool value);
  private:
  bool _internal_library_low_perf_mode_enabled() const;
  void _internal_set_library_low_perf_mode_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CClientMetrics_ReportClientArgs_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> client_args_;
  bool gpu_webview_regkey_disabled_;
  bool suppress_gpu_chrome_;
  bool browser_not_supported_;
  bool hw_accel_video_regkey_disabled_;
  bool mini_mode_enabled_;
  bool fps_counter_enabled_;
  bool library_low_bandwidth_mode_enabled_;
  bool library_low_perf_mode_enabled_;
  friend struct ::TableStruct_steammessages_5fclientmetrics_2esteamclient_2eproto;
};
// ===================================================================

class ClientMetrics_Stub;

class ClientMetrics : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline ClientMetrics() {};
 public:
  virtual ~ClientMetrics();

  typedef ClientMetrics_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void ClientAppInterfaceStatsReport(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CClientMetrics_AppInterfaceStats_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void ClientIPv6ConnectivityReport(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CClientMetrics_IPv6Connectivity_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void SteamPipeWorkStatsReport(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CClientMetrics_SteamPipeWorkStats_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void ReportReactUsage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CClientMetrics_ReportReactUsage_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void ReportClientError(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CClientMetrics_ReportClientError_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void ClientBootstrapReport(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CClientMetrics_ClientBootstrap_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void ClientDownloadRatesReport(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CClientMetrics_DownloadRates_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void ClientContentValidationReport(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CClientMetrics_ContentValidation_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void ClientCloudAppSyncStats(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CClientMetrics_CloudAppSyncStats_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void ClientDownloadResponseCodeCounts(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CClientMetrics_ContentDownloadResponse_Counts_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void ReportClientArgs(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CClientMetrics_ReportClientArgs_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ClientMetrics);
};

class ClientMetrics_Stub : public ClientMetrics {
 public:
  ClientMetrics_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  ClientMetrics_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~ClientMetrics_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements ClientMetrics ------------------------------------------

  void ClientAppInterfaceStatsReport(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CClientMetrics_AppInterfaceStats_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void ClientIPv6ConnectivityReport(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CClientMetrics_IPv6Connectivity_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void SteamPipeWorkStatsReport(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CClientMetrics_SteamPipeWorkStats_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void ReportReactUsage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CClientMetrics_ReportReactUsage_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void ReportClientError(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CClientMetrics_ReportClientError_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void ClientBootstrapReport(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CClientMetrics_ClientBootstrap_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void ClientDownloadRatesReport(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CClientMetrics_DownloadRates_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void ClientContentValidationReport(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CClientMetrics_ContentValidation_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void ClientCloudAppSyncStats(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CClientMetrics_CloudAppSyncStats_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void ClientDownloadResponseCodeCounts(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CClientMetrics_ContentDownloadResponse_Counts_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void ReportClientArgs(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CClientMetrics_ReportClientArgs_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ClientMetrics_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CClientMetrics_AppInterfaceCreation

// optional string raw_version = 1;
inline bool CClientMetrics_AppInterfaceCreation::_internal_has_raw_version() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CClientMetrics_AppInterfaceCreation::has_raw_version() const {
  return _internal_has_raw_version();
}
inline void CClientMetrics_AppInterfaceCreation::clear_raw_version() {
  raw_version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CClientMetrics_AppInterfaceCreation::raw_version() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_AppInterfaceCreation.raw_version)
  return _internal_raw_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CClientMetrics_AppInterfaceCreation::set_raw_version(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 raw_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CClientMetrics_AppInterfaceCreation.raw_version)
}
inline std::string* CClientMetrics_AppInterfaceCreation::mutable_raw_version() {
  std::string* _s = _internal_mutable_raw_version();
  // @@protoc_insertion_point(field_mutable:CClientMetrics_AppInterfaceCreation.raw_version)
  return _s;
}
inline const std::string& CClientMetrics_AppInterfaceCreation::_internal_raw_version() const {
  return raw_version_.Get();
}
inline void CClientMetrics_AppInterfaceCreation::_internal_set_raw_version(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  raw_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CClientMetrics_AppInterfaceCreation::_internal_mutable_raw_version() {
  _has_bits_[0] |= 0x00000001u;
  return raw_version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CClientMetrics_AppInterfaceCreation::release_raw_version() {
  // @@protoc_insertion_point(field_release:CClientMetrics_AppInterfaceCreation.raw_version)
  if (!_internal_has_raw_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = raw_version_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (raw_version_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    raw_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CClientMetrics_AppInterfaceCreation::set_allocated_raw_version(std::string* raw_version) {
  if (raw_version != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  raw_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), raw_version,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (raw_version_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    raw_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CClientMetrics_AppInterfaceCreation.raw_version)
}

// optional string requested_interface_type = 2;
inline bool CClientMetrics_AppInterfaceCreation::_internal_has_requested_interface_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CClientMetrics_AppInterfaceCreation::has_requested_interface_type() const {
  return _internal_has_requested_interface_type();
}
inline void CClientMetrics_AppInterfaceCreation::clear_requested_interface_type() {
  requested_interface_type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CClientMetrics_AppInterfaceCreation::requested_interface_type() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_AppInterfaceCreation.requested_interface_type)
  return _internal_requested_interface_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CClientMetrics_AppInterfaceCreation::set_requested_interface_type(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 requested_interface_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CClientMetrics_AppInterfaceCreation.requested_interface_type)
}
inline std::string* CClientMetrics_AppInterfaceCreation::mutable_requested_interface_type() {
  std::string* _s = _internal_mutable_requested_interface_type();
  // @@protoc_insertion_point(field_mutable:CClientMetrics_AppInterfaceCreation.requested_interface_type)
  return _s;
}
inline const std::string& CClientMetrics_AppInterfaceCreation::_internal_requested_interface_type() const {
  return requested_interface_type_.Get();
}
inline void CClientMetrics_AppInterfaceCreation::_internal_set_requested_interface_type(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  requested_interface_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CClientMetrics_AppInterfaceCreation::_internal_mutable_requested_interface_type() {
  _has_bits_[0] |= 0x00000002u;
  return requested_interface_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CClientMetrics_AppInterfaceCreation::release_requested_interface_type() {
  // @@protoc_insertion_point(field_release:CClientMetrics_AppInterfaceCreation.requested_interface_type)
  if (!_internal_has_requested_interface_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = requested_interface_type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (requested_interface_type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    requested_interface_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CClientMetrics_AppInterfaceCreation::set_allocated_requested_interface_type(std::string* requested_interface_type) {
  if (requested_interface_type != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  requested_interface_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requested_interface_type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (requested_interface_type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    requested_interface_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CClientMetrics_AppInterfaceCreation.requested_interface_type)
}

// -------------------------------------------------------------------

// CClientMetrics_AppInterfaceMethodCounts

// optional string interface_name = 1;
inline bool CClientMetrics_AppInterfaceMethodCounts::_internal_has_interface_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CClientMetrics_AppInterfaceMethodCounts::has_interface_name() const {
  return _internal_has_interface_name();
}
inline void CClientMetrics_AppInterfaceMethodCounts::clear_interface_name() {
  interface_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CClientMetrics_AppInterfaceMethodCounts::interface_name() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_AppInterfaceMethodCounts.interface_name)
  return _internal_interface_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CClientMetrics_AppInterfaceMethodCounts::set_interface_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 interface_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CClientMetrics_AppInterfaceMethodCounts.interface_name)
}
inline std::string* CClientMetrics_AppInterfaceMethodCounts::mutable_interface_name() {
  std::string* _s = _internal_mutable_interface_name();
  // @@protoc_insertion_point(field_mutable:CClientMetrics_AppInterfaceMethodCounts.interface_name)
  return _s;
}
inline const std::string& CClientMetrics_AppInterfaceMethodCounts::_internal_interface_name() const {
  return interface_name_.Get();
}
inline void CClientMetrics_AppInterfaceMethodCounts::_internal_set_interface_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  interface_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CClientMetrics_AppInterfaceMethodCounts::_internal_mutable_interface_name() {
  _has_bits_[0] |= 0x00000001u;
  return interface_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CClientMetrics_AppInterfaceMethodCounts::release_interface_name() {
  // @@protoc_insertion_point(field_release:CClientMetrics_AppInterfaceMethodCounts.interface_name)
  if (!_internal_has_interface_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = interface_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (interface_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    interface_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CClientMetrics_AppInterfaceMethodCounts::set_allocated_interface_name(std::string* interface_name) {
  if (interface_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  interface_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), interface_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (interface_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    interface_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CClientMetrics_AppInterfaceMethodCounts.interface_name)
}

// optional string method_name = 2;
inline bool CClientMetrics_AppInterfaceMethodCounts::_internal_has_method_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CClientMetrics_AppInterfaceMethodCounts::has_method_name() const {
  return _internal_has_method_name();
}
inline void CClientMetrics_AppInterfaceMethodCounts::clear_method_name() {
  method_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CClientMetrics_AppInterfaceMethodCounts::method_name() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_AppInterfaceMethodCounts.method_name)
  return _internal_method_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CClientMetrics_AppInterfaceMethodCounts::set_method_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 method_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CClientMetrics_AppInterfaceMethodCounts.method_name)
}
inline std::string* CClientMetrics_AppInterfaceMethodCounts::mutable_method_name() {
  std::string* _s = _internal_mutable_method_name();
  // @@protoc_insertion_point(field_mutable:CClientMetrics_AppInterfaceMethodCounts.method_name)
  return _s;
}
inline const std::string& CClientMetrics_AppInterfaceMethodCounts::_internal_method_name() const {
  return method_name_.Get();
}
inline void CClientMetrics_AppInterfaceMethodCounts::_internal_set_method_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  method_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CClientMetrics_AppInterfaceMethodCounts::_internal_mutable_method_name() {
  _has_bits_[0] |= 0x00000002u;
  return method_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CClientMetrics_AppInterfaceMethodCounts::release_method_name() {
  // @@protoc_insertion_point(field_release:CClientMetrics_AppInterfaceMethodCounts.method_name)
  if (!_internal_has_method_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = method_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (method_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    method_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CClientMetrics_AppInterfaceMethodCounts::set_allocated_method_name(std::string* method_name) {
  if (method_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  method_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), method_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (method_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    method_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CClientMetrics_AppInterfaceMethodCounts.method_name)
}

// optional uint32 call_count = 3;
inline bool CClientMetrics_AppInterfaceMethodCounts::_internal_has_call_count() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CClientMetrics_AppInterfaceMethodCounts::has_call_count() const {
  return _internal_has_call_count();
}
inline void CClientMetrics_AppInterfaceMethodCounts::clear_call_count() {
  call_count_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CClientMetrics_AppInterfaceMethodCounts::_internal_call_count() const {
  return call_count_;
}
inline uint32_t CClientMetrics_AppInterfaceMethodCounts::call_count() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_AppInterfaceMethodCounts.call_count)
  return _internal_call_count();
}
inline void CClientMetrics_AppInterfaceMethodCounts::_internal_set_call_count(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  call_count_ = value;
}
inline void CClientMetrics_AppInterfaceMethodCounts::set_call_count(uint32_t value) {
  _internal_set_call_count(value);
  // @@protoc_insertion_point(field_set:CClientMetrics_AppInterfaceMethodCounts.call_count)
}

// -------------------------------------------------------------------

// CClientMetrics_AppInterfaceStats_Notification

// optional uint64 game_id = 1;
inline bool CClientMetrics_AppInterfaceStats_Notification::_internal_has_game_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CClientMetrics_AppInterfaceStats_Notification::has_game_id() const {
  return _internal_has_game_id();
}
inline void CClientMetrics_AppInterfaceStats_Notification::clear_game_id() {
  game_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CClientMetrics_AppInterfaceStats_Notification::_internal_game_id() const {
  return game_id_;
}
inline uint64_t CClientMetrics_AppInterfaceStats_Notification::game_id() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_AppInterfaceStats_Notification.game_id)
  return _internal_game_id();
}
inline void CClientMetrics_AppInterfaceStats_Notification::_internal_set_game_id(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  game_id_ = value;
}
inline void CClientMetrics_AppInterfaceStats_Notification::set_game_id(uint64_t value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:CClientMetrics_AppInterfaceStats_Notification.game_id)
}

// repeated .CClientMetrics_AppInterfaceCreation interfaces_created = 2;
inline int CClientMetrics_AppInterfaceStats_Notification::_internal_interfaces_created_size() const {
  return interfaces_created_.size();
}
inline int CClientMetrics_AppInterfaceStats_Notification::interfaces_created_size() const {
  return _internal_interfaces_created_size();
}
inline void CClientMetrics_AppInterfaceStats_Notification::clear_interfaces_created() {
  interfaces_created_.Clear();
}
inline ::CClientMetrics_AppInterfaceCreation* CClientMetrics_AppInterfaceStats_Notification::mutable_interfaces_created(int index) {
  // @@protoc_insertion_point(field_mutable:CClientMetrics_AppInterfaceStats_Notification.interfaces_created)
  return interfaces_created_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CClientMetrics_AppInterfaceCreation >*
CClientMetrics_AppInterfaceStats_Notification::mutable_interfaces_created() {
  // @@protoc_insertion_point(field_mutable_list:CClientMetrics_AppInterfaceStats_Notification.interfaces_created)
  return &interfaces_created_;
}
inline const ::CClientMetrics_AppInterfaceCreation& CClientMetrics_AppInterfaceStats_Notification::_internal_interfaces_created(int index) const {
  return interfaces_created_.Get(index);
}
inline const ::CClientMetrics_AppInterfaceCreation& CClientMetrics_AppInterfaceStats_Notification::interfaces_created(int index) const {
  // @@protoc_insertion_point(field_get:CClientMetrics_AppInterfaceStats_Notification.interfaces_created)
  return _internal_interfaces_created(index);
}
inline ::CClientMetrics_AppInterfaceCreation* CClientMetrics_AppInterfaceStats_Notification::_internal_add_interfaces_created() {
  return interfaces_created_.Add();
}
inline ::CClientMetrics_AppInterfaceCreation* CClientMetrics_AppInterfaceStats_Notification::add_interfaces_created() {
  ::CClientMetrics_AppInterfaceCreation* _add = _internal_add_interfaces_created();
  // @@protoc_insertion_point(field_add:CClientMetrics_AppInterfaceStats_Notification.interfaces_created)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CClientMetrics_AppInterfaceCreation >&
CClientMetrics_AppInterfaceStats_Notification::interfaces_created() const {
  // @@protoc_insertion_point(field_list:CClientMetrics_AppInterfaceStats_Notification.interfaces_created)
  return interfaces_created_;
}

// repeated .CClientMetrics_AppInterfaceMethodCounts methods_called = 3;
inline int CClientMetrics_AppInterfaceStats_Notification::_internal_methods_called_size() const {
  return methods_called_.size();
}
inline int CClientMetrics_AppInterfaceStats_Notification::methods_called_size() const {
  return _internal_methods_called_size();
}
inline void CClientMetrics_AppInterfaceStats_Notification::clear_methods_called() {
  methods_called_.Clear();
}
inline ::CClientMetrics_AppInterfaceMethodCounts* CClientMetrics_AppInterfaceStats_Notification::mutable_methods_called(int index) {
  // @@protoc_insertion_point(field_mutable:CClientMetrics_AppInterfaceStats_Notification.methods_called)
  return methods_called_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CClientMetrics_AppInterfaceMethodCounts >*
CClientMetrics_AppInterfaceStats_Notification::mutable_methods_called() {
  // @@protoc_insertion_point(field_mutable_list:CClientMetrics_AppInterfaceStats_Notification.methods_called)
  return &methods_called_;
}
inline const ::CClientMetrics_AppInterfaceMethodCounts& CClientMetrics_AppInterfaceStats_Notification::_internal_methods_called(int index) const {
  return methods_called_.Get(index);
}
inline const ::CClientMetrics_AppInterfaceMethodCounts& CClientMetrics_AppInterfaceStats_Notification::methods_called(int index) const {
  // @@protoc_insertion_point(field_get:CClientMetrics_AppInterfaceStats_Notification.methods_called)
  return _internal_methods_called(index);
}
inline ::CClientMetrics_AppInterfaceMethodCounts* CClientMetrics_AppInterfaceStats_Notification::_internal_add_methods_called() {
  return methods_called_.Add();
}
inline ::CClientMetrics_AppInterfaceMethodCounts* CClientMetrics_AppInterfaceStats_Notification::add_methods_called() {
  ::CClientMetrics_AppInterfaceMethodCounts* _add = _internal_add_methods_called();
  // @@protoc_insertion_point(field_add:CClientMetrics_AppInterfaceStats_Notification.methods_called)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CClientMetrics_AppInterfaceMethodCounts >&
CClientMetrics_AppInterfaceStats_Notification::methods_called() const {
  // @@protoc_insertion_point(field_list:CClientMetrics_AppInterfaceStats_Notification.methods_called)
  return methods_called_;
}

// optional uint32 session_length_seconds = 4;
inline bool CClientMetrics_AppInterfaceStats_Notification::_internal_has_session_length_seconds() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CClientMetrics_AppInterfaceStats_Notification::has_session_length_seconds() const {
  return _internal_has_session_length_seconds();
}
inline void CClientMetrics_AppInterfaceStats_Notification::clear_session_length_seconds() {
  session_length_seconds_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CClientMetrics_AppInterfaceStats_Notification::_internal_session_length_seconds() const {
  return session_length_seconds_;
}
inline uint32_t CClientMetrics_AppInterfaceStats_Notification::session_length_seconds() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_AppInterfaceStats_Notification.session_length_seconds)
  return _internal_session_length_seconds();
}
inline void CClientMetrics_AppInterfaceStats_Notification::_internal_set_session_length_seconds(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  session_length_seconds_ = value;
}
inline void CClientMetrics_AppInterfaceStats_Notification::set_session_length_seconds(uint32_t value) {
  _internal_set_session_length_seconds(value);
  // @@protoc_insertion_point(field_set:CClientMetrics_AppInterfaceStats_Notification.session_length_seconds)
}

// -------------------------------------------------------------------

// CClientMetrics_IPv6Connectivity_Result

// optional uint32 protocol_tested = 1;
inline bool CClientMetrics_IPv6Connectivity_Result::_internal_has_protocol_tested() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CClientMetrics_IPv6Connectivity_Result::has_protocol_tested() const {
  return _internal_has_protocol_tested();
}
inline void CClientMetrics_IPv6Connectivity_Result::clear_protocol_tested() {
  protocol_tested_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CClientMetrics_IPv6Connectivity_Result::_internal_protocol_tested() const {
  return protocol_tested_;
}
inline uint32_t CClientMetrics_IPv6Connectivity_Result::protocol_tested() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_IPv6Connectivity_Result.protocol_tested)
  return _internal_protocol_tested();
}
inline void CClientMetrics_IPv6Connectivity_Result::_internal_set_protocol_tested(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  protocol_tested_ = value;
}
inline void CClientMetrics_IPv6Connectivity_Result::set_protocol_tested(uint32_t value) {
  _internal_set_protocol_tested(value);
  // @@protoc_insertion_point(field_set:CClientMetrics_IPv6Connectivity_Result.protocol_tested)
}

// optional uint32 connectivity_state = 2;
inline bool CClientMetrics_IPv6Connectivity_Result::_internal_has_connectivity_state() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CClientMetrics_IPv6Connectivity_Result::has_connectivity_state() const {
  return _internal_has_connectivity_state();
}
inline void CClientMetrics_IPv6Connectivity_Result::clear_connectivity_state() {
  connectivity_state_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CClientMetrics_IPv6Connectivity_Result::_internal_connectivity_state() const {
  return connectivity_state_;
}
inline uint32_t CClientMetrics_IPv6Connectivity_Result::connectivity_state() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_IPv6Connectivity_Result.connectivity_state)
  return _internal_connectivity_state();
}
inline void CClientMetrics_IPv6Connectivity_Result::_internal_set_connectivity_state(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  connectivity_state_ = value;
}
inline void CClientMetrics_IPv6Connectivity_Result::set_connectivity_state(uint32_t value) {
  _internal_set_connectivity_state(value);
  // @@protoc_insertion_point(field_set:CClientMetrics_IPv6Connectivity_Result.connectivity_state)
}

// -------------------------------------------------------------------

// CClientMetrics_IPv6Connectivity_Notification

// optional uint32 cell_id = 1;
inline bool CClientMetrics_IPv6Connectivity_Notification::_internal_has_cell_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CClientMetrics_IPv6Connectivity_Notification::has_cell_id() const {
  return _internal_has_cell_id();
}
inline void CClientMetrics_IPv6Connectivity_Notification::clear_cell_id() {
  cell_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CClientMetrics_IPv6Connectivity_Notification::_internal_cell_id() const {
  return cell_id_;
}
inline uint32_t CClientMetrics_IPv6Connectivity_Notification::cell_id() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_IPv6Connectivity_Notification.cell_id)
  return _internal_cell_id();
}
inline void CClientMetrics_IPv6Connectivity_Notification::_internal_set_cell_id(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  cell_id_ = value;
}
inline void CClientMetrics_IPv6Connectivity_Notification::set_cell_id(uint32_t value) {
  _internal_set_cell_id(value);
  // @@protoc_insertion_point(field_set:CClientMetrics_IPv6Connectivity_Notification.cell_id)
}

// repeated .CClientMetrics_IPv6Connectivity_Result results = 2;
inline int CClientMetrics_IPv6Connectivity_Notification::_internal_results_size() const {
  return results_.size();
}
inline int CClientMetrics_IPv6Connectivity_Notification::results_size() const {
  return _internal_results_size();
}
inline void CClientMetrics_IPv6Connectivity_Notification::clear_results() {
  results_.Clear();
}
inline ::CClientMetrics_IPv6Connectivity_Result* CClientMetrics_IPv6Connectivity_Notification::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:CClientMetrics_IPv6Connectivity_Notification.results)
  return results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CClientMetrics_IPv6Connectivity_Result >*
CClientMetrics_IPv6Connectivity_Notification::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:CClientMetrics_IPv6Connectivity_Notification.results)
  return &results_;
}
inline const ::CClientMetrics_IPv6Connectivity_Result& CClientMetrics_IPv6Connectivity_Notification::_internal_results(int index) const {
  return results_.Get(index);
}
inline const ::CClientMetrics_IPv6Connectivity_Result& CClientMetrics_IPv6Connectivity_Notification::results(int index) const {
  // @@protoc_insertion_point(field_get:CClientMetrics_IPv6Connectivity_Notification.results)
  return _internal_results(index);
}
inline ::CClientMetrics_IPv6Connectivity_Result* CClientMetrics_IPv6Connectivity_Notification::_internal_add_results() {
  return results_.Add();
}
inline ::CClientMetrics_IPv6Connectivity_Result* CClientMetrics_IPv6Connectivity_Notification::add_results() {
  ::CClientMetrics_IPv6Connectivity_Result* _add = _internal_add_results();
  // @@protoc_insertion_point(field_add:CClientMetrics_IPv6Connectivity_Notification.results)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CClientMetrics_IPv6Connectivity_Result >&
CClientMetrics_IPv6Connectivity_Notification::results() const {
  // @@protoc_insertion_point(field_list:CClientMetrics_IPv6Connectivity_Notification.results)
  return results_;
}

// optional bool private_ip_is_rfc6598 = 3;
inline bool CClientMetrics_IPv6Connectivity_Notification::_internal_has_private_ip_is_rfc6598() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CClientMetrics_IPv6Connectivity_Notification::has_private_ip_is_rfc6598() const {
  return _internal_has_private_ip_is_rfc6598();
}
inline void CClientMetrics_IPv6Connectivity_Notification::clear_private_ip_is_rfc6598() {
  private_ip_is_rfc6598_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CClientMetrics_IPv6Connectivity_Notification::_internal_private_ip_is_rfc6598() const {
  return private_ip_is_rfc6598_;
}
inline bool CClientMetrics_IPv6Connectivity_Notification::private_ip_is_rfc6598() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_IPv6Connectivity_Notification.private_ip_is_rfc6598)
  return _internal_private_ip_is_rfc6598();
}
inline void CClientMetrics_IPv6Connectivity_Notification::_internal_set_private_ip_is_rfc6598(bool value) {
  _has_bits_[0] |= 0x00000002u;
  private_ip_is_rfc6598_ = value;
}
inline void CClientMetrics_IPv6Connectivity_Notification::set_private_ip_is_rfc6598(bool value) {
  _internal_set_private_ip_is_rfc6598(value);
  // @@protoc_insertion_point(field_set:CClientMetrics_IPv6Connectivity_Notification.private_ip_is_rfc6598)
}

// -------------------------------------------------------------------

// CClientMetrics_SteamPipeWorkStats_Operation

// optional .ESteamPipeOperationType type = 1 [default = k_ESteamPipeOperationType_Invalid];
inline bool CClientMetrics_SteamPipeWorkStats_Operation::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CClientMetrics_SteamPipeWorkStats_Operation::has_type() const {
  return _internal_has_type();
}
inline void CClientMetrics_SteamPipeWorkStats_Operation::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::ESteamPipeOperationType CClientMetrics_SteamPipeWorkStats_Operation::_internal_type() const {
  return static_cast< ::ESteamPipeOperationType >(type_);
}
inline ::ESteamPipeOperationType CClientMetrics_SteamPipeWorkStats_Operation::type() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_SteamPipeWorkStats_Operation.type)
  return _internal_type();
}
inline void CClientMetrics_SteamPipeWorkStats_Operation::_internal_set_type(::ESteamPipeOperationType value) {
  assert(::ESteamPipeOperationType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  type_ = value;
}
inline void CClientMetrics_SteamPipeWorkStats_Operation::set_type(::ESteamPipeOperationType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:CClientMetrics_SteamPipeWorkStats_Operation.type)
}

// optional uint32 num_ops = 2;
inline bool CClientMetrics_SteamPipeWorkStats_Operation::_internal_has_num_ops() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CClientMetrics_SteamPipeWorkStats_Operation::has_num_ops() const {
  return _internal_has_num_ops();
}
inline void CClientMetrics_SteamPipeWorkStats_Operation::clear_num_ops() {
  num_ops_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CClientMetrics_SteamPipeWorkStats_Operation::_internal_num_ops() const {
  return num_ops_;
}
inline uint32_t CClientMetrics_SteamPipeWorkStats_Operation::num_ops() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_SteamPipeWorkStats_Operation.num_ops)
  return _internal_num_ops();
}
inline void CClientMetrics_SteamPipeWorkStats_Operation::_internal_set_num_ops(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  num_ops_ = value;
}
inline void CClientMetrics_SteamPipeWorkStats_Operation::set_num_ops(uint32_t value) {
  _internal_set_num_ops(value);
  // @@protoc_insertion_point(field_set:CClientMetrics_SteamPipeWorkStats_Operation.num_ops)
}

// optional uint64 num_bytes = 3;
inline bool CClientMetrics_SteamPipeWorkStats_Operation::_internal_has_num_bytes() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CClientMetrics_SteamPipeWorkStats_Operation::has_num_bytes() const {
  return _internal_has_num_bytes();
}
inline void CClientMetrics_SteamPipeWorkStats_Operation::clear_num_bytes() {
  num_bytes_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CClientMetrics_SteamPipeWorkStats_Operation::_internal_num_bytes() const {
  return num_bytes_;
}
inline uint64_t CClientMetrics_SteamPipeWorkStats_Operation::num_bytes() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_SteamPipeWorkStats_Operation.num_bytes)
  return _internal_num_bytes();
}
inline void CClientMetrics_SteamPipeWorkStats_Operation::_internal_set_num_bytes(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  num_bytes_ = value;
}
inline void CClientMetrics_SteamPipeWorkStats_Operation::set_num_bytes(uint64_t value) {
  _internal_set_num_bytes(value);
  // @@protoc_insertion_point(field_set:CClientMetrics_SteamPipeWorkStats_Operation.num_bytes)
}

// optional uint64 busy_time_ms = 4;
inline bool CClientMetrics_SteamPipeWorkStats_Operation::_internal_has_busy_time_ms() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CClientMetrics_SteamPipeWorkStats_Operation::has_busy_time_ms() const {
  return _internal_has_busy_time_ms();
}
inline void CClientMetrics_SteamPipeWorkStats_Operation::clear_busy_time_ms() {
  busy_time_ms_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline uint64_t CClientMetrics_SteamPipeWorkStats_Operation::_internal_busy_time_ms() const {
  return busy_time_ms_;
}
inline uint64_t CClientMetrics_SteamPipeWorkStats_Operation::busy_time_ms() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_SteamPipeWorkStats_Operation.busy_time_ms)
  return _internal_busy_time_ms();
}
inline void CClientMetrics_SteamPipeWorkStats_Operation::_internal_set_busy_time_ms(uint64_t value) {
  _has_bits_[0] |= 0x00000008u;
  busy_time_ms_ = value;
}
inline void CClientMetrics_SteamPipeWorkStats_Operation::set_busy_time_ms(uint64_t value) {
  _internal_set_busy_time_ms(value);
  // @@protoc_insertion_point(field_set:CClientMetrics_SteamPipeWorkStats_Operation.busy_time_ms)
}

// optional uint64 idle_time_ms = 5;
inline bool CClientMetrics_SteamPipeWorkStats_Operation::_internal_has_idle_time_ms() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CClientMetrics_SteamPipeWorkStats_Operation::has_idle_time_ms() const {
  return _internal_has_idle_time_ms();
}
inline void CClientMetrics_SteamPipeWorkStats_Operation::clear_idle_time_ms() {
  idle_time_ms_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000010u;
}
inline uint64_t CClientMetrics_SteamPipeWorkStats_Operation::_internal_idle_time_ms() const {
  return idle_time_ms_;
}
inline uint64_t CClientMetrics_SteamPipeWorkStats_Operation::idle_time_ms() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_SteamPipeWorkStats_Operation.idle_time_ms)
  return _internal_idle_time_ms();
}
inline void CClientMetrics_SteamPipeWorkStats_Operation::_internal_set_idle_time_ms(uint64_t value) {
  _has_bits_[0] |= 0x00000010u;
  idle_time_ms_ = value;
}
inline void CClientMetrics_SteamPipeWorkStats_Operation::set_idle_time_ms(uint64_t value) {
  _internal_set_idle_time_ms(value);
  // @@protoc_insertion_point(field_set:CClientMetrics_SteamPipeWorkStats_Operation.idle_time_ms)
}

// optional uint64 sum_run_time_ms = 6;
inline bool CClientMetrics_SteamPipeWorkStats_Operation::_internal_has_sum_run_time_ms() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CClientMetrics_SteamPipeWorkStats_Operation::has_sum_run_time_ms() const {
  return _internal_has_sum_run_time_ms();
}
inline void CClientMetrics_SteamPipeWorkStats_Operation::clear_sum_run_time_ms() {
  sum_run_time_ms_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000020u;
}
inline uint64_t CClientMetrics_SteamPipeWorkStats_Operation::_internal_sum_run_time_ms() const {
  return sum_run_time_ms_;
}
inline uint64_t CClientMetrics_SteamPipeWorkStats_Operation::sum_run_time_ms() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_SteamPipeWorkStats_Operation.sum_run_time_ms)
  return _internal_sum_run_time_ms();
}
inline void CClientMetrics_SteamPipeWorkStats_Operation::_internal_set_sum_run_time_ms(uint64_t value) {
  _has_bits_[0] |= 0x00000020u;
  sum_run_time_ms_ = value;
}
inline void CClientMetrics_SteamPipeWorkStats_Operation::set_sum_run_time_ms(uint64_t value) {
  _internal_set_sum_run_time_ms(value);
  // @@protoc_insertion_point(field_set:CClientMetrics_SteamPipeWorkStats_Operation.sum_run_time_ms)
}

// optional uint64 sum_wait_time_ms = 7;
inline bool CClientMetrics_SteamPipeWorkStats_Operation::_internal_has_sum_wait_time_ms() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CClientMetrics_SteamPipeWorkStats_Operation::has_sum_wait_time_ms() const {
  return _internal_has_sum_wait_time_ms();
}
inline void CClientMetrics_SteamPipeWorkStats_Operation::clear_sum_wait_time_ms() {
  sum_wait_time_ms_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000040u;
}
inline uint64_t CClientMetrics_SteamPipeWorkStats_Operation::_internal_sum_wait_time_ms() const {
  return sum_wait_time_ms_;
}
inline uint64_t CClientMetrics_SteamPipeWorkStats_Operation::sum_wait_time_ms() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_SteamPipeWorkStats_Operation.sum_wait_time_ms)
  return _internal_sum_wait_time_ms();
}
inline void CClientMetrics_SteamPipeWorkStats_Operation::_internal_set_sum_wait_time_ms(uint64_t value) {
  _has_bits_[0] |= 0x00000040u;
  sum_wait_time_ms_ = value;
}
inline void CClientMetrics_SteamPipeWorkStats_Operation::set_sum_wait_time_ms(uint64_t value) {
  _internal_set_sum_wait_time_ms(value);
  // @@protoc_insertion_point(field_set:CClientMetrics_SteamPipeWorkStats_Operation.sum_wait_time_ms)
}

// -------------------------------------------------------------------

// CClientMetrics_SteamPipeWorkStats_Notification

// optional uint32 appid = 1;
inline bool CClientMetrics_SteamPipeWorkStats_Notification::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CClientMetrics_SteamPipeWorkStats_Notification::has_appid() const {
  return _internal_has_appid();
}
inline void CClientMetrics_SteamPipeWorkStats_Notification::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CClientMetrics_SteamPipeWorkStats_Notification::_internal_appid() const {
  return appid_;
}
inline uint32_t CClientMetrics_SteamPipeWorkStats_Notification::appid() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_SteamPipeWorkStats_Notification.appid)
  return _internal_appid();
}
inline void CClientMetrics_SteamPipeWorkStats_Notification::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  appid_ = value;
}
inline void CClientMetrics_SteamPipeWorkStats_Notification::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CClientMetrics_SteamPipeWorkStats_Notification.appid)
}

// optional uint32 depotid = 2;
inline bool CClientMetrics_SteamPipeWorkStats_Notification::_internal_has_depotid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CClientMetrics_SteamPipeWorkStats_Notification::has_depotid() const {
  return _internal_has_depotid();
}
inline void CClientMetrics_SteamPipeWorkStats_Notification::clear_depotid() {
  depotid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CClientMetrics_SteamPipeWorkStats_Notification::_internal_depotid() const {
  return depotid_;
}
inline uint32_t CClientMetrics_SteamPipeWorkStats_Notification::depotid() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_SteamPipeWorkStats_Notification.depotid)
  return _internal_depotid();
}
inline void CClientMetrics_SteamPipeWorkStats_Notification::_internal_set_depotid(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  depotid_ = value;
}
inline void CClientMetrics_SteamPipeWorkStats_Notification::set_depotid(uint32_t value) {
  _internal_set_depotid(value);
  // @@protoc_insertion_point(field_set:CClientMetrics_SteamPipeWorkStats_Notification.depotid)
}

// optional .ESteamPipeWorkType work_type = 3 [default = k_ESteamPipeClientWorkType_Invalid];
inline bool CClientMetrics_SteamPipeWorkStats_Notification::_internal_has_work_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CClientMetrics_SteamPipeWorkStats_Notification::has_work_type() const {
  return _internal_has_work_type();
}
inline void CClientMetrics_SteamPipeWorkStats_Notification::clear_work_type() {
  work_type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::ESteamPipeWorkType CClientMetrics_SteamPipeWorkStats_Notification::_internal_work_type() const {
  return static_cast< ::ESteamPipeWorkType >(work_type_);
}
inline ::ESteamPipeWorkType CClientMetrics_SteamPipeWorkStats_Notification::work_type() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_SteamPipeWorkStats_Notification.work_type)
  return _internal_work_type();
}
inline void CClientMetrics_SteamPipeWorkStats_Notification::_internal_set_work_type(::ESteamPipeWorkType value) {
  assert(::ESteamPipeWorkType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  work_type_ = value;
}
inline void CClientMetrics_SteamPipeWorkStats_Notification::set_work_type(::ESteamPipeWorkType value) {
  _internal_set_work_type(value);
  // @@protoc_insertion_point(field_set:CClientMetrics_SteamPipeWorkStats_Notification.work_type)
}

// repeated .CClientMetrics_SteamPipeWorkStats_Operation operations = 4;
inline int CClientMetrics_SteamPipeWorkStats_Notification::_internal_operations_size() const {
  return operations_.size();
}
inline int CClientMetrics_SteamPipeWorkStats_Notification::operations_size() const {
  return _internal_operations_size();
}
inline void CClientMetrics_SteamPipeWorkStats_Notification::clear_operations() {
  operations_.Clear();
}
inline ::CClientMetrics_SteamPipeWorkStats_Operation* CClientMetrics_SteamPipeWorkStats_Notification::mutable_operations(int index) {
  // @@protoc_insertion_point(field_mutable:CClientMetrics_SteamPipeWorkStats_Notification.operations)
  return operations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CClientMetrics_SteamPipeWorkStats_Operation >*
CClientMetrics_SteamPipeWorkStats_Notification::mutable_operations() {
  // @@protoc_insertion_point(field_mutable_list:CClientMetrics_SteamPipeWorkStats_Notification.operations)
  return &operations_;
}
inline const ::CClientMetrics_SteamPipeWorkStats_Operation& CClientMetrics_SteamPipeWorkStats_Notification::_internal_operations(int index) const {
  return operations_.Get(index);
}
inline const ::CClientMetrics_SteamPipeWorkStats_Operation& CClientMetrics_SteamPipeWorkStats_Notification::operations(int index) const {
  // @@protoc_insertion_point(field_get:CClientMetrics_SteamPipeWorkStats_Notification.operations)
  return _internal_operations(index);
}
inline ::CClientMetrics_SteamPipeWorkStats_Operation* CClientMetrics_SteamPipeWorkStats_Notification::_internal_add_operations() {
  return operations_.Add();
}
inline ::CClientMetrics_SteamPipeWorkStats_Operation* CClientMetrics_SteamPipeWorkStats_Notification::add_operations() {
  ::CClientMetrics_SteamPipeWorkStats_Operation* _add = _internal_add_operations();
  // @@protoc_insertion_point(field_add:CClientMetrics_SteamPipeWorkStats_Notification.operations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CClientMetrics_SteamPipeWorkStats_Operation >&
CClientMetrics_SteamPipeWorkStats_Notification::operations() const {
  // @@protoc_insertion_point(field_list:CClientMetrics_SteamPipeWorkStats_Notification.operations)
  return operations_;
}

// optional uint32 hardware_type = 5;
inline bool CClientMetrics_SteamPipeWorkStats_Notification::_internal_has_hardware_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CClientMetrics_SteamPipeWorkStats_Notification::has_hardware_type() const {
  return _internal_has_hardware_type();
}
inline void CClientMetrics_SteamPipeWorkStats_Notification::clear_hardware_type() {
  hardware_type_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CClientMetrics_SteamPipeWorkStats_Notification::_internal_hardware_type() const {
  return hardware_type_;
}
inline uint32_t CClientMetrics_SteamPipeWorkStats_Notification::hardware_type() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_SteamPipeWorkStats_Notification.hardware_type)
  return _internal_hardware_type();
}
inline void CClientMetrics_SteamPipeWorkStats_Notification::_internal_set_hardware_type(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  hardware_type_ = value;
}
inline void CClientMetrics_SteamPipeWorkStats_Notification::set_hardware_type(uint32_t value) {
  _internal_set_hardware_type(value);
  // @@protoc_insertion_point(field_set:CClientMetrics_SteamPipeWorkStats_Notification.hardware_type)
}

// -------------------------------------------------------------------

// CClientMetrics_ReportReactUsage_Notification_RouteData

// optional string route = 1;
inline bool CClientMetrics_ReportReactUsage_Notification_RouteData::_internal_has_route() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CClientMetrics_ReportReactUsage_Notification_RouteData::has_route() const {
  return _internal_has_route();
}
inline void CClientMetrics_ReportReactUsage_Notification_RouteData::clear_route() {
  route_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CClientMetrics_ReportReactUsage_Notification_RouteData::route() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_ReportReactUsage_Notification.RouteData.route)
  return _internal_route();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CClientMetrics_ReportReactUsage_Notification_RouteData::set_route(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 route_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CClientMetrics_ReportReactUsage_Notification.RouteData.route)
}
inline std::string* CClientMetrics_ReportReactUsage_Notification_RouteData::mutable_route() {
  std::string* _s = _internal_mutable_route();
  // @@protoc_insertion_point(field_mutable:CClientMetrics_ReportReactUsage_Notification.RouteData.route)
  return _s;
}
inline const std::string& CClientMetrics_ReportReactUsage_Notification_RouteData::_internal_route() const {
  return route_.Get();
}
inline void CClientMetrics_ReportReactUsage_Notification_RouteData::_internal_set_route(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  route_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CClientMetrics_ReportReactUsage_Notification_RouteData::_internal_mutable_route() {
  _has_bits_[0] |= 0x00000001u;
  return route_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CClientMetrics_ReportReactUsage_Notification_RouteData::release_route() {
  // @@protoc_insertion_point(field_release:CClientMetrics_ReportReactUsage_Notification.RouteData.route)
  if (!_internal_has_route()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = route_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (route_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    route_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CClientMetrics_ReportReactUsage_Notification_RouteData::set_allocated_route(std::string* route) {
  if (route != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  route_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), route,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (route_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    route_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CClientMetrics_ReportReactUsage_Notification.RouteData.route)
}

// optional uint32 count = 2;
inline bool CClientMetrics_ReportReactUsage_Notification_RouteData::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CClientMetrics_ReportReactUsage_Notification_RouteData::has_count() const {
  return _internal_has_count();
}
inline void CClientMetrics_ReportReactUsage_Notification_RouteData::clear_count() {
  count_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CClientMetrics_ReportReactUsage_Notification_RouteData::_internal_count() const {
  return count_;
}
inline uint32_t CClientMetrics_ReportReactUsage_Notification_RouteData::count() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_ReportReactUsage_Notification.RouteData.count)
  return _internal_count();
}
inline void CClientMetrics_ReportReactUsage_Notification_RouteData::_internal_set_count(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  count_ = value;
}
inline void CClientMetrics_ReportReactUsage_Notification_RouteData::set_count(uint32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:CClientMetrics_ReportReactUsage_Notification.RouteData.count)
}

// -------------------------------------------------------------------

// CClientMetrics_ReportReactUsage_Notification_ComponentData

// optional string component = 1;
inline bool CClientMetrics_ReportReactUsage_Notification_ComponentData::_internal_has_component() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CClientMetrics_ReportReactUsage_Notification_ComponentData::has_component() const {
  return _internal_has_component();
}
inline void CClientMetrics_ReportReactUsage_Notification_ComponentData::clear_component() {
  component_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CClientMetrics_ReportReactUsage_Notification_ComponentData::component() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_ReportReactUsage_Notification.ComponentData.component)
  return _internal_component();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CClientMetrics_ReportReactUsage_Notification_ComponentData::set_component(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 component_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CClientMetrics_ReportReactUsage_Notification.ComponentData.component)
}
inline std::string* CClientMetrics_ReportReactUsage_Notification_ComponentData::mutable_component() {
  std::string* _s = _internal_mutable_component();
  // @@protoc_insertion_point(field_mutable:CClientMetrics_ReportReactUsage_Notification.ComponentData.component)
  return _s;
}
inline const std::string& CClientMetrics_ReportReactUsage_Notification_ComponentData::_internal_component() const {
  return component_.Get();
}
inline void CClientMetrics_ReportReactUsage_Notification_ComponentData::_internal_set_component(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  component_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CClientMetrics_ReportReactUsage_Notification_ComponentData::_internal_mutable_component() {
  _has_bits_[0] |= 0x00000001u;
  return component_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CClientMetrics_ReportReactUsage_Notification_ComponentData::release_component() {
  // @@protoc_insertion_point(field_release:CClientMetrics_ReportReactUsage_Notification.ComponentData.component)
  if (!_internal_has_component()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = component_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (component_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    component_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CClientMetrics_ReportReactUsage_Notification_ComponentData::set_allocated_component(std::string* component) {
  if (component != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  component_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), component,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (component_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    component_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CClientMetrics_ReportReactUsage_Notification.ComponentData.component)
}

// optional uint32 count = 2;
inline bool CClientMetrics_ReportReactUsage_Notification_ComponentData::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CClientMetrics_ReportReactUsage_Notification_ComponentData::has_count() const {
  return _internal_has_count();
}
inline void CClientMetrics_ReportReactUsage_Notification_ComponentData::clear_count() {
  count_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CClientMetrics_ReportReactUsage_Notification_ComponentData::_internal_count() const {
  return count_;
}
inline uint32_t CClientMetrics_ReportReactUsage_Notification_ComponentData::count() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_ReportReactUsage_Notification.ComponentData.count)
  return _internal_count();
}
inline void CClientMetrics_ReportReactUsage_Notification_ComponentData::_internal_set_count(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  count_ = value;
}
inline void CClientMetrics_ReportReactUsage_Notification_ComponentData::set_count(uint32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:CClientMetrics_ReportReactUsage_Notification.ComponentData.count)
}

// -------------------------------------------------------------------

// CClientMetrics_ReportReactUsage_Notification_ActionData

// optional string action = 1;
inline bool CClientMetrics_ReportReactUsage_Notification_ActionData::_internal_has_action() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CClientMetrics_ReportReactUsage_Notification_ActionData::has_action() const {
  return _internal_has_action();
}
inline void CClientMetrics_ReportReactUsage_Notification_ActionData::clear_action() {
  action_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CClientMetrics_ReportReactUsage_Notification_ActionData::action() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_ReportReactUsage_Notification.ActionData.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CClientMetrics_ReportReactUsage_Notification_ActionData::set_action(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CClientMetrics_ReportReactUsage_Notification.ActionData.action)
}
inline std::string* CClientMetrics_ReportReactUsage_Notification_ActionData::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:CClientMetrics_ReportReactUsage_Notification.ActionData.action)
  return _s;
}
inline const std::string& CClientMetrics_ReportReactUsage_Notification_ActionData::_internal_action() const {
  return action_.Get();
}
inline void CClientMetrics_ReportReactUsage_Notification_ActionData::_internal_set_action(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CClientMetrics_ReportReactUsage_Notification_ActionData::_internal_mutable_action() {
  _has_bits_[0] |= 0x00000001u;
  return action_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CClientMetrics_ReportReactUsage_Notification_ActionData::release_action() {
  // @@protoc_insertion_point(field_release:CClientMetrics_ReportReactUsage_Notification.ActionData.action)
  if (!_internal_has_action()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = action_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (action_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CClientMetrics_ReportReactUsage_Notification_ActionData::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  action_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (action_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CClientMetrics_ReportReactUsage_Notification.ActionData.action)
}

// optional uint32 count = 2;
inline bool CClientMetrics_ReportReactUsage_Notification_ActionData::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CClientMetrics_ReportReactUsage_Notification_ActionData::has_count() const {
  return _internal_has_count();
}
inline void CClientMetrics_ReportReactUsage_Notification_ActionData::clear_count() {
  count_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CClientMetrics_ReportReactUsage_Notification_ActionData::_internal_count() const {
  return count_;
}
inline uint32_t CClientMetrics_ReportReactUsage_Notification_ActionData::count() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_ReportReactUsage_Notification.ActionData.count)
  return _internal_count();
}
inline void CClientMetrics_ReportReactUsage_Notification_ActionData::_internal_set_count(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  count_ = value;
}
inline void CClientMetrics_ReportReactUsage_Notification_ActionData::set_count(uint32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:CClientMetrics_ReportReactUsage_Notification.ActionData.count)
}

// -------------------------------------------------------------------

// CClientMetrics_ReportReactUsage_Notification

// optional string product = 1;
inline bool CClientMetrics_ReportReactUsage_Notification::_internal_has_product() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CClientMetrics_ReportReactUsage_Notification::has_product() const {
  return _internal_has_product();
}
inline void CClientMetrics_ReportReactUsage_Notification::clear_product() {
  product_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CClientMetrics_ReportReactUsage_Notification::product() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_ReportReactUsage_Notification.product)
  return _internal_product();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CClientMetrics_ReportReactUsage_Notification::set_product(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 product_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CClientMetrics_ReportReactUsage_Notification.product)
}
inline std::string* CClientMetrics_ReportReactUsage_Notification::mutable_product() {
  std::string* _s = _internal_mutable_product();
  // @@protoc_insertion_point(field_mutable:CClientMetrics_ReportReactUsage_Notification.product)
  return _s;
}
inline const std::string& CClientMetrics_ReportReactUsage_Notification::_internal_product() const {
  return product_.Get();
}
inline void CClientMetrics_ReportReactUsage_Notification::_internal_set_product(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  product_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CClientMetrics_ReportReactUsage_Notification::_internal_mutable_product() {
  _has_bits_[0] |= 0x00000001u;
  return product_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CClientMetrics_ReportReactUsage_Notification::release_product() {
  // @@protoc_insertion_point(field_release:CClientMetrics_ReportReactUsage_Notification.product)
  if (!_internal_has_product()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = product_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (product_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    product_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CClientMetrics_ReportReactUsage_Notification::set_allocated_product(std::string* product) {
  if (product != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  product_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), product,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (product_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    product_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CClientMetrics_ReportReactUsage_Notification.product)
}

// optional string version = 2;
inline bool CClientMetrics_ReportReactUsage_Notification::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CClientMetrics_ReportReactUsage_Notification::has_version() const {
  return _internal_has_version();
}
inline void CClientMetrics_ReportReactUsage_Notification::clear_version() {
  version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CClientMetrics_ReportReactUsage_Notification::version() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_ReportReactUsage_Notification.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CClientMetrics_ReportReactUsage_Notification::set_version(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CClientMetrics_ReportReactUsage_Notification.version)
}
inline std::string* CClientMetrics_ReportReactUsage_Notification::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:CClientMetrics_ReportReactUsage_Notification.version)
  return _s;
}
inline const std::string& CClientMetrics_ReportReactUsage_Notification::_internal_version() const {
  return version_.Get();
}
inline void CClientMetrics_ReportReactUsage_Notification::_internal_set_version(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CClientMetrics_ReportReactUsage_Notification::_internal_mutable_version() {
  _has_bits_[0] |= 0x00000002u;
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CClientMetrics_ReportReactUsage_Notification::release_version() {
  // @@protoc_insertion_point(field_release:CClientMetrics_ReportReactUsage_Notification.version)
  if (!_internal_has_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = version_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CClientMetrics_ReportReactUsage_Notification::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CClientMetrics_ReportReactUsage_Notification.version)
}

// repeated .CClientMetrics_ReportReactUsage_Notification.RouteData routes = 3;
inline int CClientMetrics_ReportReactUsage_Notification::_internal_routes_size() const {
  return routes_.size();
}
inline int CClientMetrics_ReportReactUsage_Notification::routes_size() const {
  return _internal_routes_size();
}
inline void CClientMetrics_ReportReactUsage_Notification::clear_routes() {
  routes_.Clear();
}
inline ::CClientMetrics_ReportReactUsage_Notification_RouteData* CClientMetrics_ReportReactUsage_Notification::mutable_routes(int index) {
  // @@protoc_insertion_point(field_mutable:CClientMetrics_ReportReactUsage_Notification.routes)
  return routes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CClientMetrics_ReportReactUsage_Notification_RouteData >*
CClientMetrics_ReportReactUsage_Notification::mutable_routes() {
  // @@protoc_insertion_point(field_mutable_list:CClientMetrics_ReportReactUsage_Notification.routes)
  return &routes_;
}
inline const ::CClientMetrics_ReportReactUsage_Notification_RouteData& CClientMetrics_ReportReactUsage_Notification::_internal_routes(int index) const {
  return routes_.Get(index);
}
inline const ::CClientMetrics_ReportReactUsage_Notification_RouteData& CClientMetrics_ReportReactUsage_Notification::routes(int index) const {
  // @@protoc_insertion_point(field_get:CClientMetrics_ReportReactUsage_Notification.routes)
  return _internal_routes(index);
}
inline ::CClientMetrics_ReportReactUsage_Notification_RouteData* CClientMetrics_ReportReactUsage_Notification::_internal_add_routes() {
  return routes_.Add();
}
inline ::CClientMetrics_ReportReactUsage_Notification_RouteData* CClientMetrics_ReportReactUsage_Notification::add_routes() {
  ::CClientMetrics_ReportReactUsage_Notification_RouteData* _add = _internal_add_routes();
  // @@protoc_insertion_point(field_add:CClientMetrics_ReportReactUsage_Notification.routes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CClientMetrics_ReportReactUsage_Notification_RouteData >&
CClientMetrics_ReportReactUsage_Notification::routes() const {
  // @@protoc_insertion_point(field_list:CClientMetrics_ReportReactUsage_Notification.routes)
  return routes_;
}

// repeated .CClientMetrics_ReportReactUsage_Notification.ComponentData components = 4;
inline int CClientMetrics_ReportReactUsage_Notification::_internal_components_size() const {
  return components_.size();
}
inline int CClientMetrics_ReportReactUsage_Notification::components_size() const {
  return _internal_components_size();
}
inline void CClientMetrics_ReportReactUsage_Notification::clear_components() {
  components_.Clear();
}
inline ::CClientMetrics_ReportReactUsage_Notification_ComponentData* CClientMetrics_ReportReactUsage_Notification::mutable_components(int index) {
  // @@protoc_insertion_point(field_mutable:CClientMetrics_ReportReactUsage_Notification.components)
  return components_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CClientMetrics_ReportReactUsage_Notification_ComponentData >*
CClientMetrics_ReportReactUsage_Notification::mutable_components() {
  // @@protoc_insertion_point(field_mutable_list:CClientMetrics_ReportReactUsage_Notification.components)
  return &components_;
}
inline const ::CClientMetrics_ReportReactUsage_Notification_ComponentData& CClientMetrics_ReportReactUsage_Notification::_internal_components(int index) const {
  return components_.Get(index);
}
inline const ::CClientMetrics_ReportReactUsage_Notification_ComponentData& CClientMetrics_ReportReactUsage_Notification::components(int index) const {
  // @@protoc_insertion_point(field_get:CClientMetrics_ReportReactUsage_Notification.components)
  return _internal_components(index);
}
inline ::CClientMetrics_ReportReactUsage_Notification_ComponentData* CClientMetrics_ReportReactUsage_Notification::_internal_add_components() {
  return components_.Add();
}
inline ::CClientMetrics_ReportReactUsage_Notification_ComponentData* CClientMetrics_ReportReactUsage_Notification::add_components() {
  ::CClientMetrics_ReportReactUsage_Notification_ComponentData* _add = _internal_add_components();
  // @@protoc_insertion_point(field_add:CClientMetrics_ReportReactUsage_Notification.components)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CClientMetrics_ReportReactUsage_Notification_ComponentData >&
CClientMetrics_ReportReactUsage_Notification::components() const {
  // @@protoc_insertion_point(field_list:CClientMetrics_ReportReactUsage_Notification.components)
  return components_;
}

// repeated .CClientMetrics_ReportReactUsage_Notification.ActionData actions = 5;
inline int CClientMetrics_ReportReactUsage_Notification::_internal_actions_size() const {
  return actions_.size();
}
inline int CClientMetrics_ReportReactUsage_Notification::actions_size() const {
  return _internal_actions_size();
}
inline void CClientMetrics_ReportReactUsage_Notification::clear_actions() {
  actions_.Clear();
}
inline ::CClientMetrics_ReportReactUsage_Notification_ActionData* CClientMetrics_ReportReactUsage_Notification::mutable_actions(int index) {
  // @@protoc_insertion_point(field_mutable:CClientMetrics_ReportReactUsage_Notification.actions)
  return actions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CClientMetrics_ReportReactUsage_Notification_ActionData >*
CClientMetrics_ReportReactUsage_Notification::mutable_actions() {
  // @@protoc_insertion_point(field_mutable_list:CClientMetrics_ReportReactUsage_Notification.actions)
  return &actions_;
}
inline const ::CClientMetrics_ReportReactUsage_Notification_ActionData& CClientMetrics_ReportReactUsage_Notification::_internal_actions(int index) const {
  return actions_.Get(index);
}
inline const ::CClientMetrics_ReportReactUsage_Notification_ActionData& CClientMetrics_ReportReactUsage_Notification::actions(int index) const {
  // @@protoc_insertion_point(field_get:CClientMetrics_ReportReactUsage_Notification.actions)
  return _internal_actions(index);
}
inline ::CClientMetrics_ReportReactUsage_Notification_ActionData* CClientMetrics_ReportReactUsage_Notification::_internal_add_actions() {
  return actions_.Add();
}
inline ::CClientMetrics_ReportReactUsage_Notification_ActionData* CClientMetrics_ReportReactUsage_Notification::add_actions() {
  ::CClientMetrics_ReportReactUsage_Notification_ActionData* _add = _internal_add_actions();
  // @@protoc_insertion_point(field_add:CClientMetrics_ReportReactUsage_Notification.actions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CClientMetrics_ReportReactUsage_Notification_ActionData >&
CClientMetrics_ReportReactUsage_Notification::actions() const {
  // @@protoc_insertion_point(field_list:CClientMetrics_ReportReactUsage_Notification.actions)
  return actions_;
}

// -------------------------------------------------------------------

// CClientMetrics_ReportClientError_Notification_Error

// optional string identifier = 1;
inline bool CClientMetrics_ReportClientError_Notification_Error::_internal_has_identifier() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CClientMetrics_ReportClientError_Notification_Error::has_identifier() const {
  return _internal_has_identifier();
}
inline void CClientMetrics_ReportClientError_Notification_Error::clear_identifier() {
  identifier_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CClientMetrics_ReportClientError_Notification_Error::identifier() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_ReportClientError_Notification.Error.identifier)
  return _internal_identifier();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CClientMetrics_ReportClientError_Notification_Error::set_identifier(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CClientMetrics_ReportClientError_Notification.Error.identifier)
}
inline std::string* CClientMetrics_ReportClientError_Notification_Error::mutable_identifier() {
  std::string* _s = _internal_mutable_identifier();
  // @@protoc_insertion_point(field_mutable:CClientMetrics_ReportClientError_Notification.Error.identifier)
  return _s;
}
inline const std::string& CClientMetrics_ReportClientError_Notification_Error::_internal_identifier() const {
  return identifier_.Get();
}
inline void CClientMetrics_ReportClientError_Notification_Error::_internal_set_identifier(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CClientMetrics_ReportClientError_Notification_Error::_internal_mutable_identifier() {
  _has_bits_[0] |= 0x00000001u;
  return identifier_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CClientMetrics_ReportClientError_Notification_Error::release_identifier() {
  // @@protoc_insertion_point(field_release:CClientMetrics_ReportClientError_Notification.Error.identifier)
  if (!_internal_has_identifier()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = identifier_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (identifier_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CClientMetrics_ReportClientError_Notification_Error::set_allocated_identifier(std::string* identifier) {
  if (identifier != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  identifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), identifier,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (identifier_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CClientMetrics_ReportClientError_Notification.Error.identifier)
}

// optional string message = 2;
inline bool CClientMetrics_ReportClientError_Notification_Error::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CClientMetrics_ReportClientError_Notification_Error::has_message() const {
  return _internal_has_message();
}
inline void CClientMetrics_ReportClientError_Notification_Error::clear_message() {
  message_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CClientMetrics_ReportClientError_Notification_Error::message() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_ReportClientError_Notification.Error.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CClientMetrics_ReportClientError_Notification_Error::set_message(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CClientMetrics_ReportClientError_Notification.Error.message)
}
inline std::string* CClientMetrics_ReportClientError_Notification_Error::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:CClientMetrics_ReportClientError_Notification.Error.message)
  return _s;
}
inline const std::string& CClientMetrics_ReportClientError_Notification_Error::_internal_message() const {
  return message_.Get();
}
inline void CClientMetrics_ReportClientError_Notification_Error::_internal_set_message(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CClientMetrics_ReportClientError_Notification_Error::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000002u;
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CClientMetrics_ReportClientError_Notification_Error::release_message() {
  // @@protoc_insertion_point(field_release:CClientMetrics_ReportClientError_Notification.Error.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = message_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CClientMetrics_ReportClientError_Notification_Error::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CClientMetrics_ReportClientError_Notification.Error.message)
}

// optional uint32 count = 3;
inline bool CClientMetrics_ReportClientError_Notification_Error::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CClientMetrics_ReportClientError_Notification_Error::has_count() const {
  return _internal_has_count();
}
inline void CClientMetrics_ReportClientError_Notification_Error::clear_count() {
  count_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CClientMetrics_ReportClientError_Notification_Error::_internal_count() const {
  return count_;
}
inline uint32_t CClientMetrics_ReportClientError_Notification_Error::count() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_ReportClientError_Notification.Error.count)
  return _internal_count();
}
inline void CClientMetrics_ReportClientError_Notification_Error::_internal_set_count(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  count_ = value;
}
inline void CClientMetrics_ReportClientError_Notification_Error::set_count(uint32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:CClientMetrics_ReportClientError_Notification.Error.count)
}

// -------------------------------------------------------------------

// CClientMetrics_ReportClientError_Notification

// optional string product = 1;
inline bool CClientMetrics_ReportClientError_Notification::_internal_has_product() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CClientMetrics_ReportClientError_Notification::has_product() const {
  return _internal_has_product();
}
inline void CClientMetrics_ReportClientError_Notification::clear_product() {
  product_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CClientMetrics_ReportClientError_Notification::product() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_ReportClientError_Notification.product)
  return _internal_product();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CClientMetrics_ReportClientError_Notification::set_product(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 product_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CClientMetrics_ReportClientError_Notification.product)
}
inline std::string* CClientMetrics_ReportClientError_Notification::mutable_product() {
  std::string* _s = _internal_mutable_product();
  // @@protoc_insertion_point(field_mutable:CClientMetrics_ReportClientError_Notification.product)
  return _s;
}
inline const std::string& CClientMetrics_ReportClientError_Notification::_internal_product() const {
  return product_.Get();
}
inline void CClientMetrics_ReportClientError_Notification::_internal_set_product(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  product_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CClientMetrics_ReportClientError_Notification::_internal_mutable_product() {
  _has_bits_[0] |= 0x00000001u;
  return product_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CClientMetrics_ReportClientError_Notification::release_product() {
  // @@protoc_insertion_point(field_release:CClientMetrics_ReportClientError_Notification.product)
  if (!_internal_has_product()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = product_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (product_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    product_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CClientMetrics_ReportClientError_Notification::set_allocated_product(std::string* product) {
  if (product != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  product_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), product,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (product_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    product_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CClientMetrics_ReportClientError_Notification.product)
}

// optional string version = 2;
inline bool CClientMetrics_ReportClientError_Notification::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CClientMetrics_ReportClientError_Notification::has_version() const {
  return _internal_has_version();
}
inline void CClientMetrics_ReportClientError_Notification::clear_version() {
  version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CClientMetrics_ReportClientError_Notification::version() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_ReportClientError_Notification.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CClientMetrics_ReportClientError_Notification::set_version(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CClientMetrics_ReportClientError_Notification.version)
}
inline std::string* CClientMetrics_ReportClientError_Notification::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:CClientMetrics_ReportClientError_Notification.version)
  return _s;
}
inline const std::string& CClientMetrics_ReportClientError_Notification::_internal_version() const {
  return version_.Get();
}
inline void CClientMetrics_ReportClientError_Notification::_internal_set_version(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CClientMetrics_ReportClientError_Notification::_internal_mutable_version() {
  _has_bits_[0] |= 0x00000002u;
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CClientMetrics_ReportClientError_Notification::release_version() {
  // @@protoc_insertion_point(field_release:CClientMetrics_ReportClientError_Notification.version)
  if (!_internal_has_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = version_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CClientMetrics_ReportClientError_Notification::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CClientMetrics_ReportClientError_Notification.version)
}

// repeated .CClientMetrics_ReportClientError_Notification.Error errors = 3;
inline int CClientMetrics_ReportClientError_Notification::_internal_errors_size() const {
  return errors_.size();
}
inline int CClientMetrics_ReportClientError_Notification::errors_size() const {
  return _internal_errors_size();
}
inline void CClientMetrics_ReportClientError_Notification::clear_errors() {
  errors_.Clear();
}
inline ::CClientMetrics_ReportClientError_Notification_Error* CClientMetrics_ReportClientError_Notification::mutable_errors(int index) {
  // @@protoc_insertion_point(field_mutable:CClientMetrics_ReportClientError_Notification.errors)
  return errors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CClientMetrics_ReportClientError_Notification_Error >*
CClientMetrics_ReportClientError_Notification::mutable_errors() {
  // @@protoc_insertion_point(field_mutable_list:CClientMetrics_ReportClientError_Notification.errors)
  return &errors_;
}
inline const ::CClientMetrics_ReportClientError_Notification_Error& CClientMetrics_ReportClientError_Notification::_internal_errors(int index) const {
  return errors_.Get(index);
}
inline const ::CClientMetrics_ReportClientError_Notification_Error& CClientMetrics_ReportClientError_Notification::errors(int index) const {
  // @@protoc_insertion_point(field_get:CClientMetrics_ReportClientError_Notification.errors)
  return _internal_errors(index);
}
inline ::CClientMetrics_ReportClientError_Notification_Error* CClientMetrics_ReportClientError_Notification::_internal_add_errors() {
  return errors_.Add();
}
inline ::CClientMetrics_ReportClientError_Notification_Error* CClientMetrics_ReportClientError_Notification::add_errors() {
  ::CClientMetrics_ReportClientError_Notification_Error* _add = _internal_add_errors();
  // @@protoc_insertion_point(field_add:CClientMetrics_ReportClientError_Notification.errors)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CClientMetrics_ReportClientError_Notification_Error >&
CClientMetrics_ReportClientError_Notification::errors() const {
  // @@protoc_insertion_point(field_list:CClientMetrics_ReportClientError_Notification.errors)
  return errors_;
}

// -------------------------------------------------------------------

// CClientMetrics_ClientBootstrap_Notification

// optional .CClientMetrics_ClientBootstrap_Summary summary = 1;
inline bool CClientMetrics_ClientBootstrap_Notification::_internal_has_summary() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || summary_ != nullptr);
  return value;
}
inline bool CClientMetrics_ClientBootstrap_Notification::has_summary() const {
  return _internal_has_summary();
}
inline const ::CClientMetrics_ClientBootstrap_Summary& CClientMetrics_ClientBootstrap_Notification::_internal_summary() const {
  const ::CClientMetrics_ClientBootstrap_Summary* p = summary_;
  return p != nullptr ? *p : reinterpret_cast<const ::CClientMetrics_ClientBootstrap_Summary&>(
      ::_CClientMetrics_ClientBootstrap_Summary_default_instance_);
}
inline const ::CClientMetrics_ClientBootstrap_Summary& CClientMetrics_ClientBootstrap_Notification::summary() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_ClientBootstrap_Notification.summary)
  return _internal_summary();
}
inline void CClientMetrics_ClientBootstrap_Notification::unsafe_arena_set_allocated_summary(
    ::CClientMetrics_ClientBootstrap_Summary* summary) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(summary_);
  }
  summary_ = summary;
  if (summary) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CClientMetrics_ClientBootstrap_Notification.summary)
}
inline ::CClientMetrics_ClientBootstrap_Summary* CClientMetrics_ClientBootstrap_Notification::release_summary() {
  _has_bits_[0] &= ~0x00000001u;
  ::CClientMetrics_ClientBootstrap_Summary* temp = summary_;
  summary_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CClientMetrics_ClientBootstrap_Summary* CClientMetrics_ClientBootstrap_Notification::unsafe_arena_release_summary() {
  // @@protoc_insertion_point(field_release:CClientMetrics_ClientBootstrap_Notification.summary)
  _has_bits_[0] &= ~0x00000001u;
  ::CClientMetrics_ClientBootstrap_Summary* temp = summary_;
  summary_ = nullptr;
  return temp;
}
inline ::CClientMetrics_ClientBootstrap_Summary* CClientMetrics_ClientBootstrap_Notification::_internal_mutable_summary() {
  _has_bits_[0] |= 0x00000001u;
  if (summary_ == nullptr) {
    auto* p = CreateMaybeMessage<::CClientMetrics_ClientBootstrap_Summary>(GetArenaForAllocation());
    summary_ = p;
  }
  return summary_;
}
inline ::CClientMetrics_ClientBootstrap_Summary* CClientMetrics_ClientBootstrap_Notification::mutable_summary() {
  ::CClientMetrics_ClientBootstrap_Summary* _msg = _internal_mutable_summary();
  // @@protoc_insertion_point(field_mutable:CClientMetrics_ClientBootstrap_Notification.summary)
  return _msg;
}
inline void CClientMetrics_ClientBootstrap_Notification::set_allocated_summary(::CClientMetrics_ClientBootstrap_Summary* summary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(summary_);
  }
  if (summary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(summary));
    if (message_arena != submessage_arena) {
      summary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, summary, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  summary_ = summary;
  // @@protoc_insertion_point(field_set_allocated:CClientMetrics_ClientBootstrap_Notification.summary)
}

// -------------------------------------------------------------------

// CClientMetrics_DownloadRates_Notification_StatsInfo

// optional uint32 source_type = 1;
inline bool CClientMetrics_DownloadRates_Notification_StatsInfo::_internal_has_source_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CClientMetrics_DownloadRates_Notification_StatsInfo::has_source_type() const {
  return _internal_has_source_type();
}
inline void CClientMetrics_DownloadRates_Notification_StatsInfo::clear_source_type() {
  source_type_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CClientMetrics_DownloadRates_Notification_StatsInfo::_internal_source_type() const {
  return source_type_;
}
inline uint32_t CClientMetrics_DownloadRates_Notification_StatsInfo::source_type() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_DownloadRates_Notification.StatsInfo.source_type)
  return _internal_source_type();
}
inline void CClientMetrics_DownloadRates_Notification_StatsInfo::_internal_set_source_type(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  source_type_ = value;
}
inline void CClientMetrics_DownloadRates_Notification_StatsInfo::set_source_type(uint32_t value) {
  _internal_set_source_type(value);
  // @@protoc_insertion_point(field_set:CClientMetrics_DownloadRates_Notification.StatsInfo.source_type)
}

// optional uint32 source_id = 2;
inline bool CClientMetrics_DownloadRates_Notification_StatsInfo::_internal_has_source_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CClientMetrics_DownloadRates_Notification_StatsInfo::has_source_id() const {
  return _internal_has_source_id();
}
inline void CClientMetrics_DownloadRates_Notification_StatsInfo::clear_source_id() {
  source_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CClientMetrics_DownloadRates_Notification_StatsInfo::_internal_source_id() const {
  return source_id_;
}
inline uint32_t CClientMetrics_DownloadRates_Notification_StatsInfo::source_id() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_DownloadRates_Notification.StatsInfo.source_id)
  return _internal_source_id();
}
inline void CClientMetrics_DownloadRates_Notification_StatsInfo::_internal_set_source_id(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  source_id_ = value;
}
inline void CClientMetrics_DownloadRates_Notification_StatsInfo::set_source_id(uint32_t value) {
  _internal_set_source_id(value);
  // @@protoc_insertion_point(field_set:CClientMetrics_DownloadRates_Notification.StatsInfo.source_id)
}

// optional uint64 bytes = 3;
inline bool CClientMetrics_DownloadRates_Notification_StatsInfo::_internal_has_bytes() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CClientMetrics_DownloadRates_Notification_StatsInfo::has_bytes() const {
  return _internal_has_bytes();
}
inline void CClientMetrics_DownloadRates_Notification_StatsInfo::clear_bytes() {
  bytes_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline uint64_t CClientMetrics_DownloadRates_Notification_StatsInfo::_internal_bytes() const {
  return bytes_;
}
inline uint64_t CClientMetrics_DownloadRates_Notification_StatsInfo::bytes() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_DownloadRates_Notification.StatsInfo.bytes)
  return _internal_bytes();
}
inline void CClientMetrics_DownloadRates_Notification_StatsInfo::_internal_set_bytes(uint64_t value) {
  _has_bits_[0] |= 0x00000008u;
  bytes_ = value;
}
inline void CClientMetrics_DownloadRates_Notification_StatsInfo::set_bytes(uint64_t value) {
  _internal_set_bytes(value);
  // @@protoc_insertion_point(field_set:CClientMetrics_DownloadRates_Notification.StatsInfo.bytes)
}

// optional string host_name = 4;
inline bool CClientMetrics_DownloadRates_Notification_StatsInfo::_internal_has_host_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CClientMetrics_DownloadRates_Notification_StatsInfo::has_host_name() const {
  return _internal_has_host_name();
}
inline void CClientMetrics_DownloadRates_Notification_StatsInfo::clear_host_name() {
  host_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CClientMetrics_DownloadRates_Notification_StatsInfo::host_name() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_DownloadRates_Notification.StatsInfo.host_name)
  return _internal_host_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CClientMetrics_DownloadRates_Notification_StatsInfo::set_host_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 host_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CClientMetrics_DownloadRates_Notification.StatsInfo.host_name)
}
inline std::string* CClientMetrics_DownloadRates_Notification_StatsInfo::mutable_host_name() {
  std::string* _s = _internal_mutable_host_name();
  // @@protoc_insertion_point(field_mutable:CClientMetrics_DownloadRates_Notification.StatsInfo.host_name)
  return _s;
}
inline const std::string& CClientMetrics_DownloadRates_Notification_StatsInfo::_internal_host_name() const {
  return host_name_.Get();
}
inline void CClientMetrics_DownloadRates_Notification_StatsInfo::_internal_set_host_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  host_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CClientMetrics_DownloadRates_Notification_StatsInfo::_internal_mutable_host_name() {
  _has_bits_[0] |= 0x00000001u;
  return host_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CClientMetrics_DownloadRates_Notification_StatsInfo::release_host_name() {
  // @@protoc_insertion_point(field_release:CClientMetrics_DownloadRates_Notification.StatsInfo.host_name)
  if (!_internal_has_host_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = host_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (host_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    host_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CClientMetrics_DownloadRates_Notification_StatsInfo::set_allocated_host_name(std::string* host_name) {
  if (host_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  host_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (host_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    host_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CClientMetrics_DownloadRates_Notification.StatsInfo.host_name)
}

// optional uint64 microseconds = 5;
inline bool CClientMetrics_DownloadRates_Notification_StatsInfo::_internal_has_microseconds() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CClientMetrics_DownloadRates_Notification_StatsInfo::has_microseconds() const {
  return _internal_has_microseconds();
}
inline void CClientMetrics_DownloadRates_Notification_StatsInfo::clear_microseconds() {
  microseconds_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000010u;
}
inline uint64_t CClientMetrics_DownloadRates_Notification_StatsInfo::_internal_microseconds() const {
  return microseconds_;
}
inline uint64_t CClientMetrics_DownloadRates_Notification_StatsInfo::microseconds() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_DownloadRates_Notification.StatsInfo.microseconds)
  return _internal_microseconds();
}
inline void CClientMetrics_DownloadRates_Notification_StatsInfo::_internal_set_microseconds(uint64_t value) {
  _has_bits_[0] |= 0x00000010u;
  microseconds_ = value;
}
inline void CClientMetrics_DownloadRates_Notification_StatsInfo::set_microseconds(uint64_t value) {
  _internal_set_microseconds(value);
  // @@protoc_insertion_point(field_set:CClientMetrics_DownloadRates_Notification.StatsInfo.microseconds)
}

// optional bool used_ipv6 = 6;
inline bool CClientMetrics_DownloadRates_Notification_StatsInfo::_internal_has_used_ipv6() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CClientMetrics_DownloadRates_Notification_StatsInfo::has_used_ipv6() const {
  return _internal_has_used_ipv6();
}
inline void CClientMetrics_DownloadRates_Notification_StatsInfo::clear_used_ipv6() {
  used_ipv6_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CClientMetrics_DownloadRates_Notification_StatsInfo::_internal_used_ipv6() const {
  return used_ipv6_;
}
inline bool CClientMetrics_DownloadRates_Notification_StatsInfo::used_ipv6() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_DownloadRates_Notification.StatsInfo.used_ipv6)
  return _internal_used_ipv6();
}
inline void CClientMetrics_DownloadRates_Notification_StatsInfo::_internal_set_used_ipv6(bool value) {
  _has_bits_[0] |= 0x00000020u;
  used_ipv6_ = value;
}
inline void CClientMetrics_DownloadRates_Notification_StatsInfo::set_used_ipv6(bool value) {
  _internal_set_used_ipv6(value);
  // @@protoc_insertion_point(field_set:CClientMetrics_DownloadRates_Notification.StatsInfo.used_ipv6)
}

// optional bool proxied = 7;
inline bool CClientMetrics_DownloadRates_Notification_StatsInfo::_internal_has_proxied() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CClientMetrics_DownloadRates_Notification_StatsInfo::has_proxied() const {
  return _internal_has_proxied();
}
inline void CClientMetrics_DownloadRates_Notification_StatsInfo::clear_proxied() {
  proxied_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool CClientMetrics_DownloadRates_Notification_StatsInfo::_internal_proxied() const {
  return proxied_;
}
inline bool CClientMetrics_DownloadRates_Notification_StatsInfo::proxied() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_DownloadRates_Notification.StatsInfo.proxied)
  return _internal_proxied();
}
inline void CClientMetrics_DownloadRates_Notification_StatsInfo::_internal_set_proxied(bool value) {
  _has_bits_[0] |= 0x00000040u;
  proxied_ = value;
}
inline void CClientMetrics_DownloadRates_Notification_StatsInfo::set_proxied(bool value) {
  _internal_set_proxied(value);
  // @@protoc_insertion_point(field_set:CClientMetrics_DownloadRates_Notification.StatsInfo.proxied)
}

// optional bool used_http2 = 8;
inline bool CClientMetrics_DownloadRates_Notification_StatsInfo::_internal_has_used_http2() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CClientMetrics_DownloadRates_Notification_StatsInfo::has_used_http2() const {
  return _internal_has_used_http2();
}
inline void CClientMetrics_DownloadRates_Notification_StatsInfo::clear_used_http2() {
  used_http2_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CClientMetrics_DownloadRates_Notification_StatsInfo::_internal_used_http2() const {
  return used_http2_;
}
inline bool CClientMetrics_DownloadRates_Notification_StatsInfo::used_http2() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_DownloadRates_Notification.StatsInfo.used_http2)
  return _internal_used_http2();
}
inline void CClientMetrics_DownloadRates_Notification_StatsInfo::_internal_set_used_http2(bool value) {
  _has_bits_[0] |= 0x00000080u;
  used_http2_ = value;
}
inline void CClientMetrics_DownloadRates_Notification_StatsInfo::set_used_http2(bool value) {
  _internal_set_used_http2(value);
  // @@protoc_insertion_point(field_set:CClientMetrics_DownloadRates_Notification.StatsInfo.used_http2)
}

// optional uint32 cache_hits = 9;
inline bool CClientMetrics_DownloadRates_Notification_StatsInfo::_internal_has_cache_hits() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CClientMetrics_DownloadRates_Notification_StatsInfo::has_cache_hits() const {
  return _internal_has_cache_hits();
}
inline void CClientMetrics_DownloadRates_Notification_StatsInfo::clear_cache_hits() {
  cache_hits_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CClientMetrics_DownloadRates_Notification_StatsInfo::_internal_cache_hits() const {
  return cache_hits_;
}
inline uint32_t CClientMetrics_DownloadRates_Notification_StatsInfo::cache_hits() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_DownloadRates_Notification.StatsInfo.cache_hits)
  return _internal_cache_hits();
}
inline void CClientMetrics_DownloadRates_Notification_StatsInfo::_internal_set_cache_hits(uint32_t value) {
  _has_bits_[0] |= 0x00000100u;
  cache_hits_ = value;
}
inline void CClientMetrics_DownloadRates_Notification_StatsInfo::set_cache_hits(uint32_t value) {
  _internal_set_cache_hits(value);
  // @@protoc_insertion_point(field_set:CClientMetrics_DownloadRates_Notification.StatsInfo.cache_hits)
}

// optional uint32 cache_misses = 10;
inline bool CClientMetrics_DownloadRates_Notification_StatsInfo::_internal_has_cache_misses() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CClientMetrics_DownloadRates_Notification_StatsInfo::has_cache_misses() const {
  return _internal_has_cache_misses();
}
inline void CClientMetrics_DownloadRates_Notification_StatsInfo::clear_cache_misses() {
  cache_misses_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline uint32_t CClientMetrics_DownloadRates_Notification_StatsInfo::_internal_cache_misses() const {
  return cache_misses_;
}
inline uint32_t CClientMetrics_DownloadRates_Notification_StatsInfo::cache_misses() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_DownloadRates_Notification.StatsInfo.cache_misses)
  return _internal_cache_misses();
}
inline void CClientMetrics_DownloadRates_Notification_StatsInfo::_internal_set_cache_misses(uint32_t value) {
  _has_bits_[0] |= 0x00000800u;
  cache_misses_ = value;
}
inline void CClientMetrics_DownloadRates_Notification_StatsInfo::set_cache_misses(uint32_t value) {
  _internal_set_cache_misses(value);
  // @@protoc_insertion_point(field_set:CClientMetrics_DownloadRates_Notification.StatsInfo.cache_misses)
}

// optional uint64 hit_bytes = 11;
inline bool CClientMetrics_DownloadRates_Notification_StatsInfo::_internal_has_hit_bytes() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CClientMetrics_DownloadRates_Notification_StatsInfo::has_hit_bytes() const {
  return _internal_has_hit_bytes();
}
inline void CClientMetrics_DownloadRates_Notification_StatsInfo::clear_hit_bytes() {
  hit_bytes_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000200u;
}
inline uint64_t CClientMetrics_DownloadRates_Notification_StatsInfo::_internal_hit_bytes() const {
  return hit_bytes_;
}
inline uint64_t CClientMetrics_DownloadRates_Notification_StatsInfo::hit_bytes() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_DownloadRates_Notification.StatsInfo.hit_bytes)
  return _internal_hit_bytes();
}
inline void CClientMetrics_DownloadRates_Notification_StatsInfo::_internal_set_hit_bytes(uint64_t value) {
  _has_bits_[0] |= 0x00000200u;
  hit_bytes_ = value;
}
inline void CClientMetrics_DownloadRates_Notification_StatsInfo::set_hit_bytes(uint64_t value) {
  _internal_set_hit_bytes(value);
  // @@protoc_insertion_point(field_set:CClientMetrics_DownloadRates_Notification.StatsInfo.hit_bytes)
}

// optional uint64 miss_bytes = 12;
inline bool CClientMetrics_DownloadRates_Notification_StatsInfo::_internal_has_miss_bytes() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CClientMetrics_DownloadRates_Notification_StatsInfo::has_miss_bytes() const {
  return _internal_has_miss_bytes();
}
inline void CClientMetrics_DownloadRates_Notification_StatsInfo::clear_miss_bytes() {
  miss_bytes_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000400u;
}
inline uint64_t CClientMetrics_DownloadRates_Notification_StatsInfo::_internal_miss_bytes() const {
  return miss_bytes_;
}
inline uint64_t CClientMetrics_DownloadRates_Notification_StatsInfo::miss_bytes() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_DownloadRates_Notification.StatsInfo.miss_bytes)
  return _internal_miss_bytes();
}
inline void CClientMetrics_DownloadRates_Notification_StatsInfo::_internal_set_miss_bytes(uint64_t value) {
  _has_bits_[0] |= 0x00000400u;
  miss_bytes_ = value;
}
inline void CClientMetrics_DownloadRates_Notification_StatsInfo::set_miss_bytes(uint64_t value) {
  _internal_set_miss_bytes(value);
  // @@protoc_insertion_point(field_set:CClientMetrics_DownloadRates_Notification.StatsInfo.miss_bytes)
}

// -------------------------------------------------------------------

// CClientMetrics_DownloadRates_Notification

// optional uint32 cell_id = 1;
inline bool CClientMetrics_DownloadRates_Notification::_internal_has_cell_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CClientMetrics_DownloadRates_Notification::has_cell_id() const {
  return _internal_has_cell_id();
}
inline void CClientMetrics_DownloadRates_Notification::clear_cell_id() {
  cell_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CClientMetrics_DownloadRates_Notification::_internal_cell_id() const {
  return cell_id_;
}
inline uint32_t CClientMetrics_DownloadRates_Notification::cell_id() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_DownloadRates_Notification.cell_id)
  return _internal_cell_id();
}
inline void CClientMetrics_DownloadRates_Notification::_internal_set_cell_id(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  cell_id_ = value;
}
inline void CClientMetrics_DownloadRates_Notification::set_cell_id(uint32_t value) {
  _internal_set_cell_id(value);
  // @@protoc_insertion_point(field_set:CClientMetrics_DownloadRates_Notification.cell_id)
}

// repeated .CClientMetrics_DownloadRates_Notification.StatsInfo stats = 2;
inline int CClientMetrics_DownloadRates_Notification::_internal_stats_size() const {
  return stats_.size();
}
inline int CClientMetrics_DownloadRates_Notification::stats_size() const {
  return _internal_stats_size();
}
inline void CClientMetrics_DownloadRates_Notification::clear_stats() {
  stats_.Clear();
}
inline ::CClientMetrics_DownloadRates_Notification_StatsInfo* CClientMetrics_DownloadRates_Notification::mutable_stats(int index) {
  // @@protoc_insertion_point(field_mutable:CClientMetrics_DownloadRates_Notification.stats)
  return stats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CClientMetrics_DownloadRates_Notification_StatsInfo >*
CClientMetrics_DownloadRates_Notification::mutable_stats() {
  // @@protoc_insertion_point(field_mutable_list:CClientMetrics_DownloadRates_Notification.stats)
  return &stats_;
}
inline const ::CClientMetrics_DownloadRates_Notification_StatsInfo& CClientMetrics_DownloadRates_Notification::_internal_stats(int index) const {
  return stats_.Get(index);
}
inline const ::CClientMetrics_DownloadRates_Notification_StatsInfo& CClientMetrics_DownloadRates_Notification::stats(int index) const {
  // @@protoc_insertion_point(field_get:CClientMetrics_DownloadRates_Notification.stats)
  return _internal_stats(index);
}
inline ::CClientMetrics_DownloadRates_Notification_StatsInfo* CClientMetrics_DownloadRates_Notification::_internal_add_stats() {
  return stats_.Add();
}
inline ::CClientMetrics_DownloadRates_Notification_StatsInfo* CClientMetrics_DownloadRates_Notification::add_stats() {
  ::CClientMetrics_DownloadRates_Notification_StatsInfo* _add = _internal_add_stats();
  // @@protoc_insertion_point(field_add:CClientMetrics_DownloadRates_Notification.stats)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CClientMetrics_DownloadRates_Notification_StatsInfo >&
CClientMetrics_DownloadRates_Notification::stats() const {
  // @@protoc_insertion_point(field_list:CClientMetrics_DownloadRates_Notification.stats)
  return stats_;
}

// optional uint32 throttling_kbps = 3;
inline bool CClientMetrics_DownloadRates_Notification::_internal_has_throttling_kbps() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CClientMetrics_DownloadRates_Notification::has_throttling_kbps() const {
  return _internal_has_throttling_kbps();
}
inline void CClientMetrics_DownloadRates_Notification::clear_throttling_kbps() {
  throttling_kbps_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CClientMetrics_DownloadRates_Notification::_internal_throttling_kbps() const {
  return throttling_kbps_;
}
inline uint32_t CClientMetrics_DownloadRates_Notification::throttling_kbps() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_DownloadRates_Notification.throttling_kbps)
  return _internal_throttling_kbps();
}
inline void CClientMetrics_DownloadRates_Notification::_internal_set_throttling_kbps(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  throttling_kbps_ = value;
}
inline void CClientMetrics_DownloadRates_Notification::set_throttling_kbps(uint32_t value) {
  _internal_set_throttling_kbps(value);
  // @@protoc_insertion_point(field_set:CClientMetrics_DownloadRates_Notification.throttling_kbps)
}

// -------------------------------------------------------------------

// CClientMetrics_ContentValidation_Notification

// optional int32 validation_result = 1;
inline bool CClientMetrics_ContentValidation_Notification::_internal_has_validation_result() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CClientMetrics_ContentValidation_Notification::has_validation_result() const {
  return _internal_has_validation_result();
}
inline void CClientMetrics_ContentValidation_Notification::clear_validation_result() {
  validation_result_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t CClientMetrics_ContentValidation_Notification::_internal_validation_result() const {
  return validation_result_;
}
inline int32_t CClientMetrics_ContentValidation_Notification::validation_result() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_ContentValidation_Notification.validation_result)
  return _internal_validation_result();
}
inline void CClientMetrics_ContentValidation_Notification::_internal_set_validation_result(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  validation_result_ = value;
}
inline void CClientMetrics_ContentValidation_Notification::set_validation_result(int32_t value) {
  _internal_set_validation_result(value);
  // @@protoc_insertion_point(field_set:CClientMetrics_ContentValidation_Notification.validation_result)
}

// optional uint32 app_id = 2;
inline bool CClientMetrics_ContentValidation_Notification::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CClientMetrics_ContentValidation_Notification::has_app_id() const {
  return _internal_has_app_id();
}
inline void CClientMetrics_ContentValidation_Notification::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CClientMetrics_ContentValidation_Notification::_internal_app_id() const {
  return app_id_;
}
inline uint32_t CClientMetrics_ContentValidation_Notification::app_id() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_ContentValidation_Notification.app_id)
  return _internal_app_id();
}
inline void CClientMetrics_ContentValidation_Notification::_internal_set_app_id(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  app_id_ = value;
}
inline void CClientMetrics_ContentValidation_Notification::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CClientMetrics_ContentValidation_Notification.app_id)
}

// optional bool staged_files = 3;
inline bool CClientMetrics_ContentValidation_Notification::_internal_has_staged_files() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CClientMetrics_ContentValidation_Notification::has_staged_files() const {
  return _internal_has_staged_files();
}
inline void CClientMetrics_ContentValidation_Notification::clear_staged_files() {
  staged_files_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CClientMetrics_ContentValidation_Notification::_internal_staged_files() const {
  return staged_files_;
}
inline bool CClientMetrics_ContentValidation_Notification::staged_files() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_ContentValidation_Notification.staged_files)
  return _internal_staged_files();
}
inline void CClientMetrics_ContentValidation_Notification::_internal_set_staged_files(bool value) {
  _has_bits_[0] |= 0x00000004u;
  staged_files_ = value;
}
inline void CClientMetrics_ContentValidation_Notification::set_staged_files(bool value) {
  _internal_set_staged_files(value);
  // @@protoc_insertion_point(field_set:CClientMetrics_ContentValidation_Notification.staged_files)
}

// optional bool user_initiated = 4;
inline bool CClientMetrics_ContentValidation_Notification::_internal_has_user_initiated() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CClientMetrics_ContentValidation_Notification::has_user_initiated() const {
  return _internal_has_user_initiated();
}
inline void CClientMetrics_ContentValidation_Notification::clear_user_initiated() {
  user_initiated_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CClientMetrics_ContentValidation_Notification::_internal_user_initiated() const {
  return user_initiated_;
}
inline bool CClientMetrics_ContentValidation_Notification::user_initiated() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_ContentValidation_Notification.user_initiated)
  return _internal_user_initiated();
}
inline void CClientMetrics_ContentValidation_Notification::_internal_set_user_initiated(bool value) {
  _has_bits_[0] |= 0x00000008u;
  user_initiated_ = value;
}
inline void CClientMetrics_ContentValidation_Notification::set_user_initiated(bool value) {
  _internal_set_user_initiated(value);
  // @@protoc_insertion_point(field_set:CClientMetrics_ContentValidation_Notification.user_initiated)
}

// optional bool early_out = 5;
inline bool CClientMetrics_ContentValidation_Notification::_internal_has_early_out() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CClientMetrics_ContentValidation_Notification::has_early_out() const {
  return _internal_has_early_out();
}
inline void CClientMetrics_ContentValidation_Notification::clear_early_out() {
  early_out_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CClientMetrics_ContentValidation_Notification::_internal_early_out() const {
  return early_out_;
}
inline bool CClientMetrics_ContentValidation_Notification::early_out() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_ContentValidation_Notification.early_out)
  return _internal_early_out();
}
inline void CClientMetrics_ContentValidation_Notification::_internal_set_early_out(bool value) {
  _has_bits_[0] |= 0x00000010u;
  early_out_ = value;
}
inline void CClientMetrics_ContentValidation_Notification::set_early_out(bool value) {
  _internal_set_early_out(value);
  // @@protoc_insertion_point(field_set:CClientMetrics_ContentValidation_Notification.early_out)
}

// optional uint32 chunks_scanned = 6;
inline bool CClientMetrics_ContentValidation_Notification::_internal_has_chunks_scanned() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CClientMetrics_ContentValidation_Notification::has_chunks_scanned() const {
  return _internal_has_chunks_scanned();
}
inline void CClientMetrics_ContentValidation_Notification::clear_chunks_scanned() {
  chunks_scanned_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CClientMetrics_ContentValidation_Notification::_internal_chunks_scanned() const {
  return chunks_scanned_;
}
inline uint32_t CClientMetrics_ContentValidation_Notification::chunks_scanned() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_ContentValidation_Notification.chunks_scanned)
  return _internal_chunks_scanned();
}
inline void CClientMetrics_ContentValidation_Notification::_internal_set_chunks_scanned(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  chunks_scanned_ = value;
}
inline void CClientMetrics_ContentValidation_Notification::set_chunks_scanned(uint32_t value) {
  _internal_set_chunks_scanned(value);
  // @@protoc_insertion_point(field_set:CClientMetrics_ContentValidation_Notification.chunks_scanned)
}

// optional uint32 chunks_corrupt = 7;
inline bool CClientMetrics_ContentValidation_Notification::_internal_has_chunks_corrupt() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CClientMetrics_ContentValidation_Notification::has_chunks_corrupt() const {
  return _internal_has_chunks_corrupt();
}
inline void CClientMetrics_ContentValidation_Notification::clear_chunks_corrupt() {
  chunks_corrupt_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline uint32_t CClientMetrics_ContentValidation_Notification::_internal_chunks_corrupt() const {
  return chunks_corrupt_;
}
inline uint32_t CClientMetrics_ContentValidation_Notification::chunks_corrupt() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_ContentValidation_Notification.chunks_corrupt)
  return _internal_chunks_corrupt();
}
inline void CClientMetrics_ContentValidation_Notification::_internal_set_chunks_corrupt(uint32_t value) {
  _has_bits_[0] |= 0x00000200u;
  chunks_corrupt_ = value;
}
inline void CClientMetrics_ContentValidation_Notification::set_chunks_corrupt(uint32_t value) {
  _internal_set_chunks_corrupt(value);
  // @@protoc_insertion_point(field_set:CClientMetrics_ContentValidation_Notification.chunks_corrupt)
}

// optional uint64 bytes_scanned = 8;
inline bool CClientMetrics_ContentValidation_Notification::_internal_has_bytes_scanned() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CClientMetrics_ContentValidation_Notification::has_bytes_scanned() const {
  return _internal_has_bytes_scanned();
}
inline void CClientMetrics_ContentValidation_Notification::clear_bytes_scanned() {
  bytes_scanned_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000040u;
}
inline uint64_t CClientMetrics_ContentValidation_Notification::_internal_bytes_scanned() const {
  return bytes_scanned_;
}
inline uint64_t CClientMetrics_ContentValidation_Notification::bytes_scanned() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_ContentValidation_Notification.bytes_scanned)
  return _internal_bytes_scanned();
}
inline void CClientMetrics_ContentValidation_Notification::_internal_set_bytes_scanned(uint64_t value) {
  _has_bits_[0] |= 0x00000040u;
  bytes_scanned_ = value;
}
inline void CClientMetrics_ContentValidation_Notification::set_bytes_scanned(uint64_t value) {
  _internal_set_bytes_scanned(value);
  // @@protoc_insertion_point(field_set:CClientMetrics_ContentValidation_Notification.bytes_scanned)
}

// optional uint64 chunk_bytes_corrupt = 9;
inline bool CClientMetrics_ContentValidation_Notification::_internal_has_chunk_bytes_corrupt() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CClientMetrics_ContentValidation_Notification::has_chunk_bytes_corrupt() const {
  return _internal_has_chunk_bytes_corrupt();
}
inline void CClientMetrics_ContentValidation_Notification::clear_chunk_bytes_corrupt() {
  chunk_bytes_corrupt_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000080u;
}
inline uint64_t CClientMetrics_ContentValidation_Notification::_internal_chunk_bytes_corrupt() const {
  return chunk_bytes_corrupt_;
}
inline uint64_t CClientMetrics_ContentValidation_Notification::chunk_bytes_corrupt() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_ContentValidation_Notification.chunk_bytes_corrupt)
  return _internal_chunk_bytes_corrupt();
}
inline void CClientMetrics_ContentValidation_Notification::_internal_set_chunk_bytes_corrupt(uint64_t value) {
  _has_bits_[0] |= 0x00000080u;
  chunk_bytes_corrupt_ = value;
}
inline void CClientMetrics_ContentValidation_Notification::set_chunk_bytes_corrupt(uint64_t value) {
  _internal_set_chunk_bytes_corrupt(value);
  // @@protoc_insertion_point(field_set:CClientMetrics_ContentValidation_Notification.chunk_bytes_corrupt)
}

// optional uint64 total_file_size_corrupt = 10;
inline bool CClientMetrics_ContentValidation_Notification::_internal_has_total_file_size_corrupt() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CClientMetrics_ContentValidation_Notification::has_total_file_size_corrupt() const {
  return _internal_has_total_file_size_corrupt();
}
inline void CClientMetrics_ContentValidation_Notification::clear_total_file_size_corrupt() {
  total_file_size_corrupt_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000100u;
}
inline uint64_t CClientMetrics_ContentValidation_Notification::_internal_total_file_size_corrupt() const {
  return total_file_size_corrupt_;
}
inline uint64_t CClientMetrics_ContentValidation_Notification::total_file_size_corrupt() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_ContentValidation_Notification.total_file_size_corrupt)
  return _internal_total_file_size_corrupt();
}
inline void CClientMetrics_ContentValidation_Notification::_internal_set_total_file_size_corrupt(uint64_t value) {
  _has_bits_[0] |= 0x00000100u;
  total_file_size_corrupt_ = value;
}
inline void CClientMetrics_ContentValidation_Notification::set_total_file_size_corrupt(uint64_t value) {
  _internal_set_total_file_size_corrupt(value);
  // @@protoc_insertion_point(field_set:CClientMetrics_ContentValidation_Notification.total_file_size_corrupt)
}

// -------------------------------------------------------------------

// CClientMetrics_CloudAppSyncStats_Notification

// optional uint32 app_id = 1;
inline bool CClientMetrics_CloudAppSyncStats_Notification::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CClientMetrics_CloudAppSyncStats_Notification::has_app_id() const {
  return _internal_has_app_id();
}
inline void CClientMetrics_CloudAppSyncStats_Notification::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CClientMetrics_CloudAppSyncStats_Notification::_internal_app_id() const {
  return app_id_;
}
inline uint32_t CClientMetrics_CloudAppSyncStats_Notification::app_id() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_CloudAppSyncStats_Notification.app_id)
  return _internal_app_id();
}
inline void CClientMetrics_CloudAppSyncStats_Notification::_internal_set_app_id(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  app_id_ = value;
}
inline void CClientMetrics_CloudAppSyncStats_Notification::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CClientMetrics_CloudAppSyncStats_Notification.app_id)
}

// optional uint32 platform_type = 2;
inline bool CClientMetrics_CloudAppSyncStats_Notification::_internal_has_platform_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CClientMetrics_CloudAppSyncStats_Notification::has_platform_type() const {
  return _internal_has_platform_type();
}
inline void CClientMetrics_CloudAppSyncStats_Notification::clear_platform_type() {
  platform_type_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CClientMetrics_CloudAppSyncStats_Notification::_internal_platform_type() const {
  return platform_type_;
}
inline uint32_t CClientMetrics_CloudAppSyncStats_Notification::platform_type() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_CloudAppSyncStats_Notification.platform_type)
  return _internal_platform_type();
}
inline void CClientMetrics_CloudAppSyncStats_Notification::_internal_set_platform_type(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  platform_type_ = value;
}
inline void CClientMetrics_CloudAppSyncStats_Notification::set_platform_type(uint32_t value) {
  _internal_set_platform_type(value);
  // @@protoc_insertion_point(field_set:CClientMetrics_CloudAppSyncStats_Notification.platform_type)
}

// optional bool preload = 3;
inline bool CClientMetrics_CloudAppSyncStats_Notification::_internal_has_preload() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CClientMetrics_CloudAppSyncStats_Notification::has_preload() const {
  return _internal_has_preload();
}
inline void CClientMetrics_CloudAppSyncStats_Notification::clear_preload() {
  preload_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CClientMetrics_CloudAppSyncStats_Notification::_internal_preload() const {
  return preload_;
}
inline bool CClientMetrics_CloudAppSyncStats_Notification::preload() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_CloudAppSyncStats_Notification.preload)
  return _internal_preload();
}
inline void CClientMetrics_CloudAppSyncStats_Notification::_internal_set_preload(bool value) {
  _has_bits_[0] |= 0x00000004u;
  preload_ = value;
}
inline void CClientMetrics_CloudAppSyncStats_Notification::set_preload(bool value) {
  _internal_set_preload(value);
  // @@protoc_insertion_point(field_set:CClientMetrics_CloudAppSyncStats_Notification.preload)
}

// optional bool blocking_app_launch = 4;
inline bool CClientMetrics_CloudAppSyncStats_Notification::_internal_has_blocking_app_launch() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CClientMetrics_CloudAppSyncStats_Notification::has_blocking_app_launch() const {
  return _internal_has_blocking_app_launch();
}
inline void CClientMetrics_CloudAppSyncStats_Notification::clear_blocking_app_launch() {
  blocking_app_launch_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CClientMetrics_CloudAppSyncStats_Notification::_internal_blocking_app_launch() const {
  return blocking_app_launch_;
}
inline bool CClientMetrics_CloudAppSyncStats_Notification::blocking_app_launch() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_CloudAppSyncStats_Notification.blocking_app_launch)
  return _internal_blocking_app_launch();
}
inline void CClientMetrics_CloudAppSyncStats_Notification::_internal_set_blocking_app_launch(bool value) {
  _has_bits_[0] |= 0x00000008u;
  blocking_app_launch_ = value;
}
inline void CClientMetrics_CloudAppSyncStats_Notification::set_blocking_app_launch(bool value) {
  _internal_set_blocking_app_launch(value);
  // @@protoc_insertion_point(field_set:CClientMetrics_CloudAppSyncStats_Notification.blocking_app_launch)
}

// optional uint32 files_uploaded = 5;
inline bool CClientMetrics_CloudAppSyncStats_Notification::_internal_has_files_uploaded() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CClientMetrics_CloudAppSyncStats_Notification::has_files_uploaded() const {
  return _internal_has_files_uploaded();
}
inline void CClientMetrics_CloudAppSyncStats_Notification::clear_files_uploaded() {
  files_uploaded_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CClientMetrics_CloudAppSyncStats_Notification::_internal_files_uploaded() const {
  return files_uploaded_;
}
inline uint32_t CClientMetrics_CloudAppSyncStats_Notification::files_uploaded() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_CloudAppSyncStats_Notification.files_uploaded)
  return _internal_files_uploaded();
}
inline void CClientMetrics_CloudAppSyncStats_Notification::_internal_set_files_uploaded(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  files_uploaded_ = value;
}
inline void CClientMetrics_CloudAppSyncStats_Notification::set_files_uploaded(uint32_t value) {
  _internal_set_files_uploaded(value);
  // @@protoc_insertion_point(field_set:CClientMetrics_CloudAppSyncStats_Notification.files_uploaded)
}

// optional uint32 files_downloaded = 6;
inline bool CClientMetrics_CloudAppSyncStats_Notification::_internal_has_files_downloaded() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CClientMetrics_CloudAppSyncStats_Notification::has_files_downloaded() const {
  return _internal_has_files_downloaded();
}
inline void CClientMetrics_CloudAppSyncStats_Notification::clear_files_downloaded() {
  files_downloaded_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CClientMetrics_CloudAppSyncStats_Notification::_internal_files_downloaded() const {
  return files_downloaded_;
}
inline uint32_t CClientMetrics_CloudAppSyncStats_Notification::files_downloaded() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_CloudAppSyncStats_Notification.files_downloaded)
  return _internal_files_downloaded();
}
inline void CClientMetrics_CloudAppSyncStats_Notification::_internal_set_files_downloaded(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  files_downloaded_ = value;
}
inline void CClientMetrics_CloudAppSyncStats_Notification::set_files_downloaded(uint32_t value) {
  _internal_set_files_downloaded(value);
  // @@protoc_insertion_point(field_set:CClientMetrics_CloudAppSyncStats_Notification.files_downloaded)
}

// optional uint32 files_deleted = 7;
inline bool CClientMetrics_CloudAppSyncStats_Notification::_internal_has_files_deleted() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CClientMetrics_CloudAppSyncStats_Notification::has_files_deleted() const {
  return _internal_has_files_deleted();
}
inline void CClientMetrics_CloudAppSyncStats_Notification::clear_files_deleted() {
  files_deleted_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CClientMetrics_CloudAppSyncStats_Notification::_internal_files_deleted() const {
  return files_deleted_;
}
inline uint32_t CClientMetrics_CloudAppSyncStats_Notification::files_deleted() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_CloudAppSyncStats_Notification.files_deleted)
  return _internal_files_deleted();
}
inline void CClientMetrics_CloudAppSyncStats_Notification::_internal_set_files_deleted(uint32_t value) {
  _has_bits_[0] |= 0x00000040u;
  files_deleted_ = value;
}
inline void CClientMetrics_CloudAppSyncStats_Notification::set_files_deleted(uint32_t value) {
  _internal_set_files_deleted(value);
  // @@protoc_insertion_point(field_set:CClientMetrics_CloudAppSyncStats_Notification.files_deleted)
}

// optional uint64 bytes_uploaded = 8;
inline bool CClientMetrics_CloudAppSyncStats_Notification::_internal_has_bytes_uploaded() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CClientMetrics_CloudAppSyncStats_Notification::has_bytes_uploaded() const {
  return _internal_has_bytes_uploaded();
}
inline void CClientMetrics_CloudAppSyncStats_Notification::clear_bytes_uploaded() {
  bytes_uploaded_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000080u;
}
inline uint64_t CClientMetrics_CloudAppSyncStats_Notification::_internal_bytes_uploaded() const {
  return bytes_uploaded_;
}
inline uint64_t CClientMetrics_CloudAppSyncStats_Notification::bytes_uploaded() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_CloudAppSyncStats_Notification.bytes_uploaded)
  return _internal_bytes_uploaded();
}
inline void CClientMetrics_CloudAppSyncStats_Notification::_internal_set_bytes_uploaded(uint64_t value) {
  _has_bits_[0] |= 0x00000080u;
  bytes_uploaded_ = value;
}
inline void CClientMetrics_CloudAppSyncStats_Notification::set_bytes_uploaded(uint64_t value) {
  _internal_set_bytes_uploaded(value);
  // @@protoc_insertion_point(field_set:CClientMetrics_CloudAppSyncStats_Notification.bytes_uploaded)
}

// optional uint64 bytes_downloaded = 9;
inline bool CClientMetrics_CloudAppSyncStats_Notification::_internal_has_bytes_downloaded() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CClientMetrics_CloudAppSyncStats_Notification::has_bytes_downloaded() const {
  return _internal_has_bytes_downloaded();
}
inline void CClientMetrics_CloudAppSyncStats_Notification::clear_bytes_downloaded() {
  bytes_downloaded_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000100u;
}
inline uint64_t CClientMetrics_CloudAppSyncStats_Notification::_internal_bytes_downloaded() const {
  return bytes_downloaded_;
}
inline uint64_t CClientMetrics_CloudAppSyncStats_Notification::bytes_downloaded() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_CloudAppSyncStats_Notification.bytes_downloaded)
  return _internal_bytes_downloaded();
}
inline void CClientMetrics_CloudAppSyncStats_Notification::_internal_set_bytes_downloaded(uint64_t value) {
  _has_bits_[0] |= 0x00000100u;
  bytes_downloaded_ = value;
}
inline void CClientMetrics_CloudAppSyncStats_Notification::set_bytes_downloaded(uint64_t value) {
  _internal_set_bytes_downloaded(value);
  // @@protoc_insertion_point(field_set:CClientMetrics_CloudAppSyncStats_Notification.bytes_downloaded)
}

// optional uint64 microsec_total = 10;
inline bool CClientMetrics_CloudAppSyncStats_Notification::_internal_has_microsec_total() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CClientMetrics_CloudAppSyncStats_Notification::has_microsec_total() const {
  return _internal_has_microsec_total();
}
inline void CClientMetrics_CloudAppSyncStats_Notification::clear_microsec_total() {
  microsec_total_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000200u;
}
inline uint64_t CClientMetrics_CloudAppSyncStats_Notification::_internal_microsec_total() const {
  return microsec_total_;
}
inline uint64_t CClientMetrics_CloudAppSyncStats_Notification::microsec_total() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_CloudAppSyncStats_Notification.microsec_total)
  return _internal_microsec_total();
}
inline void CClientMetrics_CloudAppSyncStats_Notification::_internal_set_microsec_total(uint64_t value) {
  _has_bits_[0] |= 0x00000200u;
  microsec_total_ = value;
}
inline void CClientMetrics_CloudAppSyncStats_Notification::set_microsec_total(uint64_t value) {
  _internal_set_microsec_total(value);
  // @@protoc_insertion_point(field_set:CClientMetrics_CloudAppSyncStats_Notification.microsec_total)
}

// optional uint64 microsec_init_caches = 11;
inline bool CClientMetrics_CloudAppSyncStats_Notification::_internal_has_microsec_init_caches() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CClientMetrics_CloudAppSyncStats_Notification::has_microsec_init_caches() const {
  return _internal_has_microsec_init_caches();
}
inline void CClientMetrics_CloudAppSyncStats_Notification::clear_microsec_init_caches() {
  microsec_init_caches_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000400u;
}
inline uint64_t CClientMetrics_CloudAppSyncStats_Notification::_internal_microsec_init_caches() const {
  return microsec_init_caches_;
}
inline uint64_t CClientMetrics_CloudAppSyncStats_Notification::microsec_init_caches() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_CloudAppSyncStats_Notification.microsec_init_caches)
  return _internal_microsec_init_caches();
}
inline void CClientMetrics_CloudAppSyncStats_Notification::_internal_set_microsec_init_caches(uint64_t value) {
  _has_bits_[0] |= 0x00000400u;
  microsec_init_caches_ = value;
}
inline void CClientMetrics_CloudAppSyncStats_Notification::set_microsec_init_caches(uint64_t value) {
  _internal_set_microsec_init_caches(value);
  // @@protoc_insertion_point(field_set:CClientMetrics_CloudAppSyncStats_Notification.microsec_init_caches)
}

// optional uint64 microsec_validate_state = 12;
inline bool CClientMetrics_CloudAppSyncStats_Notification::_internal_has_microsec_validate_state() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CClientMetrics_CloudAppSyncStats_Notification::has_microsec_validate_state() const {
  return _internal_has_microsec_validate_state();
}
inline void CClientMetrics_CloudAppSyncStats_Notification::clear_microsec_validate_state() {
  microsec_validate_state_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000800u;
}
inline uint64_t CClientMetrics_CloudAppSyncStats_Notification::_internal_microsec_validate_state() const {
  return microsec_validate_state_;
}
inline uint64_t CClientMetrics_CloudAppSyncStats_Notification::microsec_validate_state() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_CloudAppSyncStats_Notification.microsec_validate_state)
  return _internal_microsec_validate_state();
}
inline void CClientMetrics_CloudAppSyncStats_Notification::_internal_set_microsec_validate_state(uint64_t value) {
  _has_bits_[0] |= 0x00000800u;
  microsec_validate_state_ = value;
}
inline void CClientMetrics_CloudAppSyncStats_Notification::set_microsec_validate_state(uint64_t value) {
  _internal_set_microsec_validate_state(value);
  // @@protoc_insertion_point(field_set:CClientMetrics_CloudAppSyncStats_Notification.microsec_validate_state)
}

// optional uint64 microsec_ac_launch = 13;
inline bool CClientMetrics_CloudAppSyncStats_Notification::_internal_has_microsec_ac_launch() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CClientMetrics_CloudAppSyncStats_Notification::has_microsec_ac_launch() const {
  return _internal_has_microsec_ac_launch();
}
inline void CClientMetrics_CloudAppSyncStats_Notification::clear_microsec_ac_launch() {
  microsec_ac_launch_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00001000u;
}
inline uint64_t CClientMetrics_CloudAppSyncStats_Notification::_internal_microsec_ac_launch() const {
  return microsec_ac_launch_;
}
inline uint64_t CClientMetrics_CloudAppSyncStats_Notification::microsec_ac_launch() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_CloudAppSyncStats_Notification.microsec_ac_launch)
  return _internal_microsec_ac_launch();
}
inline void CClientMetrics_CloudAppSyncStats_Notification::_internal_set_microsec_ac_launch(uint64_t value) {
  _has_bits_[0] |= 0x00001000u;
  microsec_ac_launch_ = value;
}
inline void CClientMetrics_CloudAppSyncStats_Notification::set_microsec_ac_launch(uint64_t value) {
  _internal_set_microsec_ac_launch(value);
  // @@protoc_insertion_point(field_set:CClientMetrics_CloudAppSyncStats_Notification.microsec_ac_launch)
}

// optional uint64 microsec_ac_prep_user_files = 14;
inline bool CClientMetrics_CloudAppSyncStats_Notification::_internal_has_microsec_ac_prep_user_files() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CClientMetrics_CloudAppSyncStats_Notification::has_microsec_ac_prep_user_files() const {
  return _internal_has_microsec_ac_prep_user_files();
}
inline void CClientMetrics_CloudAppSyncStats_Notification::clear_microsec_ac_prep_user_files() {
  microsec_ac_prep_user_files_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00002000u;
}
inline uint64_t CClientMetrics_CloudAppSyncStats_Notification::_internal_microsec_ac_prep_user_files() const {
  return microsec_ac_prep_user_files_;
}
inline uint64_t CClientMetrics_CloudAppSyncStats_Notification::microsec_ac_prep_user_files() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_CloudAppSyncStats_Notification.microsec_ac_prep_user_files)
  return _internal_microsec_ac_prep_user_files();
}
inline void CClientMetrics_CloudAppSyncStats_Notification::_internal_set_microsec_ac_prep_user_files(uint64_t value) {
  _has_bits_[0] |= 0x00002000u;
  microsec_ac_prep_user_files_ = value;
}
inline void CClientMetrics_CloudAppSyncStats_Notification::set_microsec_ac_prep_user_files(uint64_t value) {
  _internal_set_microsec_ac_prep_user_files(value);
  // @@protoc_insertion_point(field_set:CClientMetrics_CloudAppSyncStats_Notification.microsec_ac_prep_user_files)
}

// optional uint64 microsec_ac_exit = 15;
inline bool CClientMetrics_CloudAppSyncStats_Notification::_internal_has_microsec_ac_exit() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CClientMetrics_CloudAppSyncStats_Notification::has_microsec_ac_exit() const {
  return _internal_has_microsec_ac_exit();
}
inline void CClientMetrics_CloudAppSyncStats_Notification::clear_microsec_ac_exit() {
  microsec_ac_exit_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00004000u;
}
inline uint64_t CClientMetrics_CloudAppSyncStats_Notification::_internal_microsec_ac_exit() const {
  return microsec_ac_exit_;
}
inline uint64_t CClientMetrics_CloudAppSyncStats_Notification::microsec_ac_exit() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_CloudAppSyncStats_Notification.microsec_ac_exit)
  return _internal_microsec_ac_exit();
}
inline void CClientMetrics_CloudAppSyncStats_Notification::_internal_set_microsec_ac_exit(uint64_t value) {
  _has_bits_[0] |= 0x00004000u;
  microsec_ac_exit_ = value;
}
inline void CClientMetrics_CloudAppSyncStats_Notification::set_microsec_ac_exit(uint64_t value) {
  _internal_set_microsec_ac_exit(value);
  // @@protoc_insertion_point(field_set:CClientMetrics_CloudAppSyncStats_Notification.microsec_ac_exit)
}

// optional uint64 microsec_build_sync_list = 16;
inline bool CClientMetrics_CloudAppSyncStats_Notification::_internal_has_microsec_build_sync_list() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CClientMetrics_CloudAppSyncStats_Notification::has_microsec_build_sync_list() const {
  return _internal_has_microsec_build_sync_list();
}
inline void CClientMetrics_CloudAppSyncStats_Notification::clear_microsec_build_sync_list() {
  microsec_build_sync_list_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00008000u;
}
inline uint64_t CClientMetrics_CloudAppSyncStats_Notification::_internal_microsec_build_sync_list() const {
  return microsec_build_sync_list_;
}
inline uint64_t CClientMetrics_CloudAppSyncStats_Notification::microsec_build_sync_list() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_CloudAppSyncStats_Notification.microsec_build_sync_list)
  return _internal_microsec_build_sync_list();
}
inline void CClientMetrics_CloudAppSyncStats_Notification::_internal_set_microsec_build_sync_list(uint64_t value) {
  _has_bits_[0] |= 0x00008000u;
  microsec_build_sync_list_ = value;
}
inline void CClientMetrics_CloudAppSyncStats_Notification::set_microsec_build_sync_list(uint64_t value) {
  _internal_set_microsec_build_sync_list(value);
  // @@protoc_insertion_point(field_set:CClientMetrics_CloudAppSyncStats_Notification.microsec_build_sync_list)
}

// optional uint64 microsec_delete_files = 17;
inline bool CClientMetrics_CloudAppSyncStats_Notification::_internal_has_microsec_delete_files() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CClientMetrics_CloudAppSyncStats_Notification::has_microsec_delete_files() const {
  return _internal_has_microsec_delete_files();
}
inline void CClientMetrics_CloudAppSyncStats_Notification::clear_microsec_delete_files() {
  microsec_delete_files_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00010000u;
}
inline uint64_t CClientMetrics_CloudAppSyncStats_Notification::_internal_microsec_delete_files() const {
  return microsec_delete_files_;
}
inline uint64_t CClientMetrics_CloudAppSyncStats_Notification::microsec_delete_files() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_CloudAppSyncStats_Notification.microsec_delete_files)
  return _internal_microsec_delete_files();
}
inline void CClientMetrics_CloudAppSyncStats_Notification::_internal_set_microsec_delete_files(uint64_t value) {
  _has_bits_[0] |= 0x00010000u;
  microsec_delete_files_ = value;
}
inline void CClientMetrics_CloudAppSyncStats_Notification::set_microsec_delete_files(uint64_t value) {
  _internal_set_microsec_delete_files(value);
  // @@protoc_insertion_point(field_set:CClientMetrics_CloudAppSyncStats_Notification.microsec_delete_files)
}

// optional uint64 microsec_download_files = 18;
inline bool CClientMetrics_CloudAppSyncStats_Notification::_internal_has_microsec_download_files() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CClientMetrics_CloudAppSyncStats_Notification::has_microsec_download_files() const {
  return _internal_has_microsec_download_files();
}
inline void CClientMetrics_CloudAppSyncStats_Notification::clear_microsec_download_files() {
  microsec_download_files_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00020000u;
}
inline uint64_t CClientMetrics_CloudAppSyncStats_Notification::_internal_microsec_download_files() const {
  return microsec_download_files_;
}
inline uint64_t CClientMetrics_CloudAppSyncStats_Notification::microsec_download_files() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_CloudAppSyncStats_Notification.microsec_download_files)
  return _internal_microsec_download_files();
}
inline void CClientMetrics_CloudAppSyncStats_Notification::_internal_set_microsec_download_files(uint64_t value) {
  _has_bits_[0] |= 0x00020000u;
  microsec_download_files_ = value;
}
inline void CClientMetrics_CloudAppSyncStats_Notification::set_microsec_download_files(uint64_t value) {
  _internal_set_microsec_download_files(value);
  // @@protoc_insertion_point(field_set:CClientMetrics_CloudAppSyncStats_Notification.microsec_download_files)
}

// optional uint64 microsec_upload_files = 19;
inline bool CClientMetrics_CloudAppSyncStats_Notification::_internal_has_microsec_upload_files() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CClientMetrics_CloudAppSyncStats_Notification::has_microsec_upload_files() const {
  return _internal_has_microsec_upload_files();
}
inline void CClientMetrics_CloudAppSyncStats_Notification::clear_microsec_upload_files() {
  microsec_upload_files_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00040000u;
}
inline uint64_t CClientMetrics_CloudAppSyncStats_Notification::_internal_microsec_upload_files() const {
  return microsec_upload_files_;
}
inline uint64_t CClientMetrics_CloudAppSyncStats_Notification::microsec_upload_files() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_CloudAppSyncStats_Notification.microsec_upload_files)
  return _internal_microsec_upload_files();
}
inline void CClientMetrics_CloudAppSyncStats_Notification::_internal_set_microsec_upload_files(uint64_t value) {
  _has_bits_[0] |= 0x00040000u;
  microsec_upload_files_ = value;
}
inline void CClientMetrics_CloudAppSyncStats_Notification::set_microsec_upload_files(uint64_t value) {
  _internal_set_microsec_upload_files(value);
  // @@protoc_insertion_point(field_set:CClientMetrics_CloudAppSyncStats_Notification.microsec_upload_files)
}

// optional uint32 hardware_type = 20;
inline bool CClientMetrics_CloudAppSyncStats_Notification::_internal_has_hardware_type() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool CClientMetrics_CloudAppSyncStats_Notification::has_hardware_type() const {
  return _internal_has_hardware_type();
}
inline void CClientMetrics_CloudAppSyncStats_Notification::clear_hardware_type() {
  hardware_type_ = 0u;
  _has_bits_[0] &= ~0x00080000u;
}
inline uint32_t CClientMetrics_CloudAppSyncStats_Notification::_internal_hardware_type() const {
  return hardware_type_;
}
inline uint32_t CClientMetrics_CloudAppSyncStats_Notification::hardware_type() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_CloudAppSyncStats_Notification.hardware_type)
  return _internal_hardware_type();
}
inline void CClientMetrics_CloudAppSyncStats_Notification::_internal_set_hardware_type(uint32_t value) {
  _has_bits_[0] |= 0x00080000u;
  hardware_type_ = value;
}
inline void CClientMetrics_CloudAppSyncStats_Notification::set_hardware_type(uint32_t value) {
  _internal_set_hardware_type(value);
  // @@protoc_insertion_point(field_set:CClientMetrics_CloudAppSyncStats_Notification.hardware_type)
}

// optional uint32 files_managed = 21;
inline bool CClientMetrics_CloudAppSyncStats_Notification::_internal_has_files_managed() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool CClientMetrics_CloudAppSyncStats_Notification::has_files_managed() const {
  return _internal_has_files_managed();
}
inline void CClientMetrics_CloudAppSyncStats_Notification::clear_files_managed() {
  files_managed_ = 0u;
  _has_bits_[0] &= ~0x00100000u;
}
inline uint32_t CClientMetrics_CloudAppSyncStats_Notification::_internal_files_managed() const {
  return files_managed_;
}
inline uint32_t CClientMetrics_CloudAppSyncStats_Notification::files_managed() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_CloudAppSyncStats_Notification.files_managed)
  return _internal_files_managed();
}
inline void CClientMetrics_CloudAppSyncStats_Notification::_internal_set_files_managed(uint32_t value) {
  _has_bits_[0] |= 0x00100000u;
  files_managed_ = value;
}
inline void CClientMetrics_CloudAppSyncStats_Notification::set_files_managed(uint32_t value) {
  _internal_set_files_managed(value);
  // @@protoc_insertion_point(field_set:CClientMetrics_CloudAppSyncStats_Notification.files_managed)
}

// -------------------------------------------------------------------

// CClientMetrics_ContentDownloadResponse_Counts_Notification

// optional uint32 cell_id = 1;
inline bool CClientMetrics_ContentDownloadResponse_Counts_Notification::_internal_has_cell_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CClientMetrics_ContentDownloadResponse_Counts_Notification::has_cell_id() const {
  return _internal_has_cell_id();
}
inline void CClientMetrics_ContentDownloadResponse_Counts_Notification::clear_cell_id() {
  cell_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CClientMetrics_ContentDownloadResponse_Counts_Notification::_internal_cell_id() const {
  return cell_id_;
}
inline uint32_t CClientMetrics_ContentDownloadResponse_Counts_Notification::cell_id() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_ContentDownloadResponse_Counts_Notification.cell_id)
  return _internal_cell_id();
}
inline void CClientMetrics_ContentDownloadResponse_Counts_Notification::_internal_set_cell_id(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  cell_id_ = value;
}
inline void CClientMetrics_ContentDownloadResponse_Counts_Notification::set_cell_id(uint32_t value) {
  _internal_set_cell_id(value);
  // @@protoc_insertion_point(field_set:CClientMetrics_ContentDownloadResponse_Counts_Notification.cell_id)
}

// optional .CClientMetrics_ContentDownloadResponse_Hosts data = 2;
inline bool CClientMetrics_ContentDownloadResponse_Counts_Notification::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || data_ != nullptr);
  return value;
}
inline bool CClientMetrics_ContentDownloadResponse_Counts_Notification::has_data() const {
  return _internal_has_data();
}
inline const ::CClientMetrics_ContentDownloadResponse_Hosts& CClientMetrics_ContentDownloadResponse_Counts_Notification::_internal_data() const {
  const ::CClientMetrics_ContentDownloadResponse_Hosts* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::CClientMetrics_ContentDownloadResponse_Hosts&>(
      ::_CClientMetrics_ContentDownloadResponse_Hosts_default_instance_);
}
inline const ::CClientMetrics_ContentDownloadResponse_Hosts& CClientMetrics_ContentDownloadResponse_Counts_Notification::data() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_ContentDownloadResponse_Counts_Notification.data)
  return _internal_data();
}
inline void CClientMetrics_ContentDownloadResponse_Counts_Notification::unsafe_arena_set_allocated_data(
    ::CClientMetrics_ContentDownloadResponse_Hosts* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CClientMetrics_ContentDownloadResponse_Counts_Notification.data)
}
inline ::CClientMetrics_ContentDownloadResponse_Hosts* CClientMetrics_ContentDownloadResponse_Counts_Notification::release_data() {
  _has_bits_[0] &= ~0x00000001u;
  ::CClientMetrics_ContentDownloadResponse_Hosts* temp = data_;
  data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CClientMetrics_ContentDownloadResponse_Hosts* CClientMetrics_ContentDownloadResponse_Counts_Notification::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:CClientMetrics_ContentDownloadResponse_Counts_Notification.data)
  _has_bits_[0] &= ~0x00000001u;
  ::CClientMetrics_ContentDownloadResponse_Hosts* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::CClientMetrics_ContentDownloadResponse_Hosts* CClientMetrics_ContentDownloadResponse_Counts_Notification::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::CClientMetrics_ContentDownloadResponse_Hosts>(GetArenaForAllocation());
    data_ = p;
  }
  return data_;
}
inline ::CClientMetrics_ContentDownloadResponse_Hosts* CClientMetrics_ContentDownloadResponse_Counts_Notification::mutable_data() {
  ::CClientMetrics_ContentDownloadResponse_Hosts* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:CClientMetrics_ContentDownloadResponse_Counts_Notification.data)
  return _msg;
}
inline void CClientMetrics_ContentDownloadResponse_Counts_Notification::set_allocated_data(::CClientMetrics_ContentDownloadResponse_Hosts* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data));
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:CClientMetrics_ContentDownloadResponse_Counts_Notification.data)
}

// -------------------------------------------------------------------

// CClientMetrics_ReportClientArgs_Notification

// repeated string client_args = 1;
inline int CClientMetrics_ReportClientArgs_Notification::_internal_client_args_size() const {
  return client_args_.size();
}
inline int CClientMetrics_ReportClientArgs_Notification::client_args_size() const {
  return _internal_client_args_size();
}
inline void CClientMetrics_ReportClientArgs_Notification::clear_client_args() {
  client_args_.Clear();
}
inline std::string* CClientMetrics_ReportClientArgs_Notification::add_client_args() {
  std::string* _s = _internal_add_client_args();
  // @@protoc_insertion_point(field_add_mutable:CClientMetrics_ReportClientArgs_Notification.client_args)
  return _s;
}
inline const std::string& CClientMetrics_ReportClientArgs_Notification::_internal_client_args(int index) const {
  return client_args_.Get(index);
}
inline const std::string& CClientMetrics_ReportClientArgs_Notification::client_args(int index) const {
  // @@protoc_insertion_point(field_get:CClientMetrics_ReportClientArgs_Notification.client_args)
  return _internal_client_args(index);
}
inline std::string* CClientMetrics_ReportClientArgs_Notification::mutable_client_args(int index) {
  // @@protoc_insertion_point(field_mutable:CClientMetrics_ReportClientArgs_Notification.client_args)
  return client_args_.Mutable(index);
}
inline void CClientMetrics_ReportClientArgs_Notification::set_client_args(int index, const std::string& value) {
  client_args_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:CClientMetrics_ReportClientArgs_Notification.client_args)
}
inline void CClientMetrics_ReportClientArgs_Notification::set_client_args(int index, std::string&& value) {
  client_args_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:CClientMetrics_ReportClientArgs_Notification.client_args)
}
inline void CClientMetrics_ReportClientArgs_Notification::set_client_args(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  client_args_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CClientMetrics_ReportClientArgs_Notification.client_args)
}
inline void CClientMetrics_ReportClientArgs_Notification::set_client_args(int index, const char* value, size_t size) {
  client_args_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CClientMetrics_ReportClientArgs_Notification.client_args)
}
inline std::string* CClientMetrics_ReportClientArgs_Notification::_internal_add_client_args() {
  return client_args_.Add();
}
inline void CClientMetrics_ReportClientArgs_Notification::add_client_args(const std::string& value) {
  client_args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CClientMetrics_ReportClientArgs_Notification.client_args)
}
inline void CClientMetrics_ReportClientArgs_Notification::add_client_args(std::string&& value) {
  client_args_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CClientMetrics_ReportClientArgs_Notification.client_args)
}
inline void CClientMetrics_ReportClientArgs_Notification::add_client_args(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  client_args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CClientMetrics_ReportClientArgs_Notification.client_args)
}
inline void CClientMetrics_ReportClientArgs_Notification::add_client_args(const char* value, size_t size) {
  client_args_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CClientMetrics_ReportClientArgs_Notification.client_args)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CClientMetrics_ReportClientArgs_Notification::client_args() const {
  // @@protoc_insertion_point(field_list:CClientMetrics_ReportClientArgs_Notification.client_args)
  return client_args_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CClientMetrics_ReportClientArgs_Notification::mutable_client_args() {
  // @@protoc_insertion_point(field_mutable_list:CClientMetrics_ReportClientArgs_Notification.client_args)
  return &client_args_;
}

// optional bool gpu_webview_regkey_disabled = 2;
inline bool CClientMetrics_ReportClientArgs_Notification::_internal_has_gpu_webview_regkey_disabled() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CClientMetrics_ReportClientArgs_Notification::has_gpu_webview_regkey_disabled() const {
  return _internal_has_gpu_webview_regkey_disabled();
}
inline void CClientMetrics_ReportClientArgs_Notification::clear_gpu_webview_regkey_disabled() {
  gpu_webview_regkey_disabled_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CClientMetrics_ReportClientArgs_Notification::_internal_gpu_webview_regkey_disabled() const {
  return gpu_webview_regkey_disabled_;
}
inline bool CClientMetrics_ReportClientArgs_Notification::gpu_webview_regkey_disabled() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_ReportClientArgs_Notification.gpu_webview_regkey_disabled)
  return _internal_gpu_webview_regkey_disabled();
}
inline void CClientMetrics_ReportClientArgs_Notification::_internal_set_gpu_webview_regkey_disabled(bool value) {
  _has_bits_[0] |= 0x00000001u;
  gpu_webview_regkey_disabled_ = value;
}
inline void CClientMetrics_ReportClientArgs_Notification::set_gpu_webview_regkey_disabled(bool value) {
  _internal_set_gpu_webview_regkey_disabled(value);
  // @@protoc_insertion_point(field_set:CClientMetrics_ReportClientArgs_Notification.gpu_webview_regkey_disabled)
}

// optional bool suppress_gpu_chrome = 3;
inline bool CClientMetrics_ReportClientArgs_Notification::_internal_has_suppress_gpu_chrome() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CClientMetrics_ReportClientArgs_Notification::has_suppress_gpu_chrome() const {
  return _internal_has_suppress_gpu_chrome();
}
inline void CClientMetrics_ReportClientArgs_Notification::clear_suppress_gpu_chrome() {
  suppress_gpu_chrome_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CClientMetrics_ReportClientArgs_Notification::_internal_suppress_gpu_chrome() const {
  return suppress_gpu_chrome_;
}
inline bool CClientMetrics_ReportClientArgs_Notification::suppress_gpu_chrome() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_ReportClientArgs_Notification.suppress_gpu_chrome)
  return _internal_suppress_gpu_chrome();
}
inline void CClientMetrics_ReportClientArgs_Notification::_internal_set_suppress_gpu_chrome(bool value) {
  _has_bits_[0] |= 0x00000002u;
  suppress_gpu_chrome_ = value;
}
inline void CClientMetrics_ReportClientArgs_Notification::set_suppress_gpu_chrome(bool value) {
  _internal_set_suppress_gpu_chrome(value);
  // @@protoc_insertion_point(field_set:CClientMetrics_ReportClientArgs_Notification.suppress_gpu_chrome)
}

// optional bool browser_not_supported = 4;
inline bool CClientMetrics_ReportClientArgs_Notification::_internal_has_browser_not_supported() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CClientMetrics_ReportClientArgs_Notification::has_browser_not_supported() const {
  return _internal_has_browser_not_supported();
}
inline void CClientMetrics_ReportClientArgs_Notification::clear_browser_not_supported() {
  browser_not_supported_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CClientMetrics_ReportClientArgs_Notification::_internal_browser_not_supported() const {
  return browser_not_supported_;
}
inline bool CClientMetrics_ReportClientArgs_Notification::browser_not_supported() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_ReportClientArgs_Notification.browser_not_supported)
  return _internal_browser_not_supported();
}
inline void CClientMetrics_ReportClientArgs_Notification::_internal_set_browser_not_supported(bool value) {
  _has_bits_[0] |= 0x00000004u;
  browser_not_supported_ = value;
}
inline void CClientMetrics_ReportClientArgs_Notification::set_browser_not_supported(bool value) {
  _internal_set_browser_not_supported(value);
  // @@protoc_insertion_point(field_set:CClientMetrics_ReportClientArgs_Notification.browser_not_supported)
}

// optional bool hw_accel_video_regkey_disabled = 5;
inline bool CClientMetrics_ReportClientArgs_Notification::_internal_has_hw_accel_video_regkey_disabled() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CClientMetrics_ReportClientArgs_Notification::has_hw_accel_video_regkey_disabled() const {
  return _internal_has_hw_accel_video_regkey_disabled();
}
inline void CClientMetrics_ReportClientArgs_Notification::clear_hw_accel_video_regkey_disabled() {
  hw_accel_video_regkey_disabled_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CClientMetrics_ReportClientArgs_Notification::_internal_hw_accel_video_regkey_disabled() const {
  return hw_accel_video_regkey_disabled_;
}
inline bool CClientMetrics_ReportClientArgs_Notification::hw_accel_video_regkey_disabled() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_ReportClientArgs_Notification.hw_accel_video_regkey_disabled)
  return _internal_hw_accel_video_regkey_disabled();
}
inline void CClientMetrics_ReportClientArgs_Notification::_internal_set_hw_accel_video_regkey_disabled(bool value) {
  _has_bits_[0] |= 0x00000008u;
  hw_accel_video_regkey_disabled_ = value;
}
inline void CClientMetrics_ReportClientArgs_Notification::set_hw_accel_video_regkey_disabled(bool value) {
  _internal_set_hw_accel_video_regkey_disabled(value);
  // @@protoc_insertion_point(field_set:CClientMetrics_ReportClientArgs_Notification.hw_accel_video_regkey_disabled)
}

// optional bool mini_mode_enabled = 6;
inline bool CClientMetrics_ReportClientArgs_Notification::_internal_has_mini_mode_enabled() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CClientMetrics_ReportClientArgs_Notification::has_mini_mode_enabled() const {
  return _internal_has_mini_mode_enabled();
}
inline void CClientMetrics_ReportClientArgs_Notification::clear_mini_mode_enabled() {
  mini_mode_enabled_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CClientMetrics_ReportClientArgs_Notification::_internal_mini_mode_enabled() const {
  return mini_mode_enabled_;
}
inline bool CClientMetrics_ReportClientArgs_Notification::mini_mode_enabled() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_ReportClientArgs_Notification.mini_mode_enabled)
  return _internal_mini_mode_enabled();
}
inline void CClientMetrics_ReportClientArgs_Notification::_internal_set_mini_mode_enabled(bool value) {
  _has_bits_[0] |= 0x00000010u;
  mini_mode_enabled_ = value;
}
inline void CClientMetrics_ReportClientArgs_Notification::set_mini_mode_enabled(bool value) {
  _internal_set_mini_mode_enabled(value);
  // @@protoc_insertion_point(field_set:CClientMetrics_ReportClientArgs_Notification.mini_mode_enabled)
}

// optional bool fps_counter_enabled = 7;
inline bool CClientMetrics_ReportClientArgs_Notification::_internal_has_fps_counter_enabled() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CClientMetrics_ReportClientArgs_Notification::has_fps_counter_enabled() const {
  return _internal_has_fps_counter_enabled();
}
inline void CClientMetrics_ReportClientArgs_Notification::clear_fps_counter_enabled() {
  fps_counter_enabled_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CClientMetrics_ReportClientArgs_Notification::_internal_fps_counter_enabled() const {
  return fps_counter_enabled_;
}
inline bool CClientMetrics_ReportClientArgs_Notification::fps_counter_enabled() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_ReportClientArgs_Notification.fps_counter_enabled)
  return _internal_fps_counter_enabled();
}
inline void CClientMetrics_ReportClientArgs_Notification::_internal_set_fps_counter_enabled(bool value) {
  _has_bits_[0] |= 0x00000020u;
  fps_counter_enabled_ = value;
}
inline void CClientMetrics_ReportClientArgs_Notification::set_fps_counter_enabled(bool value) {
  _internal_set_fps_counter_enabled(value);
  // @@protoc_insertion_point(field_set:CClientMetrics_ReportClientArgs_Notification.fps_counter_enabled)
}

// optional bool library_low_bandwidth_mode_enabled = 8;
inline bool CClientMetrics_ReportClientArgs_Notification::_internal_has_library_low_bandwidth_mode_enabled() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CClientMetrics_ReportClientArgs_Notification::has_library_low_bandwidth_mode_enabled() const {
  return _internal_has_library_low_bandwidth_mode_enabled();
}
inline void CClientMetrics_ReportClientArgs_Notification::clear_library_low_bandwidth_mode_enabled() {
  library_low_bandwidth_mode_enabled_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool CClientMetrics_ReportClientArgs_Notification::_internal_library_low_bandwidth_mode_enabled() const {
  return library_low_bandwidth_mode_enabled_;
}
inline bool CClientMetrics_ReportClientArgs_Notification::library_low_bandwidth_mode_enabled() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_ReportClientArgs_Notification.library_low_bandwidth_mode_enabled)
  return _internal_library_low_bandwidth_mode_enabled();
}
inline void CClientMetrics_ReportClientArgs_Notification::_internal_set_library_low_bandwidth_mode_enabled(bool value) {
  _has_bits_[0] |= 0x00000040u;
  library_low_bandwidth_mode_enabled_ = value;
}
inline void CClientMetrics_ReportClientArgs_Notification::set_library_low_bandwidth_mode_enabled(bool value) {
  _internal_set_library_low_bandwidth_mode_enabled(value);
  // @@protoc_insertion_point(field_set:CClientMetrics_ReportClientArgs_Notification.library_low_bandwidth_mode_enabled)
}

// optional bool library_low_perf_mode_enabled = 9;
inline bool CClientMetrics_ReportClientArgs_Notification::_internal_has_library_low_perf_mode_enabled() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CClientMetrics_ReportClientArgs_Notification::has_library_low_perf_mode_enabled() const {
  return _internal_has_library_low_perf_mode_enabled();
}
inline void CClientMetrics_ReportClientArgs_Notification::clear_library_low_perf_mode_enabled() {
  library_low_perf_mode_enabled_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CClientMetrics_ReportClientArgs_Notification::_internal_library_low_perf_mode_enabled() const {
  return library_low_perf_mode_enabled_;
}
inline bool CClientMetrics_ReportClientArgs_Notification::library_low_perf_mode_enabled() const {
  // @@protoc_insertion_point(field_get:CClientMetrics_ReportClientArgs_Notification.library_low_perf_mode_enabled)
  return _internal_library_low_perf_mode_enabled();
}
inline void CClientMetrics_ReportClientArgs_Notification::_internal_set_library_low_perf_mode_enabled(bool value) {
  _has_bits_[0] |= 0x00000080u;
  library_low_perf_mode_enabled_ = value;
}
inline void CClientMetrics_ReportClientArgs_Notification::set_library_low_perf_mode_enabled(bool value) {
  _internal_set_library_low_perf_mode_enabled(value);
  // @@protoc_insertion_point(field_set:CClientMetrics_ReportClientArgs_Notification.library_low_perf_mode_enabled)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ESteamPipeWorkType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ESteamPipeWorkType>() {
  return ::ESteamPipeWorkType_descriptor();
}
template <> struct is_proto_enum< ::ESteamPipeOperationType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ESteamPipeOperationType>() {
  return ::ESteamPipeOperationType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_steammessages_5fclientmetrics_2esteamclient_2eproto
