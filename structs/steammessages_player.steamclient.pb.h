// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_player.steamclient.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_steammessages_5fplayer_2esteamclient_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_steammessages_5fplayer_2esteamclient_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "steammessages_base.pb.h"
#include "steammessages_unified_base.steamclient.pb.h"
#include "enums.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_5fplayer_2esteamclient_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_5fplayer_2esteamclient_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[135]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fplayer_2esteamclient_2eproto;
class CPlayer_AcceptSSA_Request;
struct CPlayer_AcceptSSA_RequestDefaultTypeInternal;
extern CPlayer_AcceptSSA_RequestDefaultTypeInternal _CPlayer_AcceptSSA_Request_default_instance_;
class CPlayer_AcceptSSA_Response;
struct CPlayer_AcceptSSA_ResponseDefaultTypeInternal;
extern CPlayer_AcceptSSA_ResponseDefaultTypeInternal _CPlayer_AcceptSSA_Response_default_instance_;
class CPlayer_AddFriend_Request;
struct CPlayer_AddFriend_RequestDefaultTypeInternal;
extern CPlayer_AddFriend_RequestDefaultTypeInternal _CPlayer_AddFriend_Request_default_instance_;
class CPlayer_AddFriend_Response;
struct CPlayer_AddFriend_ResponseDefaultTypeInternal;
extern CPlayer_AddFriend_ResponseDefaultTypeInternal _CPlayer_AddFriend_Response_default_instance_;
class CPlayer_CommunityPreferences;
struct CPlayer_CommunityPreferencesDefaultTypeInternal;
extern CPlayer_CommunityPreferencesDefaultTypeInternal _CPlayer_CommunityPreferences_default_instance_;
class CPlayer_CommunityPreferencesChanged_Notification;
struct CPlayer_CommunityPreferencesChanged_NotificationDefaultTypeInternal;
extern CPlayer_CommunityPreferencesChanged_NotificationDefaultTypeInternal _CPlayer_CommunityPreferencesChanged_Notification_default_instance_;
class CPlayer_DeletePostedStatus_Request;
struct CPlayer_DeletePostedStatus_RequestDefaultTypeInternal;
extern CPlayer_DeletePostedStatus_RequestDefaultTypeInternal _CPlayer_DeletePostedStatus_Request_default_instance_;
class CPlayer_DeletePostedStatus_Response;
struct CPlayer_DeletePostedStatus_ResponseDefaultTypeInternal;
extern CPlayer_DeletePostedStatus_ResponseDefaultTypeInternal _CPlayer_DeletePostedStatus_Response_default_instance_;
class CPlayer_FriendEquippedProfileItemsChanged_Notification;
struct CPlayer_FriendEquippedProfileItemsChanged_NotificationDefaultTypeInternal;
extern CPlayer_FriendEquippedProfileItemsChanged_NotificationDefaultTypeInternal _CPlayer_FriendEquippedProfileItemsChanged_Notification_default_instance_;
class CPlayer_FriendNicknameChanged_Notification;
struct CPlayer_FriendNicknameChanged_NotificationDefaultTypeInternal;
extern CPlayer_FriendNicknameChanged_NotificationDefaultTypeInternal _CPlayer_FriendNicknameChanged_Notification_default_instance_;
class CPlayer_GetAchievementsProgress_Request;
struct CPlayer_GetAchievementsProgress_RequestDefaultTypeInternal;
extern CPlayer_GetAchievementsProgress_RequestDefaultTypeInternal _CPlayer_GetAchievementsProgress_Request_default_instance_;
class CPlayer_GetAchievementsProgress_Response;
struct CPlayer_GetAchievementsProgress_ResponseDefaultTypeInternal;
extern CPlayer_GetAchievementsProgress_ResponseDefaultTypeInternal _CPlayer_GetAchievementsProgress_Response_default_instance_;
class CPlayer_GetAchievementsProgress_Response_AchievementProgress;
struct CPlayer_GetAchievementsProgress_Response_AchievementProgressDefaultTypeInternal;
extern CPlayer_GetAchievementsProgress_Response_AchievementProgressDefaultTypeInternal _CPlayer_GetAchievementsProgress_Response_AchievementProgress_default_instance_;
class CPlayer_GetAnimatedAvatar_Request;
struct CPlayer_GetAnimatedAvatar_RequestDefaultTypeInternal;
extern CPlayer_GetAnimatedAvatar_RequestDefaultTypeInternal _CPlayer_GetAnimatedAvatar_Request_default_instance_;
class CPlayer_GetAnimatedAvatar_Response;
struct CPlayer_GetAnimatedAvatar_ResponseDefaultTypeInternal;
extern CPlayer_GetAnimatedAvatar_ResponseDefaultTypeInternal _CPlayer_GetAnimatedAvatar_Response_default_instance_;
class CPlayer_GetAvatarFrame_Request;
struct CPlayer_GetAvatarFrame_RequestDefaultTypeInternal;
extern CPlayer_GetAvatarFrame_RequestDefaultTypeInternal _CPlayer_GetAvatarFrame_Request_default_instance_;
class CPlayer_GetAvatarFrame_Response;
struct CPlayer_GetAvatarFrame_ResponseDefaultTypeInternal;
extern CPlayer_GetAvatarFrame_ResponseDefaultTypeInternal _CPlayer_GetAvatarFrame_Response_default_instance_;
class CPlayer_GetCommunityPreferences_Request;
struct CPlayer_GetCommunityPreferences_RequestDefaultTypeInternal;
extern CPlayer_GetCommunityPreferences_RequestDefaultTypeInternal _CPlayer_GetCommunityPreferences_Request_default_instance_;
class CPlayer_GetCommunityPreferences_Response;
struct CPlayer_GetCommunityPreferences_ResponseDefaultTypeInternal;
extern CPlayer_GetCommunityPreferences_ResponseDefaultTypeInternal _CPlayer_GetCommunityPreferences_Response_default_instance_;
class CPlayer_GetDurationControl_Request;
struct CPlayer_GetDurationControl_RequestDefaultTypeInternal;
extern CPlayer_GetDurationControl_RequestDefaultTypeInternal _CPlayer_GetDurationControl_Request_default_instance_;
class CPlayer_GetDurationControl_Response;
struct CPlayer_GetDurationControl_ResponseDefaultTypeInternal;
extern CPlayer_GetDurationControl_ResponseDefaultTypeInternal _CPlayer_GetDurationControl_Response_default_instance_;
class CPlayer_GetEmoticonList_Request;
struct CPlayer_GetEmoticonList_RequestDefaultTypeInternal;
extern CPlayer_GetEmoticonList_RequestDefaultTypeInternal _CPlayer_GetEmoticonList_Request_default_instance_;
class CPlayer_GetEmoticonList_Response;
struct CPlayer_GetEmoticonList_ResponseDefaultTypeInternal;
extern CPlayer_GetEmoticonList_ResponseDefaultTypeInternal _CPlayer_GetEmoticonList_Response_default_instance_;
class CPlayer_GetEmoticonList_Response_Emoticon;
struct CPlayer_GetEmoticonList_Response_EmoticonDefaultTypeInternal;
extern CPlayer_GetEmoticonList_Response_EmoticonDefaultTypeInternal _CPlayer_GetEmoticonList_Response_Emoticon_default_instance_;
class CPlayer_GetFavoriteBadge_Request;
struct CPlayer_GetFavoriteBadge_RequestDefaultTypeInternal;
extern CPlayer_GetFavoriteBadge_RequestDefaultTypeInternal _CPlayer_GetFavoriteBadge_Request_default_instance_;
class CPlayer_GetFavoriteBadge_Response;
struct CPlayer_GetFavoriteBadge_ResponseDefaultTypeInternal;
extern CPlayer_GetFavoriteBadge_ResponseDefaultTypeInternal _CPlayer_GetFavoriteBadge_Response_default_instance_;
class CPlayer_GetFriendsGameplayInfo_Request;
struct CPlayer_GetFriendsGameplayInfo_RequestDefaultTypeInternal;
extern CPlayer_GetFriendsGameplayInfo_RequestDefaultTypeInternal _CPlayer_GetFriendsGameplayInfo_Request_default_instance_;
class CPlayer_GetFriendsGameplayInfo_Response;
struct CPlayer_GetFriendsGameplayInfo_ResponseDefaultTypeInternal;
extern CPlayer_GetFriendsGameplayInfo_ResponseDefaultTypeInternal _CPlayer_GetFriendsGameplayInfo_Response_default_instance_;
class CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo;
struct CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfoDefaultTypeInternal;
extern CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfoDefaultTypeInternal _CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo_default_instance_;
class CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo;
struct CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfoDefaultTypeInternal;
extern CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfoDefaultTypeInternal _CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo_default_instance_;
class CPlayer_GetGameAchievements_Request;
struct CPlayer_GetGameAchievements_RequestDefaultTypeInternal;
extern CPlayer_GetGameAchievements_RequestDefaultTypeInternal _CPlayer_GetGameAchievements_Request_default_instance_;
class CPlayer_GetGameAchievements_Response;
struct CPlayer_GetGameAchievements_ResponseDefaultTypeInternal;
extern CPlayer_GetGameAchievements_ResponseDefaultTypeInternal _CPlayer_GetGameAchievements_Response_default_instance_;
class CPlayer_GetGameAchievements_Response_Achievement;
struct CPlayer_GetGameAchievements_Response_AchievementDefaultTypeInternal;
extern CPlayer_GetGameAchievements_Response_AchievementDefaultTypeInternal _CPlayer_GetGameAchievements_Response_Achievement_default_instance_;
class CPlayer_GetGameBadgeLevels_Request;
struct CPlayer_GetGameBadgeLevels_RequestDefaultTypeInternal;
extern CPlayer_GetGameBadgeLevels_RequestDefaultTypeInternal _CPlayer_GetGameBadgeLevels_Request_default_instance_;
class CPlayer_GetGameBadgeLevels_Response;
struct CPlayer_GetGameBadgeLevels_ResponseDefaultTypeInternal;
extern CPlayer_GetGameBadgeLevels_ResponseDefaultTypeInternal _CPlayer_GetGameBadgeLevels_Response_default_instance_;
class CPlayer_GetGameBadgeLevels_Response_Badge;
struct CPlayer_GetGameBadgeLevels_Response_BadgeDefaultTypeInternal;
extern CPlayer_GetGameBadgeLevels_Response_BadgeDefaultTypeInternal _CPlayer_GetGameBadgeLevels_Response_Badge_default_instance_;
class CPlayer_GetLastPlayedTimes_Request;
struct CPlayer_GetLastPlayedTimes_RequestDefaultTypeInternal;
extern CPlayer_GetLastPlayedTimes_RequestDefaultTypeInternal _CPlayer_GetLastPlayedTimes_Request_default_instance_;
class CPlayer_GetLastPlayedTimes_Response;
struct CPlayer_GetLastPlayedTimes_ResponseDefaultTypeInternal;
extern CPlayer_GetLastPlayedTimes_ResponseDefaultTypeInternal _CPlayer_GetLastPlayedTimes_Response_default_instance_;
class CPlayer_GetLastPlayedTimes_Response_Game;
struct CPlayer_GetLastPlayedTimes_Response_GameDefaultTypeInternal;
extern CPlayer_GetLastPlayedTimes_Response_GameDefaultTypeInternal _CPlayer_GetLastPlayedTimes_Response_Game_default_instance_;
class CPlayer_GetMiniProfileBackground_Request;
struct CPlayer_GetMiniProfileBackground_RequestDefaultTypeInternal;
extern CPlayer_GetMiniProfileBackground_RequestDefaultTypeInternal _CPlayer_GetMiniProfileBackground_Request_default_instance_;
class CPlayer_GetMiniProfileBackground_Response;
struct CPlayer_GetMiniProfileBackground_ResponseDefaultTypeInternal;
extern CPlayer_GetMiniProfileBackground_ResponseDefaultTypeInternal _CPlayer_GetMiniProfileBackground_Response_default_instance_;
class CPlayer_GetMutualFriendsForIncomingInvites_Request;
struct CPlayer_GetMutualFriendsForIncomingInvites_RequestDefaultTypeInternal;
extern CPlayer_GetMutualFriendsForIncomingInvites_RequestDefaultTypeInternal _CPlayer_GetMutualFriendsForIncomingInvites_Request_default_instance_;
class CPlayer_GetMutualFriendsForIncomingInvites_Response;
struct CPlayer_GetMutualFriendsForIncomingInvites_ResponseDefaultTypeInternal;
extern CPlayer_GetMutualFriendsForIncomingInvites_ResponseDefaultTypeInternal _CPlayer_GetMutualFriendsForIncomingInvites_Response_default_instance_;
class CPlayer_GetNewSteamAnnouncementState_Request;
struct CPlayer_GetNewSteamAnnouncementState_RequestDefaultTypeInternal;
extern CPlayer_GetNewSteamAnnouncementState_RequestDefaultTypeInternal _CPlayer_GetNewSteamAnnouncementState_Request_default_instance_;
class CPlayer_GetNewSteamAnnouncementState_Response;
struct CPlayer_GetNewSteamAnnouncementState_ResponseDefaultTypeInternal;
extern CPlayer_GetNewSteamAnnouncementState_ResponseDefaultTypeInternal _CPlayer_GetNewSteamAnnouncementState_Response_default_instance_;
class CPlayer_GetNicknameList_Request;
struct CPlayer_GetNicknameList_RequestDefaultTypeInternal;
extern CPlayer_GetNicknameList_RequestDefaultTypeInternal _CPlayer_GetNicknameList_Request_default_instance_;
class CPlayer_GetNicknameList_Response;
struct CPlayer_GetNicknameList_ResponseDefaultTypeInternal;
extern CPlayer_GetNicknameList_ResponseDefaultTypeInternal _CPlayer_GetNicknameList_Response_default_instance_;
class CPlayer_GetNicknameList_Response_PlayerNickname;
struct CPlayer_GetNicknameList_Response_PlayerNicknameDefaultTypeInternal;
extern CPlayer_GetNicknameList_Response_PlayerNicknameDefaultTypeInternal _CPlayer_GetNicknameList_Response_PlayerNickname_default_instance_;
class CPlayer_GetOwnedGames_Request;
struct CPlayer_GetOwnedGames_RequestDefaultTypeInternal;
extern CPlayer_GetOwnedGames_RequestDefaultTypeInternal _CPlayer_GetOwnedGames_Request_default_instance_;
class CPlayer_GetOwnedGames_Response;
struct CPlayer_GetOwnedGames_ResponseDefaultTypeInternal;
extern CPlayer_GetOwnedGames_ResponseDefaultTypeInternal _CPlayer_GetOwnedGames_Response_default_instance_;
class CPlayer_GetOwnedGames_Response_Game;
struct CPlayer_GetOwnedGames_Response_GameDefaultTypeInternal;
extern CPlayer_GetOwnedGames_Response_GameDefaultTypeInternal _CPlayer_GetOwnedGames_Response_Game_default_instance_;
class CPlayer_GetPerFriendPreferences_Request;
struct CPlayer_GetPerFriendPreferences_RequestDefaultTypeInternal;
extern CPlayer_GetPerFriendPreferences_RequestDefaultTypeInternal _CPlayer_GetPerFriendPreferences_Request_default_instance_;
class CPlayer_GetPerFriendPreferences_Response;
struct CPlayer_GetPerFriendPreferences_ResponseDefaultTypeInternal;
extern CPlayer_GetPerFriendPreferences_ResponseDefaultTypeInternal _CPlayer_GetPerFriendPreferences_Response_default_instance_;
class CPlayer_GetPlayNext_Request;
struct CPlayer_GetPlayNext_RequestDefaultTypeInternal;
extern CPlayer_GetPlayNext_RequestDefaultTypeInternal _CPlayer_GetPlayNext_Request_default_instance_;
class CPlayer_GetPlayNext_Response;
struct CPlayer_GetPlayNext_ResponseDefaultTypeInternal;
extern CPlayer_GetPlayNext_ResponseDefaultTypeInternal _CPlayer_GetPlayNext_Response_default_instance_;
class CPlayer_GetPostedStatus_Request;
struct CPlayer_GetPostedStatus_RequestDefaultTypeInternal;
extern CPlayer_GetPostedStatus_RequestDefaultTypeInternal _CPlayer_GetPostedStatus_Request_default_instance_;
class CPlayer_GetPostedStatus_Response;
struct CPlayer_GetPostedStatus_ResponseDefaultTypeInternal;
extern CPlayer_GetPostedStatus_ResponseDefaultTypeInternal _CPlayer_GetPostedStatus_Response_default_instance_;
class CPlayer_GetPrivacySettings_Request;
struct CPlayer_GetPrivacySettings_RequestDefaultTypeInternal;
extern CPlayer_GetPrivacySettings_RequestDefaultTypeInternal _CPlayer_GetPrivacySettings_Request_default_instance_;
class CPlayer_GetPrivacySettings_Response;
struct CPlayer_GetPrivacySettings_ResponseDefaultTypeInternal;
extern CPlayer_GetPrivacySettings_ResponseDefaultTypeInternal _CPlayer_GetPrivacySettings_Response_default_instance_;
class CPlayer_GetProfileBackground_Request;
struct CPlayer_GetProfileBackground_RequestDefaultTypeInternal;
extern CPlayer_GetProfileBackground_RequestDefaultTypeInternal _CPlayer_GetProfileBackground_Request_default_instance_;
class CPlayer_GetProfileBackground_Response;
struct CPlayer_GetProfileBackground_ResponseDefaultTypeInternal;
extern CPlayer_GetProfileBackground_ResponseDefaultTypeInternal _CPlayer_GetProfileBackground_Response_default_instance_;
class CPlayer_GetProfileCustomization_Request;
struct CPlayer_GetProfileCustomization_RequestDefaultTypeInternal;
extern CPlayer_GetProfileCustomization_RequestDefaultTypeInternal _CPlayer_GetProfileCustomization_Request_default_instance_;
class CPlayer_GetProfileCustomization_Response;
struct CPlayer_GetProfileCustomization_ResponseDefaultTypeInternal;
extern CPlayer_GetProfileCustomization_ResponseDefaultTypeInternal _CPlayer_GetProfileCustomization_Response_default_instance_;
class CPlayer_GetProfileCustomization_Response_PurchasedCustomization;
struct CPlayer_GetProfileCustomization_Response_PurchasedCustomizationDefaultTypeInternal;
extern CPlayer_GetProfileCustomization_Response_PurchasedCustomizationDefaultTypeInternal _CPlayer_GetProfileCustomization_Response_PurchasedCustomization_default_instance_;
class CPlayer_GetProfileItemsEquipped_Request;
struct CPlayer_GetProfileItemsEquipped_RequestDefaultTypeInternal;
extern CPlayer_GetProfileItemsEquipped_RequestDefaultTypeInternal _CPlayer_GetProfileItemsEquipped_Request_default_instance_;
class CPlayer_GetProfileItemsEquipped_Response;
struct CPlayer_GetProfileItemsEquipped_ResponseDefaultTypeInternal;
extern CPlayer_GetProfileItemsEquipped_ResponseDefaultTypeInternal _CPlayer_GetProfileItemsEquipped_Response_default_instance_;
class CPlayer_GetProfileItemsOwned_Request;
struct CPlayer_GetProfileItemsOwned_RequestDefaultTypeInternal;
extern CPlayer_GetProfileItemsOwned_RequestDefaultTypeInternal _CPlayer_GetProfileItemsOwned_Request_default_instance_;
class CPlayer_GetProfileItemsOwned_Response;
struct CPlayer_GetProfileItemsOwned_ResponseDefaultTypeInternal;
extern CPlayer_GetProfileItemsOwned_ResponseDefaultTypeInternal _CPlayer_GetProfileItemsOwned_Response_default_instance_;
class CPlayer_GetProfileThemesAvailable_Request;
struct CPlayer_GetProfileThemesAvailable_RequestDefaultTypeInternal;
extern CPlayer_GetProfileThemesAvailable_RequestDefaultTypeInternal _CPlayer_GetProfileThemesAvailable_Request_default_instance_;
class CPlayer_GetProfileThemesAvailable_Response;
struct CPlayer_GetProfileThemesAvailable_ResponseDefaultTypeInternal;
extern CPlayer_GetProfileThemesAvailable_ResponseDefaultTypeInternal _CPlayer_GetProfileThemesAvailable_Response_default_instance_;
class CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request;
struct CPlayer_GetPurchasedAndUpgradedProfileCustomizations_RequestDefaultTypeInternal;
extern CPlayer_GetPurchasedAndUpgradedProfileCustomizations_RequestDefaultTypeInternal _CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request_default_instance_;
class CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response;
struct CPlayer_GetPurchasedAndUpgradedProfileCustomizations_ResponseDefaultTypeInternal;
extern CPlayer_GetPurchasedAndUpgradedProfileCustomizations_ResponseDefaultTypeInternal _CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_default_instance_;
class CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization;
struct CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomizationDefaultTypeInternal;
extern CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomizationDefaultTypeInternal _CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization_default_instance_;
class CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization;
struct CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomizationDefaultTypeInternal;
extern CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomizationDefaultTypeInternal _CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization_default_instance_;
class CPlayer_GetPurchasedProfileCustomizations_Request;
struct CPlayer_GetPurchasedProfileCustomizations_RequestDefaultTypeInternal;
extern CPlayer_GetPurchasedProfileCustomizations_RequestDefaultTypeInternal _CPlayer_GetPurchasedProfileCustomizations_Request_default_instance_;
class CPlayer_GetPurchasedProfileCustomizations_Response;
struct CPlayer_GetPurchasedProfileCustomizations_ResponseDefaultTypeInternal;
extern CPlayer_GetPurchasedProfileCustomizations_ResponseDefaultTypeInternal _CPlayer_GetPurchasedProfileCustomizations_Response_default_instance_;
class CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization;
struct CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomizationDefaultTypeInternal;
extern CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomizationDefaultTypeInternal _CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization_default_instance_;
class CPlayer_GetSteamDeckKeyboardSkin_Request;
struct CPlayer_GetSteamDeckKeyboardSkin_RequestDefaultTypeInternal;
extern CPlayer_GetSteamDeckKeyboardSkin_RequestDefaultTypeInternal _CPlayer_GetSteamDeckKeyboardSkin_Request_default_instance_;
class CPlayer_GetSteamDeckKeyboardSkin_Response;
struct CPlayer_GetSteamDeckKeyboardSkin_ResponseDefaultTypeInternal;
extern CPlayer_GetSteamDeckKeyboardSkin_ResponseDefaultTypeInternal _CPlayer_GetSteamDeckKeyboardSkin_Response_default_instance_;
class CPlayer_GetTextFilterWords_Request;
struct CPlayer_GetTextFilterWords_RequestDefaultTypeInternal;
extern CPlayer_GetTextFilterWords_RequestDefaultTypeInternal _CPlayer_GetTextFilterWords_Request_default_instance_;
class CPlayer_GetTextFilterWords_Response;
struct CPlayer_GetTextFilterWords_ResponseDefaultTypeInternal;
extern CPlayer_GetTextFilterWords_ResponseDefaultTypeInternal _CPlayer_GetTextFilterWords_Response_default_instance_;
class CPlayer_GetTimeSSAAccepted_Request;
struct CPlayer_GetTimeSSAAccepted_RequestDefaultTypeInternal;
extern CPlayer_GetTimeSSAAccepted_RequestDefaultTypeInternal _CPlayer_GetTimeSSAAccepted_Request_default_instance_;
class CPlayer_GetTimeSSAAccepted_Response;
struct CPlayer_GetTimeSSAAccepted_ResponseDefaultTypeInternal;
extern CPlayer_GetTimeSSAAccepted_ResponseDefaultTypeInternal _CPlayer_GetTimeSSAAccepted_Response_default_instance_;
class CPlayer_GetTopAchievementsForGames_Request;
struct CPlayer_GetTopAchievementsForGames_RequestDefaultTypeInternal;
extern CPlayer_GetTopAchievementsForGames_RequestDefaultTypeInternal _CPlayer_GetTopAchievementsForGames_Request_default_instance_;
class CPlayer_GetTopAchievementsForGames_Response;
struct CPlayer_GetTopAchievementsForGames_ResponseDefaultTypeInternal;
extern CPlayer_GetTopAchievementsForGames_ResponseDefaultTypeInternal _CPlayer_GetTopAchievementsForGames_Response_default_instance_;
class CPlayer_GetTopAchievementsForGames_Response_Achievement;
struct CPlayer_GetTopAchievementsForGames_Response_AchievementDefaultTypeInternal;
extern CPlayer_GetTopAchievementsForGames_Response_AchievementDefaultTypeInternal _CPlayer_GetTopAchievementsForGames_Response_Achievement_default_instance_;
class CPlayer_GetTopAchievementsForGames_Response_Game;
struct CPlayer_GetTopAchievementsForGames_Response_GameDefaultTypeInternal;
extern CPlayer_GetTopAchievementsForGames_Response_GameDefaultTypeInternal _CPlayer_GetTopAchievementsForGames_Response_Game_default_instance_;
class CPlayer_IgnoreFriend_Request;
struct CPlayer_IgnoreFriend_RequestDefaultTypeInternal;
extern CPlayer_IgnoreFriend_RequestDefaultTypeInternal _CPlayer_IgnoreFriend_Request_default_instance_;
class CPlayer_IgnoreFriend_Response;
struct CPlayer_IgnoreFriend_ResponseDefaultTypeInternal;
extern CPlayer_IgnoreFriend_ResponseDefaultTypeInternal _CPlayer_IgnoreFriend_Response_default_instance_;
class CPlayer_IncomingInviteMutualFriendList;
struct CPlayer_IncomingInviteMutualFriendListDefaultTypeInternal;
extern CPlayer_IncomingInviteMutualFriendListDefaultTypeInternal _CPlayer_IncomingInviteMutualFriendList_default_instance_;
class CPlayer_LastPlayedTimes_Notification;
struct CPlayer_LastPlayedTimes_NotificationDefaultTypeInternal;
extern CPlayer_LastPlayedTimes_NotificationDefaultTypeInternal _CPlayer_LastPlayedTimes_Notification_default_instance_;
class CPlayer_NewSteamAnnouncementState_Notification;
struct CPlayer_NewSteamAnnouncementState_NotificationDefaultTypeInternal;
extern CPlayer_NewSteamAnnouncementState_NotificationDefaultTypeInternal _CPlayer_NewSteamAnnouncementState_Notification_default_instance_;
class CPlayer_PerFriendPreferencesChanged_Notification;
struct CPlayer_PerFriendPreferencesChanged_NotificationDefaultTypeInternal;
extern CPlayer_PerFriendPreferencesChanged_NotificationDefaultTypeInternal _CPlayer_PerFriendPreferencesChanged_Notification_default_instance_;
class CPlayer_PostStatusToFriends_Request;
struct CPlayer_PostStatusToFriends_RequestDefaultTypeInternal;
extern CPlayer_PostStatusToFriends_RequestDefaultTypeInternal _CPlayer_PostStatusToFriends_Request_default_instance_;
class CPlayer_PostStatusToFriends_Response;
struct CPlayer_PostStatusToFriends_ResponseDefaultTypeInternal;
extern CPlayer_PostStatusToFriends_ResponseDefaultTypeInternal _CPlayer_PostStatusToFriends_Response_default_instance_;
class CPlayer_PrivacySettingsChanged_Notification;
struct CPlayer_PrivacySettingsChanged_NotificationDefaultTypeInternal;
extern CPlayer_PrivacySettingsChanged_NotificationDefaultTypeInternal _CPlayer_PrivacySettingsChanged_Notification_default_instance_;
class CPlayer_RecordDisconnectedPlaytime_Request;
struct CPlayer_RecordDisconnectedPlaytime_RequestDefaultTypeInternal;
extern CPlayer_RecordDisconnectedPlaytime_RequestDefaultTypeInternal _CPlayer_RecordDisconnectedPlaytime_Request_default_instance_;
class CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory;
struct CPlayer_RecordDisconnectedPlaytime_Request_PlayHistoryDefaultTypeInternal;
extern CPlayer_RecordDisconnectedPlaytime_Request_PlayHistoryDefaultTypeInternal _CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory_default_instance_;
class CPlayer_RecordDisconnectedPlaytime_Response;
struct CPlayer_RecordDisconnectedPlaytime_ResponseDefaultTypeInternal;
extern CPlayer_RecordDisconnectedPlaytime_ResponseDefaultTypeInternal _CPlayer_RecordDisconnectedPlaytime_Response_default_instance_;
class CPlayer_RemoveFriend_Request;
struct CPlayer_RemoveFriend_RequestDefaultTypeInternal;
extern CPlayer_RemoveFriend_RequestDefaultTypeInternal _CPlayer_RemoveFriend_Request_default_instance_;
class CPlayer_RemoveFriend_Response;
struct CPlayer_RemoveFriend_ResponseDefaultTypeInternal;
extern CPlayer_RemoveFriend_ResponseDefaultTypeInternal _CPlayer_RemoveFriend_Response_default_instance_;
class CPlayer_SetAnimatedAvatar_Request;
struct CPlayer_SetAnimatedAvatar_RequestDefaultTypeInternal;
extern CPlayer_SetAnimatedAvatar_RequestDefaultTypeInternal _CPlayer_SetAnimatedAvatar_Request_default_instance_;
class CPlayer_SetAnimatedAvatar_Response;
struct CPlayer_SetAnimatedAvatar_ResponseDefaultTypeInternal;
extern CPlayer_SetAnimatedAvatar_ResponseDefaultTypeInternal _CPlayer_SetAnimatedAvatar_Response_default_instance_;
class CPlayer_SetAvatarFrame_Request;
struct CPlayer_SetAvatarFrame_RequestDefaultTypeInternal;
extern CPlayer_SetAvatarFrame_RequestDefaultTypeInternal _CPlayer_SetAvatarFrame_Request_default_instance_;
class CPlayer_SetAvatarFrame_Response;
struct CPlayer_SetAvatarFrame_ResponseDefaultTypeInternal;
extern CPlayer_SetAvatarFrame_ResponseDefaultTypeInternal _CPlayer_SetAvatarFrame_Response_default_instance_;
class CPlayer_SetCommunityPreferences_Request;
struct CPlayer_SetCommunityPreferences_RequestDefaultTypeInternal;
extern CPlayer_SetCommunityPreferences_RequestDefaultTypeInternal _CPlayer_SetCommunityPreferences_Request_default_instance_;
class CPlayer_SetCommunityPreferences_Response;
struct CPlayer_SetCommunityPreferences_ResponseDefaultTypeInternal;
extern CPlayer_SetCommunityPreferences_ResponseDefaultTypeInternal _CPlayer_SetCommunityPreferences_Response_default_instance_;
class CPlayer_SetEquippedProfileItemFlags_Request;
struct CPlayer_SetEquippedProfileItemFlags_RequestDefaultTypeInternal;
extern CPlayer_SetEquippedProfileItemFlags_RequestDefaultTypeInternal _CPlayer_SetEquippedProfileItemFlags_Request_default_instance_;
class CPlayer_SetEquippedProfileItemFlags_Response;
struct CPlayer_SetEquippedProfileItemFlags_ResponseDefaultTypeInternal;
extern CPlayer_SetEquippedProfileItemFlags_ResponseDefaultTypeInternal _CPlayer_SetEquippedProfileItemFlags_Response_default_instance_;
class CPlayer_SetFavoriteBadge_Request;
struct CPlayer_SetFavoriteBadge_RequestDefaultTypeInternal;
extern CPlayer_SetFavoriteBadge_RequestDefaultTypeInternal _CPlayer_SetFavoriteBadge_Request_default_instance_;
class CPlayer_SetFavoriteBadge_Response;
struct CPlayer_SetFavoriteBadge_ResponseDefaultTypeInternal;
extern CPlayer_SetFavoriteBadge_ResponseDefaultTypeInternal _CPlayer_SetFavoriteBadge_Response_default_instance_;
class CPlayer_SetMiniProfileBackground_Request;
struct CPlayer_SetMiniProfileBackground_RequestDefaultTypeInternal;
extern CPlayer_SetMiniProfileBackground_RequestDefaultTypeInternal _CPlayer_SetMiniProfileBackground_Request_default_instance_;
class CPlayer_SetMiniProfileBackground_Response;
struct CPlayer_SetMiniProfileBackground_ResponseDefaultTypeInternal;
extern CPlayer_SetMiniProfileBackground_ResponseDefaultTypeInternal _CPlayer_SetMiniProfileBackground_Response_default_instance_;
class CPlayer_SetPerFriendPreferences_Request;
struct CPlayer_SetPerFriendPreferences_RequestDefaultTypeInternal;
extern CPlayer_SetPerFriendPreferences_RequestDefaultTypeInternal _CPlayer_SetPerFriendPreferences_Request_default_instance_;
class CPlayer_SetPerFriendPreferences_Response;
struct CPlayer_SetPerFriendPreferences_ResponseDefaultTypeInternal;
extern CPlayer_SetPerFriendPreferences_ResponseDefaultTypeInternal _CPlayer_SetPerFriendPreferences_Response_default_instance_;
class CPlayer_SetProfileBackground_Request;
struct CPlayer_SetProfileBackground_RequestDefaultTypeInternal;
extern CPlayer_SetProfileBackground_RequestDefaultTypeInternal _CPlayer_SetProfileBackground_Request_default_instance_;
class CPlayer_SetProfileBackground_Response;
struct CPlayer_SetProfileBackground_ResponseDefaultTypeInternal;
extern CPlayer_SetProfileBackground_ResponseDefaultTypeInternal _CPlayer_SetProfileBackground_Response_default_instance_;
class CPlayer_SetProfilePreferences_Request;
struct CPlayer_SetProfilePreferences_RequestDefaultTypeInternal;
extern CPlayer_SetProfilePreferences_RequestDefaultTypeInternal _CPlayer_SetProfilePreferences_Request_default_instance_;
class CPlayer_SetProfilePreferences_Response;
struct CPlayer_SetProfilePreferences_ResponseDefaultTypeInternal;
extern CPlayer_SetProfilePreferences_ResponseDefaultTypeInternal _CPlayer_SetProfilePreferences_Response_default_instance_;
class CPlayer_SetProfileTheme_Request;
struct CPlayer_SetProfileTheme_RequestDefaultTypeInternal;
extern CPlayer_SetProfileTheme_RequestDefaultTypeInternal _CPlayer_SetProfileTheme_Request_default_instance_;
class CPlayer_SetProfileTheme_Response;
struct CPlayer_SetProfileTheme_ResponseDefaultTypeInternal;
extern CPlayer_SetProfileTheme_ResponseDefaultTypeInternal _CPlayer_SetProfileTheme_Response_default_instance_;
class CPlayer_SetSteamDeckKeyboardSkin_Request;
struct CPlayer_SetSteamDeckKeyboardSkin_RequestDefaultTypeInternal;
extern CPlayer_SetSteamDeckKeyboardSkin_RequestDefaultTypeInternal _CPlayer_SetSteamDeckKeyboardSkin_Request_default_instance_;
class CPlayer_SetSteamDeckKeyboardSkin_Response;
struct CPlayer_SetSteamDeckKeyboardSkin_ResponseDefaultTypeInternal;
extern CPlayer_SetSteamDeckKeyboardSkin_ResponseDefaultTypeInternal _CPlayer_SetSteamDeckKeyboardSkin_Response_default_instance_;
class CPlayer_TextFilterWords;
struct CPlayer_TextFilterWordsDefaultTypeInternal;
extern CPlayer_TextFilterWordsDefaultTypeInternal _CPlayer_TextFilterWords_default_instance_;
class CPlayer_TextFilterWordsChanged_Notification;
struct CPlayer_TextFilterWordsChanged_NotificationDefaultTypeInternal;
extern CPlayer_TextFilterWordsChanged_NotificationDefaultTypeInternal _CPlayer_TextFilterWordsChanged_Notification_default_instance_;
class CPlayer_UpdateSteamAnnouncementLastRead_Request;
struct CPlayer_UpdateSteamAnnouncementLastRead_RequestDefaultTypeInternal;
extern CPlayer_UpdateSteamAnnouncementLastRead_RequestDefaultTypeInternal _CPlayer_UpdateSteamAnnouncementLastRead_Request_default_instance_;
class CPlayer_UpdateSteamAnnouncementLastRead_Response;
struct CPlayer_UpdateSteamAnnouncementLastRead_ResponseDefaultTypeInternal;
extern CPlayer_UpdateSteamAnnouncementLastRead_ResponseDefaultTypeInternal _CPlayer_UpdateSteamAnnouncementLastRead_Response_default_instance_;
class CPrivacySettings;
struct CPrivacySettingsDefaultTypeInternal;
extern CPrivacySettingsDefaultTypeInternal _CPrivacySettings_default_instance_;
class PerFriendPreferences;
struct PerFriendPreferencesDefaultTypeInternal;
extern PerFriendPreferencesDefaultTypeInternal _PerFriendPreferences_default_instance_;
class ProfileCustomization;
struct ProfileCustomizationDefaultTypeInternal;
extern ProfileCustomizationDefaultTypeInternal _ProfileCustomization_default_instance_;
class ProfileCustomizationSlot;
struct ProfileCustomizationSlotDefaultTypeInternal;
extern ProfileCustomizationSlotDefaultTypeInternal _ProfileCustomizationSlot_default_instance_;
class ProfileItem;
struct ProfileItemDefaultTypeInternal;
extern ProfileItemDefaultTypeInternal _ProfileItem_default_instance_;
class ProfileItem_ProfileColor;
struct ProfileItem_ProfileColorDefaultTypeInternal;
extern ProfileItem_ProfileColorDefaultTypeInternal _ProfileItem_ProfileColor_default_instance_;
class ProfilePreferences;
struct ProfilePreferencesDefaultTypeInternal;
extern ProfilePreferencesDefaultTypeInternal _ProfilePreferences_default_instance_;
class ProfileTheme;
struct ProfileThemeDefaultTypeInternal;
extern ProfileThemeDefaultTypeInternal _ProfileTheme_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CPlayer_AcceptSSA_Request* Arena::CreateMaybeMessage<::CPlayer_AcceptSSA_Request>(Arena*);
template<> ::CPlayer_AcceptSSA_Response* Arena::CreateMaybeMessage<::CPlayer_AcceptSSA_Response>(Arena*);
template<> ::CPlayer_AddFriend_Request* Arena::CreateMaybeMessage<::CPlayer_AddFriend_Request>(Arena*);
template<> ::CPlayer_AddFriend_Response* Arena::CreateMaybeMessage<::CPlayer_AddFriend_Response>(Arena*);
template<> ::CPlayer_CommunityPreferences* Arena::CreateMaybeMessage<::CPlayer_CommunityPreferences>(Arena*);
template<> ::CPlayer_CommunityPreferencesChanged_Notification* Arena::CreateMaybeMessage<::CPlayer_CommunityPreferencesChanged_Notification>(Arena*);
template<> ::CPlayer_DeletePostedStatus_Request* Arena::CreateMaybeMessage<::CPlayer_DeletePostedStatus_Request>(Arena*);
template<> ::CPlayer_DeletePostedStatus_Response* Arena::CreateMaybeMessage<::CPlayer_DeletePostedStatus_Response>(Arena*);
template<> ::CPlayer_FriendEquippedProfileItemsChanged_Notification* Arena::CreateMaybeMessage<::CPlayer_FriendEquippedProfileItemsChanged_Notification>(Arena*);
template<> ::CPlayer_FriendNicknameChanged_Notification* Arena::CreateMaybeMessage<::CPlayer_FriendNicknameChanged_Notification>(Arena*);
template<> ::CPlayer_GetAchievementsProgress_Request* Arena::CreateMaybeMessage<::CPlayer_GetAchievementsProgress_Request>(Arena*);
template<> ::CPlayer_GetAchievementsProgress_Response* Arena::CreateMaybeMessage<::CPlayer_GetAchievementsProgress_Response>(Arena*);
template<> ::CPlayer_GetAchievementsProgress_Response_AchievementProgress* Arena::CreateMaybeMessage<::CPlayer_GetAchievementsProgress_Response_AchievementProgress>(Arena*);
template<> ::CPlayer_GetAnimatedAvatar_Request* Arena::CreateMaybeMessage<::CPlayer_GetAnimatedAvatar_Request>(Arena*);
template<> ::CPlayer_GetAnimatedAvatar_Response* Arena::CreateMaybeMessage<::CPlayer_GetAnimatedAvatar_Response>(Arena*);
template<> ::CPlayer_GetAvatarFrame_Request* Arena::CreateMaybeMessage<::CPlayer_GetAvatarFrame_Request>(Arena*);
template<> ::CPlayer_GetAvatarFrame_Response* Arena::CreateMaybeMessage<::CPlayer_GetAvatarFrame_Response>(Arena*);
template<> ::CPlayer_GetCommunityPreferences_Request* Arena::CreateMaybeMessage<::CPlayer_GetCommunityPreferences_Request>(Arena*);
template<> ::CPlayer_GetCommunityPreferences_Response* Arena::CreateMaybeMessage<::CPlayer_GetCommunityPreferences_Response>(Arena*);
template<> ::CPlayer_GetDurationControl_Request* Arena::CreateMaybeMessage<::CPlayer_GetDurationControl_Request>(Arena*);
template<> ::CPlayer_GetDurationControl_Response* Arena::CreateMaybeMessage<::CPlayer_GetDurationControl_Response>(Arena*);
template<> ::CPlayer_GetEmoticonList_Request* Arena::CreateMaybeMessage<::CPlayer_GetEmoticonList_Request>(Arena*);
template<> ::CPlayer_GetEmoticonList_Response* Arena::CreateMaybeMessage<::CPlayer_GetEmoticonList_Response>(Arena*);
template<> ::CPlayer_GetEmoticonList_Response_Emoticon* Arena::CreateMaybeMessage<::CPlayer_GetEmoticonList_Response_Emoticon>(Arena*);
template<> ::CPlayer_GetFavoriteBadge_Request* Arena::CreateMaybeMessage<::CPlayer_GetFavoriteBadge_Request>(Arena*);
template<> ::CPlayer_GetFavoriteBadge_Response* Arena::CreateMaybeMessage<::CPlayer_GetFavoriteBadge_Response>(Arena*);
template<> ::CPlayer_GetFriendsGameplayInfo_Request* Arena::CreateMaybeMessage<::CPlayer_GetFriendsGameplayInfo_Request>(Arena*);
template<> ::CPlayer_GetFriendsGameplayInfo_Response* Arena::CreateMaybeMessage<::CPlayer_GetFriendsGameplayInfo_Response>(Arena*);
template<> ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo* Arena::CreateMaybeMessage<::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo>(Arena*);
template<> ::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo* Arena::CreateMaybeMessage<::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo>(Arena*);
template<> ::CPlayer_GetGameAchievements_Request* Arena::CreateMaybeMessage<::CPlayer_GetGameAchievements_Request>(Arena*);
template<> ::CPlayer_GetGameAchievements_Response* Arena::CreateMaybeMessage<::CPlayer_GetGameAchievements_Response>(Arena*);
template<> ::CPlayer_GetGameAchievements_Response_Achievement* Arena::CreateMaybeMessage<::CPlayer_GetGameAchievements_Response_Achievement>(Arena*);
template<> ::CPlayer_GetGameBadgeLevels_Request* Arena::CreateMaybeMessage<::CPlayer_GetGameBadgeLevels_Request>(Arena*);
template<> ::CPlayer_GetGameBadgeLevels_Response* Arena::CreateMaybeMessage<::CPlayer_GetGameBadgeLevels_Response>(Arena*);
template<> ::CPlayer_GetGameBadgeLevels_Response_Badge* Arena::CreateMaybeMessage<::CPlayer_GetGameBadgeLevels_Response_Badge>(Arena*);
template<> ::CPlayer_GetLastPlayedTimes_Request* Arena::CreateMaybeMessage<::CPlayer_GetLastPlayedTimes_Request>(Arena*);
template<> ::CPlayer_GetLastPlayedTimes_Response* Arena::CreateMaybeMessage<::CPlayer_GetLastPlayedTimes_Response>(Arena*);
template<> ::CPlayer_GetLastPlayedTimes_Response_Game* Arena::CreateMaybeMessage<::CPlayer_GetLastPlayedTimes_Response_Game>(Arena*);
template<> ::CPlayer_GetMiniProfileBackground_Request* Arena::CreateMaybeMessage<::CPlayer_GetMiniProfileBackground_Request>(Arena*);
template<> ::CPlayer_GetMiniProfileBackground_Response* Arena::CreateMaybeMessage<::CPlayer_GetMiniProfileBackground_Response>(Arena*);
template<> ::CPlayer_GetMutualFriendsForIncomingInvites_Request* Arena::CreateMaybeMessage<::CPlayer_GetMutualFriendsForIncomingInvites_Request>(Arena*);
template<> ::CPlayer_GetMutualFriendsForIncomingInvites_Response* Arena::CreateMaybeMessage<::CPlayer_GetMutualFriendsForIncomingInvites_Response>(Arena*);
template<> ::CPlayer_GetNewSteamAnnouncementState_Request* Arena::CreateMaybeMessage<::CPlayer_GetNewSteamAnnouncementState_Request>(Arena*);
template<> ::CPlayer_GetNewSteamAnnouncementState_Response* Arena::CreateMaybeMessage<::CPlayer_GetNewSteamAnnouncementState_Response>(Arena*);
template<> ::CPlayer_GetNicknameList_Request* Arena::CreateMaybeMessage<::CPlayer_GetNicknameList_Request>(Arena*);
template<> ::CPlayer_GetNicknameList_Response* Arena::CreateMaybeMessage<::CPlayer_GetNicknameList_Response>(Arena*);
template<> ::CPlayer_GetNicknameList_Response_PlayerNickname* Arena::CreateMaybeMessage<::CPlayer_GetNicknameList_Response_PlayerNickname>(Arena*);
template<> ::CPlayer_GetOwnedGames_Request* Arena::CreateMaybeMessage<::CPlayer_GetOwnedGames_Request>(Arena*);
template<> ::CPlayer_GetOwnedGames_Response* Arena::CreateMaybeMessage<::CPlayer_GetOwnedGames_Response>(Arena*);
template<> ::CPlayer_GetOwnedGames_Response_Game* Arena::CreateMaybeMessage<::CPlayer_GetOwnedGames_Response_Game>(Arena*);
template<> ::CPlayer_GetPerFriendPreferences_Request* Arena::CreateMaybeMessage<::CPlayer_GetPerFriendPreferences_Request>(Arena*);
template<> ::CPlayer_GetPerFriendPreferences_Response* Arena::CreateMaybeMessage<::CPlayer_GetPerFriendPreferences_Response>(Arena*);
template<> ::CPlayer_GetPlayNext_Request* Arena::CreateMaybeMessage<::CPlayer_GetPlayNext_Request>(Arena*);
template<> ::CPlayer_GetPlayNext_Response* Arena::CreateMaybeMessage<::CPlayer_GetPlayNext_Response>(Arena*);
template<> ::CPlayer_GetPostedStatus_Request* Arena::CreateMaybeMessage<::CPlayer_GetPostedStatus_Request>(Arena*);
template<> ::CPlayer_GetPostedStatus_Response* Arena::CreateMaybeMessage<::CPlayer_GetPostedStatus_Response>(Arena*);
template<> ::CPlayer_GetPrivacySettings_Request* Arena::CreateMaybeMessage<::CPlayer_GetPrivacySettings_Request>(Arena*);
template<> ::CPlayer_GetPrivacySettings_Response* Arena::CreateMaybeMessage<::CPlayer_GetPrivacySettings_Response>(Arena*);
template<> ::CPlayer_GetProfileBackground_Request* Arena::CreateMaybeMessage<::CPlayer_GetProfileBackground_Request>(Arena*);
template<> ::CPlayer_GetProfileBackground_Response* Arena::CreateMaybeMessage<::CPlayer_GetProfileBackground_Response>(Arena*);
template<> ::CPlayer_GetProfileCustomization_Request* Arena::CreateMaybeMessage<::CPlayer_GetProfileCustomization_Request>(Arena*);
template<> ::CPlayer_GetProfileCustomization_Response* Arena::CreateMaybeMessage<::CPlayer_GetProfileCustomization_Response>(Arena*);
template<> ::CPlayer_GetProfileCustomization_Response_PurchasedCustomization* Arena::CreateMaybeMessage<::CPlayer_GetProfileCustomization_Response_PurchasedCustomization>(Arena*);
template<> ::CPlayer_GetProfileItemsEquipped_Request* Arena::CreateMaybeMessage<::CPlayer_GetProfileItemsEquipped_Request>(Arena*);
template<> ::CPlayer_GetProfileItemsEquipped_Response* Arena::CreateMaybeMessage<::CPlayer_GetProfileItemsEquipped_Response>(Arena*);
template<> ::CPlayer_GetProfileItemsOwned_Request* Arena::CreateMaybeMessage<::CPlayer_GetProfileItemsOwned_Request>(Arena*);
template<> ::CPlayer_GetProfileItemsOwned_Response* Arena::CreateMaybeMessage<::CPlayer_GetProfileItemsOwned_Response>(Arena*);
template<> ::CPlayer_GetProfileThemesAvailable_Request* Arena::CreateMaybeMessage<::CPlayer_GetProfileThemesAvailable_Request>(Arena*);
template<> ::CPlayer_GetProfileThemesAvailable_Response* Arena::CreateMaybeMessage<::CPlayer_GetProfileThemesAvailable_Response>(Arena*);
template<> ::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request* Arena::CreateMaybeMessage<::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request>(Arena*);
template<> ::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response* Arena::CreateMaybeMessage<::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response>(Arena*);
template<> ::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization* Arena::CreateMaybeMessage<::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization>(Arena*);
template<> ::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization* Arena::CreateMaybeMessage<::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization>(Arena*);
template<> ::CPlayer_GetPurchasedProfileCustomizations_Request* Arena::CreateMaybeMessage<::CPlayer_GetPurchasedProfileCustomizations_Request>(Arena*);
template<> ::CPlayer_GetPurchasedProfileCustomizations_Response* Arena::CreateMaybeMessage<::CPlayer_GetPurchasedProfileCustomizations_Response>(Arena*);
template<> ::CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization* Arena::CreateMaybeMessage<::CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization>(Arena*);
template<> ::CPlayer_GetSteamDeckKeyboardSkin_Request* Arena::CreateMaybeMessage<::CPlayer_GetSteamDeckKeyboardSkin_Request>(Arena*);
template<> ::CPlayer_GetSteamDeckKeyboardSkin_Response* Arena::CreateMaybeMessage<::CPlayer_GetSteamDeckKeyboardSkin_Response>(Arena*);
template<> ::CPlayer_GetTextFilterWords_Request* Arena::CreateMaybeMessage<::CPlayer_GetTextFilterWords_Request>(Arena*);
template<> ::CPlayer_GetTextFilterWords_Response* Arena::CreateMaybeMessage<::CPlayer_GetTextFilterWords_Response>(Arena*);
template<> ::CPlayer_GetTimeSSAAccepted_Request* Arena::CreateMaybeMessage<::CPlayer_GetTimeSSAAccepted_Request>(Arena*);
template<> ::CPlayer_GetTimeSSAAccepted_Response* Arena::CreateMaybeMessage<::CPlayer_GetTimeSSAAccepted_Response>(Arena*);
template<> ::CPlayer_GetTopAchievementsForGames_Request* Arena::CreateMaybeMessage<::CPlayer_GetTopAchievementsForGames_Request>(Arena*);
template<> ::CPlayer_GetTopAchievementsForGames_Response* Arena::CreateMaybeMessage<::CPlayer_GetTopAchievementsForGames_Response>(Arena*);
template<> ::CPlayer_GetTopAchievementsForGames_Response_Achievement* Arena::CreateMaybeMessage<::CPlayer_GetTopAchievementsForGames_Response_Achievement>(Arena*);
template<> ::CPlayer_GetTopAchievementsForGames_Response_Game* Arena::CreateMaybeMessage<::CPlayer_GetTopAchievementsForGames_Response_Game>(Arena*);
template<> ::CPlayer_IgnoreFriend_Request* Arena::CreateMaybeMessage<::CPlayer_IgnoreFriend_Request>(Arena*);
template<> ::CPlayer_IgnoreFriend_Response* Arena::CreateMaybeMessage<::CPlayer_IgnoreFriend_Response>(Arena*);
template<> ::CPlayer_IncomingInviteMutualFriendList* Arena::CreateMaybeMessage<::CPlayer_IncomingInviteMutualFriendList>(Arena*);
template<> ::CPlayer_LastPlayedTimes_Notification* Arena::CreateMaybeMessage<::CPlayer_LastPlayedTimes_Notification>(Arena*);
template<> ::CPlayer_NewSteamAnnouncementState_Notification* Arena::CreateMaybeMessage<::CPlayer_NewSteamAnnouncementState_Notification>(Arena*);
template<> ::CPlayer_PerFriendPreferencesChanged_Notification* Arena::CreateMaybeMessage<::CPlayer_PerFriendPreferencesChanged_Notification>(Arena*);
template<> ::CPlayer_PostStatusToFriends_Request* Arena::CreateMaybeMessage<::CPlayer_PostStatusToFriends_Request>(Arena*);
template<> ::CPlayer_PostStatusToFriends_Response* Arena::CreateMaybeMessage<::CPlayer_PostStatusToFriends_Response>(Arena*);
template<> ::CPlayer_PrivacySettingsChanged_Notification* Arena::CreateMaybeMessage<::CPlayer_PrivacySettingsChanged_Notification>(Arena*);
template<> ::CPlayer_RecordDisconnectedPlaytime_Request* Arena::CreateMaybeMessage<::CPlayer_RecordDisconnectedPlaytime_Request>(Arena*);
template<> ::CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory* Arena::CreateMaybeMessage<::CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory>(Arena*);
template<> ::CPlayer_RecordDisconnectedPlaytime_Response* Arena::CreateMaybeMessage<::CPlayer_RecordDisconnectedPlaytime_Response>(Arena*);
template<> ::CPlayer_RemoveFriend_Request* Arena::CreateMaybeMessage<::CPlayer_RemoveFriend_Request>(Arena*);
template<> ::CPlayer_RemoveFriend_Response* Arena::CreateMaybeMessage<::CPlayer_RemoveFriend_Response>(Arena*);
template<> ::CPlayer_SetAnimatedAvatar_Request* Arena::CreateMaybeMessage<::CPlayer_SetAnimatedAvatar_Request>(Arena*);
template<> ::CPlayer_SetAnimatedAvatar_Response* Arena::CreateMaybeMessage<::CPlayer_SetAnimatedAvatar_Response>(Arena*);
template<> ::CPlayer_SetAvatarFrame_Request* Arena::CreateMaybeMessage<::CPlayer_SetAvatarFrame_Request>(Arena*);
template<> ::CPlayer_SetAvatarFrame_Response* Arena::CreateMaybeMessage<::CPlayer_SetAvatarFrame_Response>(Arena*);
template<> ::CPlayer_SetCommunityPreferences_Request* Arena::CreateMaybeMessage<::CPlayer_SetCommunityPreferences_Request>(Arena*);
template<> ::CPlayer_SetCommunityPreferences_Response* Arena::CreateMaybeMessage<::CPlayer_SetCommunityPreferences_Response>(Arena*);
template<> ::CPlayer_SetEquippedProfileItemFlags_Request* Arena::CreateMaybeMessage<::CPlayer_SetEquippedProfileItemFlags_Request>(Arena*);
template<> ::CPlayer_SetEquippedProfileItemFlags_Response* Arena::CreateMaybeMessage<::CPlayer_SetEquippedProfileItemFlags_Response>(Arena*);
template<> ::CPlayer_SetFavoriteBadge_Request* Arena::CreateMaybeMessage<::CPlayer_SetFavoriteBadge_Request>(Arena*);
template<> ::CPlayer_SetFavoriteBadge_Response* Arena::CreateMaybeMessage<::CPlayer_SetFavoriteBadge_Response>(Arena*);
template<> ::CPlayer_SetMiniProfileBackground_Request* Arena::CreateMaybeMessage<::CPlayer_SetMiniProfileBackground_Request>(Arena*);
template<> ::CPlayer_SetMiniProfileBackground_Response* Arena::CreateMaybeMessage<::CPlayer_SetMiniProfileBackground_Response>(Arena*);
template<> ::CPlayer_SetPerFriendPreferences_Request* Arena::CreateMaybeMessage<::CPlayer_SetPerFriendPreferences_Request>(Arena*);
template<> ::CPlayer_SetPerFriendPreferences_Response* Arena::CreateMaybeMessage<::CPlayer_SetPerFriendPreferences_Response>(Arena*);
template<> ::CPlayer_SetProfileBackground_Request* Arena::CreateMaybeMessage<::CPlayer_SetProfileBackground_Request>(Arena*);
template<> ::CPlayer_SetProfileBackground_Response* Arena::CreateMaybeMessage<::CPlayer_SetProfileBackground_Response>(Arena*);
template<> ::CPlayer_SetProfilePreferences_Request* Arena::CreateMaybeMessage<::CPlayer_SetProfilePreferences_Request>(Arena*);
template<> ::CPlayer_SetProfilePreferences_Response* Arena::CreateMaybeMessage<::CPlayer_SetProfilePreferences_Response>(Arena*);
template<> ::CPlayer_SetProfileTheme_Request* Arena::CreateMaybeMessage<::CPlayer_SetProfileTheme_Request>(Arena*);
template<> ::CPlayer_SetProfileTheme_Response* Arena::CreateMaybeMessage<::CPlayer_SetProfileTheme_Response>(Arena*);
template<> ::CPlayer_SetSteamDeckKeyboardSkin_Request* Arena::CreateMaybeMessage<::CPlayer_SetSteamDeckKeyboardSkin_Request>(Arena*);
template<> ::CPlayer_SetSteamDeckKeyboardSkin_Response* Arena::CreateMaybeMessage<::CPlayer_SetSteamDeckKeyboardSkin_Response>(Arena*);
template<> ::CPlayer_TextFilterWords* Arena::CreateMaybeMessage<::CPlayer_TextFilterWords>(Arena*);
template<> ::CPlayer_TextFilterWordsChanged_Notification* Arena::CreateMaybeMessage<::CPlayer_TextFilterWordsChanged_Notification>(Arena*);
template<> ::CPlayer_UpdateSteamAnnouncementLastRead_Request* Arena::CreateMaybeMessage<::CPlayer_UpdateSteamAnnouncementLastRead_Request>(Arena*);
template<> ::CPlayer_UpdateSteamAnnouncementLastRead_Response* Arena::CreateMaybeMessage<::CPlayer_UpdateSteamAnnouncementLastRead_Response>(Arena*);
template<> ::CPrivacySettings* Arena::CreateMaybeMessage<::CPrivacySettings>(Arena*);
template<> ::PerFriendPreferences* Arena::CreateMaybeMessage<::PerFriendPreferences>(Arena*);
template<> ::ProfileCustomization* Arena::CreateMaybeMessage<::ProfileCustomization>(Arena*);
template<> ::ProfileCustomizationSlot* Arena::CreateMaybeMessage<::ProfileCustomizationSlot>(Arena*);
template<> ::ProfileItem* Arena::CreateMaybeMessage<::ProfileItem>(Arena*);
template<> ::ProfileItem_ProfileColor* Arena::CreateMaybeMessage<::ProfileItem_ProfileColor>(Arena*);
template<> ::ProfilePreferences* Arena::CreateMaybeMessage<::ProfilePreferences>(Arena*);
template<> ::ProfileTheme* Arena::CreateMaybeMessage<::ProfileTheme>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum EProfileCustomizationStyle : int {
  k_EProfileCustomizationStyleDefault = 0,
  k_EProfileCustomizationStyleSelected = 1,
  k_EProfileCustomizationStyleRarest = 2,
  k_EProfileCustomizationStyleMostRecent = 3,
  k_EProfileCustomizationStyleRandom = 4,
  k_EProfileCustomizationStyleHighestRated = 5
};
bool EProfileCustomizationStyle_IsValid(int value);
constexpr EProfileCustomizationStyle EProfileCustomizationStyle_MIN = k_EProfileCustomizationStyleDefault;
constexpr EProfileCustomizationStyle EProfileCustomizationStyle_MAX = k_EProfileCustomizationStyleHighestRated;
constexpr int EProfileCustomizationStyle_ARRAYSIZE = EProfileCustomizationStyle_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EProfileCustomizationStyle_descriptor();
template<typename T>
inline const std::string& EProfileCustomizationStyle_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EProfileCustomizationStyle>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EProfileCustomizationStyle_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EProfileCustomizationStyle_descriptor(), enum_t_value);
}
inline bool EProfileCustomizationStyle_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EProfileCustomizationStyle* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EProfileCustomizationStyle>(
    EProfileCustomizationStyle_descriptor(), name, value);
}
enum EAgreementType : int {
  k_EAgreementType_Invalid = -1,
  k_EAgreementType_GlobalSSA = 0,
  k_EAgreementType_ChinaSSA = 1
};
bool EAgreementType_IsValid(int value);
constexpr EAgreementType EAgreementType_MIN = k_EAgreementType_Invalid;
constexpr EAgreementType EAgreementType_MAX = k_EAgreementType_ChinaSSA;
constexpr int EAgreementType_ARRAYSIZE = EAgreementType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EAgreementType_descriptor();
template<typename T>
inline const std::string& EAgreementType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EAgreementType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EAgreementType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EAgreementType_descriptor(), enum_t_value);
}
inline bool EAgreementType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EAgreementType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EAgreementType>(
    EAgreementType_descriptor(), name, value);
}
enum ENotificationSetting : int {
  k_ENotificationSettingNotifyUseDefault = 0,
  k_ENotificationSettingAlways = 1,
  k_ENotificationSettingNever = 2
};
bool ENotificationSetting_IsValid(int value);
constexpr ENotificationSetting ENotificationSetting_MIN = k_ENotificationSettingNotifyUseDefault;
constexpr ENotificationSetting ENotificationSetting_MAX = k_ENotificationSettingNever;
constexpr int ENotificationSetting_ARRAYSIZE = ENotificationSetting_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ENotificationSetting_descriptor();
template<typename T>
inline const std::string& ENotificationSetting_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ENotificationSetting>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ENotificationSetting_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ENotificationSetting_descriptor(), enum_t_value);
}
inline bool ENotificationSetting_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ENotificationSetting* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ENotificationSetting>(
    ENotificationSetting_descriptor(), name, value);
}
enum ETextFilterSetting : int {
  k_ETextFilterSettingSteamLabOptedOut = 0,
  k_ETextFilterSettingEnabled = 1,
  k_ETextFilterSettingEnabledAllowProfanity = 2,
  k_ETextFilterSettingDisabled = 3
};
bool ETextFilterSetting_IsValid(int value);
constexpr ETextFilterSetting ETextFilterSetting_MIN = k_ETextFilterSettingSteamLabOptedOut;
constexpr ETextFilterSetting ETextFilterSetting_MAX = k_ETextFilterSettingDisabled;
constexpr int ETextFilterSetting_ARRAYSIZE = ETextFilterSetting_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ETextFilterSetting_descriptor();
template<typename T>
inline const std::string& ETextFilterSetting_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ETextFilterSetting>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ETextFilterSetting_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ETextFilterSetting_descriptor(), enum_t_value);
}
inline bool ETextFilterSetting_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ETextFilterSetting* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ETextFilterSetting>(
    ETextFilterSetting_descriptor(), name, value);
}
// ===================================================================

class CPlayer_GetMutualFriendsForIncomingInvites_Request final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CPlayer_GetMutualFriendsForIncomingInvites_Request) */ {
 public:
  inline CPlayer_GetMutualFriendsForIncomingInvites_Request() : CPlayer_GetMutualFriendsForIncomingInvites_Request(nullptr) {}
  explicit constexpr CPlayer_GetMutualFriendsForIncomingInvites_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetMutualFriendsForIncomingInvites_Request(const CPlayer_GetMutualFriendsForIncomingInvites_Request& from);
  CPlayer_GetMutualFriendsForIncomingInvites_Request(CPlayer_GetMutualFriendsForIncomingInvites_Request&& from) noexcept
    : CPlayer_GetMutualFriendsForIncomingInvites_Request() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetMutualFriendsForIncomingInvites_Request& operator=(const CPlayer_GetMutualFriendsForIncomingInvites_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetMutualFriendsForIncomingInvites_Request& operator=(CPlayer_GetMutualFriendsForIncomingInvites_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetMutualFriendsForIncomingInvites_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetMutualFriendsForIncomingInvites_Request* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetMutualFriendsForIncomingInvites_Request*>(
               &_CPlayer_GetMutualFriendsForIncomingInvites_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CPlayer_GetMutualFriendsForIncomingInvites_Request& a, CPlayer_GetMutualFriendsForIncomingInvites_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetMutualFriendsForIncomingInvites_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetMutualFriendsForIncomingInvites_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetMutualFriendsForIncomingInvites_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetMutualFriendsForIncomingInvites_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CPlayer_GetMutualFriendsForIncomingInvites_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CPlayer_GetMutualFriendsForIncomingInvites_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetMutualFriendsForIncomingInvites_Request";
  }
  protected:
  explicit CPlayer_GetMutualFriendsForIncomingInvites_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CPlayer_GetMutualFriendsForIncomingInvites_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_IncomingInviteMutualFriendList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_IncomingInviteMutualFriendList) */ {
 public:
  inline CPlayer_IncomingInviteMutualFriendList() : CPlayer_IncomingInviteMutualFriendList(nullptr) {}
  ~CPlayer_IncomingInviteMutualFriendList() override;
  explicit constexpr CPlayer_IncomingInviteMutualFriendList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_IncomingInviteMutualFriendList(const CPlayer_IncomingInviteMutualFriendList& from);
  CPlayer_IncomingInviteMutualFriendList(CPlayer_IncomingInviteMutualFriendList&& from) noexcept
    : CPlayer_IncomingInviteMutualFriendList() {
    *this = ::std::move(from);
  }

  inline CPlayer_IncomingInviteMutualFriendList& operator=(const CPlayer_IncomingInviteMutualFriendList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_IncomingInviteMutualFriendList& operator=(CPlayer_IncomingInviteMutualFriendList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_IncomingInviteMutualFriendList& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_IncomingInviteMutualFriendList* internal_default_instance() {
    return reinterpret_cast<const CPlayer_IncomingInviteMutualFriendList*>(
               &_CPlayer_IncomingInviteMutualFriendList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CPlayer_IncomingInviteMutualFriendList& a, CPlayer_IncomingInviteMutualFriendList& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_IncomingInviteMutualFriendList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_IncomingInviteMutualFriendList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_IncomingInviteMutualFriendList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_IncomingInviteMutualFriendList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_IncomingInviteMutualFriendList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_IncomingInviteMutualFriendList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_IncomingInviteMutualFriendList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_IncomingInviteMutualFriendList";
  }
  protected:
  explicit CPlayer_IncomingInviteMutualFriendList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMutualFriendAccountIdsFieldNumber = 2,
    kSteamidFieldNumber = 1,
  };
  // repeated uint32 mutual_friend_account_ids = 2;
  int mutual_friend_account_ids_size() const;
  private:
  int _internal_mutual_friend_account_ids_size() const;
  public:
  void clear_mutual_friend_account_ids();
  private:
  uint32_t _internal_mutual_friend_account_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_mutual_friend_account_ids() const;
  void _internal_add_mutual_friend_account_ids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_mutual_friend_account_ids();
  public:
  uint32_t mutual_friend_account_ids(int index) const;
  void set_mutual_friend_account_ids(int index, uint32_t value);
  void add_mutual_friend_account_ids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      mutual_friend_account_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_mutual_friend_account_ids();

  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPlayer_IncomingInviteMutualFriendList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > mutual_friend_account_ids_;
  uint64_t steamid_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetMutualFriendsForIncomingInvites_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_GetMutualFriendsForIncomingInvites_Response) */ {
 public:
  inline CPlayer_GetMutualFriendsForIncomingInvites_Response() : CPlayer_GetMutualFriendsForIncomingInvites_Response(nullptr) {}
  ~CPlayer_GetMutualFriendsForIncomingInvites_Response() override;
  explicit constexpr CPlayer_GetMutualFriendsForIncomingInvites_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetMutualFriendsForIncomingInvites_Response(const CPlayer_GetMutualFriendsForIncomingInvites_Response& from);
  CPlayer_GetMutualFriendsForIncomingInvites_Response(CPlayer_GetMutualFriendsForIncomingInvites_Response&& from) noexcept
    : CPlayer_GetMutualFriendsForIncomingInvites_Response() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetMutualFriendsForIncomingInvites_Response& operator=(const CPlayer_GetMutualFriendsForIncomingInvites_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetMutualFriendsForIncomingInvites_Response& operator=(CPlayer_GetMutualFriendsForIncomingInvites_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetMutualFriendsForIncomingInvites_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetMutualFriendsForIncomingInvites_Response* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetMutualFriendsForIncomingInvites_Response*>(
               &_CPlayer_GetMutualFriendsForIncomingInvites_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CPlayer_GetMutualFriendsForIncomingInvites_Response& a, CPlayer_GetMutualFriendsForIncomingInvites_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetMutualFriendsForIncomingInvites_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetMutualFriendsForIncomingInvites_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetMutualFriendsForIncomingInvites_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetMutualFriendsForIncomingInvites_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_GetMutualFriendsForIncomingInvites_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_GetMutualFriendsForIncomingInvites_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetMutualFriendsForIncomingInvites_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetMutualFriendsForIncomingInvites_Response";
  }
  protected:
  explicit CPlayer_GetMutualFriendsForIncomingInvites_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIncomingInviteMutualFriendsListsFieldNumber = 1,
  };
  // repeated .CPlayer_IncomingInviteMutualFriendList incoming_invite_mutual_friends_lists = 1;
  int incoming_invite_mutual_friends_lists_size() const;
  private:
  int _internal_incoming_invite_mutual_friends_lists_size() const;
  public:
  void clear_incoming_invite_mutual_friends_lists();
  ::CPlayer_IncomingInviteMutualFriendList* mutable_incoming_invite_mutual_friends_lists(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_IncomingInviteMutualFriendList >*
      mutable_incoming_invite_mutual_friends_lists();
  private:
  const ::CPlayer_IncomingInviteMutualFriendList& _internal_incoming_invite_mutual_friends_lists(int index) const;
  ::CPlayer_IncomingInviteMutualFriendList* _internal_add_incoming_invite_mutual_friends_lists();
  public:
  const ::CPlayer_IncomingInviteMutualFriendList& incoming_invite_mutual_friends_lists(int index) const;
  ::CPlayer_IncomingInviteMutualFriendList* add_incoming_invite_mutual_friends_lists();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_IncomingInviteMutualFriendList >&
      incoming_invite_mutual_friends_lists() const;

  // @@protoc_insertion_point(class_scope:CPlayer_GetMutualFriendsForIncomingInvites_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_IncomingInviteMutualFriendList > incoming_invite_mutual_friends_lists_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetOwnedGames_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_GetOwnedGames_Request) */ {
 public:
  inline CPlayer_GetOwnedGames_Request() : CPlayer_GetOwnedGames_Request(nullptr) {}
  ~CPlayer_GetOwnedGames_Request() override;
  explicit constexpr CPlayer_GetOwnedGames_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetOwnedGames_Request(const CPlayer_GetOwnedGames_Request& from);
  CPlayer_GetOwnedGames_Request(CPlayer_GetOwnedGames_Request&& from) noexcept
    : CPlayer_GetOwnedGames_Request() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetOwnedGames_Request& operator=(const CPlayer_GetOwnedGames_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetOwnedGames_Request& operator=(CPlayer_GetOwnedGames_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetOwnedGames_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetOwnedGames_Request* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetOwnedGames_Request*>(
               &_CPlayer_GetOwnedGames_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CPlayer_GetOwnedGames_Request& a, CPlayer_GetOwnedGames_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetOwnedGames_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetOwnedGames_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetOwnedGames_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetOwnedGames_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_GetOwnedGames_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_GetOwnedGames_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetOwnedGames_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetOwnedGames_Request";
  }
  protected:
  explicit CPlayer_GetOwnedGames_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppidsFilterFieldNumber = 4,
    kLanguageFieldNumber = 7,
    kSteamidFieldNumber = 1,
    kIncludeAppinfoFieldNumber = 2,
    kIncludePlayedFreeGamesFieldNumber = 3,
    kIncludeFreeSubFieldNumber = 5,
    kIncludeExtendedAppinfoFieldNumber = 8,
    kSkipUnvettedAppsFieldNumber = 6,
  };
  // repeated uint32 appids_filter = 4 [(.description) = "if set, restricts result set to the passed in apps"];
  int appids_filter_size() const;
  private:
  int _internal_appids_filter_size() const;
  public:
  void clear_appids_filter();
  private:
  uint32_t _internal_appids_filter(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_appids_filter() const;
  void _internal_add_appids_filter(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_appids_filter();
  public:
  uint32_t appids_filter(int index) const;
  void set_appids_filter(int index, uint32_t value);
  void add_appids_filter(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      appids_filter() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_appids_filter();

  // optional string language = 7 [(.description) = "Will return appinfo in this language"];
  bool has_language() const;
  private:
  bool _internal_has_language() const;
  public:
  void clear_language();
  const std::string& language() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language();
  PROTOBUF_NODISCARD std::string* release_language();
  void set_allocated_language(std::string* language);
  private:
  const std::string& _internal_language() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language(const std::string& value);
  std::string* _internal_mutable_language();
  public:

  // optional uint64 steamid = 1 [(.description) = "The player we\'re asking about"];
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional bool include_appinfo = 2 [(.description) = "true if we want additional details (name, icon) about each game"];
  bool has_include_appinfo() const;
  private:
  bool _internal_has_include_appinfo() const;
  public:
  void clear_include_appinfo();
  bool include_appinfo() const;
  void set_include_appinfo(bool value);
  private:
  bool _internal_include_appinfo() const;
  void _internal_set_include_appinfo(bool value);
  public:

  // optional bool include_played_free_games = 3 [(.description) = "Free games are excluded by default.  If this is set, free games the user has played will be returned."];
  bool has_include_played_free_games() const;
  private:
  bool _internal_has_include_played_free_games() const;
  public:
  void clear_include_played_free_games();
  bool include_played_free_games() const;
  void set_include_played_free_games(bool value);
  private:
  bool _internal_include_played_free_games() const;
  void _internal_set_include_played_free_games(bool value);
  public:

  // optional bool include_free_sub = 5 [(.description) = "Some games are in the free sub, which are excluded by default."];
  bool has_include_free_sub() const;
  private:
  bool _internal_has_include_free_sub() const;
  public:
  void clear_include_free_sub();
  bool include_free_sub() const;
  void set_include_free_sub(bool value);
  private:
  bool _internal_include_free_sub() const;
  void _internal_set_include_free_sub(bool value);
  public:

  // optional bool include_extended_appinfo = 8 [(.description) = "true if we want even more details (capsule, sortas, and capabilities) about each game.  include_appinfo must also be true."];
  bool has_include_extended_appinfo() const;
  private:
  bool _internal_has_include_extended_appinfo() const;
  public:
  void clear_include_extended_appinfo();
  bool include_extended_appinfo() const;
  void set_include_extended_appinfo(bool value);
  private:
  bool _internal_include_extended_appinfo() const;
  void _internal_set_include_extended_appinfo(bool value);
  public:

  // optional bool skip_unvetted_apps = 6 [default = true, (.description) = "if set, skip unvetted store apps"];
  bool has_skip_unvetted_apps() const;
  private:
  bool _internal_has_skip_unvetted_apps() const;
  public:
  void clear_skip_unvetted_apps();
  bool skip_unvetted_apps() const;
  void set_skip_unvetted_apps(bool value);
  private:
  bool _internal_skip_unvetted_apps() const;
  void _internal_set_skip_unvetted_apps(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CPlayer_GetOwnedGames_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > appids_filter_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
  uint64_t steamid_;
  bool include_appinfo_;
  bool include_played_free_games_;
  bool include_free_sub_;
  bool include_extended_appinfo_;
  bool skip_unvetted_apps_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetOwnedGames_Response_Game final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_GetOwnedGames_Response.Game) */ {
 public:
  inline CPlayer_GetOwnedGames_Response_Game() : CPlayer_GetOwnedGames_Response_Game(nullptr) {}
  ~CPlayer_GetOwnedGames_Response_Game() override;
  explicit constexpr CPlayer_GetOwnedGames_Response_Game(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetOwnedGames_Response_Game(const CPlayer_GetOwnedGames_Response_Game& from);
  CPlayer_GetOwnedGames_Response_Game(CPlayer_GetOwnedGames_Response_Game&& from) noexcept
    : CPlayer_GetOwnedGames_Response_Game() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetOwnedGames_Response_Game& operator=(const CPlayer_GetOwnedGames_Response_Game& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetOwnedGames_Response_Game& operator=(CPlayer_GetOwnedGames_Response_Game&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetOwnedGames_Response_Game& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetOwnedGames_Response_Game* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetOwnedGames_Response_Game*>(
               &_CPlayer_GetOwnedGames_Response_Game_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CPlayer_GetOwnedGames_Response_Game& a, CPlayer_GetOwnedGames_Response_Game& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetOwnedGames_Response_Game* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetOwnedGames_Response_Game* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetOwnedGames_Response_Game* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetOwnedGames_Response_Game>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_GetOwnedGames_Response_Game& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_GetOwnedGames_Response_Game& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetOwnedGames_Response_Game* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetOwnedGames_Response.Game";
  }
  protected:
  explicit CPlayer_GetOwnedGames_Response_Game(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentDescriptoridsFieldNumber = 18,
    kNameFieldNumber = 2,
    kImgIconUrlFieldNumber = 5,
    kCapsuleFilenameFieldNumber = 12,
    kSortAsFieldNumber = 13,
    kAppidFieldNumber = 1,
    kPlaytime2WeeksFieldNumber = 3,
    kPlaytimeForeverFieldNumber = 4,
    kPlaytimeWindowsForeverFieldNumber = 8,
    kPlaytimeMacForeverFieldNumber = 9,
    kPlaytimeLinuxForeverFieldNumber = 10,
    kRtimeLastPlayedFieldNumber = 11,
    kHasCommunityVisibleStatsFieldNumber = 7,
    kHasWorkshopFieldNumber = 14,
    kHasMarketFieldNumber = 15,
    kHasDlcFieldNumber = 16,
    kHasLeaderboardsFieldNumber = 17,
    kPlaytimeDisconnectedFieldNumber = 19,
  };
  // repeated uint32 content_descriptorids = 18;
  int content_descriptorids_size() const;
  private:
  int _internal_content_descriptorids_size() const;
  public:
  void clear_content_descriptorids();
  private:
  uint32_t _internal_content_descriptorids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_content_descriptorids() const;
  void _internal_add_content_descriptorids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_content_descriptorids();
  public:
  uint32_t content_descriptorids(int index) const;
  void set_content_descriptorids(int index, uint32_t value);
  void add_content_descriptorids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      content_descriptorids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_content_descriptorids();

  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string img_icon_url = 5;
  bool has_img_icon_url() const;
  private:
  bool _internal_has_img_icon_url() const;
  public:
  void clear_img_icon_url();
  const std::string& img_icon_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_img_icon_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_img_icon_url();
  PROTOBUF_NODISCARD std::string* release_img_icon_url();
  void set_allocated_img_icon_url(std::string* img_icon_url);
  private:
  const std::string& _internal_img_icon_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_img_icon_url(const std::string& value);
  std::string* _internal_mutable_img_icon_url();
  public:

  // optional string capsule_filename = 12;
  bool has_capsule_filename() const;
  private:
  bool _internal_has_capsule_filename() const;
  public:
  void clear_capsule_filename();
  const std::string& capsule_filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_capsule_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_capsule_filename();
  PROTOBUF_NODISCARD std::string* release_capsule_filename();
  void set_allocated_capsule_filename(std::string* capsule_filename);
  private:
  const std::string& _internal_capsule_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_capsule_filename(const std::string& value);
  std::string* _internal_mutable_capsule_filename();
  public:

  // optional string sort_as = 13;
  bool has_sort_as() const;
  private:
  bool _internal_has_sort_as() const;
  public:
  void clear_sort_as();
  const std::string& sort_as() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sort_as(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sort_as();
  PROTOBUF_NODISCARD std::string* release_sort_as();
  void set_allocated_sort_as(std::string* sort_as);
  private:
  const std::string& _internal_sort_as() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sort_as(const std::string& value);
  std::string* _internal_mutable_sort_as();
  public:

  // optional int32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  int32_t appid() const;
  void set_appid(int32_t value);
  private:
  int32_t _internal_appid() const;
  void _internal_set_appid(int32_t value);
  public:

  // optional int32 playtime_2weeks = 3;
  bool has_playtime_2weeks() const;
  private:
  bool _internal_has_playtime_2weeks() const;
  public:
  void clear_playtime_2weeks();
  int32_t playtime_2weeks() const;
  void set_playtime_2weeks(int32_t value);
  private:
  int32_t _internal_playtime_2weeks() const;
  void _internal_set_playtime_2weeks(int32_t value);
  public:

  // optional int32 playtime_forever = 4;
  bool has_playtime_forever() const;
  private:
  bool _internal_has_playtime_forever() const;
  public:
  void clear_playtime_forever();
  int32_t playtime_forever() const;
  void set_playtime_forever(int32_t value);
  private:
  int32_t _internal_playtime_forever() const;
  void _internal_set_playtime_forever(int32_t value);
  public:

  // optional int32 playtime_windows_forever = 8;
  bool has_playtime_windows_forever() const;
  private:
  bool _internal_has_playtime_windows_forever() const;
  public:
  void clear_playtime_windows_forever();
  int32_t playtime_windows_forever() const;
  void set_playtime_windows_forever(int32_t value);
  private:
  int32_t _internal_playtime_windows_forever() const;
  void _internal_set_playtime_windows_forever(int32_t value);
  public:

  // optional int32 playtime_mac_forever = 9;
  bool has_playtime_mac_forever() const;
  private:
  bool _internal_has_playtime_mac_forever() const;
  public:
  void clear_playtime_mac_forever();
  int32_t playtime_mac_forever() const;
  void set_playtime_mac_forever(int32_t value);
  private:
  int32_t _internal_playtime_mac_forever() const;
  void _internal_set_playtime_mac_forever(int32_t value);
  public:

  // optional int32 playtime_linux_forever = 10;
  bool has_playtime_linux_forever() const;
  private:
  bool _internal_has_playtime_linux_forever() const;
  public:
  void clear_playtime_linux_forever();
  int32_t playtime_linux_forever() const;
  void set_playtime_linux_forever(int32_t value);
  private:
  int32_t _internal_playtime_linux_forever() const;
  void _internal_set_playtime_linux_forever(int32_t value);
  public:

  // optional uint32 rtime_last_played = 11;
  bool has_rtime_last_played() const;
  private:
  bool _internal_has_rtime_last_played() const;
  public:
  void clear_rtime_last_played();
  uint32_t rtime_last_played() const;
  void set_rtime_last_played(uint32_t value);
  private:
  uint32_t _internal_rtime_last_played() const;
  void _internal_set_rtime_last_played(uint32_t value);
  public:

  // optional bool has_community_visible_stats = 7;
  bool has_has_community_visible_stats() const;
  private:
  bool _internal_has_has_community_visible_stats() const;
  public:
  void clear_has_community_visible_stats();
  bool has_community_visible_stats() const;
  void set_has_community_visible_stats(bool value);
  private:
  bool _internal_has_community_visible_stats() const;
  void _internal_set_has_community_visible_stats(bool value);
  public:

  // optional bool has_workshop = 14;
  bool has_has_workshop() const;
  private:
  bool _internal_has_has_workshop() const;
  public:
  void clear_has_workshop();
  bool has_workshop() const;
  void set_has_workshop(bool value);
  private:
  bool _internal_has_workshop() const;
  void _internal_set_has_workshop(bool value);
  public:

  // optional bool has_market = 15;
  bool has_has_market() const;
  private:
  bool _internal_has_has_market() const;
  public:
  void clear_has_market();
  bool has_market() const;
  void set_has_market(bool value);
  private:
  bool _internal_has_market() const;
  void _internal_set_has_market(bool value);
  public:

  // optional bool has_dlc = 16;
  bool has_has_dlc() const;
  private:
  bool _internal_has_has_dlc() const;
  public:
  void clear_has_dlc();
  bool has_dlc() const;
  void set_has_dlc(bool value);
  private:
  bool _internal_has_dlc() const;
  void _internal_set_has_dlc(bool value);
  public:

  // optional bool has_leaderboards = 17;
  bool has_has_leaderboards() const;
  private:
  bool _internal_has_has_leaderboards() const;
  public:
  void clear_has_leaderboards();
  bool has_leaderboards() const;
  void set_has_leaderboards(bool value);
  private:
  bool _internal_has_leaderboards() const;
  void _internal_set_has_leaderboards(bool value);
  public:

  // optional int32 playtime_disconnected = 19;
  bool has_playtime_disconnected() const;
  private:
  bool _internal_has_playtime_disconnected() const;
  public:
  void clear_playtime_disconnected();
  int32_t playtime_disconnected() const;
  void set_playtime_disconnected(int32_t value);
  private:
  int32_t _internal_playtime_disconnected() const;
  void _internal_set_playtime_disconnected(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPlayer_GetOwnedGames_Response.Game)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > content_descriptorids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr img_icon_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr capsule_filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sort_as_;
  int32_t appid_;
  int32_t playtime_2weeks_;
  int32_t playtime_forever_;
  int32_t playtime_windows_forever_;
  int32_t playtime_mac_forever_;
  int32_t playtime_linux_forever_;
  uint32_t rtime_last_played_;
  bool has_community_visible_stats_;
  bool has_workshop_;
  bool has_market_;
  bool has_dlc_;
  bool has_leaderboards_;
  int32_t playtime_disconnected_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetOwnedGames_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_GetOwnedGames_Response) */ {
 public:
  inline CPlayer_GetOwnedGames_Response() : CPlayer_GetOwnedGames_Response(nullptr) {}
  ~CPlayer_GetOwnedGames_Response() override;
  explicit constexpr CPlayer_GetOwnedGames_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetOwnedGames_Response(const CPlayer_GetOwnedGames_Response& from);
  CPlayer_GetOwnedGames_Response(CPlayer_GetOwnedGames_Response&& from) noexcept
    : CPlayer_GetOwnedGames_Response() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetOwnedGames_Response& operator=(const CPlayer_GetOwnedGames_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetOwnedGames_Response& operator=(CPlayer_GetOwnedGames_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetOwnedGames_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetOwnedGames_Response* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetOwnedGames_Response*>(
               &_CPlayer_GetOwnedGames_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CPlayer_GetOwnedGames_Response& a, CPlayer_GetOwnedGames_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetOwnedGames_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetOwnedGames_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetOwnedGames_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetOwnedGames_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_GetOwnedGames_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_GetOwnedGames_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetOwnedGames_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetOwnedGames_Response";
  }
  protected:
  explicit CPlayer_GetOwnedGames_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CPlayer_GetOwnedGames_Response_Game Game;

  // accessors -------------------------------------------------------

  enum : int {
    kGamesFieldNumber = 2,
    kGameCountFieldNumber = 1,
  };
  // repeated .CPlayer_GetOwnedGames_Response.Game games = 2;
  int games_size() const;
  private:
  int _internal_games_size() const;
  public:
  void clear_games();
  ::CPlayer_GetOwnedGames_Response_Game* mutable_games(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetOwnedGames_Response_Game >*
      mutable_games();
  private:
  const ::CPlayer_GetOwnedGames_Response_Game& _internal_games(int index) const;
  ::CPlayer_GetOwnedGames_Response_Game* _internal_add_games();
  public:
  const ::CPlayer_GetOwnedGames_Response_Game& games(int index) const;
  ::CPlayer_GetOwnedGames_Response_Game* add_games();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetOwnedGames_Response_Game >&
      games() const;

  // optional uint32 game_count = 1;
  bool has_game_count() const;
  private:
  bool _internal_has_game_count() const;
  public:
  void clear_game_count();
  uint32_t game_count() const;
  void set_game_count(uint32_t value);
  private:
  uint32_t _internal_game_count() const;
  void _internal_set_game_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPlayer_GetOwnedGames_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetOwnedGames_Response_Game > games_;
  uint32_t game_count_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetPlayNext_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_GetPlayNext_Request) */ {
 public:
  inline CPlayer_GetPlayNext_Request() : CPlayer_GetPlayNext_Request(nullptr) {}
  ~CPlayer_GetPlayNext_Request() override;
  explicit constexpr CPlayer_GetPlayNext_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetPlayNext_Request(const CPlayer_GetPlayNext_Request& from);
  CPlayer_GetPlayNext_Request(CPlayer_GetPlayNext_Request&& from) noexcept
    : CPlayer_GetPlayNext_Request() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetPlayNext_Request& operator=(const CPlayer_GetPlayNext_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetPlayNext_Request& operator=(CPlayer_GetPlayNext_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetPlayNext_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetPlayNext_Request* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetPlayNext_Request*>(
               &_CPlayer_GetPlayNext_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CPlayer_GetPlayNext_Request& a, CPlayer_GetPlayNext_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetPlayNext_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetPlayNext_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetPlayNext_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetPlayNext_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_GetPlayNext_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_GetPlayNext_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetPlayNext_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetPlayNext_Request";
  }
  protected:
  explicit CPlayer_GetPlayNext_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIgnoreAppidsFieldNumber = 2,
    kMaxAgeSecondsFieldNumber = 1,
  };
  // repeated uint32 ignore_appids = 2;
  int ignore_appids_size() const;
  private:
  int _internal_ignore_appids_size() const;
  public:
  void clear_ignore_appids();
  private:
  uint32_t _internal_ignore_appids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_ignore_appids() const;
  void _internal_add_ignore_appids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_ignore_appids();
  public:
  uint32_t ignore_appids(int index) const;
  void set_ignore_appids(int index, uint32_t value);
  void add_ignore_appids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      ignore_appids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_ignore_appids();

  // optional uint32 max_age_seconds = 1;
  bool has_max_age_seconds() const;
  private:
  bool _internal_has_max_age_seconds() const;
  public:
  void clear_max_age_seconds();
  uint32_t max_age_seconds() const;
  void set_max_age_seconds(uint32_t value);
  private:
  uint32_t _internal_max_age_seconds() const;
  void _internal_set_max_age_seconds(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPlayer_GetPlayNext_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > ignore_appids_;
  uint32_t max_age_seconds_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetPlayNext_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_GetPlayNext_Response) */ {
 public:
  inline CPlayer_GetPlayNext_Response() : CPlayer_GetPlayNext_Response(nullptr) {}
  ~CPlayer_GetPlayNext_Response() override;
  explicit constexpr CPlayer_GetPlayNext_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetPlayNext_Response(const CPlayer_GetPlayNext_Response& from);
  CPlayer_GetPlayNext_Response(CPlayer_GetPlayNext_Response&& from) noexcept
    : CPlayer_GetPlayNext_Response() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetPlayNext_Response& operator=(const CPlayer_GetPlayNext_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetPlayNext_Response& operator=(CPlayer_GetPlayNext_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetPlayNext_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetPlayNext_Response* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetPlayNext_Response*>(
               &_CPlayer_GetPlayNext_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CPlayer_GetPlayNext_Response& a, CPlayer_GetPlayNext_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetPlayNext_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetPlayNext_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetPlayNext_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetPlayNext_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_GetPlayNext_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_GetPlayNext_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetPlayNext_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetPlayNext_Response";
  }
  protected:
  explicit CPlayer_GetPlayNext_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppidsFieldNumber = 2,
    kLastUpdateTimeFieldNumber = 1,
  };
  // repeated uint32 appids = 2;
  int appids_size() const;
  private:
  int _internal_appids_size() const;
  public:
  void clear_appids();
  private:
  uint32_t _internal_appids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_appids() const;
  void _internal_add_appids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_appids();
  public:
  uint32_t appids(int index) const;
  void set_appids(int index, uint32_t value);
  void add_appids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      appids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_appids();

  // optional uint32 last_update_time = 1;
  bool has_last_update_time() const;
  private:
  bool _internal_has_last_update_time() const;
  public:
  void clear_last_update_time();
  uint32_t last_update_time() const;
  void set_last_update_time(uint32_t value);
  private:
  uint32_t _internal_last_update_time() const;
  void _internal_set_last_update_time(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPlayer_GetPlayNext_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > appids_;
  uint32_t last_update_time_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetFriendsGameplayInfo_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_GetFriendsGameplayInfo_Request) */ {
 public:
  inline CPlayer_GetFriendsGameplayInfo_Request() : CPlayer_GetFriendsGameplayInfo_Request(nullptr) {}
  ~CPlayer_GetFriendsGameplayInfo_Request() override;
  explicit constexpr CPlayer_GetFriendsGameplayInfo_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetFriendsGameplayInfo_Request(const CPlayer_GetFriendsGameplayInfo_Request& from);
  CPlayer_GetFriendsGameplayInfo_Request(CPlayer_GetFriendsGameplayInfo_Request&& from) noexcept
    : CPlayer_GetFriendsGameplayInfo_Request() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetFriendsGameplayInfo_Request& operator=(const CPlayer_GetFriendsGameplayInfo_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetFriendsGameplayInfo_Request& operator=(CPlayer_GetFriendsGameplayInfo_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetFriendsGameplayInfo_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetFriendsGameplayInfo_Request* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetFriendsGameplayInfo_Request*>(
               &_CPlayer_GetFriendsGameplayInfo_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CPlayer_GetFriendsGameplayInfo_Request& a, CPlayer_GetFriendsGameplayInfo_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetFriendsGameplayInfo_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetFriendsGameplayInfo_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetFriendsGameplayInfo_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetFriendsGameplayInfo_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_GetFriendsGameplayInfo_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_GetFriendsGameplayInfo_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetFriendsGameplayInfo_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetFriendsGameplayInfo_Request";
  }
  protected:
  explicit CPlayer_GetFriendsGameplayInfo_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppidFieldNumber = 1,
  };
  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPlayer_GetFriendsGameplayInfo_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t appid_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo) */ {
 public:
  inline CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo() : CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo(nullptr) {}
  ~CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo() override;
  explicit constexpr CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo(const CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo& from);
  CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo(CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo&& from) noexcept
    : CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo& operator=(const CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo& operator=(CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo*>(
               &_CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo& a, CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo";
  }
  protected:
  explicit CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidFieldNumber = 1,
    kMinutesPlayedFieldNumber = 2,
    kMinutesPlayedForeverFieldNumber = 3,
  };
  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional uint32 minutes_played = 2;
  bool has_minutes_played() const;
  private:
  bool _internal_has_minutes_played() const;
  public:
  void clear_minutes_played();
  uint32_t minutes_played() const;
  void set_minutes_played(uint32_t value);
  private:
  uint32_t _internal_minutes_played() const;
  void _internal_set_minutes_played(uint32_t value);
  public:

  // optional uint32 minutes_played_forever = 3;
  bool has_minutes_played_forever() const;
  private:
  bool _internal_has_minutes_played_forever() const;
  public:
  void clear_minutes_played_forever();
  uint32_t minutes_played_forever() const;
  void set_minutes_played_forever(uint32_t value);
  private:
  uint32_t _internal_minutes_played_forever() const;
  void _internal_set_minutes_played_forever(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t steamid_;
  uint32_t minutes_played_;
  uint32_t minutes_played_forever_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo) */ {
 public:
  inline CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo() : CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo(nullptr) {}
  ~CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo() override;
  explicit constexpr CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo(const CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo& from);
  CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo(CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo&& from) noexcept
    : CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo& operator=(const CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo& operator=(CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo*>(
               &_CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo& a, CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo";
  }
  protected:
  explicit CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidFieldNumber = 1,
    kMinutesPlayedFieldNumber = 2,
    kMinutesPlayedForeverFieldNumber = 3,
    kInWishlistFieldNumber = 4,
    kOwnedFieldNumber = 5,
  };
  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional uint32 minutes_played = 2;
  bool has_minutes_played() const;
  private:
  bool _internal_has_minutes_played() const;
  public:
  void clear_minutes_played();
  uint32_t minutes_played() const;
  void set_minutes_played(uint32_t value);
  private:
  uint32_t _internal_minutes_played() const;
  void _internal_set_minutes_played(uint32_t value);
  public:

  // optional uint32 minutes_played_forever = 3;
  bool has_minutes_played_forever() const;
  private:
  bool _internal_has_minutes_played_forever() const;
  public:
  void clear_minutes_played_forever();
  uint32_t minutes_played_forever() const;
  void set_minutes_played_forever(uint32_t value);
  private:
  uint32_t _internal_minutes_played_forever() const;
  void _internal_set_minutes_played_forever(uint32_t value);
  public:

  // optional bool in_wishlist = 4;
  bool has_in_wishlist() const;
  private:
  bool _internal_has_in_wishlist() const;
  public:
  void clear_in_wishlist();
  bool in_wishlist() const;
  void set_in_wishlist(bool value);
  private:
  bool _internal_in_wishlist() const;
  void _internal_set_in_wishlist(bool value);
  public:

  // optional bool owned = 5;
  bool has_owned() const;
  private:
  bool _internal_has_owned() const;
  public:
  void clear_owned();
  bool owned() const;
  void set_owned(bool value);
  private:
  bool _internal_owned() const;
  void _internal_set_owned(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t steamid_;
  uint32_t minutes_played_;
  uint32_t minutes_played_forever_;
  bool in_wishlist_;
  bool owned_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetFriendsGameplayInfo_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_GetFriendsGameplayInfo_Response) */ {
 public:
  inline CPlayer_GetFriendsGameplayInfo_Response() : CPlayer_GetFriendsGameplayInfo_Response(nullptr) {}
  ~CPlayer_GetFriendsGameplayInfo_Response() override;
  explicit constexpr CPlayer_GetFriendsGameplayInfo_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetFriendsGameplayInfo_Response(const CPlayer_GetFriendsGameplayInfo_Response& from);
  CPlayer_GetFriendsGameplayInfo_Response(CPlayer_GetFriendsGameplayInfo_Response&& from) noexcept
    : CPlayer_GetFriendsGameplayInfo_Response() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetFriendsGameplayInfo_Response& operator=(const CPlayer_GetFriendsGameplayInfo_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetFriendsGameplayInfo_Response& operator=(CPlayer_GetFriendsGameplayInfo_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetFriendsGameplayInfo_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetFriendsGameplayInfo_Response* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetFriendsGameplayInfo_Response*>(
               &_CPlayer_GetFriendsGameplayInfo_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CPlayer_GetFriendsGameplayInfo_Response& a, CPlayer_GetFriendsGameplayInfo_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetFriendsGameplayInfo_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetFriendsGameplayInfo_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetFriendsGameplayInfo_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetFriendsGameplayInfo_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_GetFriendsGameplayInfo_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_GetFriendsGameplayInfo_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetFriendsGameplayInfo_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetFriendsGameplayInfo_Response";
  }
  protected:
  explicit CPlayer_GetFriendsGameplayInfo_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo FriendsGameplayInfo;
  typedef CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo OwnGameplayInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kInGameFieldNumber = 2,
    kPlayedRecentlyFieldNumber = 3,
    kPlayedEverFieldNumber = 4,
    kOwnsFieldNumber = 5,
    kInWishlistFieldNumber = 6,
    kYourInfoFieldNumber = 1,
  };
  // repeated .CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo in_game = 2;
  int in_game_size() const;
  private:
  int _internal_in_game_size() const;
  public:
  void clear_in_game();
  ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo* mutable_in_game(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo >*
      mutable_in_game();
  private:
  const ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo& _internal_in_game(int index) const;
  ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo* _internal_add_in_game();
  public:
  const ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo& in_game(int index) const;
  ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo* add_in_game();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo >&
      in_game() const;

  // repeated .CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo played_recently = 3;
  int played_recently_size() const;
  private:
  int _internal_played_recently_size() const;
  public:
  void clear_played_recently();
  ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo* mutable_played_recently(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo >*
      mutable_played_recently();
  private:
  const ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo& _internal_played_recently(int index) const;
  ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo* _internal_add_played_recently();
  public:
  const ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo& played_recently(int index) const;
  ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo* add_played_recently();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo >&
      played_recently() const;

  // repeated .CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo played_ever = 4;
  int played_ever_size() const;
  private:
  int _internal_played_ever_size() const;
  public:
  void clear_played_ever();
  ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo* mutable_played_ever(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo >*
      mutable_played_ever();
  private:
  const ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo& _internal_played_ever(int index) const;
  ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo* _internal_add_played_ever();
  public:
  const ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo& played_ever(int index) const;
  ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo* add_played_ever();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo >&
      played_ever() const;

  // repeated .CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo owns = 5;
  int owns_size() const;
  private:
  int _internal_owns_size() const;
  public:
  void clear_owns();
  ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo* mutable_owns(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo >*
      mutable_owns();
  private:
  const ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo& _internal_owns(int index) const;
  ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo* _internal_add_owns();
  public:
  const ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo& owns(int index) const;
  ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo* add_owns();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo >&
      owns() const;

  // repeated .CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo in_wishlist = 6;
  int in_wishlist_size() const;
  private:
  int _internal_in_wishlist_size() const;
  public:
  void clear_in_wishlist();
  ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo* mutable_in_wishlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo >*
      mutable_in_wishlist();
  private:
  const ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo& _internal_in_wishlist(int index) const;
  ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo* _internal_add_in_wishlist();
  public:
  const ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo& in_wishlist(int index) const;
  ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo* add_in_wishlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo >&
      in_wishlist() const;

  // optional .CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo your_info = 1;
  bool has_your_info() const;
  private:
  bool _internal_has_your_info() const;
  public:
  void clear_your_info();
  const ::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo& your_info() const;
  PROTOBUF_NODISCARD ::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo* release_your_info();
  ::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo* mutable_your_info();
  void set_allocated_your_info(::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo* your_info);
  private:
  const ::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo& _internal_your_info() const;
  ::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo* _internal_mutable_your_info();
  public:
  void unsafe_arena_set_allocated_your_info(
      ::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo* your_info);
  ::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo* unsafe_arena_release_your_info();

  // @@protoc_insertion_point(class_scope:CPlayer_GetFriendsGameplayInfo_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo > in_game_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo > played_recently_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo > played_ever_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo > owns_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo > in_wishlist_;
  ::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo* your_info_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetGameBadgeLevels_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_GetGameBadgeLevels_Request) */ {
 public:
  inline CPlayer_GetGameBadgeLevels_Request() : CPlayer_GetGameBadgeLevels_Request(nullptr) {}
  ~CPlayer_GetGameBadgeLevels_Request() override;
  explicit constexpr CPlayer_GetGameBadgeLevels_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetGameBadgeLevels_Request(const CPlayer_GetGameBadgeLevels_Request& from);
  CPlayer_GetGameBadgeLevels_Request(CPlayer_GetGameBadgeLevels_Request&& from) noexcept
    : CPlayer_GetGameBadgeLevels_Request() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetGameBadgeLevels_Request& operator=(const CPlayer_GetGameBadgeLevels_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetGameBadgeLevels_Request& operator=(CPlayer_GetGameBadgeLevels_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetGameBadgeLevels_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetGameBadgeLevels_Request* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetGameBadgeLevels_Request*>(
               &_CPlayer_GetGameBadgeLevels_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CPlayer_GetGameBadgeLevels_Request& a, CPlayer_GetGameBadgeLevels_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetGameBadgeLevels_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetGameBadgeLevels_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetGameBadgeLevels_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetGameBadgeLevels_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_GetGameBadgeLevels_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_GetGameBadgeLevels_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetGameBadgeLevels_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetGameBadgeLevels_Request";
  }
  protected:
  explicit CPlayer_GetGameBadgeLevels_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppidFieldNumber = 1,
  };
  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPlayer_GetGameBadgeLevels_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t appid_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetGameBadgeLevels_Response_Badge final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_GetGameBadgeLevels_Response.Badge) */ {
 public:
  inline CPlayer_GetGameBadgeLevels_Response_Badge() : CPlayer_GetGameBadgeLevels_Response_Badge(nullptr) {}
  ~CPlayer_GetGameBadgeLevels_Response_Badge() override;
  explicit constexpr CPlayer_GetGameBadgeLevels_Response_Badge(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetGameBadgeLevels_Response_Badge(const CPlayer_GetGameBadgeLevels_Response_Badge& from);
  CPlayer_GetGameBadgeLevels_Response_Badge(CPlayer_GetGameBadgeLevels_Response_Badge&& from) noexcept
    : CPlayer_GetGameBadgeLevels_Response_Badge() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetGameBadgeLevels_Response_Badge& operator=(const CPlayer_GetGameBadgeLevels_Response_Badge& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetGameBadgeLevels_Response_Badge& operator=(CPlayer_GetGameBadgeLevels_Response_Badge&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetGameBadgeLevels_Response_Badge& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetGameBadgeLevels_Response_Badge* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetGameBadgeLevels_Response_Badge*>(
               &_CPlayer_GetGameBadgeLevels_Response_Badge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CPlayer_GetGameBadgeLevels_Response_Badge& a, CPlayer_GetGameBadgeLevels_Response_Badge& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetGameBadgeLevels_Response_Badge* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetGameBadgeLevels_Response_Badge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetGameBadgeLevels_Response_Badge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetGameBadgeLevels_Response_Badge>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_GetGameBadgeLevels_Response_Badge& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_GetGameBadgeLevels_Response_Badge& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetGameBadgeLevels_Response_Badge* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetGameBadgeLevels_Response.Badge";
  }
  protected:
  explicit CPlayer_GetGameBadgeLevels_Response_Badge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLevelFieldNumber = 1,
    kSeriesFieldNumber = 2,
    kBorderColorFieldNumber = 3,
  };
  // optional int32 level = 1;
  bool has_level() const;
  private:
  bool _internal_has_level() const;
  public:
  void clear_level();
  int32_t level() const;
  void set_level(int32_t value);
  private:
  int32_t _internal_level() const;
  void _internal_set_level(int32_t value);
  public:

  // optional int32 series = 2;
  bool has_series() const;
  private:
  bool _internal_has_series() const;
  public:
  void clear_series();
  int32_t series() const;
  void set_series(int32_t value);
  private:
  int32_t _internal_series() const;
  void _internal_set_series(int32_t value);
  public:

  // optional uint32 border_color = 3;
  bool has_border_color() const;
  private:
  bool _internal_has_border_color() const;
  public:
  void clear_border_color();
  uint32_t border_color() const;
  void set_border_color(uint32_t value);
  private:
  uint32_t _internal_border_color() const;
  void _internal_set_border_color(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPlayer_GetGameBadgeLevels_Response.Badge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t level_;
  int32_t series_;
  uint32_t border_color_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetGameBadgeLevels_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_GetGameBadgeLevels_Response) */ {
 public:
  inline CPlayer_GetGameBadgeLevels_Response() : CPlayer_GetGameBadgeLevels_Response(nullptr) {}
  ~CPlayer_GetGameBadgeLevels_Response() override;
  explicit constexpr CPlayer_GetGameBadgeLevels_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetGameBadgeLevels_Response(const CPlayer_GetGameBadgeLevels_Response& from);
  CPlayer_GetGameBadgeLevels_Response(CPlayer_GetGameBadgeLevels_Response&& from) noexcept
    : CPlayer_GetGameBadgeLevels_Response() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetGameBadgeLevels_Response& operator=(const CPlayer_GetGameBadgeLevels_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetGameBadgeLevels_Response& operator=(CPlayer_GetGameBadgeLevels_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetGameBadgeLevels_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetGameBadgeLevels_Response* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetGameBadgeLevels_Response*>(
               &_CPlayer_GetGameBadgeLevels_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CPlayer_GetGameBadgeLevels_Response& a, CPlayer_GetGameBadgeLevels_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetGameBadgeLevels_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetGameBadgeLevels_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetGameBadgeLevels_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetGameBadgeLevels_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_GetGameBadgeLevels_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_GetGameBadgeLevels_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetGameBadgeLevels_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetGameBadgeLevels_Response";
  }
  protected:
  explicit CPlayer_GetGameBadgeLevels_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CPlayer_GetGameBadgeLevels_Response_Badge Badge;

  // accessors -------------------------------------------------------

  enum : int {
    kBadgesFieldNumber = 2,
    kPlayerLevelFieldNumber = 1,
  };
  // repeated .CPlayer_GetGameBadgeLevels_Response.Badge badges = 2;
  int badges_size() const;
  private:
  int _internal_badges_size() const;
  public:
  void clear_badges();
  ::CPlayer_GetGameBadgeLevels_Response_Badge* mutable_badges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetGameBadgeLevels_Response_Badge >*
      mutable_badges();
  private:
  const ::CPlayer_GetGameBadgeLevels_Response_Badge& _internal_badges(int index) const;
  ::CPlayer_GetGameBadgeLevels_Response_Badge* _internal_add_badges();
  public:
  const ::CPlayer_GetGameBadgeLevels_Response_Badge& badges(int index) const;
  ::CPlayer_GetGameBadgeLevels_Response_Badge* add_badges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetGameBadgeLevels_Response_Badge >&
      badges() const;

  // optional uint32 player_level = 1;
  bool has_player_level() const;
  private:
  bool _internal_has_player_level() const;
  public:
  void clear_player_level();
  uint32_t player_level() const;
  void set_player_level(uint32_t value);
  private:
  uint32_t _internal_player_level() const;
  void _internal_set_player_level(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPlayer_GetGameBadgeLevels_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetGameBadgeLevels_Response_Badge > badges_;
  uint32_t player_level_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetProfileBackground_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_GetProfileBackground_Request) */ {
 public:
  inline CPlayer_GetProfileBackground_Request() : CPlayer_GetProfileBackground_Request(nullptr) {}
  ~CPlayer_GetProfileBackground_Request() override;
  explicit constexpr CPlayer_GetProfileBackground_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetProfileBackground_Request(const CPlayer_GetProfileBackground_Request& from);
  CPlayer_GetProfileBackground_Request(CPlayer_GetProfileBackground_Request&& from) noexcept
    : CPlayer_GetProfileBackground_Request() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetProfileBackground_Request& operator=(const CPlayer_GetProfileBackground_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetProfileBackground_Request& operator=(CPlayer_GetProfileBackground_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetProfileBackground_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetProfileBackground_Request* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetProfileBackground_Request*>(
               &_CPlayer_GetProfileBackground_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CPlayer_GetProfileBackground_Request& a, CPlayer_GetProfileBackground_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetProfileBackground_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetProfileBackground_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetProfileBackground_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetProfileBackground_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_GetProfileBackground_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_GetProfileBackground_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetProfileBackground_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetProfileBackground_Request";
  }
  protected:
  explicit CPlayer_GetProfileBackground_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLanguageFieldNumber = 2,
    kSteamidFieldNumber = 1,
  };
  // optional string language = 2;
  bool has_language() const;
  private:
  bool _internal_has_language() const;
  public:
  void clear_language();
  const std::string& language() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language();
  PROTOBUF_NODISCARD std::string* release_language();
  void set_allocated_language(std::string* language);
  private:
  const std::string& _internal_language() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language(const std::string& value);
  std::string* _internal_mutable_language();
  public:

  // optional fixed64 steamid = 1 [(.description) = "The player we\'re asking about"];
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPlayer_GetProfileBackground_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
  uint64_t steamid_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class ProfileItem_ProfileColor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProfileItem.ProfileColor) */ {
 public:
  inline ProfileItem_ProfileColor() : ProfileItem_ProfileColor(nullptr) {}
  ~ProfileItem_ProfileColor() override;
  explicit constexpr ProfileItem_ProfileColor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProfileItem_ProfileColor(const ProfileItem_ProfileColor& from);
  ProfileItem_ProfileColor(ProfileItem_ProfileColor&& from) noexcept
    : ProfileItem_ProfileColor() {
    *this = ::std::move(from);
  }

  inline ProfileItem_ProfileColor& operator=(const ProfileItem_ProfileColor& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfileItem_ProfileColor& operator=(ProfileItem_ProfileColor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProfileItem_ProfileColor& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProfileItem_ProfileColor* internal_default_instance() {
    return reinterpret_cast<const ProfileItem_ProfileColor*>(
               &_ProfileItem_ProfileColor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ProfileItem_ProfileColor& a, ProfileItem_ProfileColor& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfileItem_ProfileColor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProfileItem_ProfileColor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProfileItem_ProfileColor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProfileItem_ProfileColor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProfileItem_ProfileColor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProfileItem_ProfileColor& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfileItem_ProfileColor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProfileItem.ProfileColor";
  }
  protected:
  explicit ProfileItem_ProfileColor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStyleNameFieldNumber = 1,
    kColorFieldNumber = 2,
  };
  // optional string style_name = 1 [(.description) = "EProfileColorStyle string version"];
  bool has_style_name() const;
  private:
  bool _internal_has_style_name() const;
  public:
  void clear_style_name();
  const std::string& style_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_style_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_style_name();
  PROTOBUF_NODISCARD std::string* release_style_name();
  void set_allocated_style_name(std::string* style_name);
  private:
  const std::string& _internal_style_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_style_name(const std::string& value);
  std::string* _internal_mutable_style_name();
  public:

  // optional string color = 2 [(.description) = "hex color to apply"];
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  const std::string& color() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_color(ArgT0&& arg0, ArgT... args);
  std::string* mutable_color();
  PROTOBUF_NODISCARD std::string* release_color();
  void set_allocated_color(std::string* color);
  private:
  const std::string& _internal_color() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_color(const std::string& value);
  std::string* _internal_mutable_color();
  public:

  // @@protoc_insertion_point(class_scope:ProfileItem.ProfileColor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr style_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr color_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class ProfileItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProfileItem) */ {
 public:
  inline ProfileItem() : ProfileItem(nullptr) {}
  ~ProfileItem() override;
  explicit constexpr ProfileItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProfileItem(const ProfileItem& from);
  ProfileItem(ProfileItem&& from) noexcept
    : ProfileItem() {
    *this = ::std::move(from);
  }

  inline ProfileItem& operator=(const ProfileItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfileItem& operator=(ProfileItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProfileItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProfileItem* internal_default_instance() {
    return reinterpret_cast<const ProfileItem*>(
               &_ProfileItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ProfileItem& a, ProfileItem& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfileItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProfileItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProfileItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProfileItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProfileItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProfileItem& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfileItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProfileItem";
  }
  protected:
  explicit ProfileItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ProfileItem_ProfileColor ProfileColor;

  // accessors -------------------------------------------------------

  enum : int {
    kProfileColorsFieldNumber = 15,
    kImageSmallFieldNumber = 2,
    kImageLargeFieldNumber = 3,
    kNameFieldNumber = 4,
    kItemTitleFieldNumber = 5,
    kItemDescriptionFieldNumber = 6,
    kMovieWebmFieldNumber = 10,
    kMovieMp4FieldNumber = 11,
    kMovieWebmSmallFieldNumber = 13,
    kMovieMp4SmallFieldNumber = 14,
    kCommunityitemidFieldNumber = 1,
    kAppidFieldNumber = 7,
    kItemTypeFieldNumber = 8,
    kItemClassFieldNumber = 9,
    kEquippedFlagsFieldNumber = 12,
  };
  // repeated .ProfileItem.ProfileColor profile_colors = 15 [(.description) = "Game profile css colors"];
  int profile_colors_size() const;
  private:
  int _internal_profile_colors_size() const;
  public:
  void clear_profile_colors();
  ::ProfileItem_ProfileColor* mutable_profile_colors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfileItem_ProfileColor >*
      mutable_profile_colors();
  private:
  const ::ProfileItem_ProfileColor& _internal_profile_colors(int index) const;
  ::ProfileItem_ProfileColor* _internal_add_profile_colors();
  public:
  const ::ProfileItem_ProfileColor& profile_colors(int index) const;
  ::ProfileItem_ProfileColor* add_profile_colors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfileItem_ProfileColor >&
      profile_colors() const;

  // optional string image_small = 2 [(.description) = "small image used in backpack or selection"];
  bool has_image_small() const;
  private:
  bool _internal_has_image_small() const;
  public:
  void clear_image_small();
  const std::string& image_small() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_image_small(ArgT0&& arg0, ArgT... args);
  std::string* mutable_image_small();
  PROTOBUF_NODISCARD std::string* release_image_small();
  void set_allocated_image_small(std::string* image_small);
  private:
  const std::string& _internal_image_small() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image_small(const std::string& value);
  std::string* _internal_mutable_image_small();
  public:

  // optional string image_large = 3 [(.description) = "the image itself"];
  bool has_image_large() const;
  private:
  bool _internal_has_image_large() const;
  public:
  void clear_image_large();
  const std::string& image_large() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_image_large(ArgT0&& arg0, ArgT... args);
  std::string* mutable_image_large();
  PROTOBUF_NODISCARD std::string* release_image_large();
  void set_allocated_image_large(std::string* image_large);
  private:
  const std::string& _internal_image_large() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image_large(const std::string& value);
  std::string* _internal_mutable_image_large();
  public:

  // optional string name = 4 [(.description) = "english name"];
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string item_title = 5 [(.description) = "localized title"];
  bool has_item_title() const;
  private:
  bool _internal_has_item_title() const;
  public:
  void clear_item_title();
  const std::string& item_title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_item_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_item_title();
  PROTOBUF_NODISCARD std::string* release_item_title();
  void set_allocated_item_title(std::string* item_title);
  private:
  const std::string& _internal_item_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_item_title(const std::string& value);
  std::string* _internal_mutable_item_title();
  public:

  // optional string item_description = 6 [(.description) = "localized description"];
  bool has_item_description() const;
  private:
  bool _internal_has_item_description() const;
  public:
  void clear_item_description();
  const std::string& item_description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_item_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_item_description();
  PROTOBUF_NODISCARD std::string* release_item_description();
  void set_allocated_item_description(std::string* item_description);
  private:
  const std::string& _internal_item_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_item_description(const std::string& value);
  std::string* _internal_mutable_item_description();
  public:

  // optional string movie_webm = 10 [(.description) = "URL to webm, if any"];
  bool has_movie_webm() const;
  private:
  bool _internal_has_movie_webm() const;
  public:
  void clear_movie_webm();
  const std::string& movie_webm() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_movie_webm(ArgT0&& arg0, ArgT... args);
  std::string* mutable_movie_webm();
  PROTOBUF_NODISCARD std::string* release_movie_webm();
  void set_allocated_movie_webm(std::string* movie_webm);
  private:
  const std::string& _internal_movie_webm() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_movie_webm(const std::string& value);
  std::string* _internal_mutable_movie_webm();
  public:

  // optional string movie_mp4 = 11 [(.description) = "URL to mp4, if any"];
  bool has_movie_mp4() const;
  private:
  bool _internal_has_movie_mp4() const;
  public:
  void clear_movie_mp4();
  const std::string& movie_mp4() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_movie_mp4(ArgT0&& arg0, ArgT... args);
  std::string* mutable_movie_mp4();
  PROTOBUF_NODISCARD std::string* release_movie_mp4();
  void set_allocated_movie_mp4(std::string* movie_mp4);
  private:
  const std::string& _internal_movie_mp4() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_movie_mp4(const std::string& value);
  std::string* _internal_mutable_movie_mp4();
  public:

  // optional string movie_webm_small = 13 [(.description) = "URL to small webm, if any"];
  bool has_movie_webm_small() const;
  private:
  bool _internal_has_movie_webm_small() const;
  public:
  void clear_movie_webm_small();
  const std::string& movie_webm_small() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_movie_webm_small(ArgT0&& arg0, ArgT... args);
  std::string* mutable_movie_webm_small();
  PROTOBUF_NODISCARD std::string* release_movie_webm_small();
  void set_allocated_movie_webm_small(std::string* movie_webm_small);
  private:
  const std::string& _internal_movie_webm_small() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_movie_webm_small(const std::string& value);
  std::string* _internal_mutable_movie_webm_small();
  public:

  // optional string movie_mp4_small = 14 [(.description) = "URL to small mp4, if any"];
  bool has_movie_mp4_small() const;
  private:
  bool _internal_has_movie_mp4_small() const;
  public:
  void clear_movie_mp4_small();
  const std::string& movie_mp4_small() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_movie_mp4_small(ArgT0&& arg0, ArgT... args);
  std::string* mutable_movie_mp4_small();
  PROTOBUF_NODISCARD std::string* release_movie_mp4_small();
  void set_allocated_movie_mp4_small(std::string* movie_mp4_small);
  private:
  const std::string& _internal_movie_mp4_small() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_movie_mp4_small(const std::string& value);
  std::string* _internal_mutable_movie_mp4_small();
  public:

  // optional uint64 communityitemid = 1;
  bool has_communityitemid() const;
  private:
  bool _internal_has_communityitemid() const;
  public:
  void clear_communityitemid();
  uint64_t communityitemid() const;
  void set_communityitemid(uint64_t value);
  private:
  uint64_t _internal_communityitemid() const;
  void _internal_set_communityitemid(uint64_t value);
  public:

  // optional uint32 appid = 7;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional uint32 item_type = 8;
  bool has_item_type() const;
  private:
  bool _internal_has_item_type() const;
  public:
  void clear_item_type();
  uint32_t item_type() const;
  void set_item_type(uint32_t value);
  private:
  uint32_t _internal_item_type() const;
  void _internal_set_item_type(uint32_t value);
  public:

  // optional uint32 item_class = 9;
  bool has_item_class() const;
  private:
  bool _internal_has_item_class() const;
  public:
  void clear_item_class();
  uint32_t item_class() const;
  void set_item_class(uint32_t value);
  private:
  uint32_t _internal_item_class() const;
  void _internal_set_item_class(uint32_t value);
  public:

  // optional uint32 equipped_flags = 12 [(.description) = "Special flags set when equipped (EProfileItemEquippedFlag)"];
  bool has_equipped_flags() const;
  private:
  bool _internal_has_equipped_flags() const;
  public:
  void clear_equipped_flags();
  uint32_t equipped_flags() const;
  void set_equipped_flags(uint32_t value);
  private:
  uint32_t _internal_equipped_flags() const;
  void _internal_set_equipped_flags(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProfileItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfileItem_ProfileColor > profile_colors_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_small_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_large_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr item_title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr item_description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr movie_webm_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr movie_mp4_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr movie_webm_small_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr movie_mp4_small_;
  uint64_t communityitemid_;
  uint32_t appid_;
  uint32_t item_type_;
  uint32_t item_class_;
  uint32_t equipped_flags_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetProfileBackground_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_GetProfileBackground_Response) */ {
 public:
  inline CPlayer_GetProfileBackground_Response() : CPlayer_GetProfileBackground_Response(nullptr) {}
  ~CPlayer_GetProfileBackground_Response() override;
  explicit constexpr CPlayer_GetProfileBackground_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetProfileBackground_Response(const CPlayer_GetProfileBackground_Response& from);
  CPlayer_GetProfileBackground_Response(CPlayer_GetProfileBackground_Response&& from) noexcept
    : CPlayer_GetProfileBackground_Response() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetProfileBackground_Response& operator=(const CPlayer_GetProfileBackground_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetProfileBackground_Response& operator=(CPlayer_GetProfileBackground_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetProfileBackground_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetProfileBackground_Response* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetProfileBackground_Response*>(
               &_CPlayer_GetProfileBackground_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CPlayer_GetProfileBackground_Response& a, CPlayer_GetProfileBackground_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetProfileBackground_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetProfileBackground_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetProfileBackground_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetProfileBackground_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_GetProfileBackground_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_GetProfileBackground_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetProfileBackground_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetProfileBackground_Response";
  }
  protected:
  explicit CPlayer_GetProfileBackground_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProfileBackgroundFieldNumber = 1,
  };
  // optional .ProfileItem profile_background = 1;
  bool has_profile_background() const;
  private:
  bool _internal_has_profile_background() const;
  public:
  void clear_profile_background();
  const ::ProfileItem& profile_background() const;
  PROTOBUF_NODISCARD ::ProfileItem* release_profile_background();
  ::ProfileItem* mutable_profile_background();
  void set_allocated_profile_background(::ProfileItem* profile_background);
  private:
  const ::ProfileItem& _internal_profile_background() const;
  ::ProfileItem* _internal_mutable_profile_background();
  public:
  void unsafe_arena_set_allocated_profile_background(
      ::ProfileItem* profile_background);
  ::ProfileItem* unsafe_arena_release_profile_background();

  // @@protoc_insertion_point(class_scope:CPlayer_GetProfileBackground_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::ProfileItem* profile_background_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_SetProfileBackground_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_SetProfileBackground_Request) */ {
 public:
  inline CPlayer_SetProfileBackground_Request() : CPlayer_SetProfileBackground_Request(nullptr) {}
  ~CPlayer_SetProfileBackground_Request() override;
  explicit constexpr CPlayer_SetProfileBackground_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_SetProfileBackground_Request(const CPlayer_SetProfileBackground_Request& from);
  CPlayer_SetProfileBackground_Request(CPlayer_SetProfileBackground_Request&& from) noexcept
    : CPlayer_SetProfileBackground_Request() {
    *this = ::std::move(from);
  }

  inline CPlayer_SetProfileBackground_Request& operator=(const CPlayer_SetProfileBackground_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_SetProfileBackground_Request& operator=(CPlayer_SetProfileBackground_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_SetProfileBackground_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_SetProfileBackground_Request* internal_default_instance() {
    return reinterpret_cast<const CPlayer_SetProfileBackground_Request*>(
               &_CPlayer_SetProfileBackground_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CPlayer_SetProfileBackground_Request& a, CPlayer_SetProfileBackground_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_SetProfileBackground_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_SetProfileBackground_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_SetProfileBackground_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_SetProfileBackground_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_SetProfileBackground_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_SetProfileBackground_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_SetProfileBackground_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_SetProfileBackground_Request";
  }
  protected:
  explicit CPlayer_SetProfileBackground_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommunityitemidFieldNumber = 1,
  };
  // optional uint64 communityitemid = 1;
  bool has_communityitemid() const;
  private:
  bool _internal_has_communityitemid() const;
  public:
  void clear_communityitemid();
  uint64_t communityitemid() const;
  void set_communityitemid(uint64_t value);
  private:
  uint64_t _internal_communityitemid() const;
  void _internal_set_communityitemid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPlayer_SetProfileBackground_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t communityitemid_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_SetProfileBackground_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CPlayer_SetProfileBackground_Response) */ {
 public:
  inline CPlayer_SetProfileBackground_Response() : CPlayer_SetProfileBackground_Response(nullptr) {}
  explicit constexpr CPlayer_SetProfileBackground_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_SetProfileBackground_Response(const CPlayer_SetProfileBackground_Response& from);
  CPlayer_SetProfileBackground_Response(CPlayer_SetProfileBackground_Response&& from) noexcept
    : CPlayer_SetProfileBackground_Response() {
    *this = ::std::move(from);
  }

  inline CPlayer_SetProfileBackground_Response& operator=(const CPlayer_SetProfileBackground_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_SetProfileBackground_Response& operator=(CPlayer_SetProfileBackground_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_SetProfileBackground_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_SetProfileBackground_Response* internal_default_instance() {
    return reinterpret_cast<const CPlayer_SetProfileBackground_Response*>(
               &_CPlayer_SetProfileBackground_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CPlayer_SetProfileBackground_Response& a, CPlayer_SetProfileBackground_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_SetProfileBackground_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_SetProfileBackground_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_SetProfileBackground_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_SetProfileBackground_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CPlayer_SetProfileBackground_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CPlayer_SetProfileBackground_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_SetProfileBackground_Response";
  }
  protected:
  explicit CPlayer_SetProfileBackground_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CPlayer_SetProfileBackground_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetMiniProfileBackground_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_GetMiniProfileBackground_Request) */ {
 public:
  inline CPlayer_GetMiniProfileBackground_Request() : CPlayer_GetMiniProfileBackground_Request(nullptr) {}
  ~CPlayer_GetMiniProfileBackground_Request() override;
  explicit constexpr CPlayer_GetMiniProfileBackground_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetMiniProfileBackground_Request(const CPlayer_GetMiniProfileBackground_Request& from);
  CPlayer_GetMiniProfileBackground_Request(CPlayer_GetMiniProfileBackground_Request&& from) noexcept
    : CPlayer_GetMiniProfileBackground_Request() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetMiniProfileBackground_Request& operator=(const CPlayer_GetMiniProfileBackground_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetMiniProfileBackground_Request& operator=(CPlayer_GetMiniProfileBackground_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetMiniProfileBackground_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetMiniProfileBackground_Request* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetMiniProfileBackground_Request*>(
               &_CPlayer_GetMiniProfileBackground_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CPlayer_GetMiniProfileBackground_Request& a, CPlayer_GetMiniProfileBackground_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetMiniProfileBackground_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetMiniProfileBackground_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetMiniProfileBackground_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetMiniProfileBackground_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_GetMiniProfileBackground_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_GetMiniProfileBackground_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetMiniProfileBackground_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetMiniProfileBackground_Request";
  }
  protected:
  explicit CPlayer_GetMiniProfileBackground_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLanguageFieldNumber = 2,
    kSteamidFieldNumber = 1,
  };
  // optional string language = 2;
  bool has_language() const;
  private:
  bool _internal_has_language() const;
  public:
  void clear_language();
  const std::string& language() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language();
  PROTOBUF_NODISCARD std::string* release_language();
  void set_allocated_language(std::string* language);
  private:
  const std::string& _internal_language() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language(const std::string& value);
  std::string* _internal_mutable_language();
  public:

  // optional fixed64 steamid = 1 [(.description) = "The player we\'re asking about"];
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPlayer_GetMiniProfileBackground_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
  uint64_t steamid_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetMiniProfileBackground_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_GetMiniProfileBackground_Response) */ {
 public:
  inline CPlayer_GetMiniProfileBackground_Response() : CPlayer_GetMiniProfileBackground_Response(nullptr) {}
  ~CPlayer_GetMiniProfileBackground_Response() override;
  explicit constexpr CPlayer_GetMiniProfileBackground_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetMiniProfileBackground_Response(const CPlayer_GetMiniProfileBackground_Response& from);
  CPlayer_GetMiniProfileBackground_Response(CPlayer_GetMiniProfileBackground_Response&& from) noexcept
    : CPlayer_GetMiniProfileBackground_Response() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetMiniProfileBackground_Response& operator=(const CPlayer_GetMiniProfileBackground_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetMiniProfileBackground_Response& operator=(CPlayer_GetMiniProfileBackground_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetMiniProfileBackground_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetMiniProfileBackground_Response* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetMiniProfileBackground_Response*>(
               &_CPlayer_GetMiniProfileBackground_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CPlayer_GetMiniProfileBackground_Response& a, CPlayer_GetMiniProfileBackground_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetMiniProfileBackground_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetMiniProfileBackground_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetMiniProfileBackground_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetMiniProfileBackground_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_GetMiniProfileBackground_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_GetMiniProfileBackground_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetMiniProfileBackground_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetMiniProfileBackground_Response";
  }
  protected:
  explicit CPlayer_GetMiniProfileBackground_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProfileBackgroundFieldNumber = 1,
  };
  // optional .ProfileItem profile_background = 1;
  bool has_profile_background() const;
  private:
  bool _internal_has_profile_background() const;
  public:
  void clear_profile_background();
  const ::ProfileItem& profile_background() const;
  PROTOBUF_NODISCARD ::ProfileItem* release_profile_background();
  ::ProfileItem* mutable_profile_background();
  void set_allocated_profile_background(::ProfileItem* profile_background);
  private:
  const ::ProfileItem& _internal_profile_background() const;
  ::ProfileItem* _internal_mutable_profile_background();
  public:
  void unsafe_arena_set_allocated_profile_background(
      ::ProfileItem* profile_background);
  ::ProfileItem* unsafe_arena_release_profile_background();

  // @@protoc_insertion_point(class_scope:CPlayer_GetMiniProfileBackground_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::ProfileItem* profile_background_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_SetMiniProfileBackground_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_SetMiniProfileBackground_Request) */ {
 public:
  inline CPlayer_SetMiniProfileBackground_Request() : CPlayer_SetMiniProfileBackground_Request(nullptr) {}
  ~CPlayer_SetMiniProfileBackground_Request() override;
  explicit constexpr CPlayer_SetMiniProfileBackground_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_SetMiniProfileBackground_Request(const CPlayer_SetMiniProfileBackground_Request& from);
  CPlayer_SetMiniProfileBackground_Request(CPlayer_SetMiniProfileBackground_Request&& from) noexcept
    : CPlayer_SetMiniProfileBackground_Request() {
    *this = ::std::move(from);
  }

  inline CPlayer_SetMiniProfileBackground_Request& operator=(const CPlayer_SetMiniProfileBackground_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_SetMiniProfileBackground_Request& operator=(CPlayer_SetMiniProfileBackground_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_SetMiniProfileBackground_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_SetMiniProfileBackground_Request* internal_default_instance() {
    return reinterpret_cast<const CPlayer_SetMiniProfileBackground_Request*>(
               &_CPlayer_SetMiniProfileBackground_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(CPlayer_SetMiniProfileBackground_Request& a, CPlayer_SetMiniProfileBackground_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_SetMiniProfileBackground_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_SetMiniProfileBackground_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_SetMiniProfileBackground_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_SetMiniProfileBackground_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_SetMiniProfileBackground_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_SetMiniProfileBackground_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_SetMiniProfileBackground_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_SetMiniProfileBackground_Request";
  }
  protected:
  explicit CPlayer_SetMiniProfileBackground_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommunityitemidFieldNumber = 1,
  };
  // optional uint64 communityitemid = 1;
  bool has_communityitemid() const;
  private:
  bool _internal_has_communityitemid() const;
  public:
  void clear_communityitemid();
  uint64_t communityitemid() const;
  void set_communityitemid(uint64_t value);
  private:
  uint64_t _internal_communityitemid() const;
  void _internal_set_communityitemid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPlayer_SetMiniProfileBackground_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t communityitemid_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_SetMiniProfileBackground_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CPlayer_SetMiniProfileBackground_Response) */ {
 public:
  inline CPlayer_SetMiniProfileBackground_Response() : CPlayer_SetMiniProfileBackground_Response(nullptr) {}
  explicit constexpr CPlayer_SetMiniProfileBackground_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_SetMiniProfileBackground_Response(const CPlayer_SetMiniProfileBackground_Response& from);
  CPlayer_SetMiniProfileBackground_Response(CPlayer_SetMiniProfileBackground_Response&& from) noexcept
    : CPlayer_SetMiniProfileBackground_Response() {
    *this = ::std::move(from);
  }

  inline CPlayer_SetMiniProfileBackground_Response& operator=(const CPlayer_SetMiniProfileBackground_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_SetMiniProfileBackground_Response& operator=(CPlayer_SetMiniProfileBackground_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_SetMiniProfileBackground_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_SetMiniProfileBackground_Response* internal_default_instance() {
    return reinterpret_cast<const CPlayer_SetMiniProfileBackground_Response*>(
               &_CPlayer_SetMiniProfileBackground_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(CPlayer_SetMiniProfileBackground_Response& a, CPlayer_SetMiniProfileBackground_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_SetMiniProfileBackground_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_SetMiniProfileBackground_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_SetMiniProfileBackground_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_SetMiniProfileBackground_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CPlayer_SetMiniProfileBackground_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CPlayer_SetMiniProfileBackground_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_SetMiniProfileBackground_Response";
  }
  protected:
  explicit CPlayer_SetMiniProfileBackground_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CPlayer_SetMiniProfileBackground_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetAvatarFrame_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_GetAvatarFrame_Request) */ {
 public:
  inline CPlayer_GetAvatarFrame_Request() : CPlayer_GetAvatarFrame_Request(nullptr) {}
  ~CPlayer_GetAvatarFrame_Request() override;
  explicit constexpr CPlayer_GetAvatarFrame_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetAvatarFrame_Request(const CPlayer_GetAvatarFrame_Request& from);
  CPlayer_GetAvatarFrame_Request(CPlayer_GetAvatarFrame_Request&& from) noexcept
    : CPlayer_GetAvatarFrame_Request() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetAvatarFrame_Request& operator=(const CPlayer_GetAvatarFrame_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetAvatarFrame_Request& operator=(CPlayer_GetAvatarFrame_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetAvatarFrame_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetAvatarFrame_Request* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetAvatarFrame_Request*>(
               &_CPlayer_GetAvatarFrame_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(CPlayer_GetAvatarFrame_Request& a, CPlayer_GetAvatarFrame_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetAvatarFrame_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetAvatarFrame_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetAvatarFrame_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetAvatarFrame_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_GetAvatarFrame_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_GetAvatarFrame_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetAvatarFrame_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetAvatarFrame_Request";
  }
  protected:
  explicit CPlayer_GetAvatarFrame_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLanguageFieldNumber = 2,
    kSteamidFieldNumber = 1,
  };
  // optional string language = 2;
  bool has_language() const;
  private:
  bool _internal_has_language() const;
  public:
  void clear_language();
  const std::string& language() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language();
  PROTOBUF_NODISCARD std::string* release_language();
  void set_allocated_language(std::string* language);
  private:
  const std::string& _internal_language() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language(const std::string& value);
  std::string* _internal_mutable_language();
  public:

  // optional fixed64 steamid = 1 [(.description) = "The player we\'re asking about"];
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPlayer_GetAvatarFrame_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
  uint64_t steamid_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetAvatarFrame_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_GetAvatarFrame_Response) */ {
 public:
  inline CPlayer_GetAvatarFrame_Response() : CPlayer_GetAvatarFrame_Response(nullptr) {}
  ~CPlayer_GetAvatarFrame_Response() override;
  explicit constexpr CPlayer_GetAvatarFrame_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetAvatarFrame_Response(const CPlayer_GetAvatarFrame_Response& from);
  CPlayer_GetAvatarFrame_Response(CPlayer_GetAvatarFrame_Response&& from) noexcept
    : CPlayer_GetAvatarFrame_Response() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetAvatarFrame_Response& operator=(const CPlayer_GetAvatarFrame_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetAvatarFrame_Response& operator=(CPlayer_GetAvatarFrame_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetAvatarFrame_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetAvatarFrame_Response* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetAvatarFrame_Response*>(
               &_CPlayer_GetAvatarFrame_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(CPlayer_GetAvatarFrame_Response& a, CPlayer_GetAvatarFrame_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetAvatarFrame_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetAvatarFrame_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetAvatarFrame_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetAvatarFrame_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_GetAvatarFrame_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_GetAvatarFrame_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetAvatarFrame_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetAvatarFrame_Response";
  }
  protected:
  explicit CPlayer_GetAvatarFrame_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAvatarFrameFieldNumber = 1,
  };
  // optional .ProfileItem avatar_frame = 1;
  bool has_avatar_frame() const;
  private:
  bool _internal_has_avatar_frame() const;
  public:
  void clear_avatar_frame();
  const ::ProfileItem& avatar_frame() const;
  PROTOBUF_NODISCARD ::ProfileItem* release_avatar_frame();
  ::ProfileItem* mutable_avatar_frame();
  void set_allocated_avatar_frame(::ProfileItem* avatar_frame);
  private:
  const ::ProfileItem& _internal_avatar_frame() const;
  ::ProfileItem* _internal_mutable_avatar_frame();
  public:
  void unsafe_arena_set_allocated_avatar_frame(
      ::ProfileItem* avatar_frame);
  ::ProfileItem* unsafe_arena_release_avatar_frame();

  // @@protoc_insertion_point(class_scope:CPlayer_GetAvatarFrame_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::ProfileItem* avatar_frame_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_SetAvatarFrame_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_SetAvatarFrame_Request) */ {
 public:
  inline CPlayer_SetAvatarFrame_Request() : CPlayer_SetAvatarFrame_Request(nullptr) {}
  ~CPlayer_SetAvatarFrame_Request() override;
  explicit constexpr CPlayer_SetAvatarFrame_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_SetAvatarFrame_Request(const CPlayer_SetAvatarFrame_Request& from);
  CPlayer_SetAvatarFrame_Request(CPlayer_SetAvatarFrame_Request&& from) noexcept
    : CPlayer_SetAvatarFrame_Request() {
    *this = ::std::move(from);
  }

  inline CPlayer_SetAvatarFrame_Request& operator=(const CPlayer_SetAvatarFrame_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_SetAvatarFrame_Request& operator=(CPlayer_SetAvatarFrame_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_SetAvatarFrame_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_SetAvatarFrame_Request* internal_default_instance() {
    return reinterpret_cast<const CPlayer_SetAvatarFrame_Request*>(
               &_CPlayer_SetAvatarFrame_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(CPlayer_SetAvatarFrame_Request& a, CPlayer_SetAvatarFrame_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_SetAvatarFrame_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_SetAvatarFrame_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_SetAvatarFrame_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_SetAvatarFrame_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_SetAvatarFrame_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_SetAvatarFrame_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_SetAvatarFrame_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_SetAvatarFrame_Request";
  }
  protected:
  explicit CPlayer_SetAvatarFrame_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommunityitemidFieldNumber = 1,
  };
  // optional uint64 communityitemid = 1;
  bool has_communityitemid() const;
  private:
  bool _internal_has_communityitemid() const;
  public:
  void clear_communityitemid();
  uint64_t communityitemid() const;
  void set_communityitemid(uint64_t value);
  private:
  uint64_t _internal_communityitemid() const;
  void _internal_set_communityitemid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPlayer_SetAvatarFrame_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t communityitemid_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_SetAvatarFrame_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CPlayer_SetAvatarFrame_Response) */ {
 public:
  inline CPlayer_SetAvatarFrame_Response() : CPlayer_SetAvatarFrame_Response(nullptr) {}
  explicit constexpr CPlayer_SetAvatarFrame_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_SetAvatarFrame_Response(const CPlayer_SetAvatarFrame_Response& from);
  CPlayer_SetAvatarFrame_Response(CPlayer_SetAvatarFrame_Response&& from) noexcept
    : CPlayer_SetAvatarFrame_Response() {
    *this = ::std::move(from);
  }

  inline CPlayer_SetAvatarFrame_Response& operator=(const CPlayer_SetAvatarFrame_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_SetAvatarFrame_Response& operator=(CPlayer_SetAvatarFrame_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_SetAvatarFrame_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_SetAvatarFrame_Response* internal_default_instance() {
    return reinterpret_cast<const CPlayer_SetAvatarFrame_Response*>(
               &_CPlayer_SetAvatarFrame_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(CPlayer_SetAvatarFrame_Response& a, CPlayer_SetAvatarFrame_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_SetAvatarFrame_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_SetAvatarFrame_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_SetAvatarFrame_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_SetAvatarFrame_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CPlayer_SetAvatarFrame_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CPlayer_SetAvatarFrame_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_SetAvatarFrame_Response";
  }
  protected:
  explicit CPlayer_SetAvatarFrame_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CPlayer_SetAvatarFrame_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetAnimatedAvatar_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_GetAnimatedAvatar_Request) */ {
 public:
  inline CPlayer_GetAnimatedAvatar_Request() : CPlayer_GetAnimatedAvatar_Request(nullptr) {}
  ~CPlayer_GetAnimatedAvatar_Request() override;
  explicit constexpr CPlayer_GetAnimatedAvatar_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetAnimatedAvatar_Request(const CPlayer_GetAnimatedAvatar_Request& from);
  CPlayer_GetAnimatedAvatar_Request(CPlayer_GetAnimatedAvatar_Request&& from) noexcept
    : CPlayer_GetAnimatedAvatar_Request() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetAnimatedAvatar_Request& operator=(const CPlayer_GetAnimatedAvatar_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetAnimatedAvatar_Request& operator=(CPlayer_GetAnimatedAvatar_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetAnimatedAvatar_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetAnimatedAvatar_Request* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetAnimatedAvatar_Request*>(
               &_CPlayer_GetAnimatedAvatar_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(CPlayer_GetAnimatedAvatar_Request& a, CPlayer_GetAnimatedAvatar_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetAnimatedAvatar_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetAnimatedAvatar_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetAnimatedAvatar_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetAnimatedAvatar_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_GetAnimatedAvatar_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_GetAnimatedAvatar_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetAnimatedAvatar_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetAnimatedAvatar_Request";
  }
  protected:
  explicit CPlayer_GetAnimatedAvatar_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLanguageFieldNumber = 2,
    kSteamidFieldNumber = 1,
  };
  // optional string language = 2;
  bool has_language() const;
  private:
  bool _internal_has_language() const;
  public:
  void clear_language();
  const std::string& language() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language();
  PROTOBUF_NODISCARD std::string* release_language();
  void set_allocated_language(std::string* language);
  private:
  const std::string& _internal_language() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language(const std::string& value);
  std::string* _internal_mutable_language();
  public:

  // optional fixed64 steamid = 1 [(.description) = "The player we\'re asking about"];
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPlayer_GetAnimatedAvatar_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
  uint64_t steamid_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetAnimatedAvatar_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_GetAnimatedAvatar_Response) */ {
 public:
  inline CPlayer_GetAnimatedAvatar_Response() : CPlayer_GetAnimatedAvatar_Response(nullptr) {}
  ~CPlayer_GetAnimatedAvatar_Response() override;
  explicit constexpr CPlayer_GetAnimatedAvatar_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetAnimatedAvatar_Response(const CPlayer_GetAnimatedAvatar_Response& from);
  CPlayer_GetAnimatedAvatar_Response(CPlayer_GetAnimatedAvatar_Response&& from) noexcept
    : CPlayer_GetAnimatedAvatar_Response() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetAnimatedAvatar_Response& operator=(const CPlayer_GetAnimatedAvatar_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetAnimatedAvatar_Response& operator=(CPlayer_GetAnimatedAvatar_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetAnimatedAvatar_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetAnimatedAvatar_Response* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetAnimatedAvatar_Response*>(
               &_CPlayer_GetAnimatedAvatar_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(CPlayer_GetAnimatedAvatar_Response& a, CPlayer_GetAnimatedAvatar_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetAnimatedAvatar_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetAnimatedAvatar_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetAnimatedAvatar_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetAnimatedAvatar_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_GetAnimatedAvatar_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_GetAnimatedAvatar_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetAnimatedAvatar_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetAnimatedAvatar_Response";
  }
  protected:
  explicit CPlayer_GetAnimatedAvatar_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAvatarFieldNumber = 1,
  };
  // optional .ProfileItem avatar = 1;
  bool has_avatar() const;
  private:
  bool _internal_has_avatar() const;
  public:
  void clear_avatar();
  const ::ProfileItem& avatar() const;
  PROTOBUF_NODISCARD ::ProfileItem* release_avatar();
  ::ProfileItem* mutable_avatar();
  void set_allocated_avatar(::ProfileItem* avatar);
  private:
  const ::ProfileItem& _internal_avatar() const;
  ::ProfileItem* _internal_mutable_avatar();
  public:
  void unsafe_arena_set_allocated_avatar(
      ::ProfileItem* avatar);
  ::ProfileItem* unsafe_arena_release_avatar();

  // @@protoc_insertion_point(class_scope:CPlayer_GetAnimatedAvatar_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::ProfileItem* avatar_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_SetAnimatedAvatar_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_SetAnimatedAvatar_Request) */ {
 public:
  inline CPlayer_SetAnimatedAvatar_Request() : CPlayer_SetAnimatedAvatar_Request(nullptr) {}
  ~CPlayer_SetAnimatedAvatar_Request() override;
  explicit constexpr CPlayer_SetAnimatedAvatar_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_SetAnimatedAvatar_Request(const CPlayer_SetAnimatedAvatar_Request& from);
  CPlayer_SetAnimatedAvatar_Request(CPlayer_SetAnimatedAvatar_Request&& from) noexcept
    : CPlayer_SetAnimatedAvatar_Request() {
    *this = ::std::move(from);
  }

  inline CPlayer_SetAnimatedAvatar_Request& operator=(const CPlayer_SetAnimatedAvatar_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_SetAnimatedAvatar_Request& operator=(CPlayer_SetAnimatedAvatar_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_SetAnimatedAvatar_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_SetAnimatedAvatar_Request* internal_default_instance() {
    return reinterpret_cast<const CPlayer_SetAnimatedAvatar_Request*>(
               &_CPlayer_SetAnimatedAvatar_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(CPlayer_SetAnimatedAvatar_Request& a, CPlayer_SetAnimatedAvatar_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_SetAnimatedAvatar_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_SetAnimatedAvatar_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_SetAnimatedAvatar_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_SetAnimatedAvatar_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_SetAnimatedAvatar_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_SetAnimatedAvatar_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_SetAnimatedAvatar_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_SetAnimatedAvatar_Request";
  }
  protected:
  explicit CPlayer_SetAnimatedAvatar_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommunityitemidFieldNumber = 1,
  };
  // optional uint64 communityitemid = 1;
  bool has_communityitemid() const;
  private:
  bool _internal_has_communityitemid() const;
  public:
  void clear_communityitemid();
  uint64_t communityitemid() const;
  void set_communityitemid(uint64_t value);
  private:
  uint64_t _internal_communityitemid() const;
  void _internal_set_communityitemid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPlayer_SetAnimatedAvatar_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t communityitemid_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_SetAnimatedAvatar_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CPlayer_SetAnimatedAvatar_Response) */ {
 public:
  inline CPlayer_SetAnimatedAvatar_Response() : CPlayer_SetAnimatedAvatar_Response(nullptr) {}
  explicit constexpr CPlayer_SetAnimatedAvatar_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_SetAnimatedAvatar_Response(const CPlayer_SetAnimatedAvatar_Response& from);
  CPlayer_SetAnimatedAvatar_Response(CPlayer_SetAnimatedAvatar_Response&& from) noexcept
    : CPlayer_SetAnimatedAvatar_Response() {
    *this = ::std::move(from);
  }

  inline CPlayer_SetAnimatedAvatar_Response& operator=(const CPlayer_SetAnimatedAvatar_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_SetAnimatedAvatar_Response& operator=(CPlayer_SetAnimatedAvatar_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_SetAnimatedAvatar_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_SetAnimatedAvatar_Response* internal_default_instance() {
    return reinterpret_cast<const CPlayer_SetAnimatedAvatar_Response*>(
               &_CPlayer_SetAnimatedAvatar_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(CPlayer_SetAnimatedAvatar_Response& a, CPlayer_SetAnimatedAvatar_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_SetAnimatedAvatar_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_SetAnimatedAvatar_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_SetAnimatedAvatar_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_SetAnimatedAvatar_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CPlayer_SetAnimatedAvatar_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CPlayer_SetAnimatedAvatar_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_SetAnimatedAvatar_Response";
  }
  protected:
  explicit CPlayer_SetAnimatedAvatar_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CPlayer_SetAnimatedAvatar_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetSteamDeckKeyboardSkin_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_GetSteamDeckKeyboardSkin_Request) */ {
 public:
  inline CPlayer_GetSteamDeckKeyboardSkin_Request() : CPlayer_GetSteamDeckKeyboardSkin_Request(nullptr) {}
  ~CPlayer_GetSteamDeckKeyboardSkin_Request() override;
  explicit constexpr CPlayer_GetSteamDeckKeyboardSkin_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetSteamDeckKeyboardSkin_Request(const CPlayer_GetSteamDeckKeyboardSkin_Request& from);
  CPlayer_GetSteamDeckKeyboardSkin_Request(CPlayer_GetSteamDeckKeyboardSkin_Request&& from) noexcept
    : CPlayer_GetSteamDeckKeyboardSkin_Request() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetSteamDeckKeyboardSkin_Request& operator=(const CPlayer_GetSteamDeckKeyboardSkin_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetSteamDeckKeyboardSkin_Request& operator=(CPlayer_GetSteamDeckKeyboardSkin_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetSteamDeckKeyboardSkin_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetSteamDeckKeyboardSkin_Request* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetSteamDeckKeyboardSkin_Request*>(
               &_CPlayer_GetSteamDeckKeyboardSkin_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(CPlayer_GetSteamDeckKeyboardSkin_Request& a, CPlayer_GetSteamDeckKeyboardSkin_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetSteamDeckKeyboardSkin_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetSteamDeckKeyboardSkin_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetSteamDeckKeyboardSkin_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetSteamDeckKeyboardSkin_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_GetSteamDeckKeyboardSkin_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_GetSteamDeckKeyboardSkin_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetSteamDeckKeyboardSkin_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetSteamDeckKeyboardSkin_Request";
  }
  protected:
  explicit CPlayer_GetSteamDeckKeyboardSkin_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLanguageFieldNumber = 2,
    kSteamidFieldNumber = 1,
  };
  // optional string language = 2;
  bool has_language() const;
  private:
  bool _internal_has_language() const;
  public:
  void clear_language();
  const std::string& language() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language();
  PROTOBUF_NODISCARD std::string* release_language();
  void set_allocated_language(std::string* language);
  private:
  const std::string& _internal_language() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language(const std::string& value);
  std::string* _internal_mutable_language();
  public:

  // optional fixed64 steamid = 1 [(.description) = "The player we\'re asking about"];
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPlayer_GetSteamDeckKeyboardSkin_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
  uint64_t steamid_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetSteamDeckKeyboardSkin_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_GetSteamDeckKeyboardSkin_Response) */ {
 public:
  inline CPlayer_GetSteamDeckKeyboardSkin_Response() : CPlayer_GetSteamDeckKeyboardSkin_Response(nullptr) {}
  ~CPlayer_GetSteamDeckKeyboardSkin_Response() override;
  explicit constexpr CPlayer_GetSteamDeckKeyboardSkin_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetSteamDeckKeyboardSkin_Response(const CPlayer_GetSteamDeckKeyboardSkin_Response& from);
  CPlayer_GetSteamDeckKeyboardSkin_Response(CPlayer_GetSteamDeckKeyboardSkin_Response&& from) noexcept
    : CPlayer_GetSteamDeckKeyboardSkin_Response() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetSteamDeckKeyboardSkin_Response& operator=(const CPlayer_GetSteamDeckKeyboardSkin_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetSteamDeckKeyboardSkin_Response& operator=(CPlayer_GetSteamDeckKeyboardSkin_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetSteamDeckKeyboardSkin_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetSteamDeckKeyboardSkin_Response* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetSteamDeckKeyboardSkin_Response*>(
               &_CPlayer_GetSteamDeckKeyboardSkin_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(CPlayer_GetSteamDeckKeyboardSkin_Response& a, CPlayer_GetSteamDeckKeyboardSkin_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetSteamDeckKeyboardSkin_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetSteamDeckKeyboardSkin_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetSteamDeckKeyboardSkin_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetSteamDeckKeyboardSkin_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_GetSteamDeckKeyboardSkin_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_GetSteamDeckKeyboardSkin_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetSteamDeckKeyboardSkin_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetSteamDeckKeyboardSkin_Response";
  }
  protected:
  explicit CPlayer_GetSteamDeckKeyboardSkin_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamDeckKeyboardSkinFieldNumber = 1,
  };
  // optional .ProfileItem steam_deck_keyboard_skin = 1;
  bool has_steam_deck_keyboard_skin() const;
  private:
  bool _internal_has_steam_deck_keyboard_skin() const;
  public:
  void clear_steam_deck_keyboard_skin();
  const ::ProfileItem& steam_deck_keyboard_skin() const;
  PROTOBUF_NODISCARD ::ProfileItem* release_steam_deck_keyboard_skin();
  ::ProfileItem* mutable_steam_deck_keyboard_skin();
  void set_allocated_steam_deck_keyboard_skin(::ProfileItem* steam_deck_keyboard_skin);
  private:
  const ::ProfileItem& _internal_steam_deck_keyboard_skin() const;
  ::ProfileItem* _internal_mutable_steam_deck_keyboard_skin();
  public:
  void unsafe_arena_set_allocated_steam_deck_keyboard_skin(
      ::ProfileItem* steam_deck_keyboard_skin);
  ::ProfileItem* unsafe_arena_release_steam_deck_keyboard_skin();

  // @@protoc_insertion_point(class_scope:CPlayer_GetSteamDeckKeyboardSkin_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::ProfileItem* steam_deck_keyboard_skin_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_SetSteamDeckKeyboardSkin_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_SetSteamDeckKeyboardSkin_Request) */ {
 public:
  inline CPlayer_SetSteamDeckKeyboardSkin_Request() : CPlayer_SetSteamDeckKeyboardSkin_Request(nullptr) {}
  ~CPlayer_SetSteamDeckKeyboardSkin_Request() override;
  explicit constexpr CPlayer_SetSteamDeckKeyboardSkin_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_SetSteamDeckKeyboardSkin_Request(const CPlayer_SetSteamDeckKeyboardSkin_Request& from);
  CPlayer_SetSteamDeckKeyboardSkin_Request(CPlayer_SetSteamDeckKeyboardSkin_Request&& from) noexcept
    : CPlayer_SetSteamDeckKeyboardSkin_Request() {
    *this = ::std::move(from);
  }

  inline CPlayer_SetSteamDeckKeyboardSkin_Request& operator=(const CPlayer_SetSteamDeckKeyboardSkin_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_SetSteamDeckKeyboardSkin_Request& operator=(CPlayer_SetSteamDeckKeyboardSkin_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_SetSteamDeckKeyboardSkin_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_SetSteamDeckKeyboardSkin_Request* internal_default_instance() {
    return reinterpret_cast<const CPlayer_SetSteamDeckKeyboardSkin_Request*>(
               &_CPlayer_SetSteamDeckKeyboardSkin_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(CPlayer_SetSteamDeckKeyboardSkin_Request& a, CPlayer_SetSteamDeckKeyboardSkin_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_SetSteamDeckKeyboardSkin_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_SetSteamDeckKeyboardSkin_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_SetSteamDeckKeyboardSkin_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_SetSteamDeckKeyboardSkin_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_SetSteamDeckKeyboardSkin_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_SetSteamDeckKeyboardSkin_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_SetSteamDeckKeyboardSkin_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_SetSteamDeckKeyboardSkin_Request";
  }
  protected:
  explicit CPlayer_SetSteamDeckKeyboardSkin_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommunityitemidFieldNumber = 1,
  };
  // optional uint64 communityitemid = 1;
  bool has_communityitemid() const;
  private:
  bool _internal_has_communityitemid() const;
  public:
  void clear_communityitemid();
  uint64_t communityitemid() const;
  void set_communityitemid(uint64_t value);
  private:
  uint64_t _internal_communityitemid() const;
  void _internal_set_communityitemid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPlayer_SetSteamDeckKeyboardSkin_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t communityitemid_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_SetSteamDeckKeyboardSkin_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CPlayer_SetSteamDeckKeyboardSkin_Response) */ {
 public:
  inline CPlayer_SetSteamDeckKeyboardSkin_Response() : CPlayer_SetSteamDeckKeyboardSkin_Response(nullptr) {}
  explicit constexpr CPlayer_SetSteamDeckKeyboardSkin_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_SetSteamDeckKeyboardSkin_Response(const CPlayer_SetSteamDeckKeyboardSkin_Response& from);
  CPlayer_SetSteamDeckKeyboardSkin_Response(CPlayer_SetSteamDeckKeyboardSkin_Response&& from) noexcept
    : CPlayer_SetSteamDeckKeyboardSkin_Response() {
    *this = ::std::move(from);
  }

  inline CPlayer_SetSteamDeckKeyboardSkin_Response& operator=(const CPlayer_SetSteamDeckKeyboardSkin_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_SetSteamDeckKeyboardSkin_Response& operator=(CPlayer_SetSteamDeckKeyboardSkin_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_SetSteamDeckKeyboardSkin_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_SetSteamDeckKeyboardSkin_Response* internal_default_instance() {
    return reinterpret_cast<const CPlayer_SetSteamDeckKeyboardSkin_Response*>(
               &_CPlayer_SetSteamDeckKeyboardSkin_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(CPlayer_SetSteamDeckKeyboardSkin_Response& a, CPlayer_SetSteamDeckKeyboardSkin_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_SetSteamDeckKeyboardSkin_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_SetSteamDeckKeyboardSkin_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_SetSteamDeckKeyboardSkin_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_SetSteamDeckKeyboardSkin_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CPlayer_SetSteamDeckKeyboardSkin_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CPlayer_SetSteamDeckKeyboardSkin_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_SetSteamDeckKeyboardSkin_Response";
  }
  protected:
  explicit CPlayer_SetSteamDeckKeyboardSkin_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CPlayer_SetSteamDeckKeyboardSkin_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetProfileItemsOwned_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_GetProfileItemsOwned_Request) */ {
 public:
  inline CPlayer_GetProfileItemsOwned_Request() : CPlayer_GetProfileItemsOwned_Request(nullptr) {}
  ~CPlayer_GetProfileItemsOwned_Request() override;
  explicit constexpr CPlayer_GetProfileItemsOwned_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetProfileItemsOwned_Request(const CPlayer_GetProfileItemsOwned_Request& from);
  CPlayer_GetProfileItemsOwned_Request(CPlayer_GetProfileItemsOwned_Request&& from) noexcept
    : CPlayer_GetProfileItemsOwned_Request() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetProfileItemsOwned_Request& operator=(const CPlayer_GetProfileItemsOwned_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetProfileItemsOwned_Request& operator=(CPlayer_GetProfileItemsOwned_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetProfileItemsOwned_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetProfileItemsOwned_Request* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetProfileItemsOwned_Request*>(
               &_CPlayer_GetProfileItemsOwned_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(CPlayer_GetProfileItemsOwned_Request& a, CPlayer_GetProfileItemsOwned_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetProfileItemsOwned_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetProfileItemsOwned_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetProfileItemsOwned_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetProfileItemsOwned_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_GetProfileItemsOwned_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_GetProfileItemsOwned_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetProfileItemsOwned_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetProfileItemsOwned_Request";
  }
  protected:
  explicit CPlayer_GetProfileItemsOwned_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFiltersFieldNumber = 2,
    kLanguageFieldNumber = 1,
  };
  // repeated .ECommunityItemClass filters = 2;
  int filters_size() const;
  private:
  int _internal_filters_size() const;
  public:
  void clear_filters();
  private:
  ::ECommunityItemClass _internal_filters(int index) const;
  void _internal_add_filters(::ECommunityItemClass value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_filters();
  public:
  ::ECommunityItemClass filters(int index) const;
  void set_filters(int index, ::ECommunityItemClass value);
  void add_filters(::ECommunityItemClass value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& filters() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_filters();

  // optional string language = 1;
  bool has_language() const;
  private:
  bool _internal_has_language() const;
  public:
  void clear_language();
  const std::string& language() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language();
  PROTOBUF_NODISCARD std::string* release_language();
  void set_allocated_language(std::string* language);
  private:
  const std::string& _internal_language() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language(const std::string& value);
  std::string* _internal_mutable_language();
  public:

  // @@protoc_insertion_point(class_scope:CPlayer_GetProfileItemsOwned_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> filters_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetProfileItemsOwned_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_GetProfileItemsOwned_Response) */ {
 public:
  inline CPlayer_GetProfileItemsOwned_Response() : CPlayer_GetProfileItemsOwned_Response(nullptr) {}
  ~CPlayer_GetProfileItemsOwned_Response() override;
  explicit constexpr CPlayer_GetProfileItemsOwned_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetProfileItemsOwned_Response(const CPlayer_GetProfileItemsOwned_Response& from);
  CPlayer_GetProfileItemsOwned_Response(CPlayer_GetProfileItemsOwned_Response&& from) noexcept
    : CPlayer_GetProfileItemsOwned_Response() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetProfileItemsOwned_Response& operator=(const CPlayer_GetProfileItemsOwned_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetProfileItemsOwned_Response& operator=(CPlayer_GetProfileItemsOwned_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetProfileItemsOwned_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetProfileItemsOwned_Response* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetProfileItemsOwned_Response*>(
               &_CPlayer_GetProfileItemsOwned_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(CPlayer_GetProfileItemsOwned_Response& a, CPlayer_GetProfileItemsOwned_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetProfileItemsOwned_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetProfileItemsOwned_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetProfileItemsOwned_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetProfileItemsOwned_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_GetProfileItemsOwned_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_GetProfileItemsOwned_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetProfileItemsOwned_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetProfileItemsOwned_Response";
  }
  protected:
  explicit CPlayer_GetProfileItemsOwned_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProfileBackgroundsFieldNumber = 1,
    kMiniProfileBackgroundsFieldNumber = 2,
    kAvatarFramesFieldNumber = 3,
    kAnimatedAvatarsFieldNumber = 4,
    kProfileModifiersFieldNumber = 5,
    kSteamDeckKeyboardSkinsFieldNumber = 6,
    kSteamDeckStartupMoviesFieldNumber = 7,
  };
  // repeated .ProfileItem profile_backgrounds = 1;
  int profile_backgrounds_size() const;
  private:
  int _internal_profile_backgrounds_size() const;
  public:
  void clear_profile_backgrounds();
  ::ProfileItem* mutable_profile_backgrounds(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfileItem >*
      mutable_profile_backgrounds();
  private:
  const ::ProfileItem& _internal_profile_backgrounds(int index) const;
  ::ProfileItem* _internal_add_profile_backgrounds();
  public:
  const ::ProfileItem& profile_backgrounds(int index) const;
  ::ProfileItem* add_profile_backgrounds();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfileItem >&
      profile_backgrounds() const;

  // repeated .ProfileItem mini_profile_backgrounds = 2;
  int mini_profile_backgrounds_size() const;
  private:
  int _internal_mini_profile_backgrounds_size() const;
  public:
  void clear_mini_profile_backgrounds();
  ::ProfileItem* mutable_mini_profile_backgrounds(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfileItem >*
      mutable_mini_profile_backgrounds();
  private:
  const ::ProfileItem& _internal_mini_profile_backgrounds(int index) const;
  ::ProfileItem* _internal_add_mini_profile_backgrounds();
  public:
  const ::ProfileItem& mini_profile_backgrounds(int index) const;
  ::ProfileItem* add_mini_profile_backgrounds();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfileItem >&
      mini_profile_backgrounds() const;

  // repeated .ProfileItem avatar_frames = 3;
  int avatar_frames_size() const;
  private:
  int _internal_avatar_frames_size() const;
  public:
  void clear_avatar_frames();
  ::ProfileItem* mutable_avatar_frames(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfileItem >*
      mutable_avatar_frames();
  private:
  const ::ProfileItem& _internal_avatar_frames(int index) const;
  ::ProfileItem* _internal_add_avatar_frames();
  public:
  const ::ProfileItem& avatar_frames(int index) const;
  ::ProfileItem* add_avatar_frames();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfileItem >&
      avatar_frames() const;

  // repeated .ProfileItem animated_avatars = 4;
  int animated_avatars_size() const;
  private:
  int _internal_animated_avatars_size() const;
  public:
  void clear_animated_avatars();
  ::ProfileItem* mutable_animated_avatars(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfileItem >*
      mutable_animated_avatars();
  private:
  const ::ProfileItem& _internal_animated_avatars(int index) const;
  ::ProfileItem* _internal_add_animated_avatars();
  public:
  const ::ProfileItem& animated_avatars(int index) const;
  ::ProfileItem* add_animated_avatars();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfileItem >&
      animated_avatars() const;

  // repeated .ProfileItem profile_modifiers = 5;
  int profile_modifiers_size() const;
  private:
  int _internal_profile_modifiers_size() const;
  public:
  void clear_profile_modifiers();
  ::ProfileItem* mutable_profile_modifiers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfileItem >*
      mutable_profile_modifiers();
  private:
  const ::ProfileItem& _internal_profile_modifiers(int index) const;
  ::ProfileItem* _internal_add_profile_modifiers();
  public:
  const ::ProfileItem& profile_modifiers(int index) const;
  ::ProfileItem* add_profile_modifiers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfileItem >&
      profile_modifiers() const;

  // repeated .ProfileItem steam_deck_keyboard_skins = 6;
  int steam_deck_keyboard_skins_size() const;
  private:
  int _internal_steam_deck_keyboard_skins_size() const;
  public:
  void clear_steam_deck_keyboard_skins();
  ::ProfileItem* mutable_steam_deck_keyboard_skins(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfileItem >*
      mutable_steam_deck_keyboard_skins();
  private:
  const ::ProfileItem& _internal_steam_deck_keyboard_skins(int index) const;
  ::ProfileItem* _internal_add_steam_deck_keyboard_skins();
  public:
  const ::ProfileItem& steam_deck_keyboard_skins(int index) const;
  ::ProfileItem* add_steam_deck_keyboard_skins();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfileItem >&
      steam_deck_keyboard_skins() const;

  // repeated .ProfileItem steam_deck_startup_movies = 7;
  int steam_deck_startup_movies_size() const;
  private:
  int _internal_steam_deck_startup_movies_size() const;
  public:
  void clear_steam_deck_startup_movies();
  ::ProfileItem* mutable_steam_deck_startup_movies(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfileItem >*
      mutable_steam_deck_startup_movies();
  private:
  const ::ProfileItem& _internal_steam_deck_startup_movies(int index) const;
  ::ProfileItem* _internal_add_steam_deck_startup_movies();
  public:
  const ::ProfileItem& steam_deck_startup_movies(int index) const;
  ::ProfileItem* add_steam_deck_startup_movies();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfileItem >&
      steam_deck_startup_movies() const;

  // @@protoc_insertion_point(class_scope:CPlayer_GetProfileItemsOwned_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfileItem > profile_backgrounds_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfileItem > mini_profile_backgrounds_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfileItem > avatar_frames_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfileItem > animated_avatars_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfileItem > profile_modifiers_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfileItem > steam_deck_keyboard_skins_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfileItem > steam_deck_startup_movies_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetProfileItemsEquipped_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_GetProfileItemsEquipped_Request) */ {
 public:
  inline CPlayer_GetProfileItemsEquipped_Request() : CPlayer_GetProfileItemsEquipped_Request(nullptr) {}
  ~CPlayer_GetProfileItemsEquipped_Request() override;
  explicit constexpr CPlayer_GetProfileItemsEquipped_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetProfileItemsEquipped_Request(const CPlayer_GetProfileItemsEquipped_Request& from);
  CPlayer_GetProfileItemsEquipped_Request(CPlayer_GetProfileItemsEquipped_Request&& from) noexcept
    : CPlayer_GetProfileItemsEquipped_Request() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetProfileItemsEquipped_Request& operator=(const CPlayer_GetProfileItemsEquipped_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetProfileItemsEquipped_Request& operator=(CPlayer_GetProfileItemsEquipped_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetProfileItemsEquipped_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetProfileItemsEquipped_Request* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetProfileItemsEquipped_Request*>(
               &_CPlayer_GetProfileItemsEquipped_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(CPlayer_GetProfileItemsEquipped_Request& a, CPlayer_GetProfileItemsEquipped_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetProfileItemsEquipped_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetProfileItemsEquipped_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetProfileItemsEquipped_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetProfileItemsEquipped_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_GetProfileItemsEquipped_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_GetProfileItemsEquipped_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetProfileItemsEquipped_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetProfileItemsEquipped_Request";
  }
  protected:
  explicit CPlayer_GetProfileItemsEquipped_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLanguageFieldNumber = 2,
    kSteamidFieldNumber = 1,
  };
  // optional string language = 2;
  bool has_language() const;
  private:
  bool _internal_has_language() const;
  public:
  void clear_language();
  const std::string& language() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language();
  PROTOBUF_NODISCARD std::string* release_language();
  void set_allocated_language(std::string* language);
  private:
  const std::string& _internal_language() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language(const std::string& value);
  std::string* _internal_mutable_language();
  public:

  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPlayer_GetProfileItemsEquipped_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
  uint64_t steamid_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetProfileItemsEquipped_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_GetProfileItemsEquipped_Response) */ {
 public:
  inline CPlayer_GetProfileItemsEquipped_Response() : CPlayer_GetProfileItemsEquipped_Response(nullptr) {}
  ~CPlayer_GetProfileItemsEquipped_Response() override;
  explicit constexpr CPlayer_GetProfileItemsEquipped_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetProfileItemsEquipped_Response(const CPlayer_GetProfileItemsEquipped_Response& from);
  CPlayer_GetProfileItemsEquipped_Response(CPlayer_GetProfileItemsEquipped_Response&& from) noexcept
    : CPlayer_GetProfileItemsEquipped_Response() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetProfileItemsEquipped_Response& operator=(const CPlayer_GetProfileItemsEquipped_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetProfileItemsEquipped_Response& operator=(CPlayer_GetProfileItemsEquipped_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetProfileItemsEquipped_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetProfileItemsEquipped_Response* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetProfileItemsEquipped_Response*>(
               &_CPlayer_GetProfileItemsEquipped_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(CPlayer_GetProfileItemsEquipped_Response& a, CPlayer_GetProfileItemsEquipped_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetProfileItemsEquipped_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetProfileItemsEquipped_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetProfileItemsEquipped_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetProfileItemsEquipped_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_GetProfileItemsEquipped_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_GetProfileItemsEquipped_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetProfileItemsEquipped_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetProfileItemsEquipped_Response";
  }
  protected:
  explicit CPlayer_GetProfileItemsEquipped_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProfileBackgroundFieldNumber = 1,
    kMiniProfileBackgroundFieldNumber = 2,
    kAvatarFrameFieldNumber = 3,
    kAnimatedAvatarFieldNumber = 4,
    kProfileModifierFieldNumber = 5,
    kSteamDeckKeyboardSkinFieldNumber = 6,
  };
  // optional .ProfileItem profile_background = 1;
  bool has_profile_background() const;
  private:
  bool _internal_has_profile_background() const;
  public:
  void clear_profile_background();
  const ::ProfileItem& profile_background() const;
  PROTOBUF_NODISCARD ::ProfileItem* release_profile_background();
  ::ProfileItem* mutable_profile_background();
  void set_allocated_profile_background(::ProfileItem* profile_background);
  private:
  const ::ProfileItem& _internal_profile_background() const;
  ::ProfileItem* _internal_mutable_profile_background();
  public:
  void unsafe_arena_set_allocated_profile_background(
      ::ProfileItem* profile_background);
  ::ProfileItem* unsafe_arena_release_profile_background();

  // optional .ProfileItem mini_profile_background = 2;
  bool has_mini_profile_background() const;
  private:
  bool _internal_has_mini_profile_background() const;
  public:
  void clear_mini_profile_background();
  const ::ProfileItem& mini_profile_background() const;
  PROTOBUF_NODISCARD ::ProfileItem* release_mini_profile_background();
  ::ProfileItem* mutable_mini_profile_background();
  void set_allocated_mini_profile_background(::ProfileItem* mini_profile_background);
  private:
  const ::ProfileItem& _internal_mini_profile_background() const;
  ::ProfileItem* _internal_mutable_mini_profile_background();
  public:
  void unsafe_arena_set_allocated_mini_profile_background(
      ::ProfileItem* mini_profile_background);
  ::ProfileItem* unsafe_arena_release_mini_profile_background();

  // optional .ProfileItem avatar_frame = 3;
  bool has_avatar_frame() const;
  private:
  bool _internal_has_avatar_frame() const;
  public:
  void clear_avatar_frame();
  const ::ProfileItem& avatar_frame() const;
  PROTOBUF_NODISCARD ::ProfileItem* release_avatar_frame();
  ::ProfileItem* mutable_avatar_frame();
  void set_allocated_avatar_frame(::ProfileItem* avatar_frame);
  private:
  const ::ProfileItem& _internal_avatar_frame() const;
  ::ProfileItem* _internal_mutable_avatar_frame();
  public:
  void unsafe_arena_set_allocated_avatar_frame(
      ::ProfileItem* avatar_frame);
  ::ProfileItem* unsafe_arena_release_avatar_frame();

  // optional .ProfileItem animated_avatar = 4;
  bool has_animated_avatar() const;
  private:
  bool _internal_has_animated_avatar() const;
  public:
  void clear_animated_avatar();
  const ::ProfileItem& animated_avatar() const;
  PROTOBUF_NODISCARD ::ProfileItem* release_animated_avatar();
  ::ProfileItem* mutable_animated_avatar();
  void set_allocated_animated_avatar(::ProfileItem* animated_avatar);
  private:
  const ::ProfileItem& _internal_animated_avatar() const;
  ::ProfileItem* _internal_mutable_animated_avatar();
  public:
  void unsafe_arena_set_allocated_animated_avatar(
      ::ProfileItem* animated_avatar);
  ::ProfileItem* unsafe_arena_release_animated_avatar();

  // optional .ProfileItem profile_modifier = 5;
  bool has_profile_modifier() const;
  private:
  bool _internal_has_profile_modifier() const;
  public:
  void clear_profile_modifier();
  const ::ProfileItem& profile_modifier() const;
  PROTOBUF_NODISCARD ::ProfileItem* release_profile_modifier();
  ::ProfileItem* mutable_profile_modifier();
  void set_allocated_profile_modifier(::ProfileItem* profile_modifier);
  private:
  const ::ProfileItem& _internal_profile_modifier() const;
  ::ProfileItem* _internal_mutable_profile_modifier();
  public:
  void unsafe_arena_set_allocated_profile_modifier(
      ::ProfileItem* profile_modifier);
  ::ProfileItem* unsafe_arena_release_profile_modifier();

  // optional .ProfileItem steam_deck_keyboard_skin = 6;
  bool has_steam_deck_keyboard_skin() const;
  private:
  bool _internal_has_steam_deck_keyboard_skin() const;
  public:
  void clear_steam_deck_keyboard_skin();
  const ::ProfileItem& steam_deck_keyboard_skin() const;
  PROTOBUF_NODISCARD ::ProfileItem* release_steam_deck_keyboard_skin();
  ::ProfileItem* mutable_steam_deck_keyboard_skin();
  void set_allocated_steam_deck_keyboard_skin(::ProfileItem* steam_deck_keyboard_skin);
  private:
  const ::ProfileItem& _internal_steam_deck_keyboard_skin() const;
  ::ProfileItem* _internal_mutable_steam_deck_keyboard_skin();
  public:
  void unsafe_arena_set_allocated_steam_deck_keyboard_skin(
      ::ProfileItem* steam_deck_keyboard_skin);
  ::ProfileItem* unsafe_arena_release_steam_deck_keyboard_skin();

  // @@protoc_insertion_point(class_scope:CPlayer_GetProfileItemsEquipped_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::ProfileItem* profile_background_;
  ::ProfileItem* mini_profile_background_;
  ::ProfileItem* avatar_frame_;
  ::ProfileItem* animated_avatar_;
  ::ProfileItem* profile_modifier_;
  ::ProfileItem* steam_deck_keyboard_skin_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_SetEquippedProfileItemFlags_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_SetEquippedProfileItemFlags_Request) */ {
 public:
  inline CPlayer_SetEquippedProfileItemFlags_Request() : CPlayer_SetEquippedProfileItemFlags_Request(nullptr) {}
  ~CPlayer_SetEquippedProfileItemFlags_Request() override;
  explicit constexpr CPlayer_SetEquippedProfileItemFlags_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_SetEquippedProfileItemFlags_Request(const CPlayer_SetEquippedProfileItemFlags_Request& from);
  CPlayer_SetEquippedProfileItemFlags_Request(CPlayer_SetEquippedProfileItemFlags_Request&& from) noexcept
    : CPlayer_SetEquippedProfileItemFlags_Request() {
    *this = ::std::move(from);
  }

  inline CPlayer_SetEquippedProfileItemFlags_Request& operator=(const CPlayer_SetEquippedProfileItemFlags_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_SetEquippedProfileItemFlags_Request& operator=(CPlayer_SetEquippedProfileItemFlags_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_SetEquippedProfileItemFlags_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_SetEquippedProfileItemFlags_Request* internal_default_instance() {
    return reinterpret_cast<const CPlayer_SetEquippedProfileItemFlags_Request*>(
               &_CPlayer_SetEquippedProfileItemFlags_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(CPlayer_SetEquippedProfileItemFlags_Request& a, CPlayer_SetEquippedProfileItemFlags_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_SetEquippedProfileItemFlags_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_SetEquippedProfileItemFlags_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_SetEquippedProfileItemFlags_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_SetEquippedProfileItemFlags_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_SetEquippedProfileItemFlags_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_SetEquippedProfileItemFlags_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_SetEquippedProfileItemFlags_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_SetEquippedProfileItemFlags_Request";
  }
  protected:
  explicit CPlayer_SetEquippedProfileItemFlags_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommunityitemidFieldNumber = 1,
    kFlagsFieldNumber = 2,
  };
  // optional uint64 communityitemid = 1;
  bool has_communityitemid() const;
  private:
  bool _internal_has_communityitemid() const;
  public:
  void clear_communityitemid();
  uint64_t communityitemid() const;
  void set_communityitemid(uint64_t value);
  private:
  uint64_t _internal_communityitemid() const;
  void _internal_set_communityitemid(uint64_t value);
  public:

  // optional uint32 flags = 2 [(.description) = "Set of EProfileItemEquippedFlag"];
  bool has_flags() const;
  private:
  bool _internal_has_flags() const;
  public:
  void clear_flags();
  uint32_t flags() const;
  void set_flags(uint32_t value);
  private:
  uint32_t _internal_flags() const;
  void _internal_set_flags(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPlayer_SetEquippedProfileItemFlags_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t communityitemid_;
  uint32_t flags_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_SetEquippedProfileItemFlags_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CPlayer_SetEquippedProfileItemFlags_Response) */ {
 public:
  inline CPlayer_SetEquippedProfileItemFlags_Response() : CPlayer_SetEquippedProfileItemFlags_Response(nullptr) {}
  explicit constexpr CPlayer_SetEquippedProfileItemFlags_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_SetEquippedProfileItemFlags_Response(const CPlayer_SetEquippedProfileItemFlags_Response& from);
  CPlayer_SetEquippedProfileItemFlags_Response(CPlayer_SetEquippedProfileItemFlags_Response&& from) noexcept
    : CPlayer_SetEquippedProfileItemFlags_Response() {
    *this = ::std::move(from);
  }

  inline CPlayer_SetEquippedProfileItemFlags_Response& operator=(const CPlayer_SetEquippedProfileItemFlags_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_SetEquippedProfileItemFlags_Response& operator=(CPlayer_SetEquippedProfileItemFlags_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_SetEquippedProfileItemFlags_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_SetEquippedProfileItemFlags_Response* internal_default_instance() {
    return reinterpret_cast<const CPlayer_SetEquippedProfileItemFlags_Response*>(
               &_CPlayer_SetEquippedProfileItemFlags_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(CPlayer_SetEquippedProfileItemFlags_Response& a, CPlayer_SetEquippedProfileItemFlags_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_SetEquippedProfileItemFlags_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_SetEquippedProfileItemFlags_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_SetEquippedProfileItemFlags_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_SetEquippedProfileItemFlags_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CPlayer_SetEquippedProfileItemFlags_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CPlayer_SetEquippedProfileItemFlags_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_SetEquippedProfileItemFlags_Response";
  }
  protected:
  explicit CPlayer_SetEquippedProfileItemFlags_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CPlayer_SetEquippedProfileItemFlags_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetEmoticonList_Request final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CPlayer_GetEmoticonList_Request) */ {
 public:
  inline CPlayer_GetEmoticonList_Request() : CPlayer_GetEmoticonList_Request(nullptr) {}
  explicit constexpr CPlayer_GetEmoticonList_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetEmoticonList_Request(const CPlayer_GetEmoticonList_Request& from);
  CPlayer_GetEmoticonList_Request(CPlayer_GetEmoticonList_Request&& from) noexcept
    : CPlayer_GetEmoticonList_Request() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetEmoticonList_Request& operator=(const CPlayer_GetEmoticonList_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetEmoticonList_Request& operator=(CPlayer_GetEmoticonList_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetEmoticonList_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetEmoticonList_Request* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetEmoticonList_Request*>(
               &_CPlayer_GetEmoticonList_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(CPlayer_GetEmoticonList_Request& a, CPlayer_GetEmoticonList_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetEmoticonList_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetEmoticonList_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetEmoticonList_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetEmoticonList_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CPlayer_GetEmoticonList_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CPlayer_GetEmoticonList_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetEmoticonList_Request";
  }
  protected:
  explicit CPlayer_GetEmoticonList_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CPlayer_GetEmoticonList_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetEmoticonList_Response_Emoticon final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_GetEmoticonList_Response.Emoticon) */ {
 public:
  inline CPlayer_GetEmoticonList_Response_Emoticon() : CPlayer_GetEmoticonList_Response_Emoticon(nullptr) {}
  ~CPlayer_GetEmoticonList_Response_Emoticon() override;
  explicit constexpr CPlayer_GetEmoticonList_Response_Emoticon(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetEmoticonList_Response_Emoticon(const CPlayer_GetEmoticonList_Response_Emoticon& from);
  CPlayer_GetEmoticonList_Response_Emoticon(CPlayer_GetEmoticonList_Response_Emoticon&& from) noexcept
    : CPlayer_GetEmoticonList_Response_Emoticon() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetEmoticonList_Response_Emoticon& operator=(const CPlayer_GetEmoticonList_Response_Emoticon& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetEmoticonList_Response_Emoticon& operator=(CPlayer_GetEmoticonList_Response_Emoticon&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetEmoticonList_Response_Emoticon& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetEmoticonList_Response_Emoticon* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetEmoticonList_Response_Emoticon*>(
               &_CPlayer_GetEmoticonList_Response_Emoticon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(CPlayer_GetEmoticonList_Response_Emoticon& a, CPlayer_GetEmoticonList_Response_Emoticon& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetEmoticonList_Response_Emoticon* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetEmoticonList_Response_Emoticon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetEmoticonList_Response_Emoticon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetEmoticonList_Response_Emoticon>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_GetEmoticonList_Response_Emoticon& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_GetEmoticonList_Response_Emoticon& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetEmoticonList_Response_Emoticon* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetEmoticonList_Response.Emoticon";
  }
  protected:
  explicit CPlayer_GetEmoticonList_Response_Emoticon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kCountFieldNumber = 2,
    kTimeLastUsedFieldNumber = 3,
    kUseCountFieldNumber = 4,
    kTimeReceivedFieldNumber = 5,
    kAppidFieldNumber = 6,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional int32 count = 2;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  int32_t count() const;
  void set_count(int32_t value);
  private:
  int32_t _internal_count() const;
  void _internal_set_count(int32_t value);
  public:

  // optional uint32 time_last_used = 3;
  bool has_time_last_used() const;
  private:
  bool _internal_has_time_last_used() const;
  public:
  void clear_time_last_used();
  uint32_t time_last_used() const;
  void set_time_last_used(uint32_t value);
  private:
  uint32_t _internal_time_last_used() const;
  void _internal_set_time_last_used(uint32_t value);
  public:

  // optional uint32 use_count = 4;
  bool has_use_count() const;
  private:
  bool _internal_has_use_count() const;
  public:
  void clear_use_count();
  uint32_t use_count() const;
  void set_use_count(uint32_t value);
  private:
  uint32_t _internal_use_count() const;
  void _internal_set_use_count(uint32_t value);
  public:

  // optional uint32 time_received = 5;
  bool has_time_received() const;
  private:
  bool _internal_has_time_received() const;
  public:
  void clear_time_received();
  uint32_t time_received() const;
  void set_time_received(uint32_t value);
  private:
  uint32_t _internal_time_received() const;
  void _internal_set_time_received(uint32_t value);
  public:

  // optional uint32 appid = 6;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPlayer_GetEmoticonList_Response.Emoticon)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int32_t count_;
  uint32_t time_last_used_;
  uint32_t use_count_;
  uint32_t time_received_;
  uint32_t appid_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetEmoticonList_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_GetEmoticonList_Response) */ {
 public:
  inline CPlayer_GetEmoticonList_Response() : CPlayer_GetEmoticonList_Response(nullptr) {}
  ~CPlayer_GetEmoticonList_Response() override;
  explicit constexpr CPlayer_GetEmoticonList_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetEmoticonList_Response(const CPlayer_GetEmoticonList_Response& from);
  CPlayer_GetEmoticonList_Response(CPlayer_GetEmoticonList_Response&& from) noexcept
    : CPlayer_GetEmoticonList_Response() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetEmoticonList_Response& operator=(const CPlayer_GetEmoticonList_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetEmoticonList_Response& operator=(CPlayer_GetEmoticonList_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetEmoticonList_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetEmoticonList_Response* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetEmoticonList_Response*>(
               &_CPlayer_GetEmoticonList_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(CPlayer_GetEmoticonList_Response& a, CPlayer_GetEmoticonList_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetEmoticonList_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetEmoticonList_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetEmoticonList_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetEmoticonList_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_GetEmoticonList_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_GetEmoticonList_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetEmoticonList_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetEmoticonList_Response";
  }
  protected:
  explicit CPlayer_GetEmoticonList_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CPlayer_GetEmoticonList_Response_Emoticon Emoticon;

  // accessors -------------------------------------------------------

  enum : int {
    kEmoticonsFieldNumber = 1,
  };
  // repeated .CPlayer_GetEmoticonList_Response.Emoticon emoticons = 1;
  int emoticons_size() const;
  private:
  int _internal_emoticons_size() const;
  public:
  void clear_emoticons();
  ::CPlayer_GetEmoticonList_Response_Emoticon* mutable_emoticons(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetEmoticonList_Response_Emoticon >*
      mutable_emoticons();
  private:
  const ::CPlayer_GetEmoticonList_Response_Emoticon& _internal_emoticons(int index) const;
  ::CPlayer_GetEmoticonList_Response_Emoticon* _internal_add_emoticons();
  public:
  const ::CPlayer_GetEmoticonList_Response_Emoticon& emoticons(int index) const;
  ::CPlayer_GetEmoticonList_Response_Emoticon* add_emoticons();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetEmoticonList_Response_Emoticon >&
      emoticons() const;

  // @@protoc_insertion_point(class_scope:CPlayer_GetEmoticonList_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetEmoticonList_Response_Emoticon > emoticons_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetTopAchievementsForGames_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_GetTopAchievementsForGames_Request) */ {
 public:
  inline CPlayer_GetTopAchievementsForGames_Request() : CPlayer_GetTopAchievementsForGames_Request(nullptr) {}
  ~CPlayer_GetTopAchievementsForGames_Request() override;
  explicit constexpr CPlayer_GetTopAchievementsForGames_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetTopAchievementsForGames_Request(const CPlayer_GetTopAchievementsForGames_Request& from);
  CPlayer_GetTopAchievementsForGames_Request(CPlayer_GetTopAchievementsForGames_Request&& from) noexcept
    : CPlayer_GetTopAchievementsForGames_Request() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetTopAchievementsForGames_Request& operator=(const CPlayer_GetTopAchievementsForGames_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetTopAchievementsForGames_Request& operator=(CPlayer_GetTopAchievementsForGames_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetTopAchievementsForGames_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetTopAchievementsForGames_Request* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetTopAchievementsForGames_Request*>(
               &_CPlayer_GetTopAchievementsForGames_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(CPlayer_GetTopAchievementsForGames_Request& a, CPlayer_GetTopAchievementsForGames_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetTopAchievementsForGames_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetTopAchievementsForGames_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetTopAchievementsForGames_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetTopAchievementsForGames_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_GetTopAchievementsForGames_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_GetTopAchievementsForGames_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetTopAchievementsForGames_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetTopAchievementsForGames_Request";
  }
  protected:
  explicit CPlayer_GetTopAchievementsForGames_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppidsFieldNumber = 4,
    kLanguageFieldNumber = 2,
    kSteamidFieldNumber = 1,
    kMaxAchievementsFieldNumber = 3,
  };
  // repeated uint32 appids = 4;
  int appids_size() const;
  private:
  int _internal_appids_size() const;
  public:
  void clear_appids();
  private:
  uint32_t _internal_appids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_appids() const;
  void _internal_add_appids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_appids();
  public:
  uint32_t appids(int index) const;
  void set_appids(int index, uint32_t value);
  void add_appids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      appids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_appids();

  // optional string language = 2;
  bool has_language() const;
  private:
  bool _internal_has_language() const;
  public:
  void clear_language();
  const std::string& language() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language();
  PROTOBUF_NODISCARD std::string* release_language();
  void set_allocated_language(std::string* language);
  private:
  const std::string& _internal_language() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language(const std::string& value);
  std::string* _internal_mutable_language();
  public:

  // optional uint64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional uint32 max_achievements = 3 [(.description) = "The max achievements to load. Max 8"];
  bool has_max_achievements() const;
  private:
  bool _internal_has_max_achievements() const;
  public:
  void clear_max_achievements();
  uint32_t max_achievements() const;
  void set_max_achievements(uint32_t value);
  private:
  uint32_t _internal_max_achievements() const;
  void _internal_set_max_achievements(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPlayer_GetTopAchievementsForGames_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > appids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
  uint64_t steamid_;
  uint32_t max_achievements_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetTopAchievementsForGames_Response_Achievement final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_GetTopAchievementsForGames_Response.Achievement) */ {
 public:
  inline CPlayer_GetTopAchievementsForGames_Response_Achievement() : CPlayer_GetTopAchievementsForGames_Response_Achievement(nullptr) {}
  ~CPlayer_GetTopAchievementsForGames_Response_Achievement() override;
  explicit constexpr CPlayer_GetTopAchievementsForGames_Response_Achievement(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetTopAchievementsForGames_Response_Achievement(const CPlayer_GetTopAchievementsForGames_Response_Achievement& from);
  CPlayer_GetTopAchievementsForGames_Response_Achievement(CPlayer_GetTopAchievementsForGames_Response_Achievement&& from) noexcept
    : CPlayer_GetTopAchievementsForGames_Response_Achievement() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetTopAchievementsForGames_Response_Achievement& operator=(const CPlayer_GetTopAchievementsForGames_Response_Achievement& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetTopAchievementsForGames_Response_Achievement& operator=(CPlayer_GetTopAchievementsForGames_Response_Achievement&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetTopAchievementsForGames_Response_Achievement& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetTopAchievementsForGames_Response_Achievement* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetTopAchievementsForGames_Response_Achievement*>(
               &_CPlayer_GetTopAchievementsForGames_Response_Achievement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(CPlayer_GetTopAchievementsForGames_Response_Achievement& a, CPlayer_GetTopAchievementsForGames_Response_Achievement& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetTopAchievementsForGames_Response_Achievement* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetTopAchievementsForGames_Response_Achievement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetTopAchievementsForGames_Response_Achievement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetTopAchievementsForGames_Response_Achievement>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_GetTopAchievementsForGames_Response_Achievement& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_GetTopAchievementsForGames_Response_Achievement& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetTopAchievementsForGames_Response_Achievement* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetTopAchievementsForGames_Response.Achievement";
  }
  protected:
  explicit CPlayer_GetTopAchievementsForGames_Response_Achievement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kDescFieldNumber = 4,
    kIconFieldNumber = 5,
    kIconGrayFieldNumber = 6,
    kPlayerPercentUnlockedFieldNumber = 8,
    kStatidFieldNumber = 1,
    kBitFieldNumber = 2,
    kHiddenFieldNumber = 7,
  };
  // optional string name = 3;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string desc = 4;
  bool has_desc() const;
  private:
  bool _internal_has_desc() const;
  public:
  void clear_desc();
  const std::string& desc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_desc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_desc();
  PROTOBUF_NODISCARD std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // optional string icon = 5;
  bool has_icon() const;
  private:
  bool _internal_has_icon() const;
  public:
  void clear_icon();
  const std::string& icon() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_icon(ArgT0&& arg0, ArgT... args);
  std::string* mutable_icon();
  PROTOBUF_NODISCARD std::string* release_icon();
  void set_allocated_icon(std::string* icon);
  private:
  const std::string& _internal_icon() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_icon(const std::string& value);
  std::string* _internal_mutable_icon();
  public:

  // optional string icon_gray = 6;
  bool has_icon_gray() const;
  private:
  bool _internal_has_icon_gray() const;
  public:
  void clear_icon_gray();
  const std::string& icon_gray() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_icon_gray(ArgT0&& arg0, ArgT... args);
  std::string* mutable_icon_gray();
  PROTOBUF_NODISCARD std::string* release_icon_gray();
  void set_allocated_icon_gray(std::string* icon_gray);
  private:
  const std::string& _internal_icon_gray() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_icon_gray(const std::string& value);
  std::string* _internal_mutable_icon_gray();
  public:

  // optional string player_percent_unlocked = 8 [(.description) = "Formatted to one decimal place, min value is 0.1, max value 100"];
  bool has_player_percent_unlocked() const;
  private:
  bool _internal_has_player_percent_unlocked() const;
  public:
  void clear_player_percent_unlocked();
  const std::string& player_percent_unlocked() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_player_percent_unlocked(ArgT0&& arg0, ArgT... args);
  std::string* mutable_player_percent_unlocked();
  PROTOBUF_NODISCARD std::string* release_player_percent_unlocked();
  void set_allocated_player_percent_unlocked(std::string* player_percent_unlocked);
  private:
  const std::string& _internal_player_percent_unlocked() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_player_percent_unlocked(const std::string& value);
  std::string* _internal_mutable_player_percent_unlocked();
  public:

  // optional uint32 statid = 1;
  bool has_statid() const;
  private:
  bool _internal_has_statid() const;
  public:
  void clear_statid();
  uint32_t statid() const;
  void set_statid(uint32_t value);
  private:
  uint32_t _internal_statid() const;
  void _internal_set_statid(uint32_t value);
  public:

  // optional uint32 bit = 2;
  bool has_bit() const;
  private:
  bool _internal_has_bit() const;
  public:
  void clear_bit();
  uint32_t bit() const;
  void set_bit(uint32_t value);
  private:
  uint32_t _internal_bit() const;
  void _internal_set_bit(uint32_t value);
  public:

  // optional bool hidden = 7;
  bool has_hidden() const;
  private:
  bool _internal_has_hidden() const;
  public:
  void clear_hidden();
  bool hidden() const;
  void set_hidden(bool value);
  private:
  bool _internal_hidden() const;
  void _internal_set_hidden(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CPlayer_GetTopAchievementsForGames_Response.Achievement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr icon_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr icon_gray_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_percent_unlocked_;
  uint32_t statid_;
  uint32_t bit_;
  bool hidden_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetTopAchievementsForGames_Response_Game final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_GetTopAchievementsForGames_Response.Game) */ {
 public:
  inline CPlayer_GetTopAchievementsForGames_Response_Game() : CPlayer_GetTopAchievementsForGames_Response_Game(nullptr) {}
  ~CPlayer_GetTopAchievementsForGames_Response_Game() override;
  explicit constexpr CPlayer_GetTopAchievementsForGames_Response_Game(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetTopAchievementsForGames_Response_Game(const CPlayer_GetTopAchievementsForGames_Response_Game& from);
  CPlayer_GetTopAchievementsForGames_Response_Game(CPlayer_GetTopAchievementsForGames_Response_Game&& from) noexcept
    : CPlayer_GetTopAchievementsForGames_Response_Game() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetTopAchievementsForGames_Response_Game& operator=(const CPlayer_GetTopAchievementsForGames_Response_Game& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetTopAchievementsForGames_Response_Game& operator=(CPlayer_GetTopAchievementsForGames_Response_Game&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetTopAchievementsForGames_Response_Game& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetTopAchievementsForGames_Response_Game* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetTopAchievementsForGames_Response_Game*>(
               &_CPlayer_GetTopAchievementsForGames_Response_Game_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(CPlayer_GetTopAchievementsForGames_Response_Game& a, CPlayer_GetTopAchievementsForGames_Response_Game& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetTopAchievementsForGames_Response_Game* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetTopAchievementsForGames_Response_Game* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetTopAchievementsForGames_Response_Game* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetTopAchievementsForGames_Response_Game>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_GetTopAchievementsForGames_Response_Game& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_GetTopAchievementsForGames_Response_Game& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetTopAchievementsForGames_Response_Game* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetTopAchievementsForGames_Response.Game";
  }
  protected:
  explicit CPlayer_GetTopAchievementsForGames_Response_Game(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAchievementsFieldNumber = 3,
    kAppidFieldNumber = 1,
    kTotalAchievementsFieldNumber = 2,
  };
  // repeated .CPlayer_GetTopAchievementsForGames_Response.Achievement achievements = 3;
  int achievements_size() const;
  private:
  int _internal_achievements_size() const;
  public:
  void clear_achievements();
  ::CPlayer_GetTopAchievementsForGames_Response_Achievement* mutable_achievements(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetTopAchievementsForGames_Response_Achievement >*
      mutable_achievements();
  private:
  const ::CPlayer_GetTopAchievementsForGames_Response_Achievement& _internal_achievements(int index) const;
  ::CPlayer_GetTopAchievementsForGames_Response_Achievement* _internal_add_achievements();
  public:
  const ::CPlayer_GetTopAchievementsForGames_Response_Achievement& achievements(int index) const;
  ::CPlayer_GetTopAchievementsForGames_Response_Achievement* add_achievements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetTopAchievementsForGames_Response_Achievement >&
      achievements() const;

  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional uint32 total_achievements = 2;
  bool has_total_achievements() const;
  private:
  bool _internal_has_total_achievements() const;
  public:
  void clear_total_achievements();
  uint32_t total_achievements() const;
  void set_total_achievements(uint32_t value);
  private:
  uint32_t _internal_total_achievements() const;
  void _internal_set_total_achievements(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPlayer_GetTopAchievementsForGames_Response.Game)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetTopAchievementsForGames_Response_Achievement > achievements_;
  uint32_t appid_;
  uint32_t total_achievements_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetTopAchievementsForGames_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_GetTopAchievementsForGames_Response) */ {
 public:
  inline CPlayer_GetTopAchievementsForGames_Response() : CPlayer_GetTopAchievementsForGames_Response(nullptr) {}
  ~CPlayer_GetTopAchievementsForGames_Response() override;
  explicit constexpr CPlayer_GetTopAchievementsForGames_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetTopAchievementsForGames_Response(const CPlayer_GetTopAchievementsForGames_Response& from);
  CPlayer_GetTopAchievementsForGames_Response(CPlayer_GetTopAchievementsForGames_Response&& from) noexcept
    : CPlayer_GetTopAchievementsForGames_Response() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetTopAchievementsForGames_Response& operator=(const CPlayer_GetTopAchievementsForGames_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetTopAchievementsForGames_Response& operator=(CPlayer_GetTopAchievementsForGames_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetTopAchievementsForGames_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetTopAchievementsForGames_Response* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetTopAchievementsForGames_Response*>(
               &_CPlayer_GetTopAchievementsForGames_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(CPlayer_GetTopAchievementsForGames_Response& a, CPlayer_GetTopAchievementsForGames_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetTopAchievementsForGames_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetTopAchievementsForGames_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetTopAchievementsForGames_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetTopAchievementsForGames_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_GetTopAchievementsForGames_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_GetTopAchievementsForGames_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetTopAchievementsForGames_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetTopAchievementsForGames_Response";
  }
  protected:
  explicit CPlayer_GetTopAchievementsForGames_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CPlayer_GetTopAchievementsForGames_Response_Achievement Achievement;
  typedef CPlayer_GetTopAchievementsForGames_Response_Game Game;

  // accessors -------------------------------------------------------

  enum : int {
    kGamesFieldNumber = 1,
  };
  // repeated .CPlayer_GetTopAchievementsForGames_Response.Game games = 1;
  int games_size() const;
  private:
  int _internal_games_size() const;
  public:
  void clear_games();
  ::CPlayer_GetTopAchievementsForGames_Response_Game* mutable_games(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetTopAchievementsForGames_Response_Game >*
      mutable_games();
  private:
  const ::CPlayer_GetTopAchievementsForGames_Response_Game& _internal_games(int index) const;
  ::CPlayer_GetTopAchievementsForGames_Response_Game* _internal_add_games();
  public:
  const ::CPlayer_GetTopAchievementsForGames_Response_Game& games(int index) const;
  ::CPlayer_GetTopAchievementsForGames_Response_Game* add_games();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetTopAchievementsForGames_Response_Game >&
      games() const;

  // @@protoc_insertion_point(class_scope:CPlayer_GetTopAchievementsForGames_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetTopAchievementsForGames_Response_Game > games_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetAchievementsProgress_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_GetAchievementsProgress_Request) */ {
 public:
  inline CPlayer_GetAchievementsProgress_Request() : CPlayer_GetAchievementsProgress_Request(nullptr) {}
  ~CPlayer_GetAchievementsProgress_Request() override;
  explicit constexpr CPlayer_GetAchievementsProgress_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetAchievementsProgress_Request(const CPlayer_GetAchievementsProgress_Request& from);
  CPlayer_GetAchievementsProgress_Request(CPlayer_GetAchievementsProgress_Request&& from) noexcept
    : CPlayer_GetAchievementsProgress_Request() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetAchievementsProgress_Request& operator=(const CPlayer_GetAchievementsProgress_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetAchievementsProgress_Request& operator=(CPlayer_GetAchievementsProgress_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetAchievementsProgress_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetAchievementsProgress_Request* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetAchievementsProgress_Request*>(
               &_CPlayer_GetAchievementsProgress_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(CPlayer_GetAchievementsProgress_Request& a, CPlayer_GetAchievementsProgress_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetAchievementsProgress_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetAchievementsProgress_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetAchievementsProgress_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetAchievementsProgress_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_GetAchievementsProgress_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_GetAchievementsProgress_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetAchievementsProgress_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetAchievementsProgress_Request";
  }
  protected:
  explicit CPlayer_GetAchievementsProgress_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppidsFieldNumber = 3,
    kLanguageFieldNumber = 2,
    kSteamidFieldNumber = 1,
  };
  // repeated uint32 appids = 3;
  int appids_size() const;
  private:
  int _internal_appids_size() const;
  public:
  void clear_appids();
  private:
  uint32_t _internal_appids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_appids() const;
  void _internal_add_appids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_appids();
  public:
  uint32_t appids(int index) const;
  void set_appids(int index, uint32_t value);
  void add_appids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      appids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_appids();

  // optional string language = 2;
  bool has_language() const;
  private:
  bool _internal_has_language() const;
  public:
  void clear_language();
  const std::string& language() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language();
  PROTOBUF_NODISCARD std::string* release_language();
  void set_allocated_language(std::string* language);
  private:
  const std::string& _internal_language() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language(const std::string& value);
  std::string* _internal_mutable_language();
  public:

  // optional uint64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPlayer_GetAchievementsProgress_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > appids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
  uint64_t steamid_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetAchievementsProgress_Response_AchievementProgress final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_GetAchievementsProgress_Response.AchievementProgress) */ {
 public:
  inline CPlayer_GetAchievementsProgress_Response_AchievementProgress() : CPlayer_GetAchievementsProgress_Response_AchievementProgress(nullptr) {}
  ~CPlayer_GetAchievementsProgress_Response_AchievementProgress() override;
  explicit constexpr CPlayer_GetAchievementsProgress_Response_AchievementProgress(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetAchievementsProgress_Response_AchievementProgress(const CPlayer_GetAchievementsProgress_Response_AchievementProgress& from);
  CPlayer_GetAchievementsProgress_Response_AchievementProgress(CPlayer_GetAchievementsProgress_Response_AchievementProgress&& from) noexcept
    : CPlayer_GetAchievementsProgress_Response_AchievementProgress() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetAchievementsProgress_Response_AchievementProgress& operator=(const CPlayer_GetAchievementsProgress_Response_AchievementProgress& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetAchievementsProgress_Response_AchievementProgress& operator=(CPlayer_GetAchievementsProgress_Response_AchievementProgress&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetAchievementsProgress_Response_AchievementProgress& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetAchievementsProgress_Response_AchievementProgress* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetAchievementsProgress_Response_AchievementProgress*>(
               &_CPlayer_GetAchievementsProgress_Response_AchievementProgress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(CPlayer_GetAchievementsProgress_Response_AchievementProgress& a, CPlayer_GetAchievementsProgress_Response_AchievementProgress& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetAchievementsProgress_Response_AchievementProgress* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetAchievementsProgress_Response_AchievementProgress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetAchievementsProgress_Response_AchievementProgress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetAchievementsProgress_Response_AchievementProgress>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_GetAchievementsProgress_Response_AchievementProgress& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_GetAchievementsProgress_Response_AchievementProgress& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetAchievementsProgress_Response_AchievementProgress* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetAchievementsProgress_Response.AchievementProgress";
  }
  protected:
  explicit CPlayer_GetAchievementsProgress_Response_AchievementProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppidFieldNumber = 1,
    kUnlockedFieldNumber = 2,
    kTotalFieldNumber = 3,
    kPercentageFieldNumber = 4,
    kAllUnlockedFieldNumber = 5,
    kCacheTimeFieldNumber = 6,
  };
  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional uint32 unlocked = 2;
  bool has_unlocked() const;
  private:
  bool _internal_has_unlocked() const;
  public:
  void clear_unlocked();
  uint32_t unlocked() const;
  void set_unlocked(uint32_t value);
  private:
  uint32_t _internal_unlocked() const;
  void _internal_set_unlocked(uint32_t value);
  public:

  // optional uint32 total = 3;
  bool has_total() const;
  private:
  bool _internal_has_total() const;
  public:
  void clear_total();
  uint32_t total() const;
  void set_total(uint32_t value);
  private:
  uint32_t _internal_total() const;
  void _internal_set_total(uint32_t value);
  public:

  // optional float percentage = 4;
  bool has_percentage() const;
  private:
  bool _internal_has_percentage() const;
  public:
  void clear_percentage();
  float percentage() const;
  void set_percentage(float value);
  private:
  float _internal_percentage() const;
  void _internal_set_percentage(float value);
  public:

  // optional bool all_unlocked = 5;
  bool has_all_unlocked() const;
  private:
  bool _internal_has_all_unlocked() const;
  public:
  void clear_all_unlocked();
  bool all_unlocked() const;
  void set_all_unlocked(bool value);
  private:
  bool _internal_all_unlocked() const;
  void _internal_set_all_unlocked(bool value);
  public:

  // optional uint32 cache_time = 6;
  bool has_cache_time() const;
  private:
  bool _internal_has_cache_time() const;
  public:
  void clear_cache_time();
  uint32_t cache_time() const;
  void set_cache_time(uint32_t value);
  private:
  uint32_t _internal_cache_time() const;
  void _internal_set_cache_time(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPlayer_GetAchievementsProgress_Response.AchievementProgress)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t appid_;
  uint32_t unlocked_;
  uint32_t total_;
  float percentage_;
  bool all_unlocked_;
  uint32_t cache_time_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetAchievementsProgress_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_GetAchievementsProgress_Response) */ {
 public:
  inline CPlayer_GetAchievementsProgress_Response() : CPlayer_GetAchievementsProgress_Response(nullptr) {}
  ~CPlayer_GetAchievementsProgress_Response() override;
  explicit constexpr CPlayer_GetAchievementsProgress_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetAchievementsProgress_Response(const CPlayer_GetAchievementsProgress_Response& from);
  CPlayer_GetAchievementsProgress_Response(CPlayer_GetAchievementsProgress_Response&& from) noexcept
    : CPlayer_GetAchievementsProgress_Response() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetAchievementsProgress_Response& operator=(const CPlayer_GetAchievementsProgress_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetAchievementsProgress_Response& operator=(CPlayer_GetAchievementsProgress_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetAchievementsProgress_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetAchievementsProgress_Response* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetAchievementsProgress_Response*>(
               &_CPlayer_GetAchievementsProgress_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(CPlayer_GetAchievementsProgress_Response& a, CPlayer_GetAchievementsProgress_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetAchievementsProgress_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetAchievementsProgress_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetAchievementsProgress_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetAchievementsProgress_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_GetAchievementsProgress_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_GetAchievementsProgress_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetAchievementsProgress_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetAchievementsProgress_Response";
  }
  protected:
  explicit CPlayer_GetAchievementsProgress_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CPlayer_GetAchievementsProgress_Response_AchievementProgress AchievementProgress;

  // accessors -------------------------------------------------------

  enum : int {
    kAchievementProgressFieldNumber = 1,
  };
  // repeated .CPlayer_GetAchievementsProgress_Response.AchievementProgress achievement_progress = 1;
  int achievement_progress_size() const;
  private:
  int _internal_achievement_progress_size() const;
  public:
  void clear_achievement_progress();
  ::CPlayer_GetAchievementsProgress_Response_AchievementProgress* mutable_achievement_progress(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetAchievementsProgress_Response_AchievementProgress >*
      mutable_achievement_progress();
  private:
  const ::CPlayer_GetAchievementsProgress_Response_AchievementProgress& _internal_achievement_progress(int index) const;
  ::CPlayer_GetAchievementsProgress_Response_AchievementProgress* _internal_add_achievement_progress();
  public:
  const ::CPlayer_GetAchievementsProgress_Response_AchievementProgress& achievement_progress(int index) const;
  ::CPlayer_GetAchievementsProgress_Response_AchievementProgress* add_achievement_progress();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetAchievementsProgress_Response_AchievementProgress >&
      achievement_progress() const;

  // @@protoc_insertion_point(class_scope:CPlayer_GetAchievementsProgress_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetAchievementsProgress_Response_AchievementProgress > achievement_progress_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetGameAchievements_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_GetGameAchievements_Request) */ {
 public:
  inline CPlayer_GetGameAchievements_Request() : CPlayer_GetGameAchievements_Request(nullptr) {}
  ~CPlayer_GetGameAchievements_Request() override;
  explicit constexpr CPlayer_GetGameAchievements_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetGameAchievements_Request(const CPlayer_GetGameAchievements_Request& from);
  CPlayer_GetGameAchievements_Request(CPlayer_GetGameAchievements_Request&& from) noexcept
    : CPlayer_GetGameAchievements_Request() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetGameAchievements_Request& operator=(const CPlayer_GetGameAchievements_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetGameAchievements_Request& operator=(CPlayer_GetGameAchievements_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetGameAchievements_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetGameAchievements_Request* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetGameAchievements_Request*>(
               &_CPlayer_GetGameAchievements_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(CPlayer_GetGameAchievements_Request& a, CPlayer_GetGameAchievements_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetGameAchievements_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetGameAchievements_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetGameAchievements_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetGameAchievements_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_GetGameAchievements_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_GetGameAchievements_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetGameAchievements_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetGameAchievements_Request";
  }
  protected:
  explicit CPlayer_GetGameAchievements_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLanguageFieldNumber = 2,
    kAppidFieldNumber = 1,
  };
  // optional string language = 2 [(.description) = "Lowercase, language shortnames"];
  bool has_language() const;
  private:
  bool _internal_has_language() const;
  public:
  void clear_language();
  const std::string& language() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language();
  PROTOBUF_NODISCARD std::string* release_language();
  void set_allocated_language(std::string* language);
  private:
  const std::string& _internal_language() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language(const std::string& value);
  std::string* _internal_mutable_language();
  public:

  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPlayer_GetGameAchievements_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
  uint32_t appid_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetGameAchievements_Response_Achievement final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_GetGameAchievements_Response.Achievement) */ {
 public:
  inline CPlayer_GetGameAchievements_Response_Achievement() : CPlayer_GetGameAchievements_Response_Achievement(nullptr) {}
  ~CPlayer_GetGameAchievements_Response_Achievement() override;
  explicit constexpr CPlayer_GetGameAchievements_Response_Achievement(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetGameAchievements_Response_Achievement(const CPlayer_GetGameAchievements_Response_Achievement& from);
  CPlayer_GetGameAchievements_Response_Achievement(CPlayer_GetGameAchievements_Response_Achievement&& from) noexcept
    : CPlayer_GetGameAchievements_Response_Achievement() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetGameAchievements_Response_Achievement& operator=(const CPlayer_GetGameAchievements_Response_Achievement& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetGameAchievements_Response_Achievement& operator=(CPlayer_GetGameAchievements_Response_Achievement&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetGameAchievements_Response_Achievement& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetGameAchievements_Response_Achievement* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetGameAchievements_Response_Achievement*>(
               &_CPlayer_GetGameAchievements_Response_Achievement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(CPlayer_GetGameAchievements_Response_Achievement& a, CPlayer_GetGameAchievements_Response_Achievement& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetGameAchievements_Response_Achievement* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetGameAchievements_Response_Achievement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetGameAchievements_Response_Achievement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetGameAchievements_Response_Achievement>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_GetGameAchievements_Response_Achievement& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_GetGameAchievements_Response_Achievement& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetGameAchievements_Response_Achievement* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetGameAchievements_Response.Achievement";
  }
  protected:
  explicit CPlayer_GetGameAchievements_Response_Achievement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInternalNameFieldNumber = 1,
    kLocalizedNameFieldNumber = 2,
    kLocalizedDescFieldNumber = 3,
    kIconFieldNumber = 4,
    kIconGrayFieldNumber = 5,
    kPlayerPercentUnlockedFieldNumber = 7,
    kHiddenFieldNumber = 6,
  };
  // optional string internal_name = 1 [(.description) = "Will come uppercase, internal facing name set by the partner; needed to associate with user unlock"];
  bool has_internal_name() const;
  private:
  bool _internal_has_internal_name() const;
  public:
  void clear_internal_name();
  const std::string& internal_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_internal_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_internal_name();
  PROTOBUF_NODISCARD std::string* release_internal_name();
  void set_allocated_internal_name(std::string* internal_name);
  private:
  const std::string& _internal_internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_internal_name(const std::string& value);
  std::string* _internal_mutable_internal_name();
  public:

  // optional string localized_name = 2;
  bool has_localized_name() const;
  private:
  bool _internal_has_localized_name() const;
  public:
  void clear_localized_name();
  const std::string& localized_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_localized_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_localized_name();
  PROTOBUF_NODISCARD std::string* release_localized_name();
  void set_allocated_localized_name(std::string* localized_name);
  private:
  const std::string& _internal_localized_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_localized_name(const std::string& value);
  std::string* _internal_mutable_localized_name();
  public:

  // optional string localized_desc = 3;
  bool has_localized_desc() const;
  private:
  bool _internal_has_localized_desc() const;
  public:
  void clear_localized_desc();
  const std::string& localized_desc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_localized_desc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_localized_desc();
  PROTOBUF_NODISCARD std::string* release_localized_desc();
  void set_allocated_localized_desc(std::string* localized_desc);
  private:
  const std::string& _internal_localized_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_localized_desc(const std::string& value);
  std::string* _internal_mutable_localized_desc();
  public:

  // optional string icon = 4;
  bool has_icon() const;
  private:
  bool _internal_has_icon() const;
  public:
  void clear_icon();
  const std::string& icon() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_icon(ArgT0&& arg0, ArgT... args);
  std::string* mutable_icon();
  PROTOBUF_NODISCARD std::string* release_icon();
  void set_allocated_icon(std::string* icon);
  private:
  const std::string& _internal_icon() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_icon(const std::string& value);
  std::string* _internal_mutable_icon();
  public:

  // optional string icon_gray = 5;
  bool has_icon_gray() const;
  private:
  bool _internal_has_icon_gray() const;
  public:
  void clear_icon_gray();
  const std::string& icon_gray() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_icon_gray(ArgT0&& arg0, ArgT... args);
  std::string* mutable_icon_gray();
  PROTOBUF_NODISCARD std::string* release_icon_gray();
  void set_allocated_icon_gray(std::string* icon_gray);
  private:
  const std::string& _internal_icon_gray() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_icon_gray(const std::string& value);
  std::string* _internal_mutable_icon_gray();
  public:

  // optional string player_percent_unlocked = 7 [(.description) = "Formatted to one decimal place, min value is 0.1, max value 100"];
  bool has_player_percent_unlocked() const;
  private:
  bool _internal_has_player_percent_unlocked() const;
  public:
  void clear_player_percent_unlocked();
  const std::string& player_percent_unlocked() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_player_percent_unlocked(ArgT0&& arg0, ArgT... args);
  std::string* mutable_player_percent_unlocked();
  PROTOBUF_NODISCARD std::string* release_player_percent_unlocked();
  void set_allocated_player_percent_unlocked(std::string* player_percent_unlocked);
  private:
  const std::string& _internal_player_percent_unlocked() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_player_percent_unlocked(const std::string& value);
  std::string* _internal_mutable_player_percent_unlocked();
  public:

  // optional bool hidden = 6;
  bool has_hidden() const;
  private:
  bool _internal_has_hidden() const;
  public:
  void clear_hidden();
  bool hidden() const;
  void set_hidden(bool value);
  private:
  bool _internal_hidden() const;
  void _internal_set_hidden(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CPlayer_GetGameAchievements_Response.Achievement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr internal_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr localized_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr localized_desc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr icon_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr icon_gray_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_percent_unlocked_;
  bool hidden_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetGameAchievements_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_GetGameAchievements_Response) */ {
 public:
  inline CPlayer_GetGameAchievements_Response() : CPlayer_GetGameAchievements_Response(nullptr) {}
  ~CPlayer_GetGameAchievements_Response() override;
  explicit constexpr CPlayer_GetGameAchievements_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetGameAchievements_Response(const CPlayer_GetGameAchievements_Response& from);
  CPlayer_GetGameAchievements_Response(CPlayer_GetGameAchievements_Response&& from) noexcept
    : CPlayer_GetGameAchievements_Response() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetGameAchievements_Response& operator=(const CPlayer_GetGameAchievements_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetGameAchievements_Response& operator=(CPlayer_GetGameAchievements_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetGameAchievements_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetGameAchievements_Response* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetGameAchievements_Response*>(
               &_CPlayer_GetGameAchievements_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(CPlayer_GetGameAchievements_Response& a, CPlayer_GetGameAchievements_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetGameAchievements_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetGameAchievements_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetGameAchievements_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetGameAchievements_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_GetGameAchievements_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_GetGameAchievements_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetGameAchievements_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetGameAchievements_Response";
  }
  protected:
  explicit CPlayer_GetGameAchievements_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CPlayer_GetGameAchievements_Response_Achievement Achievement;

  // accessors -------------------------------------------------------

  enum : int {
    kAchievementsFieldNumber = 1,
  };
  // repeated .CPlayer_GetGameAchievements_Response.Achievement achievements = 1;
  int achievements_size() const;
  private:
  int _internal_achievements_size() const;
  public:
  void clear_achievements();
  ::CPlayer_GetGameAchievements_Response_Achievement* mutable_achievements(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetGameAchievements_Response_Achievement >*
      mutable_achievements();
  private:
  const ::CPlayer_GetGameAchievements_Response_Achievement& _internal_achievements(int index) const;
  ::CPlayer_GetGameAchievements_Response_Achievement* _internal_add_achievements();
  public:
  const ::CPlayer_GetGameAchievements_Response_Achievement& achievements(int index) const;
  ::CPlayer_GetGameAchievements_Response_Achievement* add_achievements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetGameAchievements_Response_Achievement >&
      achievements() const;

  // @@protoc_insertion_point(class_scope:CPlayer_GetGameAchievements_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetGameAchievements_Response_Achievement > achievements_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetFavoriteBadge_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_GetFavoriteBadge_Request) */ {
 public:
  inline CPlayer_GetFavoriteBadge_Request() : CPlayer_GetFavoriteBadge_Request(nullptr) {}
  ~CPlayer_GetFavoriteBadge_Request() override;
  explicit constexpr CPlayer_GetFavoriteBadge_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetFavoriteBadge_Request(const CPlayer_GetFavoriteBadge_Request& from);
  CPlayer_GetFavoriteBadge_Request(CPlayer_GetFavoriteBadge_Request&& from) noexcept
    : CPlayer_GetFavoriteBadge_Request() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetFavoriteBadge_Request& operator=(const CPlayer_GetFavoriteBadge_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetFavoriteBadge_Request& operator=(CPlayer_GetFavoriteBadge_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetFavoriteBadge_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetFavoriteBadge_Request* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetFavoriteBadge_Request*>(
               &_CPlayer_GetFavoriteBadge_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(CPlayer_GetFavoriteBadge_Request& a, CPlayer_GetFavoriteBadge_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetFavoriteBadge_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetFavoriteBadge_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetFavoriteBadge_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetFavoriteBadge_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_GetFavoriteBadge_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_GetFavoriteBadge_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetFavoriteBadge_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetFavoriteBadge_Request";
  }
  protected:
  explicit CPlayer_GetFavoriteBadge_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidFieldNumber = 1,
  };
  // optional uint64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPlayer_GetFavoriteBadge_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t steamid_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetFavoriteBadge_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_GetFavoriteBadge_Response) */ {
 public:
  inline CPlayer_GetFavoriteBadge_Response() : CPlayer_GetFavoriteBadge_Response(nullptr) {}
  ~CPlayer_GetFavoriteBadge_Response() override;
  explicit constexpr CPlayer_GetFavoriteBadge_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetFavoriteBadge_Response(const CPlayer_GetFavoriteBadge_Response& from);
  CPlayer_GetFavoriteBadge_Response(CPlayer_GetFavoriteBadge_Response&& from) noexcept
    : CPlayer_GetFavoriteBadge_Response() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetFavoriteBadge_Response& operator=(const CPlayer_GetFavoriteBadge_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetFavoriteBadge_Response& operator=(CPlayer_GetFavoriteBadge_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetFavoriteBadge_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetFavoriteBadge_Response* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetFavoriteBadge_Response*>(
               &_CPlayer_GetFavoriteBadge_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(CPlayer_GetFavoriteBadge_Response& a, CPlayer_GetFavoriteBadge_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetFavoriteBadge_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetFavoriteBadge_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetFavoriteBadge_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetFavoriteBadge_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_GetFavoriteBadge_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_GetFavoriteBadge_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetFavoriteBadge_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetFavoriteBadge_Response";
  }
  protected:
  explicit CPlayer_GetFavoriteBadge_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHasFavoriteBadgeFieldNumber = 1,
    kBadgeidFieldNumber = 2,
    kCommunityitemidFieldNumber = 3,
    kItemTypeFieldNumber = 4,
    kBorderColorFieldNumber = 5,
    kAppidFieldNumber = 6,
    kLevelFieldNumber = 7,
  };
  // optional bool has_favorite_badge = 1;
  bool has_has_favorite_badge() const;
  private:
  bool _internal_has_has_favorite_badge() const;
  public:
  void clear_has_favorite_badge();
  bool has_favorite_badge() const;
  void set_has_favorite_badge(bool value);
  private:
  bool _internal_has_favorite_badge() const;
  void _internal_set_has_favorite_badge(bool value);
  public:

  // optional uint32 badgeid = 2;
  bool has_badgeid() const;
  private:
  bool _internal_has_badgeid() const;
  public:
  void clear_badgeid();
  uint32_t badgeid() const;
  void set_badgeid(uint32_t value);
  private:
  uint32_t _internal_badgeid() const;
  void _internal_set_badgeid(uint32_t value);
  public:

  // optional uint64 communityitemid = 3;
  bool has_communityitemid() const;
  private:
  bool _internal_has_communityitemid() const;
  public:
  void clear_communityitemid();
  uint64_t communityitemid() const;
  void set_communityitemid(uint64_t value);
  private:
  uint64_t _internal_communityitemid() const;
  void _internal_set_communityitemid(uint64_t value);
  public:

  // optional uint32 item_type = 4;
  bool has_item_type() const;
  private:
  bool _internal_has_item_type() const;
  public:
  void clear_item_type();
  uint32_t item_type() const;
  void set_item_type(uint32_t value);
  private:
  uint32_t _internal_item_type() const;
  void _internal_set_item_type(uint32_t value);
  public:

  // optional uint32 border_color = 5;
  bool has_border_color() const;
  private:
  bool _internal_has_border_color() const;
  public:
  void clear_border_color();
  uint32_t border_color() const;
  void set_border_color(uint32_t value);
  private:
  uint32_t _internal_border_color() const;
  void _internal_set_border_color(uint32_t value);
  public:

  // optional uint32 appid = 6;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional uint32 level = 7;
  bool has_level() const;
  private:
  bool _internal_has_level() const;
  public:
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPlayer_GetFavoriteBadge_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool has_favorite_badge_;
  uint32_t badgeid_;
  uint64_t communityitemid_;
  uint32_t item_type_;
  uint32_t border_color_;
  uint32_t appid_;
  uint32_t level_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_SetFavoriteBadge_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_SetFavoriteBadge_Request) */ {
 public:
  inline CPlayer_SetFavoriteBadge_Request() : CPlayer_SetFavoriteBadge_Request(nullptr) {}
  ~CPlayer_SetFavoriteBadge_Request() override;
  explicit constexpr CPlayer_SetFavoriteBadge_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_SetFavoriteBadge_Request(const CPlayer_SetFavoriteBadge_Request& from);
  CPlayer_SetFavoriteBadge_Request(CPlayer_SetFavoriteBadge_Request&& from) noexcept
    : CPlayer_SetFavoriteBadge_Request() {
    *this = ::std::move(from);
  }

  inline CPlayer_SetFavoriteBadge_Request& operator=(const CPlayer_SetFavoriteBadge_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_SetFavoriteBadge_Request& operator=(CPlayer_SetFavoriteBadge_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_SetFavoriteBadge_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_SetFavoriteBadge_Request* internal_default_instance() {
    return reinterpret_cast<const CPlayer_SetFavoriteBadge_Request*>(
               &_CPlayer_SetFavoriteBadge_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(CPlayer_SetFavoriteBadge_Request& a, CPlayer_SetFavoriteBadge_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_SetFavoriteBadge_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_SetFavoriteBadge_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_SetFavoriteBadge_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_SetFavoriteBadge_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_SetFavoriteBadge_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_SetFavoriteBadge_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_SetFavoriteBadge_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_SetFavoriteBadge_Request";
  }
  protected:
  explicit CPlayer_SetFavoriteBadge_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommunityitemidFieldNumber = 1,
    kBadgeidFieldNumber = 2,
  };
  // optional uint64 communityitemid = 1;
  bool has_communityitemid() const;
  private:
  bool _internal_has_communityitemid() const;
  public:
  void clear_communityitemid();
  uint64_t communityitemid() const;
  void set_communityitemid(uint64_t value);
  private:
  uint64_t _internal_communityitemid() const;
  void _internal_set_communityitemid(uint64_t value);
  public:

  // optional uint32 badgeid = 2;
  bool has_badgeid() const;
  private:
  bool _internal_has_badgeid() const;
  public:
  void clear_badgeid();
  uint32_t badgeid() const;
  void set_badgeid(uint32_t value);
  private:
  uint32_t _internal_badgeid() const;
  void _internal_set_badgeid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPlayer_SetFavoriteBadge_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t communityitemid_;
  uint32_t badgeid_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_SetFavoriteBadge_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CPlayer_SetFavoriteBadge_Response) */ {
 public:
  inline CPlayer_SetFavoriteBadge_Response() : CPlayer_SetFavoriteBadge_Response(nullptr) {}
  explicit constexpr CPlayer_SetFavoriteBadge_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_SetFavoriteBadge_Response(const CPlayer_SetFavoriteBadge_Response& from);
  CPlayer_SetFavoriteBadge_Response(CPlayer_SetFavoriteBadge_Response&& from) noexcept
    : CPlayer_SetFavoriteBadge_Response() {
    *this = ::std::move(from);
  }

  inline CPlayer_SetFavoriteBadge_Response& operator=(const CPlayer_SetFavoriteBadge_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_SetFavoriteBadge_Response& operator=(CPlayer_SetFavoriteBadge_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_SetFavoriteBadge_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_SetFavoriteBadge_Response* internal_default_instance() {
    return reinterpret_cast<const CPlayer_SetFavoriteBadge_Response*>(
               &_CPlayer_SetFavoriteBadge_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(CPlayer_SetFavoriteBadge_Response& a, CPlayer_SetFavoriteBadge_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_SetFavoriteBadge_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_SetFavoriteBadge_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_SetFavoriteBadge_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_SetFavoriteBadge_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CPlayer_SetFavoriteBadge_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CPlayer_SetFavoriteBadge_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_SetFavoriteBadge_Response";
  }
  protected:
  explicit CPlayer_SetFavoriteBadge_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CPlayer_SetFavoriteBadge_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetProfileCustomization_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_GetProfileCustomization_Request) */ {
 public:
  inline CPlayer_GetProfileCustomization_Request() : CPlayer_GetProfileCustomization_Request(nullptr) {}
  ~CPlayer_GetProfileCustomization_Request() override;
  explicit constexpr CPlayer_GetProfileCustomization_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetProfileCustomization_Request(const CPlayer_GetProfileCustomization_Request& from);
  CPlayer_GetProfileCustomization_Request(CPlayer_GetProfileCustomization_Request&& from) noexcept
    : CPlayer_GetProfileCustomization_Request() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetProfileCustomization_Request& operator=(const CPlayer_GetProfileCustomization_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetProfileCustomization_Request& operator=(CPlayer_GetProfileCustomization_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetProfileCustomization_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetProfileCustomization_Request* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetProfileCustomization_Request*>(
               &_CPlayer_GetProfileCustomization_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(CPlayer_GetProfileCustomization_Request& a, CPlayer_GetProfileCustomization_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetProfileCustomization_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetProfileCustomization_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetProfileCustomization_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetProfileCustomization_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_GetProfileCustomization_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_GetProfileCustomization_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetProfileCustomization_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetProfileCustomization_Request";
  }
  protected:
  explicit CPlayer_GetProfileCustomization_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidFieldNumber = 1,
    kIncludeInactiveCustomizationsFieldNumber = 2,
    kIncludePurchasedCustomizationsFieldNumber = 3,
  };
  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional bool include_inactive_customizations = 2;
  bool has_include_inactive_customizations() const;
  private:
  bool _internal_has_include_inactive_customizations() const;
  public:
  void clear_include_inactive_customizations();
  bool include_inactive_customizations() const;
  void set_include_inactive_customizations(bool value);
  private:
  bool _internal_include_inactive_customizations() const;
  void _internal_set_include_inactive_customizations(bool value);
  public:

  // optional bool include_purchased_customizations = 3;
  bool has_include_purchased_customizations() const;
  private:
  bool _internal_has_include_purchased_customizations() const;
  public:
  void clear_include_purchased_customizations();
  bool include_purchased_customizations() const;
  void set_include_purchased_customizations(bool value);
  private:
  bool _internal_include_purchased_customizations() const;
  void _internal_set_include_purchased_customizations(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CPlayer_GetProfileCustomization_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t steamid_;
  bool include_inactive_customizations_;
  bool include_purchased_customizations_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class ProfileCustomizationSlot final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProfileCustomizationSlot) */ {
 public:
  inline ProfileCustomizationSlot() : ProfileCustomizationSlot(nullptr) {}
  ~ProfileCustomizationSlot() override;
  explicit constexpr ProfileCustomizationSlot(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProfileCustomizationSlot(const ProfileCustomizationSlot& from);
  ProfileCustomizationSlot(ProfileCustomizationSlot&& from) noexcept
    : ProfileCustomizationSlot() {
    *this = ::std::move(from);
  }

  inline ProfileCustomizationSlot& operator=(const ProfileCustomizationSlot& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfileCustomizationSlot& operator=(ProfileCustomizationSlot&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProfileCustomizationSlot& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProfileCustomizationSlot* internal_default_instance() {
    return reinterpret_cast<const ProfileCustomizationSlot*>(
               &_ProfileCustomizationSlot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(ProfileCustomizationSlot& a, ProfileCustomizationSlot& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfileCustomizationSlot* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProfileCustomizationSlot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProfileCustomizationSlot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProfileCustomizationSlot>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProfileCustomizationSlot& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProfileCustomizationSlot& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfileCustomizationSlot* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProfileCustomizationSlot";
  }
  protected:
  explicit ProfileCustomizationSlot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNotesFieldNumber = 6,
    kTitleFieldNumber = 7,
    kSlotFieldNumber = 1,
    kAppidFieldNumber = 2,
    kPublishedfileidFieldNumber = 3,
    kItemAssetidFieldNumber = 4,
    kItemContextidFieldNumber = 5,
    kAccountidFieldNumber = 8,
    kBadgeidFieldNumber = 9,
    kItemClassidFieldNumber = 11,
    kBorderColorFieldNumber = 10,
    kBanCheckResultFieldNumber = 13,
    kItemInstanceidFieldNumber = 12,
    kReplayYearFieldNumber = 14,
  };
  // optional string notes = 6;
  bool has_notes() const;
  private:
  bool _internal_has_notes() const;
  public:
  void clear_notes();
  const std::string& notes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_notes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_notes();
  PROTOBUF_NODISCARD std::string* release_notes();
  void set_allocated_notes(std::string* notes);
  private:
  const std::string& _internal_notes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_notes(const std::string& value);
  std::string* _internal_mutable_notes();
  public:

  // optional string title = 7;
  bool has_title() const;
  private:
  bool _internal_has_title() const;
  public:
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // optional uint32 slot = 1;
  bool has_slot() const;
  private:
  bool _internal_has_slot() const;
  public:
  void clear_slot();
  uint32_t slot() const;
  void set_slot(uint32_t value);
  private:
  uint32_t _internal_slot() const;
  void _internal_set_slot(uint32_t value);
  public:

  // optional uint32 appid = 2;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional uint64 publishedfileid = 3;
  bool has_publishedfileid() const;
  private:
  bool _internal_has_publishedfileid() const;
  public:
  void clear_publishedfileid();
  uint64_t publishedfileid() const;
  void set_publishedfileid(uint64_t value);
  private:
  uint64_t _internal_publishedfileid() const;
  void _internal_set_publishedfileid(uint64_t value);
  public:

  // optional uint64 item_assetid = 4;
  bool has_item_assetid() const;
  private:
  bool _internal_has_item_assetid() const;
  public:
  void clear_item_assetid();
  uint64_t item_assetid() const;
  void set_item_assetid(uint64_t value);
  private:
  uint64_t _internal_item_assetid() const;
  void _internal_set_item_assetid(uint64_t value);
  public:

  // optional uint64 item_contextid = 5;
  bool has_item_contextid() const;
  private:
  bool _internal_has_item_contextid() const;
  public:
  void clear_item_contextid();
  uint64_t item_contextid() const;
  void set_item_contextid(uint64_t value);
  private:
  uint64_t _internal_item_contextid() const;
  void _internal_set_item_contextid(uint64_t value);
  public:

  // optional uint32 accountid = 8;
  bool has_accountid() const;
  private:
  bool _internal_has_accountid() const;
  public:
  void clear_accountid();
  uint32_t accountid() const;
  void set_accountid(uint32_t value);
  private:
  uint32_t _internal_accountid() const;
  void _internal_set_accountid(uint32_t value);
  public:

  // optional uint32 badgeid = 9;
  bool has_badgeid() const;
  private:
  bool _internal_has_badgeid() const;
  public:
  void clear_badgeid();
  uint32_t badgeid() const;
  void set_badgeid(uint32_t value);
  private:
  uint32_t _internal_badgeid() const;
  void _internal_set_badgeid(uint32_t value);
  public:

  // optional uint64 item_classid = 11;
  bool has_item_classid() const;
  private:
  bool _internal_has_item_classid() const;
  public:
  void clear_item_classid();
  uint64_t item_classid() const;
  void set_item_classid(uint64_t value);
  private:
  uint64_t _internal_item_classid() const;
  void _internal_set_item_classid(uint64_t value);
  public:

  // optional uint32 border_color = 10;
  bool has_border_color() const;
  private:
  bool _internal_has_border_color() const;
  public:
  void clear_border_color();
  uint32_t border_color() const;
  void set_border_color(uint32_t value);
  private:
  uint32_t _internal_border_color() const;
  void _internal_set_border_color(uint32_t value);
  public:

  // optional .EBanContentCheckResult ban_check_result = 13 [default = k_EBanContentCheckResult_NotScanned];
  bool has_ban_check_result() const;
  private:
  bool _internal_has_ban_check_result() const;
  public:
  void clear_ban_check_result();
  ::EBanContentCheckResult ban_check_result() const;
  void set_ban_check_result(::EBanContentCheckResult value);
  private:
  ::EBanContentCheckResult _internal_ban_check_result() const;
  void _internal_set_ban_check_result(::EBanContentCheckResult value);
  public:

  // optional uint64 item_instanceid = 12;
  bool has_item_instanceid() const;
  private:
  bool _internal_has_item_instanceid() const;
  public:
  void clear_item_instanceid();
  uint64_t item_instanceid() const;
  void set_item_instanceid(uint64_t value);
  private:
  uint64_t _internal_item_instanceid() const;
  void _internal_set_item_instanceid(uint64_t value);
  public:

  // optional uint32 replay_year = 14;
  bool has_replay_year() const;
  private:
  bool _internal_has_replay_year() const;
  public:
  void clear_replay_year();
  uint32_t replay_year() const;
  void set_replay_year(uint32_t value);
  private:
  uint32_t _internal_replay_year() const;
  void _internal_set_replay_year(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProfileCustomizationSlot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr notes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  uint32_t slot_;
  uint32_t appid_;
  uint64_t publishedfileid_;
  uint64_t item_assetid_;
  uint64_t item_contextid_;
  uint32_t accountid_;
  uint32_t badgeid_;
  uint64_t item_classid_;
  uint32_t border_color_;
  int ban_check_result_;
  uint64_t item_instanceid_;
  uint32_t replay_year_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class ProfileCustomization final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProfileCustomization) */ {
 public:
  inline ProfileCustomization() : ProfileCustomization(nullptr) {}
  ~ProfileCustomization() override;
  explicit constexpr ProfileCustomization(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProfileCustomization(const ProfileCustomization& from);
  ProfileCustomization(ProfileCustomization&& from) noexcept
    : ProfileCustomization() {
    *this = ::std::move(from);
  }

  inline ProfileCustomization& operator=(const ProfileCustomization& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfileCustomization& operator=(ProfileCustomization&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProfileCustomization& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProfileCustomization* internal_default_instance() {
    return reinterpret_cast<const ProfileCustomization*>(
               &_ProfileCustomization_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(ProfileCustomization& a, ProfileCustomization& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfileCustomization* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProfileCustomization* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProfileCustomization* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProfileCustomization>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProfileCustomization& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProfileCustomization& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfileCustomization* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProfileCustomization";
  }
  protected:
  explicit ProfileCustomization(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSlotsFieldNumber = 3,
    kCustomizationTypeFieldNumber = 1,
    kLargeFieldNumber = 2,
    kActiveFieldNumber = 4,
    kPurchaseidFieldNumber = 6,
    kCustomizationStyleFieldNumber = 5,
    kLevelFieldNumber = 7,
  };
  // repeated .ProfileCustomizationSlot slots = 3;
  int slots_size() const;
  private:
  int _internal_slots_size() const;
  public:
  void clear_slots();
  ::ProfileCustomizationSlot* mutable_slots(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfileCustomizationSlot >*
      mutable_slots();
  private:
  const ::ProfileCustomizationSlot& _internal_slots(int index) const;
  ::ProfileCustomizationSlot* _internal_add_slots();
  public:
  const ::ProfileCustomizationSlot& slots(int index) const;
  ::ProfileCustomizationSlot* add_slots();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfileCustomizationSlot >&
      slots() const;

  // optional .EProfileCustomizationType customization_type = 1 [default = k_EProfileCustomizationTypeInvalid];
  bool has_customization_type() const;
  private:
  bool _internal_has_customization_type() const;
  public:
  void clear_customization_type();
  ::EProfileCustomizationType customization_type() const;
  void set_customization_type(::EProfileCustomizationType value);
  private:
  ::EProfileCustomizationType _internal_customization_type() const;
  void _internal_set_customization_type(::EProfileCustomizationType value);
  public:

  // optional bool large = 2;
  bool has_large() const;
  private:
  bool _internal_has_large() const;
  public:
  void clear_large();
  bool large() const;
  void set_large(bool value);
  private:
  bool _internal_large() const;
  void _internal_set_large(bool value);
  public:

  // optional bool active = 4;
  bool has_active() const;
  private:
  bool _internal_has_active() const;
  public:
  void clear_active();
  bool active() const;
  void set_active(bool value);
  private:
  bool _internal_active() const;
  void _internal_set_active(bool value);
  public:

  // optional uint64 purchaseid = 6;
  bool has_purchaseid() const;
  private:
  bool _internal_has_purchaseid() const;
  public:
  void clear_purchaseid();
  uint64_t purchaseid() const;
  void set_purchaseid(uint64_t value);
  private:
  uint64_t _internal_purchaseid() const;
  void _internal_set_purchaseid(uint64_t value);
  public:

  // optional .EProfileCustomizationStyle customization_style = 5 [default = k_EProfileCustomizationStyleDefault];
  bool has_customization_style() const;
  private:
  bool _internal_has_customization_style() const;
  public:
  void clear_customization_style();
  ::EProfileCustomizationStyle customization_style() const;
  void set_customization_style(::EProfileCustomizationStyle value);
  private:
  ::EProfileCustomizationStyle _internal_customization_style() const;
  void _internal_set_customization_style(::EProfileCustomizationStyle value);
  public:

  // optional uint32 level = 7;
  bool has_level() const;
  private:
  bool _internal_has_level() const;
  public:
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProfileCustomization)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfileCustomizationSlot > slots_;
  int customization_type_;
  bool large_;
  bool active_;
  uint64_t purchaseid_;
  int customization_style_;
  uint32_t level_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class ProfileTheme final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProfileTheme) */ {
 public:
  inline ProfileTheme() : ProfileTheme(nullptr) {}
  ~ProfileTheme() override;
  explicit constexpr ProfileTheme(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProfileTheme(const ProfileTheme& from);
  ProfileTheme(ProfileTheme&& from) noexcept
    : ProfileTheme() {
    *this = ::std::move(from);
  }

  inline ProfileTheme& operator=(const ProfileTheme& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfileTheme& operator=(ProfileTheme&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProfileTheme& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProfileTheme* internal_default_instance() {
    return reinterpret_cast<const ProfileTheme*>(
               &_ProfileTheme_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(ProfileTheme& a, ProfileTheme& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfileTheme* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProfileTheme* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProfileTheme* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProfileTheme>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProfileTheme& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProfileTheme& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfileTheme* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProfileTheme";
  }
  protected:
  explicit ProfileTheme(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kThemeIdFieldNumber = 1,
    kTitleFieldNumber = 2,
  };
  // optional string theme_id = 1;
  bool has_theme_id() const;
  private:
  bool _internal_has_theme_id() const;
  public:
  void clear_theme_id();
  const std::string& theme_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_theme_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_theme_id();
  PROTOBUF_NODISCARD std::string* release_theme_id();
  void set_allocated_theme_id(std::string* theme_id);
  private:
  const std::string& _internal_theme_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_theme_id(const std::string& value);
  std::string* _internal_mutable_theme_id();
  public:

  // optional string title = 2;
  bool has_title() const;
  private:
  bool _internal_has_title() const;
  public:
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // @@protoc_insertion_point(class_scope:ProfileTheme)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr theme_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class ProfilePreferences final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProfilePreferences) */ {
 public:
  inline ProfilePreferences() : ProfilePreferences(nullptr) {}
  ~ProfilePreferences() override;
  explicit constexpr ProfilePreferences(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProfilePreferences(const ProfilePreferences& from);
  ProfilePreferences(ProfilePreferences&& from) noexcept
    : ProfilePreferences() {
    *this = ::std::move(from);
  }

  inline ProfilePreferences& operator=(const ProfilePreferences& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfilePreferences& operator=(ProfilePreferences&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProfilePreferences& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProfilePreferences* internal_default_instance() {
    return reinterpret_cast<const ProfilePreferences*>(
               &_ProfilePreferences_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(ProfilePreferences& a, ProfilePreferences& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfilePreferences* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProfilePreferences* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProfilePreferences* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProfilePreferences>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProfilePreferences& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProfilePreferences& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfilePreferences* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProfilePreferences";
  }
  protected:
  explicit ProfilePreferences(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHideProfileAwardsFieldNumber = 1,
  };
  // optional bool hide_profile_awards = 1;
  bool has_hide_profile_awards() const;
  private:
  bool _internal_has_hide_profile_awards() const;
  public:
  void clear_hide_profile_awards();
  bool hide_profile_awards() const;
  void set_hide_profile_awards(bool value);
  private:
  bool _internal_hide_profile_awards() const;
  void _internal_set_hide_profile_awards(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ProfilePreferences)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool hide_profile_awards_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetProfileCustomization_Response_PurchasedCustomization final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_GetProfileCustomization_Response.PurchasedCustomization) */ {
 public:
  inline CPlayer_GetProfileCustomization_Response_PurchasedCustomization() : CPlayer_GetProfileCustomization_Response_PurchasedCustomization(nullptr) {}
  ~CPlayer_GetProfileCustomization_Response_PurchasedCustomization() override;
  explicit constexpr CPlayer_GetProfileCustomization_Response_PurchasedCustomization(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetProfileCustomization_Response_PurchasedCustomization(const CPlayer_GetProfileCustomization_Response_PurchasedCustomization& from);
  CPlayer_GetProfileCustomization_Response_PurchasedCustomization(CPlayer_GetProfileCustomization_Response_PurchasedCustomization&& from) noexcept
    : CPlayer_GetProfileCustomization_Response_PurchasedCustomization() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetProfileCustomization_Response_PurchasedCustomization& operator=(const CPlayer_GetProfileCustomization_Response_PurchasedCustomization& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetProfileCustomization_Response_PurchasedCustomization& operator=(CPlayer_GetProfileCustomization_Response_PurchasedCustomization&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetProfileCustomization_Response_PurchasedCustomization& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetProfileCustomization_Response_PurchasedCustomization* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetProfileCustomization_Response_PurchasedCustomization*>(
               &_CPlayer_GetProfileCustomization_Response_PurchasedCustomization_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(CPlayer_GetProfileCustomization_Response_PurchasedCustomization& a, CPlayer_GetProfileCustomization_Response_PurchasedCustomization& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetProfileCustomization_Response_PurchasedCustomization* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetProfileCustomization_Response_PurchasedCustomization* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetProfileCustomization_Response_PurchasedCustomization* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetProfileCustomization_Response_PurchasedCustomization>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_GetProfileCustomization_Response_PurchasedCustomization& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_GetProfileCustomization_Response_PurchasedCustomization& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetProfileCustomization_Response_PurchasedCustomization* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetProfileCustomization_Response.PurchasedCustomization";
  }
  protected:
  explicit CPlayer_GetProfileCustomization_Response_PurchasedCustomization(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPurchaseidFieldNumber = 1,
    kCustomizationTypeFieldNumber = 2,
    kLevelFieldNumber = 3,
  };
  // optional uint64 purchaseid = 1;
  bool has_purchaseid() const;
  private:
  bool _internal_has_purchaseid() const;
  public:
  void clear_purchaseid();
  uint64_t purchaseid() const;
  void set_purchaseid(uint64_t value);
  private:
  uint64_t _internal_purchaseid() const;
  void _internal_set_purchaseid(uint64_t value);
  public:

  // optional .EProfileCustomizationType customization_type = 2 [default = k_EProfileCustomizationTypeInvalid];
  bool has_customization_type() const;
  private:
  bool _internal_has_customization_type() const;
  public:
  void clear_customization_type();
  ::EProfileCustomizationType customization_type() const;
  void set_customization_type(::EProfileCustomizationType value);
  private:
  ::EProfileCustomizationType _internal_customization_type() const;
  void _internal_set_customization_type(::EProfileCustomizationType value);
  public:

  // optional uint32 level = 3;
  bool has_level() const;
  private:
  bool _internal_has_level() const;
  public:
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPlayer_GetProfileCustomization_Response.PurchasedCustomization)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t purchaseid_;
  int customization_type_;
  uint32_t level_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetProfileCustomization_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_GetProfileCustomization_Response) */ {
 public:
  inline CPlayer_GetProfileCustomization_Response() : CPlayer_GetProfileCustomization_Response(nullptr) {}
  ~CPlayer_GetProfileCustomization_Response() override;
  explicit constexpr CPlayer_GetProfileCustomization_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetProfileCustomization_Response(const CPlayer_GetProfileCustomization_Response& from);
  CPlayer_GetProfileCustomization_Response(CPlayer_GetProfileCustomization_Response&& from) noexcept
    : CPlayer_GetProfileCustomization_Response() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetProfileCustomization_Response& operator=(const CPlayer_GetProfileCustomization_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetProfileCustomization_Response& operator=(CPlayer_GetProfileCustomization_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetProfileCustomization_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetProfileCustomization_Response* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetProfileCustomization_Response*>(
               &_CPlayer_GetProfileCustomization_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(CPlayer_GetProfileCustomization_Response& a, CPlayer_GetProfileCustomization_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetProfileCustomization_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetProfileCustomization_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetProfileCustomization_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetProfileCustomization_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_GetProfileCustomization_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_GetProfileCustomization_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetProfileCustomization_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetProfileCustomization_Response";
  }
  protected:
  explicit CPlayer_GetProfileCustomization_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CPlayer_GetProfileCustomization_Response_PurchasedCustomization PurchasedCustomization;

  // accessors -------------------------------------------------------

  enum : int {
    kCustomizationsFieldNumber = 1,
    kPurchasedCustomizationsFieldNumber = 4,
    kProfileThemeFieldNumber = 3,
    kProfilePreferencesFieldNumber = 5,
    kSlotsAvailableFieldNumber = 2,
  };
  // repeated .ProfileCustomization customizations = 1;
  int customizations_size() const;
  private:
  int _internal_customizations_size() const;
  public:
  void clear_customizations();
  ::ProfileCustomization* mutable_customizations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfileCustomization >*
      mutable_customizations();
  private:
  const ::ProfileCustomization& _internal_customizations(int index) const;
  ::ProfileCustomization* _internal_add_customizations();
  public:
  const ::ProfileCustomization& customizations(int index) const;
  ::ProfileCustomization* add_customizations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfileCustomization >&
      customizations() const;

  // repeated .CPlayer_GetProfileCustomization_Response.PurchasedCustomization purchased_customizations = 4;
  int purchased_customizations_size() const;
  private:
  int _internal_purchased_customizations_size() const;
  public:
  void clear_purchased_customizations();
  ::CPlayer_GetProfileCustomization_Response_PurchasedCustomization* mutable_purchased_customizations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetProfileCustomization_Response_PurchasedCustomization >*
      mutable_purchased_customizations();
  private:
  const ::CPlayer_GetProfileCustomization_Response_PurchasedCustomization& _internal_purchased_customizations(int index) const;
  ::CPlayer_GetProfileCustomization_Response_PurchasedCustomization* _internal_add_purchased_customizations();
  public:
  const ::CPlayer_GetProfileCustomization_Response_PurchasedCustomization& purchased_customizations(int index) const;
  ::CPlayer_GetProfileCustomization_Response_PurchasedCustomization* add_purchased_customizations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetProfileCustomization_Response_PurchasedCustomization >&
      purchased_customizations() const;

  // optional .ProfileTheme profile_theme = 3;
  bool has_profile_theme() const;
  private:
  bool _internal_has_profile_theme() const;
  public:
  void clear_profile_theme();
  const ::ProfileTheme& profile_theme() const;
  PROTOBUF_NODISCARD ::ProfileTheme* release_profile_theme();
  ::ProfileTheme* mutable_profile_theme();
  void set_allocated_profile_theme(::ProfileTheme* profile_theme);
  private:
  const ::ProfileTheme& _internal_profile_theme() const;
  ::ProfileTheme* _internal_mutable_profile_theme();
  public:
  void unsafe_arena_set_allocated_profile_theme(
      ::ProfileTheme* profile_theme);
  ::ProfileTheme* unsafe_arena_release_profile_theme();

  // optional .ProfilePreferences profile_preferences = 5;
  bool has_profile_preferences() const;
  private:
  bool _internal_has_profile_preferences() const;
  public:
  void clear_profile_preferences();
  const ::ProfilePreferences& profile_preferences() const;
  PROTOBUF_NODISCARD ::ProfilePreferences* release_profile_preferences();
  ::ProfilePreferences* mutable_profile_preferences();
  void set_allocated_profile_preferences(::ProfilePreferences* profile_preferences);
  private:
  const ::ProfilePreferences& _internal_profile_preferences() const;
  ::ProfilePreferences* _internal_mutable_profile_preferences();
  public:
  void unsafe_arena_set_allocated_profile_preferences(
      ::ProfilePreferences* profile_preferences);
  ::ProfilePreferences* unsafe_arena_release_profile_preferences();

  // optional uint32 slots_available = 2;
  bool has_slots_available() const;
  private:
  bool _internal_has_slots_available() const;
  public:
  void clear_slots_available();
  uint32_t slots_available() const;
  void set_slots_available(uint32_t value);
  private:
  uint32_t _internal_slots_available() const;
  void _internal_set_slots_available(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPlayer_GetProfileCustomization_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfileCustomization > customizations_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetProfileCustomization_Response_PurchasedCustomization > purchased_customizations_;
  ::ProfileTheme* profile_theme_;
  ::ProfilePreferences* profile_preferences_;
  uint32_t slots_available_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetPurchasedProfileCustomizations_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_GetPurchasedProfileCustomizations_Request) */ {
 public:
  inline CPlayer_GetPurchasedProfileCustomizations_Request() : CPlayer_GetPurchasedProfileCustomizations_Request(nullptr) {}
  ~CPlayer_GetPurchasedProfileCustomizations_Request() override;
  explicit constexpr CPlayer_GetPurchasedProfileCustomizations_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetPurchasedProfileCustomizations_Request(const CPlayer_GetPurchasedProfileCustomizations_Request& from);
  CPlayer_GetPurchasedProfileCustomizations_Request(CPlayer_GetPurchasedProfileCustomizations_Request&& from) noexcept
    : CPlayer_GetPurchasedProfileCustomizations_Request() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetPurchasedProfileCustomizations_Request& operator=(const CPlayer_GetPurchasedProfileCustomizations_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetPurchasedProfileCustomizations_Request& operator=(CPlayer_GetPurchasedProfileCustomizations_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetPurchasedProfileCustomizations_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetPurchasedProfileCustomizations_Request* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetPurchasedProfileCustomizations_Request*>(
               &_CPlayer_GetPurchasedProfileCustomizations_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(CPlayer_GetPurchasedProfileCustomizations_Request& a, CPlayer_GetPurchasedProfileCustomizations_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetPurchasedProfileCustomizations_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetPurchasedProfileCustomizations_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetPurchasedProfileCustomizations_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetPurchasedProfileCustomizations_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_GetPurchasedProfileCustomizations_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_GetPurchasedProfileCustomizations_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetPurchasedProfileCustomizations_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetPurchasedProfileCustomizations_Request";
  }
  protected:
  explicit CPlayer_GetPurchasedProfileCustomizations_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidFieldNumber = 1,
  };
  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPlayer_GetPurchasedProfileCustomizations_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t steamid_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_GetPurchasedProfileCustomizations_Response.PurchasedCustomization) */ {
 public:
  inline CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization() : CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization(nullptr) {}
  ~CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization() override;
  explicit constexpr CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization(const CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization& from);
  CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization(CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization&& from) noexcept
    : CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization& operator=(const CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization& operator=(CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization*>(
               &_CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization& a, CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetPurchasedProfileCustomizations_Response.PurchasedCustomization";
  }
  protected:
  explicit CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPurchaseidFieldNumber = 1,
    kCustomizationTypeFieldNumber = 2,
  };
  // optional uint64 purchaseid = 1;
  bool has_purchaseid() const;
  private:
  bool _internal_has_purchaseid() const;
  public:
  void clear_purchaseid();
  uint64_t purchaseid() const;
  void set_purchaseid(uint64_t value);
  private:
  uint64_t _internal_purchaseid() const;
  void _internal_set_purchaseid(uint64_t value);
  public:

  // optional .EProfileCustomizationType customization_type = 2 [default = k_EProfileCustomizationTypeInvalid];
  bool has_customization_type() const;
  private:
  bool _internal_has_customization_type() const;
  public:
  void clear_customization_type();
  ::EProfileCustomizationType customization_type() const;
  void set_customization_type(::EProfileCustomizationType value);
  private:
  ::EProfileCustomizationType _internal_customization_type() const;
  void _internal_set_customization_type(::EProfileCustomizationType value);
  public:

  // @@protoc_insertion_point(class_scope:CPlayer_GetPurchasedProfileCustomizations_Response.PurchasedCustomization)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t purchaseid_;
  int customization_type_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetPurchasedProfileCustomizations_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_GetPurchasedProfileCustomizations_Response) */ {
 public:
  inline CPlayer_GetPurchasedProfileCustomizations_Response() : CPlayer_GetPurchasedProfileCustomizations_Response(nullptr) {}
  ~CPlayer_GetPurchasedProfileCustomizations_Response() override;
  explicit constexpr CPlayer_GetPurchasedProfileCustomizations_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetPurchasedProfileCustomizations_Response(const CPlayer_GetPurchasedProfileCustomizations_Response& from);
  CPlayer_GetPurchasedProfileCustomizations_Response(CPlayer_GetPurchasedProfileCustomizations_Response&& from) noexcept
    : CPlayer_GetPurchasedProfileCustomizations_Response() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetPurchasedProfileCustomizations_Response& operator=(const CPlayer_GetPurchasedProfileCustomizations_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetPurchasedProfileCustomizations_Response& operator=(CPlayer_GetPurchasedProfileCustomizations_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetPurchasedProfileCustomizations_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetPurchasedProfileCustomizations_Response* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetPurchasedProfileCustomizations_Response*>(
               &_CPlayer_GetPurchasedProfileCustomizations_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(CPlayer_GetPurchasedProfileCustomizations_Response& a, CPlayer_GetPurchasedProfileCustomizations_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetPurchasedProfileCustomizations_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetPurchasedProfileCustomizations_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetPurchasedProfileCustomizations_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetPurchasedProfileCustomizations_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_GetPurchasedProfileCustomizations_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_GetPurchasedProfileCustomizations_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetPurchasedProfileCustomizations_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetPurchasedProfileCustomizations_Response";
  }
  protected:
  explicit CPlayer_GetPurchasedProfileCustomizations_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization PurchasedCustomization;

  // accessors -------------------------------------------------------

  enum : int {
    kPurchasedCustomizationsFieldNumber = 1,
  };
  // repeated .CPlayer_GetPurchasedProfileCustomizations_Response.PurchasedCustomization purchased_customizations = 1;
  int purchased_customizations_size() const;
  private:
  int _internal_purchased_customizations_size() const;
  public:
  void clear_purchased_customizations();
  ::CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization* mutable_purchased_customizations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization >*
      mutable_purchased_customizations();
  private:
  const ::CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization& _internal_purchased_customizations(int index) const;
  ::CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization* _internal_add_purchased_customizations();
  public:
  const ::CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization& purchased_customizations(int index) const;
  ::CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization* add_purchased_customizations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization >&
      purchased_customizations() const;

  // @@protoc_insertion_point(class_scope:CPlayer_GetPurchasedProfileCustomizations_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization > purchased_customizations_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request) */ {
 public:
  inline CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request() : CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request(nullptr) {}
  ~CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request() override;
  explicit constexpr CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request(const CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request& from);
  CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request(CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request&& from) noexcept
    : CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request& operator=(const CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request& operator=(CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request*>(
               &_CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request& a, CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request";
  }
  protected:
  explicit CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidFieldNumber = 1,
  };
  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t steamid_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response.PurchasedCustomization) */ {
 public:
  inline CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization() : CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization(nullptr) {}
  ~CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization() override;
  explicit constexpr CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization(const CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization& from);
  CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization(CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization&& from) noexcept
    : CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization& operator=(const CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization& operator=(CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization*>(
               &_CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization& a, CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response.PurchasedCustomization";
  }
  protected:
  explicit CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCustomizationTypeFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // optional .EProfileCustomizationType customization_type = 1 [default = k_EProfileCustomizationTypeInvalid];
  bool has_customization_type() const;
  private:
  bool _internal_has_customization_type() const;
  public:
  void clear_customization_type();
  ::EProfileCustomizationType customization_type() const;
  void set_customization_type(::EProfileCustomizationType value);
  private:
  ::EProfileCustomizationType _internal_customization_type() const;
  void _internal_set_customization_type(::EProfileCustomizationType value);
  public:

  // optional uint32 count = 2;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  uint32_t count() const;
  void set_count(uint32_t value);
  private:
  uint32_t _internal_count() const;
  void _internal_set_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response.PurchasedCustomization)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int customization_type_;
  uint32_t count_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response.UpgradedCustomization) */ {
 public:
  inline CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization() : CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization(nullptr) {}
  ~CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization() override;
  explicit constexpr CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization(const CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization& from);
  CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization(CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization&& from) noexcept
    : CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization& operator=(const CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization& operator=(CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization*>(
               &_CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization& a, CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response.UpgradedCustomization";
  }
  protected:
  explicit CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCustomizationTypeFieldNumber = 1,
    kLevelFieldNumber = 2,
  };
  // optional .EProfileCustomizationType customization_type = 1 [default = k_EProfileCustomizationTypeInvalid];
  bool has_customization_type() const;
  private:
  bool _internal_has_customization_type() const;
  public:
  void clear_customization_type();
  ::EProfileCustomizationType customization_type() const;
  void set_customization_type(::EProfileCustomizationType value);
  private:
  ::EProfileCustomizationType _internal_customization_type() const;
  void _internal_set_customization_type(::EProfileCustomizationType value);
  public:

  // optional uint32 level = 2;
  bool has_level() const;
  private:
  bool _internal_has_level() const;
  public:
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response.UpgradedCustomization)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int customization_type_;
  uint32_t level_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response) */ {
 public:
  inline CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response() : CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response(nullptr) {}
  ~CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response() override;
  explicit constexpr CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response(const CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response& from);
  CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response(CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response&& from) noexcept
    : CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response& operator=(const CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response& operator=(CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response*>(
               &_CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response& a, CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response";
  }
  protected:
  explicit CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization PurchasedCustomization;
  typedef CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization UpgradedCustomization;

  // accessors -------------------------------------------------------

  enum : int {
    kPurchasedCustomizationsFieldNumber = 1,
    kUpgradedCustomizationsFieldNumber = 2,
  };
  // repeated .CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response.PurchasedCustomization purchased_customizations = 1;
  int purchased_customizations_size() const;
  private:
  int _internal_purchased_customizations_size() const;
  public:
  void clear_purchased_customizations();
  ::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization* mutable_purchased_customizations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization >*
      mutable_purchased_customizations();
  private:
  const ::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization& _internal_purchased_customizations(int index) const;
  ::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization* _internal_add_purchased_customizations();
  public:
  const ::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization& purchased_customizations(int index) const;
  ::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization* add_purchased_customizations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization >&
      purchased_customizations() const;

  // repeated .CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response.UpgradedCustomization upgraded_customizations = 2;
  int upgraded_customizations_size() const;
  private:
  int _internal_upgraded_customizations_size() const;
  public:
  void clear_upgraded_customizations();
  ::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization* mutable_upgraded_customizations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization >*
      mutable_upgraded_customizations();
  private:
  const ::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization& _internal_upgraded_customizations(int index) const;
  ::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization* _internal_add_upgraded_customizations();
  public:
  const ::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization& upgraded_customizations(int index) const;
  ::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization* add_upgraded_customizations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization >&
      upgraded_customizations() const;

  // @@protoc_insertion_point(class_scope:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization > purchased_customizations_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization > upgraded_customizations_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetProfileThemesAvailable_Request final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CPlayer_GetProfileThemesAvailable_Request) */ {
 public:
  inline CPlayer_GetProfileThemesAvailable_Request() : CPlayer_GetProfileThemesAvailable_Request(nullptr) {}
  explicit constexpr CPlayer_GetProfileThemesAvailable_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetProfileThemesAvailable_Request(const CPlayer_GetProfileThemesAvailable_Request& from);
  CPlayer_GetProfileThemesAvailable_Request(CPlayer_GetProfileThemesAvailable_Request&& from) noexcept
    : CPlayer_GetProfileThemesAvailable_Request() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetProfileThemesAvailable_Request& operator=(const CPlayer_GetProfileThemesAvailable_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetProfileThemesAvailable_Request& operator=(CPlayer_GetProfileThemesAvailable_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetProfileThemesAvailable_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetProfileThemesAvailable_Request* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetProfileThemesAvailable_Request*>(
               &_CPlayer_GetProfileThemesAvailable_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(CPlayer_GetProfileThemesAvailable_Request& a, CPlayer_GetProfileThemesAvailable_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetProfileThemesAvailable_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetProfileThemesAvailable_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetProfileThemesAvailable_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetProfileThemesAvailable_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CPlayer_GetProfileThemesAvailable_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CPlayer_GetProfileThemesAvailable_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetProfileThemesAvailable_Request";
  }
  protected:
  explicit CPlayer_GetProfileThemesAvailable_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CPlayer_GetProfileThemesAvailable_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetProfileThemesAvailable_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_GetProfileThemesAvailable_Response) */ {
 public:
  inline CPlayer_GetProfileThemesAvailable_Response() : CPlayer_GetProfileThemesAvailable_Response(nullptr) {}
  ~CPlayer_GetProfileThemesAvailable_Response() override;
  explicit constexpr CPlayer_GetProfileThemesAvailable_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetProfileThemesAvailable_Response(const CPlayer_GetProfileThemesAvailable_Response& from);
  CPlayer_GetProfileThemesAvailable_Response(CPlayer_GetProfileThemesAvailable_Response&& from) noexcept
    : CPlayer_GetProfileThemesAvailable_Response() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetProfileThemesAvailable_Response& operator=(const CPlayer_GetProfileThemesAvailable_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetProfileThemesAvailable_Response& operator=(CPlayer_GetProfileThemesAvailable_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetProfileThemesAvailable_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetProfileThemesAvailable_Response* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetProfileThemesAvailable_Response*>(
               &_CPlayer_GetProfileThemesAvailable_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(CPlayer_GetProfileThemesAvailable_Response& a, CPlayer_GetProfileThemesAvailable_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetProfileThemesAvailable_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetProfileThemesAvailable_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetProfileThemesAvailable_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetProfileThemesAvailable_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_GetProfileThemesAvailable_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_GetProfileThemesAvailable_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetProfileThemesAvailable_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetProfileThemesAvailable_Response";
  }
  protected:
  explicit CPlayer_GetProfileThemesAvailable_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProfileThemesFieldNumber = 1,
  };
  // repeated .ProfileTheme profile_themes = 1;
  int profile_themes_size() const;
  private:
  int _internal_profile_themes_size() const;
  public:
  void clear_profile_themes();
  ::ProfileTheme* mutable_profile_themes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfileTheme >*
      mutable_profile_themes();
  private:
  const ::ProfileTheme& _internal_profile_themes(int index) const;
  ::ProfileTheme* _internal_add_profile_themes();
  public:
  const ::ProfileTheme& profile_themes(int index) const;
  ::ProfileTheme* add_profile_themes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfileTheme >&
      profile_themes() const;

  // @@protoc_insertion_point(class_scope:CPlayer_GetProfileThemesAvailable_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfileTheme > profile_themes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_SetProfileTheme_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_SetProfileTheme_Request) */ {
 public:
  inline CPlayer_SetProfileTheme_Request() : CPlayer_SetProfileTheme_Request(nullptr) {}
  ~CPlayer_SetProfileTheme_Request() override;
  explicit constexpr CPlayer_SetProfileTheme_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_SetProfileTheme_Request(const CPlayer_SetProfileTheme_Request& from);
  CPlayer_SetProfileTheme_Request(CPlayer_SetProfileTheme_Request&& from) noexcept
    : CPlayer_SetProfileTheme_Request() {
    *this = ::std::move(from);
  }

  inline CPlayer_SetProfileTheme_Request& operator=(const CPlayer_SetProfileTheme_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_SetProfileTheme_Request& operator=(CPlayer_SetProfileTheme_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_SetProfileTheme_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_SetProfileTheme_Request* internal_default_instance() {
    return reinterpret_cast<const CPlayer_SetProfileTheme_Request*>(
               &_CPlayer_SetProfileTheme_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(CPlayer_SetProfileTheme_Request& a, CPlayer_SetProfileTheme_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_SetProfileTheme_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_SetProfileTheme_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_SetProfileTheme_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_SetProfileTheme_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_SetProfileTheme_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_SetProfileTheme_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_SetProfileTheme_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_SetProfileTheme_Request";
  }
  protected:
  explicit CPlayer_SetProfileTheme_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kThemeIdFieldNumber = 1,
  };
  // optional string theme_id = 1;
  bool has_theme_id() const;
  private:
  bool _internal_has_theme_id() const;
  public:
  void clear_theme_id();
  const std::string& theme_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_theme_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_theme_id();
  PROTOBUF_NODISCARD std::string* release_theme_id();
  void set_allocated_theme_id(std::string* theme_id);
  private:
  const std::string& _internal_theme_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_theme_id(const std::string& value);
  std::string* _internal_mutable_theme_id();
  public:

  // @@protoc_insertion_point(class_scope:CPlayer_SetProfileTheme_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr theme_id_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_SetProfileTheme_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CPlayer_SetProfileTheme_Response) */ {
 public:
  inline CPlayer_SetProfileTheme_Response() : CPlayer_SetProfileTheme_Response(nullptr) {}
  explicit constexpr CPlayer_SetProfileTheme_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_SetProfileTheme_Response(const CPlayer_SetProfileTheme_Response& from);
  CPlayer_SetProfileTheme_Response(CPlayer_SetProfileTheme_Response&& from) noexcept
    : CPlayer_SetProfileTheme_Response() {
    *this = ::std::move(from);
  }

  inline CPlayer_SetProfileTheme_Response& operator=(const CPlayer_SetProfileTheme_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_SetProfileTheme_Response& operator=(CPlayer_SetProfileTheme_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_SetProfileTheme_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_SetProfileTheme_Response* internal_default_instance() {
    return reinterpret_cast<const CPlayer_SetProfileTheme_Response*>(
               &_CPlayer_SetProfileTheme_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(CPlayer_SetProfileTheme_Response& a, CPlayer_SetProfileTheme_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_SetProfileTheme_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_SetProfileTheme_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_SetProfileTheme_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_SetProfileTheme_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CPlayer_SetProfileTheme_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CPlayer_SetProfileTheme_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_SetProfileTheme_Response";
  }
  protected:
  explicit CPlayer_SetProfileTheme_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CPlayer_SetProfileTheme_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_SetProfilePreferences_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_SetProfilePreferences_Request) */ {
 public:
  inline CPlayer_SetProfilePreferences_Request() : CPlayer_SetProfilePreferences_Request(nullptr) {}
  ~CPlayer_SetProfilePreferences_Request() override;
  explicit constexpr CPlayer_SetProfilePreferences_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_SetProfilePreferences_Request(const CPlayer_SetProfilePreferences_Request& from);
  CPlayer_SetProfilePreferences_Request(CPlayer_SetProfilePreferences_Request&& from) noexcept
    : CPlayer_SetProfilePreferences_Request() {
    *this = ::std::move(from);
  }

  inline CPlayer_SetProfilePreferences_Request& operator=(const CPlayer_SetProfilePreferences_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_SetProfilePreferences_Request& operator=(CPlayer_SetProfilePreferences_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_SetProfilePreferences_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_SetProfilePreferences_Request* internal_default_instance() {
    return reinterpret_cast<const CPlayer_SetProfilePreferences_Request*>(
               &_CPlayer_SetProfilePreferences_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(CPlayer_SetProfilePreferences_Request& a, CPlayer_SetProfilePreferences_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_SetProfilePreferences_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_SetProfilePreferences_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_SetProfilePreferences_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_SetProfilePreferences_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_SetProfilePreferences_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_SetProfilePreferences_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_SetProfilePreferences_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_SetProfilePreferences_Request";
  }
  protected:
  explicit CPlayer_SetProfilePreferences_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProfilePreferencesFieldNumber = 1,
  };
  // optional .ProfilePreferences profile_preferences = 1;
  bool has_profile_preferences() const;
  private:
  bool _internal_has_profile_preferences() const;
  public:
  void clear_profile_preferences();
  const ::ProfilePreferences& profile_preferences() const;
  PROTOBUF_NODISCARD ::ProfilePreferences* release_profile_preferences();
  ::ProfilePreferences* mutable_profile_preferences();
  void set_allocated_profile_preferences(::ProfilePreferences* profile_preferences);
  private:
  const ::ProfilePreferences& _internal_profile_preferences() const;
  ::ProfilePreferences* _internal_mutable_profile_preferences();
  public:
  void unsafe_arena_set_allocated_profile_preferences(
      ::ProfilePreferences* profile_preferences);
  ::ProfilePreferences* unsafe_arena_release_profile_preferences();

  // @@protoc_insertion_point(class_scope:CPlayer_SetProfilePreferences_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::ProfilePreferences* profile_preferences_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_SetProfilePreferences_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CPlayer_SetProfilePreferences_Response) */ {
 public:
  inline CPlayer_SetProfilePreferences_Response() : CPlayer_SetProfilePreferences_Response(nullptr) {}
  explicit constexpr CPlayer_SetProfilePreferences_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_SetProfilePreferences_Response(const CPlayer_SetProfilePreferences_Response& from);
  CPlayer_SetProfilePreferences_Response(CPlayer_SetProfilePreferences_Response&& from) noexcept
    : CPlayer_SetProfilePreferences_Response() {
    *this = ::std::move(from);
  }

  inline CPlayer_SetProfilePreferences_Response& operator=(const CPlayer_SetProfilePreferences_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_SetProfilePreferences_Response& operator=(CPlayer_SetProfilePreferences_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_SetProfilePreferences_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_SetProfilePreferences_Response* internal_default_instance() {
    return reinterpret_cast<const CPlayer_SetProfilePreferences_Response*>(
               &_CPlayer_SetProfilePreferences_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(CPlayer_SetProfilePreferences_Response& a, CPlayer_SetProfilePreferences_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_SetProfilePreferences_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_SetProfilePreferences_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_SetProfilePreferences_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_SetProfilePreferences_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CPlayer_SetProfilePreferences_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CPlayer_SetProfilePreferences_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_SetProfilePreferences_Response";
  }
  protected:
  explicit CPlayer_SetProfilePreferences_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CPlayer_SetProfilePreferences_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_PostStatusToFriends_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_PostStatusToFriends_Request) */ {
 public:
  inline CPlayer_PostStatusToFriends_Request() : CPlayer_PostStatusToFriends_Request(nullptr) {}
  ~CPlayer_PostStatusToFriends_Request() override;
  explicit constexpr CPlayer_PostStatusToFriends_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_PostStatusToFriends_Request(const CPlayer_PostStatusToFriends_Request& from);
  CPlayer_PostStatusToFriends_Request(CPlayer_PostStatusToFriends_Request&& from) noexcept
    : CPlayer_PostStatusToFriends_Request() {
    *this = ::std::move(from);
  }

  inline CPlayer_PostStatusToFriends_Request& operator=(const CPlayer_PostStatusToFriends_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_PostStatusToFriends_Request& operator=(CPlayer_PostStatusToFriends_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_PostStatusToFriends_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_PostStatusToFriends_Request* internal_default_instance() {
    return reinterpret_cast<const CPlayer_PostStatusToFriends_Request*>(
               &_CPlayer_PostStatusToFriends_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(CPlayer_PostStatusToFriends_Request& a, CPlayer_PostStatusToFriends_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_PostStatusToFriends_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_PostStatusToFriends_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_PostStatusToFriends_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_PostStatusToFriends_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_PostStatusToFriends_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_PostStatusToFriends_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_PostStatusToFriends_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_PostStatusToFriends_Request";
  }
  protected:
  explicit CPlayer_PostStatusToFriends_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusTextFieldNumber = 2,
    kAppidFieldNumber = 1,
  };
  // optional string status_text = 2;
  bool has_status_text() const;
  private:
  bool _internal_has_status_text() const;
  public:
  void clear_status_text();
  const std::string& status_text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status_text();
  PROTOBUF_NODISCARD std::string* release_status_text();
  void set_allocated_status_text(std::string* status_text);
  private:
  const std::string& _internal_status_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status_text(const std::string& value);
  std::string* _internal_mutable_status_text();
  public:

  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPlayer_PostStatusToFriends_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_text_;
  uint32_t appid_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_PostStatusToFriends_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CPlayer_PostStatusToFriends_Response) */ {
 public:
  inline CPlayer_PostStatusToFriends_Response() : CPlayer_PostStatusToFriends_Response(nullptr) {}
  explicit constexpr CPlayer_PostStatusToFriends_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_PostStatusToFriends_Response(const CPlayer_PostStatusToFriends_Response& from);
  CPlayer_PostStatusToFriends_Response(CPlayer_PostStatusToFriends_Response&& from) noexcept
    : CPlayer_PostStatusToFriends_Response() {
    *this = ::std::move(from);
  }

  inline CPlayer_PostStatusToFriends_Response& operator=(const CPlayer_PostStatusToFriends_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_PostStatusToFriends_Response& operator=(CPlayer_PostStatusToFriends_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_PostStatusToFriends_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_PostStatusToFriends_Response* internal_default_instance() {
    return reinterpret_cast<const CPlayer_PostStatusToFriends_Response*>(
               &_CPlayer_PostStatusToFriends_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(CPlayer_PostStatusToFriends_Response& a, CPlayer_PostStatusToFriends_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_PostStatusToFriends_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_PostStatusToFriends_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_PostStatusToFriends_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_PostStatusToFriends_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CPlayer_PostStatusToFriends_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CPlayer_PostStatusToFriends_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_PostStatusToFriends_Response";
  }
  protected:
  explicit CPlayer_PostStatusToFriends_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CPlayer_PostStatusToFriends_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetPostedStatus_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_GetPostedStatus_Request) */ {
 public:
  inline CPlayer_GetPostedStatus_Request() : CPlayer_GetPostedStatus_Request(nullptr) {}
  ~CPlayer_GetPostedStatus_Request() override;
  explicit constexpr CPlayer_GetPostedStatus_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetPostedStatus_Request(const CPlayer_GetPostedStatus_Request& from);
  CPlayer_GetPostedStatus_Request(CPlayer_GetPostedStatus_Request&& from) noexcept
    : CPlayer_GetPostedStatus_Request() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetPostedStatus_Request& operator=(const CPlayer_GetPostedStatus_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetPostedStatus_Request& operator=(CPlayer_GetPostedStatus_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetPostedStatus_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetPostedStatus_Request* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetPostedStatus_Request*>(
               &_CPlayer_GetPostedStatus_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(CPlayer_GetPostedStatus_Request& a, CPlayer_GetPostedStatus_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetPostedStatus_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetPostedStatus_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetPostedStatus_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetPostedStatus_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_GetPostedStatus_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_GetPostedStatus_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetPostedStatus_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetPostedStatus_Request";
  }
  protected:
  explicit CPlayer_GetPostedStatus_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidFieldNumber = 1,
    kPostidFieldNumber = 2,
  };
  // optional uint64 steamid = 1 [(.description) = "The player we\'re asking about"];
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional uint64 postid = 2;
  bool has_postid() const;
  private:
  bool _internal_has_postid() const;
  public:
  void clear_postid();
  uint64_t postid() const;
  void set_postid(uint64_t value);
  private:
  uint64_t _internal_postid() const;
  void _internal_set_postid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPlayer_GetPostedStatus_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t steamid_;
  uint64_t postid_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetPostedStatus_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_GetPostedStatus_Response) */ {
 public:
  inline CPlayer_GetPostedStatus_Response() : CPlayer_GetPostedStatus_Response(nullptr) {}
  ~CPlayer_GetPostedStatus_Response() override;
  explicit constexpr CPlayer_GetPostedStatus_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetPostedStatus_Response(const CPlayer_GetPostedStatus_Response& from);
  CPlayer_GetPostedStatus_Response(CPlayer_GetPostedStatus_Response&& from) noexcept
    : CPlayer_GetPostedStatus_Response() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetPostedStatus_Response& operator=(const CPlayer_GetPostedStatus_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetPostedStatus_Response& operator=(CPlayer_GetPostedStatus_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetPostedStatus_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetPostedStatus_Response* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetPostedStatus_Response*>(
               &_CPlayer_GetPostedStatus_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(CPlayer_GetPostedStatus_Response& a, CPlayer_GetPostedStatus_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetPostedStatus_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetPostedStatus_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetPostedStatus_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetPostedStatus_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_GetPostedStatus_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_GetPostedStatus_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetPostedStatus_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetPostedStatus_Response";
  }
  protected:
  explicit CPlayer_GetPostedStatus_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusTextFieldNumber = 3,
    kPostidFieldNumber = 2,
    kAccountidFieldNumber = 1,
    kDeletedFieldNumber = 4,
    kAppidFieldNumber = 5,
  };
  // optional string status_text = 3;
  bool has_status_text() const;
  private:
  bool _internal_has_status_text() const;
  public:
  void clear_status_text();
  const std::string& status_text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status_text();
  PROTOBUF_NODISCARD std::string* release_status_text();
  void set_allocated_status_text(std::string* status_text);
  private:
  const std::string& _internal_status_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status_text(const std::string& value);
  std::string* _internal_mutable_status_text();
  public:

  // optional uint64 postid = 2;
  bool has_postid() const;
  private:
  bool _internal_has_postid() const;
  public:
  void clear_postid();
  uint64_t postid() const;
  void set_postid(uint64_t value);
  private:
  uint64_t _internal_postid() const;
  void _internal_set_postid(uint64_t value);
  public:

  // optional uint32 accountid = 1;
  bool has_accountid() const;
  private:
  bool _internal_has_accountid() const;
  public:
  void clear_accountid();
  uint32_t accountid() const;
  void set_accountid(uint32_t value);
  private:
  uint32_t _internal_accountid() const;
  void _internal_set_accountid(uint32_t value);
  public:

  // optional bool deleted = 4;
  bool has_deleted() const;
  private:
  bool _internal_has_deleted() const;
  public:
  void clear_deleted();
  bool deleted() const;
  void set_deleted(bool value);
  private:
  bool _internal_deleted() const;
  void _internal_set_deleted(bool value);
  public:

  // optional uint32 appid = 5;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPlayer_GetPostedStatus_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_text_;
  uint64_t postid_;
  uint32_t accountid_;
  bool deleted_;
  uint32_t appid_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_DeletePostedStatus_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_DeletePostedStatus_Request) */ {
 public:
  inline CPlayer_DeletePostedStatus_Request() : CPlayer_DeletePostedStatus_Request(nullptr) {}
  ~CPlayer_DeletePostedStatus_Request() override;
  explicit constexpr CPlayer_DeletePostedStatus_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_DeletePostedStatus_Request(const CPlayer_DeletePostedStatus_Request& from);
  CPlayer_DeletePostedStatus_Request(CPlayer_DeletePostedStatus_Request&& from) noexcept
    : CPlayer_DeletePostedStatus_Request() {
    *this = ::std::move(from);
  }

  inline CPlayer_DeletePostedStatus_Request& operator=(const CPlayer_DeletePostedStatus_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_DeletePostedStatus_Request& operator=(CPlayer_DeletePostedStatus_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_DeletePostedStatus_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_DeletePostedStatus_Request* internal_default_instance() {
    return reinterpret_cast<const CPlayer_DeletePostedStatus_Request*>(
               &_CPlayer_DeletePostedStatus_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(CPlayer_DeletePostedStatus_Request& a, CPlayer_DeletePostedStatus_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_DeletePostedStatus_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_DeletePostedStatus_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_DeletePostedStatus_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_DeletePostedStatus_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_DeletePostedStatus_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_DeletePostedStatus_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_DeletePostedStatus_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_DeletePostedStatus_Request";
  }
  protected:
  explicit CPlayer_DeletePostedStatus_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPostidFieldNumber = 1,
  };
  // optional uint64 postid = 1;
  bool has_postid() const;
  private:
  bool _internal_has_postid() const;
  public:
  void clear_postid();
  uint64_t postid() const;
  void set_postid(uint64_t value);
  private:
  uint64_t _internal_postid() const;
  void _internal_set_postid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPlayer_DeletePostedStatus_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t postid_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_DeletePostedStatus_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CPlayer_DeletePostedStatus_Response) */ {
 public:
  inline CPlayer_DeletePostedStatus_Response() : CPlayer_DeletePostedStatus_Response(nullptr) {}
  explicit constexpr CPlayer_DeletePostedStatus_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_DeletePostedStatus_Response(const CPlayer_DeletePostedStatus_Response& from);
  CPlayer_DeletePostedStatus_Response(CPlayer_DeletePostedStatus_Response&& from) noexcept
    : CPlayer_DeletePostedStatus_Response() {
    *this = ::std::move(from);
  }

  inline CPlayer_DeletePostedStatus_Response& operator=(const CPlayer_DeletePostedStatus_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_DeletePostedStatus_Response& operator=(CPlayer_DeletePostedStatus_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_DeletePostedStatus_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_DeletePostedStatus_Response* internal_default_instance() {
    return reinterpret_cast<const CPlayer_DeletePostedStatus_Response*>(
               &_CPlayer_DeletePostedStatus_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(CPlayer_DeletePostedStatus_Response& a, CPlayer_DeletePostedStatus_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_DeletePostedStatus_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_DeletePostedStatus_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_DeletePostedStatus_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_DeletePostedStatus_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CPlayer_DeletePostedStatus_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CPlayer_DeletePostedStatus_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_DeletePostedStatus_Response";
  }
  protected:
  explicit CPlayer_DeletePostedStatus_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CPlayer_DeletePostedStatus_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetLastPlayedTimes_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_GetLastPlayedTimes_Request) */ {
 public:
  inline CPlayer_GetLastPlayedTimes_Request() : CPlayer_GetLastPlayedTimes_Request(nullptr) {}
  ~CPlayer_GetLastPlayedTimes_Request() override;
  explicit constexpr CPlayer_GetLastPlayedTimes_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetLastPlayedTimes_Request(const CPlayer_GetLastPlayedTimes_Request& from);
  CPlayer_GetLastPlayedTimes_Request(CPlayer_GetLastPlayedTimes_Request&& from) noexcept
    : CPlayer_GetLastPlayedTimes_Request() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetLastPlayedTimes_Request& operator=(const CPlayer_GetLastPlayedTimes_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetLastPlayedTimes_Request& operator=(CPlayer_GetLastPlayedTimes_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetLastPlayedTimes_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetLastPlayedTimes_Request* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetLastPlayedTimes_Request*>(
               &_CPlayer_GetLastPlayedTimes_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(CPlayer_GetLastPlayedTimes_Request& a, CPlayer_GetLastPlayedTimes_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetLastPlayedTimes_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetLastPlayedTimes_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetLastPlayedTimes_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetLastPlayedTimes_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_GetLastPlayedTimes_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_GetLastPlayedTimes_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetLastPlayedTimes_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetLastPlayedTimes_Request";
  }
  protected:
  explicit CPlayer_GetLastPlayedTimes_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinLastPlayedFieldNumber = 1,
  };
  // optional uint32 min_last_played = 1 [(.description) = "The most recent last-played time the client already knows about"];
  bool has_min_last_played() const;
  private:
  bool _internal_has_min_last_played() const;
  public:
  void clear_min_last_played();
  uint32_t min_last_played() const;
  void set_min_last_played(uint32_t value);
  private:
  uint32_t _internal_min_last_played() const;
  void _internal_set_min_last_played(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPlayer_GetLastPlayedTimes_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t min_last_played_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetLastPlayedTimes_Response_Game final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_GetLastPlayedTimes_Response.Game) */ {
 public:
  inline CPlayer_GetLastPlayedTimes_Response_Game() : CPlayer_GetLastPlayedTimes_Response_Game(nullptr) {}
  ~CPlayer_GetLastPlayedTimes_Response_Game() override;
  explicit constexpr CPlayer_GetLastPlayedTimes_Response_Game(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetLastPlayedTimes_Response_Game(const CPlayer_GetLastPlayedTimes_Response_Game& from);
  CPlayer_GetLastPlayedTimes_Response_Game(CPlayer_GetLastPlayedTimes_Response_Game&& from) noexcept
    : CPlayer_GetLastPlayedTimes_Response_Game() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetLastPlayedTimes_Response_Game& operator=(const CPlayer_GetLastPlayedTimes_Response_Game& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetLastPlayedTimes_Response_Game& operator=(CPlayer_GetLastPlayedTimes_Response_Game&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetLastPlayedTimes_Response_Game& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetLastPlayedTimes_Response_Game* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetLastPlayedTimes_Response_Game*>(
               &_CPlayer_GetLastPlayedTimes_Response_Game_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(CPlayer_GetLastPlayedTimes_Response_Game& a, CPlayer_GetLastPlayedTimes_Response_Game& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetLastPlayedTimes_Response_Game* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetLastPlayedTimes_Response_Game* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetLastPlayedTimes_Response_Game* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetLastPlayedTimes_Response_Game>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_GetLastPlayedTimes_Response_Game& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_GetLastPlayedTimes_Response_Game& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetLastPlayedTimes_Response_Game* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetLastPlayedTimes_Response.Game";
  }
  protected:
  explicit CPlayer_GetLastPlayedTimes_Response_Game(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppidFieldNumber = 1,
    kLastPlaytimeFieldNumber = 2,
    kPlaytime2WeeksFieldNumber = 3,
    kPlaytimeForeverFieldNumber = 4,
    kFirstPlaytimeFieldNumber = 5,
    kPlaytimeWindowsForeverFieldNumber = 6,
    kPlaytimeMacForeverFieldNumber = 7,
    kPlaytimeLinuxForeverFieldNumber = 8,
    kFirstWindowsPlaytimeFieldNumber = 9,
    kFirstMacPlaytimeFieldNumber = 10,
    kFirstLinuxPlaytimeFieldNumber = 11,
    kLastWindowsPlaytimeFieldNumber = 12,
    kLastMacPlaytimeFieldNumber = 13,
    kLastLinuxPlaytimeFieldNumber = 14,
    kPlaytimeDisconnectedFieldNumber = 15,
  };
  // optional int32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  int32_t appid() const;
  void set_appid(int32_t value);
  private:
  int32_t _internal_appid() const;
  void _internal_set_appid(int32_t value);
  public:

  // optional uint32 last_playtime = 2;
  bool has_last_playtime() const;
  private:
  bool _internal_has_last_playtime() const;
  public:
  void clear_last_playtime();
  uint32_t last_playtime() const;
  void set_last_playtime(uint32_t value);
  private:
  uint32_t _internal_last_playtime() const;
  void _internal_set_last_playtime(uint32_t value);
  public:

  // optional int32 playtime_2weeks = 3;
  bool has_playtime_2weeks() const;
  private:
  bool _internal_has_playtime_2weeks() const;
  public:
  void clear_playtime_2weeks();
  int32_t playtime_2weeks() const;
  void set_playtime_2weeks(int32_t value);
  private:
  int32_t _internal_playtime_2weeks() const;
  void _internal_set_playtime_2weeks(int32_t value);
  public:

  // optional int32 playtime_forever = 4;
  bool has_playtime_forever() const;
  private:
  bool _internal_has_playtime_forever() const;
  public:
  void clear_playtime_forever();
  int32_t playtime_forever() const;
  void set_playtime_forever(int32_t value);
  private:
  int32_t _internal_playtime_forever() const;
  void _internal_set_playtime_forever(int32_t value);
  public:

  // optional uint32 first_playtime = 5;
  bool has_first_playtime() const;
  private:
  bool _internal_has_first_playtime() const;
  public:
  void clear_first_playtime();
  uint32_t first_playtime() const;
  void set_first_playtime(uint32_t value);
  private:
  uint32_t _internal_first_playtime() const;
  void _internal_set_first_playtime(uint32_t value);
  public:

  // optional int32 playtime_windows_forever = 6;
  bool has_playtime_windows_forever() const;
  private:
  bool _internal_has_playtime_windows_forever() const;
  public:
  void clear_playtime_windows_forever();
  int32_t playtime_windows_forever() const;
  void set_playtime_windows_forever(int32_t value);
  private:
  int32_t _internal_playtime_windows_forever() const;
  void _internal_set_playtime_windows_forever(int32_t value);
  public:

  // optional int32 playtime_mac_forever = 7;
  bool has_playtime_mac_forever() const;
  private:
  bool _internal_has_playtime_mac_forever() const;
  public:
  void clear_playtime_mac_forever();
  int32_t playtime_mac_forever() const;
  void set_playtime_mac_forever(int32_t value);
  private:
  int32_t _internal_playtime_mac_forever() const;
  void _internal_set_playtime_mac_forever(int32_t value);
  public:

  // optional int32 playtime_linux_forever = 8;
  bool has_playtime_linux_forever() const;
  private:
  bool _internal_has_playtime_linux_forever() const;
  public:
  void clear_playtime_linux_forever();
  int32_t playtime_linux_forever() const;
  void set_playtime_linux_forever(int32_t value);
  private:
  int32_t _internal_playtime_linux_forever() const;
  void _internal_set_playtime_linux_forever(int32_t value);
  public:

  // optional uint32 first_windows_playtime = 9;
  bool has_first_windows_playtime() const;
  private:
  bool _internal_has_first_windows_playtime() const;
  public:
  void clear_first_windows_playtime();
  uint32_t first_windows_playtime() const;
  void set_first_windows_playtime(uint32_t value);
  private:
  uint32_t _internal_first_windows_playtime() const;
  void _internal_set_first_windows_playtime(uint32_t value);
  public:

  // optional uint32 first_mac_playtime = 10;
  bool has_first_mac_playtime() const;
  private:
  bool _internal_has_first_mac_playtime() const;
  public:
  void clear_first_mac_playtime();
  uint32_t first_mac_playtime() const;
  void set_first_mac_playtime(uint32_t value);
  private:
  uint32_t _internal_first_mac_playtime() const;
  void _internal_set_first_mac_playtime(uint32_t value);
  public:

  // optional uint32 first_linux_playtime = 11;
  bool has_first_linux_playtime() const;
  private:
  bool _internal_has_first_linux_playtime() const;
  public:
  void clear_first_linux_playtime();
  uint32_t first_linux_playtime() const;
  void set_first_linux_playtime(uint32_t value);
  private:
  uint32_t _internal_first_linux_playtime() const;
  void _internal_set_first_linux_playtime(uint32_t value);
  public:

  // optional uint32 last_windows_playtime = 12;
  bool has_last_windows_playtime() const;
  private:
  bool _internal_has_last_windows_playtime() const;
  public:
  void clear_last_windows_playtime();
  uint32_t last_windows_playtime() const;
  void set_last_windows_playtime(uint32_t value);
  private:
  uint32_t _internal_last_windows_playtime() const;
  void _internal_set_last_windows_playtime(uint32_t value);
  public:

  // optional uint32 last_mac_playtime = 13;
  bool has_last_mac_playtime() const;
  private:
  bool _internal_has_last_mac_playtime() const;
  public:
  void clear_last_mac_playtime();
  uint32_t last_mac_playtime() const;
  void set_last_mac_playtime(uint32_t value);
  private:
  uint32_t _internal_last_mac_playtime() const;
  void _internal_set_last_mac_playtime(uint32_t value);
  public:

  // optional uint32 last_linux_playtime = 14;
  bool has_last_linux_playtime() const;
  private:
  bool _internal_has_last_linux_playtime() const;
  public:
  void clear_last_linux_playtime();
  uint32_t last_linux_playtime() const;
  void set_last_linux_playtime(uint32_t value);
  private:
  uint32_t _internal_last_linux_playtime() const;
  void _internal_set_last_linux_playtime(uint32_t value);
  public:

  // optional uint32 playtime_disconnected = 15;
  bool has_playtime_disconnected() const;
  private:
  bool _internal_has_playtime_disconnected() const;
  public:
  void clear_playtime_disconnected();
  uint32_t playtime_disconnected() const;
  void set_playtime_disconnected(uint32_t value);
  private:
  uint32_t _internal_playtime_disconnected() const;
  void _internal_set_playtime_disconnected(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPlayer_GetLastPlayedTimes_Response.Game)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t appid_;
  uint32_t last_playtime_;
  int32_t playtime_2weeks_;
  int32_t playtime_forever_;
  uint32_t first_playtime_;
  int32_t playtime_windows_forever_;
  int32_t playtime_mac_forever_;
  int32_t playtime_linux_forever_;
  uint32_t first_windows_playtime_;
  uint32_t first_mac_playtime_;
  uint32_t first_linux_playtime_;
  uint32_t last_windows_playtime_;
  uint32_t last_mac_playtime_;
  uint32_t last_linux_playtime_;
  uint32_t playtime_disconnected_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetLastPlayedTimes_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_GetLastPlayedTimes_Response) */ {
 public:
  inline CPlayer_GetLastPlayedTimes_Response() : CPlayer_GetLastPlayedTimes_Response(nullptr) {}
  ~CPlayer_GetLastPlayedTimes_Response() override;
  explicit constexpr CPlayer_GetLastPlayedTimes_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetLastPlayedTimes_Response(const CPlayer_GetLastPlayedTimes_Response& from);
  CPlayer_GetLastPlayedTimes_Response(CPlayer_GetLastPlayedTimes_Response&& from) noexcept
    : CPlayer_GetLastPlayedTimes_Response() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetLastPlayedTimes_Response& operator=(const CPlayer_GetLastPlayedTimes_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetLastPlayedTimes_Response& operator=(CPlayer_GetLastPlayedTimes_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetLastPlayedTimes_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetLastPlayedTimes_Response* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetLastPlayedTimes_Response*>(
               &_CPlayer_GetLastPlayedTimes_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(CPlayer_GetLastPlayedTimes_Response& a, CPlayer_GetLastPlayedTimes_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetLastPlayedTimes_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetLastPlayedTimes_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetLastPlayedTimes_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetLastPlayedTimes_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_GetLastPlayedTimes_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_GetLastPlayedTimes_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetLastPlayedTimes_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetLastPlayedTimes_Response";
  }
  protected:
  explicit CPlayer_GetLastPlayedTimes_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CPlayer_GetLastPlayedTimes_Response_Game Game;

  // accessors -------------------------------------------------------

  enum : int {
    kGamesFieldNumber = 1,
  };
  // repeated .CPlayer_GetLastPlayedTimes_Response.Game games = 1;
  int games_size() const;
  private:
  int _internal_games_size() const;
  public:
  void clear_games();
  ::CPlayer_GetLastPlayedTimes_Response_Game* mutable_games(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetLastPlayedTimes_Response_Game >*
      mutable_games();
  private:
  const ::CPlayer_GetLastPlayedTimes_Response_Game& _internal_games(int index) const;
  ::CPlayer_GetLastPlayedTimes_Response_Game* _internal_add_games();
  public:
  const ::CPlayer_GetLastPlayedTimes_Response_Game& games(int index) const;
  ::CPlayer_GetLastPlayedTimes_Response_Game* add_games();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetLastPlayedTimes_Response_Game >&
      games() const;

  // @@protoc_insertion_point(class_scope:CPlayer_GetLastPlayedTimes_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetLastPlayedTimes_Response_Game > games_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetTimeSSAAccepted_Request final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CPlayer_GetTimeSSAAccepted_Request) */ {
 public:
  inline CPlayer_GetTimeSSAAccepted_Request() : CPlayer_GetTimeSSAAccepted_Request(nullptr) {}
  explicit constexpr CPlayer_GetTimeSSAAccepted_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetTimeSSAAccepted_Request(const CPlayer_GetTimeSSAAccepted_Request& from);
  CPlayer_GetTimeSSAAccepted_Request(CPlayer_GetTimeSSAAccepted_Request&& from) noexcept
    : CPlayer_GetTimeSSAAccepted_Request() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetTimeSSAAccepted_Request& operator=(const CPlayer_GetTimeSSAAccepted_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetTimeSSAAccepted_Request& operator=(CPlayer_GetTimeSSAAccepted_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetTimeSSAAccepted_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetTimeSSAAccepted_Request* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetTimeSSAAccepted_Request*>(
               &_CPlayer_GetTimeSSAAccepted_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(CPlayer_GetTimeSSAAccepted_Request& a, CPlayer_GetTimeSSAAccepted_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetTimeSSAAccepted_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetTimeSSAAccepted_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetTimeSSAAccepted_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetTimeSSAAccepted_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CPlayer_GetTimeSSAAccepted_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CPlayer_GetTimeSSAAccepted_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetTimeSSAAccepted_Request";
  }
  protected:
  explicit CPlayer_GetTimeSSAAccepted_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CPlayer_GetTimeSSAAccepted_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetTimeSSAAccepted_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_GetTimeSSAAccepted_Response) */ {
 public:
  inline CPlayer_GetTimeSSAAccepted_Response() : CPlayer_GetTimeSSAAccepted_Response(nullptr) {}
  ~CPlayer_GetTimeSSAAccepted_Response() override;
  explicit constexpr CPlayer_GetTimeSSAAccepted_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetTimeSSAAccepted_Response(const CPlayer_GetTimeSSAAccepted_Response& from);
  CPlayer_GetTimeSSAAccepted_Response(CPlayer_GetTimeSSAAccepted_Response&& from) noexcept
    : CPlayer_GetTimeSSAAccepted_Response() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetTimeSSAAccepted_Response& operator=(const CPlayer_GetTimeSSAAccepted_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetTimeSSAAccepted_Response& operator=(CPlayer_GetTimeSSAAccepted_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetTimeSSAAccepted_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetTimeSSAAccepted_Response* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetTimeSSAAccepted_Response*>(
               &_CPlayer_GetTimeSSAAccepted_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(CPlayer_GetTimeSSAAccepted_Response& a, CPlayer_GetTimeSSAAccepted_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetTimeSSAAccepted_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetTimeSSAAccepted_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetTimeSSAAccepted_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetTimeSSAAccepted_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_GetTimeSSAAccepted_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_GetTimeSSAAccepted_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetTimeSSAAccepted_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetTimeSSAAccepted_Response";
  }
  protected:
  explicit CPlayer_GetTimeSSAAccepted_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeSsaAcceptedFieldNumber = 1,
    kTimeSsaUpdatedFieldNumber = 2,
    kTimeChinassaAcceptedFieldNumber = 3,
  };
  // optional uint32 time_ssa_accepted = 1;
  bool has_time_ssa_accepted() const;
  private:
  bool _internal_has_time_ssa_accepted() const;
  public:
  void clear_time_ssa_accepted();
  uint32_t time_ssa_accepted() const;
  void set_time_ssa_accepted(uint32_t value);
  private:
  uint32_t _internal_time_ssa_accepted() const;
  void _internal_set_time_ssa_accepted(uint32_t value);
  public:

  // optional uint32 time_ssa_updated = 2;
  bool has_time_ssa_updated() const;
  private:
  bool _internal_has_time_ssa_updated() const;
  public:
  void clear_time_ssa_updated();
  uint32_t time_ssa_updated() const;
  void set_time_ssa_updated(uint32_t value);
  private:
  uint32_t _internal_time_ssa_updated() const;
  void _internal_set_time_ssa_updated(uint32_t value);
  public:

  // optional uint32 time_chinassa_accepted = 3;
  bool has_time_chinassa_accepted() const;
  private:
  bool _internal_has_time_chinassa_accepted() const;
  public:
  void clear_time_chinassa_accepted();
  uint32_t time_chinassa_accepted() const;
  void set_time_chinassa_accepted(uint32_t value);
  private:
  uint32_t _internal_time_chinassa_accepted() const;
  void _internal_set_time_chinassa_accepted(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPlayer_GetTimeSSAAccepted_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t time_ssa_accepted_;
  uint32_t time_ssa_updated_;
  uint32_t time_chinassa_accepted_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_AcceptSSA_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_AcceptSSA_Request) */ {
 public:
  inline CPlayer_AcceptSSA_Request() : CPlayer_AcceptSSA_Request(nullptr) {}
  ~CPlayer_AcceptSSA_Request() override;
  explicit constexpr CPlayer_AcceptSSA_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_AcceptSSA_Request(const CPlayer_AcceptSSA_Request& from);
  CPlayer_AcceptSSA_Request(CPlayer_AcceptSSA_Request&& from) noexcept
    : CPlayer_AcceptSSA_Request() {
    *this = ::std::move(from);
  }

  inline CPlayer_AcceptSSA_Request& operator=(const CPlayer_AcceptSSA_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_AcceptSSA_Request& operator=(CPlayer_AcceptSSA_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_AcceptSSA_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_AcceptSSA_Request* internal_default_instance() {
    return reinterpret_cast<const CPlayer_AcceptSSA_Request*>(
               &_CPlayer_AcceptSSA_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(CPlayer_AcceptSSA_Request& a, CPlayer_AcceptSSA_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_AcceptSSA_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_AcceptSSA_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_AcceptSSA_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_AcceptSSA_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_AcceptSSA_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_AcceptSSA_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_AcceptSSA_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_AcceptSSA_Request";
  }
  protected:
  explicit CPlayer_AcceptSSA_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeSignedUtcFieldNumber = 2,
    kAgreementTypeFieldNumber = 1,
  };
  // optional uint32 time_signed_utc = 2;
  bool has_time_signed_utc() const;
  private:
  bool _internal_has_time_signed_utc() const;
  public:
  void clear_time_signed_utc();
  uint32_t time_signed_utc() const;
  void set_time_signed_utc(uint32_t value);
  private:
  uint32_t _internal_time_signed_utc() const;
  void _internal_set_time_signed_utc(uint32_t value);
  public:

  // optional .EAgreementType agreement_type = 1 [default = k_EAgreementType_Invalid];
  bool has_agreement_type() const;
  private:
  bool _internal_has_agreement_type() const;
  public:
  void clear_agreement_type();
  ::EAgreementType agreement_type() const;
  void set_agreement_type(::EAgreementType value);
  private:
  ::EAgreementType _internal_agreement_type() const;
  void _internal_set_agreement_type(::EAgreementType value);
  public:

  // @@protoc_insertion_point(class_scope:CPlayer_AcceptSSA_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t time_signed_utc_;
  int agreement_type_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_AcceptSSA_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CPlayer_AcceptSSA_Response) */ {
 public:
  inline CPlayer_AcceptSSA_Response() : CPlayer_AcceptSSA_Response(nullptr) {}
  explicit constexpr CPlayer_AcceptSSA_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_AcceptSSA_Response(const CPlayer_AcceptSSA_Response& from);
  CPlayer_AcceptSSA_Response(CPlayer_AcceptSSA_Response&& from) noexcept
    : CPlayer_AcceptSSA_Response() {
    *this = ::std::move(from);
  }

  inline CPlayer_AcceptSSA_Response& operator=(const CPlayer_AcceptSSA_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_AcceptSSA_Response& operator=(CPlayer_AcceptSSA_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_AcceptSSA_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_AcceptSSA_Response* internal_default_instance() {
    return reinterpret_cast<const CPlayer_AcceptSSA_Response*>(
               &_CPlayer_AcceptSSA_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(CPlayer_AcceptSSA_Response& a, CPlayer_AcceptSSA_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_AcceptSSA_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_AcceptSSA_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_AcceptSSA_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_AcceptSSA_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CPlayer_AcceptSSA_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CPlayer_AcceptSSA_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_AcceptSSA_Response";
  }
  protected:
  explicit CPlayer_AcceptSSA_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CPlayer_AcceptSSA_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetNicknameList_Request final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CPlayer_GetNicknameList_Request) */ {
 public:
  inline CPlayer_GetNicknameList_Request() : CPlayer_GetNicknameList_Request(nullptr) {}
  explicit constexpr CPlayer_GetNicknameList_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetNicknameList_Request(const CPlayer_GetNicknameList_Request& from);
  CPlayer_GetNicknameList_Request(CPlayer_GetNicknameList_Request&& from) noexcept
    : CPlayer_GetNicknameList_Request() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetNicknameList_Request& operator=(const CPlayer_GetNicknameList_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetNicknameList_Request& operator=(CPlayer_GetNicknameList_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetNicknameList_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetNicknameList_Request* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetNicknameList_Request*>(
               &_CPlayer_GetNicknameList_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(CPlayer_GetNicknameList_Request& a, CPlayer_GetNicknameList_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetNicknameList_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetNicknameList_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetNicknameList_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetNicknameList_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CPlayer_GetNicknameList_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CPlayer_GetNicknameList_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetNicknameList_Request";
  }
  protected:
  explicit CPlayer_GetNicknameList_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CPlayer_GetNicknameList_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetNicknameList_Response_PlayerNickname final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_GetNicknameList_Response.PlayerNickname) */ {
 public:
  inline CPlayer_GetNicknameList_Response_PlayerNickname() : CPlayer_GetNicknameList_Response_PlayerNickname(nullptr) {}
  ~CPlayer_GetNicknameList_Response_PlayerNickname() override;
  explicit constexpr CPlayer_GetNicknameList_Response_PlayerNickname(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetNicknameList_Response_PlayerNickname(const CPlayer_GetNicknameList_Response_PlayerNickname& from);
  CPlayer_GetNicknameList_Response_PlayerNickname(CPlayer_GetNicknameList_Response_PlayerNickname&& from) noexcept
    : CPlayer_GetNicknameList_Response_PlayerNickname() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetNicknameList_Response_PlayerNickname& operator=(const CPlayer_GetNicknameList_Response_PlayerNickname& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetNicknameList_Response_PlayerNickname& operator=(CPlayer_GetNicknameList_Response_PlayerNickname&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetNicknameList_Response_PlayerNickname& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetNicknameList_Response_PlayerNickname* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetNicknameList_Response_PlayerNickname*>(
               &_CPlayer_GetNicknameList_Response_PlayerNickname_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  friend void swap(CPlayer_GetNicknameList_Response_PlayerNickname& a, CPlayer_GetNicknameList_Response_PlayerNickname& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetNicknameList_Response_PlayerNickname* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetNicknameList_Response_PlayerNickname* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetNicknameList_Response_PlayerNickname* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetNicknameList_Response_PlayerNickname>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_GetNicknameList_Response_PlayerNickname& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_GetNicknameList_Response_PlayerNickname& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetNicknameList_Response_PlayerNickname* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetNicknameList_Response.PlayerNickname";
  }
  protected:
  explicit CPlayer_GetNicknameList_Response_PlayerNickname(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 2,
    kAccountidFieldNumber = 1,
  };
  // optional string nickname = 2;
  bool has_nickname() const;
  private:
  bool _internal_has_nickname() const;
  public:
  void clear_nickname();
  const std::string& nickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // optional fixed32 accountid = 1;
  bool has_accountid() const;
  private:
  bool _internal_has_accountid() const;
  public:
  void clear_accountid();
  uint32_t accountid() const;
  void set_accountid(uint32_t value);
  private:
  uint32_t _internal_accountid() const;
  void _internal_set_accountid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPlayer_GetNicknameList_Response.PlayerNickname)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  uint32_t accountid_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetNicknameList_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_GetNicknameList_Response) */ {
 public:
  inline CPlayer_GetNicknameList_Response() : CPlayer_GetNicknameList_Response(nullptr) {}
  ~CPlayer_GetNicknameList_Response() override;
  explicit constexpr CPlayer_GetNicknameList_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetNicknameList_Response(const CPlayer_GetNicknameList_Response& from);
  CPlayer_GetNicknameList_Response(CPlayer_GetNicknameList_Response&& from) noexcept
    : CPlayer_GetNicknameList_Response() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetNicknameList_Response& operator=(const CPlayer_GetNicknameList_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetNicknameList_Response& operator=(CPlayer_GetNicknameList_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetNicknameList_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetNicknameList_Response* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetNicknameList_Response*>(
               &_CPlayer_GetNicknameList_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  friend void swap(CPlayer_GetNicknameList_Response& a, CPlayer_GetNicknameList_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetNicknameList_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetNicknameList_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetNicknameList_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetNicknameList_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_GetNicknameList_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_GetNicknameList_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetNicknameList_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetNicknameList_Response";
  }
  protected:
  explicit CPlayer_GetNicknameList_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CPlayer_GetNicknameList_Response_PlayerNickname PlayerNickname;

  // accessors -------------------------------------------------------

  enum : int {
    kNicknamesFieldNumber = 1,
  };
  // repeated .CPlayer_GetNicknameList_Response.PlayerNickname nicknames = 1;
  int nicknames_size() const;
  private:
  int _internal_nicknames_size() const;
  public:
  void clear_nicknames();
  ::CPlayer_GetNicknameList_Response_PlayerNickname* mutable_nicknames(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetNicknameList_Response_PlayerNickname >*
      mutable_nicknames();
  private:
  const ::CPlayer_GetNicknameList_Response_PlayerNickname& _internal_nicknames(int index) const;
  ::CPlayer_GetNicknameList_Response_PlayerNickname* _internal_add_nicknames();
  public:
  const ::CPlayer_GetNicknameList_Response_PlayerNickname& nicknames(int index) const;
  ::CPlayer_GetNicknameList_Response_PlayerNickname* add_nicknames();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetNicknameList_Response_PlayerNickname >&
      nicknames() const;

  // @@protoc_insertion_point(class_scope:CPlayer_GetNicknameList_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetNicknameList_Response_PlayerNickname > nicknames_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetPerFriendPreferences_Request final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CPlayer_GetPerFriendPreferences_Request) */ {
 public:
  inline CPlayer_GetPerFriendPreferences_Request() : CPlayer_GetPerFriendPreferences_Request(nullptr) {}
  explicit constexpr CPlayer_GetPerFriendPreferences_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetPerFriendPreferences_Request(const CPlayer_GetPerFriendPreferences_Request& from);
  CPlayer_GetPerFriendPreferences_Request(CPlayer_GetPerFriendPreferences_Request&& from) noexcept
    : CPlayer_GetPerFriendPreferences_Request() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetPerFriendPreferences_Request& operator=(const CPlayer_GetPerFriendPreferences_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetPerFriendPreferences_Request& operator=(CPlayer_GetPerFriendPreferences_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetPerFriendPreferences_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetPerFriendPreferences_Request* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetPerFriendPreferences_Request*>(
               &_CPlayer_GetPerFriendPreferences_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  friend void swap(CPlayer_GetPerFriendPreferences_Request& a, CPlayer_GetPerFriendPreferences_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetPerFriendPreferences_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetPerFriendPreferences_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetPerFriendPreferences_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetPerFriendPreferences_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CPlayer_GetPerFriendPreferences_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CPlayer_GetPerFriendPreferences_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetPerFriendPreferences_Request";
  }
  protected:
  explicit CPlayer_GetPerFriendPreferences_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CPlayer_GetPerFriendPreferences_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class PerFriendPreferences final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PerFriendPreferences) */ {
 public:
  inline PerFriendPreferences() : PerFriendPreferences(nullptr) {}
  ~PerFriendPreferences() override;
  explicit constexpr PerFriendPreferences(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PerFriendPreferences(const PerFriendPreferences& from);
  PerFriendPreferences(PerFriendPreferences&& from) noexcept
    : PerFriendPreferences() {
    *this = ::std::move(from);
  }

  inline PerFriendPreferences& operator=(const PerFriendPreferences& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerFriendPreferences& operator=(PerFriendPreferences&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PerFriendPreferences& default_instance() {
    return *internal_default_instance();
  }
  static inline const PerFriendPreferences* internal_default_instance() {
    return reinterpret_cast<const PerFriendPreferences*>(
               &_PerFriendPreferences_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  friend void swap(PerFriendPreferences& a, PerFriendPreferences& b) {
    a.Swap(&b);
  }
  inline void Swap(PerFriendPreferences* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PerFriendPreferences* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PerFriendPreferences* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PerFriendPreferences>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PerFriendPreferences& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PerFriendPreferences& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PerFriendPreferences* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PerFriendPreferences";
  }
  protected:
  explicit PerFriendPreferences(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 2,
    kAccountidFieldNumber = 1,
    kNotificationsShowingameFieldNumber = 3,
    kNotificationsShowonlineFieldNumber = 4,
    kNotificationsShowmessagesFieldNumber = 5,
    kSoundsShowingameFieldNumber = 6,
    kSoundsShowonlineFieldNumber = 7,
    kSoundsShowmessagesFieldNumber = 8,
    kNotificationsSendmobileFieldNumber = 9,
  };
  // optional string nickname = 2;
  bool has_nickname() const;
  private:
  bool _internal_has_nickname() const;
  public:
  void clear_nickname();
  const std::string& nickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // optional fixed32 accountid = 1;
  bool has_accountid() const;
  private:
  bool _internal_has_accountid() const;
  public:
  void clear_accountid();
  uint32_t accountid() const;
  void set_accountid(uint32_t value);
  private:
  uint32_t _internal_accountid() const;
  void _internal_set_accountid(uint32_t value);
  public:

  // optional .ENotificationSetting notifications_showingame = 3 [default = k_ENotificationSettingNotifyUseDefault];
  bool has_notifications_showingame() const;
  private:
  bool _internal_has_notifications_showingame() const;
  public:
  void clear_notifications_showingame();
  ::ENotificationSetting notifications_showingame() const;
  void set_notifications_showingame(::ENotificationSetting value);
  private:
  ::ENotificationSetting _internal_notifications_showingame() const;
  void _internal_set_notifications_showingame(::ENotificationSetting value);
  public:

  // optional .ENotificationSetting notifications_showonline = 4 [default = k_ENotificationSettingNotifyUseDefault];
  bool has_notifications_showonline() const;
  private:
  bool _internal_has_notifications_showonline() const;
  public:
  void clear_notifications_showonline();
  ::ENotificationSetting notifications_showonline() const;
  void set_notifications_showonline(::ENotificationSetting value);
  private:
  ::ENotificationSetting _internal_notifications_showonline() const;
  void _internal_set_notifications_showonline(::ENotificationSetting value);
  public:

  // optional .ENotificationSetting notifications_showmessages = 5 [default = k_ENotificationSettingNotifyUseDefault];
  bool has_notifications_showmessages() const;
  private:
  bool _internal_has_notifications_showmessages() const;
  public:
  void clear_notifications_showmessages();
  ::ENotificationSetting notifications_showmessages() const;
  void set_notifications_showmessages(::ENotificationSetting value);
  private:
  ::ENotificationSetting _internal_notifications_showmessages() const;
  void _internal_set_notifications_showmessages(::ENotificationSetting value);
  public:

  // optional .ENotificationSetting sounds_showingame = 6 [default = k_ENotificationSettingNotifyUseDefault];
  bool has_sounds_showingame() const;
  private:
  bool _internal_has_sounds_showingame() const;
  public:
  void clear_sounds_showingame();
  ::ENotificationSetting sounds_showingame() const;
  void set_sounds_showingame(::ENotificationSetting value);
  private:
  ::ENotificationSetting _internal_sounds_showingame() const;
  void _internal_set_sounds_showingame(::ENotificationSetting value);
  public:

  // optional .ENotificationSetting sounds_showonline = 7 [default = k_ENotificationSettingNotifyUseDefault];
  bool has_sounds_showonline() const;
  private:
  bool _internal_has_sounds_showonline() const;
  public:
  void clear_sounds_showonline();
  ::ENotificationSetting sounds_showonline() const;
  void set_sounds_showonline(::ENotificationSetting value);
  private:
  ::ENotificationSetting _internal_sounds_showonline() const;
  void _internal_set_sounds_showonline(::ENotificationSetting value);
  public:

  // optional .ENotificationSetting sounds_showmessages = 8 [default = k_ENotificationSettingNotifyUseDefault];
  bool has_sounds_showmessages() const;
  private:
  bool _internal_has_sounds_showmessages() const;
  public:
  void clear_sounds_showmessages();
  ::ENotificationSetting sounds_showmessages() const;
  void set_sounds_showmessages(::ENotificationSetting value);
  private:
  ::ENotificationSetting _internal_sounds_showmessages() const;
  void _internal_set_sounds_showmessages(::ENotificationSetting value);
  public:

  // optional .ENotificationSetting notifications_sendmobile = 9 [default = k_ENotificationSettingNotifyUseDefault];
  bool has_notifications_sendmobile() const;
  private:
  bool _internal_has_notifications_sendmobile() const;
  public:
  void clear_notifications_sendmobile();
  ::ENotificationSetting notifications_sendmobile() const;
  void set_notifications_sendmobile(::ENotificationSetting value);
  private:
  ::ENotificationSetting _internal_notifications_sendmobile() const;
  void _internal_set_notifications_sendmobile(::ENotificationSetting value);
  public:

  // @@protoc_insertion_point(class_scope:PerFriendPreferences)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  uint32_t accountid_;
  int notifications_showingame_;
  int notifications_showonline_;
  int notifications_showmessages_;
  int sounds_showingame_;
  int sounds_showonline_;
  int sounds_showmessages_;
  int notifications_sendmobile_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetPerFriendPreferences_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_GetPerFriendPreferences_Response) */ {
 public:
  inline CPlayer_GetPerFriendPreferences_Response() : CPlayer_GetPerFriendPreferences_Response(nullptr) {}
  ~CPlayer_GetPerFriendPreferences_Response() override;
  explicit constexpr CPlayer_GetPerFriendPreferences_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetPerFriendPreferences_Response(const CPlayer_GetPerFriendPreferences_Response& from);
  CPlayer_GetPerFriendPreferences_Response(CPlayer_GetPerFriendPreferences_Response&& from) noexcept
    : CPlayer_GetPerFriendPreferences_Response() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetPerFriendPreferences_Response& operator=(const CPlayer_GetPerFriendPreferences_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetPerFriendPreferences_Response& operator=(CPlayer_GetPerFriendPreferences_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetPerFriendPreferences_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetPerFriendPreferences_Response* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetPerFriendPreferences_Response*>(
               &_CPlayer_GetPerFriendPreferences_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    98;

  friend void swap(CPlayer_GetPerFriendPreferences_Response& a, CPlayer_GetPerFriendPreferences_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetPerFriendPreferences_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetPerFriendPreferences_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetPerFriendPreferences_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetPerFriendPreferences_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_GetPerFriendPreferences_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_GetPerFriendPreferences_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetPerFriendPreferences_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetPerFriendPreferences_Response";
  }
  protected:
  explicit CPlayer_GetPerFriendPreferences_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPreferencesFieldNumber = 1,
  };
  // repeated .PerFriendPreferences preferences = 1;
  int preferences_size() const;
  private:
  int _internal_preferences_size() const;
  public:
  void clear_preferences();
  ::PerFriendPreferences* mutable_preferences(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PerFriendPreferences >*
      mutable_preferences();
  private:
  const ::PerFriendPreferences& _internal_preferences(int index) const;
  ::PerFriendPreferences* _internal_add_preferences();
  public:
  const ::PerFriendPreferences& preferences(int index) const;
  ::PerFriendPreferences* add_preferences();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PerFriendPreferences >&
      preferences() const;

  // @@protoc_insertion_point(class_scope:CPlayer_GetPerFriendPreferences_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PerFriendPreferences > preferences_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_SetPerFriendPreferences_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_SetPerFriendPreferences_Request) */ {
 public:
  inline CPlayer_SetPerFriendPreferences_Request() : CPlayer_SetPerFriendPreferences_Request(nullptr) {}
  ~CPlayer_SetPerFriendPreferences_Request() override;
  explicit constexpr CPlayer_SetPerFriendPreferences_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_SetPerFriendPreferences_Request(const CPlayer_SetPerFriendPreferences_Request& from);
  CPlayer_SetPerFriendPreferences_Request(CPlayer_SetPerFriendPreferences_Request&& from) noexcept
    : CPlayer_SetPerFriendPreferences_Request() {
    *this = ::std::move(from);
  }

  inline CPlayer_SetPerFriendPreferences_Request& operator=(const CPlayer_SetPerFriendPreferences_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_SetPerFriendPreferences_Request& operator=(CPlayer_SetPerFriendPreferences_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_SetPerFriendPreferences_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_SetPerFriendPreferences_Request* internal_default_instance() {
    return reinterpret_cast<const CPlayer_SetPerFriendPreferences_Request*>(
               &_CPlayer_SetPerFriendPreferences_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    99;

  friend void swap(CPlayer_SetPerFriendPreferences_Request& a, CPlayer_SetPerFriendPreferences_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_SetPerFriendPreferences_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_SetPerFriendPreferences_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_SetPerFriendPreferences_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_SetPerFriendPreferences_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_SetPerFriendPreferences_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_SetPerFriendPreferences_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_SetPerFriendPreferences_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_SetPerFriendPreferences_Request";
  }
  protected:
  explicit CPlayer_SetPerFriendPreferences_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPreferencesFieldNumber = 1,
  };
  // optional .PerFriendPreferences preferences = 1;
  bool has_preferences() const;
  private:
  bool _internal_has_preferences() const;
  public:
  void clear_preferences();
  const ::PerFriendPreferences& preferences() const;
  PROTOBUF_NODISCARD ::PerFriendPreferences* release_preferences();
  ::PerFriendPreferences* mutable_preferences();
  void set_allocated_preferences(::PerFriendPreferences* preferences);
  private:
  const ::PerFriendPreferences& _internal_preferences() const;
  ::PerFriendPreferences* _internal_mutable_preferences();
  public:
  void unsafe_arena_set_allocated_preferences(
      ::PerFriendPreferences* preferences);
  ::PerFriendPreferences* unsafe_arena_release_preferences();

  // @@protoc_insertion_point(class_scope:CPlayer_SetPerFriendPreferences_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PerFriendPreferences* preferences_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_SetPerFriendPreferences_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CPlayer_SetPerFriendPreferences_Response) */ {
 public:
  inline CPlayer_SetPerFriendPreferences_Response() : CPlayer_SetPerFriendPreferences_Response(nullptr) {}
  explicit constexpr CPlayer_SetPerFriendPreferences_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_SetPerFriendPreferences_Response(const CPlayer_SetPerFriendPreferences_Response& from);
  CPlayer_SetPerFriendPreferences_Response(CPlayer_SetPerFriendPreferences_Response&& from) noexcept
    : CPlayer_SetPerFriendPreferences_Response() {
    *this = ::std::move(from);
  }

  inline CPlayer_SetPerFriendPreferences_Response& operator=(const CPlayer_SetPerFriendPreferences_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_SetPerFriendPreferences_Response& operator=(CPlayer_SetPerFriendPreferences_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_SetPerFriendPreferences_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_SetPerFriendPreferences_Response* internal_default_instance() {
    return reinterpret_cast<const CPlayer_SetPerFriendPreferences_Response*>(
               &_CPlayer_SetPerFriendPreferences_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    100;

  friend void swap(CPlayer_SetPerFriendPreferences_Response& a, CPlayer_SetPerFriendPreferences_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_SetPerFriendPreferences_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_SetPerFriendPreferences_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_SetPerFriendPreferences_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_SetPerFriendPreferences_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CPlayer_SetPerFriendPreferences_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CPlayer_SetPerFriendPreferences_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_SetPerFriendPreferences_Response";
  }
  protected:
  explicit CPlayer_SetPerFriendPreferences_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CPlayer_SetPerFriendPreferences_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_AddFriend_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_AddFriend_Request) */ {
 public:
  inline CPlayer_AddFriend_Request() : CPlayer_AddFriend_Request(nullptr) {}
  ~CPlayer_AddFriend_Request() override;
  explicit constexpr CPlayer_AddFriend_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_AddFriend_Request(const CPlayer_AddFriend_Request& from);
  CPlayer_AddFriend_Request(CPlayer_AddFriend_Request&& from) noexcept
    : CPlayer_AddFriend_Request() {
    *this = ::std::move(from);
  }

  inline CPlayer_AddFriend_Request& operator=(const CPlayer_AddFriend_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_AddFriend_Request& operator=(CPlayer_AddFriend_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_AddFriend_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_AddFriend_Request* internal_default_instance() {
    return reinterpret_cast<const CPlayer_AddFriend_Request*>(
               &_CPlayer_AddFriend_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    101;

  friend void swap(CPlayer_AddFriend_Request& a, CPlayer_AddFriend_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_AddFriend_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_AddFriend_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_AddFriend_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_AddFriend_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_AddFriend_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_AddFriend_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_AddFriend_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_AddFriend_Request";
  }
  protected:
  explicit CPlayer_AddFriend_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidFieldNumber = 1,
  };
  // optional fixed64 steamid = 1 [(.description) = "Steam ID of user to whom to send a friend invite."];
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPlayer_AddFriend_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t steamid_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_AddFriend_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_AddFriend_Response) */ {
 public:
  inline CPlayer_AddFriend_Response() : CPlayer_AddFriend_Response(nullptr) {}
  ~CPlayer_AddFriend_Response() override;
  explicit constexpr CPlayer_AddFriend_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_AddFriend_Response(const CPlayer_AddFriend_Response& from);
  CPlayer_AddFriend_Response(CPlayer_AddFriend_Response&& from) noexcept
    : CPlayer_AddFriend_Response() {
    *this = ::std::move(from);
  }

  inline CPlayer_AddFriend_Response& operator=(const CPlayer_AddFriend_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_AddFriend_Response& operator=(CPlayer_AddFriend_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_AddFriend_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_AddFriend_Response* internal_default_instance() {
    return reinterpret_cast<const CPlayer_AddFriend_Response*>(
               &_CPlayer_AddFriend_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    102;

  friend void swap(CPlayer_AddFriend_Response& a, CPlayer_AddFriend_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_AddFriend_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_AddFriend_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_AddFriend_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_AddFriend_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_AddFriend_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_AddFriend_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_AddFriend_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_AddFriend_Response";
  }
  protected:
  explicit CPlayer_AddFriend_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInviteSentFieldNumber = 1,
    kFriendRelationshipFieldNumber = 2,
    kResultFieldNumber = 3,
  };
  // optional bool invite_sent = 1 [(.description) = "True if the operation was successful, false otherwise."];
  bool has_invite_sent() const;
  private:
  bool _internal_has_invite_sent() const;
  public:
  void clear_invite_sent();
  bool invite_sent() const;
  void set_invite_sent(bool value);
  private:
  bool _internal_invite_sent() const;
  void _internal_set_invite_sent(bool value);
  public:

  // optional uint32 friend_relationship = 2 [(.description) = "the resulting relationship.  Depending on state, may move directly to friends rather than invite sent"];
  bool has_friend_relationship() const;
  private:
  bool _internal_has_friend_relationship() const;
  public:
  void clear_friend_relationship();
  uint32_t friend_relationship() const;
  void set_friend_relationship(uint32_t value);
  private:
  uint32_t _internal_friend_relationship() const;
  void _internal_set_friend_relationship(uint32_t value);
  public:

  // optional int32 result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  int32_t result() const;
  void set_result(int32_t value);
  private:
  int32_t _internal_result() const;
  void _internal_set_result(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPlayer_AddFriend_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool invite_sent_;
  uint32_t friend_relationship_;
  int32_t result_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_RemoveFriend_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_RemoveFriend_Request) */ {
 public:
  inline CPlayer_RemoveFriend_Request() : CPlayer_RemoveFriend_Request(nullptr) {}
  ~CPlayer_RemoveFriend_Request() override;
  explicit constexpr CPlayer_RemoveFriend_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_RemoveFriend_Request(const CPlayer_RemoveFriend_Request& from);
  CPlayer_RemoveFriend_Request(CPlayer_RemoveFriend_Request&& from) noexcept
    : CPlayer_RemoveFriend_Request() {
    *this = ::std::move(from);
  }

  inline CPlayer_RemoveFriend_Request& operator=(const CPlayer_RemoveFriend_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_RemoveFriend_Request& operator=(CPlayer_RemoveFriend_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_RemoveFriend_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_RemoveFriend_Request* internal_default_instance() {
    return reinterpret_cast<const CPlayer_RemoveFriend_Request*>(
               &_CPlayer_RemoveFriend_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    103;

  friend void swap(CPlayer_RemoveFriend_Request& a, CPlayer_RemoveFriend_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_RemoveFriend_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_RemoveFriend_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_RemoveFriend_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_RemoveFriend_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_RemoveFriend_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_RemoveFriend_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_RemoveFriend_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_RemoveFriend_Request";
  }
  protected:
  explicit CPlayer_RemoveFriend_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidFieldNumber = 1,
  };
  // optional fixed64 steamid = 1 [(.description) = "Steam ID of friend to remove."];
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPlayer_RemoveFriend_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t steamid_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_RemoveFriend_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_RemoveFriend_Response) */ {
 public:
  inline CPlayer_RemoveFriend_Response() : CPlayer_RemoveFriend_Response(nullptr) {}
  ~CPlayer_RemoveFriend_Response() override;
  explicit constexpr CPlayer_RemoveFriend_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_RemoveFriend_Response(const CPlayer_RemoveFriend_Response& from);
  CPlayer_RemoveFriend_Response(CPlayer_RemoveFriend_Response&& from) noexcept
    : CPlayer_RemoveFriend_Response() {
    *this = ::std::move(from);
  }

  inline CPlayer_RemoveFriend_Response& operator=(const CPlayer_RemoveFriend_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_RemoveFriend_Response& operator=(CPlayer_RemoveFriend_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_RemoveFriend_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_RemoveFriend_Response* internal_default_instance() {
    return reinterpret_cast<const CPlayer_RemoveFriend_Response*>(
               &_CPlayer_RemoveFriend_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    104;

  friend void swap(CPlayer_RemoveFriend_Response& a, CPlayer_RemoveFriend_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_RemoveFriend_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_RemoveFriend_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_RemoveFriend_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_RemoveFriend_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_RemoveFriend_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_RemoveFriend_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_RemoveFriend_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_RemoveFriend_Response";
  }
  protected:
  explicit CPlayer_RemoveFriend_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFriendRelationshipFieldNumber = 1,
  };
  // optional uint32 friend_relationship = 1 [(.description) = "the resulting relationship"];
  bool has_friend_relationship() const;
  private:
  bool _internal_has_friend_relationship() const;
  public:
  void clear_friend_relationship();
  uint32_t friend_relationship() const;
  void set_friend_relationship(uint32_t value);
  private:
  uint32_t _internal_friend_relationship() const;
  void _internal_set_friend_relationship(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPlayer_RemoveFriend_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t friend_relationship_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_IgnoreFriend_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_IgnoreFriend_Request) */ {
 public:
  inline CPlayer_IgnoreFriend_Request() : CPlayer_IgnoreFriend_Request(nullptr) {}
  ~CPlayer_IgnoreFriend_Request() override;
  explicit constexpr CPlayer_IgnoreFriend_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_IgnoreFriend_Request(const CPlayer_IgnoreFriend_Request& from);
  CPlayer_IgnoreFriend_Request(CPlayer_IgnoreFriend_Request&& from) noexcept
    : CPlayer_IgnoreFriend_Request() {
    *this = ::std::move(from);
  }

  inline CPlayer_IgnoreFriend_Request& operator=(const CPlayer_IgnoreFriend_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_IgnoreFriend_Request& operator=(CPlayer_IgnoreFriend_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_IgnoreFriend_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_IgnoreFriend_Request* internal_default_instance() {
    return reinterpret_cast<const CPlayer_IgnoreFriend_Request*>(
               &_CPlayer_IgnoreFriend_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    105;

  friend void swap(CPlayer_IgnoreFriend_Request& a, CPlayer_IgnoreFriend_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_IgnoreFriend_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_IgnoreFriend_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_IgnoreFriend_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_IgnoreFriend_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_IgnoreFriend_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_IgnoreFriend_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_IgnoreFriend_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_IgnoreFriend_Request";
  }
  protected:
  explicit CPlayer_IgnoreFriend_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidFieldNumber = 1,
    kUnignoreFieldNumber = 2,
  };
  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional bool unignore = 2 [(.description) = "If set, remove from ignore/block list instead of adding "];
  bool has_unignore() const;
  private:
  bool _internal_has_unignore() const;
  public:
  void clear_unignore();
  bool unignore() const;
  void set_unignore(bool value);
  private:
  bool _internal_unignore() const;
  void _internal_set_unignore(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CPlayer_IgnoreFriend_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t steamid_;
  bool unignore_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_IgnoreFriend_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_IgnoreFriend_Response) */ {
 public:
  inline CPlayer_IgnoreFriend_Response() : CPlayer_IgnoreFriend_Response(nullptr) {}
  ~CPlayer_IgnoreFriend_Response() override;
  explicit constexpr CPlayer_IgnoreFriend_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_IgnoreFriend_Response(const CPlayer_IgnoreFriend_Response& from);
  CPlayer_IgnoreFriend_Response(CPlayer_IgnoreFriend_Response&& from) noexcept
    : CPlayer_IgnoreFriend_Response() {
    *this = ::std::move(from);
  }

  inline CPlayer_IgnoreFriend_Response& operator=(const CPlayer_IgnoreFriend_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_IgnoreFriend_Response& operator=(CPlayer_IgnoreFriend_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_IgnoreFriend_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_IgnoreFriend_Response* internal_default_instance() {
    return reinterpret_cast<const CPlayer_IgnoreFriend_Response*>(
               &_CPlayer_IgnoreFriend_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    106;

  friend void swap(CPlayer_IgnoreFriend_Response& a, CPlayer_IgnoreFriend_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_IgnoreFriend_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_IgnoreFriend_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_IgnoreFriend_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_IgnoreFriend_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_IgnoreFriend_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_IgnoreFriend_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_IgnoreFriend_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_IgnoreFriend_Response";
  }
  protected:
  explicit CPlayer_IgnoreFriend_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFriendRelationshipFieldNumber = 1,
  };
  // optional uint32 friend_relationship = 1 [(.description) = "the resulting relationship"];
  bool has_friend_relationship() const;
  private:
  bool _internal_has_friend_relationship() const;
  public:
  void clear_friend_relationship();
  uint32_t friend_relationship() const;
  void set_friend_relationship(uint32_t value);
  private:
  uint32_t _internal_friend_relationship() const;
  void _internal_set_friend_relationship(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPlayer_IgnoreFriend_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t friend_relationship_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetCommunityPreferences_Request final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CPlayer_GetCommunityPreferences_Request) */ {
 public:
  inline CPlayer_GetCommunityPreferences_Request() : CPlayer_GetCommunityPreferences_Request(nullptr) {}
  explicit constexpr CPlayer_GetCommunityPreferences_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetCommunityPreferences_Request(const CPlayer_GetCommunityPreferences_Request& from);
  CPlayer_GetCommunityPreferences_Request(CPlayer_GetCommunityPreferences_Request&& from) noexcept
    : CPlayer_GetCommunityPreferences_Request() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetCommunityPreferences_Request& operator=(const CPlayer_GetCommunityPreferences_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetCommunityPreferences_Request& operator=(CPlayer_GetCommunityPreferences_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetCommunityPreferences_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetCommunityPreferences_Request* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetCommunityPreferences_Request*>(
               &_CPlayer_GetCommunityPreferences_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    107;

  friend void swap(CPlayer_GetCommunityPreferences_Request& a, CPlayer_GetCommunityPreferences_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetCommunityPreferences_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetCommunityPreferences_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetCommunityPreferences_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetCommunityPreferences_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CPlayer_GetCommunityPreferences_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CPlayer_GetCommunityPreferences_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetCommunityPreferences_Request";
  }
  protected:
  explicit CPlayer_GetCommunityPreferences_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CPlayer_GetCommunityPreferences_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_CommunityPreferences final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_CommunityPreferences) */ {
 public:
  inline CPlayer_CommunityPreferences() : CPlayer_CommunityPreferences(nullptr) {}
  ~CPlayer_CommunityPreferences() override;
  explicit constexpr CPlayer_CommunityPreferences(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_CommunityPreferences(const CPlayer_CommunityPreferences& from);
  CPlayer_CommunityPreferences(CPlayer_CommunityPreferences&& from) noexcept
    : CPlayer_CommunityPreferences() {
    *this = ::std::move(from);
  }

  inline CPlayer_CommunityPreferences& operator=(const CPlayer_CommunityPreferences& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_CommunityPreferences& operator=(CPlayer_CommunityPreferences&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_CommunityPreferences& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_CommunityPreferences* internal_default_instance() {
    return reinterpret_cast<const CPlayer_CommunityPreferences*>(
               &_CPlayer_CommunityPreferences_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    108;

  friend void swap(CPlayer_CommunityPreferences& a, CPlayer_CommunityPreferences& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_CommunityPreferences* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_CommunityPreferences* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_CommunityPreferences* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_CommunityPreferences>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_CommunityPreferences& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_CommunityPreferences& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_CommunityPreferences* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_CommunityPreferences";
  }
  protected:
  explicit CPlayer_CommunityPreferences(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampUpdatedFieldNumber = 3,
    kParenthesizeNicknamesFieldNumber = 4,
    kTextFilterSettingFieldNumber = 5,
    kTextFilterWordsRevisionFieldNumber = 7,
    kTextFilterIgnoreFriendsFieldNumber = 6,
  };
  // optional uint32 timestamp_updated = 3;
  bool has_timestamp_updated() const;
  private:
  bool _internal_has_timestamp_updated() const;
  public:
  void clear_timestamp_updated();
  uint32_t timestamp_updated() const;
  void set_timestamp_updated(uint32_t value);
  private:
  uint32_t _internal_timestamp_updated() const;
  void _internal_set_timestamp_updated(uint32_t value);
  public:

  // optional bool parenthesize_nicknames = 4 [default = false];
  bool has_parenthesize_nicknames() const;
  private:
  bool _internal_has_parenthesize_nicknames() const;
  public:
  void clear_parenthesize_nicknames();
  bool parenthesize_nicknames() const;
  void set_parenthesize_nicknames(bool value);
  private:
  bool _internal_parenthesize_nicknames() const;
  void _internal_set_parenthesize_nicknames(bool value);
  public:

  // optional .ETextFilterSetting text_filter_setting = 5 [default = k_ETextFilterSettingSteamLabOptedOut];
  bool has_text_filter_setting() const;
  private:
  bool _internal_has_text_filter_setting() const;
  public:
  void clear_text_filter_setting();
  ::ETextFilterSetting text_filter_setting() const;
  void set_text_filter_setting(::ETextFilterSetting value);
  private:
  ::ETextFilterSetting _internal_text_filter_setting() const;
  void _internal_set_text_filter_setting(::ETextFilterSetting value);
  public:

  // optional uint32 text_filter_words_revision = 7;
  bool has_text_filter_words_revision() const;
  private:
  bool _internal_has_text_filter_words_revision() const;
  public:
  void clear_text_filter_words_revision();
  uint32_t text_filter_words_revision() const;
  void set_text_filter_words_revision(uint32_t value);
  private:
  uint32_t _internal_text_filter_words_revision() const;
  void _internal_set_text_filter_words_revision(uint32_t value);
  public:

  // optional bool text_filter_ignore_friends = 6 [default = true];
  bool has_text_filter_ignore_friends() const;
  private:
  bool _internal_has_text_filter_ignore_friends() const;
  public:
  void clear_text_filter_ignore_friends();
  bool text_filter_ignore_friends() const;
  void set_text_filter_ignore_friends(bool value);
  private:
  bool _internal_text_filter_ignore_friends() const;
  void _internal_set_text_filter_ignore_friends(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CPlayer_CommunityPreferences)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t timestamp_updated_;
  bool parenthesize_nicknames_;
  int text_filter_setting_;
  uint32_t text_filter_words_revision_;
  bool text_filter_ignore_friends_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetCommunityPreferences_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_GetCommunityPreferences_Response) */ {
 public:
  inline CPlayer_GetCommunityPreferences_Response() : CPlayer_GetCommunityPreferences_Response(nullptr) {}
  ~CPlayer_GetCommunityPreferences_Response() override;
  explicit constexpr CPlayer_GetCommunityPreferences_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetCommunityPreferences_Response(const CPlayer_GetCommunityPreferences_Response& from);
  CPlayer_GetCommunityPreferences_Response(CPlayer_GetCommunityPreferences_Response&& from) noexcept
    : CPlayer_GetCommunityPreferences_Response() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetCommunityPreferences_Response& operator=(const CPlayer_GetCommunityPreferences_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetCommunityPreferences_Response& operator=(CPlayer_GetCommunityPreferences_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetCommunityPreferences_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetCommunityPreferences_Response* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetCommunityPreferences_Response*>(
               &_CPlayer_GetCommunityPreferences_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    109;

  friend void swap(CPlayer_GetCommunityPreferences_Response& a, CPlayer_GetCommunityPreferences_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetCommunityPreferences_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetCommunityPreferences_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetCommunityPreferences_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetCommunityPreferences_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_GetCommunityPreferences_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_GetCommunityPreferences_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetCommunityPreferences_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetCommunityPreferences_Response";
  }
  protected:
  explicit CPlayer_GetCommunityPreferences_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPreferencesFieldNumber = 1,
    kContentDescriptorPreferencesFieldNumber = 2,
  };
  // optional .CPlayer_CommunityPreferences preferences = 1;
  bool has_preferences() const;
  private:
  bool _internal_has_preferences() const;
  public:
  void clear_preferences();
  const ::CPlayer_CommunityPreferences& preferences() const;
  PROTOBUF_NODISCARD ::CPlayer_CommunityPreferences* release_preferences();
  ::CPlayer_CommunityPreferences* mutable_preferences();
  void set_allocated_preferences(::CPlayer_CommunityPreferences* preferences);
  private:
  const ::CPlayer_CommunityPreferences& _internal_preferences() const;
  ::CPlayer_CommunityPreferences* _internal_mutable_preferences();
  public:
  void unsafe_arena_set_allocated_preferences(
      ::CPlayer_CommunityPreferences* preferences);
  ::CPlayer_CommunityPreferences* unsafe_arena_release_preferences();

  // optional .UserContentDescriptorPreferences content_descriptor_preferences = 2;
  bool has_content_descriptor_preferences() const;
  private:
  bool _internal_has_content_descriptor_preferences() const;
  public:
  void clear_content_descriptor_preferences();
  const ::UserContentDescriptorPreferences& content_descriptor_preferences() const;
  PROTOBUF_NODISCARD ::UserContentDescriptorPreferences* release_content_descriptor_preferences();
  ::UserContentDescriptorPreferences* mutable_content_descriptor_preferences();
  void set_allocated_content_descriptor_preferences(::UserContentDescriptorPreferences* content_descriptor_preferences);
  private:
  const ::UserContentDescriptorPreferences& _internal_content_descriptor_preferences() const;
  ::UserContentDescriptorPreferences* _internal_mutable_content_descriptor_preferences();
  public:
  void unsafe_arena_set_allocated_content_descriptor_preferences(
      ::UserContentDescriptorPreferences* content_descriptor_preferences);
  ::UserContentDescriptorPreferences* unsafe_arena_release_content_descriptor_preferences();

  // @@protoc_insertion_point(class_scope:CPlayer_GetCommunityPreferences_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CPlayer_CommunityPreferences* preferences_;
  ::UserContentDescriptorPreferences* content_descriptor_preferences_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_SetCommunityPreferences_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_SetCommunityPreferences_Request) */ {
 public:
  inline CPlayer_SetCommunityPreferences_Request() : CPlayer_SetCommunityPreferences_Request(nullptr) {}
  ~CPlayer_SetCommunityPreferences_Request() override;
  explicit constexpr CPlayer_SetCommunityPreferences_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_SetCommunityPreferences_Request(const CPlayer_SetCommunityPreferences_Request& from);
  CPlayer_SetCommunityPreferences_Request(CPlayer_SetCommunityPreferences_Request&& from) noexcept
    : CPlayer_SetCommunityPreferences_Request() {
    *this = ::std::move(from);
  }

  inline CPlayer_SetCommunityPreferences_Request& operator=(const CPlayer_SetCommunityPreferences_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_SetCommunityPreferences_Request& operator=(CPlayer_SetCommunityPreferences_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_SetCommunityPreferences_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_SetCommunityPreferences_Request* internal_default_instance() {
    return reinterpret_cast<const CPlayer_SetCommunityPreferences_Request*>(
               &_CPlayer_SetCommunityPreferences_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    110;

  friend void swap(CPlayer_SetCommunityPreferences_Request& a, CPlayer_SetCommunityPreferences_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_SetCommunityPreferences_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_SetCommunityPreferences_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_SetCommunityPreferences_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_SetCommunityPreferences_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_SetCommunityPreferences_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_SetCommunityPreferences_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_SetCommunityPreferences_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_SetCommunityPreferences_Request";
  }
  protected:
  explicit CPlayer_SetCommunityPreferences_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPreferencesFieldNumber = 1,
  };
  // optional .CPlayer_CommunityPreferences preferences = 1;
  bool has_preferences() const;
  private:
  bool _internal_has_preferences() const;
  public:
  void clear_preferences();
  const ::CPlayer_CommunityPreferences& preferences() const;
  PROTOBUF_NODISCARD ::CPlayer_CommunityPreferences* release_preferences();
  ::CPlayer_CommunityPreferences* mutable_preferences();
  void set_allocated_preferences(::CPlayer_CommunityPreferences* preferences);
  private:
  const ::CPlayer_CommunityPreferences& _internal_preferences() const;
  ::CPlayer_CommunityPreferences* _internal_mutable_preferences();
  public:
  void unsafe_arena_set_allocated_preferences(
      ::CPlayer_CommunityPreferences* preferences);
  ::CPlayer_CommunityPreferences* unsafe_arena_release_preferences();

  // @@protoc_insertion_point(class_scope:CPlayer_SetCommunityPreferences_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CPlayer_CommunityPreferences* preferences_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_SetCommunityPreferences_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CPlayer_SetCommunityPreferences_Response) */ {
 public:
  inline CPlayer_SetCommunityPreferences_Response() : CPlayer_SetCommunityPreferences_Response(nullptr) {}
  explicit constexpr CPlayer_SetCommunityPreferences_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_SetCommunityPreferences_Response(const CPlayer_SetCommunityPreferences_Response& from);
  CPlayer_SetCommunityPreferences_Response(CPlayer_SetCommunityPreferences_Response&& from) noexcept
    : CPlayer_SetCommunityPreferences_Response() {
    *this = ::std::move(from);
  }

  inline CPlayer_SetCommunityPreferences_Response& operator=(const CPlayer_SetCommunityPreferences_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_SetCommunityPreferences_Response& operator=(CPlayer_SetCommunityPreferences_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_SetCommunityPreferences_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_SetCommunityPreferences_Response* internal_default_instance() {
    return reinterpret_cast<const CPlayer_SetCommunityPreferences_Response*>(
               &_CPlayer_SetCommunityPreferences_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    111;

  friend void swap(CPlayer_SetCommunityPreferences_Response& a, CPlayer_SetCommunityPreferences_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_SetCommunityPreferences_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_SetCommunityPreferences_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_SetCommunityPreferences_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_SetCommunityPreferences_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CPlayer_SetCommunityPreferences_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CPlayer_SetCommunityPreferences_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_SetCommunityPreferences_Response";
  }
  protected:
  explicit CPlayer_SetCommunityPreferences_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CPlayer_SetCommunityPreferences_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetTextFilterWords_Request final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CPlayer_GetTextFilterWords_Request) */ {
 public:
  inline CPlayer_GetTextFilterWords_Request() : CPlayer_GetTextFilterWords_Request(nullptr) {}
  explicit constexpr CPlayer_GetTextFilterWords_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetTextFilterWords_Request(const CPlayer_GetTextFilterWords_Request& from);
  CPlayer_GetTextFilterWords_Request(CPlayer_GetTextFilterWords_Request&& from) noexcept
    : CPlayer_GetTextFilterWords_Request() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetTextFilterWords_Request& operator=(const CPlayer_GetTextFilterWords_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetTextFilterWords_Request& operator=(CPlayer_GetTextFilterWords_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetTextFilterWords_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetTextFilterWords_Request* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetTextFilterWords_Request*>(
               &_CPlayer_GetTextFilterWords_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    112;

  friend void swap(CPlayer_GetTextFilterWords_Request& a, CPlayer_GetTextFilterWords_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetTextFilterWords_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetTextFilterWords_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetTextFilterWords_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetTextFilterWords_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CPlayer_GetTextFilterWords_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CPlayer_GetTextFilterWords_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetTextFilterWords_Request";
  }
  protected:
  explicit CPlayer_GetTextFilterWords_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CPlayer_GetTextFilterWords_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_TextFilterWords final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_TextFilterWords) */ {
 public:
  inline CPlayer_TextFilterWords() : CPlayer_TextFilterWords(nullptr) {}
  ~CPlayer_TextFilterWords() override;
  explicit constexpr CPlayer_TextFilterWords(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_TextFilterWords(const CPlayer_TextFilterWords& from);
  CPlayer_TextFilterWords(CPlayer_TextFilterWords&& from) noexcept
    : CPlayer_TextFilterWords() {
    *this = ::std::move(from);
  }

  inline CPlayer_TextFilterWords& operator=(const CPlayer_TextFilterWords& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_TextFilterWords& operator=(CPlayer_TextFilterWords&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_TextFilterWords& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_TextFilterWords* internal_default_instance() {
    return reinterpret_cast<const CPlayer_TextFilterWords*>(
               &_CPlayer_TextFilterWords_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    113;

  friend void swap(CPlayer_TextFilterWords& a, CPlayer_TextFilterWords& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_TextFilterWords* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_TextFilterWords* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_TextFilterWords* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_TextFilterWords>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_TextFilterWords& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_TextFilterWords& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_TextFilterWords* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_TextFilterWords";
  }
  protected:
  explicit CPlayer_TextFilterWords(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFilterCustomBannedWordsFieldNumber = 1,
    kTextFilterCustomCleanWordsFieldNumber = 2,
    kTextFilterWordsRevisionFieldNumber = 3,
  };
  // repeated string text_filter_custom_banned_words = 1;
  int text_filter_custom_banned_words_size() const;
  private:
  int _internal_text_filter_custom_banned_words_size() const;
  public:
  void clear_text_filter_custom_banned_words();
  const std::string& text_filter_custom_banned_words(int index) const;
  std::string* mutable_text_filter_custom_banned_words(int index);
  void set_text_filter_custom_banned_words(int index, const std::string& value);
  void set_text_filter_custom_banned_words(int index, std::string&& value);
  void set_text_filter_custom_banned_words(int index, const char* value);
  void set_text_filter_custom_banned_words(int index, const char* value, size_t size);
  std::string* add_text_filter_custom_banned_words();
  void add_text_filter_custom_banned_words(const std::string& value);
  void add_text_filter_custom_banned_words(std::string&& value);
  void add_text_filter_custom_banned_words(const char* value);
  void add_text_filter_custom_banned_words(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& text_filter_custom_banned_words() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_text_filter_custom_banned_words();
  private:
  const std::string& _internal_text_filter_custom_banned_words(int index) const;
  std::string* _internal_add_text_filter_custom_banned_words();
  public:

  // repeated string text_filter_custom_clean_words = 2;
  int text_filter_custom_clean_words_size() const;
  private:
  int _internal_text_filter_custom_clean_words_size() const;
  public:
  void clear_text_filter_custom_clean_words();
  const std::string& text_filter_custom_clean_words(int index) const;
  std::string* mutable_text_filter_custom_clean_words(int index);
  void set_text_filter_custom_clean_words(int index, const std::string& value);
  void set_text_filter_custom_clean_words(int index, std::string&& value);
  void set_text_filter_custom_clean_words(int index, const char* value);
  void set_text_filter_custom_clean_words(int index, const char* value, size_t size);
  std::string* add_text_filter_custom_clean_words();
  void add_text_filter_custom_clean_words(const std::string& value);
  void add_text_filter_custom_clean_words(std::string&& value);
  void add_text_filter_custom_clean_words(const char* value);
  void add_text_filter_custom_clean_words(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& text_filter_custom_clean_words() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_text_filter_custom_clean_words();
  private:
  const std::string& _internal_text_filter_custom_clean_words(int index) const;
  std::string* _internal_add_text_filter_custom_clean_words();
  public:

  // optional uint32 text_filter_words_revision = 3;
  bool has_text_filter_words_revision() const;
  private:
  bool _internal_has_text_filter_words_revision() const;
  public:
  void clear_text_filter_words_revision();
  uint32_t text_filter_words_revision() const;
  void set_text_filter_words_revision(uint32_t value);
  private:
  uint32_t _internal_text_filter_words_revision() const;
  void _internal_set_text_filter_words_revision(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPlayer_TextFilterWords)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> text_filter_custom_banned_words_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> text_filter_custom_clean_words_;
  uint32_t text_filter_words_revision_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetTextFilterWords_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_GetTextFilterWords_Response) */ {
 public:
  inline CPlayer_GetTextFilterWords_Response() : CPlayer_GetTextFilterWords_Response(nullptr) {}
  ~CPlayer_GetTextFilterWords_Response() override;
  explicit constexpr CPlayer_GetTextFilterWords_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetTextFilterWords_Response(const CPlayer_GetTextFilterWords_Response& from);
  CPlayer_GetTextFilterWords_Response(CPlayer_GetTextFilterWords_Response&& from) noexcept
    : CPlayer_GetTextFilterWords_Response() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetTextFilterWords_Response& operator=(const CPlayer_GetTextFilterWords_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetTextFilterWords_Response& operator=(CPlayer_GetTextFilterWords_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetTextFilterWords_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetTextFilterWords_Response* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetTextFilterWords_Response*>(
               &_CPlayer_GetTextFilterWords_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    114;

  friend void swap(CPlayer_GetTextFilterWords_Response& a, CPlayer_GetTextFilterWords_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetTextFilterWords_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetTextFilterWords_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetTextFilterWords_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetTextFilterWords_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_GetTextFilterWords_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_GetTextFilterWords_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetTextFilterWords_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetTextFilterWords_Response";
  }
  protected:
  explicit CPlayer_GetTextFilterWords_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWordsFieldNumber = 1,
  };
  // optional .CPlayer_TextFilterWords words = 1;
  bool has_words() const;
  private:
  bool _internal_has_words() const;
  public:
  void clear_words();
  const ::CPlayer_TextFilterWords& words() const;
  PROTOBUF_NODISCARD ::CPlayer_TextFilterWords* release_words();
  ::CPlayer_TextFilterWords* mutable_words();
  void set_allocated_words(::CPlayer_TextFilterWords* words);
  private:
  const ::CPlayer_TextFilterWords& _internal_words() const;
  ::CPlayer_TextFilterWords* _internal_mutable_words();
  public:
  void unsafe_arena_set_allocated_words(
      ::CPlayer_TextFilterWords* words);
  ::CPlayer_TextFilterWords* unsafe_arena_release_words();

  // @@protoc_insertion_point(class_scope:CPlayer_GetTextFilterWords_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CPlayer_TextFilterWords* words_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetNewSteamAnnouncementState_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_GetNewSteamAnnouncementState_Request) */ {
 public:
  inline CPlayer_GetNewSteamAnnouncementState_Request() : CPlayer_GetNewSteamAnnouncementState_Request(nullptr) {}
  ~CPlayer_GetNewSteamAnnouncementState_Request() override;
  explicit constexpr CPlayer_GetNewSteamAnnouncementState_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetNewSteamAnnouncementState_Request(const CPlayer_GetNewSteamAnnouncementState_Request& from);
  CPlayer_GetNewSteamAnnouncementState_Request(CPlayer_GetNewSteamAnnouncementState_Request&& from) noexcept
    : CPlayer_GetNewSteamAnnouncementState_Request() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetNewSteamAnnouncementState_Request& operator=(const CPlayer_GetNewSteamAnnouncementState_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetNewSteamAnnouncementState_Request& operator=(CPlayer_GetNewSteamAnnouncementState_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetNewSteamAnnouncementState_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetNewSteamAnnouncementState_Request* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetNewSteamAnnouncementState_Request*>(
               &_CPlayer_GetNewSteamAnnouncementState_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    115;

  friend void swap(CPlayer_GetNewSteamAnnouncementState_Request& a, CPlayer_GetNewSteamAnnouncementState_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetNewSteamAnnouncementState_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetNewSteamAnnouncementState_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetNewSteamAnnouncementState_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetNewSteamAnnouncementState_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_GetNewSteamAnnouncementState_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_GetNewSteamAnnouncementState_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetNewSteamAnnouncementState_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetNewSteamAnnouncementState_Request";
  }
  protected:
  explicit CPlayer_GetNewSteamAnnouncementState_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLanguageFieldNumber = 1,
  };
  // optional int32 language = 1;
  bool has_language() const;
  private:
  bool _internal_has_language() const;
  public:
  void clear_language();
  int32_t language() const;
  void set_language(int32_t value);
  private:
  int32_t _internal_language() const;
  void _internal_set_language(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPlayer_GetNewSteamAnnouncementState_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t language_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetNewSteamAnnouncementState_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_GetNewSteamAnnouncementState_Response) */ {
 public:
  inline CPlayer_GetNewSteamAnnouncementState_Response() : CPlayer_GetNewSteamAnnouncementState_Response(nullptr) {}
  ~CPlayer_GetNewSteamAnnouncementState_Response() override;
  explicit constexpr CPlayer_GetNewSteamAnnouncementState_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetNewSteamAnnouncementState_Response(const CPlayer_GetNewSteamAnnouncementState_Response& from);
  CPlayer_GetNewSteamAnnouncementState_Response(CPlayer_GetNewSteamAnnouncementState_Response&& from) noexcept
    : CPlayer_GetNewSteamAnnouncementState_Response() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetNewSteamAnnouncementState_Response& operator=(const CPlayer_GetNewSteamAnnouncementState_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetNewSteamAnnouncementState_Response& operator=(CPlayer_GetNewSteamAnnouncementState_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetNewSteamAnnouncementState_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetNewSteamAnnouncementState_Response* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetNewSteamAnnouncementState_Response*>(
               &_CPlayer_GetNewSteamAnnouncementState_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    116;

  friend void swap(CPlayer_GetNewSteamAnnouncementState_Response& a, CPlayer_GetNewSteamAnnouncementState_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetNewSteamAnnouncementState_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetNewSteamAnnouncementState_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetNewSteamAnnouncementState_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetNewSteamAnnouncementState_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_GetNewSteamAnnouncementState_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_GetNewSteamAnnouncementState_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetNewSteamAnnouncementState_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetNewSteamAnnouncementState_Response";
  }
  protected:
  explicit CPlayer_GetNewSteamAnnouncementState_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnnouncementHeadlineFieldNumber = 2,
    kAnnouncementUrlFieldNumber = 3,
    kStateFieldNumber = 1,
    kTimePostedFieldNumber = 4,
    kAnnouncementGidFieldNumber = 5,
  };
  // optional string announcement_headline = 2;
  bool has_announcement_headline() const;
  private:
  bool _internal_has_announcement_headline() const;
  public:
  void clear_announcement_headline();
  const std::string& announcement_headline() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_announcement_headline(ArgT0&& arg0, ArgT... args);
  std::string* mutable_announcement_headline();
  PROTOBUF_NODISCARD std::string* release_announcement_headline();
  void set_allocated_announcement_headline(std::string* announcement_headline);
  private:
  const std::string& _internal_announcement_headline() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_announcement_headline(const std::string& value);
  std::string* _internal_mutable_announcement_headline();
  public:

  // optional string announcement_url = 3;
  bool has_announcement_url() const;
  private:
  bool _internal_has_announcement_url() const;
  public:
  void clear_announcement_url();
  const std::string& announcement_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_announcement_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_announcement_url();
  PROTOBUF_NODISCARD std::string* release_announcement_url();
  void set_allocated_announcement_url(std::string* announcement_url);
  private:
  const std::string& _internal_announcement_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_announcement_url(const std::string& value);
  std::string* _internal_mutable_announcement_url();
  public:

  // optional .ENewSteamAnnouncementState state = 1 [default = k_ENewSteamAnnouncementState_Invalid];
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  ::ENewSteamAnnouncementState state() const;
  void set_state(::ENewSteamAnnouncementState value);
  private:
  ::ENewSteamAnnouncementState _internal_state() const;
  void _internal_set_state(::ENewSteamAnnouncementState value);
  public:

  // optional uint32 time_posted = 4;
  bool has_time_posted() const;
  private:
  bool _internal_has_time_posted() const;
  public:
  void clear_time_posted();
  uint32_t time_posted() const;
  void set_time_posted(uint32_t value);
  private:
  uint32_t _internal_time_posted() const;
  void _internal_set_time_posted(uint32_t value);
  public:

  // optional uint64 announcement_gid = 5;
  bool has_announcement_gid() const;
  private:
  bool _internal_has_announcement_gid() const;
  public:
  void clear_announcement_gid();
  uint64_t announcement_gid() const;
  void set_announcement_gid(uint64_t value);
  private:
  uint64_t _internal_announcement_gid() const;
  void _internal_set_announcement_gid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPlayer_GetNewSteamAnnouncementState_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr announcement_headline_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr announcement_url_;
  int state_;
  uint32_t time_posted_;
  uint64_t announcement_gid_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_UpdateSteamAnnouncementLastRead_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_UpdateSteamAnnouncementLastRead_Request) */ {
 public:
  inline CPlayer_UpdateSteamAnnouncementLastRead_Request() : CPlayer_UpdateSteamAnnouncementLastRead_Request(nullptr) {}
  ~CPlayer_UpdateSteamAnnouncementLastRead_Request() override;
  explicit constexpr CPlayer_UpdateSteamAnnouncementLastRead_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_UpdateSteamAnnouncementLastRead_Request(const CPlayer_UpdateSteamAnnouncementLastRead_Request& from);
  CPlayer_UpdateSteamAnnouncementLastRead_Request(CPlayer_UpdateSteamAnnouncementLastRead_Request&& from) noexcept
    : CPlayer_UpdateSteamAnnouncementLastRead_Request() {
    *this = ::std::move(from);
  }

  inline CPlayer_UpdateSteamAnnouncementLastRead_Request& operator=(const CPlayer_UpdateSteamAnnouncementLastRead_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_UpdateSteamAnnouncementLastRead_Request& operator=(CPlayer_UpdateSteamAnnouncementLastRead_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_UpdateSteamAnnouncementLastRead_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_UpdateSteamAnnouncementLastRead_Request* internal_default_instance() {
    return reinterpret_cast<const CPlayer_UpdateSteamAnnouncementLastRead_Request*>(
               &_CPlayer_UpdateSteamAnnouncementLastRead_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    117;

  friend void swap(CPlayer_UpdateSteamAnnouncementLastRead_Request& a, CPlayer_UpdateSteamAnnouncementLastRead_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_UpdateSteamAnnouncementLastRead_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_UpdateSteamAnnouncementLastRead_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_UpdateSteamAnnouncementLastRead_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_UpdateSteamAnnouncementLastRead_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_UpdateSteamAnnouncementLastRead_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_UpdateSteamAnnouncementLastRead_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_UpdateSteamAnnouncementLastRead_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_UpdateSteamAnnouncementLastRead_Request";
  }
  protected:
  explicit CPlayer_UpdateSteamAnnouncementLastRead_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnnouncementGidFieldNumber = 1,
    kTimePostedFieldNumber = 2,
  };
  // optional uint64 announcement_gid = 1;
  bool has_announcement_gid() const;
  private:
  bool _internal_has_announcement_gid() const;
  public:
  void clear_announcement_gid();
  uint64_t announcement_gid() const;
  void set_announcement_gid(uint64_t value);
  private:
  uint64_t _internal_announcement_gid() const;
  void _internal_set_announcement_gid(uint64_t value);
  public:

  // optional uint32 time_posted = 2;
  bool has_time_posted() const;
  private:
  bool _internal_has_time_posted() const;
  public:
  void clear_time_posted();
  uint32_t time_posted() const;
  void set_time_posted(uint32_t value);
  private:
  uint32_t _internal_time_posted() const;
  void _internal_set_time_posted(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPlayer_UpdateSteamAnnouncementLastRead_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t announcement_gid_;
  uint32_t time_posted_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_UpdateSteamAnnouncementLastRead_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CPlayer_UpdateSteamAnnouncementLastRead_Response) */ {
 public:
  inline CPlayer_UpdateSteamAnnouncementLastRead_Response() : CPlayer_UpdateSteamAnnouncementLastRead_Response(nullptr) {}
  explicit constexpr CPlayer_UpdateSteamAnnouncementLastRead_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_UpdateSteamAnnouncementLastRead_Response(const CPlayer_UpdateSteamAnnouncementLastRead_Response& from);
  CPlayer_UpdateSteamAnnouncementLastRead_Response(CPlayer_UpdateSteamAnnouncementLastRead_Response&& from) noexcept
    : CPlayer_UpdateSteamAnnouncementLastRead_Response() {
    *this = ::std::move(from);
  }

  inline CPlayer_UpdateSteamAnnouncementLastRead_Response& operator=(const CPlayer_UpdateSteamAnnouncementLastRead_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_UpdateSteamAnnouncementLastRead_Response& operator=(CPlayer_UpdateSteamAnnouncementLastRead_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_UpdateSteamAnnouncementLastRead_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_UpdateSteamAnnouncementLastRead_Response* internal_default_instance() {
    return reinterpret_cast<const CPlayer_UpdateSteamAnnouncementLastRead_Response*>(
               &_CPlayer_UpdateSteamAnnouncementLastRead_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    118;

  friend void swap(CPlayer_UpdateSteamAnnouncementLastRead_Response& a, CPlayer_UpdateSteamAnnouncementLastRead_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_UpdateSteamAnnouncementLastRead_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_UpdateSteamAnnouncementLastRead_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_UpdateSteamAnnouncementLastRead_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_UpdateSteamAnnouncementLastRead_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CPlayer_UpdateSteamAnnouncementLastRead_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CPlayer_UpdateSteamAnnouncementLastRead_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_UpdateSteamAnnouncementLastRead_Response";
  }
  protected:
  explicit CPlayer_UpdateSteamAnnouncementLastRead_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CPlayer_UpdateSteamAnnouncementLastRead_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetPrivacySettings_Request final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CPlayer_GetPrivacySettings_Request) */ {
 public:
  inline CPlayer_GetPrivacySettings_Request() : CPlayer_GetPrivacySettings_Request(nullptr) {}
  explicit constexpr CPlayer_GetPrivacySettings_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetPrivacySettings_Request(const CPlayer_GetPrivacySettings_Request& from);
  CPlayer_GetPrivacySettings_Request(CPlayer_GetPrivacySettings_Request&& from) noexcept
    : CPlayer_GetPrivacySettings_Request() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetPrivacySettings_Request& operator=(const CPlayer_GetPrivacySettings_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetPrivacySettings_Request& operator=(CPlayer_GetPrivacySettings_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetPrivacySettings_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetPrivacySettings_Request* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetPrivacySettings_Request*>(
               &_CPlayer_GetPrivacySettings_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    119;

  friend void swap(CPlayer_GetPrivacySettings_Request& a, CPlayer_GetPrivacySettings_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetPrivacySettings_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetPrivacySettings_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetPrivacySettings_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetPrivacySettings_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CPlayer_GetPrivacySettings_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CPlayer_GetPrivacySettings_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetPrivacySettings_Request";
  }
  protected:
  explicit CPlayer_GetPrivacySettings_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CPlayer_GetPrivacySettings_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPrivacySettings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPrivacySettings) */ {
 public:
  inline CPrivacySettings() : CPrivacySettings(nullptr) {}
  ~CPrivacySettings() override;
  explicit constexpr CPrivacySettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPrivacySettings(const CPrivacySettings& from);
  CPrivacySettings(CPrivacySettings&& from) noexcept
    : CPrivacySettings() {
    *this = ::std::move(from);
  }

  inline CPrivacySettings& operator=(const CPrivacySettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPrivacySettings& operator=(CPrivacySettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPrivacySettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPrivacySettings* internal_default_instance() {
    return reinterpret_cast<const CPrivacySettings*>(
               &_CPrivacySettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    120;

  friend void swap(CPrivacySettings& a, CPrivacySettings& b) {
    a.Swap(&b);
  }
  inline void Swap(CPrivacySettings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPrivacySettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPrivacySettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPrivacySettings>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPrivacySettings& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPrivacySettings& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPrivacySettings* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPrivacySettings";
  }
  protected:
  explicit CPrivacySettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrivacyStateFieldNumber = 1,
    kPrivacyStateInventoryFieldNumber = 2,
    kPrivacyStateGiftsFieldNumber = 3,
    kPrivacyStateOwnedgamesFieldNumber = 4,
    kPrivacyStatePlaytimeFieldNumber = 5,
    kPrivacyStateFriendslistFieldNumber = 6,
  };
  // optional int32 privacy_state = 1;
  bool has_privacy_state() const;
  private:
  bool _internal_has_privacy_state() const;
  public:
  void clear_privacy_state();
  int32_t privacy_state() const;
  void set_privacy_state(int32_t value);
  private:
  int32_t _internal_privacy_state() const;
  void _internal_set_privacy_state(int32_t value);
  public:

  // optional int32 privacy_state_inventory = 2;
  bool has_privacy_state_inventory() const;
  private:
  bool _internal_has_privacy_state_inventory() const;
  public:
  void clear_privacy_state_inventory();
  int32_t privacy_state_inventory() const;
  void set_privacy_state_inventory(int32_t value);
  private:
  int32_t _internal_privacy_state_inventory() const;
  void _internal_set_privacy_state_inventory(int32_t value);
  public:

  // optional int32 privacy_state_gifts = 3;
  bool has_privacy_state_gifts() const;
  private:
  bool _internal_has_privacy_state_gifts() const;
  public:
  void clear_privacy_state_gifts();
  int32_t privacy_state_gifts() const;
  void set_privacy_state_gifts(int32_t value);
  private:
  int32_t _internal_privacy_state_gifts() const;
  void _internal_set_privacy_state_gifts(int32_t value);
  public:

  // optional int32 privacy_state_ownedgames = 4;
  bool has_privacy_state_ownedgames() const;
  private:
  bool _internal_has_privacy_state_ownedgames() const;
  public:
  void clear_privacy_state_ownedgames();
  int32_t privacy_state_ownedgames() const;
  void set_privacy_state_ownedgames(int32_t value);
  private:
  int32_t _internal_privacy_state_ownedgames() const;
  void _internal_set_privacy_state_ownedgames(int32_t value);
  public:

  // optional int32 privacy_state_playtime = 5;
  bool has_privacy_state_playtime() const;
  private:
  bool _internal_has_privacy_state_playtime() const;
  public:
  void clear_privacy_state_playtime();
  int32_t privacy_state_playtime() const;
  void set_privacy_state_playtime(int32_t value);
  private:
  int32_t _internal_privacy_state_playtime() const;
  void _internal_set_privacy_state_playtime(int32_t value);
  public:

  // optional int32 privacy_state_friendslist = 6;
  bool has_privacy_state_friendslist() const;
  private:
  bool _internal_has_privacy_state_friendslist() const;
  public:
  void clear_privacy_state_friendslist();
  int32_t privacy_state_friendslist() const;
  void set_privacy_state_friendslist(int32_t value);
  private:
  int32_t _internal_privacy_state_friendslist() const;
  void _internal_set_privacy_state_friendslist(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPrivacySettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t privacy_state_;
  int32_t privacy_state_inventory_;
  int32_t privacy_state_gifts_;
  int32_t privacy_state_ownedgames_;
  int32_t privacy_state_playtime_;
  int32_t privacy_state_friendslist_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetPrivacySettings_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_GetPrivacySettings_Response) */ {
 public:
  inline CPlayer_GetPrivacySettings_Response() : CPlayer_GetPrivacySettings_Response(nullptr) {}
  ~CPlayer_GetPrivacySettings_Response() override;
  explicit constexpr CPlayer_GetPrivacySettings_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetPrivacySettings_Response(const CPlayer_GetPrivacySettings_Response& from);
  CPlayer_GetPrivacySettings_Response(CPlayer_GetPrivacySettings_Response&& from) noexcept
    : CPlayer_GetPrivacySettings_Response() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetPrivacySettings_Response& operator=(const CPlayer_GetPrivacySettings_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetPrivacySettings_Response& operator=(CPlayer_GetPrivacySettings_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetPrivacySettings_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetPrivacySettings_Response* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetPrivacySettings_Response*>(
               &_CPlayer_GetPrivacySettings_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    121;

  friend void swap(CPlayer_GetPrivacySettings_Response& a, CPlayer_GetPrivacySettings_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetPrivacySettings_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetPrivacySettings_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetPrivacySettings_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetPrivacySettings_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_GetPrivacySettings_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_GetPrivacySettings_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetPrivacySettings_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetPrivacySettings_Response";
  }
  protected:
  explicit CPlayer_GetPrivacySettings_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrivacySettingsFieldNumber = 1,
  };
  // optional .CPrivacySettings privacy_settings = 1;
  bool has_privacy_settings() const;
  private:
  bool _internal_has_privacy_settings() const;
  public:
  void clear_privacy_settings();
  const ::CPrivacySettings& privacy_settings() const;
  PROTOBUF_NODISCARD ::CPrivacySettings* release_privacy_settings();
  ::CPrivacySettings* mutable_privacy_settings();
  void set_allocated_privacy_settings(::CPrivacySettings* privacy_settings);
  private:
  const ::CPrivacySettings& _internal_privacy_settings() const;
  ::CPrivacySettings* _internal_mutable_privacy_settings();
  public:
  void unsafe_arena_set_allocated_privacy_settings(
      ::CPrivacySettings* privacy_settings);
  ::CPrivacySettings* unsafe_arena_release_privacy_settings();

  // @@protoc_insertion_point(class_scope:CPlayer_GetPrivacySettings_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CPrivacySettings* privacy_settings_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetDurationControl_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_GetDurationControl_Request) */ {
 public:
  inline CPlayer_GetDurationControl_Request() : CPlayer_GetDurationControl_Request(nullptr) {}
  ~CPlayer_GetDurationControl_Request() override;
  explicit constexpr CPlayer_GetDurationControl_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetDurationControl_Request(const CPlayer_GetDurationControl_Request& from);
  CPlayer_GetDurationControl_Request(CPlayer_GetDurationControl_Request&& from) noexcept
    : CPlayer_GetDurationControl_Request() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetDurationControl_Request& operator=(const CPlayer_GetDurationControl_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetDurationControl_Request& operator=(CPlayer_GetDurationControl_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetDurationControl_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetDurationControl_Request* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetDurationControl_Request*>(
               &_CPlayer_GetDurationControl_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    122;

  friend void swap(CPlayer_GetDurationControl_Request& a, CPlayer_GetDurationControl_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetDurationControl_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetDurationControl_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetDurationControl_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetDurationControl_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_GetDurationControl_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_GetDurationControl_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetDurationControl_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetDurationControl_Request";
  }
  protected:
  explicit CPlayer_GetDurationControl_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppidFieldNumber = 1,
  };
  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPlayer_GetDurationControl_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t appid_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetDurationControl_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_GetDurationControl_Response) */ {
 public:
  inline CPlayer_GetDurationControl_Response() : CPlayer_GetDurationControl_Response(nullptr) {}
  ~CPlayer_GetDurationControl_Response() override;
  explicit constexpr CPlayer_GetDurationControl_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_GetDurationControl_Response(const CPlayer_GetDurationControl_Response& from);
  CPlayer_GetDurationControl_Response(CPlayer_GetDurationControl_Response&& from) noexcept
    : CPlayer_GetDurationControl_Response() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetDurationControl_Response& operator=(const CPlayer_GetDurationControl_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_GetDurationControl_Response& operator=(CPlayer_GetDurationControl_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_GetDurationControl_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_GetDurationControl_Response* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetDurationControl_Response*>(
               &_CPlayer_GetDurationControl_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    123;

  friend void swap(CPlayer_GetDurationControl_Response& a, CPlayer_GetDurationControl_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_GetDurationControl_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_GetDurationControl_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_GetDurationControl_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_GetDurationControl_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_GetDurationControl_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_GetDurationControl_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetDurationControl_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_GetDurationControl_Response";
  }
  protected:
  explicit CPlayer_GetDurationControl_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecondsFieldNumber = 2,
    kSecondsTodayFieldNumber = 3,
    kIsEnabledFieldNumber = 1,
    kIsSteamchinaAccountFieldNumber = 4,
    kIsAgeVerifiedFieldNumber = 5,
    kAgeVerificationPendingFieldNumber = 7,
    kSecondsAllowedTodayFieldNumber = 6,
    kBlockMinorsFieldNumber = 8,
  };
  // optional int32 seconds = 2;
  bool has_seconds() const;
  private:
  bool _internal_has_seconds() const;
  public:
  void clear_seconds();
  int32_t seconds() const;
  void set_seconds(int32_t value);
  private:
  int32_t _internal_seconds() const;
  void _internal_set_seconds(int32_t value);
  public:

  // optional int32 seconds_today = 3;
  bool has_seconds_today() const;
  private:
  bool _internal_has_seconds_today() const;
  public:
  void clear_seconds_today();
  int32_t seconds_today() const;
  void set_seconds_today(int32_t value);
  private:
  int32_t _internal_seconds_today() const;
  void _internal_set_seconds_today(int32_t value);
  public:

  // optional bool is_enabled = 1;
  bool has_is_enabled() const;
  private:
  bool _internal_has_is_enabled() const;
  public:
  void clear_is_enabled();
  bool is_enabled() const;
  void set_is_enabled(bool value);
  private:
  bool _internal_is_enabled() const;
  void _internal_set_is_enabled(bool value);
  public:

  // optional bool is_steamchina_account = 4;
  bool has_is_steamchina_account() const;
  private:
  bool _internal_has_is_steamchina_account() const;
  public:
  void clear_is_steamchina_account();
  bool is_steamchina_account() const;
  void set_is_steamchina_account(bool value);
  private:
  bool _internal_is_steamchina_account() const;
  void _internal_set_is_steamchina_account(bool value);
  public:

  // optional bool is_age_verified = 5;
  bool has_is_age_verified() const;
  private:
  bool _internal_has_is_age_verified() const;
  public:
  void clear_is_age_verified();
  bool is_age_verified() const;
  void set_is_age_verified(bool value);
  private:
  bool _internal_is_age_verified() const;
  void _internal_set_is_age_verified(bool value);
  public:

  // optional bool age_verification_pending = 7;
  bool has_age_verification_pending() const;
  private:
  bool _internal_has_age_verification_pending() const;
  public:
  void clear_age_verification_pending();
  bool age_verification_pending() const;
  void set_age_verification_pending(bool value);
  private:
  bool _internal_age_verification_pending() const;
  void _internal_set_age_verification_pending(bool value);
  public:

  // optional uint32 seconds_allowed_today = 6;
  bool has_seconds_allowed_today() const;
  private:
  bool _internal_has_seconds_allowed_today() const;
  public:
  void clear_seconds_allowed_today();
  uint32_t seconds_allowed_today() const;
  void set_seconds_allowed_today(uint32_t value);
  private:
  uint32_t _internal_seconds_allowed_today() const;
  void _internal_set_seconds_allowed_today(uint32_t value);
  public:

  // optional bool block_minors = 8;
  bool has_block_minors() const;
  private:
  bool _internal_has_block_minors() const;
  public:
  void clear_block_minors();
  bool block_minors() const;
  void set_block_minors(bool value);
  private:
  bool _internal_block_minors() const;
  void _internal_set_block_minors(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CPlayer_GetDurationControl_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t seconds_;
  int32_t seconds_today_;
  bool is_enabled_;
  bool is_steamchina_account_;
  bool is_age_verified_;
  bool age_verification_pending_;
  uint32_t seconds_allowed_today_;
  bool block_minors_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_RecordDisconnectedPlaytime_Request.PlayHistory) */ {
 public:
  inline CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory() : CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory(nullptr) {}
  ~CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory() override;
  explicit constexpr CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory(const CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory& from);
  CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory(CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory&& from) noexcept
    : CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory() {
    *this = ::std::move(from);
  }

  inline CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory& operator=(const CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory& operator=(CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory* internal_default_instance() {
    return reinterpret_cast<const CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory*>(
               &_CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    124;

  friend void swap(CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory& a, CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_RecordDisconnectedPlaytime_Request.PlayHistory";
  }
  protected:
  explicit CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppidFieldNumber = 1,
    kSessionTimeStartFieldNumber = 2,
    kSecondsFieldNumber = 3,
    kOfflineFieldNumber = 4,
  };
  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional uint32 session_time_start = 2;
  bool has_session_time_start() const;
  private:
  bool _internal_has_session_time_start() const;
  public:
  void clear_session_time_start();
  uint32_t session_time_start() const;
  void set_session_time_start(uint32_t value);
  private:
  uint32_t _internal_session_time_start() const;
  void _internal_set_session_time_start(uint32_t value);
  public:

  // optional uint32 seconds = 3;
  bool has_seconds() const;
  private:
  bool _internal_has_seconds() const;
  public:
  void clear_seconds();
  uint32_t seconds() const;
  void set_seconds(uint32_t value);
  private:
  uint32_t _internal_seconds() const;
  void _internal_set_seconds(uint32_t value);
  public:

  // optional bool offline = 4;
  bool has_offline() const;
  private:
  bool _internal_has_offline() const;
  public:
  void clear_offline();
  bool offline() const;
  void set_offline(bool value);
  private:
  bool _internal_offline() const;
  void _internal_set_offline(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CPlayer_RecordDisconnectedPlaytime_Request.PlayHistory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t appid_;
  uint32_t session_time_start_;
  uint32_t seconds_;
  bool offline_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_RecordDisconnectedPlaytime_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_RecordDisconnectedPlaytime_Request) */ {
 public:
  inline CPlayer_RecordDisconnectedPlaytime_Request() : CPlayer_RecordDisconnectedPlaytime_Request(nullptr) {}
  ~CPlayer_RecordDisconnectedPlaytime_Request() override;
  explicit constexpr CPlayer_RecordDisconnectedPlaytime_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_RecordDisconnectedPlaytime_Request(const CPlayer_RecordDisconnectedPlaytime_Request& from);
  CPlayer_RecordDisconnectedPlaytime_Request(CPlayer_RecordDisconnectedPlaytime_Request&& from) noexcept
    : CPlayer_RecordDisconnectedPlaytime_Request() {
    *this = ::std::move(from);
  }

  inline CPlayer_RecordDisconnectedPlaytime_Request& operator=(const CPlayer_RecordDisconnectedPlaytime_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_RecordDisconnectedPlaytime_Request& operator=(CPlayer_RecordDisconnectedPlaytime_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_RecordDisconnectedPlaytime_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_RecordDisconnectedPlaytime_Request* internal_default_instance() {
    return reinterpret_cast<const CPlayer_RecordDisconnectedPlaytime_Request*>(
               &_CPlayer_RecordDisconnectedPlaytime_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    125;

  friend void swap(CPlayer_RecordDisconnectedPlaytime_Request& a, CPlayer_RecordDisconnectedPlaytime_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_RecordDisconnectedPlaytime_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_RecordDisconnectedPlaytime_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_RecordDisconnectedPlaytime_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_RecordDisconnectedPlaytime_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_RecordDisconnectedPlaytime_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_RecordDisconnectedPlaytime_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_RecordDisconnectedPlaytime_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_RecordDisconnectedPlaytime_Request";
  }
  protected:
  explicit CPlayer_RecordDisconnectedPlaytime_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory PlayHistory;

  // accessors -------------------------------------------------------

  enum : int {
    kPlaySessionsFieldNumber = 3,
  };
  // repeated .CPlayer_RecordDisconnectedPlaytime_Request.PlayHistory play_sessions = 3;
  int play_sessions_size() const;
  private:
  int _internal_play_sessions_size() const;
  public:
  void clear_play_sessions();
  ::CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory* mutable_play_sessions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory >*
      mutable_play_sessions();
  private:
  const ::CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory& _internal_play_sessions(int index) const;
  ::CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory* _internal_add_play_sessions();
  public:
  const ::CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory& play_sessions(int index) const;
  ::CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory* add_play_sessions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory >&
      play_sessions() const;

  // @@protoc_insertion_point(class_scope:CPlayer_RecordDisconnectedPlaytime_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory > play_sessions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_RecordDisconnectedPlaytime_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CPlayer_RecordDisconnectedPlaytime_Response) */ {
 public:
  inline CPlayer_RecordDisconnectedPlaytime_Response() : CPlayer_RecordDisconnectedPlaytime_Response(nullptr) {}
  explicit constexpr CPlayer_RecordDisconnectedPlaytime_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_RecordDisconnectedPlaytime_Response(const CPlayer_RecordDisconnectedPlaytime_Response& from);
  CPlayer_RecordDisconnectedPlaytime_Response(CPlayer_RecordDisconnectedPlaytime_Response&& from) noexcept
    : CPlayer_RecordDisconnectedPlaytime_Response() {
    *this = ::std::move(from);
  }

  inline CPlayer_RecordDisconnectedPlaytime_Response& operator=(const CPlayer_RecordDisconnectedPlaytime_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_RecordDisconnectedPlaytime_Response& operator=(CPlayer_RecordDisconnectedPlaytime_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_RecordDisconnectedPlaytime_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_RecordDisconnectedPlaytime_Response* internal_default_instance() {
    return reinterpret_cast<const CPlayer_RecordDisconnectedPlaytime_Response*>(
               &_CPlayer_RecordDisconnectedPlaytime_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    126;

  friend void swap(CPlayer_RecordDisconnectedPlaytime_Response& a, CPlayer_RecordDisconnectedPlaytime_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_RecordDisconnectedPlaytime_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_RecordDisconnectedPlaytime_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_RecordDisconnectedPlaytime_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_RecordDisconnectedPlaytime_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CPlayer_RecordDisconnectedPlaytime_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CPlayer_RecordDisconnectedPlaytime_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_RecordDisconnectedPlaytime_Response";
  }
  protected:
  explicit CPlayer_RecordDisconnectedPlaytime_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CPlayer_RecordDisconnectedPlaytime_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_LastPlayedTimes_Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_LastPlayedTimes_Notification) */ {
 public:
  inline CPlayer_LastPlayedTimes_Notification() : CPlayer_LastPlayedTimes_Notification(nullptr) {}
  ~CPlayer_LastPlayedTimes_Notification() override;
  explicit constexpr CPlayer_LastPlayedTimes_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_LastPlayedTimes_Notification(const CPlayer_LastPlayedTimes_Notification& from);
  CPlayer_LastPlayedTimes_Notification(CPlayer_LastPlayedTimes_Notification&& from) noexcept
    : CPlayer_LastPlayedTimes_Notification() {
    *this = ::std::move(from);
  }

  inline CPlayer_LastPlayedTimes_Notification& operator=(const CPlayer_LastPlayedTimes_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_LastPlayedTimes_Notification& operator=(CPlayer_LastPlayedTimes_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_LastPlayedTimes_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_LastPlayedTimes_Notification* internal_default_instance() {
    return reinterpret_cast<const CPlayer_LastPlayedTimes_Notification*>(
               &_CPlayer_LastPlayedTimes_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    127;

  friend void swap(CPlayer_LastPlayedTimes_Notification& a, CPlayer_LastPlayedTimes_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_LastPlayedTimes_Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_LastPlayedTimes_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_LastPlayedTimes_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_LastPlayedTimes_Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_LastPlayedTimes_Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_LastPlayedTimes_Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_LastPlayedTimes_Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_LastPlayedTimes_Notification";
  }
  protected:
  explicit CPlayer_LastPlayedTimes_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGamesFieldNumber = 1,
  };
  // repeated .CPlayer_GetLastPlayedTimes_Response.Game games = 1;
  int games_size() const;
  private:
  int _internal_games_size() const;
  public:
  void clear_games();
  ::CPlayer_GetLastPlayedTimes_Response_Game* mutable_games(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetLastPlayedTimes_Response_Game >*
      mutable_games();
  private:
  const ::CPlayer_GetLastPlayedTimes_Response_Game& _internal_games(int index) const;
  ::CPlayer_GetLastPlayedTimes_Response_Game* _internal_add_games();
  public:
  const ::CPlayer_GetLastPlayedTimes_Response_Game& games(int index) const;
  ::CPlayer_GetLastPlayedTimes_Response_Game* add_games();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetLastPlayedTimes_Response_Game >&
      games() const;

  // @@protoc_insertion_point(class_scope:CPlayer_LastPlayedTimes_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetLastPlayedTimes_Response_Game > games_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_FriendNicknameChanged_Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_FriendNicknameChanged_Notification) */ {
 public:
  inline CPlayer_FriendNicknameChanged_Notification() : CPlayer_FriendNicknameChanged_Notification(nullptr) {}
  ~CPlayer_FriendNicknameChanged_Notification() override;
  explicit constexpr CPlayer_FriendNicknameChanged_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_FriendNicknameChanged_Notification(const CPlayer_FriendNicknameChanged_Notification& from);
  CPlayer_FriendNicknameChanged_Notification(CPlayer_FriendNicknameChanged_Notification&& from) noexcept
    : CPlayer_FriendNicknameChanged_Notification() {
    *this = ::std::move(from);
  }

  inline CPlayer_FriendNicknameChanged_Notification& operator=(const CPlayer_FriendNicknameChanged_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_FriendNicknameChanged_Notification& operator=(CPlayer_FriendNicknameChanged_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_FriendNicknameChanged_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_FriendNicknameChanged_Notification* internal_default_instance() {
    return reinterpret_cast<const CPlayer_FriendNicknameChanged_Notification*>(
               &_CPlayer_FriendNicknameChanged_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    128;

  friend void swap(CPlayer_FriendNicknameChanged_Notification& a, CPlayer_FriendNicknameChanged_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_FriendNicknameChanged_Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_FriendNicknameChanged_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_FriendNicknameChanged_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_FriendNicknameChanged_Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_FriendNicknameChanged_Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_FriendNicknameChanged_Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_FriendNicknameChanged_Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_FriendNicknameChanged_Notification";
  }
  protected:
  explicit CPlayer_FriendNicknameChanged_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 2,
    kAccountidFieldNumber = 1,
    kIsEchoToSelfFieldNumber = 3,
  };
  // optional string nickname = 2;
  bool has_nickname() const;
  private:
  bool _internal_has_nickname() const;
  public:
  void clear_nickname();
  const std::string& nickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // optional fixed32 accountid = 1;
  bool has_accountid() const;
  private:
  bool _internal_has_accountid() const;
  public:
  void clear_accountid();
  uint32_t accountid() const;
  void set_accountid(uint32_t value);
  private:
  uint32_t _internal_accountid() const;
  void _internal_set_accountid(uint32_t value);
  public:

  // optional bool is_echo_to_self = 3;
  bool has_is_echo_to_self() const;
  private:
  bool _internal_has_is_echo_to_self() const;
  public:
  void clear_is_echo_to_self();
  bool is_echo_to_self() const;
  void set_is_echo_to_self(bool value);
  private:
  bool _internal_is_echo_to_self() const;
  void _internal_set_is_echo_to_self(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CPlayer_FriendNicknameChanged_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  uint32_t accountid_;
  bool is_echo_to_self_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_FriendEquippedProfileItemsChanged_Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_FriendEquippedProfileItemsChanged_Notification) */ {
 public:
  inline CPlayer_FriendEquippedProfileItemsChanged_Notification() : CPlayer_FriendEquippedProfileItemsChanged_Notification(nullptr) {}
  ~CPlayer_FriendEquippedProfileItemsChanged_Notification() override;
  explicit constexpr CPlayer_FriendEquippedProfileItemsChanged_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_FriendEquippedProfileItemsChanged_Notification(const CPlayer_FriendEquippedProfileItemsChanged_Notification& from);
  CPlayer_FriendEquippedProfileItemsChanged_Notification(CPlayer_FriendEquippedProfileItemsChanged_Notification&& from) noexcept
    : CPlayer_FriendEquippedProfileItemsChanged_Notification() {
    *this = ::std::move(from);
  }

  inline CPlayer_FriendEquippedProfileItemsChanged_Notification& operator=(const CPlayer_FriendEquippedProfileItemsChanged_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_FriendEquippedProfileItemsChanged_Notification& operator=(CPlayer_FriendEquippedProfileItemsChanged_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_FriendEquippedProfileItemsChanged_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_FriendEquippedProfileItemsChanged_Notification* internal_default_instance() {
    return reinterpret_cast<const CPlayer_FriendEquippedProfileItemsChanged_Notification*>(
               &_CPlayer_FriendEquippedProfileItemsChanged_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    129;

  friend void swap(CPlayer_FriendEquippedProfileItemsChanged_Notification& a, CPlayer_FriendEquippedProfileItemsChanged_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_FriendEquippedProfileItemsChanged_Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_FriendEquippedProfileItemsChanged_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_FriendEquippedProfileItemsChanged_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_FriendEquippedProfileItemsChanged_Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_FriendEquippedProfileItemsChanged_Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_FriendEquippedProfileItemsChanged_Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_FriendEquippedProfileItemsChanged_Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_FriendEquippedProfileItemsChanged_Notification";
  }
  protected:
  explicit CPlayer_FriendEquippedProfileItemsChanged_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountidFieldNumber = 1,
  };
  // optional fixed32 accountid = 1;
  bool has_accountid() const;
  private:
  bool _internal_has_accountid() const;
  public:
  void clear_accountid();
  uint32_t accountid() const;
  void set_accountid(uint32_t value);
  private:
  uint32_t _internal_accountid() const;
  void _internal_set_accountid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPlayer_FriendEquippedProfileItemsChanged_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t accountid_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_NewSteamAnnouncementState_Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_NewSteamAnnouncementState_Notification) */ {
 public:
  inline CPlayer_NewSteamAnnouncementState_Notification() : CPlayer_NewSteamAnnouncementState_Notification(nullptr) {}
  ~CPlayer_NewSteamAnnouncementState_Notification() override;
  explicit constexpr CPlayer_NewSteamAnnouncementState_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_NewSteamAnnouncementState_Notification(const CPlayer_NewSteamAnnouncementState_Notification& from);
  CPlayer_NewSteamAnnouncementState_Notification(CPlayer_NewSteamAnnouncementState_Notification&& from) noexcept
    : CPlayer_NewSteamAnnouncementState_Notification() {
    *this = ::std::move(from);
  }

  inline CPlayer_NewSteamAnnouncementState_Notification& operator=(const CPlayer_NewSteamAnnouncementState_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_NewSteamAnnouncementState_Notification& operator=(CPlayer_NewSteamAnnouncementState_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_NewSteamAnnouncementState_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_NewSteamAnnouncementState_Notification* internal_default_instance() {
    return reinterpret_cast<const CPlayer_NewSteamAnnouncementState_Notification*>(
               &_CPlayer_NewSteamAnnouncementState_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    130;

  friend void swap(CPlayer_NewSteamAnnouncementState_Notification& a, CPlayer_NewSteamAnnouncementState_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_NewSteamAnnouncementState_Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_NewSteamAnnouncementState_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_NewSteamAnnouncementState_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_NewSteamAnnouncementState_Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_NewSteamAnnouncementState_Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_NewSteamAnnouncementState_Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_NewSteamAnnouncementState_Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_NewSteamAnnouncementState_Notification";
  }
  protected:
  explicit CPlayer_NewSteamAnnouncementState_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnnouncementHeadlineFieldNumber = 2,
    kAnnouncementUrlFieldNumber = 3,
    kStateFieldNumber = 1,
    kTimePostedFieldNumber = 4,
    kAnnouncementGidFieldNumber = 5,
  };
  // optional string announcement_headline = 2;
  bool has_announcement_headline() const;
  private:
  bool _internal_has_announcement_headline() const;
  public:
  void clear_announcement_headline();
  const std::string& announcement_headline() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_announcement_headline(ArgT0&& arg0, ArgT... args);
  std::string* mutable_announcement_headline();
  PROTOBUF_NODISCARD std::string* release_announcement_headline();
  void set_allocated_announcement_headline(std::string* announcement_headline);
  private:
  const std::string& _internal_announcement_headline() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_announcement_headline(const std::string& value);
  std::string* _internal_mutable_announcement_headline();
  public:

  // optional string announcement_url = 3;
  bool has_announcement_url() const;
  private:
  bool _internal_has_announcement_url() const;
  public:
  void clear_announcement_url();
  const std::string& announcement_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_announcement_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_announcement_url();
  PROTOBUF_NODISCARD std::string* release_announcement_url();
  void set_allocated_announcement_url(std::string* announcement_url);
  private:
  const std::string& _internal_announcement_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_announcement_url(const std::string& value);
  std::string* _internal_mutable_announcement_url();
  public:

  // optional .ENewSteamAnnouncementState state = 1 [default = k_ENewSteamAnnouncementState_Invalid];
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  ::ENewSteamAnnouncementState state() const;
  void set_state(::ENewSteamAnnouncementState value);
  private:
  ::ENewSteamAnnouncementState _internal_state() const;
  void _internal_set_state(::ENewSteamAnnouncementState value);
  public:

  // optional uint32 time_posted = 4;
  bool has_time_posted() const;
  private:
  bool _internal_has_time_posted() const;
  public:
  void clear_time_posted();
  uint32_t time_posted() const;
  void set_time_posted(uint32_t value);
  private:
  uint32_t _internal_time_posted() const;
  void _internal_set_time_posted(uint32_t value);
  public:

  // optional uint64 announcement_gid = 5;
  bool has_announcement_gid() const;
  private:
  bool _internal_has_announcement_gid() const;
  public:
  void clear_announcement_gid();
  uint64_t announcement_gid() const;
  void set_announcement_gid(uint64_t value);
  private:
  uint64_t _internal_announcement_gid() const;
  void _internal_set_announcement_gid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPlayer_NewSteamAnnouncementState_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr announcement_headline_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr announcement_url_;
  int state_;
  uint32_t time_posted_;
  uint64_t announcement_gid_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_CommunityPreferencesChanged_Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_CommunityPreferencesChanged_Notification) */ {
 public:
  inline CPlayer_CommunityPreferencesChanged_Notification() : CPlayer_CommunityPreferencesChanged_Notification(nullptr) {}
  ~CPlayer_CommunityPreferencesChanged_Notification() override;
  explicit constexpr CPlayer_CommunityPreferencesChanged_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_CommunityPreferencesChanged_Notification(const CPlayer_CommunityPreferencesChanged_Notification& from);
  CPlayer_CommunityPreferencesChanged_Notification(CPlayer_CommunityPreferencesChanged_Notification&& from) noexcept
    : CPlayer_CommunityPreferencesChanged_Notification() {
    *this = ::std::move(from);
  }

  inline CPlayer_CommunityPreferencesChanged_Notification& operator=(const CPlayer_CommunityPreferencesChanged_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_CommunityPreferencesChanged_Notification& operator=(CPlayer_CommunityPreferencesChanged_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_CommunityPreferencesChanged_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_CommunityPreferencesChanged_Notification* internal_default_instance() {
    return reinterpret_cast<const CPlayer_CommunityPreferencesChanged_Notification*>(
               &_CPlayer_CommunityPreferencesChanged_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    131;

  friend void swap(CPlayer_CommunityPreferencesChanged_Notification& a, CPlayer_CommunityPreferencesChanged_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_CommunityPreferencesChanged_Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_CommunityPreferencesChanged_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_CommunityPreferencesChanged_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_CommunityPreferencesChanged_Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_CommunityPreferencesChanged_Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_CommunityPreferencesChanged_Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_CommunityPreferencesChanged_Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_CommunityPreferencesChanged_Notification";
  }
  protected:
  explicit CPlayer_CommunityPreferencesChanged_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPreferencesFieldNumber = 1,
    kContentDescriptorPreferencesFieldNumber = 2,
  };
  // optional .CPlayer_CommunityPreferences preferences = 1;
  bool has_preferences() const;
  private:
  bool _internal_has_preferences() const;
  public:
  void clear_preferences();
  const ::CPlayer_CommunityPreferences& preferences() const;
  PROTOBUF_NODISCARD ::CPlayer_CommunityPreferences* release_preferences();
  ::CPlayer_CommunityPreferences* mutable_preferences();
  void set_allocated_preferences(::CPlayer_CommunityPreferences* preferences);
  private:
  const ::CPlayer_CommunityPreferences& _internal_preferences() const;
  ::CPlayer_CommunityPreferences* _internal_mutable_preferences();
  public:
  void unsafe_arena_set_allocated_preferences(
      ::CPlayer_CommunityPreferences* preferences);
  ::CPlayer_CommunityPreferences* unsafe_arena_release_preferences();

  // optional .UserContentDescriptorPreferences content_descriptor_preferences = 2;
  bool has_content_descriptor_preferences() const;
  private:
  bool _internal_has_content_descriptor_preferences() const;
  public:
  void clear_content_descriptor_preferences();
  const ::UserContentDescriptorPreferences& content_descriptor_preferences() const;
  PROTOBUF_NODISCARD ::UserContentDescriptorPreferences* release_content_descriptor_preferences();
  ::UserContentDescriptorPreferences* mutable_content_descriptor_preferences();
  void set_allocated_content_descriptor_preferences(::UserContentDescriptorPreferences* content_descriptor_preferences);
  private:
  const ::UserContentDescriptorPreferences& _internal_content_descriptor_preferences() const;
  ::UserContentDescriptorPreferences* _internal_mutable_content_descriptor_preferences();
  public:
  void unsafe_arena_set_allocated_content_descriptor_preferences(
      ::UserContentDescriptorPreferences* content_descriptor_preferences);
  ::UserContentDescriptorPreferences* unsafe_arena_release_content_descriptor_preferences();

  // @@protoc_insertion_point(class_scope:CPlayer_CommunityPreferencesChanged_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CPlayer_CommunityPreferences* preferences_;
  ::UserContentDescriptorPreferences* content_descriptor_preferences_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_TextFilterWordsChanged_Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_TextFilterWordsChanged_Notification) */ {
 public:
  inline CPlayer_TextFilterWordsChanged_Notification() : CPlayer_TextFilterWordsChanged_Notification(nullptr) {}
  ~CPlayer_TextFilterWordsChanged_Notification() override;
  explicit constexpr CPlayer_TextFilterWordsChanged_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_TextFilterWordsChanged_Notification(const CPlayer_TextFilterWordsChanged_Notification& from);
  CPlayer_TextFilterWordsChanged_Notification(CPlayer_TextFilterWordsChanged_Notification&& from) noexcept
    : CPlayer_TextFilterWordsChanged_Notification() {
    *this = ::std::move(from);
  }

  inline CPlayer_TextFilterWordsChanged_Notification& operator=(const CPlayer_TextFilterWordsChanged_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_TextFilterWordsChanged_Notification& operator=(CPlayer_TextFilterWordsChanged_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_TextFilterWordsChanged_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_TextFilterWordsChanged_Notification* internal_default_instance() {
    return reinterpret_cast<const CPlayer_TextFilterWordsChanged_Notification*>(
               &_CPlayer_TextFilterWordsChanged_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    132;

  friend void swap(CPlayer_TextFilterWordsChanged_Notification& a, CPlayer_TextFilterWordsChanged_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_TextFilterWordsChanged_Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_TextFilterWordsChanged_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_TextFilterWordsChanged_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_TextFilterWordsChanged_Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_TextFilterWordsChanged_Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_TextFilterWordsChanged_Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_TextFilterWordsChanged_Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_TextFilterWordsChanged_Notification";
  }
  protected:
  explicit CPlayer_TextFilterWordsChanged_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWordsFieldNumber = 1,
  };
  // optional .CPlayer_TextFilterWords words = 1;
  bool has_words() const;
  private:
  bool _internal_has_words() const;
  public:
  void clear_words();
  const ::CPlayer_TextFilterWords& words() const;
  PROTOBUF_NODISCARD ::CPlayer_TextFilterWords* release_words();
  ::CPlayer_TextFilterWords* mutable_words();
  void set_allocated_words(::CPlayer_TextFilterWords* words);
  private:
  const ::CPlayer_TextFilterWords& _internal_words() const;
  ::CPlayer_TextFilterWords* _internal_mutable_words();
  public:
  void unsafe_arena_set_allocated_words(
      ::CPlayer_TextFilterWords* words);
  ::CPlayer_TextFilterWords* unsafe_arena_release_words();

  // @@protoc_insertion_point(class_scope:CPlayer_TextFilterWordsChanged_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CPlayer_TextFilterWords* words_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_PerFriendPreferencesChanged_Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_PerFriendPreferencesChanged_Notification) */ {
 public:
  inline CPlayer_PerFriendPreferencesChanged_Notification() : CPlayer_PerFriendPreferencesChanged_Notification(nullptr) {}
  ~CPlayer_PerFriendPreferencesChanged_Notification() override;
  explicit constexpr CPlayer_PerFriendPreferencesChanged_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_PerFriendPreferencesChanged_Notification(const CPlayer_PerFriendPreferencesChanged_Notification& from);
  CPlayer_PerFriendPreferencesChanged_Notification(CPlayer_PerFriendPreferencesChanged_Notification&& from) noexcept
    : CPlayer_PerFriendPreferencesChanged_Notification() {
    *this = ::std::move(from);
  }

  inline CPlayer_PerFriendPreferencesChanged_Notification& operator=(const CPlayer_PerFriendPreferencesChanged_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_PerFriendPreferencesChanged_Notification& operator=(CPlayer_PerFriendPreferencesChanged_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_PerFriendPreferencesChanged_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_PerFriendPreferencesChanged_Notification* internal_default_instance() {
    return reinterpret_cast<const CPlayer_PerFriendPreferencesChanged_Notification*>(
               &_CPlayer_PerFriendPreferencesChanged_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    133;

  friend void swap(CPlayer_PerFriendPreferencesChanged_Notification& a, CPlayer_PerFriendPreferencesChanged_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_PerFriendPreferencesChanged_Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_PerFriendPreferencesChanged_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_PerFriendPreferencesChanged_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_PerFriendPreferencesChanged_Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_PerFriendPreferencesChanged_Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_PerFriendPreferencesChanged_Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_PerFriendPreferencesChanged_Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_PerFriendPreferencesChanged_Notification";
  }
  protected:
  explicit CPlayer_PerFriendPreferencesChanged_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPreferencesFieldNumber = 2,
    kAccountidFieldNumber = 1,
  };
  // optional .PerFriendPreferences preferences = 2;
  bool has_preferences() const;
  private:
  bool _internal_has_preferences() const;
  public:
  void clear_preferences();
  const ::PerFriendPreferences& preferences() const;
  PROTOBUF_NODISCARD ::PerFriendPreferences* release_preferences();
  ::PerFriendPreferences* mutable_preferences();
  void set_allocated_preferences(::PerFriendPreferences* preferences);
  private:
  const ::PerFriendPreferences& _internal_preferences() const;
  ::PerFriendPreferences* _internal_mutable_preferences();
  public:
  void unsafe_arena_set_allocated_preferences(
      ::PerFriendPreferences* preferences);
  ::PerFriendPreferences* unsafe_arena_release_preferences();

  // optional fixed32 accountid = 1;
  bool has_accountid() const;
  private:
  bool _internal_has_accountid() const;
  public:
  void clear_accountid();
  uint32_t accountid() const;
  void set_accountid(uint32_t value);
  private:
  uint32_t _internal_accountid() const;
  void _internal_set_accountid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPlayer_PerFriendPreferencesChanged_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PerFriendPreferences* preferences_;
  uint32_t accountid_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_PrivacySettingsChanged_Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPlayer_PrivacySettingsChanged_Notification) */ {
 public:
  inline CPlayer_PrivacySettingsChanged_Notification() : CPlayer_PrivacySettingsChanged_Notification(nullptr) {}
  ~CPlayer_PrivacySettingsChanged_Notification() override;
  explicit constexpr CPlayer_PrivacySettingsChanged_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayer_PrivacySettingsChanged_Notification(const CPlayer_PrivacySettingsChanged_Notification& from);
  CPlayer_PrivacySettingsChanged_Notification(CPlayer_PrivacySettingsChanged_Notification&& from) noexcept
    : CPlayer_PrivacySettingsChanged_Notification() {
    *this = ::std::move(from);
  }

  inline CPlayer_PrivacySettingsChanged_Notification& operator=(const CPlayer_PrivacySettingsChanged_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayer_PrivacySettingsChanged_Notification& operator=(CPlayer_PrivacySettingsChanged_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayer_PrivacySettingsChanged_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayer_PrivacySettingsChanged_Notification* internal_default_instance() {
    return reinterpret_cast<const CPlayer_PrivacySettingsChanged_Notification*>(
               &_CPlayer_PrivacySettingsChanged_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    134;

  friend void swap(CPlayer_PrivacySettingsChanged_Notification& a, CPlayer_PrivacySettingsChanged_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayer_PrivacySettingsChanged_Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayer_PrivacySettingsChanged_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayer_PrivacySettingsChanged_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayer_PrivacySettingsChanged_Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayer_PrivacySettingsChanged_Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPlayer_PrivacySettingsChanged_Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_PrivacySettingsChanged_Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPlayer_PrivacySettingsChanged_Notification";
  }
  protected:
  explicit CPlayer_PrivacySettingsChanged_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrivacySettingsFieldNumber = 1,
  };
  // optional .CPrivacySettings privacy_settings = 1;
  bool has_privacy_settings() const;
  private:
  bool _internal_has_privacy_settings() const;
  public:
  void clear_privacy_settings();
  const ::CPrivacySettings& privacy_settings() const;
  PROTOBUF_NODISCARD ::CPrivacySettings* release_privacy_settings();
  ::CPrivacySettings* mutable_privacy_settings();
  void set_allocated_privacy_settings(::CPrivacySettings* privacy_settings);
  private:
  const ::CPrivacySettings& _internal_privacy_settings() const;
  ::CPrivacySettings* _internal_mutable_privacy_settings();
  public:
  void unsafe_arena_set_allocated_privacy_settings(
      ::CPrivacySettings* privacy_settings);
  ::CPrivacySettings* unsafe_arena_release_privacy_settings();

  // @@protoc_insertion_point(class_scope:CPlayer_PrivacySettingsChanged_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CPrivacySettings* privacy_settings_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// ===================================================================

class Player_Stub;

class Player : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline Player() {};
 public:
  virtual ~Player();

  typedef Player_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void GetMutualFriendsForIncomingInvites(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_GetMutualFriendsForIncomingInvites_Request* request,
                       ::CPlayer_GetMutualFriendsForIncomingInvites_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetOwnedGames(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_GetOwnedGames_Request* request,
                       ::CPlayer_GetOwnedGames_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetPlayNext(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_GetPlayNext_Request* request,
                       ::CPlayer_GetPlayNext_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetFriendsGameplayInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_GetFriendsGameplayInfo_Request* request,
                       ::CPlayer_GetFriendsGameplayInfo_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetGameBadgeLevels(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_GetGameBadgeLevels_Request* request,
                       ::CPlayer_GetGameBadgeLevels_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetProfileBackground(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_GetProfileBackground_Request* request,
                       ::CPlayer_GetProfileBackground_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void SetProfileBackground(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_SetProfileBackground_Request* request,
                       ::CPlayer_SetProfileBackground_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetMiniProfileBackground(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_GetMiniProfileBackground_Request* request,
                       ::CPlayer_GetMiniProfileBackground_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void SetMiniProfileBackground(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_SetMiniProfileBackground_Request* request,
                       ::CPlayer_SetMiniProfileBackground_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetAvatarFrame(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_GetAvatarFrame_Request* request,
                       ::CPlayer_GetAvatarFrame_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void SetAvatarFrame(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_SetAvatarFrame_Request* request,
                       ::CPlayer_SetAvatarFrame_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetAnimatedAvatar(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_GetAnimatedAvatar_Request* request,
                       ::CPlayer_GetAnimatedAvatar_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void SetAnimatedAvatar(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_SetAnimatedAvatar_Request* request,
                       ::CPlayer_SetAnimatedAvatar_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetSteamDeckKeyboardSkin(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_GetSteamDeckKeyboardSkin_Request* request,
                       ::CPlayer_GetSteamDeckKeyboardSkin_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void SetSteamDeckKeyboardSkin(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_SetSteamDeckKeyboardSkin_Request* request,
                       ::CPlayer_SetSteamDeckKeyboardSkin_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetProfileItemsOwned(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_GetProfileItemsOwned_Request* request,
                       ::CPlayer_GetProfileItemsOwned_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetProfileItemsEquipped(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_GetProfileItemsEquipped_Request* request,
                       ::CPlayer_GetProfileItemsEquipped_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void SetEquippedProfileItemFlags(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_SetEquippedProfileItemFlags_Request* request,
                       ::CPlayer_SetEquippedProfileItemFlags_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetEmoticonList(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_GetEmoticonList_Request* request,
                       ::CPlayer_GetEmoticonList_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetTopAchievementsForGames(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_GetTopAchievementsForGames_Request* request,
                       ::CPlayer_GetTopAchievementsForGames_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetAchievementsProgress(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_GetAchievementsProgress_Request* request,
                       ::CPlayer_GetAchievementsProgress_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetGameAchievements(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_GetGameAchievements_Request* request,
                       ::CPlayer_GetGameAchievements_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetFavoriteBadge(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_GetFavoriteBadge_Request* request,
                       ::CPlayer_GetFavoriteBadge_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void SetFavoriteBadge(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_SetFavoriteBadge_Request* request,
                       ::CPlayer_SetFavoriteBadge_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetProfileCustomization(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_GetProfileCustomization_Request* request,
                       ::CPlayer_GetProfileCustomization_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetPurchasedProfileCustomizations(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_GetPurchasedProfileCustomizations_Request* request,
                       ::CPlayer_GetPurchasedProfileCustomizations_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetPurchasedAndUpgradedProfileCustomizations(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request* request,
                       ::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetProfileThemesAvailable(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_GetProfileThemesAvailable_Request* request,
                       ::CPlayer_GetProfileThemesAvailable_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void SetProfileTheme(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_SetProfileTheme_Request* request,
                       ::CPlayer_SetProfileTheme_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void SetProfilePreferences(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_SetProfilePreferences_Request* request,
                       ::CPlayer_SetProfilePreferences_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void PostStatusToFriends(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_PostStatusToFriends_Request* request,
                       ::CPlayer_PostStatusToFriends_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetPostedStatus(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_GetPostedStatus_Request* request,
                       ::CPlayer_GetPostedStatus_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void DeletePostedStatus(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_DeletePostedStatus_Request* request,
                       ::CPlayer_DeletePostedStatus_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void ClientGetLastPlayedTimes(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_GetLastPlayedTimes_Request* request,
                       ::CPlayer_GetLastPlayedTimes_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetTimeSSAAccepted(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_GetTimeSSAAccepted_Request* request,
                       ::CPlayer_GetTimeSSAAccepted_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void AcceptSSA(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_AcceptSSA_Request* request,
                       ::CPlayer_AcceptSSA_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetNicknameList(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_GetNicknameList_Request* request,
                       ::CPlayer_GetNicknameList_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetPerFriendPreferences(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_GetPerFriendPreferences_Request* request,
                       ::CPlayer_GetPerFriendPreferences_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void SetPerFriendPreferences(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_SetPerFriendPreferences_Request* request,
                       ::CPlayer_SetPerFriendPreferences_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void AddFriend(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_AddFriend_Request* request,
                       ::CPlayer_AddFriend_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void RemoveFriend(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_RemoveFriend_Request* request,
                       ::CPlayer_RemoveFriend_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void IgnoreFriend(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_IgnoreFriend_Request* request,
                       ::CPlayer_IgnoreFriend_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetCommunityPreferences(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_GetCommunityPreferences_Request* request,
                       ::CPlayer_GetCommunityPreferences_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void SetCommunityPreferences(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_SetCommunityPreferences_Request* request,
                       ::CPlayer_SetCommunityPreferences_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetTextFilterWords(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_GetTextFilterWords_Request* request,
                       ::CPlayer_GetTextFilterWords_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetNewSteamAnnouncementState(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_GetNewSteamAnnouncementState_Request* request,
                       ::CPlayer_GetNewSteamAnnouncementState_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void UpdateSteamAnnouncementLastRead(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_UpdateSteamAnnouncementLastRead_Request* request,
                       ::CPlayer_UpdateSteamAnnouncementLastRead_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetPrivacySettings(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_GetPrivacySettings_Request* request,
                       ::CPlayer_GetPrivacySettings_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetDurationControl(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_GetDurationControl_Request* request,
                       ::CPlayer_GetDurationControl_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void RecordDisconnectedPlaytime(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_RecordDisconnectedPlaytime_Request* request,
                       ::CPlayer_RecordDisconnectedPlaytime_Response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Player);
};

class Player_Stub : public Player {
 public:
  Player_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  Player_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~Player_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements Player ------------------------------------------

  void GetMutualFriendsForIncomingInvites(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_GetMutualFriendsForIncomingInvites_Request* request,
                       ::CPlayer_GetMutualFriendsForIncomingInvites_Response* response,
                       ::google::protobuf::Closure* done);
  void GetOwnedGames(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_GetOwnedGames_Request* request,
                       ::CPlayer_GetOwnedGames_Response* response,
                       ::google::protobuf::Closure* done);
  void GetPlayNext(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_GetPlayNext_Request* request,
                       ::CPlayer_GetPlayNext_Response* response,
                       ::google::protobuf::Closure* done);
  void GetFriendsGameplayInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_GetFriendsGameplayInfo_Request* request,
                       ::CPlayer_GetFriendsGameplayInfo_Response* response,
                       ::google::protobuf::Closure* done);
  void GetGameBadgeLevels(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_GetGameBadgeLevels_Request* request,
                       ::CPlayer_GetGameBadgeLevels_Response* response,
                       ::google::protobuf::Closure* done);
  void GetProfileBackground(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_GetProfileBackground_Request* request,
                       ::CPlayer_GetProfileBackground_Response* response,
                       ::google::protobuf::Closure* done);
  void SetProfileBackground(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_SetProfileBackground_Request* request,
                       ::CPlayer_SetProfileBackground_Response* response,
                       ::google::protobuf::Closure* done);
  void GetMiniProfileBackground(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_GetMiniProfileBackground_Request* request,
                       ::CPlayer_GetMiniProfileBackground_Response* response,
                       ::google::protobuf::Closure* done);
  void SetMiniProfileBackground(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_SetMiniProfileBackground_Request* request,
                       ::CPlayer_SetMiniProfileBackground_Response* response,
                       ::google::protobuf::Closure* done);
  void GetAvatarFrame(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_GetAvatarFrame_Request* request,
                       ::CPlayer_GetAvatarFrame_Response* response,
                       ::google::protobuf::Closure* done);
  void SetAvatarFrame(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_SetAvatarFrame_Request* request,
                       ::CPlayer_SetAvatarFrame_Response* response,
                       ::google::protobuf::Closure* done);
  void GetAnimatedAvatar(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_GetAnimatedAvatar_Request* request,
                       ::CPlayer_GetAnimatedAvatar_Response* response,
                       ::google::protobuf::Closure* done);
  void SetAnimatedAvatar(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_SetAnimatedAvatar_Request* request,
                       ::CPlayer_SetAnimatedAvatar_Response* response,
                       ::google::protobuf::Closure* done);
  void GetSteamDeckKeyboardSkin(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_GetSteamDeckKeyboardSkin_Request* request,
                       ::CPlayer_GetSteamDeckKeyboardSkin_Response* response,
                       ::google::protobuf::Closure* done);
  void SetSteamDeckKeyboardSkin(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_SetSteamDeckKeyboardSkin_Request* request,
                       ::CPlayer_SetSteamDeckKeyboardSkin_Response* response,
                       ::google::protobuf::Closure* done);
  void GetProfileItemsOwned(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_GetProfileItemsOwned_Request* request,
                       ::CPlayer_GetProfileItemsOwned_Response* response,
                       ::google::protobuf::Closure* done);
  void GetProfileItemsEquipped(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_GetProfileItemsEquipped_Request* request,
                       ::CPlayer_GetProfileItemsEquipped_Response* response,
                       ::google::protobuf::Closure* done);
  void SetEquippedProfileItemFlags(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_SetEquippedProfileItemFlags_Request* request,
                       ::CPlayer_SetEquippedProfileItemFlags_Response* response,
                       ::google::protobuf::Closure* done);
  void GetEmoticonList(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_GetEmoticonList_Request* request,
                       ::CPlayer_GetEmoticonList_Response* response,
                       ::google::protobuf::Closure* done);
  void GetTopAchievementsForGames(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_GetTopAchievementsForGames_Request* request,
                       ::CPlayer_GetTopAchievementsForGames_Response* response,
                       ::google::protobuf::Closure* done);
  void GetAchievementsProgress(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_GetAchievementsProgress_Request* request,
                       ::CPlayer_GetAchievementsProgress_Response* response,
                       ::google::protobuf::Closure* done);
  void GetGameAchievements(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_GetGameAchievements_Request* request,
                       ::CPlayer_GetGameAchievements_Response* response,
                       ::google::protobuf::Closure* done);
  void GetFavoriteBadge(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_GetFavoriteBadge_Request* request,
                       ::CPlayer_GetFavoriteBadge_Response* response,
                       ::google::protobuf::Closure* done);
  void SetFavoriteBadge(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_SetFavoriteBadge_Request* request,
                       ::CPlayer_SetFavoriteBadge_Response* response,
                       ::google::protobuf::Closure* done);
  void GetProfileCustomization(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_GetProfileCustomization_Request* request,
                       ::CPlayer_GetProfileCustomization_Response* response,
                       ::google::protobuf::Closure* done);
  void GetPurchasedProfileCustomizations(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_GetPurchasedProfileCustomizations_Request* request,
                       ::CPlayer_GetPurchasedProfileCustomizations_Response* response,
                       ::google::protobuf::Closure* done);
  void GetPurchasedAndUpgradedProfileCustomizations(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request* request,
                       ::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response* response,
                       ::google::protobuf::Closure* done);
  void GetProfileThemesAvailable(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_GetProfileThemesAvailable_Request* request,
                       ::CPlayer_GetProfileThemesAvailable_Response* response,
                       ::google::protobuf::Closure* done);
  void SetProfileTheme(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_SetProfileTheme_Request* request,
                       ::CPlayer_SetProfileTheme_Response* response,
                       ::google::protobuf::Closure* done);
  void SetProfilePreferences(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_SetProfilePreferences_Request* request,
                       ::CPlayer_SetProfilePreferences_Response* response,
                       ::google::protobuf::Closure* done);
  void PostStatusToFriends(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_PostStatusToFriends_Request* request,
                       ::CPlayer_PostStatusToFriends_Response* response,
                       ::google::protobuf::Closure* done);
  void GetPostedStatus(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_GetPostedStatus_Request* request,
                       ::CPlayer_GetPostedStatus_Response* response,
                       ::google::protobuf::Closure* done);
  void DeletePostedStatus(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_DeletePostedStatus_Request* request,
                       ::CPlayer_DeletePostedStatus_Response* response,
                       ::google::protobuf::Closure* done);
  void ClientGetLastPlayedTimes(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_GetLastPlayedTimes_Request* request,
                       ::CPlayer_GetLastPlayedTimes_Response* response,
                       ::google::protobuf::Closure* done);
  void GetTimeSSAAccepted(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_GetTimeSSAAccepted_Request* request,
                       ::CPlayer_GetTimeSSAAccepted_Response* response,
                       ::google::protobuf::Closure* done);
  void AcceptSSA(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_AcceptSSA_Request* request,
                       ::CPlayer_AcceptSSA_Response* response,
                       ::google::protobuf::Closure* done);
  void GetNicknameList(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_GetNicknameList_Request* request,
                       ::CPlayer_GetNicknameList_Response* response,
                       ::google::protobuf::Closure* done);
  void GetPerFriendPreferences(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_GetPerFriendPreferences_Request* request,
                       ::CPlayer_GetPerFriendPreferences_Response* response,
                       ::google::protobuf::Closure* done);
  void SetPerFriendPreferences(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_SetPerFriendPreferences_Request* request,
                       ::CPlayer_SetPerFriendPreferences_Response* response,
                       ::google::protobuf::Closure* done);
  void AddFriend(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_AddFriend_Request* request,
                       ::CPlayer_AddFriend_Response* response,
                       ::google::protobuf::Closure* done);
  void RemoveFriend(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_RemoveFriend_Request* request,
                       ::CPlayer_RemoveFriend_Response* response,
                       ::google::protobuf::Closure* done);
  void IgnoreFriend(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_IgnoreFriend_Request* request,
                       ::CPlayer_IgnoreFriend_Response* response,
                       ::google::protobuf::Closure* done);
  void GetCommunityPreferences(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_GetCommunityPreferences_Request* request,
                       ::CPlayer_GetCommunityPreferences_Response* response,
                       ::google::protobuf::Closure* done);
  void SetCommunityPreferences(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_SetCommunityPreferences_Request* request,
                       ::CPlayer_SetCommunityPreferences_Response* response,
                       ::google::protobuf::Closure* done);
  void GetTextFilterWords(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_GetTextFilterWords_Request* request,
                       ::CPlayer_GetTextFilterWords_Response* response,
                       ::google::protobuf::Closure* done);
  void GetNewSteamAnnouncementState(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_GetNewSteamAnnouncementState_Request* request,
                       ::CPlayer_GetNewSteamAnnouncementState_Response* response,
                       ::google::protobuf::Closure* done);
  void UpdateSteamAnnouncementLastRead(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_UpdateSteamAnnouncementLastRead_Request* request,
                       ::CPlayer_UpdateSteamAnnouncementLastRead_Response* response,
                       ::google::protobuf::Closure* done);
  void GetPrivacySettings(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_GetPrivacySettings_Request* request,
                       ::CPlayer_GetPrivacySettings_Response* response,
                       ::google::protobuf::Closure* done);
  void GetDurationControl(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_GetDurationControl_Request* request,
                       ::CPlayer_GetDurationControl_Response* response,
                       ::google::protobuf::Closure* done);
  void RecordDisconnectedPlaytime(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_RecordDisconnectedPlaytime_Request* request,
                       ::CPlayer_RecordDisconnectedPlaytime_Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Player_Stub);
};


// -------------------------------------------------------------------

class PlayerClient_Stub;

class PlayerClient : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline PlayerClient() {};
 public:
  virtual ~PlayerClient();

  typedef PlayerClient_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void NotifyLastPlayedTimes(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_LastPlayedTimes_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyFriendNicknameChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_FriendNicknameChanged_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyFriendEquippedProfileItemsChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_FriendEquippedProfileItemsChanged_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyNewSteamAnnouncementState(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_NewSteamAnnouncementState_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyCommunityPreferencesChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_CommunityPreferencesChanged_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyTextFilterWordsChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_TextFilterWordsChanged_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyPerFriendPreferencesChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_PerFriendPreferencesChanged_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyPrivacyPrivacySettingsChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_PrivacySettingsChanged_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(PlayerClient);
};

class PlayerClient_Stub : public PlayerClient {
 public:
  PlayerClient_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  PlayerClient_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~PlayerClient_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements PlayerClient ------------------------------------------

  void NotifyLastPlayedTimes(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_LastPlayedTimes_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void NotifyFriendNicknameChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_FriendNicknameChanged_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void NotifyFriendEquippedProfileItemsChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_FriendEquippedProfileItemsChanged_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void NotifyNewSteamAnnouncementState(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_NewSteamAnnouncementState_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void NotifyCommunityPreferencesChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_CommunityPreferencesChanged_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void NotifyTextFilterWordsChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_TextFilterWordsChanged_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void NotifyPerFriendPreferencesChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_PerFriendPreferencesChanged_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void NotifyPrivacyPrivacySettingsChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPlayer_PrivacySettingsChanged_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(PlayerClient_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CPlayer_GetMutualFriendsForIncomingInvites_Request

// -------------------------------------------------------------------

// CPlayer_IncomingInviteMutualFriendList

// optional fixed64 steamid = 1;
inline bool CPlayer_IncomingInviteMutualFriendList::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPlayer_IncomingInviteMutualFriendList::has_steamid() const {
  return _internal_has_steamid();
}
inline void CPlayer_IncomingInviteMutualFriendList::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CPlayer_IncomingInviteMutualFriendList::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CPlayer_IncomingInviteMutualFriendList::steamid() const {
  // @@protoc_insertion_point(field_get:CPlayer_IncomingInviteMutualFriendList.steamid)
  return _internal_steamid();
}
inline void CPlayer_IncomingInviteMutualFriendList::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
}
inline void CPlayer_IncomingInviteMutualFriendList::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CPlayer_IncomingInviteMutualFriendList.steamid)
}

// repeated uint32 mutual_friend_account_ids = 2;
inline int CPlayer_IncomingInviteMutualFriendList::_internal_mutual_friend_account_ids_size() const {
  return mutual_friend_account_ids_.size();
}
inline int CPlayer_IncomingInviteMutualFriendList::mutual_friend_account_ids_size() const {
  return _internal_mutual_friend_account_ids_size();
}
inline void CPlayer_IncomingInviteMutualFriendList::clear_mutual_friend_account_ids() {
  mutual_friend_account_ids_.Clear();
}
inline uint32_t CPlayer_IncomingInviteMutualFriendList::_internal_mutual_friend_account_ids(int index) const {
  return mutual_friend_account_ids_.Get(index);
}
inline uint32_t CPlayer_IncomingInviteMutualFriendList::mutual_friend_account_ids(int index) const {
  // @@protoc_insertion_point(field_get:CPlayer_IncomingInviteMutualFriendList.mutual_friend_account_ids)
  return _internal_mutual_friend_account_ids(index);
}
inline void CPlayer_IncomingInviteMutualFriendList::set_mutual_friend_account_ids(int index, uint32_t value) {
  mutual_friend_account_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CPlayer_IncomingInviteMutualFriendList.mutual_friend_account_ids)
}
inline void CPlayer_IncomingInviteMutualFriendList::_internal_add_mutual_friend_account_ids(uint32_t value) {
  mutual_friend_account_ids_.Add(value);
}
inline void CPlayer_IncomingInviteMutualFriendList::add_mutual_friend_account_ids(uint32_t value) {
  _internal_add_mutual_friend_account_ids(value);
  // @@protoc_insertion_point(field_add:CPlayer_IncomingInviteMutualFriendList.mutual_friend_account_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CPlayer_IncomingInviteMutualFriendList::_internal_mutual_friend_account_ids() const {
  return mutual_friend_account_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CPlayer_IncomingInviteMutualFriendList::mutual_friend_account_ids() const {
  // @@protoc_insertion_point(field_list:CPlayer_IncomingInviteMutualFriendList.mutual_friend_account_ids)
  return _internal_mutual_friend_account_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CPlayer_IncomingInviteMutualFriendList::_internal_mutable_mutual_friend_account_ids() {
  return &mutual_friend_account_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CPlayer_IncomingInviteMutualFriendList::mutable_mutual_friend_account_ids() {
  // @@protoc_insertion_point(field_mutable_list:CPlayer_IncomingInviteMutualFriendList.mutual_friend_account_ids)
  return _internal_mutable_mutual_friend_account_ids();
}

// -------------------------------------------------------------------

// CPlayer_GetMutualFriendsForIncomingInvites_Response

// repeated .CPlayer_IncomingInviteMutualFriendList incoming_invite_mutual_friends_lists = 1;
inline int CPlayer_GetMutualFriendsForIncomingInvites_Response::_internal_incoming_invite_mutual_friends_lists_size() const {
  return incoming_invite_mutual_friends_lists_.size();
}
inline int CPlayer_GetMutualFriendsForIncomingInvites_Response::incoming_invite_mutual_friends_lists_size() const {
  return _internal_incoming_invite_mutual_friends_lists_size();
}
inline void CPlayer_GetMutualFriendsForIncomingInvites_Response::clear_incoming_invite_mutual_friends_lists() {
  incoming_invite_mutual_friends_lists_.Clear();
}
inline ::CPlayer_IncomingInviteMutualFriendList* CPlayer_GetMutualFriendsForIncomingInvites_Response::mutable_incoming_invite_mutual_friends_lists(int index) {
  // @@protoc_insertion_point(field_mutable:CPlayer_GetMutualFriendsForIncomingInvites_Response.incoming_invite_mutual_friends_lists)
  return incoming_invite_mutual_friends_lists_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_IncomingInviteMutualFriendList >*
CPlayer_GetMutualFriendsForIncomingInvites_Response::mutable_incoming_invite_mutual_friends_lists() {
  // @@protoc_insertion_point(field_mutable_list:CPlayer_GetMutualFriendsForIncomingInvites_Response.incoming_invite_mutual_friends_lists)
  return &incoming_invite_mutual_friends_lists_;
}
inline const ::CPlayer_IncomingInviteMutualFriendList& CPlayer_GetMutualFriendsForIncomingInvites_Response::_internal_incoming_invite_mutual_friends_lists(int index) const {
  return incoming_invite_mutual_friends_lists_.Get(index);
}
inline const ::CPlayer_IncomingInviteMutualFriendList& CPlayer_GetMutualFriendsForIncomingInvites_Response::incoming_invite_mutual_friends_lists(int index) const {
  // @@protoc_insertion_point(field_get:CPlayer_GetMutualFriendsForIncomingInvites_Response.incoming_invite_mutual_friends_lists)
  return _internal_incoming_invite_mutual_friends_lists(index);
}
inline ::CPlayer_IncomingInviteMutualFriendList* CPlayer_GetMutualFriendsForIncomingInvites_Response::_internal_add_incoming_invite_mutual_friends_lists() {
  return incoming_invite_mutual_friends_lists_.Add();
}
inline ::CPlayer_IncomingInviteMutualFriendList* CPlayer_GetMutualFriendsForIncomingInvites_Response::add_incoming_invite_mutual_friends_lists() {
  ::CPlayer_IncomingInviteMutualFriendList* _add = _internal_add_incoming_invite_mutual_friends_lists();
  // @@protoc_insertion_point(field_add:CPlayer_GetMutualFriendsForIncomingInvites_Response.incoming_invite_mutual_friends_lists)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_IncomingInviteMutualFriendList >&
CPlayer_GetMutualFriendsForIncomingInvites_Response::incoming_invite_mutual_friends_lists() const {
  // @@protoc_insertion_point(field_list:CPlayer_GetMutualFriendsForIncomingInvites_Response.incoming_invite_mutual_friends_lists)
  return incoming_invite_mutual_friends_lists_;
}

// -------------------------------------------------------------------

// CPlayer_GetOwnedGames_Request

// optional uint64 steamid = 1 [(.description) = "The player we\'re asking about"];
inline bool CPlayer_GetOwnedGames_Request::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPlayer_GetOwnedGames_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CPlayer_GetOwnedGames_Request::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CPlayer_GetOwnedGames_Request::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CPlayer_GetOwnedGames_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetOwnedGames_Request.steamid)
  return _internal_steamid();
}
inline void CPlayer_GetOwnedGames_Request::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  steamid_ = value;
}
inline void CPlayer_GetOwnedGames_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetOwnedGames_Request.steamid)
}

// optional bool include_appinfo = 2 [(.description) = "true if we want additional details (name, icon) about each game"];
inline bool CPlayer_GetOwnedGames_Request::_internal_has_include_appinfo() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CPlayer_GetOwnedGames_Request::has_include_appinfo() const {
  return _internal_has_include_appinfo();
}
inline void CPlayer_GetOwnedGames_Request::clear_include_appinfo() {
  include_appinfo_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CPlayer_GetOwnedGames_Request::_internal_include_appinfo() const {
  return include_appinfo_;
}
inline bool CPlayer_GetOwnedGames_Request::include_appinfo() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetOwnedGames_Request.include_appinfo)
  return _internal_include_appinfo();
}
inline void CPlayer_GetOwnedGames_Request::_internal_set_include_appinfo(bool value) {
  _has_bits_[0] |= 0x00000004u;
  include_appinfo_ = value;
}
inline void CPlayer_GetOwnedGames_Request::set_include_appinfo(bool value) {
  _internal_set_include_appinfo(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetOwnedGames_Request.include_appinfo)
}

// optional bool include_played_free_games = 3 [(.description) = "Free games are excluded by default.  If this is set, free games the user has played will be returned."];
inline bool CPlayer_GetOwnedGames_Request::_internal_has_include_played_free_games() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CPlayer_GetOwnedGames_Request::has_include_played_free_games() const {
  return _internal_has_include_played_free_games();
}
inline void CPlayer_GetOwnedGames_Request::clear_include_played_free_games() {
  include_played_free_games_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CPlayer_GetOwnedGames_Request::_internal_include_played_free_games() const {
  return include_played_free_games_;
}
inline bool CPlayer_GetOwnedGames_Request::include_played_free_games() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetOwnedGames_Request.include_played_free_games)
  return _internal_include_played_free_games();
}
inline void CPlayer_GetOwnedGames_Request::_internal_set_include_played_free_games(bool value) {
  _has_bits_[0] |= 0x00000008u;
  include_played_free_games_ = value;
}
inline void CPlayer_GetOwnedGames_Request::set_include_played_free_games(bool value) {
  _internal_set_include_played_free_games(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetOwnedGames_Request.include_played_free_games)
}

// repeated uint32 appids_filter = 4 [(.description) = "if set, restricts result set to the passed in apps"];
inline int CPlayer_GetOwnedGames_Request::_internal_appids_filter_size() const {
  return appids_filter_.size();
}
inline int CPlayer_GetOwnedGames_Request::appids_filter_size() const {
  return _internal_appids_filter_size();
}
inline void CPlayer_GetOwnedGames_Request::clear_appids_filter() {
  appids_filter_.Clear();
}
inline uint32_t CPlayer_GetOwnedGames_Request::_internal_appids_filter(int index) const {
  return appids_filter_.Get(index);
}
inline uint32_t CPlayer_GetOwnedGames_Request::appids_filter(int index) const {
  // @@protoc_insertion_point(field_get:CPlayer_GetOwnedGames_Request.appids_filter)
  return _internal_appids_filter(index);
}
inline void CPlayer_GetOwnedGames_Request::set_appids_filter(int index, uint32_t value) {
  appids_filter_.Set(index, value);
  // @@protoc_insertion_point(field_set:CPlayer_GetOwnedGames_Request.appids_filter)
}
inline void CPlayer_GetOwnedGames_Request::_internal_add_appids_filter(uint32_t value) {
  appids_filter_.Add(value);
}
inline void CPlayer_GetOwnedGames_Request::add_appids_filter(uint32_t value) {
  _internal_add_appids_filter(value);
  // @@protoc_insertion_point(field_add:CPlayer_GetOwnedGames_Request.appids_filter)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CPlayer_GetOwnedGames_Request::_internal_appids_filter() const {
  return appids_filter_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CPlayer_GetOwnedGames_Request::appids_filter() const {
  // @@protoc_insertion_point(field_list:CPlayer_GetOwnedGames_Request.appids_filter)
  return _internal_appids_filter();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CPlayer_GetOwnedGames_Request::_internal_mutable_appids_filter() {
  return &appids_filter_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CPlayer_GetOwnedGames_Request::mutable_appids_filter() {
  // @@protoc_insertion_point(field_mutable_list:CPlayer_GetOwnedGames_Request.appids_filter)
  return _internal_mutable_appids_filter();
}

// optional bool include_free_sub = 5 [(.description) = "Some games are in the free sub, which are excluded by default."];
inline bool CPlayer_GetOwnedGames_Request::_internal_has_include_free_sub() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CPlayer_GetOwnedGames_Request::has_include_free_sub() const {
  return _internal_has_include_free_sub();
}
inline void CPlayer_GetOwnedGames_Request::clear_include_free_sub() {
  include_free_sub_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CPlayer_GetOwnedGames_Request::_internal_include_free_sub() const {
  return include_free_sub_;
}
inline bool CPlayer_GetOwnedGames_Request::include_free_sub() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetOwnedGames_Request.include_free_sub)
  return _internal_include_free_sub();
}
inline void CPlayer_GetOwnedGames_Request::_internal_set_include_free_sub(bool value) {
  _has_bits_[0] |= 0x00000010u;
  include_free_sub_ = value;
}
inline void CPlayer_GetOwnedGames_Request::set_include_free_sub(bool value) {
  _internal_set_include_free_sub(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetOwnedGames_Request.include_free_sub)
}

// optional bool skip_unvetted_apps = 6 [default = true, (.description) = "if set, skip unvetted store apps"];
inline bool CPlayer_GetOwnedGames_Request::_internal_has_skip_unvetted_apps() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CPlayer_GetOwnedGames_Request::has_skip_unvetted_apps() const {
  return _internal_has_skip_unvetted_apps();
}
inline void CPlayer_GetOwnedGames_Request::clear_skip_unvetted_apps() {
  skip_unvetted_apps_ = true;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool CPlayer_GetOwnedGames_Request::_internal_skip_unvetted_apps() const {
  return skip_unvetted_apps_;
}
inline bool CPlayer_GetOwnedGames_Request::skip_unvetted_apps() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetOwnedGames_Request.skip_unvetted_apps)
  return _internal_skip_unvetted_apps();
}
inline void CPlayer_GetOwnedGames_Request::_internal_set_skip_unvetted_apps(bool value) {
  _has_bits_[0] |= 0x00000040u;
  skip_unvetted_apps_ = value;
}
inline void CPlayer_GetOwnedGames_Request::set_skip_unvetted_apps(bool value) {
  _internal_set_skip_unvetted_apps(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetOwnedGames_Request.skip_unvetted_apps)
}

// optional string language = 7 [(.description) = "Will return appinfo in this language"];
inline bool CPlayer_GetOwnedGames_Request::_internal_has_language() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPlayer_GetOwnedGames_Request::has_language() const {
  return _internal_has_language();
}
inline void CPlayer_GetOwnedGames_Request::clear_language() {
  language_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CPlayer_GetOwnedGames_Request::language() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetOwnedGames_Request.language)
  return _internal_language();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CPlayer_GetOwnedGames_Request::set_language(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CPlayer_GetOwnedGames_Request.language)
}
inline std::string* CPlayer_GetOwnedGames_Request::mutable_language() {
  std::string* _s = _internal_mutable_language();
  // @@protoc_insertion_point(field_mutable:CPlayer_GetOwnedGames_Request.language)
  return _s;
}
inline const std::string& CPlayer_GetOwnedGames_Request::_internal_language() const {
  return language_.Get();
}
inline void CPlayer_GetOwnedGames_Request::_internal_set_language(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CPlayer_GetOwnedGames_Request::_internal_mutable_language() {
  _has_bits_[0] |= 0x00000001u;
  return language_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CPlayer_GetOwnedGames_Request::release_language() {
  // @@protoc_insertion_point(field_release:CPlayer_GetOwnedGames_Request.language)
  if (!_internal_has_language()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = language_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (language_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CPlayer_GetOwnedGames_Request::set_allocated_language(std::string* language) {
  if (language != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  language_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (language_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CPlayer_GetOwnedGames_Request.language)
}

// optional bool include_extended_appinfo = 8 [(.description) = "true if we want even more details (capsule, sortas, and capabilities) about each game.  include_appinfo must also be true."];
inline bool CPlayer_GetOwnedGames_Request::_internal_has_include_extended_appinfo() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CPlayer_GetOwnedGames_Request::has_include_extended_appinfo() const {
  return _internal_has_include_extended_appinfo();
}
inline void CPlayer_GetOwnedGames_Request::clear_include_extended_appinfo() {
  include_extended_appinfo_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CPlayer_GetOwnedGames_Request::_internal_include_extended_appinfo() const {
  return include_extended_appinfo_;
}
inline bool CPlayer_GetOwnedGames_Request::include_extended_appinfo() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetOwnedGames_Request.include_extended_appinfo)
  return _internal_include_extended_appinfo();
}
inline void CPlayer_GetOwnedGames_Request::_internal_set_include_extended_appinfo(bool value) {
  _has_bits_[0] |= 0x00000020u;
  include_extended_appinfo_ = value;
}
inline void CPlayer_GetOwnedGames_Request::set_include_extended_appinfo(bool value) {
  _internal_set_include_extended_appinfo(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetOwnedGames_Request.include_extended_appinfo)
}

// -------------------------------------------------------------------

// CPlayer_GetOwnedGames_Response_Game

// optional int32 appid = 1;
inline bool CPlayer_GetOwnedGames_Response_Game::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CPlayer_GetOwnedGames_Response_Game::has_appid() const {
  return _internal_has_appid();
}
inline void CPlayer_GetOwnedGames_Response_Game::clear_appid() {
  appid_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline int32_t CPlayer_GetOwnedGames_Response_Game::_internal_appid() const {
  return appid_;
}
inline int32_t CPlayer_GetOwnedGames_Response_Game::appid() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetOwnedGames_Response.Game.appid)
  return _internal_appid();
}
inline void CPlayer_GetOwnedGames_Response_Game::_internal_set_appid(int32_t value) {
  _has_bits_[0] |= 0x00000010u;
  appid_ = value;
}
inline void CPlayer_GetOwnedGames_Response_Game::set_appid(int32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetOwnedGames_Response.Game.appid)
}

// optional string name = 2;
inline bool CPlayer_GetOwnedGames_Response_Game::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPlayer_GetOwnedGames_Response_Game::has_name() const {
  return _internal_has_name();
}
inline void CPlayer_GetOwnedGames_Response_Game::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CPlayer_GetOwnedGames_Response_Game::name() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetOwnedGames_Response.Game.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CPlayer_GetOwnedGames_Response_Game::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CPlayer_GetOwnedGames_Response.Game.name)
}
inline std::string* CPlayer_GetOwnedGames_Response_Game::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CPlayer_GetOwnedGames_Response.Game.name)
  return _s;
}
inline const std::string& CPlayer_GetOwnedGames_Response_Game::_internal_name() const {
  return name_.Get();
}
inline void CPlayer_GetOwnedGames_Response_Game::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CPlayer_GetOwnedGames_Response_Game::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CPlayer_GetOwnedGames_Response_Game::release_name() {
  // @@protoc_insertion_point(field_release:CPlayer_GetOwnedGames_Response.Game.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CPlayer_GetOwnedGames_Response_Game::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CPlayer_GetOwnedGames_Response.Game.name)
}

// optional int32 playtime_2weeks = 3;
inline bool CPlayer_GetOwnedGames_Response_Game::_internal_has_playtime_2weeks() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CPlayer_GetOwnedGames_Response_Game::has_playtime_2weeks() const {
  return _internal_has_playtime_2weeks();
}
inline void CPlayer_GetOwnedGames_Response_Game::clear_playtime_2weeks() {
  playtime_2weeks_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline int32_t CPlayer_GetOwnedGames_Response_Game::_internal_playtime_2weeks() const {
  return playtime_2weeks_;
}
inline int32_t CPlayer_GetOwnedGames_Response_Game::playtime_2weeks() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetOwnedGames_Response.Game.playtime_2weeks)
  return _internal_playtime_2weeks();
}
inline void CPlayer_GetOwnedGames_Response_Game::_internal_set_playtime_2weeks(int32_t value) {
  _has_bits_[0] |= 0x00000020u;
  playtime_2weeks_ = value;
}
inline void CPlayer_GetOwnedGames_Response_Game::set_playtime_2weeks(int32_t value) {
  _internal_set_playtime_2weeks(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetOwnedGames_Response.Game.playtime_2weeks)
}

// optional int32 playtime_forever = 4;
inline bool CPlayer_GetOwnedGames_Response_Game::_internal_has_playtime_forever() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CPlayer_GetOwnedGames_Response_Game::has_playtime_forever() const {
  return _internal_has_playtime_forever();
}
inline void CPlayer_GetOwnedGames_Response_Game::clear_playtime_forever() {
  playtime_forever_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline int32_t CPlayer_GetOwnedGames_Response_Game::_internal_playtime_forever() const {
  return playtime_forever_;
}
inline int32_t CPlayer_GetOwnedGames_Response_Game::playtime_forever() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetOwnedGames_Response.Game.playtime_forever)
  return _internal_playtime_forever();
}
inline void CPlayer_GetOwnedGames_Response_Game::_internal_set_playtime_forever(int32_t value) {
  _has_bits_[0] |= 0x00000040u;
  playtime_forever_ = value;
}
inline void CPlayer_GetOwnedGames_Response_Game::set_playtime_forever(int32_t value) {
  _internal_set_playtime_forever(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetOwnedGames_Response.Game.playtime_forever)
}

// optional string img_icon_url = 5;
inline bool CPlayer_GetOwnedGames_Response_Game::_internal_has_img_icon_url() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPlayer_GetOwnedGames_Response_Game::has_img_icon_url() const {
  return _internal_has_img_icon_url();
}
inline void CPlayer_GetOwnedGames_Response_Game::clear_img_icon_url() {
  img_icon_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CPlayer_GetOwnedGames_Response_Game::img_icon_url() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetOwnedGames_Response.Game.img_icon_url)
  return _internal_img_icon_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CPlayer_GetOwnedGames_Response_Game::set_img_icon_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 img_icon_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CPlayer_GetOwnedGames_Response.Game.img_icon_url)
}
inline std::string* CPlayer_GetOwnedGames_Response_Game::mutable_img_icon_url() {
  std::string* _s = _internal_mutable_img_icon_url();
  // @@protoc_insertion_point(field_mutable:CPlayer_GetOwnedGames_Response.Game.img_icon_url)
  return _s;
}
inline const std::string& CPlayer_GetOwnedGames_Response_Game::_internal_img_icon_url() const {
  return img_icon_url_.Get();
}
inline void CPlayer_GetOwnedGames_Response_Game::_internal_set_img_icon_url(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  img_icon_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CPlayer_GetOwnedGames_Response_Game::_internal_mutable_img_icon_url() {
  _has_bits_[0] |= 0x00000002u;
  return img_icon_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CPlayer_GetOwnedGames_Response_Game::release_img_icon_url() {
  // @@protoc_insertion_point(field_release:CPlayer_GetOwnedGames_Response.Game.img_icon_url)
  if (!_internal_has_img_icon_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = img_icon_url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (img_icon_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    img_icon_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CPlayer_GetOwnedGames_Response_Game::set_allocated_img_icon_url(std::string* img_icon_url) {
  if (img_icon_url != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  img_icon_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), img_icon_url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (img_icon_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    img_icon_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CPlayer_GetOwnedGames_Response.Game.img_icon_url)
}

// optional bool has_community_visible_stats = 7;
inline bool CPlayer_GetOwnedGames_Response_Game::_internal_has_has_community_visible_stats() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CPlayer_GetOwnedGames_Response_Game::has_has_community_visible_stats() const {
  return _internal_has_has_community_visible_stats();
}
inline void CPlayer_GetOwnedGames_Response_Game::clear_has_community_visible_stats() {
  has_community_visible_stats_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool CPlayer_GetOwnedGames_Response_Game::_internal_has_community_visible_stats() const {
  return has_community_visible_stats_;
}
inline bool CPlayer_GetOwnedGames_Response_Game::has_community_visible_stats() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetOwnedGames_Response.Game.has_community_visible_stats)
  return _internal_has_community_visible_stats();
}
inline void CPlayer_GetOwnedGames_Response_Game::_internal_set_has_community_visible_stats(bool value) {
  _has_bits_[0] |= 0x00000800u;
  has_community_visible_stats_ = value;
}
inline void CPlayer_GetOwnedGames_Response_Game::set_has_community_visible_stats(bool value) {
  _internal_set_has_community_visible_stats(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetOwnedGames_Response.Game.has_community_visible_stats)
}

// optional int32 playtime_windows_forever = 8;
inline bool CPlayer_GetOwnedGames_Response_Game::_internal_has_playtime_windows_forever() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CPlayer_GetOwnedGames_Response_Game::has_playtime_windows_forever() const {
  return _internal_has_playtime_windows_forever();
}
inline void CPlayer_GetOwnedGames_Response_Game::clear_playtime_windows_forever() {
  playtime_windows_forever_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline int32_t CPlayer_GetOwnedGames_Response_Game::_internal_playtime_windows_forever() const {
  return playtime_windows_forever_;
}
inline int32_t CPlayer_GetOwnedGames_Response_Game::playtime_windows_forever() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetOwnedGames_Response.Game.playtime_windows_forever)
  return _internal_playtime_windows_forever();
}
inline void CPlayer_GetOwnedGames_Response_Game::_internal_set_playtime_windows_forever(int32_t value) {
  _has_bits_[0] |= 0x00000080u;
  playtime_windows_forever_ = value;
}
inline void CPlayer_GetOwnedGames_Response_Game::set_playtime_windows_forever(int32_t value) {
  _internal_set_playtime_windows_forever(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetOwnedGames_Response.Game.playtime_windows_forever)
}

// optional int32 playtime_mac_forever = 9;
inline bool CPlayer_GetOwnedGames_Response_Game::_internal_has_playtime_mac_forever() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CPlayer_GetOwnedGames_Response_Game::has_playtime_mac_forever() const {
  return _internal_has_playtime_mac_forever();
}
inline void CPlayer_GetOwnedGames_Response_Game::clear_playtime_mac_forever() {
  playtime_mac_forever_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline int32_t CPlayer_GetOwnedGames_Response_Game::_internal_playtime_mac_forever() const {
  return playtime_mac_forever_;
}
inline int32_t CPlayer_GetOwnedGames_Response_Game::playtime_mac_forever() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetOwnedGames_Response.Game.playtime_mac_forever)
  return _internal_playtime_mac_forever();
}
inline void CPlayer_GetOwnedGames_Response_Game::_internal_set_playtime_mac_forever(int32_t value) {
  _has_bits_[0] |= 0x00000100u;
  playtime_mac_forever_ = value;
}
inline void CPlayer_GetOwnedGames_Response_Game::set_playtime_mac_forever(int32_t value) {
  _internal_set_playtime_mac_forever(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetOwnedGames_Response.Game.playtime_mac_forever)
}

// optional int32 playtime_linux_forever = 10;
inline bool CPlayer_GetOwnedGames_Response_Game::_internal_has_playtime_linux_forever() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CPlayer_GetOwnedGames_Response_Game::has_playtime_linux_forever() const {
  return _internal_has_playtime_linux_forever();
}
inline void CPlayer_GetOwnedGames_Response_Game::clear_playtime_linux_forever() {
  playtime_linux_forever_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline int32_t CPlayer_GetOwnedGames_Response_Game::_internal_playtime_linux_forever() const {
  return playtime_linux_forever_;
}
inline int32_t CPlayer_GetOwnedGames_Response_Game::playtime_linux_forever() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetOwnedGames_Response.Game.playtime_linux_forever)
  return _internal_playtime_linux_forever();
}
inline void CPlayer_GetOwnedGames_Response_Game::_internal_set_playtime_linux_forever(int32_t value) {
  _has_bits_[0] |= 0x00000200u;
  playtime_linux_forever_ = value;
}
inline void CPlayer_GetOwnedGames_Response_Game::set_playtime_linux_forever(int32_t value) {
  _internal_set_playtime_linux_forever(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetOwnedGames_Response.Game.playtime_linux_forever)
}

// optional uint32 rtime_last_played = 11;
inline bool CPlayer_GetOwnedGames_Response_Game::_internal_has_rtime_last_played() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CPlayer_GetOwnedGames_Response_Game::has_rtime_last_played() const {
  return _internal_has_rtime_last_played();
}
inline void CPlayer_GetOwnedGames_Response_Game::clear_rtime_last_played() {
  rtime_last_played_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline uint32_t CPlayer_GetOwnedGames_Response_Game::_internal_rtime_last_played() const {
  return rtime_last_played_;
}
inline uint32_t CPlayer_GetOwnedGames_Response_Game::rtime_last_played() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetOwnedGames_Response.Game.rtime_last_played)
  return _internal_rtime_last_played();
}
inline void CPlayer_GetOwnedGames_Response_Game::_internal_set_rtime_last_played(uint32_t value) {
  _has_bits_[0] |= 0x00000400u;
  rtime_last_played_ = value;
}
inline void CPlayer_GetOwnedGames_Response_Game::set_rtime_last_played(uint32_t value) {
  _internal_set_rtime_last_played(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetOwnedGames_Response.Game.rtime_last_played)
}

// optional string capsule_filename = 12;
inline bool CPlayer_GetOwnedGames_Response_Game::_internal_has_capsule_filename() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CPlayer_GetOwnedGames_Response_Game::has_capsule_filename() const {
  return _internal_has_capsule_filename();
}
inline void CPlayer_GetOwnedGames_Response_Game::clear_capsule_filename() {
  capsule_filename_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CPlayer_GetOwnedGames_Response_Game::capsule_filename() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetOwnedGames_Response.Game.capsule_filename)
  return _internal_capsule_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CPlayer_GetOwnedGames_Response_Game::set_capsule_filename(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 capsule_filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CPlayer_GetOwnedGames_Response.Game.capsule_filename)
}
inline std::string* CPlayer_GetOwnedGames_Response_Game::mutable_capsule_filename() {
  std::string* _s = _internal_mutable_capsule_filename();
  // @@protoc_insertion_point(field_mutable:CPlayer_GetOwnedGames_Response.Game.capsule_filename)
  return _s;
}
inline const std::string& CPlayer_GetOwnedGames_Response_Game::_internal_capsule_filename() const {
  return capsule_filename_.Get();
}
inline void CPlayer_GetOwnedGames_Response_Game::_internal_set_capsule_filename(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  capsule_filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CPlayer_GetOwnedGames_Response_Game::_internal_mutable_capsule_filename() {
  _has_bits_[0] |= 0x00000004u;
  return capsule_filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CPlayer_GetOwnedGames_Response_Game::release_capsule_filename() {
  // @@protoc_insertion_point(field_release:CPlayer_GetOwnedGames_Response.Game.capsule_filename)
  if (!_internal_has_capsule_filename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = capsule_filename_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (capsule_filename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    capsule_filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CPlayer_GetOwnedGames_Response_Game::set_allocated_capsule_filename(std::string* capsule_filename) {
  if (capsule_filename != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  capsule_filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), capsule_filename,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (capsule_filename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    capsule_filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CPlayer_GetOwnedGames_Response.Game.capsule_filename)
}

// optional string sort_as = 13;
inline bool CPlayer_GetOwnedGames_Response_Game::_internal_has_sort_as() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CPlayer_GetOwnedGames_Response_Game::has_sort_as() const {
  return _internal_has_sort_as();
}
inline void CPlayer_GetOwnedGames_Response_Game::clear_sort_as() {
  sort_as_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CPlayer_GetOwnedGames_Response_Game::sort_as() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetOwnedGames_Response.Game.sort_as)
  return _internal_sort_as();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CPlayer_GetOwnedGames_Response_Game::set_sort_as(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 sort_as_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CPlayer_GetOwnedGames_Response.Game.sort_as)
}
inline std::string* CPlayer_GetOwnedGames_Response_Game::mutable_sort_as() {
  std::string* _s = _internal_mutable_sort_as();
  // @@protoc_insertion_point(field_mutable:CPlayer_GetOwnedGames_Response.Game.sort_as)
  return _s;
}
inline const std::string& CPlayer_GetOwnedGames_Response_Game::_internal_sort_as() const {
  return sort_as_.Get();
}
inline void CPlayer_GetOwnedGames_Response_Game::_internal_set_sort_as(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  sort_as_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CPlayer_GetOwnedGames_Response_Game::_internal_mutable_sort_as() {
  _has_bits_[0] |= 0x00000008u;
  return sort_as_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CPlayer_GetOwnedGames_Response_Game::release_sort_as() {
  // @@protoc_insertion_point(field_release:CPlayer_GetOwnedGames_Response.Game.sort_as)
  if (!_internal_has_sort_as()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = sort_as_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sort_as_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sort_as_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CPlayer_GetOwnedGames_Response_Game::set_allocated_sort_as(std::string* sort_as) {
  if (sort_as != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  sort_as_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sort_as,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sort_as_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sort_as_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CPlayer_GetOwnedGames_Response.Game.sort_as)
}

// optional bool has_workshop = 14;
inline bool CPlayer_GetOwnedGames_Response_Game::_internal_has_has_workshop() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CPlayer_GetOwnedGames_Response_Game::has_has_workshop() const {
  return _internal_has_has_workshop();
}
inline void CPlayer_GetOwnedGames_Response_Game::clear_has_workshop() {
  has_workshop_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool CPlayer_GetOwnedGames_Response_Game::_internal_has_workshop() const {
  return has_workshop_;
}
inline bool CPlayer_GetOwnedGames_Response_Game::has_workshop() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetOwnedGames_Response.Game.has_workshop)
  return _internal_has_workshop();
}
inline void CPlayer_GetOwnedGames_Response_Game::_internal_set_has_workshop(bool value) {
  _has_bits_[0] |= 0x00001000u;
  has_workshop_ = value;
}
inline void CPlayer_GetOwnedGames_Response_Game::set_has_workshop(bool value) {
  _internal_set_has_workshop(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetOwnedGames_Response.Game.has_workshop)
}

// optional bool has_market = 15;
inline bool CPlayer_GetOwnedGames_Response_Game::_internal_has_has_market() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CPlayer_GetOwnedGames_Response_Game::has_has_market() const {
  return _internal_has_has_market();
}
inline void CPlayer_GetOwnedGames_Response_Game::clear_has_market() {
  has_market_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool CPlayer_GetOwnedGames_Response_Game::_internal_has_market() const {
  return has_market_;
}
inline bool CPlayer_GetOwnedGames_Response_Game::has_market() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetOwnedGames_Response.Game.has_market)
  return _internal_has_market();
}
inline void CPlayer_GetOwnedGames_Response_Game::_internal_set_has_market(bool value) {
  _has_bits_[0] |= 0x00002000u;
  has_market_ = value;
}
inline void CPlayer_GetOwnedGames_Response_Game::set_has_market(bool value) {
  _internal_set_has_market(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetOwnedGames_Response.Game.has_market)
}

// optional bool has_dlc = 16;
inline bool CPlayer_GetOwnedGames_Response_Game::_internal_has_has_dlc() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CPlayer_GetOwnedGames_Response_Game::has_has_dlc() const {
  return _internal_has_has_dlc();
}
inline void CPlayer_GetOwnedGames_Response_Game::clear_has_dlc() {
  has_dlc_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool CPlayer_GetOwnedGames_Response_Game::_internal_has_dlc() const {
  return has_dlc_;
}
inline bool CPlayer_GetOwnedGames_Response_Game::has_dlc() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetOwnedGames_Response.Game.has_dlc)
  return _internal_has_dlc();
}
inline void CPlayer_GetOwnedGames_Response_Game::_internal_set_has_dlc(bool value) {
  _has_bits_[0] |= 0x00004000u;
  has_dlc_ = value;
}
inline void CPlayer_GetOwnedGames_Response_Game::set_has_dlc(bool value) {
  _internal_set_has_dlc(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetOwnedGames_Response.Game.has_dlc)
}

// optional bool has_leaderboards = 17;
inline bool CPlayer_GetOwnedGames_Response_Game::_internal_has_has_leaderboards() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CPlayer_GetOwnedGames_Response_Game::has_has_leaderboards() const {
  return _internal_has_has_leaderboards();
}
inline void CPlayer_GetOwnedGames_Response_Game::clear_has_leaderboards() {
  has_leaderboards_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool CPlayer_GetOwnedGames_Response_Game::_internal_has_leaderboards() const {
  return has_leaderboards_;
}
inline bool CPlayer_GetOwnedGames_Response_Game::has_leaderboards() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetOwnedGames_Response.Game.has_leaderboards)
  return _internal_has_leaderboards();
}
inline void CPlayer_GetOwnedGames_Response_Game::_internal_set_has_leaderboards(bool value) {
  _has_bits_[0] |= 0x00008000u;
  has_leaderboards_ = value;
}
inline void CPlayer_GetOwnedGames_Response_Game::set_has_leaderboards(bool value) {
  _internal_set_has_leaderboards(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetOwnedGames_Response.Game.has_leaderboards)
}

// repeated uint32 content_descriptorids = 18;
inline int CPlayer_GetOwnedGames_Response_Game::_internal_content_descriptorids_size() const {
  return content_descriptorids_.size();
}
inline int CPlayer_GetOwnedGames_Response_Game::content_descriptorids_size() const {
  return _internal_content_descriptorids_size();
}
inline void CPlayer_GetOwnedGames_Response_Game::clear_content_descriptorids() {
  content_descriptorids_.Clear();
}
inline uint32_t CPlayer_GetOwnedGames_Response_Game::_internal_content_descriptorids(int index) const {
  return content_descriptorids_.Get(index);
}
inline uint32_t CPlayer_GetOwnedGames_Response_Game::content_descriptorids(int index) const {
  // @@protoc_insertion_point(field_get:CPlayer_GetOwnedGames_Response.Game.content_descriptorids)
  return _internal_content_descriptorids(index);
}
inline void CPlayer_GetOwnedGames_Response_Game::set_content_descriptorids(int index, uint32_t value) {
  content_descriptorids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CPlayer_GetOwnedGames_Response.Game.content_descriptorids)
}
inline void CPlayer_GetOwnedGames_Response_Game::_internal_add_content_descriptorids(uint32_t value) {
  content_descriptorids_.Add(value);
}
inline void CPlayer_GetOwnedGames_Response_Game::add_content_descriptorids(uint32_t value) {
  _internal_add_content_descriptorids(value);
  // @@protoc_insertion_point(field_add:CPlayer_GetOwnedGames_Response.Game.content_descriptorids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CPlayer_GetOwnedGames_Response_Game::_internal_content_descriptorids() const {
  return content_descriptorids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CPlayer_GetOwnedGames_Response_Game::content_descriptorids() const {
  // @@protoc_insertion_point(field_list:CPlayer_GetOwnedGames_Response.Game.content_descriptorids)
  return _internal_content_descriptorids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CPlayer_GetOwnedGames_Response_Game::_internal_mutable_content_descriptorids() {
  return &content_descriptorids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CPlayer_GetOwnedGames_Response_Game::mutable_content_descriptorids() {
  // @@protoc_insertion_point(field_mutable_list:CPlayer_GetOwnedGames_Response.Game.content_descriptorids)
  return _internal_mutable_content_descriptorids();
}

// optional int32 playtime_disconnected = 19;
inline bool CPlayer_GetOwnedGames_Response_Game::_internal_has_playtime_disconnected() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CPlayer_GetOwnedGames_Response_Game::has_playtime_disconnected() const {
  return _internal_has_playtime_disconnected();
}
inline void CPlayer_GetOwnedGames_Response_Game::clear_playtime_disconnected() {
  playtime_disconnected_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline int32_t CPlayer_GetOwnedGames_Response_Game::_internal_playtime_disconnected() const {
  return playtime_disconnected_;
}
inline int32_t CPlayer_GetOwnedGames_Response_Game::playtime_disconnected() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetOwnedGames_Response.Game.playtime_disconnected)
  return _internal_playtime_disconnected();
}
inline void CPlayer_GetOwnedGames_Response_Game::_internal_set_playtime_disconnected(int32_t value) {
  _has_bits_[0] |= 0x00010000u;
  playtime_disconnected_ = value;
}
inline void CPlayer_GetOwnedGames_Response_Game::set_playtime_disconnected(int32_t value) {
  _internal_set_playtime_disconnected(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetOwnedGames_Response.Game.playtime_disconnected)
}

// -------------------------------------------------------------------

// CPlayer_GetOwnedGames_Response

// optional uint32 game_count = 1;
inline bool CPlayer_GetOwnedGames_Response::_internal_has_game_count() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPlayer_GetOwnedGames_Response::has_game_count() const {
  return _internal_has_game_count();
}
inline void CPlayer_GetOwnedGames_Response::clear_game_count() {
  game_count_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CPlayer_GetOwnedGames_Response::_internal_game_count() const {
  return game_count_;
}
inline uint32_t CPlayer_GetOwnedGames_Response::game_count() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetOwnedGames_Response.game_count)
  return _internal_game_count();
}
inline void CPlayer_GetOwnedGames_Response::_internal_set_game_count(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  game_count_ = value;
}
inline void CPlayer_GetOwnedGames_Response::set_game_count(uint32_t value) {
  _internal_set_game_count(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetOwnedGames_Response.game_count)
}

// repeated .CPlayer_GetOwnedGames_Response.Game games = 2;
inline int CPlayer_GetOwnedGames_Response::_internal_games_size() const {
  return games_.size();
}
inline int CPlayer_GetOwnedGames_Response::games_size() const {
  return _internal_games_size();
}
inline void CPlayer_GetOwnedGames_Response::clear_games() {
  games_.Clear();
}
inline ::CPlayer_GetOwnedGames_Response_Game* CPlayer_GetOwnedGames_Response::mutable_games(int index) {
  // @@protoc_insertion_point(field_mutable:CPlayer_GetOwnedGames_Response.games)
  return games_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetOwnedGames_Response_Game >*
CPlayer_GetOwnedGames_Response::mutable_games() {
  // @@protoc_insertion_point(field_mutable_list:CPlayer_GetOwnedGames_Response.games)
  return &games_;
}
inline const ::CPlayer_GetOwnedGames_Response_Game& CPlayer_GetOwnedGames_Response::_internal_games(int index) const {
  return games_.Get(index);
}
inline const ::CPlayer_GetOwnedGames_Response_Game& CPlayer_GetOwnedGames_Response::games(int index) const {
  // @@protoc_insertion_point(field_get:CPlayer_GetOwnedGames_Response.games)
  return _internal_games(index);
}
inline ::CPlayer_GetOwnedGames_Response_Game* CPlayer_GetOwnedGames_Response::_internal_add_games() {
  return games_.Add();
}
inline ::CPlayer_GetOwnedGames_Response_Game* CPlayer_GetOwnedGames_Response::add_games() {
  ::CPlayer_GetOwnedGames_Response_Game* _add = _internal_add_games();
  // @@protoc_insertion_point(field_add:CPlayer_GetOwnedGames_Response.games)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetOwnedGames_Response_Game >&
CPlayer_GetOwnedGames_Response::games() const {
  // @@protoc_insertion_point(field_list:CPlayer_GetOwnedGames_Response.games)
  return games_;
}

// -------------------------------------------------------------------

// CPlayer_GetPlayNext_Request

// optional uint32 max_age_seconds = 1;
inline bool CPlayer_GetPlayNext_Request::_internal_has_max_age_seconds() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPlayer_GetPlayNext_Request::has_max_age_seconds() const {
  return _internal_has_max_age_seconds();
}
inline void CPlayer_GetPlayNext_Request::clear_max_age_seconds() {
  max_age_seconds_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CPlayer_GetPlayNext_Request::_internal_max_age_seconds() const {
  return max_age_seconds_;
}
inline uint32_t CPlayer_GetPlayNext_Request::max_age_seconds() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetPlayNext_Request.max_age_seconds)
  return _internal_max_age_seconds();
}
inline void CPlayer_GetPlayNext_Request::_internal_set_max_age_seconds(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  max_age_seconds_ = value;
}
inline void CPlayer_GetPlayNext_Request::set_max_age_seconds(uint32_t value) {
  _internal_set_max_age_seconds(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetPlayNext_Request.max_age_seconds)
}

// repeated uint32 ignore_appids = 2;
inline int CPlayer_GetPlayNext_Request::_internal_ignore_appids_size() const {
  return ignore_appids_.size();
}
inline int CPlayer_GetPlayNext_Request::ignore_appids_size() const {
  return _internal_ignore_appids_size();
}
inline void CPlayer_GetPlayNext_Request::clear_ignore_appids() {
  ignore_appids_.Clear();
}
inline uint32_t CPlayer_GetPlayNext_Request::_internal_ignore_appids(int index) const {
  return ignore_appids_.Get(index);
}
inline uint32_t CPlayer_GetPlayNext_Request::ignore_appids(int index) const {
  // @@protoc_insertion_point(field_get:CPlayer_GetPlayNext_Request.ignore_appids)
  return _internal_ignore_appids(index);
}
inline void CPlayer_GetPlayNext_Request::set_ignore_appids(int index, uint32_t value) {
  ignore_appids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CPlayer_GetPlayNext_Request.ignore_appids)
}
inline void CPlayer_GetPlayNext_Request::_internal_add_ignore_appids(uint32_t value) {
  ignore_appids_.Add(value);
}
inline void CPlayer_GetPlayNext_Request::add_ignore_appids(uint32_t value) {
  _internal_add_ignore_appids(value);
  // @@protoc_insertion_point(field_add:CPlayer_GetPlayNext_Request.ignore_appids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CPlayer_GetPlayNext_Request::_internal_ignore_appids() const {
  return ignore_appids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CPlayer_GetPlayNext_Request::ignore_appids() const {
  // @@protoc_insertion_point(field_list:CPlayer_GetPlayNext_Request.ignore_appids)
  return _internal_ignore_appids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CPlayer_GetPlayNext_Request::_internal_mutable_ignore_appids() {
  return &ignore_appids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CPlayer_GetPlayNext_Request::mutable_ignore_appids() {
  // @@protoc_insertion_point(field_mutable_list:CPlayer_GetPlayNext_Request.ignore_appids)
  return _internal_mutable_ignore_appids();
}

// -------------------------------------------------------------------

// CPlayer_GetPlayNext_Response

// optional uint32 last_update_time = 1;
inline bool CPlayer_GetPlayNext_Response::_internal_has_last_update_time() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPlayer_GetPlayNext_Response::has_last_update_time() const {
  return _internal_has_last_update_time();
}
inline void CPlayer_GetPlayNext_Response::clear_last_update_time() {
  last_update_time_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CPlayer_GetPlayNext_Response::_internal_last_update_time() const {
  return last_update_time_;
}
inline uint32_t CPlayer_GetPlayNext_Response::last_update_time() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetPlayNext_Response.last_update_time)
  return _internal_last_update_time();
}
inline void CPlayer_GetPlayNext_Response::_internal_set_last_update_time(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  last_update_time_ = value;
}
inline void CPlayer_GetPlayNext_Response::set_last_update_time(uint32_t value) {
  _internal_set_last_update_time(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetPlayNext_Response.last_update_time)
}

// repeated uint32 appids = 2;
inline int CPlayer_GetPlayNext_Response::_internal_appids_size() const {
  return appids_.size();
}
inline int CPlayer_GetPlayNext_Response::appids_size() const {
  return _internal_appids_size();
}
inline void CPlayer_GetPlayNext_Response::clear_appids() {
  appids_.Clear();
}
inline uint32_t CPlayer_GetPlayNext_Response::_internal_appids(int index) const {
  return appids_.Get(index);
}
inline uint32_t CPlayer_GetPlayNext_Response::appids(int index) const {
  // @@protoc_insertion_point(field_get:CPlayer_GetPlayNext_Response.appids)
  return _internal_appids(index);
}
inline void CPlayer_GetPlayNext_Response::set_appids(int index, uint32_t value) {
  appids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CPlayer_GetPlayNext_Response.appids)
}
inline void CPlayer_GetPlayNext_Response::_internal_add_appids(uint32_t value) {
  appids_.Add(value);
}
inline void CPlayer_GetPlayNext_Response::add_appids(uint32_t value) {
  _internal_add_appids(value);
  // @@protoc_insertion_point(field_add:CPlayer_GetPlayNext_Response.appids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CPlayer_GetPlayNext_Response::_internal_appids() const {
  return appids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CPlayer_GetPlayNext_Response::appids() const {
  // @@protoc_insertion_point(field_list:CPlayer_GetPlayNext_Response.appids)
  return _internal_appids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CPlayer_GetPlayNext_Response::_internal_mutable_appids() {
  return &appids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CPlayer_GetPlayNext_Response::mutable_appids() {
  // @@protoc_insertion_point(field_mutable_list:CPlayer_GetPlayNext_Response.appids)
  return _internal_mutable_appids();
}

// -------------------------------------------------------------------

// CPlayer_GetFriendsGameplayInfo_Request

// optional uint32 appid = 1;
inline bool CPlayer_GetFriendsGameplayInfo_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPlayer_GetFriendsGameplayInfo_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CPlayer_GetFriendsGameplayInfo_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CPlayer_GetFriendsGameplayInfo_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CPlayer_GetFriendsGameplayInfo_Request::appid() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetFriendsGameplayInfo_Request.appid)
  return _internal_appid();
}
inline void CPlayer_GetFriendsGameplayInfo_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  appid_ = value;
}
inline void CPlayer_GetFriendsGameplayInfo_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetFriendsGameplayInfo_Request.appid)
}

// -------------------------------------------------------------------

// CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo

// optional fixed64 steamid = 1;
inline bool CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::has_steamid() const {
  return _internal_has_steamid();
}
inline void CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::steamid() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo.steamid)
  return _internal_steamid();
}
inline void CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
}
inline void CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo.steamid)
}

// optional uint32 minutes_played = 2;
inline bool CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::_internal_has_minutes_played() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::has_minutes_played() const {
  return _internal_has_minutes_played();
}
inline void CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::clear_minutes_played() {
  minutes_played_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::_internal_minutes_played() const {
  return minutes_played_;
}
inline uint32_t CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::minutes_played() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo.minutes_played)
  return _internal_minutes_played();
}
inline void CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::_internal_set_minutes_played(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  minutes_played_ = value;
}
inline void CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::set_minutes_played(uint32_t value) {
  _internal_set_minutes_played(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo.minutes_played)
}

// optional uint32 minutes_played_forever = 3;
inline bool CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::_internal_has_minutes_played_forever() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::has_minutes_played_forever() const {
  return _internal_has_minutes_played_forever();
}
inline void CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::clear_minutes_played_forever() {
  minutes_played_forever_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::_internal_minutes_played_forever() const {
  return minutes_played_forever_;
}
inline uint32_t CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::minutes_played_forever() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo.minutes_played_forever)
  return _internal_minutes_played_forever();
}
inline void CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::_internal_set_minutes_played_forever(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  minutes_played_forever_ = value;
}
inline void CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::set_minutes_played_forever(uint32_t value) {
  _internal_set_minutes_played_forever(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo.minutes_played_forever)
}

// -------------------------------------------------------------------

// CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo

// optional fixed64 steamid = 1;
inline bool CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::has_steamid() const {
  return _internal_has_steamid();
}
inline void CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::steamid() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo.steamid)
  return _internal_steamid();
}
inline void CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
}
inline void CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo.steamid)
}

// optional uint32 minutes_played = 2;
inline bool CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::_internal_has_minutes_played() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::has_minutes_played() const {
  return _internal_has_minutes_played();
}
inline void CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::clear_minutes_played() {
  minutes_played_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::_internal_minutes_played() const {
  return minutes_played_;
}
inline uint32_t CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::minutes_played() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo.minutes_played)
  return _internal_minutes_played();
}
inline void CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::_internal_set_minutes_played(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  minutes_played_ = value;
}
inline void CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::set_minutes_played(uint32_t value) {
  _internal_set_minutes_played(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo.minutes_played)
}

// optional uint32 minutes_played_forever = 3;
inline bool CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::_internal_has_minutes_played_forever() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::has_minutes_played_forever() const {
  return _internal_has_minutes_played_forever();
}
inline void CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::clear_minutes_played_forever() {
  minutes_played_forever_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::_internal_minutes_played_forever() const {
  return minutes_played_forever_;
}
inline uint32_t CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::minutes_played_forever() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo.minutes_played_forever)
  return _internal_minutes_played_forever();
}
inline void CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::_internal_set_minutes_played_forever(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  minutes_played_forever_ = value;
}
inline void CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::set_minutes_played_forever(uint32_t value) {
  _internal_set_minutes_played_forever(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo.minutes_played_forever)
}

// optional bool in_wishlist = 4;
inline bool CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::_internal_has_in_wishlist() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::has_in_wishlist() const {
  return _internal_has_in_wishlist();
}
inline void CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::clear_in_wishlist() {
  in_wishlist_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::_internal_in_wishlist() const {
  return in_wishlist_;
}
inline bool CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::in_wishlist() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo.in_wishlist)
  return _internal_in_wishlist();
}
inline void CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::_internal_set_in_wishlist(bool value) {
  _has_bits_[0] |= 0x00000008u;
  in_wishlist_ = value;
}
inline void CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::set_in_wishlist(bool value) {
  _internal_set_in_wishlist(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo.in_wishlist)
}

// optional bool owned = 5;
inline bool CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::_internal_has_owned() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::has_owned() const {
  return _internal_has_owned();
}
inline void CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::clear_owned() {
  owned_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::_internal_owned() const {
  return owned_;
}
inline bool CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::owned() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo.owned)
  return _internal_owned();
}
inline void CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::_internal_set_owned(bool value) {
  _has_bits_[0] |= 0x00000010u;
  owned_ = value;
}
inline void CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::set_owned(bool value) {
  _internal_set_owned(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo.owned)
}

// -------------------------------------------------------------------

// CPlayer_GetFriendsGameplayInfo_Response

// optional .CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo your_info = 1;
inline bool CPlayer_GetFriendsGameplayInfo_Response::_internal_has_your_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || your_info_ != nullptr);
  return value;
}
inline bool CPlayer_GetFriendsGameplayInfo_Response::has_your_info() const {
  return _internal_has_your_info();
}
inline void CPlayer_GetFriendsGameplayInfo_Response::clear_your_info() {
  if (your_info_ != nullptr) your_info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo& CPlayer_GetFriendsGameplayInfo_Response::_internal_your_info() const {
  const ::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo* p = your_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo&>(
      ::_CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo_default_instance_);
}
inline const ::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo& CPlayer_GetFriendsGameplayInfo_Response::your_info() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetFriendsGameplayInfo_Response.your_info)
  return _internal_your_info();
}
inline void CPlayer_GetFriendsGameplayInfo_Response::unsafe_arena_set_allocated_your_info(
    ::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo* your_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(your_info_);
  }
  your_info_ = your_info;
  if (your_info) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CPlayer_GetFriendsGameplayInfo_Response.your_info)
}
inline ::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo* CPlayer_GetFriendsGameplayInfo_Response::release_your_info() {
  _has_bits_[0] &= ~0x00000001u;
  ::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo* temp = your_info_;
  your_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo* CPlayer_GetFriendsGameplayInfo_Response::unsafe_arena_release_your_info() {
  // @@protoc_insertion_point(field_release:CPlayer_GetFriendsGameplayInfo_Response.your_info)
  _has_bits_[0] &= ~0x00000001u;
  ::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo* temp = your_info_;
  your_info_ = nullptr;
  return temp;
}
inline ::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo* CPlayer_GetFriendsGameplayInfo_Response::_internal_mutable_your_info() {
  _has_bits_[0] |= 0x00000001u;
  if (your_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo>(GetArenaForAllocation());
    your_info_ = p;
  }
  return your_info_;
}
inline ::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo* CPlayer_GetFriendsGameplayInfo_Response::mutable_your_info() {
  ::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo* _msg = _internal_mutable_your_info();
  // @@protoc_insertion_point(field_mutable:CPlayer_GetFriendsGameplayInfo_Response.your_info)
  return _msg;
}
inline void CPlayer_GetFriendsGameplayInfo_Response::set_allocated_your_info(::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo* your_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete your_info_;
  }
  if (your_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo>::GetOwningArena(your_info);
    if (message_arena != submessage_arena) {
      your_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, your_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  your_info_ = your_info;
  // @@protoc_insertion_point(field_set_allocated:CPlayer_GetFriendsGameplayInfo_Response.your_info)
}

// repeated .CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo in_game = 2;
inline int CPlayer_GetFriendsGameplayInfo_Response::_internal_in_game_size() const {
  return in_game_.size();
}
inline int CPlayer_GetFriendsGameplayInfo_Response::in_game_size() const {
  return _internal_in_game_size();
}
inline void CPlayer_GetFriendsGameplayInfo_Response::clear_in_game() {
  in_game_.Clear();
}
inline ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo* CPlayer_GetFriendsGameplayInfo_Response::mutable_in_game(int index) {
  // @@protoc_insertion_point(field_mutable:CPlayer_GetFriendsGameplayInfo_Response.in_game)
  return in_game_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo >*
CPlayer_GetFriendsGameplayInfo_Response::mutable_in_game() {
  // @@protoc_insertion_point(field_mutable_list:CPlayer_GetFriendsGameplayInfo_Response.in_game)
  return &in_game_;
}
inline const ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo& CPlayer_GetFriendsGameplayInfo_Response::_internal_in_game(int index) const {
  return in_game_.Get(index);
}
inline const ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo& CPlayer_GetFriendsGameplayInfo_Response::in_game(int index) const {
  // @@protoc_insertion_point(field_get:CPlayer_GetFriendsGameplayInfo_Response.in_game)
  return _internal_in_game(index);
}
inline ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo* CPlayer_GetFriendsGameplayInfo_Response::_internal_add_in_game() {
  return in_game_.Add();
}
inline ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo* CPlayer_GetFriendsGameplayInfo_Response::add_in_game() {
  ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo* _add = _internal_add_in_game();
  // @@protoc_insertion_point(field_add:CPlayer_GetFriendsGameplayInfo_Response.in_game)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo >&
CPlayer_GetFriendsGameplayInfo_Response::in_game() const {
  // @@protoc_insertion_point(field_list:CPlayer_GetFriendsGameplayInfo_Response.in_game)
  return in_game_;
}

// repeated .CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo played_recently = 3;
inline int CPlayer_GetFriendsGameplayInfo_Response::_internal_played_recently_size() const {
  return played_recently_.size();
}
inline int CPlayer_GetFriendsGameplayInfo_Response::played_recently_size() const {
  return _internal_played_recently_size();
}
inline void CPlayer_GetFriendsGameplayInfo_Response::clear_played_recently() {
  played_recently_.Clear();
}
inline ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo* CPlayer_GetFriendsGameplayInfo_Response::mutable_played_recently(int index) {
  // @@protoc_insertion_point(field_mutable:CPlayer_GetFriendsGameplayInfo_Response.played_recently)
  return played_recently_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo >*
CPlayer_GetFriendsGameplayInfo_Response::mutable_played_recently() {
  // @@protoc_insertion_point(field_mutable_list:CPlayer_GetFriendsGameplayInfo_Response.played_recently)
  return &played_recently_;
}
inline const ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo& CPlayer_GetFriendsGameplayInfo_Response::_internal_played_recently(int index) const {
  return played_recently_.Get(index);
}
inline const ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo& CPlayer_GetFriendsGameplayInfo_Response::played_recently(int index) const {
  // @@protoc_insertion_point(field_get:CPlayer_GetFriendsGameplayInfo_Response.played_recently)
  return _internal_played_recently(index);
}
inline ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo* CPlayer_GetFriendsGameplayInfo_Response::_internal_add_played_recently() {
  return played_recently_.Add();
}
inline ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo* CPlayer_GetFriendsGameplayInfo_Response::add_played_recently() {
  ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo* _add = _internal_add_played_recently();
  // @@protoc_insertion_point(field_add:CPlayer_GetFriendsGameplayInfo_Response.played_recently)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo >&
CPlayer_GetFriendsGameplayInfo_Response::played_recently() const {
  // @@protoc_insertion_point(field_list:CPlayer_GetFriendsGameplayInfo_Response.played_recently)
  return played_recently_;
}

// repeated .CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo played_ever = 4;
inline int CPlayer_GetFriendsGameplayInfo_Response::_internal_played_ever_size() const {
  return played_ever_.size();
}
inline int CPlayer_GetFriendsGameplayInfo_Response::played_ever_size() const {
  return _internal_played_ever_size();
}
inline void CPlayer_GetFriendsGameplayInfo_Response::clear_played_ever() {
  played_ever_.Clear();
}
inline ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo* CPlayer_GetFriendsGameplayInfo_Response::mutable_played_ever(int index) {
  // @@protoc_insertion_point(field_mutable:CPlayer_GetFriendsGameplayInfo_Response.played_ever)
  return played_ever_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo >*
CPlayer_GetFriendsGameplayInfo_Response::mutable_played_ever() {
  // @@protoc_insertion_point(field_mutable_list:CPlayer_GetFriendsGameplayInfo_Response.played_ever)
  return &played_ever_;
}
inline const ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo& CPlayer_GetFriendsGameplayInfo_Response::_internal_played_ever(int index) const {
  return played_ever_.Get(index);
}
inline const ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo& CPlayer_GetFriendsGameplayInfo_Response::played_ever(int index) const {
  // @@protoc_insertion_point(field_get:CPlayer_GetFriendsGameplayInfo_Response.played_ever)
  return _internal_played_ever(index);
}
inline ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo* CPlayer_GetFriendsGameplayInfo_Response::_internal_add_played_ever() {
  return played_ever_.Add();
}
inline ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo* CPlayer_GetFriendsGameplayInfo_Response::add_played_ever() {
  ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo* _add = _internal_add_played_ever();
  // @@protoc_insertion_point(field_add:CPlayer_GetFriendsGameplayInfo_Response.played_ever)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo >&
CPlayer_GetFriendsGameplayInfo_Response::played_ever() const {
  // @@protoc_insertion_point(field_list:CPlayer_GetFriendsGameplayInfo_Response.played_ever)
  return played_ever_;
}

// repeated .CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo owns = 5;
inline int CPlayer_GetFriendsGameplayInfo_Response::_internal_owns_size() const {
  return owns_.size();
}
inline int CPlayer_GetFriendsGameplayInfo_Response::owns_size() const {
  return _internal_owns_size();
}
inline void CPlayer_GetFriendsGameplayInfo_Response::clear_owns() {
  owns_.Clear();
}
inline ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo* CPlayer_GetFriendsGameplayInfo_Response::mutable_owns(int index) {
  // @@protoc_insertion_point(field_mutable:CPlayer_GetFriendsGameplayInfo_Response.owns)
  return owns_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo >*
CPlayer_GetFriendsGameplayInfo_Response::mutable_owns() {
  // @@protoc_insertion_point(field_mutable_list:CPlayer_GetFriendsGameplayInfo_Response.owns)
  return &owns_;
}
inline const ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo& CPlayer_GetFriendsGameplayInfo_Response::_internal_owns(int index) const {
  return owns_.Get(index);
}
inline const ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo& CPlayer_GetFriendsGameplayInfo_Response::owns(int index) const {
  // @@protoc_insertion_point(field_get:CPlayer_GetFriendsGameplayInfo_Response.owns)
  return _internal_owns(index);
}
inline ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo* CPlayer_GetFriendsGameplayInfo_Response::_internal_add_owns() {
  return owns_.Add();
}
inline ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo* CPlayer_GetFriendsGameplayInfo_Response::add_owns() {
  ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo* _add = _internal_add_owns();
  // @@protoc_insertion_point(field_add:CPlayer_GetFriendsGameplayInfo_Response.owns)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo >&
CPlayer_GetFriendsGameplayInfo_Response::owns() const {
  // @@protoc_insertion_point(field_list:CPlayer_GetFriendsGameplayInfo_Response.owns)
  return owns_;
}

// repeated .CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo in_wishlist = 6;
inline int CPlayer_GetFriendsGameplayInfo_Response::_internal_in_wishlist_size() const {
  return in_wishlist_.size();
}
inline int CPlayer_GetFriendsGameplayInfo_Response::in_wishlist_size() const {
  return _internal_in_wishlist_size();
}
inline void CPlayer_GetFriendsGameplayInfo_Response::clear_in_wishlist() {
  in_wishlist_.Clear();
}
inline ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo* CPlayer_GetFriendsGameplayInfo_Response::mutable_in_wishlist(int index) {
  // @@protoc_insertion_point(field_mutable:CPlayer_GetFriendsGameplayInfo_Response.in_wishlist)
  return in_wishlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo >*
CPlayer_GetFriendsGameplayInfo_Response::mutable_in_wishlist() {
  // @@protoc_insertion_point(field_mutable_list:CPlayer_GetFriendsGameplayInfo_Response.in_wishlist)
  return &in_wishlist_;
}
inline const ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo& CPlayer_GetFriendsGameplayInfo_Response::_internal_in_wishlist(int index) const {
  return in_wishlist_.Get(index);
}
inline const ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo& CPlayer_GetFriendsGameplayInfo_Response::in_wishlist(int index) const {
  // @@protoc_insertion_point(field_get:CPlayer_GetFriendsGameplayInfo_Response.in_wishlist)
  return _internal_in_wishlist(index);
}
inline ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo* CPlayer_GetFriendsGameplayInfo_Response::_internal_add_in_wishlist() {
  return in_wishlist_.Add();
}
inline ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo* CPlayer_GetFriendsGameplayInfo_Response::add_in_wishlist() {
  ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo* _add = _internal_add_in_wishlist();
  // @@protoc_insertion_point(field_add:CPlayer_GetFriendsGameplayInfo_Response.in_wishlist)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo >&
CPlayer_GetFriendsGameplayInfo_Response::in_wishlist() const {
  // @@protoc_insertion_point(field_list:CPlayer_GetFriendsGameplayInfo_Response.in_wishlist)
  return in_wishlist_;
}

// -------------------------------------------------------------------

// CPlayer_GetGameBadgeLevels_Request

// optional uint32 appid = 1;
inline bool CPlayer_GetGameBadgeLevels_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPlayer_GetGameBadgeLevels_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CPlayer_GetGameBadgeLevels_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CPlayer_GetGameBadgeLevels_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CPlayer_GetGameBadgeLevels_Request::appid() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetGameBadgeLevels_Request.appid)
  return _internal_appid();
}
inline void CPlayer_GetGameBadgeLevels_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  appid_ = value;
}
inline void CPlayer_GetGameBadgeLevels_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetGameBadgeLevels_Request.appid)
}

// -------------------------------------------------------------------

// CPlayer_GetGameBadgeLevels_Response_Badge

// optional int32 level = 1;
inline bool CPlayer_GetGameBadgeLevels_Response_Badge::_internal_has_level() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPlayer_GetGameBadgeLevels_Response_Badge::has_level() const {
  return _internal_has_level();
}
inline void CPlayer_GetGameBadgeLevels_Response_Badge::clear_level() {
  level_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t CPlayer_GetGameBadgeLevels_Response_Badge::_internal_level() const {
  return level_;
}
inline int32_t CPlayer_GetGameBadgeLevels_Response_Badge::level() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetGameBadgeLevels_Response.Badge.level)
  return _internal_level();
}
inline void CPlayer_GetGameBadgeLevels_Response_Badge::_internal_set_level(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  level_ = value;
}
inline void CPlayer_GetGameBadgeLevels_Response_Badge::set_level(int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetGameBadgeLevels_Response.Badge.level)
}

// optional int32 series = 2;
inline bool CPlayer_GetGameBadgeLevels_Response_Badge::_internal_has_series() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPlayer_GetGameBadgeLevels_Response_Badge::has_series() const {
  return _internal_has_series();
}
inline void CPlayer_GetGameBadgeLevels_Response_Badge::clear_series() {
  series_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t CPlayer_GetGameBadgeLevels_Response_Badge::_internal_series() const {
  return series_;
}
inline int32_t CPlayer_GetGameBadgeLevels_Response_Badge::series() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetGameBadgeLevels_Response.Badge.series)
  return _internal_series();
}
inline void CPlayer_GetGameBadgeLevels_Response_Badge::_internal_set_series(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  series_ = value;
}
inline void CPlayer_GetGameBadgeLevels_Response_Badge::set_series(int32_t value) {
  _internal_set_series(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetGameBadgeLevels_Response.Badge.series)
}

// optional uint32 border_color = 3;
inline bool CPlayer_GetGameBadgeLevels_Response_Badge::_internal_has_border_color() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CPlayer_GetGameBadgeLevels_Response_Badge::has_border_color() const {
  return _internal_has_border_color();
}
inline void CPlayer_GetGameBadgeLevels_Response_Badge::clear_border_color() {
  border_color_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CPlayer_GetGameBadgeLevels_Response_Badge::_internal_border_color() const {
  return border_color_;
}
inline uint32_t CPlayer_GetGameBadgeLevels_Response_Badge::border_color() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetGameBadgeLevels_Response.Badge.border_color)
  return _internal_border_color();
}
inline void CPlayer_GetGameBadgeLevels_Response_Badge::_internal_set_border_color(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  border_color_ = value;
}
inline void CPlayer_GetGameBadgeLevels_Response_Badge::set_border_color(uint32_t value) {
  _internal_set_border_color(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetGameBadgeLevels_Response.Badge.border_color)
}

// -------------------------------------------------------------------

// CPlayer_GetGameBadgeLevels_Response

// optional uint32 player_level = 1;
inline bool CPlayer_GetGameBadgeLevels_Response::_internal_has_player_level() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPlayer_GetGameBadgeLevels_Response::has_player_level() const {
  return _internal_has_player_level();
}
inline void CPlayer_GetGameBadgeLevels_Response::clear_player_level() {
  player_level_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CPlayer_GetGameBadgeLevels_Response::_internal_player_level() const {
  return player_level_;
}
inline uint32_t CPlayer_GetGameBadgeLevels_Response::player_level() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetGameBadgeLevels_Response.player_level)
  return _internal_player_level();
}
inline void CPlayer_GetGameBadgeLevels_Response::_internal_set_player_level(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  player_level_ = value;
}
inline void CPlayer_GetGameBadgeLevels_Response::set_player_level(uint32_t value) {
  _internal_set_player_level(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetGameBadgeLevels_Response.player_level)
}

// repeated .CPlayer_GetGameBadgeLevels_Response.Badge badges = 2;
inline int CPlayer_GetGameBadgeLevels_Response::_internal_badges_size() const {
  return badges_.size();
}
inline int CPlayer_GetGameBadgeLevels_Response::badges_size() const {
  return _internal_badges_size();
}
inline void CPlayer_GetGameBadgeLevels_Response::clear_badges() {
  badges_.Clear();
}
inline ::CPlayer_GetGameBadgeLevels_Response_Badge* CPlayer_GetGameBadgeLevels_Response::mutable_badges(int index) {
  // @@protoc_insertion_point(field_mutable:CPlayer_GetGameBadgeLevels_Response.badges)
  return badges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetGameBadgeLevels_Response_Badge >*
CPlayer_GetGameBadgeLevels_Response::mutable_badges() {
  // @@protoc_insertion_point(field_mutable_list:CPlayer_GetGameBadgeLevels_Response.badges)
  return &badges_;
}
inline const ::CPlayer_GetGameBadgeLevels_Response_Badge& CPlayer_GetGameBadgeLevels_Response::_internal_badges(int index) const {
  return badges_.Get(index);
}
inline const ::CPlayer_GetGameBadgeLevels_Response_Badge& CPlayer_GetGameBadgeLevels_Response::badges(int index) const {
  // @@protoc_insertion_point(field_get:CPlayer_GetGameBadgeLevels_Response.badges)
  return _internal_badges(index);
}
inline ::CPlayer_GetGameBadgeLevels_Response_Badge* CPlayer_GetGameBadgeLevels_Response::_internal_add_badges() {
  return badges_.Add();
}
inline ::CPlayer_GetGameBadgeLevels_Response_Badge* CPlayer_GetGameBadgeLevels_Response::add_badges() {
  ::CPlayer_GetGameBadgeLevels_Response_Badge* _add = _internal_add_badges();
  // @@protoc_insertion_point(field_add:CPlayer_GetGameBadgeLevels_Response.badges)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetGameBadgeLevels_Response_Badge >&
CPlayer_GetGameBadgeLevels_Response::badges() const {
  // @@protoc_insertion_point(field_list:CPlayer_GetGameBadgeLevels_Response.badges)
  return badges_;
}

// -------------------------------------------------------------------

// CPlayer_GetProfileBackground_Request

// optional fixed64 steamid = 1 [(.description) = "The player we\'re asking about"];
inline bool CPlayer_GetProfileBackground_Request::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPlayer_GetProfileBackground_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CPlayer_GetProfileBackground_Request::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CPlayer_GetProfileBackground_Request::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CPlayer_GetProfileBackground_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetProfileBackground_Request.steamid)
  return _internal_steamid();
}
inline void CPlayer_GetProfileBackground_Request::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  steamid_ = value;
}
inline void CPlayer_GetProfileBackground_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetProfileBackground_Request.steamid)
}

// optional string language = 2;
inline bool CPlayer_GetProfileBackground_Request::_internal_has_language() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPlayer_GetProfileBackground_Request::has_language() const {
  return _internal_has_language();
}
inline void CPlayer_GetProfileBackground_Request::clear_language() {
  language_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CPlayer_GetProfileBackground_Request::language() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetProfileBackground_Request.language)
  return _internal_language();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CPlayer_GetProfileBackground_Request::set_language(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CPlayer_GetProfileBackground_Request.language)
}
inline std::string* CPlayer_GetProfileBackground_Request::mutable_language() {
  std::string* _s = _internal_mutable_language();
  // @@protoc_insertion_point(field_mutable:CPlayer_GetProfileBackground_Request.language)
  return _s;
}
inline const std::string& CPlayer_GetProfileBackground_Request::_internal_language() const {
  return language_.Get();
}
inline void CPlayer_GetProfileBackground_Request::_internal_set_language(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CPlayer_GetProfileBackground_Request::_internal_mutable_language() {
  _has_bits_[0] |= 0x00000001u;
  return language_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CPlayer_GetProfileBackground_Request::release_language() {
  // @@protoc_insertion_point(field_release:CPlayer_GetProfileBackground_Request.language)
  if (!_internal_has_language()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = language_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (language_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CPlayer_GetProfileBackground_Request::set_allocated_language(std::string* language) {
  if (language != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  language_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (language_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CPlayer_GetProfileBackground_Request.language)
}

// -------------------------------------------------------------------

// ProfileItem_ProfileColor

// optional string style_name = 1 [(.description) = "EProfileColorStyle string version"];
inline bool ProfileItem_ProfileColor::_internal_has_style_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProfileItem_ProfileColor::has_style_name() const {
  return _internal_has_style_name();
}
inline void ProfileItem_ProfileColor::clear_style_name() {
  style_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProfileItem_ProfileColor::style_name() const {
  // @@protoc_insertion_point(field_get:ProfileItem.ProfileColor.style_name)
  return _internal_style_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProfileItem_ProfileColor::set_style_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 style_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProfileItem.ProfileColor.style_name)
}
inline std::string* ProfileItem_ProfileColor::mutable_style_name() {
  std::string* _s = _internal_mutable_style_name();
  // @@protoc_insertion_point(field_mutable:ProfileItem.ProfileColor.style_name)
  return _s;
}
inline const std::string& ProfileItem_ProfileColor::_internal_style_name() const {
  return style_name_.Get();
}
inline void ProfileItem_ProfileColor::_internal_set_style_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  style_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProfileItem_ProfileColor::_internal_mutable_style_name() {
  _has_bits_[0] |= 0x00000001u;
  return style_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProfileItem_ProfileColor::release_style_name() {
  // @@protoc_insertion_point(field_release:ProfileItem.ProfileColor.style_name)
  if (!_internal_has_style_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = style_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (style_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    style_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ProfileItem_ProfileColor::set_allocated_style_name(std::string* style_name) {
  if (style_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  style_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), style_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (style_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    style_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ProfileItem.ProfileColor.style_name)
}

// optional string color = 2 [(.description) = "hex color to apply"];
inline bool ProfileItem_ProfileColor::_internal_has_color() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ProfileItem_ProfileColor::has_color() const {
  return _internal_has_color();
}
inline void ProfileItem_ProfileColor::clear_color() {
  color_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ProfileItem_ProfileColor::color() const {
  // @@protoc_insertion_point(field_get:ProfileItem.ProfileColor.color)
  return _internal_color();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProfileItem_ProfileColor::set_color(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProfileItem.ProfileColor.color)
}
inline std::string* ProfileItem_ProfileColor::mutable_color() {
  std::string* _s = _internal_mutable_color();
  // @@protoc_insertion_point(field_mutable:ProfileItem.ProfileColor.color)
  return _s;
}
inline const std::string& ProfileItem_ProfileColor::_internal_color() const {
  return color_.Get();
}
inline void ProfileItem_ProfileColor::_internal_set_color(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProfileItem_ProfileColor::_internal_mutable_color() {
  _has_bits_[0] |= 0x00000002u;
  return color_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProfileItem_ProfileColor::release_color() {
  // @@protoc_insertion_point(field_release:ProfileItem.ProfileColor.color)
  if (!_internal_has_color()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = color_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (color_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ProfileItem_ProfileColor::set_allocated_color(std::string* color) {
  if (color != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  color_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), color,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (color_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ProfileItem.ProfileColor.color)
}

// -------------------------------------------------------------------

// ProfileItem

// optional uint64 communityitemid = 1;
inline bool ProfileItem::_internal_has_communityitemid() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ProfileItem::has_communityitemid() const {
  return _internal_has_communityitemid();
}
inline void ProfileItem::clear_communityitemid() {
  communityitemid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000200u;
}
inline uint64_t ProfileItem::_internal_communityitemid() const {
  return communityitemid_;
}
inline uint64_t ProfileItem::communityitemid() const {
  // @@protoc_insertion_point(field_get:ProfileItem.communityitemid)
  return _internal_communityitemid();
}
inline void ProfileItem::_internal_set_communityitemid(uint64_t value) {
  _has_bits_[0] |= 0x00000200u;
  communityitemid_ = value;
}
inline void ProfileItem::set_communityitemid(uint64_t value) {
  _internal_set_communityitemid(value);
  // @@protoc_insertion_point(field_set:ProfileItem.communityitemid)
}

// optional string image_small = 2 [(.description) = "small image used in backpack or selection"];
inline bool ProfileItem::_internal_has_image_small() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProfileItem::has_image_small() const {
  return _internal_has_image_small();
}
inline void ProfileItem::clear_image_small() {
  image_small_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProfileItem::image_small() const {
  // @@protoc_insertion_point(field_get:ProfileItem.image_small)
  return _internal_image_small();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProfileItem::set_image_small(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 image_small_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProfileItem.image_small)
}
inline std::string* ProfileItem::mutable_image_small() {
  std::string* _s = _internal_mutable_image_small();
  // @@protoc_insertion_point(field_mutable:ProfileItem.image_small)
  return _s;
}
inline const std::string& ProfileItem::_internal_image_small() const {
  return image_small_.Get();
}
inline void ProfileItem::_internal_set_image_small(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  image_small_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProfileItem::_internal_mutable_image_small() {
  _has_bits_[0] |= 0x00000001u;
  return image_small_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProfileItem::release_image_small() {
  // @@protoc_insertion_point(field_release:ProfileItem.image_small)
  if (!_internal_has_image_small()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = image_small_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (image_small_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    image_small_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ProfileItem::set_allocated_image_small(std::string* image_small) {
  if (image_small != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  image_small_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image_small,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (image_small_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    image_small_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ProfileItem.image_small)
}

// optional string image_large = 3 [(.description) = "the image itself"];
inline bool ProfileItem::_internal_has_image_large() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ProfileItem::has_image_large() const {
  return _internal_has_image_large();
}
inline void ProfileItem::clear_image_large() {
  image_large_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ProfileItem::image_large() const {
  // @@protoc_insertion_point(field_get:ProfileItem.image_large)
  return _internal_image_large();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProfileItem::set_image_large(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 image_large_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProfileItem.image_large)
}
inline std::string* ProfileItem::mutable_image_large() {
  std::string* _s = _internal_mutable_image_large();
  // @@protoc_insertion_point(field_mutable:ProfileItem.image_large)
  return _s;
}
inline const std::string& ProfileItem::_internal_image_large() const {
  return image_large_.Get();
}
inline void ProfileItem::_internal_set_image_large(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  image_large_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProfileItem::_internal_mutable_image_large() {
  _has_bits_[0] |= 0x00000002u;
  return image_large_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProfileItem::release_image_large() {
  // @@protoc_insertion_point(field_release:ProfileItem.image_large)
  if (!_internal_has_image_large()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = image_large_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (image_large_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    image_large_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ProfileItem::set_allocated_image_large(std::string* image_large) {
  if (image_large != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  image_large_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image_large,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (image_large_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    image_large_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ProfileItem.image_large)
}

// optional string name = 4 [(.description) = "english name"];
inline bool ProfileItem::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ProfileItem::has_name() const {
  return _internal_has_name();
}
inline void ProfileItem::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ProfileItem::name() const {
  // @@protoc_insertion_point(field_get:ProfileItem.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProfileItem::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProfileItem.name)
}
inline std::string* ProfileItem::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ProfileItem.name)
  return _s;
}
inline const std::string& ProfileItem::_internal_name() const {
  return name_.Get();
}
inline void ProfileItem::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProfileItem::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000004u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProfileItem::release_name() {
  // @@protoc_insertion_point(field_release:ProfileItem.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ProfileItem::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ProfileItem.name)
}

// optional string item_title = 5 [(.description) = "localized title"];
inline bool ProfileItem::_internal_has_item_title() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ProfileItem::has_item_title() const {
  return _internal_has_item_title();
}
inline void ProfileItem::clear_item_title() {
  item_title_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ProfileItem::item_title() const {
  // @@protoc_insertion_point(field_get:ProfileItem.item_title)
  return _internal_item_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProfileItem::set_item_title(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 item_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProfileItem.item_title)
}
inline std::string* ProfileItem::mutable_item_title() {
  std::string* _s = _internal_mutable_item_title();
  // @@protoc_insertion_point(field_mutable:ProfileItem.item_title)
  return _s;
}
inline const std::string& ProfileItem::_internal_item_title() const {
  return item_title_.Get();
}
inline void ProfileItem::_internal_set_item_title(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  item_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProfileItem::_internal_mutable_item_title() {
  _has_bits_[0] |= 0x00000008u;
  return item_title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProfileItem::release_item_title() {
  // @@protoc_insertion_point(field_release:ProfileItem.item_title)
  if (!_internal_has_item_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = item_title_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (item_title_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    item_title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ProfileItem::set_allocated_item_title(std::string* item_title) {
  if (item_title != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  item_title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), item_title,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (item_title_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    item_title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ProfileItem.item_title)
}

// optional string item_description = 6 [(.description) = "localized description"];
inline bool ProfileItem::_internal_has_item_description() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ProfileItem::has_item_description() const {
  return _internal_has_item_description();
}
inline void ProfileItem::clear_item_description() {
  item_description_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& ProfileItem::item_description() const {
  // @@protoc_insertion_point(field_get:ProfileItem.item_description)
  return _internal_item_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProfileItem::set_item_description(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 item_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProfileItem.item_description)
}
inline std::string* ProfileItem::mutable_item_description() {
  std::string* _s = _internal_mutable_item_description();
  // @@protoc_insertion_point(field_mutable:ProfileItem.item_description)
  return _s;
}
inline const std::string& ProfileItem::_internal_item_description() const {
  return item_description_.Get();
}
inline void ProfileItem::_internal_set_item_description(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  item_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProfileItem::_internal_mutable_item_description() {
  _has_bits_[0] |= 0x00000010u;
  return item_description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProfileItem::release_item_description() {
  // @@protoc_insertion_point(field_release:ProfileItem.item_description)
  if (!_internal_has_item_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  auto* p = item_description_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (item_description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    item_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ProfileItem::set_allocated_item_description(std::string* item_description) {
  if (item_description != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  item_description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), item_description,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (item_description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    item_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ProfileItem.item_description)
}

// optional uint32 appid = 7;
inline bool ProfileItem::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ProfileItem::has_appid() const {
  return _internal_has_appid();
}
inline void ProfileItem::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline uint32_t ProfileItem::_internal_appid() const {
  return appid_;
}
inline uint32_t ProfileItem::appid() const {
  // @@protoc_insertion_point(field_get:ProfileItem.appid)
  return _internal_appid();
}
inline void ProfileItem::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000400u;
  appid_ = value;
}
inline void ProfileItem::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:ProfileItem.appid)
}

// optional uint32 item_type = 8;
inline bool ProfileItem::_internal_has_item_type() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ProfileItem::has_item_type() const {
  return _internal_has_item_type();
}
inline void ProfileItem::clear_item_type() {
  item_type_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline uint32_t ProfileItem::_internal_item_type() const {
  return item_type_;
}
inline uint32_t ProfileItem::item_type() const {
  // @@protoc_insertion_point(field_get:ProfileItem.item_type)
  return _internal_item_type();
}
inline void ProfileItem::_internal_set_item_type(uint32_t value) {
  _has_bits_[0] |= 0x00000800u;
  item_type_ = value;
}
inline void ProfileItem::set_item_type(uint32_t value) {
  _internal_set_item_type(value);
  // @@protoc_insertion_point(field_set:ProfileItem.item_type)
}

// optional uint32 item_class = 9;
inline bool ProfileItem::_internal_has_item_class() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ProfileItem::has_item_class() const {
  return _internal_has_item_class();
}
inline void ProfileItem::clear_item_class() {
  item_class_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline uint32_t ProfileItem::_internal_item_class() const {
  return item_class_;
}
inline uint32_t ProfileItem::item_class() const {
  // @@protoc_insertion_point(field_get:ProfileItem.item_class)
  return _internal_item_class();
}
inline void ProfileItem::_internal_set_item_class(uint32_t value) {
  _has_bits_[0] |= 0x00001000u;
  item_class_ = value;
}
inline void ProfileItem::set_item_class(uint32_t value) {
  _internal_set_item_class(value);
  // @@protoc_insertion_point(field_set:ProfileItem.item_class)
}

// optional string movie_webm = 10 [(.description) = "URL to webm, if any"];
inline bool ProfileItem::_internal_has_movie_webm() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ProfileItem::has_movie_webm() const {
  return _internal_has_movie_webm();
}
inline void ProfileItem::clear_movie_webm() {
  movie_webm_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& ProfileItem::movie_webm() const {
  // @@protoc_insertion_point(field_get:ProfileItem.movie_webm)
  return _internal_movie_webm();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProfileItem::set_movie_webm(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000020u;
 movie_webm_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProfileItem.movie_webm)
}
inline std::string* ProfileItem::mutable_movie_webm() {
  std::string* _s = _internal_mutable_movie_webm();
  // @@protoc_insertion_point(field_mutable:ProfileItem.movie_webm)
  return _s;
}
inline const std::string& ProfileItem::_internal_movie_webm() const {
  return movie_webm_.Get();
}
inline void ProfileItem::_internal_set_movie_webm(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  movie_webm_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProfileItem::_internal_mutable_movie_webm() {
  _has_bits_[0] |= 0x00000020u;
  return movie_webm_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProfileItem::release_movie_webm() {
  // @@protoc_insertion_point(field_release:ProfileItem.movie_webm)
  if (!_internal_has_movie_webm()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  auto* p = movie_webm_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (movie_webm_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    movie_webm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ProfileItem::set_allocated_movie_webm(std::string* movie_webm) {
  if (movie_webm != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  movie_webm_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), movie_webm,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (movie_webm_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    movie_webm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ProfileItem.movie_webm)
}

// optional string movie_mp4 = 11 [(.description) = "URL to mp4, if any"];
inline bool ProfileItem::_internal_has_movie_mp4() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ProfileItem::has_movie_mp4() const {
  return _internal_has_movie_mp4();
}
inline void ProfileItem::clear_movie_mp4() {
  movie_mp4_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& ProfileItem::movie_mp4() const {
  // @@protoc_insertion_point(field_get:ProfileItem.movie_mp4)
  return _internal_movie_mp4();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProfileItem::set_movie_mp4(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000040u;
 movie_mp4_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProfileItem.movie_mp4)
}
inline std::string* ProfileItem::mutable_movie_mp4() {
  std::string* _s = _internal_mutable_movie_mp4();
  // @@protoc_insertion_point(field_mutable:ProfileItem.movie_mp4)
  return _s;
}
inline const std::string& ProfileItem::_internal_movie_mp4() const {
  return movie_mp4_.Get();
}
inline void ProfileItem::_internal_set_movie_mp4(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  movie_mp4_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProfileItem::_internal_mutable_movie_mp4() {
  _has_bits_[0] |= 0x00000040u;
  return movie_mp4_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProfileItem::release_movie_mp4() {
  // @@protoc_insertion_point(field_release:ProfileItem.movie_mp4)
  if (!_internal_has_movie_mp4()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  auto* p = movie_mp4_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (movie_mp4_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    movie_mp4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ProfileItem::set_allocated_movie_mp4(std::string* movie_mp4) {
  if (movie_mp4 != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  movie_mp4_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), movie_mp4,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (movie_mp4_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    movie_mp4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ProfileItem.movie_mp4)
}

// optional string movie_webm_small = 13 [(.description) = "URL to small webm, if any"];
inline bool ProfileItem::_internal_has_movie_webm_small() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ProfileItem::has_movie_webm_small() const {
  return _internal_has_movie_webm_small();
}
inline void ProfileItem::clear_movie_webm_small() {
  movie_webm_small_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& ProfileItem::movie_webm_small() const {
  // @@protoc_insertion_point(field_get:ProfileItem.movie_webm_small)
  return _internal_movie_webm_small();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProfileItem::set_movie_webm_small(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000080u;
 movie_webm_small_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProfileItem.movie_webm_small)
}
inline std::string* ProfileItem::mutable_movie_webm_small() {
  std::string* _s = _internal_mutable_movie_webm_small();
  // @@protoc_insertion_point(field_mutable:ProfileItem.movie_webm_small)
  return _s;
}
inline const std::string& ProfileItem::_internal_movie_webm_small() const {
  return movie_webm_small_.Get();
}
inline void ProfileItem::_internal_set_movie_webm_small(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  movie_webm_small_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProfileItem::_internal_mutable_movie_webm_small() {
  _has_bits_[0] |= 0x00000080u;
  return movie_webm_small_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProfileItem::release_movie_webm_small() {
  // @@protoc_insertion_point(field_release:ProfileItem.movie_webm_small)
  if (!_internal_has_movie_webm_small()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  auto* p = movie_webm_small_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (movie_webm_small_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    movie_webm_small_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ProfileItem::set_allocated_movie_webm_small(std::string* movie_webm_small) {
  if (movie_webm_small != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  movie_webm_small_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), movie_webm_small,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (movie_webm_small_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    movie_webm_small_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ProfileItem.movie_webm_small)
}

// optional string movie_mp4_small = 14 [(.description) = "URL to small mp4, if any"];
inline bool ProfileItem::_internal_has_movie_mp4_small() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ProfileItem::has_movie_mp4_small() const {
  return _internal_has_movie_mp4_small();
}
inline void ProfileItem::clear_movie_mp4_small() {
  movie_mp4_small_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& ProfileItem::movie_mp4_small() const {
  // @@protoc_insertion_point(field_get:ProfileItem.movie_mp4_small)
  return _internal_movie_mp4_small();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProfileItem::set_movie_mp4_small(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000100u;
 movie_mp4_small_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProfileItem.movie_mp4_small)
}
inline std::string* ProfileItem::mutable_movie_mp4_small() {
  std::string* _s = _internal_mutable_movie_mp4_small();
  // @@protoc_insertion_point(field_mutable:ProfileItem.movie_mp4_small)
  return _s;
}
inline const std::string& ProfileItem::_internal_movie_mp4_small() const {
  return movie_mp4_small_.Get();
}
inline void ProfileItem::_internal_set_movie_mp4_small(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  movie_mp4_small_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProfileItem::_internal_mutable_movie_mp4_small() {
  _has_bits_[0] |= 0x00000100u;
  return movie_mp4_small_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProfileItem::release_movie_mp4_small() {
  // @@protoc_insertion_point(field_release:ProfileItem.movie_mp4_small)
  if (!_internal_has_movie_mp4_small()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  auto* p = movie_mp4_small_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (movie_mp4_small_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    movie_mp4_small_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ProfileItem::set_allocated_movie_mp4_small(std::string* movie_mp4_small) {
  if (movie_mp4_small != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  movie_mp4_small_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), movie_mp4_small,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (movie_mp4_small_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    movie_mp4_small_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ProfileItem.movie_mp4_small)
}

// optional uint32 equipped_flags = 12 [(.description) = "Special flags set when equipped (EProfileItemEquippedFlag)"];
inline bool ProfileItem::_internal_has_equipped_flags() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ProfileItem::has_equipped_flags() const {
  return _internal_has_equipped_flags();
}
inline void ProfileItem::clear_equipped_flags() {
  equipped_flags_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline uint32_t ProfileItem::_internal_equipped_flags() const {
  return equipped_flags_;
}
inline uint32_t ProfileItem::equipped_flags() const {
  // @@protoc_insertion_point(field_get:ProfileItem.equipped_flags)
  return _internal_equipped_flags();
}
inline void ProfileItem::_internal_set_equipped_flags(uint32_t value) {
  _has_bits_[0] |= 0x00002000u;
  equipped_flags_ = value;
}
inline void ProfileItem::set_equipped_flags(uint32_t value) {
  _internal_set_equipped_flags(value);
  // @@protoc_insertion_point(field_set:ProfileItem.equipped_flags)
}

// repeated .ProfileItem.ProfileColor profile_colors = 15 [(.description) = "Game profile css colors"];
inline int ProfileItem::_internal_profile_colors_size() const {
  return profile_colors_.size();
}
inline int ProfileItem::profile_colors_size() const {
  return _internal_profile_colors_size();
}
inline void ProfileItem::clear_profile_colors() {
  profile_colors_.Clear();
}
inline ::ProfileItem_ProfileColor* ProfileItem::mutable_profile_colors(int index) {
  // @@protoc_insertion_point(field_mutable:ProfileItem.profile_colors)
  return profile_colors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfileItem_ProfileColor >*
ProfileItem::mutable_profile_colors() {
  // @@protoc_insertion_point(field_mutable_list:ProfileItem.profile_colors)
  return &profile_colors_;
}
inline const ::ProfileItem_ProfileColor& ProfileItem::_internal_profile_colors(int index) const {
  return profile_colors_.Get(index);
}
inline const ::ProfileItem_ProfileColor& ProfileItem::profile_colors(int index) const {
  // @@protoc_insertion_point(field_get:ProfileItem.profile_colors)
  return _internal_profile_colors(index);
}
inline ::ProfileItem_ProfileColor* ProfileItem::_internal_add_profile_colors() {
  return profile_colors_.Add();
}
inline ::ProfileItem_ProfileColor* ProfileItem::add_profile_colors() {
  ::ProfileItem_ProfileColor* _add = _internal_add_profile_colors();
  // @@protoc_insertion_point(field_add:ProfileItem.profile_colors)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfileItem_ProfileColor >&
ProfileItem::profile_colors() const {
  // @@protoc_insertion_point(field_list:ProfileItem.profile_colors)
  return profile_colors_;
}

// -------------------------------------------------------------------

// CPlayer_GetProfileBackground_Response

// optional .ProfileItem profile_background = 1;
inline bool CPlayer_GetProfileBackground_Response::_internal_has_profile_background() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || profile_background_ != nullptr);
  return value;
}
inline bool CPlayer_GetProfileBackground_Response::has_profile_background() const {
  return _internal_has_profile_background();
}
inline void CPlayer_GetProfileBackground_Response::clear_profile_background() {
  if (profile_background_ != nullptr) profile_background_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ProfileItem& CPlayer_GetProfileBackground_Response::_internal_profile_background() const {
  const ::ProfileItem* p = profile_background_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProfileItem&>(
      ::_ProfileItem_default_instance_);
}
inline const ::ProfileItem& CPlayer_GetProfileBackground_Response::profile_background() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetProfileBackground_Response.profile_background)
  return _internal_profile_background();
}
inline void CPlayer_GetProfileBackground_Response::unsafe_arena_set_allocated_profile_background(
    ::ProfileItem* profile_background) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(profile_background_);
  }
  profile_background_ = profile_background;
  if (profile_background) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CPlayer_GetProfileBackground_Response.profile_background)
}
inline ::ProfileItem* CPlayer_GetProfileBackground_Response::release_profile_background() {
  _has_bits_[0] &= ~0x00000001u;
  ::ProfileItem* temp = profile_background_;
  profile_background_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProfileItem* CPlayer_GetProfileBackground_Response::unsafe_arena_release_profile_background() {
  // @@protoc_insertion_point(field_release:CPlayer_GetProfileBackground_Response.profile_background)
  _has_bits_[0] &= ~0x00000001u;
  ::ProfileItem* temp = profile_background_;
  profile_background_ = nullptr;
  return temp;
}
inline ::ProfileItem* CPlayer_GetProfileBackground_Response::_internal_mutable_profile_background() {
  _has_bits_[0] |= 0x00000001u;
  if (profile_background_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProfileItem>(GetArenaForAllocation());
    profile_background_ = p;
  }
  return profile_background_;
}
inline ::ProfileItem* CPlayer_GetProfileBackground_Response::mutable_profile_background() {
  ::ProfileItem* _msg = _internal_mutable_profile_background();
  // @@protoc_insertion_point(field_mutable:CPlayer_GetProfileBackground_Response.profile_background)
  return _msg;
}
inline void CPlayer_GetProfileBackground_Response::set_allocated_profile_background(::ProfileItem* profile_background) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete profile_background_;
  }
  if (profile_background) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ProfileItem>::GetOwningArena(profile_background);
    if (message_arena != submessage_arena) {
      profile_background = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, profile_background, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  profile_background_ = profile_background;
  // @@protoc_insertion_point(field_set_allocated:CPlayer_GetProfileBackground_Response.profile_background)
}

// -------------------------------------------------------------------

// CPlayer_SetProfileBackground_Request

// optional uint64 communityitemid = 1;
inline bool CPlayer_SetProfileBackground_Request::_internal_has_communityitemid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPlayer_SetProfileBackground_Request::has_communityitemid() const {
  return _internal_has_communityitemid();
}
inline void CPlayer_SetProfileBackground_Request::clear_communityitemid() {
  communityitemid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CPlayer_SetProfileBackground_Request::_internal_communityitemid() const {
  return communityitemid_;
}
inline uint64_t CPlayer_SetProfileBackground_Request::communityitemid() const {
  // @@protoc_insertion_point(field_get:CPlayer_SetProfileBackground_Request.communityitemid)
  return _internal_communityitemid();
}
inline void CPlayer_SetProfileBackground_Request::_internal_set_communityitemid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  communityitemid_ = value;
}
inline void CPlayer_SetProfileBackground_Request::set_communityitemid(uint64_t value) {
  _internal_set_communityitemid(value);
  // @@protoc_insertion_point(field_set:CPlayer_SetProfileBackground_Request.communityitemid)
}

// -------------------------------------------------------------------

// CPlayer_SetProfileBackground_Response

// -------------------------------------------------------------------

// CPlayer_GetMiniProfileBackground_Request

// optional fixed64 steamid = 1 [(.description) = "The player we\'re asking about"];
inline bool CPlayer_GetMiniProfileBackground_Request::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPlayer_GetMiniProfileBackground_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CPlayer_GetMiniProfileBackground_Request::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CPlayer_GetMiniProfileBackground_Request::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CPlayer_GetMiniProfileBackground_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetMiniProfileBackground_Request.steamid)
  return _internal_steamid();
}
inline void CPlayer_GetMiniProfileBackground_Request::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  steamid_ = value;
}
inline void CPlayer_GetMiniProfileBackground_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetMiniProfileBackground_Request.steamid)
}

// optional string language = 2;
inline bool CPlayer_GetMiniProfileBackground_Request::_internal_has_language() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPlayer_GetMiniProfileBackground_Request::has_language() const {
  return _internal_has_language();
}
inline void CPlayer_GetMiniProfileBackground_Request::clear_language() {
  language_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CPlayer_GetMiniProfileBackground_Request::language() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetMiniProfileBackground_Request.language)
  return _internal_language();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CPlayer_GetMiniProfileBackground_Request::set_language(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CPlayer_GetMiniProfileBackground_Request.language)
}
inline std::string* CPlayer_GetMiniProfileBackground_Request::mutable_language() {
  std::string* _s = _internal_mutable_language();
  // @@protoc_insertion_point(field_mutable:CPlayer_GetMiniProfileBackground_Request.language)
  return _s;
}
inline const std::string& CPlayer_GetMiniProfileBackground_Request::_internal_language() const {
  return language_.Get();
}
inline void CPlayer_GetMiniProfileBackground_Request::_internal_set_language(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CPlayer_GetMiniProfileBackground_Request::_internal_mutable_language() {
  _has_bits_[0] |= 0x00000001u;
  return language_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CPlayer_GetMiniProfileBackground_Request::release_language() {
  // @@protoc_insertion_point(field_release:CPlayer_GetMiniProfileBackground_Request.language)
  if (!_internal_has_language()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = language_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (language_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CPlayer_GetMiniProfileBackground_Request::set_allocated_language(std::string* language) {
  if (language != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  language_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (language_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CPlayer_GetMiniProfileBackground_Request.language)
}

// -------------------------------------------------------------------

// CPlayer_GetMiniProfileBackground_Response

// optional .ProfileItem profile_background = 1;
inline bool CPlayer_GetMiniProfileBackground_Response::_internal_has_profile_background() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || profile_background_ != nullptr);
  return value;
}
inline bool CPlayer_GetMiniProfileBackground_Response::has_profile_background() const {
  return _internal_has_profile_background();
}
inline void CPlayer_GetMiniProfileBackground_Response::clear_profile_background() {
  if (profile_background_ != nullptr) profile_background_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ProfileItem& CPlayer_GetMiniProfileBackground_Response::_internal_profile_background() const {
  const ::ProfileItem* p = profile_background_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProfileItem&>(
      ::_ProfileItem_default_instance_);
}
inline const ::ProfileItem& CPlayer_GetMiniProfileBackground_Response::profile_background() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetMiniProfileBackground_Response.profile_background)
  return _internal_profile_background();
}
inline void CPlayer_GetMiniProfileBackground_Response::unsafe_arena_set_allocated_profile_background(
    ::ProfileItem* profile_background) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(profile_background_);
  }
  profile_background_ = profile_background;
  if (profile_background) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CPlayer_GetMiniProfileBackground_Response.profile_background)
}
inline ::ProfileItem* CPlayer_GetMiniProfileBackground_Response::release_profile_background() {
  _has_bits_[0] &= ~0x00000001u;
  ::ProfileItem* temp = profile_background_;
  profile_background_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProfileItem* CPlayer_GetMiniProfileBackground_Response::unsafe_arena_release_profile_background() {
  // @@protoc_insertion_point(field_release:CPlayer_GetMiniProfileBackground_Response.profile_background)
  _has_bits_[0] &= ~0x00000001u;
  ::ProfileItem* temp = profile_background_;
  profile_background_ = nullptr;
  return temp;
}
inline ::ProfileItem* CPlayer_GetMiniProfileBackground_Response::_internal_mutable_profile_background() {
  _has_bits_[0] |= 0x00000001u;
  if (profile_background_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProfileItem>(GetArenaForAllocation());
    profile_background_ = p;
  }
  return profile_background_;
}
inline ::ProfileItem* CPlayer_GetMiniProfileBackground_Response::mutable_profile_background() {
  ::ProfileItem* _msg = _internal_mutable_profile_background();
  // @@protoc_insertion_point(field_mutable:CPlayer_GetMiniProfileBackground_Response.profile_background)
  return _msg;
}
inline void CPlayer_GetMiniProfileBackground_Response::set_allocated_profile_background(::ProfileItem* profile_background) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete profile_background_;
  }
  if (profile_background) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ProfileItem>::GetOwningArena(profile_background);
    if (message_arena != submessage_arena) {
      profile_background = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, profile_background, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  profile_background_ = profile_background;
  // @@protoc_insertion_point(field_set_allocated:CPlayer_GetMiniProfileBackground_Response.profile_background)
}

// -------------------------------------------------------------------

// CPlayer_SetMiniProfileBackground_Request

// optional uint64 communityitemid = 1;
inline bool CPlayer_SetMiniProfileBackground_Request::_internal_has_communityitemid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPlayer_SetMiniProfileBackground_Request::has_communityitemid() const {
  return _internal_has_communityitemid();
}
inline void CPlayer_SetMiniProfileBackground_Request::clear_communityitemid() {
  communityitemid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CPlayer_SetMiniProfileBackground_Request::_internal_communityitemid() const {
  return communityitemid_;
}
inline uint64_t CPlayer_SetMiniProfileBackground_Request::communityitemid() const {
  // @@protoc_insertion_point(field_get:CPlayer_SetMiniProfileBackground_Request.communityitemid)
  return _internal_communityitemid();
}
inline void CPlayer_SetMiniProfileBackground_Request::_internal_set_communityitemid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  communityitemid_ = value;
}
inline void CPlayer_SetMiniProfileBackground_Request::set_communityitemid(uint64_t value) {
  _internal_set_communityitemid(value);
  // @@protoc_insertion_point(field_set:CPlayer_SetMiniProfileBackground_Request.communityitemid)
}

// -------------------------------------------------------------------

// CPlayer_SetMiniProfileBackground_Response

// -------------------------------------------------------------------

// CPlayer_GetAvatarFrame_Request

// optional fixed64 steamid = 1 [(.description) = "The player we\'re asking about"];
inline bool CPlayer_GetAvatarFrame_Request::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPlayer_GetAvatarFrame_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CPlayer_GetAvatarFrame_Request::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CPlayer_GetAvatarFrame_Request::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CPlayer_GetAvatarFrame_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetAvatarFrame_Request.steamid)
  return _internal_steamid();
}
inline void CPlayer_GetAvatarFrame_Request::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  steamid_ = value;
}
inline void CPlayer_GetAvatarFrame_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetAvatarFrame_Request.steamid)
}

// optional string language = 2;
inline bool CPlayer_GetAvatarFrame_Request::_internal_has_language() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPlayer_GetAvatarFrame_Request::has_language() const {
  return _internal_has_language();
}
inline void CPlayer_GetAvatarFrame_Request::clear_language() {
  language_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CPlayer_GetAvatarFrame_Request::language() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetAvatarFrame_Request.language)
  return _internal_language();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CPlayer_GetAvatarFrame_Request::set_language(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CPlayer_GetAvatarFrame_Request.language)
}
inline std::string* CPlayer_GetAvatarFrame_Request::mutable_language() {
  std::string* _s = _internal_mutable_language();
  // @@protoc_insertion_point(field_mutable:CPlayer_GetAvatarFrame_Request.language)
  return _s;
}
inline const std::string& CPlayer_GetAvatarFrame_Request::_internal_language() const {
  return language_.Get();
}
inline void CPlayer_GetAvatarFrame_Request::_internal_set_language(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CPlayer_GetAvatarFrame_Request::_internal_mutable_language() {
  _has_bits_[0] |= 0x00000001u;
  return language_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CPlayer_GetAvatarFrame_Request::release_language() {
  // @@protoc_insertion_point(field_release:CPlayer_GetAvatarFrame_Request.language)
  if (!_internal_has_language()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = language_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (language_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CPlayer_GetAvatarFrame_Request::set_allocated_language(std::string* language) {
  if (language != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  language_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (language_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CPlayer_GetAvatarFrame_Request.language)
}

// -------------------------------------------------------------------

// CPlayer_GetAvatarFrame_Response

// optional .ProfileItem avatar_frame = 1;
inline bool CPlayer_GetAvatarFrame_Response::_internal_has_avatar_frame() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || avatar_frame_ != nullptr);
  return value;
}
inline bool CPlayer_GetAvatarFrame_Response::has_avatar_frame() const {
  return _internal_has_avatar_frame();
}
inline void CPlayer_GetAvatarFrame_Response::clear_avatar_frame() {
  if (avatar_frame_ != nullptr) avatar_frame_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ProfileItem& CPlayer_GetAvatarFrame_Response::_internal_avatar_frame() const {
  const ::ProfileItem* p = avatar_frame_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProfileItem&>(
      ::_ProfileItem_default_instance_);
}
inline const ::ProfileItem& CPlayer_GetAvatarFrame_Response::avatar_frame() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetAvatarFrame_Response.avatar_frame)
  return _internal_avatar_frame();
}
inline void CPlayer_GetAvatarFrame_Response::unsafe_arena_set_allocated_avatar_frame(
    ::ProfileItem* avatar_frame) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(avatar_frame_);
  }
  avatar_frame_ = avatar_frame;
  if (avatar_frame) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CPlayer_GetAvatarFrame_Response.avatar_frame)
}
inline ::ProfileItem* CPlayer_GetAvatarFrame_Response::release_avatar_frame() {
  _has_bits_[0] &= ~0x00000001u;
  ::ProfileItem* temp = avatar_frame_;
  avatar_frame_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProfileItem* CPlayer_GetAvatarFrame_Response::unsafe_arena_release_avatar_frame() {
  // @@protoc_insertion_point(field_release:CPlayer_GetAvatarFrame_Response.avatar_frame)
  _has_bits_[0] &= ~0x00000001u;
  ::ProfileItem* temp = avatar_frame_;
  avatar_frame_ = nullptr;
  return temp;
}
inline ::ProfileItem* CPlayer_GetAvatarFrame_Response::_internal_mutable_avatar_frame() {
  _has_bits_[0] |= 0x00000001u;
  if (avatar_frame_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProfileItem>(GetArenaForAllocation());
    avatar_frame_ = p;
  }
  return avatar_frame_;
}
inline ::ProfileItem* CPlayer_GetAvatarFrame_Response::mutable_avatar_frame() {
  ::ProfileItem* _msg = _internal_mutable_avatar_frame();
  // @@protoc_insertion_point(field_mutable:CPlayer_GetAvatarFrame_Response.avatar_frame)
  return _msg;
}
inline void CPlayer_GetAvatarFrame_Response::set_allocated_avatar_frame(::ProfileItem* avatar_frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete avatar_frame_;
  }
  if (avatar_frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ProfileItem>::GetOwningArena(avatar_frame);
    if (message_arena != submessage_arena) {
      avatar_frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, avatar_frame, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  avatar_frame_ = avatar_frame;
  // @@protoc_insertion_point(field_set_allocated:CPlayer_GetAvatarFrame_Response.avatar_frame)
}

// -------------------------------------------------------------------

// CPlayer_SetAvatarFrame_Request

// optional uint64 communityitemid = 1;
inline bool CPlayer_SetAvatarFrame_Request::_internal_has_communityitemid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPlayer_SetAvatarFrame_Request::has_communityitemid() const {
  return _internal_has_communityitemid();
}
inline void CPlayer_SetAvatarFrame_Request::clear_communityitemid() {
  communityitemid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CPlayer_SetAvatarFrame_Request::_internal_communityitemid() const {
  return communityitemid_;
}
inline uint64_t CPlayer_SetAvatarFrame_Request::communityitemid() const {
  // @@protoc_insertion_point(field_get:CPlayer_SetAvatarFrame_Request.communityitemid)
  return _internal_communityitemid();
}
inline void CPlayer_SetAvatarFrame_Request::_internal_set_communityitemid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  communityitemid_ = value;
}
inline void CPlayer_SetAvatarFrame_Request::set_communityitemid(uint64_t value) {
  _internal_set_communityitemid(value);
  // @@protoc_insertion_point(field_set:CPlayer_SetAvatarFrame_Request.communityitemid)
}

// -------------------------------------------------------------------

// CPlayer_SetAvatarFrame_Response

// -------------------------------------------------------------------

// CPlayer_GetAnimatedAvatar_Request

// optional fixed64 steamid = 1 [(.description) = "The player we\'re asking about"];
inline bool CPlayer_GetAnimatedAvatar_Request::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPlayer_GetAnimatedAvatar_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CPlayer_GetAnimatedAvatar_Request::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CPlayer_GetAnimatedAvatar_Request::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CPlayer_GetAnimatedAvatar_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetAnimatedAvatar_Request.steamid)
  return _internal_steamid();
}
inline void CPlayer_GetAnimatedAvatar_Request::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  steamid_ = value;
}
inline void CPlayer_GetAnimatedAvatar_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetAnimatedAvatar_Request.steamid)
}

// optional string language = 2;
inline bool CPlayer_GetAnimatedAvatar_Request::_internal_has_language() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPlayer_GetAnimatedAvatar_Request::has_language() const {
  return _internal_has_language();
}
inline void CPlayer_GetAnimatedAvatar_Request::clear_language() {
  language_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CPlayer_GetAnimatedAvatar_Request::language() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetAnimatedAvatar_Request.language)
  return _internal_language();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CPlayer_GetAnimatedAvatar_Request::set_language(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CPlayer_GetAnimatedAvatar_Request.language)
}
inline std::string* CPlayer_GetAnimatedAvatar_Request::mutable_language() {
  std::string* _s = _internal_mutable_language();
  // @@protoc_insertion_point(field_mutable:CPlayer_GetAnimatedAvatar_Request.language)
  return _s;
}
inline const std::string& CPlayer_GetAnimatedAvatar_Request::_internal_language() const {
  return language_.Get();
}
inline void CPlayer_GetAnimatedAvatar_Request::_internal_set_language(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CPlayer_GetAnimatedAvatar_Request::_internal_mutable_language() {
  _has_bits_[0] |= 0x00000001u;
  return language_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CPlayer_GetAnimatedAvatar_Request::release_language() {
  // @@protoc_insertion_point(field_release:CPlayer_GetAnimatedAvatar_Request.language)
  if (!_internal_has_language()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = language_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (language_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CPlayer_GetAnimatedAvatar_Request::set_allocated_language(std::string* language) {
  if (language != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  language_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (language_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CPlayer_GetAnimatedAvatar_Request.language)
}

// -------------------------------------------------------------------

// CPlayer_GetAnimatedAvatar_Response

// optional .ProfileItem avatar = 1;
inline bool CPlayer_GetAnimatedAvatar_Response::_internal_has_avatar() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || avatar_ != nullptr);
  return value;
}
inline bool CPlayer_GetAnimatedAvatar_Response::has_avatar() const {
  return _internal_has_avatar();
}
inline void CPlayer_GetAnimatedAvatar_Response::clear_avatar() {
  if (avatar_ != nullptr) avatar_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ProfileItem& CPlayer_GetAnimatedAvatar_Response::_internal_avatar() const {
  const ::ProfileItem* p = avatar_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProfileItem&>(
      ::_ProfileItem_default_instance_);
}
inline const ::ProfileItem& CPlayer_GetAnimatedAvatar_Response::avatar() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetAnimatedAvatar_Response.avatar)
  return _internal_avatar();
}
inline void CPlayer_GetAnimatedAvatar_Response::unsafe_arena_set_allocated_avatar(
    ::ProfileItem* avatar) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(avatar_);
  }
  avatar_ = avatar;
  if (avatar) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CPlayer_GetAnimatedAvatar_Response.avatar)
}
inline ::ProfileItem* CPlayer_GetAnimatedAvatar_Response::release_avatar() {
  _has_bits_[0] &= ~0x00000001u;
  ::ProfileItem* temp = avatar_;
  avatar_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProfileItem* CPlayer_GetAnimatedAvatar_Response::unsafe_arena_release_avatar() {
  // @@protoc_insertion_point(field_release:CPlayer_GetAnimatedAvatar_Response.avatar)
  _has_bits_[0] &= ~0x00000001u;
  ::ProfileItem* temp = avatar_;
  avatar_ = nullptr;
  return temp;
}
inline ::ProfileItem* CPlayer_GetAnimatedAvatar_Response::_internal_mutable_avatar() {
  _has_bits_[0] |= 0x00000001u;
  if (avatar_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProfileItem>(GetArenaForAllocation());
    avatar_ = p;
  }
  return avatar_;
}
inline ::ProfileItem* CPlayer_GetAnimatedAvatar_Response::mutable_avatar() {
  ::ProfileItem* _msg = _internal_mutable_avatar();
  // @@protoc_insertion_point(field_mutable:CPlayer_GetAnimatedAvatar_Response.avatar)
  return _msg;
}
inline void CPlayer_GetAnimatedAvatar_Response::set_allocated_avatar(::ProfileItem* avatar) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete avatar_;
  }
  if (avatar) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ProfileItem>::GetOwningArena(avatar);
    if (message_arena != submessage_arena) {
      avatar = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, avatar, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  avatar_ = avatar;
  // @@protoc_insertion_point(field_set_allocated:CPlayer_GetAnimatedAvatar_Response.avatar)
}

// -------------------------------------------------------------------

// CPlayer_SetAnimatedAvatar_Request

// optional uint64 communityitemid = 1;
inline bool CPlayer_SetAnimatedAvatar_Request::_internal_has_communityitemid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPlayer_SetAnimatedAvatar_Request::has_communityitemid() const {
  return _internal_has_communityitemid();
}
inline void CPlayer_SetAnimatedAvatar_Request::clear_communityitemid() {
  communityitemid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CPlayer_SetAnimatedAvatar_Request::_internal_communityitemid() const {
  return communityitemid_;
}
inline uint64_t CPlayer_SetAnimatedAvatar_Request::communityitemid() const {
  // @@protoc_insertion_point(field_get:CPlayer_SetAnimatedAvatar_Request.communityitemid)
  return _internal_communityitemid();
}
inline void CPlayer_SetAnimatedAvatar_Request::_internal_set_communityitemid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  communityitemid_ = value;
}
inline void CPlayer_SetAnimatedAvatar_Request::set_communityitemid(uint64_t value) {
  _internal_set_communityitemid(value);
  // @@protoc_insertion_point(field_set:CPlayer_SetAnimatedAvatar_Request.communityitemid)
}

// -------------------------------------------------------------------

// CPlayer_SetAnimatedAvatar_Response

// -------------------------------------------------------------------

// CPlayer_GetSteamDeckKeyboardSkin_Request

// optional fixed64 steamid = 1 [(.description) = "The player we\'re asking about"];
inline bool CPlayer_GetSteamDeckKeyboardSkin_Request::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPlayer_GetSteamDeckKeyboardSkin_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CPlayer_GetSteamDeckKeyboardSkin_Request::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CPlayer_GetSteamDeckKeyboardSkin_Request::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CPlayer_GetSteamDeckKeyboardSkin_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetSteamDeckKeyboardSkin_Request.steamid)
  return _internal_steamid();
}
inline void CPlayer_GetSteamDeckKeyboardSkin_Request::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  steamid_ = value;
}
inline void CPlayer_GetSteamDeckKeyboardSkin_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetSteamDeckKeyboardSkin_Request.steamid)
}

// optional string language = 2;
inline bool CPlayer_GetSteamDeckKeyboardSkin_Request::_internal_has_language() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPlayer_GetSteamDeckKeyboardSkin_Request::has_language() const {
  return _internal_has_language();
}
inline void CPlayer_GetSteamDeckKeyboardSkin_Request::clear_language() {
  language_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CPlayer_GetSteamDeckKeyboardSkin_Request::language() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetSteamDeckKeyboardSkin_Request.language)
  return _internal_language();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CPlayer_GetSteamDeckKeyboardSkin_Request::set_language(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CPlayer_GetSteamDeckKeyboardSkin_Request.language)
}
inline std::string* CPlayer_GetSteamDeckKeyboardSkin_Request::mutable_language() {
  std::string* _s = _internal_mutable_language();
  // @@protoc_insertion_point(field_mutable:CPlayer_GetSteamDeckKeyboardSkin_Request.language)
  return _s;
}
inline const std::string& CPlayer_GetSteamDeckKeyboardSkin_Request::_internal_language() const {
  return language_.Get();
}
inline void CPlayer_GetSteamDeckKeyboardSkin_Request::_internal_set_language(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CPlayer_GetSteamDeckKeyboardSkin_Request::_internal_mutable_language() {
  _has_bits_[0] |= 0x00000001u;
  return language_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CPlayer_GetSteamDeckKeyboardSkin_Request::release_language() {
  // @@protoc_insertion_point(field_release:CPlayer_GetSteamDeckKeyboardSkin_Request.language)
  if (!_internal_has_language()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = language_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (language_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CPlayer_GetSteamDeckKeyboardSkin_Request::set_allocated_language(std::string* language) {
  if (language != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  language_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (language_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CPlayer_GetSteamDeckKeyboardSkin_Request.language)
}

// -------------------------------------------------------------------

// CPlayer_GetSteamDeckKeyboardSkin_Response

// optional .ProfileItem steam_deck_keyboard_skin = 1;
inline bool CPlayer_GetSteamDeckKeyboardSkin_Response::_internal_has_steam_deck_keyboard_skin() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || steam_deck_keyboard_skin_ != nullptr);
  return value;
}
inline bool CPlayer_GetSteamDeckKeyboardSkin_Response::has_steam_deck_keyboard_skin() const {
  return _internal_has_steam_deck_keyboard_skin();
}
inline void CPlayer_GetSteamDeckKeyboardSkin_Response::clear_steam_deck_keyboard_skin() {
  if (steam_deck_keyboard_skin_ != nullptr) steam_deck_keyboard_skin_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ProfileItem& CPlayer_GetSteamDeckKeyboardSkin_Response::_internal_steam_deck_keyboard_skin() const {
  const ::ProfileItem* p = steam_deck_keyboard_skin_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProfileItem&>(
      ::_ProfileItem_default_instance_);
}
inline const ::ProfileItem& CPlayer_GetSteamDeckKeyboardSkin_Response::steam_deck_keyboard_skin() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetSteamDeckKeyboardSkin_Response.steam_deck_keyboard_skin)
  return _internal_steam_deck_keyboard_skin();
}
inline void CPlayer_GetSteamDeckKeyboardSkin_Response::unsafe_arena_set_allocated_steam_deck_keyboard_skin(
    ::ProfileItem* steam_deck_keyboard_skin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(steam_deck_keyboard_skin_);
  }
  steam_deck_keyboard_skin_ = steam_deck_keyboard_skin;
  if (steam_deck_keyboard_skin) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CPlayer_GetSteamDeckKeyboardSkin_Response.steam_deck_keyboard_skin)
}
inline ::ProfileItem* CPlayer_GetSteamDeckKeyboardSkin_Response::release_steam_deck_keyboard_skin() {
  _has_bits_[0] &= ~0x00000001u;
  ::ProfileItem* temp = steam_deck_keyboard_skin_;
  steam_deck_keyboard_skin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProfileItem* CPlayer_GetSteamDeckKeyboardSkin_Response::unsafe_arena_release_steam_deck_keyboard_skin() {
  // @@protoc_insertion_point(field_release:CPlayer_GetSteamDeckKeyboardSkin_Response.steam_deck_keyboard_skin)
  _has_bits_[0] &= ~0x00000001u;
  ::ProfileItem* temp = steam_deck_keyboard_skin_;
  steam_deck_keyboard_skin_ = nullptr;
  return temp;
}
inline ::ProfileItem* CPlayer_GetSteamDeckKeyboardSkin_Response::_internal_mutable_steam_deck_keyboard_skin() {
  _has_bits_[0] |= 0x00000001u;
  if (steam_deck_keyboard_skin_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProfileItem>(GetArenaForAllocation());
    steam_deck_keyboard_skin_ = p;
  }
  return steam_deck_keyboard_skin_;
}
inline ::ProfileItem* CPlayer_GetSteamDeckKeyboardSkin_Response::mutable_steam_deck_keyboard_skin() {
  ::ProfileItem* _msg = _internal_mutable_steam_deck_keyboard_skin();
  // @@protoc_insertion_point(field_mutable:CPlayer_GetSteamDeckKeyboardSkin_Response.steam_deck_keyboard_skin)
  return _msg;
}
inline void CPlayer_GetSteamDeckKeyboardSkin_Response::set_allocated_steam_deck_keyboard_skin(::ProfileItem* steam_deck_keyboard_skin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete steam_deck_keyboard_skin_;
  }
  if (steam_deck_keyboard_skin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ProfileItem>::GetOwningArena(steam_deck_keyboard_skin);
    if (message_arena != submessage_arena) {
      steam_deck_keyboard_skin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, steam_deck_keyboard_skin, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  steam_deck_keyboard_skin_ = steam_deck_keyboard_skin;
  // @@protoc_insertion_point(field_set_allocated:CPlayer_GetSteamDeckKeyboardSkin_Response.steam_deck_keyboard_skin)
}

// -------------------------------------------------------------------

// CPlayer_SetSteamDeckKeyboardSkin_Request

// optional uint64 communityitemid = 1;
inline bool CPlayer_SetSteamDeckKeyboardSkin_Request::_internal_has_communityitemid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPlayer_SetSteamDeckKeyboardSkin_Request::has_communityitemid() const {
  return _internal_has_communityitemid();
}
inline void CPlayer_SetSteamDeckKeyboardSkin_Request::clear_communityitemid() {
  communityitemid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CPlayer_SetSteamDeckKeyboardSkin_Request::_internal_communityitemid() const {
  return communityitemid_;
}
inline uint64_t CPlayer_SetSteamDeckKeyboardSkin_Request::communityitemid() const {
  // @@protoc_insertion_point(field_get:CPlayer_SetSteamDeckKeyboardSkin_Request.communityitemid)
  return _internal_communityitemid();
}
inline void CPlayer_SetSteamDeckKeyboardSkin_Request::_internal_set_communityitemid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  communityitemid_ = value;
}
inline void CPlayer_SetSteamDeckKeyboardSkin_Request::set_communityitemid(uint64_t value) {
  _internal_set_communityitemid(value);
  // @@protoc_insertion_point(field_set:CPlayer_SetSteamDeckKeyboardSkin_Request.communityitemid)
}

// -------------------------------------------------------------------

// CPlayer_SetSteamDeckKeyboardSkin_Response

// -------------------------------------------------------------------

// CPlayer_GetProfileItemsOwned_Request

// optional string language = 1;
inline bool CPlayer_GetProfileItemsOwned_Request::_internal_has_language() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPlayer_GetProfileItemsOwned_Request::has_language() const {
  return _internal_has_language();
}
inline void CPlayer_GetProfileItemsOwned_Request::clear_language() {
  language_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CPlayer_GetProfileItemsOwned_Request::language() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetProfileItemsOwned_Request.language)
  return _internal_language();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CPlayer_GetProfileItemsOwned_Request::set_language(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CPlayer_GetProfileItemsOwned_Request.language)
}
inline std::string* CPlayer_GetProfileItemsOwned_Request::mutable_language() {
  std::string* _s = _internal_mutable_language();
  // @@protoc_insertion_point(field_mutable:CPlayer_GetProfileItemsOwned_Request.language)
  return _s;
}
inline const std::string& CPlayer_GetProfileItemsOwned_Request::_internal_language() const {
  return language_.Get();
}
inline void CPlayer_GetProfileItemsOwned_Request::_internal_set_language(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CPlayer_GetProfileItemsOwned_Request::_internal_mutable_language() {
  _has_bits_[0] |= 0x00000001u;
  return language_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CPlayer_GetProfileItemsOwned_Request::release_language() {
  // @@protoc_insertion_point(field_release:CPlayer_GetProfileItemsOwned_Request.language)
  if (!_internal_has_language()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = language_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (language_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CPlayer_GetProfileItemsOwned_Request::set_allocated_language(std::string* language) {
  if (language != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  language_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (language_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CPlayer_GetProfileItemsOwned_Request.language)
}

// repeated .ECommunityItemClass filters = 2;
inline int CPlayer_GetProfileItemsOwned_Request::_internal_filters_size() const {
  return filters_.size();
}
inline int CPlayer_GetProfileItemsOwned_Request::filters_size() const {
  return _internal_filters_size();
}
inline void CPlayer_GetProfileItemsOwned_Request::clear_filters() {
  filters_.Clear();
}
inline ::ECommunityItemClass CPlayer_GetProfileItemsOwned_Request::_internal_filters(int index) const {
  return static_cast< ::ECommunityItemClass >(filters_.Get(index));
}
inline ::ECommunityItemClass CPlayer_GetProfileItemsOwned_Request::filters(int index) const {
  // @@protoc_insertion_point(field_get:CPlayer_GetProfileItemsOwned_Request.filters)
  return _internal_filters(index);
}
inline void CPlayer_GetProfileItemsOwned_Request::set_filters(int index, ::ECommunityItemClass value) {
  assert(::ECommunityItemClass_IsValid(value));
  filters_.Set(index, value);
  // @@protoc_insertion_point(field_set:CPlayer_GetProfileItemsOwned_Request.filters)
}
inline void CPlayer_GetProfileItemsOwned_Request::_internal_add_filters(::ECommunityItemClass value) {
  assert(::ECommunityItemClass_IsValid(value));
  filters_.Add(value);
}
inline void CPlayer_GetProfileItemsOwned_Request::add_filters(::ECommunityItemClass value) {
  _internal_add_filters(value);
  // @@protoc_insertion_point(field_add:CPlayer_GetProfileItemsOwned_Request.filters)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
CPlayer_GetProfileItemsOwned_Request::filters() const {
  // @@protoc_insertion_point(field_list:CPlayer_GetProfileItemsOwned_Request.filters)
  return filters_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CPlayer_GetProfileItemsOwned_Request::_internal_mutable_filters() {
  return &filters_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CPlayer_GetProfileItemsOwned_Request::mutable_filters() {
  // @@protoc_insertion_point(field_mutable_list:CPlayer_GetProfileItemsOwned_Request.filters)
  return _internal_mutable_filters();
}

// -------------------------------------------------------------------

// CPlayer_GetProfileItemsOwned_Response

// repeated .ProfileItem profile_backgrounds = 1;
inline int CPlayer_GetProfileItemsOwned_Response::_internal_profile_backgrounds_size() const {
  return profile_backgrounds_.size();
}
inline int CPlayer_GetProfileItemsOwned_Response::profile_backgrounds_size() const {
  return _internal_profile_backgrounds_size();
}
inline void CPlayer_GetProfileItemsOwned_Response::clear_profile_backgrounds() {
  profile_backgrounds_.Clear();
}
inline ::ProfileItem* CPlayer_GetProfileItemsOwned_Response::mutable_profile_backgrounds(int index) {
  // @@protoc_insertion_point(field_mutable:CPlayer_GetProfileItemsOwned_Response.profile_backgrounds)
  return profile_backgrounds_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfileItem >*
CPlayer_GetProfileItemsOwned_Response::mutable_profile_backgrounds() {
  // @@protoc_insertion_point(field_mutable_list:CPlayer_GetProfileItemsOwned_Response.profile_backgrounds)
  return &profile_backgrounds_;
}
inline const ::ProfileItem& CPlayer_GetProfileItemsOwned_Response::_internal_profile_backgrounds(int index) const {
  return profile_backgrounds_.Get(index);
}
inline const ::ProfileItem& CPlayer_GetProfileItemsOwned_Response::profile_backgrounds(int index) const {
  // @@protoc_insertion_point(field_get:CPlayer_GetProfileItemsOwned_Response.profile_backgrounds)
  return _internal_profile_backgrounds(index);
}
inline ::ProfileItem* CPlayer_GetProfileItemsOwned_Response::_internal_add_profile_backgrounds() {
  return profile_backgrounds_.Add();
}
inline ::ProfileItem* CPlayer_GetProfileItemsOwned_Response::add_profile_backgrounds() {
  ::ProfileItem* _add = _internal_add_profile_backgrounds();
  // @@protoc_insertion_point(field_add:CPlayer_GetProfileItemsOwned_Response.profile_backgrounds)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfileItem >&
CPlayer_GetProfileItemsOwned_Response::profile_backgrounds() const {
  // @@protoc_insertion_point(field_list:CPlayer_GetProfileItemsOwned_Response.profile_backgrounds)
  return profile_backgrounds_;
}

// repeated .ProfileItem mini_profile_backgrounds = 2;
inline int CPlayer_GetProfileItemsOwned_Response::_internal_mini_profile_backgrounds_size() const {
  return mini_profile_backgrounds_.size();
}
inline int CPlayer_GetProfileItemsOwned_Response::mini_profile_backgrounds_size() const {
  return _internal_mini_profile_backgrounds_size();
}
inline void CPlayer_GetProfileItemsOwned_Response::clear_mini_profile_backgrounds() {
  mini_profile_backgrounds_.Clear();
}
inline ::ProfileItem* CPlayer_GetProfileItemsOwned_Response::mutable_mini_profile_backgrounds(int index) {
  // @@protoc_insertion_point(field_mutable:CPlayer_GetProfileItemsOwned_Response.mini_profile_backgrounds)
  return mini_profile_backgrounds_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfileItem >*
CPlayer_GetProfileItemsOwned_Response::mutable_mini_profile_backgrounds() {
  // @@protoc_insertion_point(field_mutable_list:CPlayer_GetProfileItemsOwned_Response.mini_profile_backgrounds)
  return &mini_profile_backgrounds_;
}
inline const ::ProfileItem& CPlayer_GetProfileItemsOwned_Response::_internal_mini_profile_backgrounds(int index) const {
  return mini_profile_backgrounds_.Get(index);
}
inline const ::ProfileItem& CPlayer_GetProfileItemsOwned_Response::mini_profile_backgrounds(int index) const {
  // @@protoc_insertion_point(field_get:CPlayer_GetProfileItemsOwned_Response.mini_profile_backgrounds)
  return _internal_mini_profile_backgrounds(index);
}
inline ::ProfileItem* CPlayer_GetProfileItemsOwned_Response::_internal_add_mini_profile_backgrounds() {
  return mini_profile_backgrounds_.Add();
}
inline ::ProfileItem* CPlayer_GetProfileItemsOwned_Response::add_mini_profile_backgrounds() {
  ::ProfileItem* _add = _internal_add_mini_profile_backgrounds();
  // @@protoc_insertion_point(field_add:CPlayer_GetProfileItemsOwned_Response.mini_profile_backgrounds)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfileItem >&
CPlayer_GetProfileItemsOwned_Response::mini_profile_backgrounds() const {
  // @@protoc_insertion_point(field_list:CPlayer_GetProfileItemsOwned_Response.mini_profile_backgrounds)
  return mini_profile_backgrounds_;
}

// repeated .ProfileItem avatar_frames = 3;
inline int CPlayer_GetProfileItemsOwned_Response::_internal_avatar_frames_size() const {
  return avatar_frames_.size();
}
inline int CPlayer_GetProfileItemsOwned_Response::avatar_frames_size() const {
  return _internal_avatar_frames_size();
}
inline void CPlayer_GetProfileItemsOwned_Response::clear_avatar_frames() {
  avatar_frames_.Clear();
}
inline ::ProfileItem* CPlayer_GetProfileItemsOwned_Response::mutable_avatar_frames(int index) {
  // @@protoc_insertion_point(field_mutable:CPlayer_GetProfileItemsOwned_Response.avatar_frames)
  return avatar_frames_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfileItem >*
CPlayer_GetProfileItemsOwned_Response::mutable_avatar_frames() {
  // @@protoc_insertion_point(field_mutable_list:CPlayer_GetProfileItemsOwned_Response.avatar_frames)
  return &avatar_frames_;
}
inline const ::ProfileItem& CPlayer_GetProfileItemsOwned_Response::_internal_avatar_frames(int index) const {
  return avatar_frames_.Get(index);
}
inline const ::ProfileItem& CPlayer_GetProfileItemsOwned_Response::avatar_frames(int index) const {
  // @@protoc_insertion_point(field_get:CPlayer_GetProfileItemsOwned_Response.avatar_frames)
  return _internal_avatar_frames(index);
}
inline ::ProfileItem* CPlayer_GetProfileItemsOwned_Response::_internal_add_avatar_frames() {
  return avatar_frames_.Add();
}
inline ::ProfileItem* CPlayer_GetProfileItemsOwned_Response::add_avatar_frames() {
  ::ProfileItem* _add = _internal_add_avatar_frames();
  // @@protoc_insertion_point(field_add:CPlayer_GetProfileItemsOwned_Response.avatar_frames)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfileItem >&
CPlayer_GetProfileItemsOwned_Response::avatar_frames() const {
  // @@protoc_insertion_point(field_list:CPlayer_GetProfileItemsOwned_Response.avatar_frames)
  return avatar_frames_;
}

// repeated .ProfileItem animated_avatars = 4;
inline int CPlayer_GetProfileItemsOwned_Response::_internal_animated_avatars_size() const {
  return animated_avatars_.size();
}
inline int CPlayer_GetProfileItemsOwned_Response::animated_avatars_size() const {
  return _internal_animated_avatars_size();
}
inline void CPlayer_GetProfileItemsOwned_Response::clear_animated_avatars() {
  animated_avatars_.Clear();
}
inline ::ProfileItem* CPlayer_GetProfileItemsOwned_Response::mutable_animated_avatars(int index) {
  // @@protoc_insertion_point(field_mutable:CPlayer_GetProfileItemsOwned_Response.animated_avatars)
  return animated_avatars_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfileItem >*
CPlayer_GetProfileItemsOwned_Response::mutable_animated_avatars() {
  // @@protoc_insertion_point(field_mutable_list:CPlayer_GetProfileItemsOwned_Response.animated_avatars)
  return &animated_avatars_;
}
inline const ::ProfileItem& CPlayer_GetProfileItemsOwned_Response::_internal_animated_avatars(int index) const {
  return animated_avatars_.Get(index);
}
inline const ::ProfileItem& CPlayer_GetProfileItemsOwned_Response::animated_avatars(int index) const {
  // @@protoc_insertion_point(field_get:CPlayer_GetProfileItemsOwned_Response.animated_avatars)
  return _internal_animated_avatars(index);
}
inline ::ProfileItem* CPlayer_GetProfileItemsOwned_Response::_internal_add_animated_avatars() {
  return animated_avatars_.Add();
}
inline ::ProfileItem* CPlayer_GetProfileItemsOwned_Response::add_animated_avatars() {
  ::ProfileItem* _add = _internal_add_animated_avatars();
  // @@protoc_insertion_point(field_add:CPlayer_GetProfileItemsOwned_Response.animated_avatars)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfileItem >&
CPlayer_GetProfileItemsOwned_Response::animated_avatars() const {
  // @@protoc_insertion_point(field_list:CPlayer_GetProfileItemsOwned_Response.animated_avatars)
  return animated_avatars_;
}

// repeated .ProfileItem profile_modifiers = 5;
inline int CPlayer_GetProfileItemsOwned_Response::_internal_profile_modifiers_size() const {
  return profile_modifiers_.size();
}
inline int CPlayer_GetProfileItemsOwned_Response::profile_modifiers_size() const {
  return _internal_profile_modifiers_size();
}
inline void CPlayer_GetProfileItemsOwned_Response::clear_profile_modifiers() {
  profile_modifiers_.Clear();
}
inline ::ProfileItem* CPlayer_GetProfileItemsOwned_Response::mutable_profile_modifiers(int index) {
  // @@protoc_insertion_point(field_mutable:CPlayer_GetProfileItemsOwned_Response.profile_modifiers)
  return profile_modifiers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfileItem >*
CPlayer_GetProfileItemsOwned_Response::mutable_profile_modifiers() {
  // @@protoc_insertion_point(field_mutable_list:CPlayer_GetProfileItemsOwned_Response.profile_modifiers)
  return &profile_modifiers_;
}
inline const ::ProfileItem& CPlayer_GetProfileItemsOwned_Response::_internal_profile_modifiers(int index) const {
  return profile_modifiers_.Get(index);
}
inline const ::ProfileItem& CPlayer_GetProfileItemsOwned_Response::profile_modifiers(int index) const {
  // @@protoc_insertion_point(field_get:CPlayer_GetProfileItemsOwned_Response.profile_modifiers)
  return _internal_profile_modifiers(index);
}
inline ::ProfileItem* CPlayer_GetProfileItemsOwned_Response::_internal_add_profile_modifiers() {
  return profile_modifiers_.Add();
}
inline ::ProfileItem* CPlayer_GetProfileItemsOwned_Response::add_profile_modifiers() {
  ::ProfileItem* _add = _internal_add_profile_modifiers();
  // @@protoc_insertion_point(field_add:CPlayer_GetProfileItemsOwned_Response.profile_modifiers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfileItem >&
CPlayer_GetProfileItemsOwned_Response::profile_modifiers() const {
  // @@protoc_insertion_point(field_list:CPlayer_GetProfileItemsOwned_Response.profile_modifiers)
  return profile_modifiers_;
}

// repeated .ProfileItem steam_deck_keyboard_skins = 6;
inline int CPlayer_GetProfileItemsOwned_Response::_internal_steam_deck_keyboard_skins_size() const {
  return steam_deck_keyboard_skins_.size();
}
inline int CPlayer_GetProfileItemsOwned_Response::steam_deck_keyboard_skins_size() const {
  return _internal_steam_deck_keyboard_skins_size();
}
inline void CPlayer_GetProfileItemsOwned_Response::clear_steam_deck_keyboard_skins() {
  steam_deck_keyboard_skins_.Clear();
}
inline ::ProfileItem* CPlayer_GetProfileItemsOwned_Response::mutable_steam_deck_keyboard_skins(int index) {
  // @@protoc_insertion_point(field_mutable:CPlayer_GetProfileItemsOwned_Response.steam_deck_keyboard_skins)
  return steam_deck_keyboard_skins_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfileItem >*
CPlayer_GetProfileItemsOwned_Response::mutable_steam_deck_keyboard_skins() {
  // @@protoc_insertion_point(field_mutable_list:CPlayer_GetProfileItemsOwned_Response.steam_deck_keyboard_skins)
  return &steam_deck_keyboard_skins_;
}
inline const ::ProfileItem& CPlayer_GetProfileItemsOwned_Response::_internal_steam_deck_keyboard_skins(int index) const {
  return steam_deck_keyboard_skins_.Get(index);
}
inline const ::ProfileItem& CPlayer_GetProfileItemsOwned_Response::steam_deck_keyboard_skins(int index) const {
  // @@protoc_insertion_point(field_get:CPlayer_GetProfileItemsOwned_Response.steam_deck_keyboard_skins)
  return _internal_steam_deck_keyboard_skins(index);
}
inline ::ProfileItem* CPlayer_GetProfileItemsOwned_Response::_internal_add_steam_deck_keyboard_skins() {
  return steam_deck_keyboard_skins_.Add();
}
inline ::ProfileItem* CPlayer_GetProfileItemsOwned_Response::add_steam_deck_keyboard_skins() {
  ::ProfileItem* _add = _internal_add_steam_deck_keyboard_skins();
  // @@protoc_insertion_point(field_add:CPlayer_GetProfileItemsOwned_Response.steam_deck_keyboard_skins)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfileItem >&
CPlayer_GetProfileItemsOwned_Response::steam_deck_keyboard_skins() const {
  // @@protoc_insertion_point(field_list:CPlayer_GetProfileItemsOwned_Response.steam_deck_keyboard_skins)
  return steam_deck_keyboard_skins_;
}

// repeated .ProfileItem steam_deck_startup_movies = 7;
inline int CPlayer_GetProfileItemsOwned_Response::_internal_steam_deck_startup_movies_size() const {
  return steam_deck_startup_movies_.size();
}
inline int CPlayer_GetProfileItemsOwned_Response::steam_deck_startup_movies_size() const {
  return _internal_steam_deck_startup_movies_size();
}
inline void CPlayer_GetProfileItemsOwned_Response::clear_steam_deck_startup_movies() {
  steam_deck_startup_movies_.Clear();
}
inline ::ProfileItem* CPlayer_GetProfileItemsOwned_Response::mutable_steam_deck_startup_movies(int index) {
  // @@protoc_insertion_point(field_mutable:CPlayer_GetProfileItemsOwned_Response.steam_deck_startup_movies)
  return steam_deck_startup_movies_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfileItem >*
CPlayer_GetProfileItemsOwned_Response::mutable_steam_deck_startup_movies() {
  // @@protoc_insertion_point(field_mutable_list:CPlayer_GetProfileItemsOwned_Response.steam_deck_startup_movies)
  return &steam_deck_startup_movies_;
}
inline const ::ProfileItem& CPlayer_GetProfileItemsOwned_Response::_internal_steam_deck_startup_movies(int index) const {
  return steam_deck_startup_movies_.Get(index);
}
inline const ::ProfileItem& CPlayer_GetProfileItemsOwned_Response::steam_deck_startup_movies(int index) const {
  // @@protoc_insertion_point(field_get:CPlayer_GetProfileItemsOwned_Response.steam_deck_startup_movies)
  return _internal_steam_deck_startup_movies(index);
}
inline ::ProfileItem* CPlayer_GetProfileItemsOwned_Response::_internal_add_steam_deck_startup_movies() {
  return steam_deck_startup_movies_.Add();
}
inline ::ProfileItem* CPlayer_GetProfileItemsOwned_Response::add_steam_deck_startup_movies() {
  ::ProfileItem* _add = _internal_add_steam_deck_startup_movies();
  // @@protoc_insertion_point(field_add:CPlayer_GetProfileItemsOwned_Response.steam_deck_startup_movies)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfileItem >&
CPlayer_GetProfileItemsOwned_Response::steam_deck_startup_movies() const {
  // @@protoc_insertion_point(field_list:CPlayer_GetProfileItemsOwned_Response.steam_deck_startup_movies)
  return steam_deck_startup_movies_;
}

// -------------------------------------------------------------------

// CPlayer_GetProfileItemsEquipped_Request

// optional fixed64 steamid = 1;
inline bool CPlayer_GetProfileItemsEquipped_Request::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPlayer_GetProfileItemsEquipped_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CPlayer_GetProfileItemsEquipped_Request::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CPlayer_GetProfileItemsEquipped_Request::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CPlayer_GetProfileItemsEquipped_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetProfileItemsEquipped_Request.steamid)
  return _internal_steamid();
}
inline void CPlayer_GetProfileItemsEquipped_Request::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  steamid_ = value;
}
inline void CPlayer_GetProfileItemsEquipped_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetProfileItemsEquipped_Request.steamid)
}

// optional string language = 2;
inline bool CPlayer_GetProfileItemsEquipped_Request::_internal_has_language() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPlayer_GetProfileItemsEquipped_Request::has_language() const {
  return _internal_has_language();
}
inline void CPlayer_GetProfileItemsEquipped_Request::clear_language() {
  language_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CPlayer_GetProfileItemsEquipped_Request::language() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetProfileItemsEquipped_Request.language)
  return _internal_language();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CPlayer_GetProfileItemsEquipped_Request::set_language(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CPlayer_GetProfileItemsEquipped_Request.language)
}
inline std::string* CPlayer_GetProfileItemsEquipped_Request::mutable_language() {
  std::string* _s = _internal_mutable_language();
  // @@protoc_insertion_point(field_mutable:CPlayer_GetProfileItemsEquipped_Request.language)
  return _s;
}
inline const std::string& CPlayer_GetProfileItemsEquipped_Request::_internal_language() const {
  return language_.Get();
}
inline void CPlayer_GetProfileItemsEquipped_Request::_internal_set_language(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CPlayer_GetProfileItemsEquipped_Request::_internal_mutable_language() {
  _has_bits_[0] |= 0x00000001u;
  return language_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CPlayer_GetProfileItemsEquipped_Request::release_language() {
  // @@protoc_insertion_point(field_release:CPlayer_GetProfileItemsEquipped_Request.language)
  if (!_internal_has_language()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = language_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (language_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CPlayer_GetProfileItemsEquipped_Request::set_allocated_language(std::string* language) {
  if (language != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  language_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (language_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CPlayer_GetProfileItemsEquipped_Request.language)
}

// -------------------------------------------------------------------

// CPlayer_GetProfileItemsEquipped_Response

// optional .ProfileItem profile_background = 1;
inline bool CPlayer_GetProfileItemsEquipped_Response::_internal_has_profile_background() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || profile_background_ != nullptr);
  return value;
}
inline bool CPlayer_GetProfileItemsEquipped_Response::has_profile_background() const {
  return _internal_has_profile_background();
}
inline void CPlayer_GetProfileItemsEquipped_Response::clear_profile_background() {
  if (profile_background_ != nullptr) profile_background_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ProfileItem& CPlayer_GetProfileItemsEquipped_Response::_internal_profile_background() const {
  const ::ProfileItem* p = profile_background_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProfileItem&>(
      ::_ProfileItem_default_instance_);
}
inline const ::ProfileItem& CPlayer_GetProfileItemsEquipped_Response::profile_background() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetProfileItemsEquipped_Response.profile_background)
  return _internal_profile_background();
}
inline void CPlayer_GetProfileItemsEquipped_Response::unsafe_arena_set_allocated_profile_background(
    ::ProfileItem* profile_background) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(profile_background_);
  }
  profile_background_ = profile_background;
  if (profile_background) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CPlayer_GetProfileItemsEquipped_Response.profile_background)
}
inline ::ProfileItem* CPlayer_GetProfileItemsEquipped_Response::release_profile_background() {
  _has_bits_[0] &= ~0x00000001u;
  ::ProfileItem* temp = profile_background_;
  profile_background_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProfileItem* CPlayer_GetProfileItemsEquipped_Response::unsafe_arena_release_profile_background() {
  // @@protoc_insertion_point(field_release:CPlayer_GetProfileItemsEquipped_Response.profile_background)
  _has_bits_[0] &= ~0x00000001u;
  ::ProfileItem* temp = profile_background_;
  profile_background_ = nullptr;
  return temp;
}
inline ::ProfileItem* CPlayer_GetProfileItemsEquipped_Response::_internal_mutable_profile_background() {
  _has_bits_[0] |= 0x00000001u;
  if (profile_background_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProfileItem>(GetArenaForAllocation());
    profile_background_ = p;
  }
  return profile_background_;
}
inline ::ProfileItem* CPlayer_GetProfileItemsEquipped_Response::mutable_profile_background() {
  ::ProfileItem* _msg = _internal_mutable_profile_background();
  // @@protoc_insertion_point(field_mutable:CPlayer_GetProfileItemsEquipped_Response.profile_background)
  return _msg;
}
inline void CPlayer_GetProfileItemsEquipped_Response::set_allocated_profile_background(::ProfileItem* profile_background) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete profile_background_;
  }
  if (profile_background) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ProfileItem>::GetOwningArena(profile_background);
    if (message_arena != submessage_arena) {
      profile_background = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, profile_background, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  profile_background_ = profile_background;
  // @@protoc_insertion_point(field_set_allocated:CPlayer_GetProfileItemsEquipped_Response.profile_background)
}

// optional .ProfileItem mini_profile_background = 2;
inline bool CPlayer_GetProfileItemsEquipped_Response::_internal_has_mini_profile_background() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || mini_profile_background_ != nullptr);
  return value;
}
inline bool CPlayer_GetProfileItemsEquipped_Response::has_mini_profile_background() const {
  return _internal_has_mini_profile_background();
}
inline void CPlayer_GetProfileItemsEquipped_Response::clear_mini_profile_background() {
  if (mini_profile_background_ != nullptr) mini_profile_background_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::ProfileItem& CPlayer_GetProfileItemsEquipped_Response::_internal_mini_profile_background() const {
  const ::ProfileItem* p = mini_profile_background_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProfileItem&>(
      ::_ProfileItem_default_instance_);
}
inline const ::ProfileItem& CPlayer_GetProfileItemsEquipped_Response::mini_profile_background() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetProfileItemsEquipped_Response.mini_profile_background)
  return _internal_mini_profile_background();
}
inline void CPlayer_GetProfileItemsEquipped_Response::unsafe_arena_set_allocated_mini_profile_background(
    ::ProfileItem* mini_profile_background) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mini_profile_background_);
  }
  mini_profile_background_ = mini_profile_background;
  if (mini_profile_background) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CPlayer_GetProfileItemsEquipped_Response.mini_profile_background)
}
inline ::ProfileItem* CPlayer_GetProfileItemsEquipped_Response::release_mini_profile_background() {
  _has_bits_[0] &= ~0x00000002u;
  ::ProfileItem* temp = mini_profile_background_;
  mini_profile_background_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProfileItem* CPlayer_GetProfileItemsEquipped_Response::unsafe_arena_release_mini_profile_background() {
  // @@protoc_insertion_point(field_release:CPlayer_GetProfileItemsEquipped_Response.mini_profile_background)
  _has_bits_[0] &= ~0x00000002u;
  ::ProfileItem* temp = mini_profile_background_;
  mini_profile_background_ = nullptr;
  return temp;
}
inline ::ProfileItem* CPlayer_GetProfileItemsEquipped_Response::_internal_mutable_mini_profile_background() {
  _has_bits_[0] |= 0x00000002u;
  if (mini_profile_background_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProfileItem>(GetArenaForAllocation());
    mini_profile_background_ = p;
  }
  return mini_profile_background_;
}
inline ::ProfileItem* CPlayer_GetProfileItemsEquipped_Response::mutable_mini_profile_background() {
  ::ProfileItem* _msg = _internal_mutable_mini_profile_background();
  // @@protoc_insertion_point(field_mutable:CPlayer_GetProfileItemsEquipped_Response.mini_profile_background)
  return _msg;
}
inline void CPlayer_GetProfileItemsEquipped_Response::set_allocated_mini_profile_background(::ProfileItem* mini_profile_background) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete mini_profile_background_;
  }
  if (mini_profile_background) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ProfileItem>::GetOwningArena(mini_profile_background);
    if (message_arena != submessage_arena) {
      mini_profile_background = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mini_profile_background, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  mini_profile_background_ = mini_profile_background;
  // @@protoc_insertion_point(field_set_allocated:CPlayer_GetProfileItemsEquipped_Response.mini_profile_background)
}

// optional .ProfileItem avatar_frame = 3;
inline bool CPlayer_GetProfileItemsEquipped_Response::_internal_has_avatar_frame() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || avatar_frame_ != nullptr);
  return value;
}
inline bool CPlayer_GetProfileItemsEquipped_Response::has_avatar_frame() const {
  return _internal_has_avatar_frame();
}
inline void CPlayer_GetProfileItemsEquipped_Response::clear_avatar_frame() {
  if (avatar_frame_ != nullptr) avatar_frame_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::ProfileItem& CPlayer_GetProfileItemsEquipped_Response::_internal_avatar_frame() const {
  const ::ProfileItem* p = avatar_frame_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProfileItem&>(
      ::_ProfileItem_default_instance_);
}
inline const ::ProfileItem& CPlayer_GetProfileItemsEquipped_Response::avatar_frame() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetProfileItemsEquipped_Response.avatar_frame)
  return _internal_avatar_frame();
}
inline void CPlayer_GetProfileItemsEquipped_Response::unsafe_arena_set_allocated_avatar_frame(
    ::ProfileItem* avatar_frame) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(avatar_frame_);
  }
  avatar_frame_ = avatar_frame;
  if (avatar_frame) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CPlayer_GetProfileItemsEquipped_Response.avatar_frame)
}
inline ::ProfileItem* CPlayer_GetProfileItemsEquipped_Response::release_avatar_frame() {
  _has_bits_[0] &= ~0x00000004u;
  ::ProfileItem* temp = avatar_frame_;
  avatar_frame_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProfileItem* CPlayer_GetProfileItemsEquipped_Response::unsafe_arena_release_avatar_frame() {
  // @@protoc_insertion_point(field_release:CPlayer_GetProfileItemsEquipped_Response.avatar_frame)
  _has_bits_[0] &= ~0x00000004u;
  ::ProfileItem* temp = avatar_frame_;
  avatar_frame_ = nullptr;
  return temp;
}
inline ::ProfileItem* CPlayer_GetProfileItemsEquipped_Response::_internal_mutable_avatar_frame() {
  _has_bits_[0] |= 0x00000004u;
  if (avatar_frame_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProfileItem>(GetArenaForAllocation());
    avatar_frame_ = p;
  }
  return avatar_frame_;
}
inline ::ProfileItem* CPlayer_GetProfileItemsEquipped_Response::mutable_avatar_frame() {
  ::ProfileItem* _msg = _internal_mutable_avatar_frame();
  // @@protoc_insertion_point(field_mutable:CPlayer_GetProfileItemsEquipped_Response.avatar_frame)
  return _msg;
}
inline void CPlayer_GetProfileItemsEquipped_Response::set_allocated_avatar_frame(::ProfileItem* avatar_frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete avatar_frame_;
  }
  if (avatar_frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ProfileItem>::GetOwningArena(avatar_frame);
    if (message_arena != submessage_arena) {
      avatar_frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, avatar_frame, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  avatar_frame_ = avatar_frame;
  // @@protoc_insertion_point(field_set_allocated:CPlayer_GetProfileItemsEquipped_Response.avatar_frame)
}

// optional .ProfileItem animated_avatar = 4;
inline bool CPlayer_GetProfileItemsEquipped_Response::_internal_has_animated_avatar() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || animated_avatar_ != nullptr);
  return value;
}
inline bool CPlayer_GetProfileItemsEquipped_Response::has_animated_avatar() const {
  return _internal_has_animated_avatar();
}
inline void CPlayer_GetProfileItemsEquipped_Response::clear_animated_avatar() {
  if (animated_avatar_ != nullptr) animated_avatar_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::ProfileItem& CPlayer_GetProfileItemsEquipped_Response::_internal_animated_avatar() const {
  const ::ProfileItem* p = animated_avatar_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProfileItem&>(
      ::_ProfileItem_default_instance_);
}
inline const ::ProfileItem& CPlayer_GetProfileItemsEquipped_Response::animated_avatar() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetProfileItemsEquipped_Response.animated_avatar)
  return _internal_animated_avatar();
}
inline void CPlayer_GetProfileItemsEquipped_Response::unsafe_arena_set_allocated_animated_avatar(
    ::ProfileItem* animated_avatar) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(animated_avatar_);
  }
  animated_avatar_ = animated_avatar;
  if (animated_avatar) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CPlayer_GetProfileItemsEquipped_Response.animated_avatar)
}
inline ::ProfileItem* CPlayer_GetProfileItemsEquipped_Response::release_animated_avatar() {
  _has_bits_[0] &= ~0x00000008u;
  ::ProfileItem* temp = animated_avatar_;
  animated_avatar_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProfileItem* CPlayer_GetProfileItemsEquipped_Response::unsafe_arena_release_animated_avatar() {
  // @@protoc_insertion_point(field_release:CPlayer_GetProfileItemsEquipped_Response.animated_avatar)
  _has_bits_[0] &= ~0x00000008u;
  ::ProfileItem* temp = animated_avatar_;
  animated_avatar_ = nullptr;
  return temp;
}
inline ::ProfileItem* CPlayer_GetProfileItemsEquipped_Response::_internal_mutable_animated_avatar() {
  _has_bits_[0] |= 0x00000008u;
  if (animated_avatar_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProfileItem>(GetArenaForAllocation());
    animated_avatar_ = p;
  }
  return animated_avatar_;
}
inline ::ProfileItem* CPlayer_GetProfileItemsEquipped_Response::mutable_animated_avatar() {
  ::ProfileItem* _msg = _internal_mutable_animated_avatar();
  // @@protoc_insertion_point(field_mutable:CPlayer_GetProfileItemsEquipped_Response.animated_avatar)
  return _msg;
}
inline void CPlayer_GetProfileItemsEquipped_Response::set_allocated_animated_avatar(::ProfileItem* animated_avatar) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete animated_avatar_;
  }
  if (animated_avatar) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ProfileItem>::GetOwningArena(animated_avatar);
    if (message_arena != submessage_arena) {
      animated_avatar = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, animated_avatar, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  animated_avatar_ = animated_avatar;
  // @@protoc_insertion_point(field_set_allocated:CPlayer_GetProfileItemsEquipped_Response.animated_avatar)
}

// optional .ProfileItem profile_modifier = 5;
inline bool CPlayer_GetProfileItemsEquipped_Response::_internal_has_profile_modifier() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || profile_modifier_ != nullptr);
  return value;
}
inline bool CPlayer_GetProfileItemsEquipped_Response::has_profile_modifier() const {
  return _internal_has_profile_modifier();
}
inline void CPlayer_GetProfileItemsEquipped_Response::clear_profile_modifier() {
  if (profile_modifier_ != nullptr) profile_modifier_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::ProfileItem& CPlayer_GetProfileItemsEquipped_Response::_internal_profile_modifier() const {
  const ::ProfileItem* p = profile_modifier_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProfileItem&>(
      ::_ProfileItem_default_instance_);
}
inline const ::ProfileItem& CPlayer_GetProfileItemsEquipped_Response::profile_modifier() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetProfileItemsEquipped_Response.profile_modifier)
  return _internal_profile_modifier();
}
inline void CPlayer_GetProfileItemsEquipped_Response::unsafe_arena_set_allocated_profile_modifier(
    ::ProfileItem* profile_modifier) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(profile_modifier_);
  }
  profile_modifier_ = profile_modifier;
  if (profile_modifier) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CPlayer_GetProfileItemsEquipped_Response.profile_modifier)
}
inline ::ProfileItem* CPlayer_GetProfileItemsEquipped_Response::release_profile_modifier() {
  _has_bits_[0] &= ~0x00000010u;
  ::ProfileItem* temp = profile_modifier_;
  profile_modifier_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProfileItem* CPlayer_GetProfileItemsEquipped_Response::unsafe_arena_release_profile_modifier() {
  // @@protoc_insertion_point(field_release:CPlayer_GetProfileItemsEquipped_Response.profile_modifier)
  _has_bits_[0] &= ~0x00000010u;
  ::ProfileItem* temp = profile_modifier_;
  profile_modifier_ = nullptr;
  return temp;
}
inline ::ProfileItem* CPlayer_GetProfileItemsEquipped_Response::_internal_mutable_profile_modifier() {
  _has_bits_[0] |= 0x00000010u;
  if (profile_modifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProfileItem>(GetArenaForAllocation());
    profile_modifier_ = p;
  }
  return profile_modifier_;
}
inline ::ProfileItem* CPlayer_GetProfileItemsEquipped_Response::mutable_profile_modifier() {
  ::ProfileItem* _msg = _internal_mutable_profile_modifier();
  // @@protoc_insertion_point(field_mutable:CPlayer_GetProfileItemsEquipped_Response.profile_modifier)
  return _msg;
}
inline void CPlayer_GetProfileItemsEquipped_Response::set_allocated_profile_modifier(::ProfileItem* profile_modifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete profile_modifier_;
  }
  if (profile_modifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ProfileItem>::GetOwningArena(profile_modifier);
    if (message_arena != submessage_arena) {
      profile_modifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, profile_modifier, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  profile_modifier_ = profile_modifier;
  // @@protoc_insertion_point(field_set_allocated:CPlayer_GetProfileItemsEquipped_Response.profile_modifier)
}

// optional .ProfileItem steam_deck_keyboard_skin = 6;
inline bool CPlayer_GetProfileItemsEquipped_Response::_internal_has_steam_deck_keyboard_skin() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || steam_deck_keyboard_skin_ != nullptr);
  return value;
}
inline bool CPlayer_GetProfileItemsEquipped_Response::has_steam_deck_keyboard_skin() const {
  return _internal_has_steam_deck_keyboard_skin();
}
inline void CPlayer_GetProfileItemsEquipped_Response::clear_steam_deck_keyboard_skin() {
  if (steam_deck_keyboard_skin_ != nullptr) steam_deck_keyboard_skin_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::ProfileItem& CPlayer_GetProfileItemsEquipped_Response::_internal_steam_deck_keyboard_skin() const {
  const ::ProfileItem* p = steam_deck_keyboard_skin_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProfileItem&>(
      ::_ProfileItem_default_instance_);
}
inline const ::ProfileItem& CPlayer_GetProfileItemsEquipped_Response::steam_deck_keyboard_skin() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetProfileItemsEquipped_Response.steam_deck_keyboard_skin)
  return _internal_steam_deck_keyboard_skin();
}
inline void CPlayer_GetProfileItemsEquipped_Response::unsafe_arena_set_allocated_steam_deck_keyboard_skin(
    ::ProfileItem* steam_deck_keyboard_skin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(steam_deck_keyboard_skin_);
  }
  steam_deck_keyboard_skin_ = steam_deck_keyboard_skin;
  if (steam_deck_keyboard_skin) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CPlayer_GetProfileItemsEquipped_Response.steam_deck_keyboard_skin)
}
inline ::ProfileItem* CPlayer_GetProfileItemsEquipped_Response::release_steam_deck_keyboard_skin() {
  _has_bits_[0] &= ~0x00000020u;
  ::ProfileItem* temp = steam_deck_keyboard_skin_;
  steam_deck_keyboard_skin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProfileItem* CPlayer_GetProfileItemsEquipped_Response::unsafe_arena_release_steam_deck_keyboard_skin() {
  // @@protoc_insertion_point(field_release:CPlayer_GetProfileItemsEquipped_Response.steam_deck_keyboard_skin)
  _has_bits_[0] &= ~0x00000020u;
  ::ProfileItem* temp = steam_deck_keyboard_skin_;
  steam_deck_keyboard_skin_ = nullptr;
  return temp;
}
inline ::ProfileItem* CPlayer_GetProfileItemsEquipped_Response::_internal_mutable_steam_deck_keyboard_skin() {
  _has_bits_[0] |= 0x00000020u;
  if (steam_deck_keyboard_skin_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProfileItem>(GetArenaForAllocation());
    steam_deck_keyboard_skin_ = p;
  }
  return steam_deck_keyboard_skin_;
}
inline ::ProfileItem* CPlayer_GetProfileItemsEquipped_Response::mutable_steam_deck_keyboard_skin() {
  ::ProfileItem* _msg = _internal_mutable_steam_deck_keyboard_skin();
  // @@protoc_insertion_point(field_mutable:CPlayer_GetProfileItemsEquipped_Response.steam_deck_keyboard_skin)
  return _msg;
}
inline void CPlayer_GetProfileItemsEquipped_Response::set_allocated_steam_deck_keyboard_skin(::ProfileItem* steam_deck_keyboard_skin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete steam_deck_keyboard_skin_;
  }
  if (steam_deck_keyboard_skin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ProfileItem>::GetOwningArena(steam_deck_keyboard_skin);
    if (message_arena != submessage_arena) {
      steam_deck_keyboard_skin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, steam_deck_keyboard_skin, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  steam_deck_keyboard_skin_ = steam_deck_keyboard_skin;
  // @@protoc_insertion_point(field_set_allocated:CPlayer_GetProfileItemsEquipped_Response.steam_deck_keyboard_skin)
}

// -------------------------------------------------------------------

// CPlayer_SetEquippedProfileItemFlags_Request

// optional uint64 communityitemid = 1;
inline bool CPlayer_SetEquippedProfileItemFlags_Request::_internal_has_communityitemid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPlayer_SetEquippedProfileItemFlags_Request::has_communityitemid() const {
  return _internal_has_communityitemid();
}
inline void CPlayer_SetEquippedProfileItemFlags_Request::clear_communityitemid() {
  communityitemid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CPlayer_SetEquippedProfileItemFlags_Request::_internal_communityitemid() const {
  return communityitemid_;
}
inline uint64_t CPlayer_SetEquippedProfileItemFlags_Request::communityitemid() const {
  // @@protoc_insertion_point(field_get:CPlayer_SetEquippedProfileItemFlags_Request.communityitemid)
  return _internal_communityitemid();
}
inline void CPlayer_SetEquippedProfileItemFlags_Request::_internal_set_communityitemid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  communityitemid_ = value;
}
inline void CPlayer_SetEquippedProfileItemFlags_Request::set_communityitemid(uint64_t value) {
  _internal_set_communityitemid(value);
  // @@protoc_insertion_point(field_set:CPlayer_SetEquippedProfileItemFlags_Request.communityitemid)
}

// optional uint32 flags = 2 [(.description) = "Set of EProfileItemEquippedFlag"];
inline bool CPlayer_SetEquippedProfileItemFlags_Request::_internal_has_flags() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPlayer_SetEquippedProfileItemFlags_Request::has_flags() const {
  return _internal_has_flags();
}
inline void CPlayer_SetEquippedProfileItemFlags_Request::clear_flags() {
  flags_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CPlayer_SetEquippedProfileItemFlags_Request::_internal_flags() const {
  return flags_;
}
inline uint32_t CPlayer_SetEquippedProfileItemFlags_Request::flags() const {
  // @@protoc_insertion_point(field_get:CPlayer_SetEquippedProfileItemFlags_Request.flags)
  return _internal_flags();
}
inline void CPlayer_SetEquippedProfileItemFlags_Request::_internal_set_flags(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  flags_ = value;
}
inline void CPlayer_SetEquippedProfileItemFlags_Request::set_flags(uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:CPlayer_SetEquippedProfileItemFlags_Request.flags)
}

// -------------------------------------------------------------------

// CPlayer_SetEquippedProfileItemFlags_Response

// -------------------------------------------------------------------

// CPlayer_GetEmoticonList_Request

// -------------------------------------------------------------------

// CPlayer_GetEmoticonList_Response_Emoticon

// optional string name = 1;
inline bool CPlayer_GetEmoticonList_Response_Emoticon::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPlayer_GetEmoticonList_Response_Emoticon::has_name() const {
  return _internal_has_name();
}
inline void CPlayer_GetEmoticonList_Response_Emoticon::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CPlayer_GetEmoticonList_Response_Emoticon::name() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetEmoticonList_Response.Emoticon.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CPlayer_GetEmoticonList_Response_Emoticon::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CPlayer_GetEmoticonList_Response.Emoticon.name)
}
inline std::string* CPlayer_GetEmoticonList_Response_Emoticon::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CPlayer_GetEmoticonList_Response.Emoticon.name)
  return _s;
}
inline const std::string& CPlayer_GetEmoticonList_Response_Emoticon::_internal_name() const {
  return name_.Get();
}
inline void CPlayer_GetEmoticonList_Response_Emoticon::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CPlayer_GetEmoticonList_Response_Emoticon::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CPlayer_GetEmoticonList_Response_Emoticon::release_name() {
  // @@protoc_insertion_point(field_release:CPlayer_GetEmoticonList_Response.Emoticon.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CPlayer_GetEmoticonList_Response_Emoticon::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CPlayer_GetEmoticonList_Response.Emoticon.name)
}

// optional int32 count = 2;
inline bool CPlayer_GetEmoticonList_Response_Emoticon::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPlayer_GetEmoticonList_Response_Emoticon::has_count() const {
  return _internal_has_count();
}
inline void CPlayer_GetEmoticonList_Response_Emoticon::clear_count() {
  count_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t CPlayer_GetEmoticonList_Response_Emoticon::_internal_count() const {
  return count_;
}
inline int32_t CPlayer_GetEmoticonList_Response_Emoticon::count() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetEmoticonList_Response.Emoticon.count)
  return _internal_count();
}
inline void CPlayer_GetEmoticonList_Response_Emoticon::_internal_set_count(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  count_ = value;
}
inline void CPlayer_GetEmoticonList_Response_Emoticon::set_count(int32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetEmoticonList_Response.Emoticon.count)
}

// optional uint32 time_last_used = 3;
inline bool CPlayer_GetEmoticonList_Response_Emoticon::_internal_has_time_last_used() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CPlayer_GetEmoticonList_Response_Emoticon::has_time_last_used() const {
  return _internal_has_time_last_used();
}
inline void CPlayer_GetEmoticonList_Response_Emoticon::clear_time_last_used() {
  time_last_used_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CPlayer_GetEmoticonList_Response_Emoticon::_internal_time_last_used() const {
  return time_last_used_;
}
inline uint32_t CPlayer_GetEmoticonList_Response_Emoticon::time_last_used() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetEmoticonList_Response.Emoticon.time_last_used)
  return _internal_time_last_used();
}
inline void CPlayer_GetEmoticonList_Response_Emoticon::_internal_set_time_last_used(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  time_last_used_ = value;
}
inline void CPlayer_GetEmoticonList_Response_Emoticon::set_time_last_used(uint32_t value) {
  _internal_set_time_last_used(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetEmoticonList_Response.Emoticon.time_last_used)
}

// optional uint32 use_count = 4;
inline bool CPlayer_GetEmoticonList_Response_Emoticon::_internal_has_use_count() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CPlayer_GetEmoticonList_Response_Emoticon::has_use_count() const {
  return _internal_has_use_count();
}
inline void CPlayer_GetEmoticonList_Response_Emoticon::clear_use_count() {
  use_count_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CPlayer_GetEmoticonList_Response_Emoticon::_internal_use_count() const {
  return use_count_;
}
inline uint32_t CPlayer_GetEmoticonList_Response_Emoticon::use_count() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetEmoticonList_Response.Emoticon.use_count)
  return _internal_use_count();
}
inline void CPlayer_GetEmoticonList_Response_Emoticon::_internal_set_use_count(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  use_count_ = value;
}
inline void CPlayer_GetEmoticonList_Response_Emoticon::set_use_count(uint32_t value) {
  _internal_set_use_count(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetEmoticonList_Response.Emoticon.use_count)
}

// optional uint32 time_received = 5;
inline bool CPlayer_GetEmoticonList_Response_Emoticon::_internal_has_time_received() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CPlayer_GetEmoticonList_Response_Emoticon::has_time_received() const {
  return _internal_has_time_received();
}
inline void CPlayer_GetEmoticonList_Response_Emoticon::clear_time_received() {
  time_received_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CPlayer_GetEmoticonList_Response_Emoticon::_internal_time_received() const {
  return time_received_;
}
inline uint32_t CPlayer_GetEmoticonList_Response_Emoticon::time_received() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetEmoticonList_Response.Emoticon.time_received)
  return _internal_time_received();
}
inline void CPlayer_GetEmoticonList_Response_Emoticon::_internal_set_time_received(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  time_received_ = value;
}
inline void CPlayer_GetEmoticonList_Response_Emoticon::set_time_received(uint32_t value) {
  _internal_set_time_received(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetEmoticonList_Response.Emoticon.time_received)
}

// optional uint32 appid = 6;
inline bool CPlayer_GetEmoticonList_Response_Emoticon::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CPlayer_GetEmoticonList_Response_Emoticon::has_appid() const {
  return _internal_has_appid();
}
inline void CPlayer_GetEmoticonList_Response_Emoticon::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CPlayer_GetEmoticonList_Response_Emoticon::_internal_appid() const {
  return appid_;
}
inline uint32_t CPlayer_GetEmoticonList_Response_Emoticon::appid() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetEmoticonList_Response.Emoticon.appid)
  return _internal_appid();
}
inline void CPlayer_GetEmoticonList_Response_Emoticon::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  appid_ = value;
}
inline void CPlayer_GetEmoticonList_Response_Emoticon::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetEmoticonList_Response.Emoticon.appid)
}

// -------------------------------------------------------------------

// CPlayer_GetEmoticonList_Response

// repeated .CPlayer_GetEmoticonList_Response.Emoticon emoticons = 1;
inline int CPlayer_GetEmoticonList_Response::_internal_emoticons_size() const {
  return emoticons_.size();
}
inline int CPlayer_GetEmoticonList_Response::emoticons_size() const {
  return _internal_emoticons_size();
}
inline void CPlayer_GetEmoticonList_Response::clear_emoticons() {
  emoticons_.Clear();
}
inline ::CPlayer_GetEmoticonList_Response_Emoticon* CPlayer_GetEmoticonList_Response::mutable_emoticons(int index) {
  // @@protoc_insertion_point(field_mutable:CPlayer_GetEmoticonList_Response.emoticons)
  return emoticons_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetEmoticonList_Response_Emoticon >*
CPlayer_GetEmoticonList_Response::mutable_emoticons() {
  // @@protoc_insertion_point(field_mutable_list:CPlayer_GetEmoticonList_Response.emoticons)
  return &emoticons_;
}
inline const ::CPlayer_GetEmoticonList_Response_Emoticon& CPlayer_GetEmoticonList_Response::_internal_emoticons(int index) const {
  return emoticons_.Get(index);
}
inline const ::CPlayer_GetEmoticonList_Response_Emoticon& CPlayer_GetEmoticonList_Response::emoticons(int index) const {
  // @@protoc_insertion_point(field_get:CPlayer_GetEmoticonList_Response.emoticons)
  return _internal_emoticons(index);
}
inline ::CPlayer_GetEmoticonList_Response_Emoticon* CPlayer_GetEmoticonList_Response::_internal_add_emoticons() {
  return emoticons_.Add();
}
inline ::CPlayer_GetEmoticonList_Response_Emoticon* CPlayer_GetEmoticonList_Response::add_emoticons() {
  ::CPlayer_GetEmoticonList_Response_Emoticon* _add = _internal_add_emoticons();
  // @@protoc_insertion_point(field_add:CPlayer_GetEmoticonList_Response.emoticons)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetEmoticonList_Response_Emoticon >&
CPlayer_GetEmoticonList_Response::emoticons() const {
  // @@protoc_insertion_point(field_list:CPlayer_GetEmoticonList_Response.emoticons)
  return emoticons_;
}

// -------------------------------------------------------------------

// CPlayer_GetTopAchievementsForGames_Request

// optional uint64 steamid = 1;
inline bool CPlayer_GetTopAchievementsForGames_Request::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPlayer_GetTopAchievementsForGames_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CPlayer_GetTopAchievementsForGames_Request::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CPlayer_GetTopAchievementsForGames_Request::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CPlayer_GetTopAchievementsForGames_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetTopAchievementsForGames_Request.steamid)
  return _internal_steamid();
}
inline void CPlayer_GetTopAchievementsForGames_Request::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  steamid_ = value;
}
inline void CPlayer_GetTopAchievementsForGames_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetTopAchievementsForGames_Request.steamid)
}

// optional string language = 2;
inline bool CPlayer_GetTopAchievementsForGames_Request::_internal_has_language() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPlayer_GetTopAchievementsForGames_Request::has_language() const {
  return _internal_has_language();
}
inline void CPlayer_GetTopAchievementsForGames_Request::clear_language() {
  language_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CPlayer_GetTopAchievementsForGames_Request::language() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetTopAchievementsForGames_Request.language)
  return _internal_language();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CPlayer_GetTopAchievementsForGames_Request::set_language(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CPlayer_GetTopAchievementsForGames_Request.language)
}
inline std::string* CPlayer_GetTopAchievementsForGames_Request::mutable_language() {
  std::string* _s = _internal_mutable_language();
  // @@protoc_insertion_point(field_mutable:CPlayer_GetTopAchievementsForGames_Request.language)
  return _s;
}
inline const std::string& CPlayer_GetTopAchievementsForGames_Request::_internal_language() const {
  return language_.Get();
}
inline void CPlayer_GetTopAchievementsForGames_Request::_internal_set_language(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CPlayer_GetTopAchievementsForGames_Request::_internal_mutable_language() {
  _has_bits_[0] |= 0x00000001u;
  return language_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CPlayer_GetTopAchievementsForGames_Request::release_language() {
  // @@protoc_insertion_point(field_release:CPlayer_GetTopAchievementsForGames_Request.language)
  if (!_internal_has_language()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = language_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (language_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CPlayer_GetTopAchievementsForGames_Request::set_allocated_language(std::string* language) {
  if (language != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  language_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (language_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CPlayer_GetTopAchievementsForGames_Request.language)
}

// optional uint32 max_achievements = 3 [(.description) = "The max achievements to load. Max 8"];
inline bool CPlayer_GetTopAchievementsForGames_Request::_internal_has_max_achievements() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CPlayer_GetTopAchievementsForGames_Request::has_max_achievements() const {
  return _internal_has_max_achievements();
}
inline void CPlayer_GetTopAchievementsForGames_Request::clear_max_achievements() {
  max_achievements_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CPlayer_GetTopAchievementsForGames_Request::_internal_max_achievements() const {
  return max_achievements_;
}
inline uint32_t CPlayer_GetTopAchievementsForGames_Request::max_achievements() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetTopAchievementsForGames_Request.max_achievements)
  return _internal_max_achievements();
}
inline void CPlayer_GetTopAchievementsForGames_Request::_internal_set_max_achievements(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  max_achievements_ = value;
}
inline void CPlayer_GetTopAchievementsForGames_Request::set_max_achievements(uint32_t value) {
  _internal_set_max_achievements(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetTopAchievementsForGames_Request.max_achievements)
}

// repeated uint32 appids = 4;
inline int CPlayer_GetTopAchievementsForGames_Request::_internal_appids_size() const {
  return appids_.size();
}
inline int CPlayer_GetTopAchievementsForGames_Request::appids_size() const {
  return _internal_appids_size();
}
inline void CPlayer_GetTopAchievementsForGames_Request::clear_appids() {
  appids_.Clear();
}
inline uint32_t CPlayer_GetTopAchievementsForGames_Request::_internal_appids(int index) const {
  return appids_.Get(index);
}
inline uint32_t CPlayer_GetTopAchievementsForGames_Request::appids(int index) const {
  // @@protoc_insertion_point(field_get:CPlayer_GetTopAchievementsForGames_Request.appids)
  return _internal_appids(index);
}
inline void CPlayer_GetTopAchievementsForGames_Request::set_appids(int index, uint32_t value) {
  appids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CPlayer_GetTopAchievementsForGames_Request.appids)
}
inline void CPlayer_GetTopAchievementsForGames_Request::_internal_add_appids(uint32_t value) {
  appids_.Add(value);
}
inline void CPlayer_GetTopAchievementsForGames_Request::add_appids(uint32_t value) {
  _internal_add_appids(value);
  // @@protoc_insertion_point(field_add:CPlayer_GetTopAchievementsForGames_Request.appids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CPlayer_GetTopAchievementsForGames_Request::_internal_appids() const {
  return appids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CPlayer_GetTopAchievementsForGames_Request::appids() const {
  // @@protoc_insertion_point(field_list:CPlayer_GetTopAchievementsForGames_Request.appids)
  return _internal_appids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CPlayer_GetTopAchievementsForGames_Request::_internal_mutable_appids() {
  return &appids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CPlayer_GetTopAchievementsForGames_Request::mutable_appids() {
  // @@protoc_insertion_point(field_mutable_list:CPlayer_GetTopAchievementsForGames_Request.appids)
  return _internal_mutable_appids();
}

// -------------------------------------------------------------------

// CPlayer_GetTopAchievementsForGames_Response_Achievement

// optional uint32 statid = 1;
inline bool CPlayer_GetTopAchievementsForGames_Response_Achievement::_internal_has_statid() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CPlayer_GetTopAchievementsForGames_Response_Achievement::has_statid() const {
  return _internal_has_statid();
}
inline void CPlayer_GetTopAchievementsForGames_Response_Achievement::clear_statid() {
  statid_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CPlayer_GetTopAchievementsForGames_Response_Achievement::_internal_statid() const {
  return statid_;
}
inline uint32_t CPlayer_GetTopAchievementsForGames_Response_Achievement::statid() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetTopAchievementsForGames_Response.Achievement.statid)
  return _internal_statid();
}
inline void CPlayer_GetTopAchievementsForGames_Response_Achievement::_internal_set_statid(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  statid_ = value;
}
inline void CPlayer_GetTopAchievementsForGames_Response_Achievement::set_statid(uint32_t value) {
  _internal_set_statid(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetTopAchievementsForGames_Response.Achievement.statid)
}

// optional uint32 bit = 2;
inline bool CPlayer_GetTopAchievementsForGames_Response_Achievement::_internal_has_bit() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CPlayer_GetTopAchievementsForGames_Response_Achievement::has_bit() const {
  return _internal_has_bit();
}
inline void CPlayer_GetTopAchievementsForGames_Response_Achievement::clear_bit() {
  bit_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CPlayer_GetTopAchievementsForGames_Response_Achievement::_internal_bit() const {
  return bit_;
}
inline uint32_t CPlayer_GetTopAchievementsForGames_Response_Achievement::bit() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetTopAchievementsForGames_Response.Achievement.bit)
  return _internal_bit();
}
inline void CPlayer_GetTopAchievementsForGames_Response_Achievement::_internal_set_bit(uint32_t value) {
  _has_bits_[0] |= 0x00000040u;
  bit_ = value;
}
inline void CPlayer_GetTopAchievementsForGames_Response_Achievement::set_bit(uint32_t value) {
  _internal_set_bit(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetTopAchievementsForGames_Response.Achievement.bit)
}

// optional string name = 3;
inline bool CPlayer_GetTopAchievementsForGames_Response_Achievement::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPlayer_GetTopAchievementsForGames_Response_Achievement::has_name() const {
  return _internal_has_name();
}
inline void CPlayer_GetTopAchievementsForGames_Response_Achievement::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CPlayer_GetTopAchievementsForGames_Response_Achievement::name() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetTopAchievementsForGames_Response.Achievement.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CPlayer_GetTopAchievementsForGames_Response_Achievement::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CPlayer_GetTopAchievementsForGames_Response.Achievement.name)
}
inline std::string* CPlayer_GetTopAchievementsForGames_Response_Achievement::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CPlayer_GetTopAchievementsForGames_Response.Achievement.name)
  return _s;
}
inline const std::string& CPlayer_GetTopAchievementsForGames_Response_Achievement::_internal_name() const {
  return name_.Get();
}
inline void CPlayer_GetTopAchievementsForGames_Response_Achievement::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CPlayer_GetTopAchievementsForGames_Response_Achievement::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CPlayer_GetTopAchievementsForGames_Response_Achievement::release_name() {
  // @@protoc_insertion_point(field_release:CPlayer_GetTopAchievementsForGames_Response.Achievement.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CPlayer_GetTopAchievementsForGames_Response_Achievement::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CPlayer_GetTopAchievementsForGames_Response.Achievement.name)
}

// optional string desc = 4;
inline bool CPlayer_GetTopAchievementsForGames_Response_Achievement::_internal_has_desc() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPlayer_GetTopAchievementsForGames_Response_Achievement::has_desc() const {
  return _internal_has_desc();
}
inline void CPlayer_GetTopAchievementsForGames_Response_Achievement::clear_desc() {
  desc_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CPlayer_GetTopAchievementsForGames_Response_Achievement::desc() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetTopAchievementsForGames_Response.Achievement.desc)
  return _internal_desc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CPlayer_GetTopAchievementsForGames_Response_Achievement::set_desc(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CPlayer_GetTopAchievementsForGames_Response.Achievement.desc)
}
inline std::string* CPlayer_GetTopAchievementsForGames_Response_Achievement::mutable_desc() {
  std::string* _s = _internal_mutable_desc();
  // @@protoc_insertion_point(field_mutable:CPlayer_GetTopAchievementsForGames_Response.Achievement.desc)
  return _s;
}
inline const std::string& CPlayer_GetTopAchievementsForGames_Response_Achievement::_internal_desc() const {
  return desc_.Get();
}
inline void CPlayer_GetTopAchievementsForGames_Response_Achievement::_internal_set_desc(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CPlayer_GetTopAchievementsForGames_Response_Achievement::_internal_mutable_desc() {
  _has_bits_[0] |= 0x00000002u;
  return desc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CPlayer_GetTopAchievementsForGames_Response_Achievement::release_desc() {
  // @@protoc_insertion_point(field_release:CPlayer_GetTopAchievementsForGames_Response.Achievement.desc)
  if (!_internal_has_desc()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = desc_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (desc_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CPlayer_GetTopAchievementsForGames_Response_Achievement::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  desc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), desc,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (desc_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CPlayer_GetTopAchievementsForGames_Response.Achievement.desc)
}

// optional string icon = 5;
inline bool CPlayer_GetTopAchievementsForGames_Response_Achievement::_internal_has_icon() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CPlayer_GetTopAchievementsForGames_Response_Achievement::has_icon() const {
  return _internal_has_icon();
}
inline void CPlayer_GetTopAchievementsForGames_Response_Achievement::clear_icon() {
  icon_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CPlayer_GetTopAchievementsForGames_Response_Achievement::icon() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetTopAchievementsForGames_Response.Achievement.icon)
  return _internal_icon();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CPlayer_GetTopAchievementsForGames_Response_Achievement::set_icon(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CPlayer_GetTopAchievementsForGames_Response.Achievement.icon)
}
inline std::string* CPlayer_GetTopAchievementsForGames_Response_Achievement::mutable_icon() {
  std::string* _s = _internal_mutable_icon();
  // @@protoc_insertion_point(field_mutable:CPlayer_GetTopAchievementsForGames_Response.Achievement.icon)
  return _s;
}
inline const std::string& CPlayer_GetTopAchievementsForGames_Response_Achievement::_internal_icon() const {
  return icon_.Get();
}
inline void CPlayer_GetTopAchievementsForGames_Response_Achievement::_internal_set_icon(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CPlayer_GetTopAchievementsForGames_Response_Achievement::_internal_mutable_icon() {
  _has_bits_[0] |= 0x00000004u;
  return icon_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CPlayer_GetTopAchievementsForGames_Response_Achievement::release_icon() {
  // @@protoc_insertion_point(field_release:CPlayer_GetTopAchievementsForGames_Response.Achievement.icon)
  if (!_internal_has_icon()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = icon_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (icon_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    icon_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CPlayer_GetTopAchievementsForGames_Response_Achievement::set_allocated_icon(std::string* icon) {
  if (icon != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  icon_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), icon,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (icon_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    icon_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CPlayer_GetTopAchievementsForGames_Response.Achievement.icon)
}

// optional string icon_gray = 6;
inline bool CPlayer_GetTopAchievementsForGames_Response_Achievement::_internal_has_icon_gray() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CPlayer_GetTopAchievementsForGames_Response_Achievement::has_icon_gray() const {
  return _internal_has_icon_gray();
}
inline void CPlayer_GetTopAchievementsForGames_Response_Achievement::clear_icon_gray() {
  icon_gray_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CPlayer_GetTopAchievementsForGames_Response_Achievement::icon_gray() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetTopAchievementsForGames_Response.Achievement.icon_gray)
  return _internal_icon_gray();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CPlayer_GetTopAchievementsForGames_Response_Achievement::set_icon_gray(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 icon_gray_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CPlayer_GetTopAchievementsForGames_Response.Achievement.icon_gray)
}
inline std::string* CPlayer_GetTopAchievementsForGames_Response_Achievement::mutable_icon_gray() {
  std::string* _s = _internal_mutable_icon_gray();
  // @@protoc_insertion_point(field_mutable:CPlayer_GetTopAchievementsForGames_Response.Achievement.icon_gray)
  return _s;
}
inline const std::string& CPlayer_GetTopAchievementsForGames_Response_Achievement::_internal_icon_gray() const {
  return icon_gray_.Get();
}
inline void CPlayer_GetTopAchievementsForGames_Response_Achievement::_internal_set_icon_gray(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  icon_gray_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CPlayer_GetTopAchievementsForGames_Response_Achievement::_internal_mutable_icon_gray() {
  _has_bits_[0] |= 0x00000008u;
  return icon_gray_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CPlayer_GetTopAchievementsForGames_Response_Achievement::release_icon_gray() {
  // @@protoc_insertion_point(field_release:CPlayer_GetTopAchievementsForGames_Response.Achievement.icon_gray)
  if (!_internal_has_icon_gray()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = icon_gray_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (icon_gray_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    icon_gray_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CPlayer_GetTopAchievementsForGames_Response_Achievement::set_allocated_icon_gray(std::string* icon_gray) {
  if (icon_gray != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  icon_gray_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), icon_gray,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (icon_gray_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    icon_gray_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CPlayer_GetTopAchievementsForGames_Response.Achievement.icon_gray)
}

// optional bool hidden = 7;
inline bool CPlayer_GetTopAchievementsForGames_Response_Achievement::_internal_has_hidden() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CPlayer_GetTopAchievementsForGames_Response_Achievement::has_hidden() const {
  return _internal_has_hidden();
}
inline void CPlayer_GetTopAchievementsForGames_Response_Achievement::clear_hidden() {
  hidden_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CPlayer_GetTopAchievementsForGames_Response_Achievement::_internal_hidden() const {
  return hidden_;
}
inline bool CPlayer_GetTopAchievementsForGames_Response_Achievement::hidden() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetTopAchievementsForGames_Response.Achievement.hidden)
  return _internal_hidden();
}
inline void CPlayer_GetTopAchievementsForGames_Response_Achievement::_internal_set_hidden(bool value) {
  _has_bits_[0] |= 0x00000080u;
  hidden_ = value;
}
inline void CPlayer_GetTopAchievementsForGames_Response_Achievement::set_hidden(bool value) {
  _internal_set_hidden(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetTopAchievementsForGames_Response.Achievement.hidden)
}

// optional string player_percent_unlocked = 8 [(.description) = "Formatted to one decimal place, min value is 0.1, max value 100"];
inline bool CPlayer_GetTopAchievementsForGames_Response_Achievement::_internal_has_player_percent_unlocked() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CPlayer_GetTopAchievementsForGames_Response_Achievement::has_player_percent_unlocked() const {
  return _internal_has_player_percent_unlocked();
}
inline void CPlayer_GetTopAchievementsForGames_Response_Achievement::clear_player_percent_unlocked() {
  player_percent_unlocked_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& CPlayer_GetTopAchievementsForGames_Response_Achievement::player_percent_unlocked() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetTopAchievementsForGames_Response.Achievement.player_percent_unlocked)
  return _internal_player_percent_unlocked();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CPlayer_GetTopAchievementsForGames_Response_Achievement::set_player_percent_unlocked(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 player_percent_unlocked_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CPlayer_GetTopAchievementsForGames_Response.Achievement.player_percent_unlocked)
}
inline std::string* CPlayer_GetTopAchievementsForGames_Response_Achievement::mutable_player_percent_unlocked() {
  std::string* _s = _internal_mutable_player_percent_unlocked();
  // @@protoc_insertion_point(field_mutable:CPlayer_GetTopAchievementsForGames_Response.Achievement.player_percent_unlocked)
  return _s;
}
inline const std::string& CPlayer_GetTopAchievementsForGames_Response_Achievement::_internal_player_percent_unlocked() const {
  return player_percent_unlocked_.Get();
}
inline void CPlayer_GetTopAchievementsForGames_Response_Achievement::_internal_set_player_percent_unlocked(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  player_percent_unlocked_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CPlayer_GetTopAchievementsForGames_Response_Achievement::_internal_mutable_player_percent_unlocked() {
  _has_bits_[0] |= 0x00000010u;
  return player_percent_unlocked_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CPlayer_GetTopAchievementsForGames_Response_Achievement::release_player_percent_unlocked() {
  // @@protoc_insertion_point(field_release:CPlayer_GetTopAchievementsForGames_Response.Achievement.player_percent_unlocked)
  if (!_internal_has_player_percent_unlocked()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  auto* p = player_percent_unlocked_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (player_percent_unlocked_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    player_percent_unlocked_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CPlayer_GetTopAchievementsForGames_Response_Achievement::set_allocated_player_percent_unlocked(std::string* player_percent_unlocked) {
  if (player_percent_unlocked != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  player_percent_unlocked_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), player_percent_unlocked,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (player_percent_unlocked_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    player_percent_unlocked_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CPlayer_GetTopAchievementsForGames_Response.Achievement.player_percent_unlocked)
}

// -------------------------------------------------------------------

// CPlayer_GetTopAchievementsForGames_Response_Game

// optional uint32 appid = 1;
inline bool CPlayer_GetTopAchievementsForGames_Response_Game::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPlayer_GetTopAchievementsForGames_Response_Game::has_appid() const {
  return _internal_has_appid();
}
inline void CPlayer_GetTopAchievementsForGames_Response_Game::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CPlayer_GetTopAchievementsForGames_Response_Game::_internal_appid() const {
  return appid_;
}
inline uint32_t CPlayer_GetTopAchievementsForGames_Response_Game::appid() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetTopAchievementsForGames_Response.Game.appid)
  return _internal_appid();
}
inline void CPlayer_GetTopAchievementsForGames_Response_Game::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  appid_ = value;
}
inline void CPlayer_GetTopAchievementsForGames_Response_Game::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetTopAchievementsForGames_Response.Game.appid)
}

// optional uint32 total_achievements = 2;
inline bool CPlayer_GetTopAchievementsForGames_Response_Game::_internal_has_total_achievements() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPlayer_GetTopAchievementsForGames_Response_Game::has_total_achievements() const {
  return _internal_has_total_achievements();
}
inline void CPlayer_GetTopAchievementsForGames_Response_Game::clear_total_achievements() {
  total_achievements_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CPlayer_GetTopAchievementsForGames_Response_Game::_internal_total_achievements() const {
  return total_achievements_;
}
inline uint32_t CPlayer_GetTopAchievementsForGames_Response_Game::total_achievements() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetTopAchievementsForGames_Response.Game.total_achievements)
  return _internal_total_achievements();
}
inline void CPlayer_GetTopAchievementsForGames_Response_Game::_internal_set_total_achievements(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  total_achievements_ = value;
}
inline void CPlayer_GetTopAchievementsForGames_Response_Game::set_total_achievements(uint32_t value) {
  _internal_set_total_achievements(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetTopAchievementsForGames_Response.Game.total_achievements)
}

// repeated .CPlayer_GetTopAchievementsForGames_Response.Achievement achievements = 3;
inline int CPlayer_GetTopAchievementsForGames_Response_Game::_internal_achievements_size() const {
  return achievements_.size();
}
inline int CPlayer_GetTopAchievementsForGames_Response_Game::achievements_size() const {
  return _internal_achievements_size();
}
inline void CPlayer_GetTopAchievementsForGames_Response_Game::clear_achievements() {
  achievements_.Clear();
}
inline ::CPlayer_GetTopAchievementsForGames_Response_Achievement* CPlayer_GetTopAchievementsForGames_Response_Game::mutable_achievements(int index) {
  // @@protoc_insertion_point(field_mutable:CPlayer_GetTopAchievementsForGames_Response.Game.achievements)
  return achievements_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetTopAchievementsForGames_Response_Achievement >*
CPlayer_GetTopAchievementsForGames_Response_Game::mutable_achievements() {
  // @@protoc_insertion_point(field_mutable_list:CPlayer_GetTopAchievementsForGames_Response.Game.achievements)
  return &achievements_;
}
inline const ::CPlayer_GetTopAchievementsForGames_Response_Achievement& CPlayer_GetTopAchievementsForGames_Response_Game::_internal_achievements(int index) const {
  return achievements_.Get(index);
}
inline const ::CPlayer_GetTopAchievementsForGames_Response_Achievement& CPlayer_GetTopAchievementsForGames_Response_Game::achievements(int index) const {
  // @@protoc_insertion_point(field_get:CPlayer_GetTopAchievementsForGames_Response.Game.achievements)
  return _internal_achievements(index);
}
inline ::CPlayer_GetTopAchievementsForGames_Response_Achievement* CPlayer_GetTopAchievementsForGames_Response_Game::_internal_add_achievements() {
  return achievements_.Add();
}
inline ::CPlayer_GetTopAchievementsForGames_Response_Achievement* CPlayer_GetTopAchievementsForGames_Response_Game::add_achievements() {
  ::CPlayer_GetTopAchievementsForGames_Response_Achievement* _add = _internal_add_achievements();
  // @@protoc_insertion_point(field_add:CPlayer_GetTopAchievementsForGames_Response.Game.achievements)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetTopAchievementsForGames_Response_Achievement >&
CPlayer_GetTopAchievementsForGames_Response_Game::achievements() const {
  // @@protoc_insertion_point(field_list:CPlayer_GetTopAchievementsForGames_Response.Game.achievements)
  return achievements_;
}

// -------------------------------------------------------------------

// CPlayer_GetTopAchievementsForGames_Response

// repeated .CPlayer_GetTopAchievementsForGames_Response.Game games = 1;
inline int CPlayer_GetTopAchievementsForGames_Response::_internal_games_size() const {
  return games_.size();
}
inline int CPlayer_GetTopAchievementsForGames_Response::games_size() const {
  return _internal_games_size();
}
inline void CPlayer_GetTopAchievementsForGames_Response::clear_games() {
  games_.Clear();
}
inline ::CPlayer_GetTopAchievementsForGames_Response_Game* CPlayer_GetTopAchievementsForGames_Response::mutable_games(int index) {
  // @@protoc_insertion_point(field_mutable:CPlayer_GetTopAchievementsForGames_Response.games)
  return games_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetTopAchievementsForGames_Response_Game >*
CPlayer_GetTopAchievementsForGames_Response::mutable_games() {
  // @@protoc_insertion_point(field_mutable_list:CPlayer_GetTopAchievementsForGames_Response.games)
  return &games_;
}
inline const ::CPlayer_GetTopAchievementsForGames_Response_Game& CPlayer_GetTopAchievementsForGames_Response::_internal_games(int index) const {
  return games_.Get(index);
}
inline const ::CPlayer_GetTopAchievementsForGames_Response_Game& CPlayer_GetTopAchievementsForGames_Response::games(int index) const {
  // @@protoc_insertion_point(field_get:CPlayer_GetTopAchievementsForGames_Response.games)
  return _internal_games(index);
}
inline ::CPlayer_GetTopAchievementsForGames_Response_Game* CPlayer_GetTopAchievementsForGames_Response::_internal_add_games() {
  return games_.Add();
}
inline ::CPlayer_GetTopAchievementsForGames_Response_Game* CPlayer_GetTopAchievementsForGames_Response::add_games() {
  ::CPlayer_GetTopAchievementsForGames_Response_Game* _add = _internal_add_games();
  // @@protoc_insertion_point(field_add:CPlayer_GetTopAchievementsForGames_Response.games)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetTopAchievementsForGames_Response_Game >&
CPlayer_GetTopAchievementsForGames_Response::games() const {
  // @@protoc_insertion_point(field_list:CPlayer_GetTopAchievementsForGames_Response.games)
  return games_;
}

// -------------------------------------------------------------------

// CPlayer_GetAchievementsProgress_Request

// optional uint64 steamid = 1;
inline bool CPlayer_GetAchievementsProgress_Request::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPlayer_GetAchievementsProgress_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CPlayer_GetAchievementsProgress_Request::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CPlayer_GetAchievementsProgress_Request::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CPlayer_GetAchievementsProgress_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetAchievementsProgress_Request.steamid)
  return _internal_steamid();
}
inline void CPlayer_GetAchievementsProgress_Request::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  steamid_ = value;
}
inline void CPlayer_GetAchievementsProgress_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetAchievementsProgress_Request.steamid)
}

// optional string language = 2;
inline bool CPlayer_GetAchievementsProgress_Request::_internal_has_language() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPlayer_GetAchievementsProgress_Request::has_language() const {
  return _internal_has_language();
}
inline void CPlayer_GetAchievementsProgress_Request::clear_language() {
  language_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CPlayer_GetAchievementsProgress_Request::language() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetAchievementsProgress_Request.language)
  return _internal_language();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CPlayer_GetAchievementsProgress_Request::set_language(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CPlayer_GetAchievementsProgress_Request.language)
}
inline std::string* CPlayer_GetAchievementsProgress_Request::mutable_language() {
  std::string* _s = _internal_mutable_language();
  // @@protoc_insertion_point(field_mutable:CPlayer_GetAchievementsProgress_Request.language)
  return _s;
}
inline const std::string& CPlayer_GetAchievementsProgress_Request::_internal_language() const {
  return language_.Get();
}
inline void CPlayer_GetAchievementsProgress_Request::_internal_set_language(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CPlayer_GetAchievementsProgress_Request::_internal_mutable_language() {
  _has_bits_[0] |= 0x00000001u;
  return language_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CPlayer_GetAchievementsProgress_Request::release_language() {
  // @@protoc_insertion_point(field_release:CPlayer_GetAchievementsProgress_Request.language)
  if (!_internal_has_language()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = language_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (language_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CPlayer_GetAchievementsProgress_Request::set_allocated_language(std::string* language) {
  if (language != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  language_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (language_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CPlayer_GetAchievementsProgress_Request.language)
}

// repeated uint32 appids = 3;
inline int CPlayer_GetAchievementsProgress_Request::_internal_appids_size() const {
  return appids_.size();
}
inline int CPlayer_GetAchievementsProgress_Request::appids_size() const {
  return _internal_appids_size();
}
inline void CPlayer_GetAchievementsProgress_Request::clear_appids() {
  appids_.Clear();
}
inline uint32_t CPlayer_GetAchievementsProgress_Request::_internal_appids(int index) const {
  return appids_.Get(index);
}
inline uint32_t CPlayer_GetAchievementsProgress_Request::appids(int index) const {
  // @@protoc_insertion_point(field_get:CPlayer_GetAchievementsProgress_Request.appids)
  return _internal_appids(index);
}
inline void CPlayer_GetAchievementsProgress_Request::set_appids(int index, uint32_t value) {
  appids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CPlayer_GetAchievementsProgress_Request.appids)
}
inline void CPlayer_GetAchievementsProgress_Request::_internal_add_appids(uint32_t value) {
  appids_.Add(value);
}
inline void CPlayer_GetAchievementsProgress_Request::add_appids(uint32_t value) {
  _internal_add_appids(value);
  // @@protoc_insertion_point(field_add:CPlayer_GetAchievementsProgress_Request.appids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CPlayer_GetAchievementsProgress_Request::_internal_appids() const {
  return appids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CPlayer_GetAchievementsProgress_Request::appids() const {
  // @@protoc_insertion_point(field_list:CPlayer_GetAchievementsProgress_Request.appids)
  return _internal_appids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CPlayer_GetAchievementsProgress_Request::_internal_mutable_appids() {
  return &appids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CPlayer_GetAchievementsProgress_Request::mutable_appids() {
  // @@protoc_insertion_point(field_mutable_list:CPlayer_GetAchievementsProgress_Request.appids)
  return _internal_mutable_appids();
}

// -------------------------------------------------------------------

// CPlayer_GetAchievementsProgress_Response_AchievementProgress

// optional uint32 appid = 1;
inline bool CPlayer_GetAchievementsProgress_Response_AchievementProgress::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPlayer_GetAchievementsProgress_Response_AchievementProgress::has_appid() const {
  return _internal_has_appid();
}
inline void CPlayer_GetAchievementsProgress_Response_AchievementProgress::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CPlayer_GetAchievementsProgress_Response_AchievementProgress::_internal_appid() const {
  return appid_;
}
inline uint32_t CPlayer_GetAchievementsProgress_Response_AchievementProgress::appid() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetAchievementsProgress_Response.AchievementProgress.appid)
  return _internal_appid();
}
inline void CPlayer_GetAchievementsProgress_Response_AchievementProgress::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  appid_ = value;
}
inline void CPlayer_GetAchievementsProgress_Response_AchievementProgress::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetAchievementsProgress_Response.AchievementProgress.appid)
}

// optional uint32 unlocked = 2;
inline bool CPlayer_GetAchievementsProgress_Response_AchievementProgress::_internal_has_unlocked() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPlayer_GetAchievementsProgress_Response_AchievementProgress::has_unlocked() const {
  return _internal_has_unlocked();
}
inline void CPlayer_GetAchievementsProgress_Response_AchievementProgress::clear_unlocked() {
  unlocked_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CPlayer_GetAchievementsProgress_Response_AchievementProgress::_internal_unlocked() const {
  return unlocked_;
}
inline uint32_t CPlayer_GetAchievementsProgress_Response_AchievementProgress::unlocked() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetAchievementsProgress_Response.AchievementProgress.unlocked)
  return _internal_unlocked();
}
inline void CPlayer_GetAchievementsProgress_Response_AchievementProgress::_internal_set_unlocked(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  unlocked_ = value;
}
inline void CPlayer_GetAchievementsProgress_Response_AchievementProgress::set_unlocked(uint32_t value) {
  _internal_set_unlocked(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetAchievementsProgress_Response.AchievementProgress.unlocked)
}

// optional uint32 total = 3;
inline bool CPlayer_GetAchievementsProgress_Response_AchievementProgress::_internal_has_total() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CPlayer_GetAchievementsProgress_Response_AchievementProgress::has_total() const {
  return _internal_has_total();
}
inline void CPlayer_GetAchievementsProgress_Response_AchievementProgress::clear_total() {
  total_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CPlayer_GetAchievementsProgress_Response_AchievementProgress::_internal_total() const {
  return total_;
}
inline uint32_t CPlayer_GetAchievementsProgress_Response_AchievementProgress::total() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetAchievementsProgress_Response.AchievementProgress.total)
  return _internal_total();
}
inline void CPlayer_GetAchievementsProgress_Response_AchievementProgress::_internal_set_total(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  total_ = value;
}
inline void CPlayer_GetAchievementsProgress_Response_AchievementProgress::set_total(uint32_t value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetAchievementsProgress_Response.AchievementProgress.total)
}

// optional float percentage = 4;
inline bool CPlayer_GetAchievementsProgress_Response_AchievementProgress::_internal_has_percentage() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CPlayer_GetAchievementsProgress_Response_AchievementProgress::has_percentage() const {
  return _internal_has_percentage();
}
inline void CPlayer_GetAchievementsProgress_Response_AchievementProgress::clear_percentage() {
  percentage_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float CPlayer_GetAchievementsProgress_Response_AchievementProgress::_internal_percentage() const {
  return percentage_;
}
inline float CPlayer_GetAchievementsProgress_Response_AchievementProgress::percentage() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetAchievementsProgress_Response.AchievementProgress.percentage)
  return _internal_percentage();
}
inline void CPlayer_GetAchievementsProgress_Response_AchievementProgress::_internal_set_percentage(float value) {
  _has_bits_[0] |= 0x00000008u;
  percentage_ = value;
}
inline void CPlayer_GetAchievementsProgress_Response_AchievementProgress::set_percentage(float value) {
  _internal_set_percentage(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetAchievementsProgress_Response.AchievementProgress.percentage)
}

// optional bool all_unlocked = 5;
inline bool CPlayer_GetAchievementsProgress_Response_AchievementProgress::_internal_has_all_unlocked() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CPlayer_GetAchievementsProgress_Response_AchievementProgress::has_all_unlocked() const {
  return _internal_has_all_unlocked();
}
inline void CPlayer_GetAchievementsProgress_Response_AchievementProgress::clear_all_unlocked() {
  all_unlocked_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CPlayer_GetAchievementsProgress_Response_AchievementProgress::_internal_all_unlocked() const {
  return all_unlocked_;
}
inline bool CPlayer_GetAchievementsProgress_Response_AchievementProgress::all_unlocked() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetAchievementsProgress_Response.AchievementProgress.all_unlocked)
  return _internal_all_unlocked();
}
inline void CPlayer_GetAchievementsProgress_Response_AchievementProgress::_internal_set_all_unlocked(bool value) {
  _has_bits_[0] |= 0x00000010u;
  all_unlocked_ = value;
}
inline void CPlayer_GetAchievementsProgress_Response_AchievementProgress::set_all_unlocked(bool value) {
  _internal_set_all_unlocked(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetAchievementsProgress_Response.AchievementProgress.all_unlocked)
}

// optional uint32 cache_time = 6;
inline bool CPlayer_GetAchievementsProgress_Response_AchievementProgress::_internal_has_cache_time() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CPlayer_GetAchievementsProgress_Response_AchievementProgress::has_cache_time() const {
  return _internal_has_cache_time();
}
inline void CPlayer_GetAchievementsProgress_Response_AchievementProgress::clear_cache_time() {
  cache_time_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CPlayer_GetAchievementsProgress_Response_AchievementProgress::_internal_cache_time() const {
  return cache_time_;
}
inline uint32_t CPlayer_GetAchievementsProgress_Response_AchievementProgress::cache_time() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetAchievementsProgress_Response.AchievementProgress.cache_time)
  return _internal_cache_time();
}
inline void CPlayer_GetAchievementsProgress_Response_AchievementProgress::_internal_set_cache_time(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  cache_time_ = value;
}
inline void CPlayer_GetAchievementsProgress_Response_AchievementProgress::set_cache_time(uint32_t value) {
  _internal_set_cache_time(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetAchievementsProgress_Response.AchievementProgress.cache_time)
}

// -------------------------------------------------------------------

// CPlayer_GetAchievementsProgress_Response

// repeated .CPlayer_GetAchievementsProgress_Response.AchievementProgress achievement_progress = 1;
inline int CPlayer_GetAchievementsProgress_Response::_internal_achievement_progress_size() const {
  return achievement_progress_.size();
}
inline int CPlayer_GetAchievementsProgress_Response::achievement_progress_size() const {
  return _internal_achievement_progress_size();
}
inline void CPlayer_GetAchievementsProgress_Response::clear_achievement_progress() {
  achievement_progress_.Clear();
}
inline ::CPlayer_GetAchievementsProgress_Response_AchievementProgress* CPlayer_GetAchievementsProgress_Response::mutable_achievement_progress(int index) {
  // @@protoc_insertion_point(field_mutable:CPlayer_GetAchievementsProgress_Response.achievement_progress)
  return achievement_progress_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetAchievementsProgress_Response_AchievementProgress >*
CPlayer_GetAchievementsProgress_Response::mutable_achievement_progress() {
  // @@protoc_insertion_point(field_mutable_list:CPlayer_GetAchievementsProgress_Response.achievement_progress)
  return &achievement_progress_;
}
inline const ::CPlayer_GetAchievementsProgress_Response_AchievementProgress& CPlayer_GetAchievementsProgress_Response::_internal_achievement_progress(int index) const {
  return achievement_progress_.Get(index);
}
inline const ::CPlayer_GetAchievementsProgress_Response_AchievementProgress& CPlayer_GetAchievementsProgress_Response::achievement_progress(int index) const {
  // @@protoc_insertion_point(field_get:CPlayer_GetAchievementsProgress_Response.achievement_progress)
  return _internal_achievement_progress(index);
}
inline ::CPlayer_GetAchievementsProgress_Response_AchievementProgress* CPlayer_GetAchievementsProgress_Response::_internal_add_achievement_progress() {
  return achievement_progress_.Add();
}
inline ::CPlayer_GetAchievementsProgress_Response_AchievementProgress* CPlayer_GetAchievementsProgress_Response::add_achievement_progress() {
  ::CPlayer_GetAchievementsProgress_Response_AchievementProgress* _add = _internal_add_achievement_progress();
  // @@protoc_insertion_point(field_add:CPlayer_GetAchievementsProgress_Response.achievement_progress)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetAchievementsProgress_Response_AchievementProgress >&
CPlayer_GetAchievementsProgress_Response::achievement_progress() const {
  // @@protoc_insertion_point(field_list:CPlayer_GetAchievementsProgress_Response.achievement_progress)
  return achievement_progress_;
}

// -------------------------------------------------------------------

// CPlayer_GetGameAchievements_Request

// optional uint32 appid = 1;
inline bool CPlayer_GetGameAchievements_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPlayer_GetGameAchievements_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CPlayer_GetGameAchievements_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CPlayer_GetGameAchievements_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CPlayer_GetGameAchievements_Request::appid() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetGameAchievements_Request.appid)
  return _internal_appid();
}
inline void CPlayer_GetGameAchievements_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  appid_ = value;
}
inline void CPlayer_GetGameAchievements_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetGameAchievements_Request.appid)
}

// optional string language = 2 [(.description) = "Lowercase, language shortnames"];
inline bool CPlayer_GetGameAchievements_Request::_internal_has_language() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPlayer_GetGameAchievements_Request::has_language() const {
  return _internal_has_language();
}
inline void CPlayer_GetGameAchievements_Request::clear_language() {
  language_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CPlayer_GetGameAchievements_Request::language() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetGameAchievements_Request.language)
  return _internal_language();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CPlayer_GetGameAchievements_Request::set_language(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CPlayer_GetGameAchievements_Request.language)
}
inline std::string* CPlayer_GetGameAchievements_Request::mutable_language() {
  std::string* _s = _internal_mutable_language();
  // @@protoc_insertion_point(field_mutable:CPlayer_GetGameAchievements_Request.language)
  return _s;
}
inline const std::string& CPlayer_GetGameAchievements_Request::_internal_language() const {
  return language_.Get();
}
inline void CPlayer_GetGameAchievements_Request::_internal_set_language(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CPlayer_GetGameAchievements_Request::_internal_mutable_language() {
  _has_bits_[0] |= 0x00000001u;
  return language_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CPlayer_GetGameAchievements_Request::release_language() {
  // @@protoc_insertion_point(field_release:CPlayer_GetGameAchievements_Request.language)
  if (!_internal_has_language()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = language_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (language_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CPlayer_GetGameAchievements_Request::set_allocated_language(std::string* language) {
  if (language != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  language_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (language_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CPlayer_GetGameAchievements_Request.language)
}

// -------------------------------------------------------------------

// CPlayer_GetGameAchievements_Response_Achievement

// optional string internal_name = 1 [(.description) = "Will come uppercase, internal facing name set by the partner; needed to associate with user unlock"];
inline bool CPlayer_GetGameAchievements_Response_Achievement::_internal_has_internal_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPlayer_GetGameAchievements_Response_Achievement::has_internal_name() const {
  return _internal_has_internal_name();
}
inline void CPlayer_GetGameAchievements_Response_Achievement::clear_internal_name() {
  internal_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CPlayer_GetGameAchievements_Response_Achievement::internal_name() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetGameAchievements_Response.Achievement.internal_name)
  return _internal_internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CPlayer_GetGameAchievements_Response_Achievement::set_internal_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 internal_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CPlayer_GetGameAchievements_Response.Achievement.internal_name)
}
inline std::string* CPlayer_GetGameAchievements_Response_Achievement::mutable_internal_name() {
  std::string* _s = _internal_mutable_internal_name();
  // @@protoc_insertion_point(field_mutable:CPlayer_GetGameAchievements_Response.Achievement.internal_name)
  return _s;
}
inline const std::string& CPlayer_GetGameAchievements_Response_Achievement::_internal_internal_name() const {
  return internal_name_.Get();
}
inline void CPlayer_GetGameAchievements_Response_Achievement::_internal_set_internal_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  internal_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CPlayer_GetGameAchievements_Response_Achievement::_internal_mutable_internal_name() {
  _has_bits_[0] |= 0x00000001u;
  return internal_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CPlayer_GetGameAchievements_Response_Achievement::release_internal_name() {
  // @@protoc_insertion_point(field_release:CPlayer_GetGameAchievements_Response.Achievement.internal_name)
  if (!_internal_has_internal_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = internal_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (internal_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    internal_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CPlayer_GetGameAchievements_Response_Achievement::set_allocated_internal_name(std::string* internal_name) {
  if (internal_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  internal_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), internal_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (internal_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    internal_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CPlayer_GetGameAchievements_Response.Achievement.internal_name)
}

// optional string localized_name = 2;
inline bool CPlayer_GetGameAchievements_Response_Achievement::_internal_has_localized_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPlayer_GetGameAchievements_Response_Achievement::has_localized_name() const {
  return _internal_has_localized_name();
}
inline void CPlayer_GetGameAchievements_Response_Achievement::clear_localized_name() {
  localized_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CPlayer_GetGameAchievements_Response_Achievement::localized_name() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetGameAchievements_Response.Achievement.localized_name)
  return _internal_localized_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CPlayer_GetGameAchievements_Response_Achievement::set_localized_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 localized_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CPlayer_GetGameAchievements_Response.Achievement.localized_name)
}
inline std::string* CPlayer_GetGameAchievements_Response_Achievement::mutable_localized_name() {
  std::string* _s = _internal_mutable_localized_name();
  // @@protoc_insertion_point(field_mutable:CPlayer_GetGameAchievements_Response.Achievement.localized_name)
  return _s;
}
inline const std::string& CPlayer_GetGameAchievements_Response_Achievement::_internal_localized_name() const {
  return localized_name_.Get();
}
inline void CPlayer_GetGameAchievements_Response_Achievement::_internal_set_localized_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  localized_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CPlayer_GetGameAchievements_Response_Achievement::_internal_mutable_localized_name() {
  _has_bits_[0] |= 0x00000002u;
  return localized_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CPlayer_GetGameAchievements_Response_Achievement::release_localized_name() {
  // @@protoc_insertion_point(field_release:CPlayer_GetGameAchievements_Response.Achievement.localized_name)
  if (!_internal_has_localized_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = localized_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (localized_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    localized_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CPlayer_GetGameAchievements_Response_Achievement::set_allocated_localized_name(std::string* localized_name) {
  if (localized_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  localized_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), localized_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (localized_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    localized_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CPlayer_GetGameAchievements_Response.Achievement.localized_name)
}

// optional string localized_desc = 3;
inline bool CPlayer_GetGameAchievements_Response_Achievement::_internal_has_localized_desc() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CPlayer_GetGameAchievements_Response_Achievement::has_localized_desc() const {
  return _internal_has_localized_desc();
}
inline void CPlayer_GetGameAchievements_Response_Achievement::clear_localized_desc() {
  localized_desc_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CPlayer_GetGameAchievements_Response_Achievement::localized_desc() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetGameAchievements_Response.Achievement.localized_desc)
  return _internal_localized_desc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CPlayer_GetGameAchievements_Response_Achievement::set_localized_desc(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 localized_desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CPlayer_GetGameAchievements_Response.Achievement.localized_desc)
}
inline std::string* CPlayer_GetGameAchievements_Response_Achievement::mutable_localized_desc() {
  std::string* _s = _internal_mutable_localized_desc();
  // @@protoc_insertion_point(field_mutable:CPlayer_GetGameAchievements_Response.Achievement.localized_desc)
  return _s;
}
inline const std::string& CPlayer_GetGameAchievements_Response_Achievement::_internal_localized_desc() const {
  return localized_desc_.Get();
}
inline void CPlayer_GetGameAchievements_Response_Achievement::_internal_set_localized_desc(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  localized_desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CPlayer_GetGameAchievements_Response_Achievement::_internal_mutable_localized_desc() {
  _has_bits_[0] |= 0x00000004u;
  return localized_desc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CPlayer_GetGameAchievements_Response_Achievement::release_localized_desc() {
  // @@protoc_insertion_point(field_release:CPlayer_GetGameAchievements_Response.Achievement.localized_desc)
  if (!_internal_has_localized_desc()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = localized_desc_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (localized_desc_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    localized_desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CPlayer_GetGameAchievements_Response_Achievement::set_allocated_localized_desc(std::string* localized_desc) {
  if (localized_desc != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  localized_desc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), localized_desc,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (localized_desc_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    localized_desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CPlayer_GetGameAchievements_Response.Achievement.localized_desc)
}

// optional string icon = 4;
inline bool CPlayer_GetGameAchievements_Response_Achievement::_internal_has_icon() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CPlayer_GetGameAchievements_Response_Achievement::has_icon() const {
  return _internal_has_icon();
}
inline void CPlayer_GetGameAchievements_Response_Achievement::clear_icon() {
  icon_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CPlayer_GetGameAchievements_Response_Achievement::icon() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetGameAchievements_Response.Achievement.icon)
  return _internal_icon();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CPlayer_GetGameAchievements_Response_Achievement::set_icon(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CPlayer_GetGameAchievements_Response.Achievement.icon)
}
inline std::string* CPlayer_GetGameAchievements_Response_Achievement::mutable_icon() {
  std::string* _s = _internal_mutable_icon();
  // @@protoc_insertion_point(field_mutable:CPlayer_GetGameAchievements_Response.Achievement.icon)
  return _s;
}
inline const std::string& CPlayer_GetGameAchievements_Response_Achievement::_internal_icon() const {
  return icon_.Get();
}
inline void CPlayer_GetGameAchievements_Response_Achievement::_internal_set_icon(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CPlayer_GetGameAchievements_Response_Achievement::_internal_mutable_icon() {
  _has_bits_[0] |= 0x00000008u;
  return icon_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CPlayer_GetGameAchievements_Response_Achievement::release_icon() {
  // @@protoc_insertion_point(field_release:CPlayer_GetGameAchievements_Response.Achievement.icon)
  if (!_internal_has_icon()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = icon_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (icon_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    icon_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CPlayer_GetGameAchievements_Response_Achievement::set_allocated_icon(std::string* icon) {
  if (icon != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  icon_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), icon,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (icon_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    icon_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CPlayer_GetGameAchievements_Response.Achievement.icon)
}

// optional string icon_gray = 5;
inline bool CPlayer_GetGameAchievements_Response_Achievement::_internal_has_icon_gray() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CPlayer_GetGameAchievements_Response_Achievement::has_icon_gray() const {
  return _internal_has_icon_gray();
}
inline void CPlayer_GetGameAchievements_Response_Achievement::clear_icon_gray() {
  icon_gray_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& CPlayer_GetGameAchievements_Response_Achievement::icon_gray() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetGameAchievements_Response.Achievement.icon_gray)
  return _internal_icon_gray();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CPlayer_GetGameAchievements_Response_Achievement::set_icon_gray(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 icon_gray_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CPlayer_GetGameAchievements_Response.Achievement.icon_gray)
}
inline std::string* CPlayer_GetGameAchievements_Response_Achievement::mutable_icon_gray() {
  std::string* _s = _internal_mutable_icon_gray();
  // @@protoc_insertion_point(field_mutable:CPlayer_GetGameAchievements_Response.Achievement.icon_gray)
  return _s;
}
inline const std::string& CPlayer_GetGameAchievements_Response_Achievement::_internal_icon_gray() const {
  return icon_gray_.Get();
}
inline void CPlayer_GetGameAchievements_Response_Achievement::_internal_set_icon_gray(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  icon_gray_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CPlayer_GetGameAchievements_Response_Achievement::_internal_mutable_icon_gray() {
  _has_bits_[0] |= 0x00000010u;
  return icon_gray_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CPlayer_GetGameAchievements_Response_Achievement::release_icon_gray() {
  // @@protoc_insertion_point(field_release:CPlayer_GetGameAchievements_Response.Achievement.icon_gray)
  if (!_internal_has_icon_gray()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  auto* p = icon_gray_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (icon_gray_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    icon_gray_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CPlayer_GetGameAchievements_Response_Achievement::set_allocated_icon_gray(std::string* icon_gray) {
  if (icon_gray != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  icon_gray_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), icon_gray,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (icon_gray_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    icon_gray_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CPlayer_GetGameAchievements_Response.Achievement.icon_gray)
}

// optional bool hidden = 6;
inline bool CPlayer_GetGameAchievements_Response_Achievement::_internal_has_hidden() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CPlayer_GetGameAchievements_Response_Achievement::has_hidden() const {
  return _internal_has_hidden();
}
inline void CPlayer_GetGameAchievements_Response_Achievement::clear_hidden() {
  hidden_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool CPlayer_GetGameAchievements_Response_Achievement::_internal_hidden() const {
  return hidden_;
}
inline bool CPlayer_GetGameAchievements_Response_Achievement::hidden() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetGameAchievements_Response.Achievement.hidden)
  return _internal_hidden();
}
inline void CPlayer_GetGameAchievements_Response_Achievement::_internal_set_hidden(bool value) {
  _has_bits_[0] |= 0x00000040u;
  hidden_ = value;
}
inline void CPlayer_GetGameAchievements_Response_Achievement::set_hidden(bool value) {
  _internal_set_hidden(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetGameAchievements_Response.Achievement.hidden)
}

// optional string player_percent_unlocked = 7 [(.description) = "Formatted to one decimal place, min value is 0.1, max value 100"];
inline bool CPlayer_GetGameAchievements_Response_Achievement::_internal_has_player_percent_unlocked() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CPlayer_GetGameAchievements_Response_Achievement::has_player_percent_unlocked() const {
  return _internal_has_player_percent_unlocked();
}
inline void CPlayer_GetGameAchievements_Response_Achievement::clear_player_percent_unlocked() {
  player_percent_unlocked_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& CPlayer_GetGameAchievements_Response_Achievement::player_percent_unlocked() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetGameAchievements_Response.Achievement.player_percent_unlocked)
  return _internal_player_percent_unlocked();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CPlayer_GetGameAchievements_Response_Achievement::set_player_percent_unlocked(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000020u;
 player_percent_unlocked_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CPlayer_GetGameAchievements_Response.Achievement.player_percent_unlocked)
}
inline std::string* CPlayer_GetGameAchievements_Response_Achievement::mutable_player_percent_unlocked() {
  std::string* _s = _internal_mutable_player_percent_unlocked();
  // @@protoc_insertion_point(field_mutable:CPlayer_GetGameAchievements_Response.Achievement.player_percent_unlocked)
  return _s;
}
inline const std::string& CPlayer_GetGameAchievements_Response_Achievement::_internal_player_percent_unlocked() const {
  return player_percent_unlocked_.Get();
}
inline void CPlayer_GetGameAchievements_Response_Achievement::_internal_set_player_percent_unlocked(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  player_percent_unlocked_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CPlayer_GetGameAchievements_Response_Achievement::_internal_mutable_player_percent_unlocked() {
  _has_bits_[0] |= 0x00000020u;
  return player_percent_unlocked_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CPlayer_GetGameAchievements_Response_Achievement::release_player_percent_unlocked() {
  // @@protoc_insertion_point(field_release:CPlayer_GetGameAchievements_Response.Achievement.player_percent_unlocked)
  if (!_internal_has_player_percent_unlocked()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  auto* p = player_percent_unlocked_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (player_percent_unlocked_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    player_percent_unlocked_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CPlayer_GetGameAchievements_Response_Achievement::set_allocated_player_percent_unlocked(std::string* player_percent_unlocked) {
  if (player_percent_unlocked != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  player_percent_unlocked_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), player_percent_unlocked,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (player_percent_unlocked_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    player_percent_unlocked_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CPlayer_GetGameAchievements_Response.Achievement.player_percent_unlocked)
}

// -------------------------------------------------------------------

// CPlayer_GetGameAchievements_Response

// repeated .CPlayer_GetGameAchievements_Response.Achievement achievements = 1;
inline int CPlayer_GetGameAchievements_Response::_internal_achievements_size() const {
  return achievements_.size();
}
inline int CPlayer_GetGameAchievements_Response::achievements_size() const {
  return _internal_achievements_size();
}
inline void CPlayer_GetGameAchievements_Response::clear_achievements() {
  achievements_.Clear();
}
inline ::CPlayer_GetGameAchievements_Response_Achievement* CPlayer_GetGameAchievements_Response::mutable_achievements(int index) {
  // @@protoc_insertion_point(field_mutable:CPlayer_GetGameAchievements_Response.achievements)
  return achievements_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetGameAchievements_Response_Achievement >*
CPlayer_GetGameAchievements_Response::mutable_achievements() {
  // @@protoc_insertion_point(field_mutable_list:CPlayer_GetGameAchievements_Response.achievements)
  return &achievements_;
}
inline const ::CPlayer_GetGameAchievements_Response_Achievement& CPlayer_GetGameAchievements_Response::_internal_achievements(int index) const {
  return achievements_.Get(index);
}
inline const ::CPlayer_GetGameAchievements_Response_Achievement& CPlayer_GetGameAchievements_Response::achievements(int index) const {
  // @@protoc_insertion_point(field_get:CPlayer_GetGameAchievements_Response.achievements)
  return _internal_achievements(index);
}
inline ::CPlayer_GetGameAchievements_Response_Achievement* CPlayer_GetGameAchievements_Response::_internal_add_achievements() {
  return achievements_.Add();
}
inline ::CPlayer_GetGameAchievements_Response_Achievement* CPlayer_GetGameAchievements_Response::add_achievements() {
  ::CPlayer_GetGameAchievements_Response_Achievement* _add = _internal_add_achievements();
  // @@protoc_insertion_point(field_add:CPlayer_GetGameAchievements_Response.achievements)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetGameAchievements_Response_Achievement >&
CPlayer_GetGameAchievements_Response::achievements() const {
  // @@protoc_insertion_point(field_list:CPlayer_GetGameAchievements_Response.achievements)
  return achievements_;
}

// -------------------------------------------------------------------

// CPlayer_GetFavoriteBadge_Request

// optional uint64 steamid = 1;
inline bool CPlayer_GetFavoriteBadge_Request::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPlayer_GetFavoriteBadge_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CPlayer_GetFavoriteBadge_Request::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CPlayer_GetFavoriteBadge_Request::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CPlayer_GetFavoriteBadge_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetFavoriteBadge_Request.steamid)
  return _internal_steamid();
}
inline void CPlayer_GetFavoriteBadge_Request::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
}
inline void CPlayer_GetFavoriteBadge_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetFavoriteBadge_Request.steamid)
}

// -------------------------------------------------------------------

// CPlayer_GetFavoriteBadge_Response

// optional bool has_favorite_badge = 1;
inline bool CPlayer_GetFavoriteBadge_Response::_internal_has_has_favorite_badge() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPlayer_GetFavoriteBadge_Response::has_has_favorite_badge() const {
  return _internal_has_has_favorite_badge();
}
inline void CPlayer_GetFavoriteBadge_Response::clear_has_favorite_badge() {
  has_favorite_badge_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CPlayer_GetFavoriteBadge_Response::_internal_has_favorite_badge() const {
  return has_favorite_badge_;
}
inline bool CPlayer_GetFavoriteBadge_Response::has_favorite_badge() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetFavoriteBadge_Response.has_favorite_badge)
  return _internal_has_favorite_badge();
}
inline void CPlayer_GetFavoriteBadge_Response::_internal_set_has_favorite_badge(bool value) {
  _has_bits_[0] |= 0x00000001u;
  has_favorite_badge_ = value;
}
inline void CPlayer_GetFavoriteBadge_Response::set_has_favorite_badge(bool value) {
  _internal_set_has_favorite_badge(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetFavoriteBadge_Response.has_favorite_badge)
}

// optional uint32 badgeid = 2;
inline bool CPlayer_GetFavoriteBadge_Response::_internal_has_badgeid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPlayer_GetFavoriteBadge_Response::has_badgeid() const {
  return _internal_has_badgeid();
}
inline void CPlayer_GetFavoriteBadge_Response::clear_badgeid() {
  badgeid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CPlayer_GetFavoriteBadge_Response::_internal_badgeid() const {
  return badgeid_;
}
inline uint32_t CPlayer_GetFavoriteBadge_Response::badgeid() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetFavoriteBadge_Response.badgeid)
  return _internal_badgeid();
}
inline void CPlayer_GetFavoriteBadge_Response::_internal_set_badgeid(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  badgeid_ = value;
}
inline void CPlayer_GetFavoriteBadge_Response::set_badgeid(uint32_t value) {
  _internal_set_badgeid(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetFavoriteBadge_Response.badgeid)
}

// optional uint64 communityitemid = 3;
inline bool CPlayer_GetFavoriteBadge_Response::_internal_has_communityitemid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CPlayer_GetFavoriteBadge_Response::has_communityitemid() const {
  return _internal_has_communityitemid();
}
inline void CPlayer_GetFavoriteBadge_Response::clear_communityitemid() {
  communityitemid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CPlayer_GetFavoriteBadge_Response::_internal_communityitemid() const {
  return communityitemid_;
}
inline uint64_t CPlayer_GetFavoriteBadge_Response::communityitemid() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetFavoriteBadge_Response.communityitemid)
  return _internal_communityitemid();
}
inline void CPlayer_GetFavoriteBadge_Response::_internal_set_communityitemid(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  communityitemid_ = value;
}
inline void CPlayer_GetFavoriteBadge_Response::set_communityitemid(uint64_t value) {
  _internal_set_communityitemid(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetFavoriteBadge_Response.communityitemid)
}

// optional uint32 item_type = 4;
inline bool CPlayer_GetFavoriteBadge_Response::_internal_has_item_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CPlayer_GetFavoriteBadge_Response::has_item_type() const {
  return _internal_has_item_type();
}
inline void CPlayer_GetFavoriteBadge_Response::clear_item_type() {
  item_type_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CPlayer_GetFavoriteBadge_Response::_internal_item_type() const {
  return item_type_;
}
inline uint32_t CPlayer_GetFavoriteBadge_Response::item_type() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetFavoriteBadge_Response.item_type)
  return _internal_item_type();
}
inline void CPlayer_GetFavoriteBadge_Response::_internal_set_item_type(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  item_type_ = value;
}
inline void CPlayer_GetFavoriteBadge_Response::set_item_type(uint32_t value) {
  _internal_set_item_type(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetFavoriteBadge_Response.item_type)
}

// optional uint32 border_color = 5;
inline bool CPlayer_GetFavoriteBadge_Response::_internal_has_border_color() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CPlayer_GetFavoriteBadge_Response::has_border_color() const {
  return _internal_has_border_color();
}
inline void CPlayer_GetFavoriteBadge_Response::clear_border_color() {
  border_color_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CPlayer_GetFavoriteBadge_Response::_internal_border_color() const {
  return border_color_;
}
inline uint32_t CPlayer_GetFavoriteBadge_Response::border_color() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetFavoriteBadge_Response.border_color)
  return _internal_border_color();
}
inline void CPlayer_GetFavoriteBadge_Response::_internal_set_border_color(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  border_color_ = value;
}
inline void CPlayer_GetFavoriteBadge_Response::set_border_color(uint32_t value) {
  _internal_set_border_color(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetFavoriteBadge_Response.border_color)
}

// optional uint32 appid = 6;
inline bool CPlayer_GetFavoriteBadge_Response::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CPlayer_GetFavoriteBadge_Response::has_appid() const {
  return _internal_has_appid();
}
inline void CPlayer_GetFavoriteBadge_Response::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CPlayer_GetFavoriteBadge_Response::_internal_appid() const {
  return appid_;
}
inline uint32_t CPlayer_GetFavoriteBadge_Response::appid() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetFavoriteBadge_Response.appid)
  return _internal_appid();
}
inline void CPlayer_GetFavoriteBadge_Response::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  appid_ = value;
}
inline void CPlayer_GetFavoriteBadge_Response::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetFavoriteBadge_Response.appid)
}

// optional uint32 level = 7;
inline bool CPlayer_GetFavoriteBadge_Response::_internal_has_level() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CPlayer_GetFavoriteBadge_Response::has_level() const {
  return _internal_has_level();
}
inline void CPlayer_GetFavoriteBadge_Response::clear_level() {
  level_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CPlayer_GetFavoriteBadge_Response::_internal_level() const {
  return level_;
}
inline uint32_t CPlayer_GetFavoriteBadge_Response::level() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetFavoriteBadge_Response.level)
  return _internal_level();
}
inline void CPlayer_GetFavoriteBadge_Response::_internal_set_level(uint32_t value) {
  _has_bits_[0] |= 0x00000040u;
  level_ = value;
}
inline void CPlayer_GetFavoriteBadge_Response::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetFavoriteBadge_Response.level)
}

// -------------------------------------------------------------------

// CPlayer_SetFavoriteBadge_Request

// optional uint64 communityitemid = 1;
inline bool CPlayer_SetFavoriteBadge_Request::_internal_has_communityitemid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPlayer_SetFavoriteBadge_Request::has_communityitemid() const {
  return _internal_has_communityitemid();
}
inline void CPlayer_SetFavoriteBadge_Request::clear_communityitemid() {
  communityitemid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CPlayer_SetFavoriteBadge_Request::_internal_communityitemid() const {
  return communityitemid_;
}
inline uint64_t CPlayer_SetFavoriteBadge_Request::communityitemid() const {
  // @@protoc_insertion_point(field_get:CPlayer_SetFavoriteBadge_Request.communityitemid)
  return _internal_communityitemid();
}
inline void CPlayer_SetFavoriteBadge_Request::_internal_set_communityitemid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  communityitemid_ = value;
}
inline void CPlayer_SetFavoriteBadge_Request::set_communityitemid(uint64_t value) {
  _internal_set_communityitemid(value);
  // @@protoc_insertion_point(field_set:CPlayer_SetFavoriteBadge_Request.communityitemid)
}

// optional uint32 badgeid = 2;
inline bool CPlayer_SetFavoriteBadge_Request::_internal_has_badgeid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPlayer_SetFavoriteBadge_Request::has_badgeid() const {
  return _internal_has_badgeid();
}
inline void CPlayer_SetFavoriteBadge_Request::clear_badgeid() {
  badgeid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CPlayer_SetFavoriteBadge_Request::_internal_badgeid() const {
  return badgeid_;
}
inline uint32_t CPlayer_SetFavoriteBadge_Request::badgeid() const {
  // @@protoc_insertion_point(field_get:CPlayer_SetFavoriteBadge_Request.badgeid)
  return _internal_badgeid();
}
inline void CPlayer_SetFavoriteBadge_Request::_internal_set_badgeid(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  badgeid_ = value;
}
inline void CPlayer_SetFavoriteBadge_Request::set_badgeid(uint32_t value) {
  _internal_set_badgeid(value);
  // @@protoc_insertion_point(field_set:CPlayer_SetFavoriteBadge_Request.badgeid)
}

// -------------------------------------------------------------------

// CPlayer_SetFavoriteBadge_Response

// -------------------------------------------------------------------

// CPlayer_GetProfileCustomization_Request

// optional fixed64 steamid = 1;
inline bool CPlayer_GetProfileCustomization_Request::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPlayer_GetProfileCustomization_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CPlayer_GetProfileCustomization_Request::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CPlayer_GetProfileCustomization_Request::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CPlayer_GetProfileCustomization_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetProfileCustomization_Request.steamid)
  return _internal_steamid();
}
inline void CPlayer_GetProfileCustomization_Request::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
}
inline void CPlayer_GetProfileCustomization_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetProfileCustomization_Request.steamid)
}

// optional bool include_inactive_customizations = 2;
inline bool CPlayer_GetProfileCustomization_Request::_internal_has_include_inactive_customizations() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPlayer_GetProfileCustomization_Request::has_include_inactive_customizations() const {
  return _internal_has_include_inactive_customizations();
}
inline void CPlayer_GetProfileCustomization_Request::clear_include_inactive_customizations() {
  include_inactive_customizations_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CPlayer_GetProfileCustomization_Request::_internal_include_inactive_customizations() const {
  return include_inactive_customizations_;
}
inline bool CPlayer_GetProfileCustomization_Request::include_inactive_customizations() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetProfileCustomization_Request.include_inactive_customizations)
  return _internal_include_inactive_customizations();
}
inline void CPlayer_GetProfileCustomization_Request::_internal_set_include_inactive_customizations(bool value) {
  _has_bits_[0] |= 0x00000002u;
  include_inactive_customizations_ = value;
}
inline void CPlayer_GetProfileCustomization_Request::set_include_inactive_customizations(bool value) {
  _internal_set_include_inactive_customizations(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetProfileCustomization_Request.include_inactive_customizations)
}

// optional bool include_purchased_customizations = 3;
inline bool CPlayer_GetProfileCustomization_Request::_internal_has_include_purchased_customizations() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CPlayer_GetProfileCustomization_Request::has_include_purchased_customizations() const {
  return _internal_has_include_purchased_customizations();
}
inline void CPlayer_GetProfileCustomization_Request::clear_include_purchased_customizations() {
  include_purchased_customizations_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CPlayer_GetProfileCustomization_Request::_internal_include_purchased_customizations() const {
  return include_purchased_customizations_;
}
inline bool CPlayer_GetProfileCustomization_Request::include_purchased_customizations() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetProfileCustomization_Request.include_purchased_customizations)
  return _internal_include_purchased_customizations();
}
inline void CPlayer_GetProfileCustomization_Request::_internal_set_include_purchased_customizations(bool value) {
  _has_bits_[0] |= 0x00000004u;
  include_purchased_customizations_ = value;
}
inline void CPlayer_GetProfileCustomization_Request::set_include_purchased_customizations(bool value) {
  _internal_set_include_purchased_customizations(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetProfileCustomization_Request.include_purchased_customizations)
}

// -------------------------------------------------------------------

// ProfileCustomizationSlot

// optional uint32 slot = 1;
inline bool ProfileCustomizationSlot::_internal_has_slot() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ProfileCustomizationSlot::has_slot() const {
  return _internal_has_slot();
}
inline void ProfileCustomizationSlot::clear_slot() {
  slot_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t ProfileCustomizationSlot::_internal_slot() const {
  return slot_;
}
inline uint32_t ProfileCustomizationSlot::slot() const {
  // @@protoc_insertion_point(field_get:ProfileCustomizationSlot.slot)
  return _internal_slot();
}
inline void ProfileCustomizationSlot::_internal_set_slot(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  slot_ = value;
}
inline void ProfileCustomizationSlot::set_slot(uint32_t value) {
  _internal_set_slot(value);
  // @@protoc_insertion_point(field_set:ProfileCustomizationSlot.slot)
}

// optional uint32 appid = 2;
inline bool ProfileCustomizationSlot::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ProfileCustomizationSlot::has_appid() const {
  return _internal_has_appid();
}
inline void ProfileCustomizationSlot::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t ProfileCustomizationSlot::_internal_appid() const {
  return appid_;
}
inline uint32_t ProfileCustomizationSlot::appid() const {
  // @@protoc_insertion_point(field_get:ProfileCustomizationSlot.appid)
  return _internal_appid();
}
inline void ProfileCustomizationSlot::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  appid_ = value;
}
inline void ProfileCustomizationSlot::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:ProfileCustomizationSlot.appid)
}

// optional uint64 publishedfileid = 3;
inline bool ProfileCustomizationSlot::_internal_has_publishedfileid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ProfileCustomizationSlot::has_publishedfileid() const {
  return _internal_has_publishedfileid();
}
inline void ProfileCustomizationSlot::clear_publishedfileid() {
  publishedfileid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000010u;
}
inline uint64_t ProfileCustomizationSlot::_internal_publishedfileid() const {
  return publishedfileid_;
}
inline uint64_t ProfileCustomizationSlot::publishedfileid() const {
  // @@protoc_insertion_point(field_get:ProfileCustomizationSlot.publishedfileid)
  return _internal_publishedfileid();
}
inline void ProfileCustomizationSlot::_internal_set_publishedfileid(uint64_t value) {
  _has_bits_[0] |= 0x00000010u;
  publishedfileid_ = value;
}
inline void ProfileCustomizationSlot::set_publishedfileid(uint64_t value) {
  _internal_set_publishedfileid(value);
  // @@protoc_insertion_point(field_set:ProfileCustomizationSlot.publishedfileid)
}

// optional uint64 item_assetid = 4;
inline bool ProfileCustomizationSlot::_internal_has_item_assetid() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ProfileCustomizationSlot::has_item_assetid() const {
  return _internal_has_item_assetid();
}
inline void ProfileCustomizationSlot::clear_item_assetid() {
  item_assetid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000020u;
}
inline uint64_t ProfileCustomizationSlot::_internal_item_assetid() const {
  return item_assetid_;
}
inline uint64_t ProfileCustomizationSlot::item_assetid() const {
  // @@protoc_insertion_point(field_get:ProfileCustomizationSlot.item_assetid)
  return _internal_item_assetid();
}
inline void ProfileCustomizationSlot::_internal_set_item_assetid(uint64_t value) {
  _has_bits_[0] |= 0x00000020u;
  item_assetid_ = value;
}
inline void ProfileCustomizationSlot::set_item_assetid(uint64_t value) {
  _internal_set_item_assetid(value);
  // @@protoc_insertion_point(field_set:ProfileCustomizationSlot.item_assetid)
}

// optional uint64 item_contextid = 5;
inline bool ProfileCustomizationSlot::_internal_has_item_contextid() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ProfileCustomizationSlot::has_item_contextid() const {
  return _internal_has_item_contextid();
}
inline void ProfileCustomizationSlot::clear_item_contextid() {
  item_contextid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000040u;
}
inline uint64_t ProfileCustomizationSlot::_internal_item_contextid() const {
  return item_contextid_;
}
inline uint64_t ProfileCustomizationSlot::item_contextid() const {
  // @@protoc_insertion_point(field_get:ProfileCustomizationSlot.item_contextid)
  return _internal_item_contextid();
}
inline void ProfileCustomizationSlot::_internal_set_item_contextid(uint64_t value) {
  _has_bits_[0] |= 0x00000040u;
  item_contextid_ = value;
}
inline void ProfileCustomizationSlot::set_item_contextid(uint64_t value) {
  _internal_set_item_contextid(value);
  // @@protoc_insertion_point(field_set:ProfileCustomizationSlot.item_contextid)
}

// optional string notes = 6;
inline bool ProfileCustomizationSlot::_internal_has_notes() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProfileCustomizationSlot::has_notes() const {
  return _internal_has_notes();
}
inline void ProfileCustomizationSlot::clear_notes() {
  notes_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProfileCustomizationSlot::notes() const {
  // @@protoc_insertion_point(field_get:ProfileCustomizationSlot.notes)
  return _internal_notes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProfileCustomizationSlot::set_notes(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 notes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProfileCustomizationSlot.notes)
}
inline std::string* ProfileCustomizationSlot::mutable_notes() {
  std::string* _s = _internal_mutable_notes();
  // @@protoc_insertion_point(field_mutable:ProfileCustomizationSlot.notes)
  return _s;
}
inline const std::string& ProfileCustomizationSlot::_internal_notes() const {
  return notes_.Get();
}
inline void ProfileCustomizationSlot::_internal_set_notes(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  notes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProfileCustomizationSlot::_internal_mutable_notes() {
  _has_bits_[0] |= 0x00000001u;
  return notes_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProfileCustomizationSlot::release_notes() {
  // @@protoc_insertion_point(field_release:ProfileCustomizationSlot.notes)
  if (!_internal_has_notes()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = notes_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (notes_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    notes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ProfileCustomizationSlot::set_allocated_notes(std::string* notes) {
  if (notes != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  notes_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), notes,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (notes_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    notes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ProfileCustomizationSlot.notes)
}

// optional string title = 7;
inline bool ProfileCustomizationSlot::_internal_has_title() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ProfileCustomizationSlot::has_title() const {
  return _internal_has_title();
}
inline void ProfileCustomizationSlot::clear_title() {
  title_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ProfileCustomizationSlot::title() const {
  // @@protoc_insertion_point(field_get:ProfileCustomizationSlot.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProfileCustomizationSlot::set_title(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProfileCustomizationSlot.title)
}
inline std::string* ProfileCustomizationSlot::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:ProfileCustomizationSlot.title)
  return _s;
}
inline const std::string& ProfileCustomizationSlot::_internal_title() const {
  return title_.Get();
}
inline void ProfileCustomizationSlot::_internal_set_title(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProfileCustomizationSlot::_internal_mutable_title() {
  _has_bits_[0] |= 0x00000002u;
  return title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProfileCustomizationSlot::release_title() {
  // @@protoc_insertion_point(field_release:ProfileCustomizationSlot.title)
  if (!_internal_has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = title_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ProfileCustomizationSlot::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ProfileCustomizationSlot.title)
}

// optional uint32 accountid = 8;
inline bool ProfileCustomizationSlot::_internal_has_accountid() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ProfileCustomizationSlot::has_accountid() const {
  return _internal_has_accountid();
}
inline void ProfileCustomizationSlot::clear_accountid() {
  accountid_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline uint32_t ProfileCustomizationSlot::_internal_accountid() const {
  return accountid_;
}
inline uint32_t ProfileCustomizationSlot::accountid() const {
  // @@protoc_insertion_point(field_get:ProfileCustomizationSlot.accountid)
  return _internal_accountid();
}
inline void ProfileCustomizationSlot::_internal_set_accountid(uint32_t value) {
  _has_bits_[0] |= 0x00000080u;
  accountid_ = value;
}
inline void ProfileCustomizationSlot::set_accountid(uint32_t value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:ProfileCustomizationSlot.accountid)
}

// optional uint32 badgeid = 9;
inline bool ProfileCustomizationSlot::_internal_has_badgeid() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ProfileCustomizationSlot::has_badgeid() const {
  return _internal_has_badgeid();
}
inline void ProfileCustomizationSlot::clear_badgeid() {
  badgeid_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline uint32_t ProfileCustomizationSlot::_internal_badgeid() const {
  return badgeid_;
}
inline uint32_t ProfileCustomizationSlot::badgeid() const {
  // @@protoc_insertion_point(field_get:ProfileCustomizationSlot.badgeid)
  return _internal_badgeid();
}
inline void ProfileCustomizationSlot::_internal_set_badgeid(uint32_t value) {
  _has_bits_[0] |= 0x00000100u;
  badgeid_ = value;
}
inline void ProfileCustomizationSlot::set_badgeid(uint32_t value) {
  _internal_set_badgeid(value);
  // @@protoc_insertion_point(field_set:ProfileCustomizationSlot.badgeid)
}

// optional uint32 border_color = 10;
inline bool ProfileCustomizationSlot::_internal_has_border_color() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ProfileCustomizationSlot::has_border_color() const {
  return _internal_has_border_color();
}
inline void ProfileCustomizationSlot::clear_border_color() {
  border_color_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline uint32_t ProfileCustomizationSlot::_internal_border_color() const {
  return border_color_;
}
inline uint32_t ProfileCustomizationSlot::border_color() const {
  // @@protoc_insertion_point(field_get:ProfileCustomizationSlot.border_color)
  return _internal_border_color();
}
inline void ProfileCustomizationSlot::_internal_set_border_color(uint32_t value) {
  _has_bits_[0] |= 0x00000400u;
  border_color_ = value;
}
inline void ProfileCustomizationSlot::set_border_color(uint32_t value) {
  _internal_set_border_color(value);
  // @@protoc_insertion_point(field_set:ProfileCustomizationSlot.border_color)
}

// optional uint64 item_classid = 11;
inline bool ProfileCustomizationSlot::_internal_has_item_classid() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ProfileCustomizationSlot::has_item_classid() const {
  return _internal_has_item_classid();
}
inline void ProfileCustomizationSlot::clear_item_classid() {
  item_classid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000200u;
}
inline uint64_t ProfileCustomizationSlot::_internal_item_classid() const {
  return item_classid_;
}
inline uint64_t ProfileCustomizationSlot::item_classid() const {
  // @@protoc_insertion_point(field_get:ProfileCustomizationSlot.item_classid)
  return _internal_item_classid();
}
inline void ProfileCustomizationSlot::_internal_set_item_classid(uint64_t value) {
  _has_bits_[0] |= 0x00000200u;
  item_classid_ = value;
}
inline void ProfileCustomizationSlot::set_item_classid(uint64_t value) {
  _internal_set_item_classid(value);
  // @@protoc_insertion_point(field_set:ProfileCustomizationSlot.item_classid)
}

// optional uint64 item_instanceid = 12;
inline bool ProfileCustomizationSlot::_internal_has_item_instanceid() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ProfileCustomizationSlot::has_item_instanceid() const {
  return _internal_has_item_instanceid();
}
inline void ProfileCustomizationSlot::clear_item_instanceid() {
  item_instanceid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00001000u;
}
inline uint64_t ProfileCustomizationSlot::_internal_item_instanceid() const {
  return item_instanceid_;
}
inline uint64_t ProfileCustomizationSlot::item_instanceid() const {
  // @@protoc_insertion_point(field_get:ProfileCustomizationSlot.item_instanceid)
  return _internal_item_instanceid();
}
inline void ProfileCustomizationSlot::_internal_set_item_instanceid(uint64_t value) {
  _has_bits_[0] |= 0x00001000u;
  item_instanceid_ = value;
}
inline void ProfileCustomizationSlot::set_item_instanceid(uint64_t value) {
  _internal_set_item_instanceid(value);
  // @@protoc_insertion_point(field_set:ProfileCustomizationSlot.item_instanceid)
}

// optional .EBanContentCheckResult ban_check_result = 13 [default = k_EBanContentCheckResult_NotScanned];
inline bool ProfileCustomizationSlot::_internal_has_ban_check_result() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ProfileCustomizationSlot::has_ban_check_result() const {
  return _internal_has_ban_check_result();
}
inline void ProfileCustomizationSlot::clear_ban_check_result() {
  ban_check_result_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::EBanContentCheckResult ProfileCustomizationSlot::_internal_ban_check_result() const {
  return static_cast< ::EBanContentCheckResult >(ban_check_result_);
}
inline ::EBanContentCheckResult ProfileCustomizationSlot::ban_check_result() const {
  // @@protoc_insertion_point(field_get:ProfileCustomizationSlot.ban_check_result)
  return _internal_ban_check_result();
}
inline void ProfileCustomizationSlot::_internal_set_ban_check_result(::EBanContentCheckResult value) {
  assert(::EBanContentCheckResult_IsValid(value));
  _has_bits_[0] |= 0x00000800u;
  ban_check_result_ = value;
}
inline void ProfileCustomizationSlot::set_ban_check_result(::EBanContentCheckResult value) {
  _internal_set_ban_check_result(value);
  // @@protoc_insertion_point(field_set:ProfileCustomizationSlot.ban_check_result)
}

// optional uint32 replay_year = 14;
inline bool ProfileCustomizationSlot::_internal_has_replay_year() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ProfileCustomizationSlot::has_replay_year() const {
  return _internal_has_replay_year();
}
inline void ProfileCustomizationSlot::clear_replay_year() {
  replay_year_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline uint32_t ProfileCustomizationSlot::_internal_replay_year() const {
  return replay_year_;
}
inline uint32_t ProfileCustomizationSlot::replay_year() const {
  // @@protoc_insertion_point(field_get:ProfileCustomizationSlot.replay_year)
  return _internal_replay_year();
}
inline void ProfileCustomizationSlot::_internal_set_replay_year(uint32_t value) {
  _has_bits_[0] |= 0x00002000u;
  replay_year_ = value;
}
inline void ProfileCustomizationSlot::set_replay_year(uint32_t value) {
  _internal_set_replay_year(value);
  // @@protoc_insertion_point(field_set:ProfileCustomizationSlot.replay_year)
}

// -------------------------------------------------------------------

// ProfileCustomization

// optional .EProfileCustomizationType customization_type = 1 [default = k_EProfileCustomizationTypeInvalid];
inline bool ProfileCustomization::_internal_has_customization_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProfileCustomization::has_customization_type() const {
  return _internal_has_customization_type();
}
inline void ProfileCustomization::clear_customization_type() {
  customization_type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::EProfileCustomizationType ProfileCustomization::_internal_customization_type() const {
  return static_cast< ::EProfileCustomizationType >(customization_type_);
}
inline ::EProfileCustomizationType ProfileCustomization::customization_type() const {
  // @@protoc_insertion_point(field_get:ProfileCustomization.customization_type)
  return _internal_customization_type();
}
inline void ProfileCustomization::_internal_set_customization_type(::EProfileCustomizationType value) {
  assert(::EProfileCustomizationType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  customization_type_ = value;
}
inline void ProfileCustomization::set_customization_type(::EProfileCustomizationType value) {
  _internal_set_customization_type(value);
  // @@protoc_insertion_point(field_set:ProfileCustomization.customization_type)
}

// optional bool large = 2;
inline bool ProfileCustomization::_internal_has_large() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ProfileCustomization::has_large() const {
  return _internal_has_large();
}
inline void ProfileCustomization::clear_large() {
  large_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool ProfileCustomization::_internal_large() const {
  return large_;
}
inline bool ProfileCustomization::large() const {
  // @@protoc_insertion_point(field_get:ProfileCustomization.large)
  return _internal_large();
}
inline void ProfileCustomization::_internal_set_large(bool value) {
  _has_bits_[0] |= 0x00000002u;
  large_ = value;
}
inline void ProfileCustomization::set_large(bool value) {
  _internal_set_large(value);
  // @@protoc_insertion_point(field_set:ProfileCustomization.large)
}

// repeated .ProfileCustomizationSlot slots = 3;
inline int ProfileCustomization::_internal_slots_size() const {
  return slots_.size();
}
inline int ProfileCustomization::slots_size() const {
  return _internal_slots_size();
}
inline void ProfileCustomization::clear_slots() {
  slots_.Clear();
}
inline ::ProfileCustomizationSlot* ProfileCustomization::mutable_slots(int index) {
  // @@protoc_insertion_point(field_mutable:ProfileCustomization.slots)
  return slots_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfileCustomizationSlot >*
ProfileCustomization::mutable_slots() {
  // @@protoc_insertion_point(field_mutable_list:ProfileCustomization.slots)
  return &slots_;
}
inline const ::ProfileCustomizationSlot& ProfileCustomization::_internal_slots(int index) const {
  return slots_.Get(index);
}
inline const ::ProfileCustomizationSlot& ProfileCustomization::slots(int index) const {
  // @@protoc_insertion_point(field_get:ProfileCustomization.slots)
  return _internal_slots(index);
}
inline ::ProfileCustomizationSlot* ProfileCustomization::_internal_add_slots() {
  return slots_.Add();
}
inline ::ProfileCustomizationSlot* ProfileCustomization::add_slots() {
  ::ProfileCustomizationSlot* _add = _internal_add_slots();
  // @@protoc_insertion_point(field_add:ProfileCustomization.slots)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfileCustomizationSlot >&
ProfileCustomization::slots() const {
  // @@protoc_insertion_point(field_list:ProfileCustomization.slots)
  return slots_;
}

// optional bool active = 4;
inline bool ProfileCustomization::_internal_has_active() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ProfileCustomization::has_active() const {
  return _internal_has_active();
}
inline void ProfileCustomization::clear_active() {
  active_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool ProfileCustomization::_internal_active() const {
  return active_;
}
inline bool ProfileCustomization::active() const {
  // @@protoc_insertion_point(field_get:ProfileCustomization.active)
  return _internal_active();
}
inline void ProfileCustomization::_internal_set_active(bool value) {
  _has_bits_[0] |= 0x00000004u;
  active_ = value;
}
inline void ProfileCustomization::set_active(bool value) {
  _internal_set_active(value);
  // @@protoc_insertion_point(field_set:ProfileCustomization.active)
}

// optional .EProfileCustomizationStyle customization_style = 5 [default = k_EProfileCustomizationStyleDefault];
inline bool ProfileCustomization::_internal_has_customization_style() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ProfileCustomization::has_customization_style() const {
  return _internal_has_customization_style();
}
inline void ProfileCustomization::clear_customization_style() {
  customization_style_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::EProfileCustomizationStyle ProfileCustomization::_internal_customization_style() const {
  return static_cast< ::EProfileCustomizationStyle >(customization_style_);
}
inline ::EProfileCustomizationStyle ProfileCustomization::customization_style() const {
  // @@protoc_insertion_point(field_get:ProfileCustomization.customization_style)
  return _internal_customization_style();
}
inline void ProfileCustomization::_internal_set_customization_style(::EProfileCustomizationStyle value) {
  assert(::EProfileCustomizationStyle_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  customization_style_ = value;
}
inline void ProfileCustomization::set_customization_style(::EProfileCustomizationStyle value) {
  _internal_set_customization_style(value);
  // @@protoc_insertion_point(field_set:ProfileCustomization.customization_style)
}

// optional uint64 purchaseid = 6;
inline bool ProfileCustomization::_internal_has_purchaseid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ProfileCustomization::has_purchaseid() const {
  return _internal_has_purchaseid();
}
inline void ProfileCustomization::clear_purchaseid() {
  purchaseid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline uint64_t ProfileCustomization::_internal_purchaseid() const {
  return purchaseid_;
}
inline uint64_t ProfileCustomization::purchaseid() const {
  // @@protoc_insertion_point(field_get:ProfileCustomization.purchaseid)
  return _internal_purchaseid();
}
inline void ProfileCustomization::_internal_set_purchaseid(uint64_t value) {
  _has_bits_[0] |= 0x00000008u;
  purchaseid_ = value;
}
inline void ProfileCustomization::set_purchaseid(uint64_t value) {
  _internal_set_purchaseid(value);
  // @@protoc_insertion_point(field_set:ProfileCustomization.purchaseid)
}

// optional uint32 level = 7;
inline bool ProfileCustomization::_internal_has_level() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ProfileCustomization::has_level() const {
  return _internal_has_level();
}
inline void ProfileCustomization::clear_level() {
  level_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t ProfileCustomization::_internal_level() const {
  return level_;
}
inline uint32_t ProfileCustomization::level() const {
  // @@protoc_insertion_point(field_get:ProfileCustomization.level)
  return _internal_level();
}
inline void ProfileCustomization::_internal_set_level(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  level_ = value;
}
inline void ProfileCustomization::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:ProfileCustomization.level)
}

// -------------------------------------------------------------------

// ProfileTheme

// optional string theme_id = 1;
inline bool ProfileTheme::_internal_has_theme_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProfileTheme::has_theme_id() const {
  return _internal_has_theme_id();
}
inline void ProfileTheme::clear_theme_id() {
  theme_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProfileTheme::theme_id() const {
  // @@protoc_insertion_point(field_get:ProfileTheme.theme_id)
  return _internal_theme_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProfileTheme::set_theme_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 theme_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProfileTheme.theme_id)
}
inline std::string* ProfileTheme::mutable_theme_id() {
  std::string* _s = _internal_mutable_theme_id();
  // @@protoc_insertion_point(field_mutable:ProfileTheme.theme_id)
  return _s;
}
inline const std::string& ProfileTheme::_internal_theme_id() const {
  return theme_id_.Get();
}
inline void ProfileTheme::_internal_set_theme_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  theme_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProfileTheme::_internal_mutable_theme_id() {
  _has_bits_[0] |= 0x00000001u;
  return theme_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProfileTheme::release_theme_id() {
  // @@protoc_insertion_point(field_release:ProfileTheme.theme_id)
  if (!_internal_has_theme_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = theme_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (theme_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    theme_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ProfileTheme::set_allocated_theme_id(std::string* theme_id) {
  if (theme_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  theme_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), theme_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (theme_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    theme_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ProfileTheme.theme_id)
}

// optional string title = 2;
inline bool ProfileTheme::_internal_has_title() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ProfileTheme::has_title() const {
  return _internal_has_title();
}
inline void ProfileTheme::clear_title() {
  title_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ProfileTheme::title() const {
  // @@protoc_insertion_point(field_get:ProfileTheme.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProfileTheme::set_title(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProfileTheme.title)
}
inline std::string* ProfileTheme::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:ProfileTheme.title)
  return _s;
}
inline const std::string& ProfileTheme::_internal_title() const {
  return title_.Get();
}
inline void ProfileTheme::_internal_set_title(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProfileTheme::_internal_mutable_title() {
  _has_bits_[0] |= 0x00000002u;
  return title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProfileTheme::release_title() {
  // @@protoc_insertion_point(field_release:ProfileTheme.title)
  if (!_internal_has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = title_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ProfileTheme::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ProfileTheme.title)
}

// -------------------------------------------------------------------

// ProfilePreferences

// optional bool hide_profile_awards = 1;
inline bool ProfilePreferences::_internal_has_hide_profile_awards() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProfilePreferences::has_hide_profile_awards() const {
  return _internal_has_hide_profile_awards();
}
inline void ProfilePreferences::clear_hide_profile_awards() {
  hide_profile_awards_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool ProfilePreferences::_internal_hide_profile_awards() const {
  return hide_profile_awards_;
}
inline bool ProfilePreferences::hide_profile_awards() const {
  // @@protoc_insertion_point(field_get:ProfilePreferences.hide_profile_awards)
  return _internal_hide_profile_awards();
}
inline void ProfilePreferences::_internal_set_hide_profile_awards(bool value) {
  _has_bits_[0] |= 0x00000001u;
  hide_profile_awards_ = value;
}
inline void ProfilePreferences::set_hide_profile_awards(bool value) {
  _internal_set_hide_profile_awards(value);
  // @@protoc_insertion_point(field_set:ProfilePreferences.hide_profile_awards)
}

// -------------------------------------------------------------------

// CPlayer_GetProfileCustomization_Response_PurchasedCustomization

// optional uint64 purchaseid = 1;
inline bool CPlayer_GetProfileCustomization_Response_PurchasedCustomization::_internal_has_purchaseid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPlayer_GetProfileCustomization_Response_PurchasedCustomization::has_purchaseid() const {
  return _internal_has_purchaseid();
}
inline void CPlayer_GetProfileCustomization_Response_PurchasedCustomization::clear_purchaseid() {
  purchaseid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CPlayer_GetProfileCustomization_Response_PurchasedCustomization::_internal_purchaseid() const {
  return purchaseid_;
}
inline uint64_t CPlayer_GetProfileCustomization_Response_PurchasedCustomization::purchaseid() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetProfileCustomization_Response.PurchasedCustomization.purchaseid)
  return _internal_purchaseid();
}
inline void CPlayer_GetProfileCustomization_Response_PurchasedCustomization::_internal_set_purchaseid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  purchaseid_ = value;
}
inline void CPlayer_GetProfileCustomization_Response_PurchasedCustomization::set_purchaseid(uint64_t value) {
  _internal_set_purchaseid(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetProfileCustomization_Response.PurchasedCustomization.purchaseid)
}

// optional .EProfileCustomizationType customization_type = 2 [default = k_EProfileCustomizationTypeInvalid];
inline bool CPlayer_GetProfileCustomization_Response_PurchasedCustomization::_internal_has_customization_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPlayer_GetProfileCustomization_Response_PurchasedCustomization::has_customization_type() const {
  return _internal_has_customization_type();
}
inline void CPlayer_GetProfileCustomization_Response_PurchasedCustomization::clear_customization_type() {
  customization_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::EProfileCustomizationType CPlayer_GetProfileCustomization_Response_PurchasedCustomization::_internal_customization_type() const {
  return static_cast< ::EProfileCustomizationType >(customization_type_);
}
inline ::EProfileCustomizationType CPlayer_GetProfileCustomization_Response_PurchasedCustomization::customization_type() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetProfileCustomization_Response.PurchasedCustomization.customization_type)
  return _internal_customization_type();
}
inline void CPlayer_GetProfileCustomization_Response_PurchasedCustomization::_internal_set_customization_type(::EProfileCustomizationType value) {
  assert(::EProfileCustomizationType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  customization_type_ = value;
}
inline void CPlayer_GetProfileCustomization_Response_PurchasedCustomization::set_customization_type(::EProfileCustomizationType value) {
  _internal_set_customization_type(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetProfileCustomization_Response.PurchasedCustomization.customization_type)
}

// optional uint32 level = 3;
inline bool CPlayer_GetProfileCustomization_Response_PurchasedCustomization::_internal_has_level() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CPlayer_GetProfileCustomization_Response_PurchasedCustomization::has_level() const {
  return _internal_has_level();
}
inline void CPlayer_GetProfileCustomization_Response_PurchasedCustomization::clear_level() {
  level_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CPlayer_GetProfileCustomization_Response_PurchasedCustomization::_internal_level() const {
  return level_;
}
inline uint32_t CPlayer_GetProfileCustomization_Response_PurchasedCustomization::level() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetProfileCustomization_Response.PurchasedCustomization.level)
  return _internal_level();
}
inline void CPlayer_GetProfileCustomization_Response_PurchasedCustomization::_internal_set_level(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  level_ = value;
}
inline void CPlayer_GetProfileCustomization_Response_PurchasedCustomization::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetProfileCustomization_Response.PurchasedCustomization.level)
}

// -------------------------------------------------------------------

// CPlayer_GetProfileCustomization_Response

// repeated .ProfileCustomization customizations = 1;
inline int CPlayer_GetProfileCustomization_Response::_internal_customizations_size() const {
  return customizations_.size();
}
inline int CPlayer_GetProfileCustomization_Response::customizations_size() const {
  return _internal_customizations_size();
}
inline void CPlayer_GetProfileCustomization_Response::clear_customizations() {
  customizations_.Clear();
}
inline ::ProfileCustomization* CPlayer_GetProfileCustomization_Response::mutable_customizations(int index) {
  // @@protoc_insertion_point(field_mutable:CPlayer_GetProfileCustomization_Response.customizations)
  return customizations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfileCustomization >*
CPlayer_GetProfileCustomization_Response::mutable_customizations() {
  // @@protoc_insertion_point(field_mutable_list:CPlayer_GetProfileCustomization_Response.customizations)
  return &customizations_;
}
inline const ::ProfileCustomization& CPlayer_GetProfileCustomization_Response::_internal_customizations(int index) const {
  return customizations_.Get(index);
}
inline const ::ProfileCustomization& CPlayer_GetProfileCustomization_Response::customizations(int index) const {
  // @@protoc_insertion_point(field_get:CPlayer_GetProfileCustomization_Response.customizations)
  return _internal_customizations(index);
}
inline ::ProfileCustomization* CPlayer_GetProfileCustomization_Response::_internal_add_customizations() {
  return customizations_.Add();
}
inline ::ProfileCustomization* CPlayer_GetProfileCustomization_Response::add_customizations() {
  ::ProfileCustomization* _add = _internal_add_customizations();
  // @@protoc_insertion_point(field_add:CPlayer_GetProfileCustomization_Response.customizations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfileCustomization >&
CPlayer_GetProfileCustomization_Response::customizations() const {
  // @@protoc_insertion_point(field_list:CPlayer_GetProfileCustomization_Response.customizations)
  return customizations_;
}

// optional uint32 slots_available = 2;
inline bool CPlayer_GetProfileCustomization_Response::_internal_has_slots_available() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CPlayer_GetProfileCustomization_Response::has_slots_available() const {
  return _internal_has_slots_available();
}
inline void CPlayer_GetProfileCustomization_Response::clear_slots_available() {
  slots_available_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CPlayer_GetProfileCustomization_Response::_internal_slots_available() const {
  return slots_available_;
}
inline uint32_t CPlayer_GetProfileCustomization_Response::slots_available() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetProfileCustomization_Response.slots_available)
  return _internal_slots_available();
}
inline void CPlayer_GetProfileCustomization_Response::_internal_set_slots_available(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  slots_available_ = value;
}
inline void CPlayer_GetProfileCustomization_Response::set_slots_available(uint32_t value) {
  _internal_set_slots_available(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetProfileCustomization_Response.slots_available)
}

// optional .ProfileTheme profile_theme = 3;
inline bool CPlayer_GetProfileCustomization_Response::_internal_has_profile_theme() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || profile_theme_ != nullptr);
  return value;
}
inline bool CPlayer_GetProfileCustomization_Response::has_profile_theme() const {
  return _internal_has_profile_theme();
}
inline void CPlayer_GetProfileCustomization_Response::clear_profile_theme() {
  if (profile_theme_ != nullptr) profile_theme_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ProfileTheme& CPlayer_GetProfileCustomization_Response::_internal_profile_theme() const {
  const ::ProfileTheme* p = profile_theme_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProfileTheme&>(
      ::_ProfileTheme_default_instance_);
}
inline const ::ProfileTheme& CPlayer_GetProfileCustomization_Response::profile_theme() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetProfileCustomization_Response.profile_theme)
  return _internal_profile_theme();
}
inline void CPlayer_GetProfileCustomization_Response::unsafe_arena_set_allocated_profile_theme(
    ::ProfileTheme* profile_theme) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(profile_theme_);
  }
  profile_theme_ = profile_theme;
  if (profile_theme) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CPlayer_GetProfileCustomization_Response.profile_theme)
}
inline ::ProfileTheme* CPlayer_GetProfileCustomization_Response::release_profile_theme() {
  _has_bits_[0] &= ~0x00000001u;
  ::ProfileTheme* temp = profile_theme_;
  profile_theme_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProfileTheme* CPlayer_GetProfileCustomization_Response::unsafe_arena_release_profile_theme() {
  // @@protoc_insertion_point(field_release:CPlayer_GetProfileCustomization_Response.profile_theme)
  _has_bits_[0] &= ~0x00000001u;
  ::ProfileTheme* temp = profile_theme_;
  profile_theme_ = nullptr;
  return temp;
}
inline ::ProfileTheme* CPlayer_GetProfileCustomization_Response::_internal_mutable_profile_theme() {
  _has_bits_[0] |= 0x00000001u;
  if (profile_theme_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProfileTheme>(GetArenaForAllocation());
    profile_theme_ = p;
  }
  return profile_theme_;
}
inline ::ProfileTheme* CPlayer_GetProfileCustomization_Response::mutable_profile_theme() {
  ::ProfileTheme* _msg = _internal_mutable_profile_theme();
  // @@protoc_insertion_point(field_mutable:CPlayer_GetProfileCustomization_Response.profile_theme)
  return _msg;
}
inline void CPlayer_GetProfileCustomization_Response::set_allocated_profile_theme(::ProfileTheme* profile_theme) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete profile_theme_;
  }
  if (profile_theme) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ProfileTheme>::GetOwningArena(profile_theme);
    if (message_arena != submessage_arena) {
      profile_theme = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, profile_theme, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  profile_theme_ = profile_theme;
  // @@protoc_insertion_point(field_set_allocated:CPlayer_GetProfileCustomization_Response.profile_theme)
}

// repeated .CPlayer_GetProfileCustomization_Response.PurchasedCustomization purchased_customizations = 4;
inline int CPlayer_GetProfileCustomization_Response::_internal_purchased_customizations_size() const {
  return purchased_customizations_.size();
}
inline int CPlayer_GetProfileCustomization_Response::purchased_customizations_size() const {
  return _internal_purchased_customizations_size();
}
inline void CPlayer_GetProfileCustomization_Response::clear_purchased_customizations() {
  purchased_customizations_.Clear();
}
inline ::CPlayer_GetProfileCustomization_Response_PurchasedCustomization* CPlayer_GetProfileCustomization_Response::mutable_purchased_customizations(int index) {
  // @@protoc_insertion_point(field_mutable:CPlayer_GetProfileCustomization_Response.purchased_customizations)
  return purchased_customizations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetProfileCustomization_Response_PurchasedCustomization >*
CPlayer_GetProfileCustomization_Response::mutable_purchased_customizations() {
  // @@protoc_insertion_point(field_mutable_list:CPlayer_GetProfileCustomization_Response.purchased_customizations)
  return &purchased_customizations_;
}
inline const ::CPlayer_GetProfileCustomization_Response_PurchasedCustomization& CPlayer_GetProfileCustomization_Response::_internal_purchased_customizations(int index) const {
  return purchased_customizations_.Get(index);
}
inline const ::CPlayer_GetProfileCustomization_Response_PurchasedCustomization& CPlayer_GetProfileCustomization_Response::purchased_customizations(int index) const {
  // @@protoc_insertion_point(field_get:CPlayer_GetProfileCustomization_Response.purchased_customizations)
  return _internal_purchased_customizations(index);
}
inline ::CPlayer_GetProfileCustomization_Response_PurchasedCustomization* CPlayer_GetProfileCustomization_Response::_internal_add_purchased_customizations() {
  return purchased_customizations_.Add();
}
inline ::CPlayer_GetProfileCustomization_Response_PurchasedCustomization* CPlayer_GetProfileCustomization_Response::add_purchased_customizations() {
  ::CPlayer_GetProfileCustomization_Response_PurchasedCustomization* _add = _internal_add_purchased_customizations();
  // @@protoc_insertion_point(field_add:CPlayer_GetProfileCustomization_Response.purchased_customizations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetProfileCustomization_Response_PurchasedCustomization >&
CPlayer_GetProfileCustomization_Response::purchased_customizations() const {
  // @@protoc_insertion_point(field_list:CPlayer_GetProfileCustomization_Response.purchased_customizations)
  return purchased_customizations_;
}

// optional .ProfilePreferences profile_preferences = 5;
inline bool CPlayer_GetProfileCustomization_Response::_internal_has_profile_preferences() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || profile_preferences_ != nullptr);
  return value;
}
inline bool CPlayer_GetProfileCustomization_Response::has_profile_preferences() const {
  return _internal_has_profile_preferences();
}
inline void CPlayer_GetProfileCustomization_Response::clear_profile_preferences() {
  if (profile_preferences_ != nullptr) profile_preferences_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::ProfilePreferences& CPlayer_GetProfileCustomization_Response::_internal_profile_preferences() const {
  const ::ProfilePreferences* p = profile_preferences_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProfilePreferences&>(
      ::_ProfilePreferences_default_instance_);
}
inline const ::ProfilePreferences& CPlayer_GetProfileCustomization_Response::profile_preferences() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetProfileCustomization_Response.profile_preferences)
  return _internal_profile_preferences();
}
inline void CPlayer_GetProfileCustomization_Response::unsafe_arena_set_allocated_profile_preferences(
    ::ProfilePreferences* profile_preferences) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(profile_preferences_);
  }
  profile_preferences_ = profile_preferences;
  if (profile_preferences) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CPlayer_GetProfileCustomization_Response.profile_preferences)
}
inline ::ProfilePreferences* CPlayer_GetProfileCustomization_Response::release_profile_preferences() {
  _has_bits_[0] &= ~0x00000002u;
  ::ProfilePreferences* temp = profile_preferences_;
  profile_preferences_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProfilePreferences* CPlayer_GetProfileCustomization_Response::unsafe_arena_release_profile_preferences() {
  // @@protoc_insertion_point(field_release:CPlayer_GetProfileCustomization_Response.profile_preferences)
  _has_bits_[0] &= ~0x00000002u;
  ::ProfilePreferences* temp = profile_preferences_;
  profile_preferences_ = nullptr;
  return temp;
}
inline ::ProfilePreferences* CPlayer_GetProfileCustomization_Response::_internal_mutable_profile_preferences() {
  _has_bits_[0] |= 0x00000002u;
  if (profile_preferences_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProfilePreferences>(GetArenaForAllocation());
    profile_preferences_ = p;
  }
  return profile_preferences_;
}
inline ::ProfilePreferences* CPlayer_GetProfileCustomization_Response::mutable_profile_preferences() {
  ::ProfilePreferences* _msg = _internal_mutable_profile_preferences();
  // @@protoc_insertion_point(field_mutable:CPlayer_GetProfileCustomization_Response.profile_preferences)
  return _msg;
}
inline void CPlayer_GetProfileCustomization_Response::set_allocated_profile_preferences(::ProfilePreferences* profile_preferences) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete profile_preferences_;
  }
  if (profile_preferences) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ProfilePreferences>::GetOwningArena(profile_preferences);
    if (message_arena != submessage_arena) {
      profile_preferences = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, profile_preferences, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  profile_preferences_ = profile_preferences;
  // @@protoc_insertion_point(field_set_allocated:CPlayer_GetProfileCustomization_Response.profile_preferences)
}

// -------------------------------------------------------------------

// CPlayer_GetPurchasedProfileCustomizations_Request

// optional fixed64 steamid = 1;
inline bool CPlayer_GetPurchasedProfileCustomizations_Request::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPlayer_GetPurchasedProfileCustomizations_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CPlayer_GetPurchasedProfileCustomizations_Request::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CPlayer_GetPurchasedProfileCustomizations_Request::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CPlayer_GetPurchasedProfileCustomizations_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetPurchasedProfileCustomizations_Request.steamid)
  return _internal_steamid();
}
inline void CPlayer_GetPurchasedProfileCustomizations_Request::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
}
inline void CPlayer_GetPurchasedProfileCustomizations_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetPurchasedProfileCustomizations_Request.steamid)
}

// -------------------------------------------------------------------

// CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization

// optional uint64 purchaseid = 1;
inline bool CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization::_internal_has_purchaseid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization::has_purchaseid() const {
  return _internal_has_purchaseid();
}
inline void CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization::clear_purchaseid() {
  purchaseid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization::_internal_purchaseid() const {
  return purchaseid_;
}
inline uint64_t CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization::purchaseid() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetPurchasedProfileCustomizations_Response.PurchasedCustomization.purchaseid)
  return _internal_purchaseid();
}
inline void CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization::_internal_set_purchaseid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  purchaseid_ = value;
}
inline void CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization::set_purchaseid(uint64_t value) {
  _internal_set_purchaseid(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetPurchasedProfileCustomizations_Response.PurchasedCustomization.purchaseid)
}

// optional .EProfileCustomizationType customization_type = 2 [default = k_EProfileCustomizationTypeInvalid];
inline bool CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization::_internal_has_customization_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization::has_customization_type() const {
  return _internal_has_customization_type();
}
inline void CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization::clear_customization_type() {
  customization_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::EProfileCustomizationType CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization::_internal_customization_type() const {
  return static_cast< ::EProfileCustomizationType >(customization_type_);
}
inline ::EProfileCustomizationType CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization::customization_type() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetPurchasedProfileCustomizations_Response.PurchasedCustomization.customization_type)
  return _internal_customization_type();
}
inline void CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization::_internal_set_customization_type(::EProfileCustomizationType value) {
  assert(::EProfileCustomizationType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  customization_type_ = value;
}
inline void CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization::set_customization_type(::EProfileCustomizationType value) {
  _internal_set_customization_type(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetPurchasedProfileCustomizations_Response.PurchasedCustomization.customization_type)
}

// -------------------------------------------------------------------

// CPlayer_GetPurchasedProfileCustomizations_Response

// repeated .CPlayer_GetPurchasedProfileCustomizations_Response.PurchasedCustomization purchased_customizations = 1;
inline int CPlayer_GetPurchasedProfileCustomizations_Response::_internal_purchased_customizations_size() const {
  return purchased_customizations_.size();
}
inline int CPlayer_GetPurchasedProfileCustomizations_Response::purchased_customizations_size() const {
  return _internal_purchased_customizations_size();
}
inline void CPlayer_GetPurchasedProfileCustomizations_Response::clear_purchased_customizations() {
  purchased_customizations_.Clear();
}
inline ::CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization* CPlayer_GetPurchasedProfileCustomizations_Response::mutable_purchased_customizations(int index) {
  // @@protoc_insertion_point(field_mutable:CPlayer_GetPurchasedProfileCustomizations_Response.purchased_customizations)
  return purchased_customizations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization >*
CPlayer_GetPurchasedProfileCustomizations_Response::mutable_purchased_customizations() {
  // @@protoc_insertion_point(field_mutable_list:CPlayer_GetPurchasedProfileCustomizations_Response.purchased_customizations)
  return &purchased_customizations_;
}
inline const ::CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization& CPlayer_GetPurchasedProfileCustomizations_Response::_internal_purchased_customizations(int index) const {
  return purchased_customizations_.Get(index);
}
inline const ::CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization& CPlayer_GetPurchasedProfileCustomizations_Response::purchased_customizations(int index) const {
  // @@protoc_insertion_point(field_get:CPlayer_GetPurchasedProfileCustomizations_Response.purchased_customizations)
  return _internal_purchased_customizations(index);
}
inline ::CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization* CPlayer_GetPurchasedProfileCustomizations_Response::_internal_add_purchased_customizations() {
  return purchased_customizations_.Add();
}
inline ::CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization* CPlayer_GetPurchasedProfileCustomizations_Response::add_purchased_customizations() {
  ::CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization* _add = _internal_add_purchased_customizations();
  // @@protoc_insertion_point(field_add:CPlayer_GetPurchasedProfileCustomizations_Response.purchased_customizations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization >&
CPlayer_GetPurchasedProfileCustomizations_Response::purchased_customizations() const {
  // @@protoc_insertion_point(field_list:CPlayer_GetPurchasedProfileCustomizations_Response.purchased_customizations)
  return purchased_customizations_;
}

// -------------------------------------------------------------------

// CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request

// optional fixed64 steamid = 1;
inline bool CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request.steamid)
  return _internal_steamid();
}
inline void CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
}
inline void CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request.steamid)
}

// -------------------------------------------------------------------

// CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization

// optional .EProfileCustomizationType customization_type = 1 [default = k_EProfileCustomizationTypeInvalid];
inline bool CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization::_internal_has_customization_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization::has_customization_type() const {
  return _internal_has_customization_type();
}
inline void CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization::clear_customization_type() {
  customization_type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::EProfileCustomizationType CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization::_internal_customization_type() const {
  return static_cast< ::EProfileCustomizationType >(customization_type_);
}
inline ::EProfileCustomizationType CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization::customization_type() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response.PurchasedCustomization.customization_type)
  return _internal_customization_type();
}
inline void CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization::_internal_set_customization_type(::EProfileCustomizationType value) {
  assert(::EProfileCustomizationType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  customization_type_ = value;
}
inline void CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization::set_customization_type(::EProfileCustomizationType value) {
  _internal_set_customization_type(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response.PurchasedCustomization.customization_type)
}

// optional uint32 count = 2;
inline bool CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization::has_count() const {
  return _internal_has_count();
}
inline void CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization::clear_count() {
  count_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization::_internal_count() const {
  return count_;
}
inline uint32_t CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization::count() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response.PurchasedCustomization.count)
  return _internal_count();
}
inline void CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization::_internal_set_count(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  count_ = value;
}
inline void CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization::set_count(uint32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response.PurchasedCustomization.count)
}

// -------------------------------------------------------------------

// CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization

// optional .EProfileCustomizationType customization_type = 1 [default = k_EProfileCustomizationTypeInvalid];
inline bool CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization::_internal_has_customization_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization::has_customization_type() const {
  return _internal_has_customization_type();
}
inline void CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization::clear_customization_type() {
  customization_type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::EProfileCustomizationType CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization::_internal_customization_type() const {
  return static_cast< ::EProfileCustomizationType >(customization_type_);
}
inline ::EProfileCustomizationType CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization::customization_type() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response.UpgradedCustomization.customization_type)
  return _internal_customization_type();
}
inline void CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization::_internal_set_customization_type(::EProfileCustomizationType value) {
  assert(::EProfileCustomizationType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  customization_type_ = value;
}
inline void CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization::set_customization_type(::EProfileCustomizationType value) {
  _internal_set_customization_type(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response.UpgradedCustomization.customization_type)
}

// optional uint32 level = 2;
inline bool CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization::_internal_has_level() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization::has_level() const {
  return _internal_has_level();
}
inline void CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization::clear_level() {
  level_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization::_internal_level() const {
  return level_;
}
inline uint32_t CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization::level() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response.UpgradedCustomization.level)
  return _internal_level();
}
inline void CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization::_internal_set_level(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  level_ = value;
}
inline void CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response.UpgradedCustomization.level)
}

// -------------------------------------------------------------------

// CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response

// repeated .CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response.PurchasedCustomization purchased_customizations = 1;
inline int CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response::_internal_purchased_customizations_size() const {
  return purchased_customizations_.size();
}
inline int CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response::purchased_customizations_size() const {
  return _internal_purchased_customizations_size();
}
inline void CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response::clear_purchased_customizations() {
  purchased_customizations_.Clear();
}
inline ::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization* CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response::mutable_purchased_customizations(int index) {
  // @@protoc_insertion_point(field_mutable:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response.purchased_customizations)
  return purchased_customizations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization >*
CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response::mutable_purchased_customizations() {
  // @@protoc_insertion_point(field_mutable_list:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response.purchased_customizations)
  return &purchased_customizations_;
}
inline const ::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization& CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response::_internal_purchased_customizations(int index) const {
  return purchased_customizations_.Get(index);
}
inline const ::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization& CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response::purchased_customizations(int index) const {
  // @@protoc_insertion_point(field_get:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response.purchased_customizations)
  return _internal_purchased_customizations(index);
}
inline ::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization* CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response::_internal_add_purchased_customizations() {
  return purchased_customizations_.Add();
}
inline ::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization* CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response::add_purchased_customizations() {
  ::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization* _add = _internal_add_purchased_customizations();
  // @@protoc_insertion_point(field_add:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response.purchased_customizations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization >&
CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response::purchased_customizations() const {
  // @@protoc_insertion_point(field_list:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response.purchased_customizations)
  return purchased_customizations_;
}

// repeated .CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response.UpgradedCustomization upgraded_customizations = 2;
inline int CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response::_internal_upgraded_customizations_size() const {
  return upgraded_customizations_.size();
}
inline int CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response::upgraded_customizations_size() const {
  return _internal_upgraded_customizations_size();
}
inline void CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response::clear_upgraded_customizations() {
  upgraded_customizations_.Clear();
}
inline ::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization* CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response::mutable_upgraded_customizations(int index) {
  // @@protoc_insertion_point(field_mutable:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response.upgraded_customizations)
  return upgraded_customizations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization >*
CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response::mutable_upgraded_customizations() {
  // @@protoc_insertion_point(field_mutable_list:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response.upgraded_customizations)
  return &upgraded_customizations_;
}
inline const ::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization& CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response::_internal_upgraded_customizations(int index) const {
  return upgraded_customizations_.Get(index);
}
inline const ::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization& CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response::upgraded_customizations(int index) const {
  // @@protoc_insertion_point(field_get:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response.upgraded_customizations)
  return _internal_upgraded_customizations(index);
}
inline ::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization* CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response::_internal_add_upgraded_customizations() {
  return upgraded_customizations_.Add();
}
inline ::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization* CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response::add_upgraded_customizations() {
  ::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization* _add = _internal_add_upgraded_customizations();
  // @@protoc_insertion_point(field_add:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response.upgraded_customizations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization >&
CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response::upgraded_customizations() const {
  // @@protoc_insertion_point(field_list:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response.upgraded_customizations)
  return upgraded_customizations_;
}

// -------------------------------------------------------------------

// CPlayer_GetProfileThemesAvailable_Request

// -------------------------------------------------------------------

// CPlayer_GetProfileThemesAvailable_Response

// repeated .ProfileTheme profile_themes = 1;
inline int CPlayer_GetProfileThemesAvailable_Response::_internal_profile_themes_size() const {
  return profile_themes_.size();
}
inline int CPlayer_GetProfileThemesAvailable_Response::profile_themes_size() const {
  return _internal_profile_themes_size();
}
inline void CPlayer_GetProfileThemesAvailable_Response::clear_profile_themes() {
  profile_themes_.Clear();
}
inline ::ProfileTheme* CPlayer_GetProfileThemesAvailable_Response::mutable_profile_themes(int index) {
  // @@protoc_insertion_point(field_mutable:CPlayer_GetProfileThemesAvailable_Response.profile_themes)
  return profile_themes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfileTheme >*
CPlayer_GetProfileThemesAvailable_Response::mutable_profile_themes() {
  // @@protoc_insertion_point(field_mutable_list:CPlayer_GetProfileThemesAvailable_Response.profile_themes)
  return &profile_themes_;
}
inline const ::ProfileTheme& CPlayer_GetProfileThemesAvailable_Response::_internal_profile_themes(int index) const {
  return profile_themes_.Get(index);
}
inline const ::ProfileTheme& CPlayer_GetProfileThemesAvailable_Response::profile_themes(int index) const {
  // @@protoc_insertion_point(field_get:CPlayer_GetProfileThemesAvailable_Response.profile_themes)
  return _internal_profile_themes(index);
}
inline ::ProfileTheme* CPlayer_GetProfileThemesAvailable_Response::_internal_add_profile_themes() {
  return profile_themes_.Add();
}
inline ::ProfileTheme* CPlayer_GetProfileThemesAvailable_Response::add_profile_themes() {
  ::ProfileTheme* _add = _internal_add_profile_themes();
  // @@protoc_insertion_point(field_add:CPlayer_GetProfileThemesAvailable_Response.profile_themes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProfileTheme >&
CPlayer_GetProfileThemesAvailable_Response::profile_themes() const {
  // @@protoc_insertion_point(field_list:CPlayer_GetProfileThemesAvailable_Response.profile_themes)
  return profile_themes_;
}

// -------------------------------------------------------------------

// CPlayer_SetProfileTheme_Request

// optional string theme_id = 1;
inline bool CPlayer_SetProfileTheme_Request::_internal_has_theme_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPlayer_SetProfileTheme_Request::has_theme_id() const {
  return _internal_has_theme_id();
}
inline void CPlayer_SetProfileTheme_Request::clear_theme_id() {
  theme_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CPlayer_SetProfileTheme_Request::theme_id() const {
  // @@protoc_insertion_point(field_get:CPlayer_SetProfileTheme_Request.theme_id)
  return _internal_theme_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CPlayer_SetProfileTheme_Request::set_theme_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 theme_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CPlayer_SetProfileTheme_Request.theme_id)
}
inline std::string* CPlayer_SetProfileTheme_Request::mutable_theme_id() {
  std::string* _s = _internal_mutable_theme_id();
  // @@protoc_insertion_point(field_mutable:CPlayer_SetProfileTheme_Request.theme_id)
  return _s;
}
inline const std::string& CPlayer_SetProfileTheme_Request::_internal_theme_id() const {
  return theme_id_.Get();
}
inline void CPlayer_SetProfileTheme_Request::_internal_set_theme_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  theme_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CPlayer_SetProfileTheme_Request::_internal_mutable_theme_id() {
  _has_bits_[0] |= 0x00000001u;
  return theme_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CPlayer_SetProfileTheme_Request::release_theme_id() {
  // @@protoc_insertion_point(field_release:CPlayer_SetProfileTheme_Request.theme_id)
  if (!_internal_has_theme_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = theme_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (theme_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    theme_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CPlayer_SetProfileTheme_Request::set_allocated_theme_id(std::string* theme_id) {
  if (theme_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  theme_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), theme_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (theme_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    theme_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CPlayer_SetProfileTheme_Request.theme_id)
}

// -------------------------------------------------------------------

// CPlayer_SetProfileTheme_Response

// -------------------------------------------------------------------

// CPlayer_SetProfilePreferences_Request

// optional .ProfilePreferences profile_preferences = 1;
inline bool CPlayer_SetProfilePreferences_Request::_internal_has_profile_preferences() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || profile_preferences_ != nullptr);
  return value;
}
inline bool CPlayer_SetProfilePreferences_Request::has_profile_preferences() const {
  return _internal_has_profile_preferences();
}
inline void CPlayer_SetProfilePreferences_Request::clear_profile_preferences() {
  if (profile_preferences_ != nullptr) profile_preferences_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ProfilePreferences& CPlayer_SetProfilePreferences_Request::_internal_profile_preferences() const {
  const ::ProfilePreferences* p = profile_preferences_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProfilePreferences&>(
      ::_ProfilePreferences_default_instance_);
}
inline const ::ProfilePreferences& CPlayer_SetProfilePreferences_Request::profile_preferences() const {
  // @@protoc_insertion_point(field_get:CPlayer_SetProfilePreferences_Request.profile_preferences)
  return _internal_profile_preferences();
}
inline void CPlayer_SetProfilePreferences_Request::unsafe_arena_set_allocated_profile_preferences(
    ::ProfilePreferences* profile_preferences) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(profile_preferences_);
  }
  profile_preferences_ = profile_preferences;
  if (profile_preferences) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CPlayer_SetProfilePreferences_Request.profile_preferences)
}
inline ::ProfilePreferences* CPlayer_SetProfilePreferences_Request::release_profile_preferences() {
  _has_bits_[0] &= ~0x00000001u;
  ::ProfilePreferences* temp = profile_preferences_;
  profile_preferences_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProfilePreferences* CPlayer_SetProfilePreferences_Request::unsafe_arena_release_profile_preferences() {
  // @@protoc_insertion_point(field_release:CPlayer_SetProfilePreferences_Request.profile_preferences)
  _has_bits_[0] &= ~0x00000001u;
  ::ProfilePreferences* temp = profile_preferences_;
  profile_preferences_ = nullptr;
  return temp;
}
inline ::ProfilePreferences* CPlayer_SetProfilePreferences_Request::_internal_mutable_profile_preferences() {
  _has_bits_[0] |= 0x00000001u;
  if (profile_preferences_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProfilePreferences>(GetArenaForAllocation());
    profile_preferences_ = p;
  }
  return profile_preferences_;
}
inline ::ProfilePreferences* CPlayer_SetProfilePreferences_Request::mutable_profile_preferences() {
  ::ProfilePreferences* _msg = _internal_mutable_profile_preferences();
  // @@protoc_insertion_point(field_mutable:CPlayer_SetProfilePreferences_Request.profile_preferences)
  return _msg;
}
inline void CPlayer_SetProfilePreferences_Request::set_allocated_profile_preferences(::ProfilePreferences* profile_preferences) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete profile_preferences_;
  }
  if (profile_preferences) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ProfilePreferences>::GetOwningArena(profile_preferences);
    if (message_arena != submessage_arena) {
      profile_preferences = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, profile_preferences, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  profile_preferences_ = profile_preferences;
  // @@protoc_insertion_point(field_set_allocated:CPlayer_SetProfilePreferences_Request.profile_preferences)
}

// -------------------------------------------------------------------

// CPlayer_SetProfilePreferences_Response

// -------------------------------------------------------------------

// CPlayer_PostStatusToFriends_Request

// optional uint32 appid = 1;
inline bool CPlayer_PostStatusToFriends_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPlayer_PostStatusToFriends_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CPlayer_PostStatusToFriends_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CPlayer_PostStatusToFriends_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CPlayer_PostStatusToFriends_Request::appid() const {
  // @@protoc_insertion_point(field_get:CPlayer_PostStatusToFriends_Request.appid)
  return _internal_appid();
}
inline void CPlayer_PostStatusToFriends_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  appid_ = value;
}
inline void CPlayer_PostStatusToFriends_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CPlayer_PostStatusToFriends_Request.appid)
}

// optional string status_text = 2;
inline bool CPlayer_PostStatusToFriends_Request::_internal_has_status_text() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPlayer_PostStatusToFriends_Request::has_status_text() const {
  return _internal_has_status_text();
}
inline void CPlayer_PostStatusToFriends_Request::clear_status_text() {
  status_text_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CPlayer_PostStatusToFriends_Request::status_text() const {
  // @@protoc_insertion_point(field_get:CPlayer_PostStatusToFriends_Request.status_text)
  return _internal_status_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CPlayer_PostStatusToFriends_Request::set_status_text(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 status_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CPlayer_PostStatusToFriends_Request.status_text)
}
inline std::string* CPlayer_PostStatusToFriends_Request::mutable_status_text() {
  std::string* _s = _internal_mutable_status_text();
  // @@protoc_insertion_point(field_mutable:CPlayer_PostStatusToFriends_Request.status_text)
  return _s;
}
inline const std::string& CPlayer_PostStatusToFriends_Request::_internal_status_text() const {
  return status_text_.Get();
}
inline void CPlayer_PostStatusToFriends_Request::_internal_set_status_text(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  status_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CPlayer_PostStatusToFriends_Request::_internal_mutable_status_text() {
  _has_bits_[0] |= 0x00000001u;
  return status_text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CPlayer_PostStatusToFriends_Request::release_status_text() {
  // @@protoc_insertion_point(field_release:CPlayer_PostStatusToFriends_Request.status_text)
  if (!_internal_has_status_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = status_text_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (status_text_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    status_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CPlayer_PostStatusToFriends_Request::set_allocated_status_text(std::string* status_text) {
  if (status_text != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  status_text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status_text,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (status_text_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    status_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CPlayer_PostStatusToFriends_Request.status_text)
}

// -------------------------------------------------------------------

// CPlayer_PostStatusToFriends_Response

// -------------------------------------------------------------------

// CPlayer_GetPostedStatus_Request

// optional uint64 steamid = 1 [(.description) = "The player we\'re asking about"];
inline bool CPlayer_GetPostedStatus_Request::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPlayer_GetPostedStatus_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CPlayer_GetPostedStatus_Request::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CPlayer_GetPostedStatus_Request::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CPlayer_GetPostedStatus_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetPostedStatus_Request.steamid)
  return _internal_steamid();
}
inline void CPlayer_GetPostedStatus_Request::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
}
inline void CPlayer_GetPostedStatus_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetPostedStatus_Request.steamid)
}

// optional uint64 postid = 2;
inline bool CPlayer_GetPostedStatus_Request::_internal_has_postid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPlayer_GetPostedStatus_Request::has_postid() const {
  return _internal_has_postid();
}
inline void CPlayer_GetPostedStatus_Request::clear_postid() {
  postid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CPlayer_GetPostedStatus_Request::_internal_postid() const {
  return postid_;
}
inline uint64_t CPlayer_GetPostedStatus_Request::postid() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetPostedStatus_Request.postid)
  return _internal_postid();
}
inline void CPlayer_GetPostedStatus_Request::_internal_set_postid(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  postid_ = value;
}
inline void CPlayer_GetPostedStatus_Request::set_postid(uint64_t value) {
  _internal_set_postid(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetPostedStatus_Request.postid)
}

// -------------------------------------------------------------------

// CPlayer_GetPostedStatus_Response

// optional uint32 accountid = 1;
inline bool CPlayer_GetPostedStatus_Response::_internal_has_accountid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CPlayer_GetPostedStatus_Response::has_accountid() const {
  return _internal_has_accountid();
}
inline void CPlayer_GetPostedStatus_Response::clear_accountid() {
  accountid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CPlayer_GetPostedStatus_Response::_internal_accountid() const {
  return accountid_;
}
inline uint32_t CPlayer_GetPostedStatus_Response::accountid() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetPostedStatus_Response.accountid)
  return _internal_accountid();
}
inline void CPlayer_GetPostedStatus_Response::_internal_set_accountid(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  accountid_ = value;
}
inline void CPlayer_GetPostedStatus_Response::set_accountid(uint32_t value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetPostedStatus_Response.accountid)
}

// optional uint64 postid = 2;
inline bool CPlayer_GetPostedStatus_Response::_internal_has_postid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPlayer_GetPostedStatus_Response::has_postid() const {
  return _internal_has_postid();
}
inline void CPlayer_GetPostedStatus_Response::clear_postid() {
  postid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CPlayer_GetPostedStatus_Response::_internal_postid() const {
  return postid_;
}
inline uint64_t CPlayer_GetPostedStatus_Response::postid() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetPostedStatus_Response.postid)
  return _internal_postid();
}
inline void CPlayer_GetPostedStatus_Response::_internal_set_postid(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  postid_ = value;
}
inline void CPlayer_GetPostedStatus_Response::set_postid(uint64_t value) {
  _internal_set_postid(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetPostedStatus_Response.postid)
}

// optional string status_text = 3;
inline bool CPlayer_GetPostedStatus_Response::_internal_has_status_text() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPlayer_GetPostedStatus_Response::has_status_text() const {
  return _internal_has_status_text();
}
inline void CPlayer_GetPostedStatus_Response::clear_status_text() {
  status_text_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CPlayer_GetPostedStatus_Response::status_text() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetPostedStatus_Response.status_text)
  return _internal_status_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CPlayer_GetPostedStatus_Response::set_status_text(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 status_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CPlayer_GetPostedStatus_Response.status_text)
}
inline std::string* CPlayer_GetPostedStatus_Response::mutable_status_text() {
  std::string* _s = _internal_mutable_status_text();
  // @@protoc_insertion_point(field_mutable:CPlayer_GetPostedStatus_Response.status_text)
  return _s;
}
inline const std::string& CPlayer_GetPostedStatus_Response::_internal_status_text() const {
  return status_text_.Get();
}
inline void CPlayer_GetPostedStatus_Response::_internal_set_status_text(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  status_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CPlayer_GetPostedStatus_Response::_internal_mutable_status_text() {
  _has_bits_[0] |= 0x00000001u;
  return status_text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CPlayer_GetPostedStatus_Response::release_status_text() {
  // @@protoc_insertion_point(field_release:CPlayer_GetPostedStatus_Response.status_text)
  if (!_internal_has_status_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = status_text_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (status_text_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    status_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CPlayer_GetPostedStatus_Response::set_allocated_status_text(std::string* status_text) {
  if (status_text != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  status_text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status_text,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (status_text_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    status_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CPlayer_GetPostedStatus_Response.status_text)
}

// optional bool deleted = 4;
inline bool CPlayer_GetPostedStatus_Response::_internal_has_deleted() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CPlayer_GetPostedStatus_Response::has_deleted() const {
  return _internal_has_deleted();
}
inline void CPlayer_GetPostedStatus_Response::clear_deleted() {
  deleted_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CPlayer_GetPostedStatus_Response::_internal_deleted() const {
  return deleted_;
}
inline bool CPlayer_GetPostedStatus_Response::deleted() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetPostedStatus_Response.deleted)
  return _internal_deleted();
}
inline void CPlayer_GetPostedStatus_Response::_internal_set_deleted(bool value) {
  _has_bits_[0] |= 0x00000008u;
  deleted_ = value;
}
inline void CPlayer_GetPostedStatus_Response::set_deleted(bool value) {
  _internal_set_deleted(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetPostedStatus_Response.deleted)
}

// optional uint32 appid = 5;
inline bool CPlayer_GetPostedStatus_Response::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CPlayer_GetPostedStatus_Response::has_appid() const {
  return _internal_has_appid();
}
inline void CPlayer_GetPostedStatus_Response::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CPlayer_GetPostedStatus_Response::_internal_appid() const {
  return appid_;
}
inline uint32_t CPlayer_GetPostedStatus_Response::appid() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetPostedStatus_Response.appid)
  return _internal_appid();
}
inline void CPlayer_GetPostedStatus_Response::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  appid_ = value;
}
inline void CPlayer_GetPostedStatus_Response::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetPostedStatus_Response.appid)
}

// -------------------------------------------------------------------

// CPlayer_DeletePostedStatus_Request

// optional uint64 postid = 1;
inline bool CPlayer_DeletePostedStatus_Request::_internal_has_postid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPlayer_DeletePostedStatus_Request::has_postid() const {
  return _internal_has_postid();
}
inline void CPlayer_DeletePostedStatus_Request::clear_postid() {
  postid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CPlayer_DeletePostedStatus_Request::_internal_postid() const {
  return postid_;
}
inline uint64_t CPlayer_DeletePostedStatus_Request::postid() const {
  // @@protoc_insertion_point(field_get:CPlayer_DeletePostedStatus_Request.postid)
  return _internal_postid();
}
inline void CPlayer_DeletePostedStatus_Request::_internal_set_postid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  postid_ = value;
}
inline void CPlayer_DeletePostedStatus_Request::set_postid(uint64_t value) {
  _internal_set_postid(value);
  // @@protoc_insertion_point(field_set:CPlayer_DeletePostedStatus_Request.postid)
}

// -------------------------------------------------------------------

// CPlayer_DeletePostedStatus_Response

// -------------------------------------------------------------------

// CPlayer_GetLastPlayedTimes_Request

// optional uint32 min_last_played = 1 [(.description) = "The most recent last-played time the client already knows about"];
inline bool CPlayer_GetLastPlayedTimes_Request::_internal_has_min_last_played() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPlayer_GetLastPlayedTimes_Request::has_min_last_played() const {
  return _internal_has_min_last_played();
}
inline void CPlayer_GetLastPlayedTimes_Request::clear_min_last_played() {
  min_last_played_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CPlayer_GetLastPlayedTimes_Request::_internal_min_last_played() const {
  return min_last_played_;
}
inline uint32_t CPlayer_GetLastPlayedTimes_Request::min_last_played() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetLastPlayedTimes_Request.min_last_played)
  return _internal_min_last_played();
}
inline void CPlayer_GetLastPlayedTimes_Request::_internal_set_min_last_played(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  min_last_played_ = value;
}
inline void CPlayer_GetLastPlayedTimes_Request::set_min_last_played(uint32_t value) {
  _internal_set_min_last_played(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetLastPlayedTimes_Request.min_last_played)
}

// -------------------------------------------------------------------

// CPlayer_GetLastPlayedTimes_Response_Game

// optional int32 appid = 1;
inline bool CPlayer_GetLastPlayedTimes_Response_Game::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPlayer_GetLastPlayedTimes_Response_Game::has_appid() const {
  return _internal_has_appid();
}
inline void CPlayer_GetLastPlayedTimes_Response_Game::clear_appid() {
  appid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t CPlayer_GetLastPlayedTimes_Response_Game::_internal_appid() const {
  return appid_;
}
inline int32_t CPlayer_GetLastPlayedTimes_Response_Game::appid() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetLastPlayedTimes_Response.Game.appid)
  return _internal_appid();
}
inline void CPlayer_GetLastPlayedTimes_Response_Game::_internal_set_appid(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  appid_ = value;
}
inline void CPlayer_GetLastPlayedTimes_Response_Game::set_appid(int32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetLastPlayedTimes_Response.Game.appid)
}

// optional uint32 last_playtime = 2;
inline bool CPlayer_GetLastPlayedTimes_Response_Game::_internal_has_last_playtime() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPlayer_GetLastPlayedTimes_Response_Game::has_last_playtime() const {
  return _internal_has_last_playtime();
}
inline void CPlayer_GetLastPlayedTimes_Response_Game::clear_last_playtime() {
  last_playtime_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CPlayer_GetLastPlayedTimes_Response_Game::_internal_last_playtime() const {
  return last_playtime_;
}
inline uint32_t CPlayer_GetLastPlayedTimes_Response_Game::last_playtime() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetLastPlayedTimes_Response.Game.last_playtime)
  return _internal_last_playtime();
}
inline void CPlayer_GetLastPlayedTimes_Response_Game::_internal_set_last_playtime(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  last_playtime_ = value;
}
inline void CPlayer_GetLastPlayedTimes_Response_Game::set_last_playtime(uint32_t value) {
  _internal_set_last_playtime(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetLastPlayedTimes_Response.Game.last_playtime)
}

// optional int32 playtime_2weeks = 3;
inline bool CPlayer_GetLastPlayedTimes_Response_Game::_internal_has_playtime_2weeks() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CPlayer_GetLastPlayedTimes_Response_Game::has_playtime_2weeks() const {
  return _internal_has_playtime_2weeks();
}
inline void CPlayer_GetLastPlayedTimes_Response_Game::clear_playtime_2weeks() {
  playtime_2weeks_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t CPlayer_GetLastPlayedTimes_Response_Game::_internal_playtime_2weeks() const {
  return playtime_2weeks_;
}
inline int32_t CPlayer_GetLastPlayedTimes_Response_Game::playtime_2weeks() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetLastPlayedTimes_Response.Game.playtime_2weeks)
  return _internal_playtime_2weeks();
}
inline void CPlayer_GetLastPlayedTimes_Response_Game::_internal_set_playtime_2weeks(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  playtime_2weeks_ = value;
}
inline void CPlayer_GetLastPlayedTimes_Response_Game::set_playtime_2weeks(int32_t value) {
  _internal_set_playtime_2weeks(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetLastPlayedTimes_Response.Game.playtime_2weeks)
}

// optional int32 playtime_forever = 4;
inline bool CPlayer_GetLastPlayedTimes_Response_Game::_internal_has_playtime_forever() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CPlayer_GetLastPlayedTimes_Response_Game::has_playtime_forever() const {
  return _internal_has_playtime_forever();
}
inline void CPlayer_GetLastPlayedTimes_Response_Game::clear_playtime_forever() {
  playtime_forever_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t CPlayer_GetLastPlayedTimes_Response_Game::_internal_playtime_forever() const {
  return playtime_forever_;
}
inline int32_t CPlayer_GetLastPlayedTimes_Response_Game::playtime_forever() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetLastPlayedTimes_Response.Game.playtime_forever)
  return _internal_playtime_forever();
}
inline void CPlayer_GetLastPlayedTimes_Response_Game::_internal_set_playtime_forever(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  playtime_forever_ = value;
}
inline void CPlayer_GetLastPlayedTimes_Response_Game::set_playtime_forever(int32_t value) {
  _internal_set_playtime_forever(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetLastPlayedTimes_Response.Game.playtime_forever)
}

// optional uint32 first_playtime = 5;
inline bool CPlayer_GetLastPlayedTimes_Response_Game::_internal_has_first_playtime() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CPlayer_GetLastPlayedTimes_Response_Game::has_first_playtime() const {
  return _internal_has_first_playtime();
}
inline void CPlayer_GetLastPlayedTimes_Response_Game::clear_first_playtime() {
  first_playtime_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CPlayer_GetLastPlayedTimes_Response_Game::_internal_first_playtime() const {
  return first_playtime_;
}
inline uint32_t CPlayer_GetLastPlayedTimes_Response_Game::first_playtime() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetLastPlayedTimes_Response.Game.first_playtime)
  return _internal_first_playtime();
}
inline void CPlayer_GetLastPlayedTimes_Response_Game::_internal_set_first_playtime(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  first_playtime_ = value;
}
inline void CPlayer_GetLastPlayedTimes_Response_Game::set_first_playtime(uint32_t value) {
  _internal_set_first_playtime(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetLastPlayedTimes_Response.Game.first_playtime)
}

// optional int32 playtime_windows_forever = 6;
inline bool CPlayer_GetLastPlayedTimes_Response_Game::_internal_has_playtime_windows_forever() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CPlayer_GetLastPlayedTimes_Response_Game::has_playtime_windows_forever() const {
  return _internal_has_playtime_windows_forever();
}
inline void CPlayer_GetLastPlayedTimes_Response_Game::clear_playtime_windows_forever() {
  playtime_windows_forever_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline int32_t CPlayer_GetLastPlayedTimes_Response_Game::_internal_playtime_windows_forever() const {
  return playtime_windows_forever_;
}
inline int32_t CPlayer_GetLastPlayedTimes_Response_Game::playtime_windows_forever() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetLastPlayedTimes_Response.Game.playtime_windows_forever)
  return _internal_playtime_windows_forever();
}
inline void CPlayer_GetLastPlayedTimes_Response_Game::_internal_set_playtime_windows_forever(int32_t value) {
  _has_bits_[0] |= 0x00000020u;
  playtime_windows_forever_ = value;
}
inline void CPlayer_GetLastPlayedTimes_Response_Game::set_playtime_windows_forever(int32_t value) {
  _internal_set_playtime_windows_forever(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetLastPlayedTimes_Response.Game.playtime_windows_forever)
}

// optional int32 playtime_mac_forever = 7;
inline bool CPlayer_GetLastPlayedTimes_Response_Game::_internal_has_playtime_mac_forever() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CPlayer_GetLastPlayedTimes_Response_Game::has_playtime_mac_forever() const {
  return _internal_has_playtime_mac_forever();
}
inline void CPlayer_GetLastPlayedTimes_Response_Game::clear_playtime_mac_forever() {
  playtime_mac_forever_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline int32_t CPlayer_GetLastPlayedTimes_Response_Game::_internal_playtime_mac_forever() const {
  return playtime_mac_forever_;
}
inline int32_t CPlayer_GetLastPlayedTimes_Response_Game::playtime_mac_forever() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetLastPlayedTimes_Response.Game.playtime_mac_forever)
  return _internal_playtime_mac_forever();
}
inline void CPlayer_GetLastPlayedTimes_Response_Game::_internal_set_playtime_mac_forever(int32_t value) {
  _has_bits_[0] |= 0x00000040u;
  playtime_mac_forever_ = value;
}
inline void CPlayer_GetLastPlayedTimes_Response_Game::set_playtime_mac_forever(int32_t value) {
  _internal_set_playtime_mac_forever(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetLastPlayedTimes_Response.Game.playtime_mac_forever)
}

// optional int32 playtime_linux_forever = 8;
inline bool CPlayer_GetLastPlayedTimes_Response_Game::_internal_has_playtime_linux_forever() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CPlayer_GetLastPlayedTimes_Response_Game::has_playtime_linux_forever() const {
  return _internal_has_playtime_linux_forever();
}
inline void CPlayer_GetLastPlayedTimes_Response_Game::clear_playtime_linux_forever() {
  playtime_linux_forever_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline int32_t CPlayer_GetLastPlayedTimes_Response_Game::_internal_playtime_linux_forever() const {
  return playtime_linux_forever_;
}
inline int32_t CPlayer_GetLastPlayedTimes_Response_Game::playtime_linux_forever() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetLastPlayedTimes_Response.Game.playtime_linux_forever)
  return _internal_playtime_linux_forever();
}
inline void CPlayer_GetLastPlayedTimes_Response_Game::_internal_set_playtime_linux_forever(int32_t value) {
  _has_bits_[0] |= 0x00000080u;
  playtime_linux_forever_ = value;
}
inline void CPlayer_GetLastPlayedTimes_Response_Game::set_playtime_linux_forever(int32_t value) {
  _internal_set_playtime_linux_forever(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetLastPlayedTimes_Response.Game.playtime_linux_forever)
}

// optional uint32 first_windows_playtime = 9;
inline bool CPlayer_GetLastPlayedTimes_Response_Game::_internal_has_first_windows_playtime() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CPlayer_GetLastPlayedTimes_Response_Game::has_first_windows_playtime() const {
  return _internal_has_first_windows_playtime();
}
inline void CPlayer_GetLastPlayedTimes_Response_Game::clear_first_windows_playtime() {
  first_windows_playtime_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CPlayer_GetLastPlayedTimes_Response_Game::_internal_first_windows_playtime() const {
  return first_windows_playtime_;
}
inline uint32_t CPlayer_GetLastPlayedTimes_Response_Game::first_windows_playtime() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetLastPlayedTimes_Response.Game.first_windows_playtime)
  return _internal_first_windows_playtime();
}
inline void CPlayer_GetLastPlayedTimes_Response_Game::_internal_set_first_windows_playtime(uint32_t value) {
  _has_bits_[0] |= 0x00000100u;
  first_windows_playtime_ = value;
}
inline void CPlayer_GetLastPlayedTimes_Response_Game::set_first_windows_playtime(uint32_t value) {
  _internal_set_first_windows_playtime(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetLastPlayedTimes_Response.Game.first_windows_playtime)
}

// optional uint32 first_mac_playtime = 10;
inline bool CPlayer_GetLastPlayedTimes_Response_Game::_internal_has_first_mac_playtime() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CPlayer_GetLastPlayedTimes_Response_Game::has_first_mac_playtime() const {
  return _internal_has_first_mac_playtime();
}
inline void CPlayer_GetLastPlayedTimes_Response_Game::clear_first_mac_playtime() {
  first_mac_playtime_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline uint32_t CPlayer_GetLastPlayedTimes_Response_Game::_internal_first_mac_playtime() const {
  return first_mac_playtime_;
}
inline uint32_t CPlayer_GetLastPlayedTimes_Response_Game::first_mac_playtime() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetLastPlayedTimes_Response.Game.first_mac_playtime)
  return _internal_first_mac_playtime();
}
inline void CPlayer_GetLastPlayedTimes_Response_Game::_internal_set_first_mac_playtime(uint32_t value) {
  _has_bits_[0] |= 0x00000200u;
  first_mac_playtime_ = value;
}
inline void CPlayer_GetLastPlayedTimes_Response_Game::set_first_mac_playtime(uint32_t value) {
  _internal_set_first_mac_playtime(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetLastPlayedTimes_Response.Game.first_mac_playtime)
}

// optional uint32 first_linux_playtime = 11;
inline bool CPlayer_GetLastPlayedTimes_Response_Game::_internal_has_first_linux_playtime() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CPlayer_GetLastPlayedTimes_Response_Game::has_first_linux_playtime() const {
  return _internal_has_first_linux_playtime();
}
inline void CPlayer_GetLastPlayedTimes_Response_Game::clear_first_linux_playtime() {
  first_linux_playtime_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline uint32_t CPlayer_GetLastPlayedTimes_Response_Game::_internal_first_linux_playtime() const {
  return first_linux_playtime_;
}
inline uint32_t CPlayer_GetLastPlayedTimes_Response_Game::first_linux_playtime() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetLastPlayedTimes_Response.Game.first_linux_playtime)
  return _internal_first_linux_playtime();
}
inline void CPlayer_GetLastPlayedTimes_Response_Game::_internal_set_first_linux_playtime(uint32_t value) {
  _has_bits_[0] |= 0x00000400u;
  first_linux_playtime_ = value;
}
inline void CPlayer_GetLastPlayedTimes_Response_Game::set_first_linux_playtime(uint32_t value) {
  _internal_set_first_linux_playtime(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetLastPlayedTimes_Response.Game.first_linux_playtime)
}

// optional uint32 last_windows_playtime = 12;
inline bool CPlayer_GetLastPlayedTimes_Response_Game::_internal_has_last_windows_playtime() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CPlayer_GetLastPlayedTimes_Response_Game::has_last_windows_playtime() const {
  return _internal_has_last_windows_playtime();
}
inline void CPlayer_GetLastPlayedTimes_Response_Game::clear_last_windows_playtime() {
  last_windows_playtime_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline uint32_t CPlayer_GetLastPlayedTimes_Response_Game::_internal_last_windows_playtime() const {
  return last_windows_playtime_;
}
inline uint32_t CPlayer_GetLastPlayedTimes_Response_Game::last_windows_playtime() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetLastPlayedTimes_Response.Game.last_windows_playtime)
  return _internal_last_windows_playtime();
}
inline void CPlayer_GetLastPlayedTimes_Response_Game::_internal_set_last_windows_playtime(uint32_t value) {
  _has_bits_[0] |= 0x00000800u;
  last_windows_playtime_ = value;
}
inline void CPlayer_GetLastPlayedTimes_Response_Game::set_last_windows_playtime(uint32_t value) {
  _internal_set_last_windows_playtime(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetLastPlayedTimes_Response.Game.last_windows_playtime)
}

// optional uint32 last_mac_playtime = 13;
inline bool CPlayer_GetLastPlayedTimes_Response_Game::_internal_has_last_mac_playtime() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CPlayer_GetLastPlayedTimes_Response_Game::has_last_mac_playtime() const {
  return _internal_has_last_mac_playtime();
}
inline void CPlayer_GetLastPlayedTimes_Response_Game::clear_last_mac_playtime() {
  last_mac_playtime_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline uint32_t CPlayer_GetLastPlayedTimes_Response_Game::_internal_last_mac_playtime() const {
  return last_mac_playtime_;
}
inline uint32_t CPlayer_GetLastPlayedTimes_Response_Game::last_mac_playtime() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetLastPlayedTimes_Response.Game.last_mac_playtime)
  return _internal_last_mac_playtime();
}
inline void CPlayer_GetLastPlayedTimes_Response_Game::_internal_set_last_mac_playtime(uint32_t value) {
  _has_bits_[0] |= 0x00001000u;
  last_mac_playtime_ = value;
}
inline void CPlayer_GetLastPlayedTimes_Response_Game::set_last_mac_playtime(uint32_t value) {
  _internal_set_last_mac_playtime(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetLastPlayedTimes_Response.Game.last_mac_playtime)
}

// optional uint32 last_linux_playtime = 14;
inline bool CPlayer_GetLastPlayedTimes_Response_Game::_internal_has_last_linux_playtime() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CPlayer_GetLastPlayedTimes_Response_Game::has_last_linux_playtime() const {
  return _internal_has_last_linux_playtime();
}
inline void CPlayer_GetLastPlayedTimes_Response_Game::clear_last_linux_playtime() {
  last_linux_playtime_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline uint32_t CPlayer_GetLastPlayedTimes_Response_Game::_internal_last_linux_playtime() const {
  return last_linux_playtime_;
}
inline uint32_t CPlayer_GetLastPlayedTimes_Response_Game::last_linux_playtime() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetLastPlayedTimes_Response.Game.last_linux_playtime)
  return _internal_last_linux_playtime();
}
inline void CPlayer_GetLastPlayedTimes_Response_Game::_internal_set_last_linux_playtime(uint32_t value) {
  _has_bits_[0] |= 0x00002000u;
  last_linux_playtime_ = value;
}
inline void CPlayer_GetLastPlayedTimes_Response_Game::set_last_linux_playtime(uint32_t value) {
  _internal_set_last_linux_playtime(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetLastPlayedTimes_Response.Game.last_linux_playtime)
}

// optional uint32 playtime_disconnected = 15;
inline bool CPlayer_GetLastPlayedTimes_Response_Game::_internal_has_playtime_disconnected() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CPlayer_GetLastPlayedTimes_Response_Game::has_playtime_disconnected() const {
  return _internal_has_playtime_disconnected();
}
inline void CPlayer_GetLastPlayedTimes_Response_Game::clear_playtime_disconnected() {
  playtime_disconnected_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline uint32_t CPlayer_GetLastPlayedTimes_Response_Game::_internal_playtime_disconnected() const {
  return playtime_disconnected_;
}
inline uint32_t CPlayer_GetLastPlayedTimes_Response_Game::playtime_disconnected() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetLastPlayedTimes_Response.Game.playtime_disconnected)
  return _internal_playtime_disconnected();
}
inline void CPlayer_GetLastPlayedTimes_Response_Game::_internal_set_playtime_disconnected(uint32_t value) {
  _has_bits_[0] |= 0x00004000u;
  playtime_disconnected_ = value;
}
inline void CPlayer_GetLastPlayedTimes_Response_Game::set_playtime_disconnected(uint32_t value) {
  _internal_set_playtime_disconnected(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetLastPlayedTimes_Response.Game.playtime_disconnected)
}

// -------------------------------------------------------------------

// CPlayer_GetLastPlayedTimes_Response

// repeated .CPlayer_GetLastPlayedTimes_Response.Game games = 1;
inline int CPlayer_GetLastPlayedTimes_Response::_internal_games_size() const {
  return games_.size();
}
inline int CPlayer_GetLastPlayedTimes_Response::games_size() const {
  return _internal_games_size();
}
inline void CPlayer_GetLastPlayedTimes_Response::clear_games() {
  games_.Clear();
}
inline ::CPlayer_GetLastPlayedTimes_Response_Game* CPlayer_GetLastPlayedTimes_Response::mutable_games(int index) {
  // @@protoc_insertion_point(field_mutable:CPlayer_GetLastPlayedTimes_Response.games)
  return games_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetLastPlayedTimes_Response_Game >*
CPlayer_GetLastPlayedTimes_Response::mutable_games() {
  // @@protoc_insertion_point(field_mutable_list:CPlayer_GetLastPlayedTimes_Response.games)
  return &games_;
}
inline const ::CPlayer_GetLastPlayedTimes_Response_Game& CPlayer_GetLastPlayedTimes_Response::_internal_games(int index) const {
  return games_.Get(index);
}
inline const ::CPlayer_GetLastPlayedTimes_Response_Game& CPlayer_GetLastPlayedTimes_Response::games(int index) const {
  // @@protoc_insertion_point(field_get:CPlayer_GetLastPlayedTimes_Response.games)
  return _internal_games(index);
}
inline ::CPlayer_GetLastPlayedTimes_Response_Game* CPlayer_GetLastPlayedTimes_Response::_internal_add_games() {
  return games_.Add();
}
inline ::CPlayer_GetLastPlayedTimes_Response_Game* CPlayer_GetLastPlayedTimes_Response::add_games() {
  ::CPlayer_GetLastPlayedTimes_Response_Game* _add = _internal_add_games();
  // @@protoc_insertion_point(field_add:CPlayer_GetLastPlayedTimes_Response.games)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetLastPlayedTimes_Response_Game >&
CPlayer_GetLastPlayedTimes_Response::games() const {
  // @@protoc_insertion_point(field_list:CPlayer_GetLastPlayedTimes_Response.games)
  return games_;
}

// -------------------------------------------------------------------

// CPlayer_GetTimeSSAAccepted_Request

// -------------------------------------------------------------------

// CPlayer_GetTimeSSAAccepted_Response

// optional uint32 time_ssa_accepted = 1;
inline bool CPlayer_GetTimeSSAAccepted_Response::_internal_has_time_ssa_accepted() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPlayer_GetTimeSSAAccepted_Response::has_time_ssa_accepted() const {
  return _internal_has_time_ssa_accepted();
}
inline void CPlayer_GetTimeSSAAccepted_Response::clear_time_ssa_accepted() {
  time_ssa_accepted_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CPlayer_GetTimeSSAAccepted_Response::_internal_time_ssa_accepted() const {
  return time_ssa_accepted_;
}
inline uint32_t CPlayer_GetTimeSSAAccepted_Response::time_ssa_accepted() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetTimeSSAAccepted_Response.time_ssa_accepted)
  return _internal_time_ssa_accepted();
}
inline void CPlayer_GetTimeSSAAccepted_Response::_internal_set_time_ssa_accepted(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  time_ssa_accepted_ = value;
}
inline void CPlayer_GetTimeSSAAccepted_Response::set_time_ssa_accepted(uint32_t value) {
  _internal_set_time_ssa_accepted(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetTimeSSAAccepted_Response.time_ssa_accepted)
}

// optional uint32 time_ssa_updated = 2;
inline bool CPlayer_GetTimeSSAAccepted_Response::_internal_has_time_ssa_updated() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPlayer_GetTimeSSAAccepted_Response::has_time_ssa_updated() const {
  return _internal_has_time_ssa_updated();
}
inline void CPlayer_GetTimeSSAAccepted_Response::clear_time_ssa_updated() {
  time_ssa_updated_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CPlayer_GetTimeSSAAccepted_Response::_internal_time_ssa_updated() const {
  return time_ssa_updated_;
}
inline uint32_t CPlayer_GetTimeSSAAccepted_Response::time_ssa_updated() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetTimeSSAAccepted_Response.time_ssa_updated)
  return _internal_time_ssa_updated();
}
inline void CPlayer_GetTimeSSAAccepted_Response::_internal_set_time_ssa_updated(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  time_ssa_updated_ = value;
}
inline void CPlayer_GetTimeSSAAccepted_Response::set_time_ssa_updated(uint32_t value) {
  _internal_set_time_ssa_updated(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetTimeSSAAccepted_Response.time_ssa_updated)
}

// optional uint32 time_chinassa_accepted = 3;
inline bool CPlayer_GetTimeSSAAccepted_Response::_internal_has_time_chinassa_accepted() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CPlayer_GetTimeSSAAccepted_Response::has_time_chinassa_accepted() const {
  return _internal_has_time_chinassa_accepted();
}
inline void CPlayer_GetTimeSSAAccepted_Response::clear_time_chinassa_accepted() {
  time_chinassa_accepted_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CPlayer_GetTimeSSAAccepted_Response::_internal_time_chinassa_accepted() const {
  return time_chinassa_accepted_;
}
inline uint32_t CPlayer_GetTimeSSAAccepted_Response::time_chinassa_accepted() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetTimeSSAAccepted_Response.time_chinassa_accepted)
  return _internal_time_chinassa_accepted();
}
inline void CPlayer_GetTimeSSAAccepted_Response::_internal_set_time_chinassa_accepted(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  time_chinassa_accepted_ = value;
}
inline void CPlayer_GetTimeSSAAccepted_Response::set_time_chinassa_accepted(uint32_t value) {
  _internal_set_time_chinassa_accepted(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetTimeSSAAccepted_Response.time_chinassa_accepted)
}

// -------------------------------------------------------------------

// CPlayer_AcceptSSA_Request

// optional .EAgreementType agreement_type = 1 [default = k_EAgreementType_Invalid];
inline bool CPlayer_AcceptSSA_Request::_internal_has_agreement_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPlayer_AcceptSSA_Request::has_agreement_type() const {
  return _internal_has_agreement_type();
}
inline void CPlayer_AcceptSSA_Request::clear_agreement_type() {
  agreement_type_ = -1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::EAgreementType CPlayer_AcceptSSA_Request::_internal_agreement_type() const {
  return static_cast< ::EAgreementType >(agreement_type_);
}
inline ::EAgreementType CPlayer_AcceptSSA_Request::agreement_type() const {
  // @@protoc_insertion_point(field_get:CPlayer_AcceptSSA_Request.agreement_type)
  return _internal_agreement_type();
}
inline void CPlayer_AcceptSSA_Request::_internal_set_agreement_type(::EAgreementType value) {
  assert(::EAgreementType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  agreement_type_ = value;
}
inline void CPlayer_AcceptSSA_Request::set_agreement_type(::EAgreementType value) {
  _internal_set_agreement_type(value);
  // @@protoc_insertion_point(field_set:CPlayer_AcceptSSA_Request.agreement_type)
}

// optional uint32 time_signed_utc = 2;
inline bool CPlayer_AcceptSSA_Request::_internal_has_time_signed_utc() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPlayer_AcceptSSA_Request::has_time_signed_utc() const {
  return _internal_has_time_signed_utc();
}
inline void CPlayer_AcceptSSA_Request::clear_time_signed_utc() {
  time_signed_utc_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CPlayer_AcceptSSA_Request::_internal_time_signed_utc() const {
  return time_signed_utc_;
}
inline uint32_t CPlayer_AcceptSSA_Request::time_signed_utc() const {
  // @@protoc_insertion_point(field_get:CPlayer_AcceptSSA_Request.time_signed_utc)
  return _internal_time_signed_utc();
}
inline void CPlayer_AcceptSSA_Request::_internal_set_time_signed_utc(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  time_signed_utc_ = value;
}
inline void CPlayer_AcceptSSA_Request::set_time_signed_utc(uint32_t value) {
  _internal_set_time_signed_utc(value);
  // @@protoc_insertion_point(field_set:CPlayer_AcceptSSA_Request.time_signed_utc)
}

// -------------------------------------------------------------------

// CPlayer_AcceptSSA_Response

// -------------------------------------------------------------------

// CPlayer_GetNicknameList_Request

// -------------------------------------------------------------------

// CPlayer_GetNicknameList_Response_PlayerNickname

// optional fixed32 accountid = 1;
inline bool CPlayer_GetNicknameList_Response_PlayerNickname::_internal_has_accountid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPlayer_GetNicknameList_Response_PlayerNickname::has_accountid() const {
  return _internal_has_accountid();
}
inline void CPlayer_GetNicknameList_Response_PlayerNickname::clear_accountid() {
  accountid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CPlayer_GetNicknameList_Response_PlayerNickname::_internal_accountid() const {
  return accountid_;
}
inline uint32_t CPlayer_GetNicknameList_Response_PlayerNickname::accountid() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetNicknameList_Response.PlayerNickname.accountid)
  return _internal_accountid();
}
inline void CPlayer_GetNicknameList_Response_PlayerNickname::_internal_set_accountid(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  accountid_ = value;
}
inline void CPlayer_GetNicknameList_Response_PlayerNickname::set_accountid(uint32_t value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetNicknameList_Response.PlayerNickname.accountid)
}

// optional string nickname = 2;
inline bool CPlayer_GetNicknameList_Response_PlayerNickname::_internal_has_nickname() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPlayer_GetNicknameList_Response_PlayerNickname::has_nickname() const {
  return _internal_has_nickname();
}
inline void CPlayer_GetNicknameList_Response_PlayerNickname::clear_nickname() {
  nickname_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CPlayer_GetNicknameList_Response_PlayerNickname::nickname() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetNicknameList_Response.PlayerNickname.nickname)
  return _internal_nickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CPlayer_GetNicknameList_Response_PlayerNickname::set_nickname(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CPlayer_GetNicknameList_Response.PlayerNickname.nickname)
}
inline std::string* CPlayer_GetNicknameList_Response_PlayerNickname::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:CPlayer_GetNicknameList_Response.PlayerNickname.nickname)
  return _s;
}
inline const std::string& CPlayer_GetNicknameList_Response_PlayerNickname::_internal_nickname() const {
  return nickname_.Get();
}
inline void CPlayer_GetNicknameList_Response_PlayerNickname::_internal_set_nickname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CPlayer_GetNicknameList_Response_PlayerNickname::_internal_mutable_nickname() {
  _has_bits_[0] |= 0x00000001u;
  return nickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CPlayer_GetNicknameList_Response_PlayerNickname::release_nickname() {
  // @@protoc_insertion_point(field_release:CPlayer_GetNicknameList_Response.PlayerNickname.nickname)
  if (!_internal_has_nickname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = nickname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (nickname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CPlayer_GetNicknameList_Response_PlayerNickname::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (nickname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CPlayer_GetNicknameList_Response.PlayerNickname.nickname)
}

// -------------------------------------------------------------------

// CPlayer_GetNicknameList_Response

// repeated .CPlayer_GetNicknameList_Response.PlayerNickname nicknames = 1;
inline int CPlayer_GetNicknameList_Response::_internal_nicknames_size() const {
  return nicknames_.size();
}
inline int CPlayer_GetNicknameList_Response::nicknames_size() const {
  return _internal_nicknames_size();
}
inline void CPlayer_GetNicknameList_Response::clear_nicknames() {
  nicknames_.Clear();
}
inline ::CPlayer_GetNicknameList_Response_PlayerNickname* CPlayer_GetNicknameList_Response::mutable_nicknames(int index) {
  // @@protoc_insertion_point(field_mutable:CPlayer_GetNicknameList_Response.nicknames)
  return nicknames_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetNicknameList_Response_PlayerNickname >*
CPlayer_GetNicknameList_Response::mutable_nicknames() {
  // @@protoc_insertion_point(field_mutable_list:CPlayer_GetNicknameList_Response.nicknames)
  return &nicknames_;
}
inline const ::CPlayer_GetNicknameList_Response_PlayerNickname& CPlayer_GetNicknameList_Response::_internal_nicknames(int index) const {
  return nicknames_.Get(index);
}
inline const ::CPlayer_GetNicknameList_Response_PlayerNickname& CPlayer_GetNicknameList_Response::nicknames(int index) const {
  // @@protoc_insertion_point(field_get:CPlayer_GetNicknameList_Response.nicknames)
  return _internal_nicknames(index);
}
inline ::CPlayer_GetNicknameList_Response_PlayerNickname* CPlayer_GetNicknameList_Response::_internal_add_nicknames() {
  return nicknames_.Add();
}
inline ::CPlayer_GetNicknameList_Response_PlayerNickname* CPlayer_GetNicknameList_Response::add_nicknames() {
  ::CPlayer_GetNicknameList_Response_PlayerNickname* _add = _internal_add_nicknames();
  // @@protoc_insertion_point(field_add:CPlayer_GetNicknameList_Response.nicknames)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetNicknameList_Response_PlayerNickname >&
CPlayer_GetNicknameList_Response::nicknames() const {
  // @@protoc_insertion_point(field_list:CPlayer_GetNicknameList_Response.nicknames)
  return nicknames_;
}

// -------------------------------------------------------------------

// CPlayer_GetPerFriendPreferences_Request

// -------------------------------------------------------------------

// PerFriendPreferences

// optional fixed32 accountid = 1;
inline bool PerFriendPreferences::_internal_has_accountid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PerFriendPreferences::has_accountid() const {
  return _internal_has_accountid();
}
inline void PerFriendPreferences::clear_accountid() {
  accountid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t PerFriendPreferences::_internal_accountid() const {
  return accountid_;
}
inline uint32_t PerFriendPreferences::accountid() const {
  // @@protoc_insertion_point(field_get:PerFriendPreferences.accountid)
  return _internal_accountid();
}
inline void PerFriendPreferences::_internal_set_accountid(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  accountid_ = value;
}
inline void PerFriendPreferences::set_accountid(uint32_t value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:PerFriendPreferences.accountid)
}

// optional string nickname = 2;
inline bool PerFriendPreferences::_internal_has_nickname() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PerFriendPreferences::has_nickname() const {
  return _internal_has_nickname();
}
inline void PerFriendPreferences::clear_nickname() {
  nickname_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PerFriendPreferences::nickname() const {
  // @@protoc_insertion_point(field_get:PerFriendPreferences.nickname)
  return _internal_nickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PerFriendPreferences::set_nickname(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PerFriendPreferences.nickname)
}
inline std::string* PerFriendPreferences::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:PerFriendPreferences.nickname)
  return _s;
}
inline const std::string& PerFriendPreferences::_internal_nickname() const {
  return nickname_.Get();
}
inline void PerFriendPreferences::_internal_set_nickname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PerFriendPreferences::_internal_mutable_nickname() {
  _has_bits_[0] |= 0x00000001u;
  return nickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PerFriendPreferences::release_nickname() {
  // @@protoc_insertion_point(field_release:PerFriendPreferences.nickname)
  if (!_internal_has_nickname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = nickname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (nickname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PerFriendPreferences::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (nickname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PerFriendPreferences.nickname)
}

// optional .ENotificationSetting notifications_showingame = 3 [default = k_ENotificationSettingNotifyUseDefault];
inline bool PerFriendPreferences::_internal_has_notifications_showingame() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PerFriendPreferences::has_notifications_showingame() const {
  return _internal_has_notifications_showingame();
}
inline void PerFriendPreferences::clear_notifications_showingame() {
  notifications_showingame_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::ENotificationSetting PerFriendPreferences::_internal_notifications_showingame() const {
  return static_cast< ::ENotificationSetting >(notifications_showingame_);
}
inline ::ENotificationSetting PerFriendPreferences::notifications_showingame() const {
  // @@protoc_insertion_point(field_get:PerFriendPreferences.notifications_showingame)
  return _internal_notifications_showingame();
}
inline void PerFriendPreferences::_internal_set_notifications_showingame(::ENotificationSetting value) {
  assert(::ENotificationSetting_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  notifications_showingame_ = value;
}
inline void PerFriendPreferences::set_notifications_showingame(::ENotificationSetting value) {
  _internal_set_notifications_showingame(value);
  // @@protoc_insertion_point(field_set:PerFriendPreferences.notifications_showingame)
}

// optional .ENotificationSetting notifications_showonline = 4 [default = k_ENotificationSettingNotifyUseDefault];
inline bool PerFriendPreferences::_internal_has_notifications_showonline() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PerFriendPreferences::has_notifications_showonline() const {
  return _internal_has_notifications_showonline();
}
inline void PerFriendPreferences::clear_notifications_showonline() {
  notifications_showonline_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::ENotificationSetting PerFriendPreferences::_internal_notifications_showonline() const {
  return static_cast< ::ENotificationSetting >(notifications_showonline_);
}
inline ::ENotificationSetting PerFriendPreferences::notifications_showonline() const {
  // @@protoc_insertion_point(field_get:PerFriendPreferences.notifications_showonline)
  return _internal_notifications_showonline();
}
inline void PerFriendPreferences::_internal_set_notifications_showonline(::ENotificationSetting value) {
  assert(::ENotificationSetting_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  notifications_showonline_ = value;
}
inline void PerFriendPreferences::set_notifications_showonline(::ENotificationSetting value) {
  _internal_set_notifications_showonline(value);
  // @@protoc_insertion_point(field_set:PerFriendPreferences.notifications_showonline)
}

// optional .ENotificationSetting notifications_showmessages = 5 [default = k_ENotificationSettingNotifyUseDefault];
inline bool PerFriendPreferences::_internal_has_notifications_showmessages() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PerFriendPreferences::has_notifications_showmessages() const {
  return _internal_has_notifications_showmessages();
}
inline void PerFriendPreferences::clear_notifications_showmessages() {
  notifications_showmessages_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::ENotificationSetting PerFriendPreferences::_internal_notifications_showmessages() const {
  return static_cast< ::ENotificationSetting >(notifications_showmessages_);
}
inline ::ENotificationSetting PerFriendPreferences::notifications_showmessages() const {
  // @@protoc_insertion_point(field_get:PerFriendPreferences.notifications_showmessages)
  return _internal_notifications_showmessages();
}
inline void PerFriendPreferences::_internal_set_notifications_showmessages(::ENotificationSetting value) {
  assert(::ENotificationSetting_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  notifications_showmessages_ = value;
}
inline void PerFriendPreferences::set_notifications_showmessages(::ENotificationSetting value) {
  _internal_set_notifications_showmessages(value);
  // @@protoc_insertion_point(field_set:PerFriendPreferences.notifications_showmessages)
}

// optional .ENotificationSetting sounds_showingame = 6 [default = k_ENotificationSettingNotifyUseDefault];
inline bool PerFriendPreferences::_internal_has_sounds_showingame() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PerFriendPreferences::has_sounds_showingame() const {
  return _internal_has_sounds_showingame();
}
inline void PerFriendPreferences::clear_sounds_showingame() {
  sounds_showingame_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::ENotificationSetting PerFriendPreferences::_internal_sounds_showingame() const {
  return static_cast< ::ENotificationSetting >(sounds_showingame_);
}
inline ::ENotificationSetting PerFriendPreferences::sounds_showingame() const {
  // @@protoc_insertion_point(field_get:PerFriendPreferences.sounds_showingame)
  return _internal_sounds_showingame();
}
inline void PerFriendPreferences::_internal_set_sounds_showingame(::ENotificationSetting value) {
  assert(::ENotificationSetting_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  sounds_showingame_ = value;
}
inline void PerFriendPreferences::set_sounds_showingame(::ENotificationSetting value) {
  _internal_set_sounds_showingame(value);
  // @@protoc_insertion_point(field_set:PerFriendPreferences.sounds_showingame)
}

// optional .ENotificationSetting sounds_showonline = 7 [default = k_ENotificationSettingNotifyUseDefault];
inline bool PerFriendPreferences::_internal_has_sounds_showonline() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PerFriendPreferences::has_sounds_showonline() const {
  return _internal_has_sounds_showonline();
}
inline void PerFriendPreferences::clear_sounds_showonline() {
  sounds_showonline_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::ENotificationSetting PerFriendPreferences::_internal_sounds_showonline() const {
  return static_cast< ::ENotificationSetting >(sounds_showonline_);
}
inline ::ENotificationSetting PerFriendPreferences::sounds_showonline() const {
  // @@protoc_insertion_point(field_get:PerFriendPreferences.sounds_showonline)
  return _internal_sounds_showonline();
}
inline void PerFriendPreferences::_internal_set_sounds_showonline(::ENotificationSetting value) {
  assert(::ENotificationSetting_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  sounds_showonline_ = value;
}
inline void PerFriendPreferences::set_sounds_showonline(::ENotificationSetting value) {
  _internal_set_sounds_showonline(value);
  // @@protoc_insertion_point(field_set:PerFriendPreferences.sounds_showonline)
}

// optional .ENotificationSetting sounds_showmessages = 8 [default = k_ENotificationSettingNotifyUseDefault];
inline bool PerFriendPreferences::_internal_has_sounds_showmessages() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool PerFriendPreferences::has_sounds_showmessages() const {
  return _internal_has_sounds_showmessages();
}
inline void PerFriendPreferences::clear_sounds_showmessages() {
  sounds_showmessages_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::ENotificationSetting PerFriendPreferences::_internal_sounds_showmessages() const {
  return static_cast< ::ENotificationSetting >(sounds_showmessages_);
}
inline ::ENotificationSetting PerFriendPreferences::sounds_showmessages() const {
  // @@protoc_insertion_point(field_get:PerFriendPreferences.sounds_showmessages)
  return _internal_sounds_showmessages();
}
inline void PerFriendPreferences::_internal_set_sounds_showmessages(::ENotificationSetting value) {
  assert(::ENotificationSetting_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  sounds_showmessages_ = value;
}
inline void PerFriendPreferences::set_sounds_showmessages(::ENotificationSetting value) {
  _internal_set_sounds_showmessages(value);
  // @@protoc_insertion_point(field_set:PerFriendPreferences.sounds_showmessages)
}

// optional .ENotificationSetting notifications_sendmobile = 9 [default = k_ENotificationSettingNotifyUseDefault];
inline bool PerFriendPreferences::_internal_has_notifications_sendmobile() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool PerFriendPreferences::has_notifications_sendmobile() const {
  return _internal_has_notifications_sendmobile();
}
inline void PerFriendPreferences::clear_notifications_sendmobile() {
  notifications_sendmobile_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::ENotificationSetting PerFriendPreferences::_internal_notifications_sendmobile() const {
  return static_cast< ::ENotificationSetting >(notifications_sendmobile_);
}
inline ::ENotificationSetting PerFriendPreferences::notifications_sendmobile() const {
  // @@protoc_insertion_point(field_get:PerFriendPreferences.notifications_sendmobile)
  return _internal_notifications_sendmobile();
}
inline void PerFriendPreferences::_internal_set_notifications_sendmobile(::ENotificationSetting value) {
  assert(::ENotificationSetting_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  notifications_sendmobile_ = value;
}
inline void PerFriendPreferences::set_notifications_sendmobile(::ENotificationSetting value) {
  _internal_set_notifications_sendmobile(value);
  // @@protoc_insertion_point(field_set:PerFriendPreferences.notifications_sendmobile)
}

// -------------------------------------------------------------------

// CPlayer_GetPerFriendPreferences_Response

// repeated .PerFriendPreferences preferences = 1;
inline int CPlayer_GetPerFriendPreferences_Response::_internal_preferences_size() const {
  return preferences_.size();
}
inline int CPlayer_GetPerFriendPreferences_Response::preferences_size() const {
  return _internal_preferences_size();
}
inline void CPlayer_GetPerFriendPreferences_Response::clear_preferences() {
  preferences_.Clear();
}
inline ::PerFriendPreferences* CPlayer_GetPerFriendPreferences_Response::mutable_preferences(int index) {
  // @@protoc_insertion_point(field_mutable:CPlayer_GetPerFriendPreferences_Response.preferences)
  return preferences_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PerFriendPreferences >*
CPlayer_GetPerFriendPreferences_Response::mutable_preferences() {
  // @@protoc_insertion_point(field_mutable_list:CPlayer_GetPerFriendPreferences_Response.preferences)
  return &preferences_;
}
inline const ::PerFriendPreferences& CPlayer_GetPerFriendPreferences_Response::_internal_preferences(int index) const {
  return preferences_.Get(index);
}
inline const ::PerFriendPreferences& CPlayer_GetPerFriendPreferences_Response::preferences(int index) const {
  // @@protoc_insertion_point(field_get:CPlayer_GetPerFriendPreferences_Response.preferences)
  return _internal_preferences(index);
}
inline ::PerFriendPreferences* CPlayer_GetPerFriendPreferences_Response::_internal_add_preferences() {
  return preferences_.Add();
}
inline ::PerFriendPreferences* CPlayer_GetPerFriendPreferences_Response::add_preferences() {
  ::PerFriendPreferences* _add = _internal_add_preferences();
  // @@protoc_insertion_point(field_add:CPlayer_GetPerFriendPreferences_Response.preferences)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PerFriendPreferences >&
CPlayer_GetPerFriendPreferences_Response::preferences() const {
  // @@protoc_insertion_point(field_list:CPlayer_GetPerFriendPreferences_Response.preferences)
  return preferences_;
}

// -------------------------------------------------------------------

// CPlayer_SetPerFriendPreferences_Request

// optional .PerFriendPreferences preferences = 1;
inline bool CPlayer_SetPerFriendPreferences_Request::_internal_has_preferences() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || preferences_ != nullptr);
  return value;
}
inline bool CPlayer_SetPerFriendPreferences_Request::has_preferences() const {
  return _internal_has_preferences();
}
inline void CPlayer_SetPerFriendPreferences_Request::clear_preferences() {
  if (preferences_ != nullptr) preferences_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::PerFriendPreferences& CPlayer_SetPerFriendPreferences_Request::_internal_preferences() const {
  const ::PerFriendPreferences* p = preferences_;
  return p != nullptr ? *p : reinterpret_cast<const ::PerFriendPreferences&>(
      ::_PerFriendPreferences_default_instance_);
}
inline const ::PerFriendPreferences& CPlayer_SetPerFriendPreferences_Request::preferences() const {
  // @@protoc_insertion_point(field_get:CPlayer_SetPerFriendPreferences_Request.preferences)
  return _internal_preferences();
}
inline void CPlayer_SetPerFriendPreferences_Request::unsafe_arena_set_allocated_preferences(
    ::PerFriendPreferences* preferences) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(preferences_);
  }
  preferences_ = preferences;
  if (preferences) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CPlayer_SetPerFriendPreferences_Request.preferences)
}
inline ::PerFriendPreferences* CPlayer_SetPerFriendPreferences_Request::release_preferences() {
  _has_bits_[0] &= ~0x00000001u;
  ::PerFriendPreferences* temp = preferences_;
  preferences_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PerFriendPreferences* CPlayer_SetPerFriendPreferences_Request::unsafe_arena_release_preferences() {
  // @@protoc_insertion_point(field_release:CPlayer_SetPerFriendPreferences_Request.preferences)
  _has_bits_[0] &= ~0x00000001u;
  ::PerFriendPreferences* temp = preferences_;
  preferences_ = nullptr;
  return temp;
}
inline ::PerFriendPreferences* CPlayer_SetPerFriendPreferences_Request::_internal_mutable_preferences() {
  _has_bits_[0] |= 0x00000001u;
  if (preferences_ == nullptr) {
    auto* p = CreateMaybeMessage<::PerFriendPreferences>(GetArenaForAllocation());
    preferences_ = p;
  }
  return preferences_;
}
inline ::PerFriendPreferences* CPlayer_SetPerFriendPreferences_Request::mutable_preferences() {
  ::PerFriendPreferences* _msg = _internal_mutable_preferences();
  // @@protoc_insertion_point(field_mutable:CPlayer_SetPerFriendPreferences_Request.preferences)
  return _msg;
}
inline void CPlayer_SetPerFriendPreferences_Request::set_allocated_preferences(::PerFriendPreferences* preferences) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete preferences_;
  }
  if (preferences) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::PerFriendPreferences>::GetOwningArena(preferences);
    if (message_arena != submessage_arena) {
      preferences = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, preferences, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  preferences_ = preferences;
  // @@protoc_insertion_point(field_set_allocated:CPlayer_SetPerFriendPreferences_Request.preferences)
}

// -------------------------------------------------------------------

// CPlayer_SetPerFriendPreferences_Response

// -------------------------------------------------------------------

// CPlayer_AddFriend_Request

// optional fixed64 steamid = 1 [(.description) = "Steam ID of user to whom to send a friend invite."];
inline bool CPlayer_AddFriend_Request::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPlayer_AddFriend_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CPlayer_AddFriend_Request::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CPlayer_AddFriend_Request::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CPlayer_AddFriend_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CPlayer_AddFriend_Request.steamid)
  return _internal_steamid();
}
inline void CPlayer_AddFriend_Request::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
}
inline void CPlayer_AddFriend_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CPlayer_AddFriend_Request.steamid)
}

// -------------------------------------------------------------------

// CPlayer_AddFriend_Response

// optional bool invite_sent = 1 [(.description) = "True if the operation was successful, false otherwise."];
inline bool CPlayer_AddFriend_Response::_internal_has_invite_sent() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPlayer_AddFriend_Response::has_invite_sent() const {
  return _internal_has_invite_sent();
}
inline void CPlayer_AddFriend_Response::clear_invite_sent() {
  invite_sent_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CPlayer_AddFriend_Response::_internal_invite_sent() const {
  return invite_sent_;
}
inline bool CPlayer_AddFriend_Response::invite_sent() const {
  // @@protoc_insertion_point(field_get:CPlayer_AddFriend_Response.invite_sent)
  return _internal_invite_sent();
}
inline void CPlayer_AddFriend_Response::_internal_set_invite_sent(bool value) {
  _has_bits_[0] |= 0x00000001u;
  invite_sent_ = value;
}
inline void CPlayer_AddFriend_Response::set_invite_sent(bool value) {
  _internal_set_invite_sent(value);
  // @@protoc_insertion_point(field_set:CPlayer_AddFriend_Response.invite_sent)
}

// optional uint32 friend_relationship = 2 [(.description) = "the resulting relationship.  Depending on state, may move directly to friends rather than invite sent"];
inline bool CPlayer_AddFriend_Response::_internal_has_friend_relationship() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPlayer_AddFriend_Response::has_friend_relationship() const {
  return _internal_has_friend_relationship();
}
inline void CPlayer_AddFriend_Response::clear_friend_relationship() {
  friend_relationship_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CPlayer_AddFriend_Response::_internal_friend_relationship() const {
  return friend_relationship_;
}
inline uint32_t CPlayer_AddFriend_Response::friend_relationship() const {
  // @@protoc_insertion_point(field_get:CPlayer_AddFriend_Response.friend_relationship)
  return _internal_friend_relationship();
}
inline void CPlayer_AddFriend_Response::_internal_set_friend_relationship(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  friend_relationship_ = value;
}
inline void CPlayer_AddFriend_Response::set_friend_relationship(uint32_t value) {
  _internal_set_friend_relationship(value);
  // @@protoc_insertion_point(field_set:CPlayer_AddFriend_Response.friend_relationship)
}

// optional int32 result = 3;
inline bool CPlayer_AddFriend_Response::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CPlayer_AddFriend_Response::has_result() const {
  return _internal_has_result();
}
inline void CPlayer_AddFriend_Response::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t CPlayer_AddFriend_Response::_internal_result() const {
  return result_;
}
inline int32_t CPlayer_AddFriend_Response::result() const {
  // @@protoc_insertion_point(field_get:CPlayer_AddFriend_Response.result)
  return _internal_result();
}
inline void CPlayer_AddFriend_Response::_internal_set_result(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  result_ = value;
}
inline void CPlayer_AddFriend_Response::set_result(int32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:CPlayer_AddFriend_Response.result)
}

// -------------------------------------------------------------------

// CPlayer_RemoveFriend_Request

// optional fixed64 steamid = 1 [(.description) = "Steam ID of friend to remove."];
inline bool CPlayer_RemoveFriend_Request::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPlayer_RemoveFriend_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CPlayer_RemoveFriend_Request::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CPlayer_RemoveFriend_Request::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CPlayer_RemoveFriend_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CPlayer_RemoveFriend_Request.steamid)
  return _internal_steamid();
}
inline void CPlayer_RemoveFriend_Request::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
}
inline void CPlayer_RemoveFriend_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CPlayer_RemoveFriend_Request.steamid)
}

// -------------------------------------------------------------------

// CPlayer_RemoveFriend_Response

// optional uint32 friend_relationship = 1 [(.description) = "the resulting relationship"];
inline bool CPlayer_RemoveFriend_Response::_internal_has_friend_relationship() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPlayer_RemoveFriend_Response::has_friend_relationship() const {
  return _internal_has_friend_relationship();
}
inline void CPlayer_RemoveFriend_Response::clear_friend_relationship() {
  friend_relationship_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CPlayer_RemoveFriend_Response::_internal_friend_relationship() const {
  return friend_relationship_;
}
inline uint32_t CPlayer_RemoveFriend_Response::friend_relationship() const {
  // @@protoc_insertion_point(field_get:CPlayer_RemoveFriend_Response.friend_relationship)
  return _internal_friend_relationship();
}
inline void CPlayer_RemoveFriend_Response::_internal_set_friend_relationship(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  friend_relationship_ = value;
}
inline void CPlayer_RemoveFriend_Response::set_friend_relationship(uint32_t value) {
  _internal_set_friend_relationship(value);
  // @@protoc_insertion_point(field_set:CPlayer_RemoveFriend_Response.friend_relationship)
}

// -------------------------------------------------------------------

// CPlayer_IgnoreFriend_Request

// optional fixed64 steamid = 1;
inline bool CPlayer_IgnoreFriend_Request::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPlayer_IgnoreFriend_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CPlayer_IgnoreFriend_Request::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CPlayer_IgnoreFriend_Request::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CPlayer_IgnoreFriend_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CPlayer_IgnoreFriend_Request.steamid)
  return _internal_steamid();
}
inline void CPlayer_IgnoreFriend_Request::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
}
inline void CPlayer_IgnoreFriend_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CPlayer_IgnoreFriend_Request.steamid)
}

// optional bool unignore = 2 [(.description) = "If set, remove from ignore/block list instead of adding "];
inline bool CPlayer_IgnoreFriend_Request::_internal_has_unignore() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPlayer_IgnoreFriend_Request::has_unignore() const {
  return _internal_has_unignore();
}
inline void CPlayer_IgnoreFriend_Request::clear_unignore() {
  unignore_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CPlayer_IgnoreFriend_Request::_internal_unignore() const {
  return unignore_;
}
inline bool CPlayer_IgnoreFriend_Request::unignore() const {
  // @@protoc_insertion_point(field_get:CPlayer_IgnoreFriend_Request.unignore)
  return _internal_unignore();
}
inline void CPlayer_IgnoreFriend_Request::_internal_set_unignore(bool value) {
  _has_bits_[0] |= 0x00000002u;
  unignore_ = value;
}
inline void CPlayer_IgnoreFriend_Request::set_unignore(bool value) {
  _internal_set_unignore(value);
  // @@protoc_insertion_point(field_set:CPlayer_IgnoreFriend_Request.unignore)
}

// -------------------------------------------------------------------

// CPlayer_IgnoreFriend_Response

// optional uint32 friend_relationship = 1 [(.description) = "the resulting relationship"];
inline bool CPlayer_IgnoreFriend_Response::_internal_has_friend_relationship() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPlayer_IgnoreFriend_Response::has_friend_relationship() const {
  return _internal_has_friend_relationship();
}
inline void CPlayer_IgnoreFriend_Response::clear_friend_relationship() {
  friend_relationship_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CPlayer_IgnoreFriend_Response::_internal_friend_relationship() const {
  return friend_relationship_;
}
inline uint32_t CPlayer_IgnoreFriend_Response::friend_relationship() const {
  // @@protoc_insertion_point(field_get:CPlayer_IgnoreFriend_Response.friend_relationship)
  return _internal_friend_relationship();
}
inline void CPlayer_IgnoreFriend_Response::_internal_set_friend_relationship(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  friend_relationship_ = value;
}
inline void CPlayer_IgnoreFriend_Response::set_friend_relationship(uint32_t value) {
  _internal_set_friend_relationship(value);
  // @@protoc_insertion_point(field_set:CPlayer_IgnoreFriend_Response.friend_relationship)
}

// -------------------------------------------------------------------

// CPlayer_GetCommunityPreferences_Request

// -------------------------------------------------------------------

// CPlayer_CommunityPreferences

// optional bool parenthesize_nicknames = 4 [default = false];
inline bool CPlayer_CommunityPreferences::_internal_has_parenthesize_nicknames() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPlayer_CommunityPreferences::has_parenthesize_nicknames() const {
  return _internal_has_parenthesize_nicknames();
}
inline void CPlayer_CommunityPreferences::clear_parenthesize_nicknames() {
  parenthesize_nicknames_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CPlayer_CommunityPreferences::_internal_parenthesize_nicknames() const {
  return parenthesize_nicknames_;
}
inline bool CPlayer_CommunityPreferences::parenthesize_nicknames() const {
  // @@protoc_insertion_point(field_get:CPlayer_CommunityPreferences.parenthesize_nicknames)
  return _internal_parenthesize_nicknames();
}
inline void CPlayer_CommunityPreferences::_internal_set_parenthesize_nicknames(bool value) {
  _has_bits_[0] |= 0x00000002u;
  parenthesize_nicknames_ = value;
}
inline void CPlayer_CommunityPreferences::set_parenthesize_nicknames(bool value) {
  _internal_set_parenthesize_nicknames(value);
  // @@protoc_insertion_point(field_set:CPlayer_CommunityPreferences.parenthesize_nicknames)
}

// optional .ETextFilterSetting text_filter_setting = 5 [default = k_ETextFilterSettingSteamLabOptedOut];
inline bool CPlayer_CommunityPreferences::_internal_has_text_filter_setting() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CPlayer_CommunityPreferences::has_text_filter_setting() const {
  return _internal_has_text_filter_setting();
}
inline void CPlayer_CommunityPreferences::clear_text_filter_setting() {
  text_filter_setting_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::ETextFilterSetting CPlayer_CommunityPreferences::_internal_text_filter_setting() const {
  return static_cast< ::ETextFilterSetting >(text_filter_setting_);
}
inline ::ETextFilterSetting CPlayer_CommunityPreferences::text_filter_setting() const {
  // @@protoc_insertion_point(field_get:CPlayer_CommunityPreferences.text_filter_setting)
  return _internal_text_filter_setting();
}
inline void CPlayer_CommunityPreferences::_internal_set_text_filter_setting(::ETextFilterSetting value) {
  assert(::ETextFilterSetting_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  text_filter_setting_ = value;
}
inline void CPlayer_CommunityPreferences::set_text_filter_setting(::ETextFilterSetting value) {
  _internal_set_text_filter_setting(value);
  // @@protoc_insertion_point(field_set:CPlayer_CommunityPreferences.text_filter_setting)
}

// optional bool text_filter_ignore_friends = 6 [default = true];
inline bool CPlayer_CommunityPreferences::_internal_has_text_filter_ignore_friends() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CPlayer_CommunityPreferences::has_text_filter_ignore_friends() const {
  return _internal_has_text_filter_ignore_friends();
}
inline void CPlayer_CommunityPreferences::clear_text_filter_ignore_friends() {
  text_filter_ignore_friends_ = true;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CPlayer_CommunityPreferences::_internal_text_filter_ignore_friends() const {
  return text_filter_ignore_friends_;
}
inline bool CPlayer_CommunityPreferences::text_filter_ignore_friends() const {
  // @@protoc_insertion_point(field_get:CPlayer_CommunityPreferences.text_filter_ignore_friends)
  return _internal_text_filter_ignore_friends();
}
inline void CPlayer_CommunityPreferences::_internal_set_text_filter_ignore_friends(bool value) {
  _has_bits_[0] |= 0x00000010u;
  text_filter_ignore_friends_ = value;
}
inline void CPlayer_CommunityPreferences::set_text_filter_ignore_friends(bool value) {
  _internal_set_text_filter_ignore_friends(value);
  // @@protoc_insertion_point(field_set:CPlayer_CommunityPreferences.text_filter_ignore_friends)
}

// optional uint32 text_filter_words_revision = 7;
inline bool CPlayer_CommunityPreferences::_internal_has_text_filter_words_revision() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CPlayer_CommunityPreferences::has_text_filter_words_revision() const {
  return _internal_has_text_filter_words_revision();
}
inline void CPlayer_CommunityPreferences::clear_text_filter_words_revision() {
  text_filter_words_revision_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CPlayer_CommunityPreferences::_internal_text_filter_words_revision() const {
  return text_filter_words_revision_;
}
inline uint32_t CPlayer_CommunityPreferences::text_filter_words_revision() const {
  // @@protoc_insertion_point(field_get:CPlayer_CommunityPreferences.text_filter_words_revision)
  return _internal_text_filter_words_revision();
}
inline void CPlayer_CommunityPreferences::_internal_set_text_filter_words_revision(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  text_filter_words_revision_ = value;
}
inline void CPlayer_CommunityPreferences::set_text_filter_words_revision(uint32_t value) {
  _internal_set_text_filter_words_revision(value);
  // @@protoc_insertion_point(field_set:CPlayer_CommunityPreferences.text_filter_words_revision)
}

// optional uint32 timestamp_updated = 3;
inline bool CPlayer_CommunityPreferences::_internal_has_timestamp_updated() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPlayer_CommunityPreferences::has_timestamp_updated() const {
  return _internal_has_timestamp_updated();
}
inline void CPlayer_CommunityPreferences::clear_timestamp_updated() {
  timestamp_updated_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CPlayer_CommunityPreferences::_internal_timestamp_updated() const {
  return timestamp_updated_;
}
inline uint32_t CPlayer_CommunityPreferences::timestamp_updated() const {
  // @@protoc_insertion_point(field_get:CPlayer_CommunityPreferences.timestamp_updated)
  return _internal_timestamp_updated();
}
inline void CPlayer_CommunityPreferences::_internal_set_timestamp_updated(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_updated_ = value;
}
inline void CPlayer_CommunityPreferences::set_timestamp_updated(uint32_t value) {
  _internal_set_timestamp_updated(value);
  // @@protoc_insertion_point(field_set:CPlayer_CommunityPreferences.timestamp_updated)
}

// -------------------------------------------------------------------

// CPlayer_GetCommunityPreferences_Response

// optional .CPlayer_CommunityPreferences preferences = 1;
inline bool CPlayer_GetCommunityPreferences_Response::_internal_has_preferences() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || preferences_ != nullptr);
  return value;
}
inline bool CPlayer_GetCommunityPreferences_Response::has_preferences() const {
  return _internal_has_preferences();
}
inline void CPlayer_GetCommunityPreferences_Response::clear_preferences() {
  if (preferences_ != nullptr) preferences_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CPlayer_CommunityPreferences& CPlayer_GetCommunityPreferences_Response::_internal_preferences() const {
  const ::CPlayer_CommunityPreferences* p = preferences_;
  return p != nullptr ? *p : reinterpret_cast<const ::CPlayer_CommunityPreferences&>(
      ::_CPlayer_CommunityPreferences_default_instance_);
}
inline const ::CPlayer_CommunityPreferences& CPlayer_GetCommunityPreferences_Response::preferences() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetCommunityPreferences_Response.preferences)
  return _internal_preferences();
}
inline void CPlayer_GetCommunityPreferences_Response::unsafe_arena_set_allocated_preferences(
    ::CPlayer_CommunityPreferences* preferences) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(preferences_);
  }
  preferences_ = preferences;
  if (preferences) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CPlayer_GetCommunityPreferences_Response.preferences)
}
inline ::CPlayer_CommunityPreferences* CPlayer_GetCommunityPreferences_Response::release_preferences() {
  _has_bits_[0] &= ~0x00000001u;
  ::CPlayer_CommunityPreferences* temp = preferences_;
  preferences_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CPlayer_CommunityPreferences* CPlayer_GetCommunityPreferences_Response::unsafe_arena_release_preferences() {
  // @@protoc_insertion_point(field_release:CPlayer_GetCommunityPreferences_Response.preferences)
  _has_bits_[0] &= ~0x00000001u;
  ::CPlayer_CommunityPreferences* temp = preferences_;
  preferences_ = nullptr;
  return temp;
}
inline ::CPlayer_CommunityPreferences* CPlayer_GetCommunityPreferences_Response::_internal_mutable_preferences() {
  _has_bits_[0] |= 0x00000001u;
  if (preferences_ == nullptr) {
    auto* p = CreateMaybeMessage<::CPlayer_CommunityPreferences>(GetArenaForAllocation());
    preferences_ = p;
  }
  return preferences_;
}
inline ::CPlayer_CommunityPreferences* CPlayer_GetCommunityPreferences_Response::mutable_preferences() {
  ::CPlayer_CommunityPreferences* _msg = _internal_mutable_preferences();
  // @@protoc_insertion_point(field_mutable:CPlayer_GetCommunityPreferences_Response.preferences)
  return _msg;
}
inline void CPlayer_GetCommunityPreferences_Response::set_allocated_preferences(::CPlayer_CommunityPreferences* preferences) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete preferences_;
  }
  if (preferences) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CPlayer_CommunityPreferences>::GetOwningArena(preferences);
    if (message_arena != submessage_arena) {
      preferences = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, preferences, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  preferences_ = preferences;
  // @@protoc_insertion_point(field_set_allocated:CPlayer_GetCommunityPreferences_Response.preferences)
}

// optional .UserContentDescriptorPreferences content_descriptor_preferences = 2;
inline bool CPlayer_GetCommunityPreferences_Response::_internal_has_content_descriptor_preferences() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || content_descriptor_preferences_ != nullptr);
  return value;
}
inline bool CPlayer_GetCommunityPreferences_Response::has_content_descriptor_preferences() const {
  return _internal_has_content_descriptor_preferences();
}
inline const ::UserContentDescriptorPreferences& CPlayer_GetCommunityPreferences_Response::_internal_content_descriptor_preferences() const {
  const ::UserContentDescriptorPreferences* p = content_descriptor_preferences_;
  return p != nullptr ? *p : reinterpret_cast<const ::UserContentDescriptorPreferences&>(
      ::_UserContentDescriptorPreferences_default_instance_);
}
inline const ::UserContentDescriptorPreferences& CPlayer_GetCommunityPreferences_Response::content_descriptor_preferences() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetCommunityPreferences_Response.content_descriptor_preferences)
  return _internal_content_descriptor_preferences();
}
inline void CPlayer_GetCommunityPreferences_Response::unsafe_arena_set_allocated_content_descriptor_preferences(
    ::UserContentDescriptorPreferences* content_descriptor_preferences) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(content_descriptor_preferences_);
  }
  content_descriptor_preferences_ = content_descriptor_preferences;
  if (content_descriptor_preferences) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CPlayer_GetCommunityPreferences_Response.content_descriptor_preferences)
}
inline ::UserContentDescriptorPreferences* CPlayer_GetCommunityPreferences_Response::release_content_descriptor_preferences() {
  _has_bits_[0] &= ~0x00000002u;
  ::UserContentDescriptorPreferences* temp = content_descriptor_preferences_;
  content_descriptor_preferences_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::UserContentDescriptorPreferences* CPlayer_GetCommunityPreferences_Response::unsafe_arena_release_content_descriptor_preferences() {
  // @@protoc_insertion_point(field_release:CPlayer_GetCommunityPreferences_Response.content_descriptor_preferences)
  _has_bits_[0] &= ~0x00000002u;
  ::UserContentDescriptorPreferences* temp = content_descriptor_preferences_;
  content_descriptor_preferences_ = nullptr;
  return temp;
}
inline ::UserContentDescriptorPreferences* CPlayer_GetCommunityPreferences_Response::_internal_mutable_content_descriptor_preferences() {
  _has_bits_[0] |= 0x00000002u;
  if (content_descriptor_preferences_ == nullptr) {
    auto* p = CreateMaybeMessage<::UserContentDescriptorPreferences>(GetArenaForAllocation());
    content_descriptor_preferences_ = p;
  }
  return content_descriptor_preferences_;
}
inline ::UserContentDescriptorPreferences* CPlayer_GetCommunityPreferences_Response::mutable_content_descriptor_preferences() {
  ::UserContentDescriptorPreferences* _msg = _internal_mutable_content_descriptor_preferences();
  // @@protoc_insertion_point(field_mutable:CPlayer_GetCommunityPreferences_Response.content_descriptor_preferences)
  return _msg;
}
inline void CPlayer_GetCommunityPreferences_Response::set_allocated_content_descriptor_preferences(::UserContentDescriptorPreferences* content_descriptor_preferences) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(content_descriptor_preferences_);
  }
  if (content_descriptor_preferences) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(content_descriptor_preferences));
    if (message_arena != submessage_arena) {
      content_descriptor_preferences = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, content_descriptor_preferences, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  content_descriptor_preferences_ = content_descriptor_preferences;
  // @@protoc_insertion_point(field_set_allocated:CPlayer_GetCommunityPreferences_Response.content_descriptor_preferences)
}

// -------------------------------------------------------------------

// CPlayer_SetCommunityPreferences_Request

// optional .CPlayer_CommunityPreferences preferences = 1;
inline bool CPlayer_SetCommunityPreferences_Request::_internal_has_preferences() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || preferences_ != nullptr);
  return value;
}
inline bool CPlayer_SetCommunityPreferences_Request::has_preferences() const {
  return _internal_has_preferences();
}
inline void CPlayer_SetCommunityPreferences_Request::clear_preferences() {
  if (preferences_ != nullptr) preferences_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CPlayer_CommunityPreferences& CPlayer_SetCommunityPreferences_Request::_internal_preferences() const {
  const ::CPlayer_CommunityPreferences* p = preferences_;
  return p != nullptr ? *p : reinterpret_cast<const ::CPlayer_CommunityPreferences&>(
      ::_CPlayer_CommunityPreferences_default_instance_);
}
inline const ::CPlayer_CommunityPreferences& CPlayer_SetCommunityPreferences_Request::preferences() const {
  // @@protoc_insertion_point(field_get:CPlayer_SetCommunityPreferences_Request.preferences)
  return _internal_preferences();
}
inline void CPlayer_SetCommunityPreferences_Request::unsafe_arena_set_allocated_preferences(
    ::CPlayer_CommunityPreferences* preferences) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(preferences_);
  }
  preferences_ = preferences;
  if (preferences) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CPlayer_SetCommunityPreferences_Request.preferences)
}
inline ::CPlayer_CommunityPreferences* CPlayer_SetCommunityPreferences_Request::release_preferences() {
  _has_bits_[0] &= ~0x00000001u;
  ::CPlayer_CommunityPreferences* temp = preferences_;
  preferences_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CPlayer_CommunityPreferences* CPlayer_SetCommunityPreferences_Request::unsafe_arena_release_preferences() {
  // @@protoc_insertion_point(field_release:CPlayer_SetCommunityPreferences_Request.preferences)
  _has_bits_[0] &= ~0x00000001u;
  ::CPlayer_CommunityPreferences* temp = preferences_;
  preferences_ = nullptr;
  return temp;
}
inline ::CPlayer_CommunityPreferences* CPlayer_SetCommunityPreferences_Request::_internal_mutable_preferences() {
  _has_bits_[0] |= 0x00000001u;
  if (preferences_ == nullptr) {
    auto* p = CreateMaybeMessage<::CPlayer_CommunityPreferences>(GetArenaForAllocation());
    preferences_ = p;
  }
  return preferences_;
}
inline ::CPlayer_CommunityPreferences* CPlayer_SetCommunityPreferences_Request::mutable_preferences() {
  ::CPlayer_CommunityPreferences* _msg = _internal_mutable_preferences();
  // @@protoc_insertion_point(field_mutable:CPlayer_SetCommunityPreferences_Request.preferences)
  return _msg;
}
inline void CPlayer_SetCommunityPreferences_Request::set_allocated_preferences(::CPlayer_CommunityPreferences* preferences) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete preferences_;
  }
  if (preferences) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CPlayer_CommunityPreferences>::GetOwningArena(preferences);
    if (message_arena != submessage_arena) {
      preferences = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, preferences, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  preferences_ = preferences;
  // @@protoc_insertion_point(field_set_allocated:CPlayer_SetCommunityPreferences_Request.preferences)
}

// -------------------------------------------------------------------

// CPlayer_SetCommunityPreferences_Response

// -------------------------------------------------------------------

// CPlayer_GetTextFilterWords_Request

// -------------------------------------------------------------------

// CPlayer_TextFilterWords

// repeated string text_filter_custom_banned_words = 1;
inline int CPlayer_TextFilterWords::_internal_text_filter_custom_banned_words_size() const {
  return text_filter_custom_banned_words_.size();
}
inline int CPlayer_TextFilterWords::text_filter_custom_banned_words_size() const {
  return _internal_text_filter_custom_banned_words_size();
}
inline void CPlayer_TextFilterWords::clear_text_filter_custom_banned_words() {
  text_filter_custom_banned_words_.Clear();
}
inline std::string* CPlayer_TextFilterWords::add_text_filter_custom_banned_words() {
  std::string* _s = _internal_add_text_filter_custom_banned_words();
  // @@protoc_insertion_point(field_add_mutable:CPlayer_TextFilterWords.text_filter_custom_banned_words)
  return _s;
}
inline const std::string& CPlayer_TextFilterWords::_internal_text_filter_custom_banned_words(int index) const {
  return text_filter_custom_banned_words_.Get(index);
}
inline const std::string& CPlayer_TextFilterWords::text_filter_custom_banned_words(int index) const {
  // @@protoc_insertion_point(field_get:CPlayer_TextFilterWords.text_filter_custom_banned_words)
  return _internal_text_filter_custom_banned_words(index);
}
inline std::string* CPlayer_TextFilterWords::mutable_text_filter_custom_banned_words(int index) {
  // @@protoc_insertion_point(field_mutable:CPlayer_TextFilterWords.text_filter_custom_banned_words)
  return text_filter_custom_banned_words_.Mutable(index);
}
inline void CPlayer_TextFilterWords::set_text_filter_custom_banned_words(int index, const std::string& value) {
  text_filter_custom_banned_words_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:CPlayer_TextFilterWords.text_filter_custom_banned_words)
}
inline void CPlayer_TextFilterWords::set_text_filter_custom_banned_words(int index, std::string&& value) {
  text_filter_custom_banned_words_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:CPlayer_TextFilterWords.text_filter_custom_banned_words)
}
inline void CPlayer_TextFilterWords::set_text_filter_custom_banned_words(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  text_filter_custom_banned_words_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CPlayer_TextFilterWords.text_filter_custom_banned_words)
}
inline void CPlayer_TextFilterWords::set_text_filter_custom_banned_words(int index, const char* value, size_t size) {
  text_filter_custom_banned_words_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CPlayer_TextFilterWords.text_filter_custom_banned_words)
}
inline std::string* CPlayer_TextFilterWords::_internal_add_text_filter_custom_banned_words() {
  return text_filter_custom_banned_words_.Add();
}
inline void CPlayer_TextFilterWords::add_text_filter_custom_banned_words(const std::string& value) {
  text_filter_custom_banned_words_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CPlayer_TextFilterWords.text_filter_custom_banned_words)
}
inline void CPlayer_TextFilterWords::add_text_filter_custom_banned_words(std::string&& value) {
  text_filter_custom_banned_words_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CPlayer_TextFilterWords.text_filter_custom_banned_words)
}
inline void CPlayer_TextFilterWords::add_text_filter_custom_banned_words(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  text_filter_custom_banned_words_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CPlayer_TextFilterWords.text_filter_custom_banned_words)
}
inline void CPlayer_TextFilterWords::add_text_filter_custom_banned_words(const char* value, size_t size) {
  text_filter_custom_banned_words_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CPlayer_TextFilterWords.text_filter_custom_banned_words)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CPlayer_TextFilterWords::text_filter_custom_banned_words() const {
  // @@protoc_insertion_point(field_list:CPlayer_TextFilterWords.text_filter_custom_banned_words)
  return text_filter_custom_banned_words_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CPlayer_TextFilterWords::mutable_text_filter_custom_banned_words() {
  // @@protoc_insertion_point(field_mutable_list:CPlayer_TextFilterWords.text_filter_custom_banned_words)
  return &text_filter_custom_banned_words_;
}

// repeated string text_filter_custom_clean_words = 2;
inline int CPlayer_TextFilterWords::_internal_text_filter_custom_clean_words_size() const {
  return text_filter_custom_clean_words_.size();
}
inline int CPlayer_TextFilterWords::text_filter_custom_clean_words_size() const {
  return _internal_text_filter_custom_clean_words_size();
}
inline void CPlayer_TextFilterWords::clear_text_filter_custom_clean_words() {
  text_filter_custom_clean_words_.Clear();
}
inline std::string* CPlayer_TextFilterWords::add_text_filter_custom_clean_words() {
  std::string* _s = _internal_add_text_filter_custom_clean_words();
  // @@protoc_insertion_point(field_add_mutable:CPlayer_TextFilterWords.text_filter_custom_clean_words)
  return _s;
}
inline const std::string& CPlayer_TextFilterWords::_internal_text_filter_custom_clean_words(int index) const {
  return text_filter_custom_clean_words_.Get(index);
}
inline const std::string& CPlayer_TextFilterWords::text_filter_custom_clean_words(int index) const {
  // @@protoc_insertion_point(field_get:CPlayer_TextFilterWords.text_filter_custom_clean_words)
  return _internal_text_filter_custom_clean_words(index);
}
inline std::string* CPlayer_TextFilterWords::mutable_text_filter_custom_clean_words(int index) {
  // @@protoc_insertion_point(field_mutable:CPlayer_TextFilterWords.text_filter_custom_clean_words)
  return text_filter_custom_clean_words_.Mutable(index);
}
inline void CPlayer_TextFilterWords::set_text_filter_custom_clean_words(int index, const std::string& value) {
  text_filter_custom_clean_words_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:CPlayer_TextFilterWords.text_filter_custom_clean_words)
}
inline void CPlayer_TextFilterWords::set_text_filter_custom_clean_words(int index, std::string&& value) {
  text_filter_custom_clean_words_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:CPlayer_TextFilterWords.text_filter_custom_clean_words)
}
inline void CPlayer_TextFilterWords::set_text_filter_custom_clean_words(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  text_filter_custom_clean_words_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CPlayer_TextFilterWords.text_filter_custom_clean_words)
}
inline void CPlayer_TextFilterWords::set_text_filter_custom_clean_words(int index, const char* value, size_t size) {
  text_filter_custom_clean_words_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CPlayer_TextFilterWords.text_filter_custom_clean_words)
}
inline std::string* CPlayer_TextFilterWords::_internal_add_text_filter_custom_clean_words() {
  return text_filter_custom_clean_words_.Add();
}
inline void CPlayer_TextFilterWords::add_text_filter_custom_clean_words(const std::string& value) {
  text_filter_custom_clean_words_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CPlayer_TextFilterWords.text_filter_custom_clean_words)
}
inline void CPlayer_TextFilterWords::add_text_filter_custom_clean_words(std::string&& value) {
  text_filter_custom_clean_words_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CPlayer_TextFilterWords.text_filter_custom_clean_words)
}
inline void CPlayer_TextFilterWords::add_text_filter_custom_clean_words(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  text_filter_custom_clean_words_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CPlayer_TextFilterWords.text_filter_custom_clean_words)
}
inline void CPlayer_TextFilterWords::add_text_filter_custom_clean_words(const char* value, size_t size) {
  text_filter_custom_clean_words_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CPlayer_TextFilterWords.text_filter_custom_clean_words)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CPlayer_TextFilterWords::text_filter_custom_clean_words() const {
  // @@protoc_insertion_point(field_list:CPlayer_TextFilterWords.text_filter_custom_clean_words)
  return text_filter_custom_clean_words_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CPlayer_TextFilterWords::mutable_text_filter_custom_clean_words() {
  // @@protoc_insertion_point(field_mutable_list:CPlayer_TextFilterWords.text_filter_custom_clean_words)
  return &text_filter_custom_clean_words_;
}

// optional uint32 text_filter_words_revision = 3;
inline bool CPlayer_TextFilterWords::_internal_has_text_filter_words_revision() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPlayer_TextFilterWords::has_text_filter_words_revision() const {
  return _internal_has_text_filter_words_revision();
}
inline void CPlayer_TextFilterWords::clear_text_filter_words_revision() {
  text_filter_words_revision_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CPlayer_TextFilterWords::_internal_text_filter_words_revision() const {
  return text_filter_words_revision_;
}
inline uint32_t CPlayer_TextFilterWords::text_filter_words_revision() const {
  // @@protoc_insertion_point(field_get:CPlayer_TextFilterWords.text_filter_words_revision)
  return _internal_text_filter_words_revision();
}
inline void CPlayer_TextFilterWords::_internal_set_text_filter_words_revision(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  text_filter_words_revision_ = value;
}
inline void CPlayer_TextFilterWords::set_text_filter_words_revision(uint32_t value) {
  _internal_set_text_filter_words_revision(value);
  // @@protoc_insertion_point(field_set:CPlayer_TextFilterWords.text_filter_words_revision)
}

// -------------------------------------------------------------------

// CPlayer_GetTextFilterWords_Response

// optional .CPlayer_TextFilterWords words = 1;
inline bool CPlayer_GetTextFilterWords_Response::_internal_has_words() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || words_ != nullptr);
  return value;
}
inline bool CPlayer_GetTextFilterWords_Response::has_words() const {
  return _internal_has_words();
}
inline void CPlayer_GetTextFilterWords_Response::clear_words() {
  if (words_ != nullptr) words_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CPlayer_TextFilterWords& CPlayer_GetTextFilterWords_Response::_internal_words() const {
  const ::CPlayer_TextFilterWords* p = words_;
  return p != nullptr ? *p : reinterpret_cast<const ::CPlayer_TextFilterWords&>(
      ::_CPlayer_TextFilterWords_default_instance_);
}
inline const ::CPlayer_TextFilterWords& CPlayer_GetTextFilterWords_Response::words() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetTextFilterWords_Response.words)
  return _internal_words();
}
inline void CPlayer_GetTextFilterWords_Response::unsafe_arena_set_allocated_words(
    ::CPlayer_TextFilterWords* words) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(words_);
  }
  words_ = words;
  if (words) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CPlayer_GetTextFilterWords_Response.words)
}
inline ::CPlayer_TextFilterWords* CPlayer_GetTextFilterWords_Response::release_words() {
  _has_bits_[0] &= ~0x00000001u;
  ::CPlayer_TextFilterWords* temp = words_;
  words_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CPlayer_TextFilterWords* CPlayer_GetTextFilterWords_Response::unsafe_arena_release_words() {
  // @@protoc_insertion_point(field_release:CPlayer_GetTextFilterWords_Response.words)
  _has_bits_[0] &= ~0x00000001u;
  ::CPlayer_TextFilterWords* temp = words_;
  words_ = nullptr;
  return temp;
}
inline ::CPlayer_TextFilterWords* CPlayer_GetTextFilterWords_Response::_internal_mutable_words() {
  _has_bits_[0] |= 0x00000001u;
  if (words_ == nullptr) {
    auto* p = CreateMaybeMessage<::CPlayer_TextFilterWords>(GetArenaForAllocation());
    words_ = p;
  }
  return words_;
}
inline ::CPlayer_TextFilterWords* CPlayer_GetTextFilterWords_Response::mutable_words() {
  ::CPlayer_TextFilterWords* _msg = _internal_mutable_words();
  // @@protoc_insertion_point(field_mutable:CPlayer_GetTextFilterWords_Response.words)
  return _msg;
}
inline void CPlayer_GetTextFilterWords_Response::set_allocated_words(::CPlayer_TextFilterWords* words) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete words_;
  }
  if (words) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CPlayer_TextFilterWords>::GetOwningArena(words);
    if (message_arena != submessage_arena) {
      words = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, words, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  words_ = words;
  // @@protoc_insertion_point(field_set_allocated:CPlayer_GetTextFilterWords_Response.words)
}

// -------------------------------------------------------------------

// CPlayer_GetNewSteamAnnouncementState_Request

// optional int32 language = 1;
inline bool CPlayer_GetNewSteamAnnouncementState_Request::_internal_has_language() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPlayer_GetNewSteamAnnouncementState_Request::has_language() const {
  return _internal_has_language();
}
inline void CPlayer_GetNewSteamAnnouncementState_Request::clear_language() {
  language_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t CPlayer_GetNewSteamAnnouncementState_Request::_internal_language() const {
  return language_;
}
inline int32_t CPlayer_GetNewSteamAnnouncementState_Request::language() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetNewSteamAnnouncementState_Request.language)
  return _internal_language();
}
inline void CPlayer_GetNewSteamAnnouncementState_Request::_internal_set_language(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  language_ = value;
}
inline void CPlayer_GetNewSteamAnnouncementState_Request::set_language(int32_t value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetNewSteamAnnouncementState_Request.language)
}

// -------------------------------------------------------------------

// CPlayer_GetNewSteamAnnouncementState_Response

// optional .ENewSteamAnnouncementState state = 1 [default = k_ENewSteamAnnouncementState_Invalid];
inline bool CPlayer_GetNewSteamAnnouncementState_Response::_internal_has_state() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CPlayer_GetNewSteamAnnouncementState_Response::has_state() const {
  return _internal_has_state();
}
inline void CPlayer_GetNewSteamAnnouncementState_Response::clear_state() {
  state_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::ENewSteamAnnouncementState CPlayer_GetNewSteamAnnouncementState_Response::_internal_state() const {
  return static_cast< ::ENewSteamAnnouncementState >(state_);
}
inline ::ENewSteamAnnouncementState CPlayer_GetNewSteamAnnouncementState_Response::state() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetNewSteamAnnouncementState_Response.state)
  return _internal_state();
}
inline void CPlayer_GetNewSteamAnnouncementState_Response::_internal_set_state(::ENewSteamAnnouncementState value) {
  assert(::ENewSteamAnnouncementState_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  state_ = value;
}
inline void CPlayer_GetNewSteamAnnouncementState_Response::set_state(::ENewSteamAnnouncementState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetNewSteamAnnouncementState_Response.state)
}

// optional string announcement_headline = 2;
inline bool CPlayer_GetNewSteamAnnouncementState_Response::_internal_has_announcement_headline() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPlayer_GetNewSteamAnnouncementState_Response::has_announcement_headline() const {
  return _internal_has_announcement_headline();
}
inline void CPlayer_GetNewSteamAnnouncementState_Response::clear_announcement_headline() {
  announcement_headline_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CPlayer_GetNewSteamAnnouncementState_Response::announcement_headline() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetNewSteamAnnouncementState_Response.announcement_headline)
  return _internal_announcement_headline();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CPlayer_GetNewSteamAnnouncementState_Response::set_announcement_headline(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 announcement_headline_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CPlayer_GetNewSteamAnnouncementState_Response.announcement_headline)
}
inline std::string* CPlayer_GetNewSteamAnnouncementState_Response::mutable_announcement_headline() {
  std::string* _s = _internal_mutable_announcement_headline();
  // @@protoc_insertion_point(field_mutable:CPlayer_GetNewSteamAnnouncementState_Response.announcement_headline)
  return _s;
}
inline const std::string& CPlayer_GetNewSteamAnnouncementState_Response::_internal_announcement_headline() const {
  return announcement_headline_.Get();
}
inline void CPlayer_GetNewSteamAnnouncementState_Response::_internal_set_announcement_headline(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  announcement_headline_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CPlayer_GetNewSteamAnnouncementState_Response::_internal_mutable_announcement_headline() {
  _has_bits_[0] |= 0x00000001u;
  return announcement_headline_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CPlayer_GetNewSteamAnnouncementState_Response::release_announcement_headline() {
  // @@protoc_insertion_point(field_release:CPlayer_GetNewSteamAnnouncementState_Response.announcement_headline)
  if (!_internal_has_announcement_headline()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = announcement_headline_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (announcement_headline_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    announcement_headline_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CPlayer_GetNewSteamAnnouncementState_Response::set_allocated_announcement_headline(std::string* announcement_headline) {
  if (announcement_headline != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  announcement_headline_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), announcement_headline,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (announcement_headline_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    announcement_headline_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CPlayer_GetNewSteamAnnouncementState_Response.announcement_headline)
}

// optional string announcement_url = 3;
inline bool CPlayer_GetNewSteamAnnouncementState_Response::_internal_has_announcement_url() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPlayer_GetNewSteamAnnouncementState_Response::has_announcement_url() const {
  return _internal_has_announcement_url();
}
inline void CPlayer_GetNewSteamAnnouncementState_Response::clear_announcement_url() {
  announcement_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CPlayer_GetNewSteamAnnouncementState_Response::announcement_url() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetNewSteamAnnouncementState_Response.announcement_url)
  return _internal_announcement_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CPlayer_GetNewSteamAnnouncementState_Response::set_announcement_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 announcement_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CPlayer_GetNewSteamAnnouncementState_Response.announcement_url)
}
inline std::string* CPlayer_GetNewSteamAnnouncementState_Response::mutable_announcement_url() {
  std::string* _s = _internal_mutable_announcement_url();
  // @@protoc_insertion_point(field_mutable:CPlayer_GetNewSteamAnnouncementState_Response.announcement_url)
  return _s;
}
inline const std::string& CPlayer_GetNewSteamAnnouncementState_Response::_internal_announcement_url() const {
  return announcement_url_.Get();
}
inline void CPlayer_GetNewSteamAnnouncementState_Response::_internal_set_announcement_url(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  announcement_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CPlayer_GetNewSteamAnnouncementState_Response::_internal_mutable_announcement_url() {
  _has_bits_[0] |= 0x00000002u;
  return announcement_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CPlayer_GetNewSteamAnnouncementState_Response::release_announcement_url() {
  // @@protoc_insertion_point(field_release:CPlayer_GetNewSteamAnnouncementState_Response.announcement_url)
  if (!_internal_has_announcement_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = announcement_url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (announcement_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    announcement_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CPlayer_GetNewSteamAnnouncementState_Response::set_allocated_announcement_url(std::string* announcement_url) {
  if (announcement_url != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  announcement_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), announcement_url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (announcement_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    announcement_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CPlayer_GetNewSteamAnnouncementState_Response.announcement_url)
}

// optional uint32 time_posted = 4;
inline bool CPlayer_GetNewSteamAnnouncementState_Response::_internal_has_time_posted() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CPlayer_GetNewSteamAnnouncementState_Response::has_time_posted() const {
  return _internal_has_time_posted();
}
inline void CPlayer_GetNewSteamAnnouncementState_Response::clear_time_posted() {
  time_posted_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CPlayer_GetNewSteamAnnouncementState_Response::_internal_time_posted() const {
  return time_posted_;
}
inline uint32_t CPlayer_GetNewSteamAnnouncementState_Response::time_posted() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetNewSteamAnnouncementState_Response.time_posted)
  return _internal_time_posted();
}
inline void CPlayer_GetNewSteamAnnouncementState_Response::_internal_set_time_posted(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  time_posted_ = value;
}
inline void CPlayer_GetNewSteamAnnouncementState_Response::set_time_posted(uint32_t value) {
  _internal_set_time_posted(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetNewSteamAnnouncementState_Response.time_posted)
}

// optional uint64 announcement_gid = 5;
inline bool CPlayer_GetNewSteamAnnouncementState_Response::_internal_has_announcement_gid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CPlayer_GetNewSteamAnnouncementState_Response::has_announcement_gid() const {
  return _internal_has_announcement_gid();
}
inline void CPlayer_GetNewSteamAnnouncementState_Response::clear_announcement_gid() {
  announcement_gid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000010u;
}
inline uint64_t CPlayer_GetNewSteamAnnouncementState_Response::_internal_announcement_gid() const {
  return announcement_gid_;
}
inline uint64_t CPlayer_GetNewSteamAnnouncementState_Response::announcement_gid() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetNewSteamAnnouncementState_Response.announcement_gid)
  return _internal_announcement_gid();
}
inline void CPlayer_GetNewSteamAnnouncementState_Response::_internal_set_announcement_gid(uint64_t value) {
  _has_bits_[0] |= 0x00000010u;
  announcement_gid_ = value;
}
inline void CPlayer_GetNewSteamAnnouncementState_Response::set_announcement_gid(uint64_t value) {
  _internal_set_announcement_gid(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetNewSteamAnnouncementState_Response.announcement_gid)
}

// -------------------------------------------------------------------

// CPlayer_UpdateSteamAnnouncementLastRead_Request

// optional uint64 announcement_gid = 1;
inline bool CPlayer_UpdateSteamAnnouncementLastRead_Request::_internal_has_announcement_gid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPlayer_UpdateSteamAnnouncementLastRead_Request::has_announcement_gid() const {
  return _internal_has_announcement_gid();
}
inline void CPlayer_UpdateSteamAnnouncementLastRead_Request::clear_announcement_gid() {
  announcement_gid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CPlayer_UpdateSteamAnnouncementLastRead_Request::_internal_announcement_gid() const {
  return announcement_gid_;
}
inline uint64_t CPlayer_UpdateSteamAnnouncementLastRead_Request::announcement_gid() const {
  // @@protoc_insertion_point(field_get:CPlayer_UpdateSteamAnnouncementLastRead_Request.announcement_gid)
  return _internal_announcement_gid();
}
inline void CPlayer_UpdateSteamAnnouncementLastRead_Request::_internal_set_announcement_gid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  announcement_gid_ = value;
}
inline void CPlayer_UpdateSteamAnnouncementLastRead_Request::set_announcement_gid(uint64_t value) {
  _internal_set_announcement_gid(value);
  // @@protoc_insertion_point(field_set:CPlayer_UpdateSteamAnnouncementLastRead_Request.announcement_gid)
}

// optional uint32 time_posted = 2;
inline bool CPlayer_UpdateSteamAnnouncementLastRead_Request::_internal_has_time_posted() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPlayer_UpdateSteamAnnouncementLastRead_Request::has_time_posted() const {
  return _internal_has_time_posted();
}
inline void CPlayer_UpdateSteamAnnouncementLastRead_Request::clear_time_posted() {
  time_posted_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CPlayer_UpdateSteamAnnouncementLastRead_Request::_internal_time_posted() const {
  return time_posted_;
}
inline uint32_t CPlayer_UpdateSteamAnnouncementLastRead_Request::time_posted() const {
  // @@protoc_insertion_point(field_get:CPlayer_UpdateSteamAnnouncementLastRead_Request.time_posted)
  return _internal_time_posted();
}
inline void CPlayer_UpdateSteamAnnouncementLastRead_Request::_internal_set_time_posted(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  time_posted_ = value;
}
inline void CPlayer_UpdateSteamAnnouncementLastRead_Request::set_time_posted(uint32_t value) {
  _internal_set_time_posted(value);
  // @@protoc_insertion_point(field_set:CPlayer_UpdateSteamAnnouncementLastRead_Request.time_posted)
}

// -------------------------------------------------------------------

// CPlayer_UpdateSteamAnnouncementLastRead_Response

// -------------------------------------------------------------------

// CPlayer_GetPrivacySettings_Request

// -------------------------------------------------------------------

// CPrivacySettings

// optional int32 privacy_state = 1;
inline bool CPrivacySettings::_internal_has_privacy_state() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPrivacySettings::has_privacy_state() const {
  return _internal_has_privacy_state();
}
inline void CPrivacySettings::clear_privacy_state() {
  privacy_state_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t CPrivacySettings::_internal_privacy_state() const {
  return privacy_state_;
}
inline int32_t CPrivacySettings::privacy_state() const {
  // @@protoc_insertion_point(field_get:CPrivacySettings.privacy_state)
  return _internal_privacy_state();
}
inline void CPrivacySettings::_internal_set_privacy_state(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  privacy_state_ = value;
}
inline void CPrivacySettings::set_privacy_state(int32_t value) {
  _internal_set_privacy_state(value);
  // @@protoc_insertion_point(field_set:CPrivacySettings.privacy_state)
}

// optional int32 privacy_state_inventory = 2;
inline bool CPrivacySettings::_internal_has_privacy_state_inventory() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPrivacySettings::has_privacy_state_inventory() const {
  return _internal_has_privacy_state_inventory();
}
inline void CPrivacySettings::clear_privacy_state_inventory() {
  privacy_state_inventory_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t CPrivacySettings::_internal_privacy_state_inventory() const {
  return privacy_state_inventory_;
}
inline int32_t CPrivacySettings::privacy_state_inventory() const {
  // @@protoc_insertion_point(field_get:CPrivacySettings.privacy_state_inventory)
  return _internal_privacy_state_inventory();
}
inline void CPrivacySettings::_internal_set_privacy_state_inventory(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  privacy_state_inventory_ = value;
}
inline void CPrivacySettings::set_privacy_state_inventory(int32_t value) {
  _internal_set_privacy_state_inventory(value);
  // @@protoc_insertion_point(field_set:CPrivacySettings.privacy_state_inventory)
}

// optional int32 privacy_state_gifts = 3;
inline bool CPrivacySettings::_internal_has_privacy_state_gifts() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CPrivacySettings::has_privacy_state_gifts() const {
  return _internal_has_privacy_state_gifts();
}
inline void CPrivacySettings::clear_privacy_state_gifts() {
  privacy_state_gifts_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t CPrivacySettings::_internal_privacy_state_gifts() const {
  return privacy_state_gifts_;
}
inline int32_t CPrivacySettings::privacy_state_gifts() const {
  // @@protoc_insertion_point(field_get:CPrivacySettings.privacy_state_gifts)
  return _internal_privacy_state_gifts();
}
inline void CPrivacySettings::_internal_set_privacy_state_gifts(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  privacy_state_gifts_ = value;
}
inline void CPrivacySettings::set_privacy_state_gifts(int32_t value) {
  _internal_set_privacy_state_gifts(value);
  // @@protoc_insertion_point(field_set:CPrivacySettings.privacy_state_gifts)
}

// optional int32 privacy_state_ownedgames = 4;
inline bool CPrivacySettings::_internal_has_privacy_state_ownedgames() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CPrivacySettings::has_privacy_state_ownedgames() const {
  return _internal_has_privacy_state_ownedgames();
}
inline void CPrivacySettings::clear_privacy_state_ownedgames() {
  privacy_state_ownedgames_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t CPrivacySettings::_internal_privacy_state_ownedgames() const {
  return privacy_state_ownedgames_;
}
inline int32_t CPrivacySettings::privacy_state_ownedgames() const {
  // @@protoc_insertion_point(field_get:CPrivacySettings.privacy_state_ownedgames)
  return _internal_privacy_state_ownedgames();
}
inline void CPrivacySettings::_internal_set_privacy_state_ownedgames(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  privacy_state_ownedgames_ = value;
}
inline void CPrivacySettings::set_privacy_state_ownedgames(int32_t value) {
  _internal_set_privacy_state_ownedgames(value);
  // @@protoc_insertion_point(field_set:CPrivacySettings.privacy_state_ownedgames)
}

// optional int32 privacy_state_playtime = 5;
inline bool CPrivacySettings::_internal_has_privacy_state_playtime() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CPrivacySettings::has_privacy_state_playtime() const {
  return _internal_has_privacy_state_playtime();
}
inline void CPrivacySettings::clear_privacy_state_playtime() {
  privacy_state_playtime_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline int32_t CPrivacySettings::_internal_privacy_state_playtime() const {
  return privacy_state_playtime_;
}
inline int32_t CPrivacySettings::privacy_state_playtime() const {
  // @@protoc_insertion_point(field_get:CPrivacySettings.privacy_state_playtime)
  return _internal_privacy_state_playtime();
}
inline void CPrivacySettings::_internal_set_privacy_state_playtime(int32_t value) {
  _has_bits_[0] |= 0x00000010u;
  privacy_state_playtime_ = value;
}
inline void CPrivacySettings::set_privacy_state_playtime(int32_t value) {
  _internal_set_privacy_state_playtime(value);
  // @@protoc_insertion_point(field_set:CPrivacySettings.privacy_state_playtime)
}

// optional int32 privacy_state_friendslist = 6;
inline bool CPrivacySettings::_internal_has_privacy_state_friendslist() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CPrivacySettings::has_privacy_state_friendslist() const {
  return _internal_has_privacy_state_friendslist();
}
inline void CPrivacySettings::clear_privacy_state_friendslist() {
  privacy_state_friendslist_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline int32_t CPrivacySettings::_internal_privacy_state_friendslist() const {
  return privacy_state_friendslist_;
}
inline int32_t CPrivacySettings::privacy_state_friendslist() const {
  // @@protoc_insertion_point(field_get:CPrivacySettings.privacy_state_friendslist)
  return _internal_privacy_state_friendslist();
}
inline void CPrivacySettings::_internal_set_privacy_state_friendslist(int32_t value) {
  _has_bits_[0] |= 0x00000020u;
  privacy_state_friendslist_ = value;
}
inline void CPrivacySettings::set_privacy_state_friendslist(int32_t value) {
  _internal_set_privacy_state_friendslist(value);
  // @@protoc_insertion_point(field_set:CPrivacySettings.privacy_state_friendslist)
}

// -------------------------------------------------------------------

// CPlayer_GetPrivacySettings_Response

// optional .CPrivacySettings privacy_settings = 1;
inline bool CPlayer_GetPrivacySettings_Response::_internal_has_privacy_settings() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || privacy_settings_ != nullptr);
  return value;
}
inline bool CPlayer_GetPrivacySettings_Response::has_privacy_settings() const {
  return _internal_has_privacy_settings();
}
inline void CPlayer_GetPrivacySettings_Response::clear_privacy_settings() {
  if (privacy_settings_ != nullptr) privacy_settings_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CPrivacySettings& CPlayer_GetPrivacySettings_Response::_internal_privacy_settings() const {
  const ::CPrivacySettings* p = privacy_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::CPrivacySettings&>(
      ::_CPrivacySettings_default_instance_);
}
inline const ::CPrivacySettings& CPlayer_GetPrivacySettings_Response::privacy_settings() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetPrivacySettings_Response.privacy_settings)
  return _internal_privacy_settings();
}
inline void CPlayer_GetPrivacySettings_Response::unsafe_arena_set_allocated_privacy_settings(
    ::CPrivacySettings* privacy_settings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(privacy_settings_);
  }
  privacy_settings_ = privacy_settings;
  if (privacy_settings) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CPlayer_GetPrivacySettings_Response.privacy_settings)
}
inline ::CPrivacySettings* CPlayer_GetPrivacySettings_Response::release_privacy_settings() {
  _has_bits_[0] &= ~0x00000001u;
  ::CPrivacySettings* temp = privacy_settings_;
  privacy_settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CPrivacySettings* CPlayer_GetPrivacySettings_Response::unsafe_arena_release_privacy_settings() {
  // @@protoc_insertion_point(field_release:CPlayer_GetPrivacySettings_Response.privacy_settings)
  _has_bits_[0] &= ~0x00000001u;
  ::CPrivacySettings* temp = privacy_settings_;
  privacy_settings_ = nullptr;
  return temp;
}
inline ::CPrivacySettings* CPlayer_GetPrivacySettings_Response::_internal_mutable_privacy_settings() {
  _has_bits_[0] |= 0x00000001u;
  if (privacy_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::CPrivacySettings>(GetArenaForAllocation());
    privacy_settings_ = p;
  }
  return privacy_settings_;
}
inline ::CPrivacySettings* CPlayer_GetPrivacySettings_Response::mutable_privacy_settings() {
  ::CPrivacySettings* _msg = _internal_mutable_privacy_settings();
  // @@protoc_insertion_point(field_mutable:CPlayer_GetPrivacySettings_Response.privacy_settings)
  return _msg;
}
inline void CPlayer_GetPrivacySettings_Response::set_allocated_privacy_settings(::CPrivacySettings* privacy_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete privacy_settings_;
  }
  if (privacy_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CPrivacySettings>::GetOwningArena(privacy_settings);
    if (message_arena != submessage_arena) {
      privacy_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, privacy_settings, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  privacy_settings_ = privacy_settings;
  // @@protoc_insertion_point(field_set_allocated:CPlayer_GetPrivacySettings_Response.privacy_settings)
}

// -------------------------------------------------------------------

// CPlayer_GetDurationControl_Request

// optional uint32 appid = 1;
inline bool CPlayer_GetDurationControl_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPlayer_GetDurationControl_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CPlayer_GetDurationControl_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CPlayer_GetDurationControl_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CPlayer_GetDurationControl_Request::appid() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetDurationControl_Request.appid)
  return _internal_appid();
}
inline void CPlayer_GetDurationControl_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  appid_ = value;
}
inline void CPlayer_GetDurationControl_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetDurationControl_Request.appid)
}

// -------------------------------------------------------------------

// CPlayer_GetDurationControl_Response

// optional bool is_enabled = 1;
inline bool CPlayer_GetDurationControl_Response::_internal_has_is_enabled() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CPlayer_GetDurationControl_Response::has_is_enabled() const {
  return _internal_has_is_enabled();
}
inline void CPlayer_GetDurationControl_Response::clear_is_enabled() {
  is_enabled_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CPlayer_GetDurationControl_Response::_internal_is_enabled() const {
  return is_enabled_;
}
inline bool CPlayer_GetDurationControl_Response::is_enabled() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetDurationControl_Response.is_enabled)
  return _internal_is_enabled();
}
inline void CPlayer_GetDurationControl_Response::_internal_set_is_enabled(bool value) {
  _has_bits_[0] |= 0x00000004u;
  is_enabled_ = value;
}
inline void CPlayer_GetDurationControl_Response::set_is_enabled(bool value) {
  _internal_set_is_enabled(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetDurationControl_Response.is_enabled)
}

// optional int32 seconds = 2;
inline bool CPlayer_GetDurationControl_Response::_internal_has_seconds() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPlayer_GetDurationControl_Response::has_seconds() const {
  return _internal_has_seconds();
}
inline void CPlayer_GetDurationControl_Response::clear_seconds() {
  seconds_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t CPlayer_GetDurationControl_Response::_internal_seconds() const {
  return seconds_;
}
inline int32_t CPlayer_GetDurationControl_Response::seconds() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetDurationControl_Response.seconds)
  return _internal_seconds();
}
inline void CPlayer_GetDurationControl_Response::_internal_set_seconds(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  seconds_ = value;
}
inline void CPlayer_GetDurationControl_Response::set_seconds(int32_t value) {
  _internal_set_seconds(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetDurationControl_Response.seconds)
}

// optional int32 seconds_today = 3;
inline bool CPlayer_GetDurationControl_Response::_internal_has_seconds_today() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPlayer_GetDurationControl_Response::has_seconds_today() const {
  return _internal_has_seconds_today();
}
inline void CPlayer_GetDurationControl_Response::clear_seconds_today() {
  seconds_today_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t CPlayer_GetDurationControl_Response::_internal_seconds_today() const {
  return seconds_today_;
}
inline int32_t CPlayer_GetDurationControl_Response::seconds_today() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetDurationControl_Response.seconds_today)
  return _internal_seconds_today();
}
inline void CPlayer_GetDurationControl_Response::_internal_set_seconds_today(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  seconds_today_ = value;
}
inline void CPlayer_GetDurationControl_Response::set_seconds_today(int32_t value) {
  _internal_set_seconds_today(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetDurationControl_Response.seconds_today)
}

// optional bool is_steamchina_account = 4;
inline bool CPlayer_GetDurationControl_Response::_internal_has_is_steamchina_account() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CPlayer_GetDurationControl_Response::has_is_steamchina_account() const {
  return _internal_has_is_steamchina_account();
}
inline void CPlayer_GetDurationControl_Response::clear_is_steamchina_account() {
  is_steamchina_account_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CPlayer_GetDurationControl_Response::_internal_is_steamchina_account() const {
  return is_steamchina_account_;
}
inline bool CPlayer_GetDurationControl_Response::is_steamchina_account() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetDurationControl_Response.is_steamchina_account)
  return _internal_is_steamchina_account();
}
inline void CPlayer_GetDurationControl_Response::_internal_set_is_steamchina_account(bool value) {
  _has_bits_[0] |= 0x00000008u;
  is_steamchina_account_ = value;
}
inline void CPlayer_GetDurationControl_Response::set_is_steamchina_account(bool value) {
  _internal_set_is_steamchina_account(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetDurationControl_Response.is_steamchina_account)
}

// optional bool is_age_verified = 5;
inline bool CPlayer_GetDurationControl_Response::_internal_has_is_age_verified() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CPlayer_GetDurationControl_Response::has_is_age_verified() const {
  return _internal_has_is_age_verified();
}
inline void CPlayer_GetDurationControl_Response::clear_is_age_verified() {
  is_age_verified_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CPlayer_GetDurationControl_Response::_internal_is_age_verified() const {
  return is_age_verified_;
}
inline bool CPlayer_GetDurationControl_Response::is_age_verified() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetDurationControl_Response.is_age_verified)
  return _internal_is_age_verified();
}
inline void CPlayer_GetDurationControl_Response::_internal_set_is_age_verified(bool value) {
  _has_bits_[0] |= 0x00000010u;
  is_age_verified_ = value;
}
inline void CPlayer_GetDurationControl_Response::set_is_age_verified(bool value) {
  _internal_set_is_age_verified(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetDurationControl_Response.is_age_verified)
}

// optional uint32 seconds_allowed_today = 6;
inline bool CPlayer_GetDurationControl_Response::_internal_has_seconds_allowed_today() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CPlayer_GetDurationControl_Response::has_seconds_allowed_today() const {
  return _internal_has_seconds_allowed_today();
}
inline void CPlayer_GetDurationControl_Response::clear_seconds_allowed_today() {
  seconds_allowed_today_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CPlayer_GetDurationControl_Response::_internal_seconds_allowed_today() const {
  return seconds_allowed_today_;
}
inline uint32_t CPlayer_GetDurationControl_Response::seconds_allowed_today() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetDurationControl_Response.seconds_allowed_today)
  return _internal_seconds_allowed_today();
}
inline void CPlayer_GetDurationControl_Response::_internal_set_seconds_allowed_today(uint32_t value) {
  _has_bits_[0] |= 0x00000040u;
  seconds_allowed_today_ = value;
}
inline void CPlayer_GetDurationControl_Response::set_seconds_allowed_today(uint32_t value) {
  _internal_set_seconds_allowed_today(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetDurationControl_Response.seconds_allowed_today)
}

// optional bool age_verification_pending = 7;
inline bool CPlayer_GetDurationControl_Response::_internal_has_age_verification_pending() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CPlayer_GetDurationControl_Response::has_age_verification_pending() const {
  return _internal_has_age_verification_pending();
}
inline void CPlayer_GetDurationControl_Response::clear_age_verification_pending() {
  age_verification_pending_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CPlayer_GetDurationControl_Response::_internal_age_verification_pending() const {
  return age_verification_pending_;
}
inline bool CPlayer_GetDurationControl_Response::age_verification_pending() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetDurationControl_Response.age_verification_pending)
  return _internal_age_verification_pending();
}
inline void CPlayer_GetDurationControl_Response::_internal_set_age_verification_pending(bool value) {
  _has_bits_[0] |= 0x00000020u;
  age_verification_pending_ = value;
}
inline void CPlayer_GetDurationControl_Response::set_age_verification_pending(bool value) {
  _internal_set_age_verification_pending(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetDurationControl_Response.age_verification_pending)
}

// optional bool block_minors = 8;
inline bool CPlayer_GetDurationControl_Response::_internal_has_block_minors() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CPlayer_GetDurationControl_Response::has_block_minors() const {
  return _internal_has_block_minors();
}
inline void CPlayer_GetDurationControl_Response::clear_block_minors() {
  block_minors_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CPlayer_GetDurationControl_Response::_internal_block_minors() const {
  return block_minors_;
}
inline bool CPlayer_GetDurationControl_Response::block_minors() const {
  // @@protoc_insertion_point(field_get:CPlayer_GetDurationControl_Response.block_minors)
  return _internal_block_minors();
}
inline void CPlayer_GetDurationControl_Response::_internal_set_block_minors(bool value) {
  _has_bits_[0] |= 0x00000080u;
  block_minors_ = value;
}
inline void CPlayer_GetDurationControl_Response::set_block_minors(bool value) {
  _internal_set_block_minors(value);
  // @@protoc_insertion_point(field_set:CPlayer_GetDurationControl_Response.block_minors)
}

// -------------------------------------------------------------------

// CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory

// optional uint32 appid = 1;
inline bool CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory::has_appid() const {
  return _internal_has_appid();
}
inline void CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory::_internal_appid() const {
  return appid_;
}
inline uint32_t CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory::appid() const {
  // @@protoc_insertion_point(field_get:CPlayer_RecordDisconnectedPlaytime_Request.PlayHistory.appid)
  return _internal_appid();
}
inline void CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  appid_ = value;
}
inline void CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CPlayer_RecordDisconnectedPlaytime_Request.PlayHistory.appid)
}

// optional uint32 session_time_start = 2;
inline bool CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory::_internal_has_session_time_start() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory::has_session_time_start() const {
  return _internal_has_session_time_start();
}
inline void CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory::clear_session_time_start() {
  session_time_start_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory::_internal_session_time_start() const {
  return session_time_start_;
}
inline uint32_t CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory::session_time_start() const {
  // @@protoc_insertion_point(field_get:CPlayer_RecordDisconnectedPlaytime_Request.PlayHistory.session_time_start)
  return _internal_session_time_start();
}
inline void CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory::_internal_set_session_time_start(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  session_time_start_ = value;
}
inline void CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory::set_session_time_start(uint32_t value) {
  _internal_set_session_time_start(value);
  // @@protoc_insertion_point(field_set:CPlayer_RecordDisconnectedPlaytime_Request.PlayHistory.session_time_start)
}

// optional uint32 seconds = 3;
inline bool CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory::_internal_has_seconds() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory::has_seconds() const {
  return _internal_has_seconds();
}
inline void CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory::clear_seconds() {
  seconds_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory::_internal_seconds() const {
  return seconds_;
}
inline uint32_t CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory::seconds() const {
  // @@protoc_insertion_point(field_get:CPlayer_RecordDisconnectedPlaytime_Request.PlayHistory.seconds)
  return _internal_seconds();
}
inline void CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory::_internal_set_seconds(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  seconds_ = value;
}
inline void CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory::set_seconds(uint32_t value) {
  _internal_set_seconds(value);
  // @@protoc_insertion_point(field_set:CPlayer_RecordDisconnectedPlaytime_Request.PlayHistory.seconds)
}

// optional bool offline = 4;
inline bool CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory::_internal_has_offline() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory::has_offline() const {
  return _internal_has_offline();
}
inline void CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory::clear_offline() {
  offline_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory::_internal_offline() const {
  return offline_;
}
inline bool CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory::offline() const {
  // @@protoc_insertion_point(field_get:CPlayer_RecordDisconnectedPlaytime_Request.PlayHistory.offline)
  return _internal_offline();
}
inline void CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory::_internal_set_offline(bool value) {
  _has_bits_[0] |= 0x00000008u;
  offline_ = value;
}
inline void CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory::set_offline(bool value) {
  _internal_set_offline(value);
  // @@protoc_insertion_point(field_set:CPlayer_RecordDisconnectedPlaytime_Request.PlayHistory.offline)
}

// -------------------------------------------------------------------

// CPlayer_RecordDisconnectedPlaytime_Request

// repeated .CPlayer_RecordDisconnectedPlaytime_Request.PlayHistory play_sessions = 3;
inline int CPlayer_RecordDisconnectedPlaytime_Request::_internal_play_sessions_size() const {
  return play_sessions_.size();
}
inline int CPlayer_RecordDisconnectedPlaytime_Request::play_sessions_size() const {
  return _internal_play_sessions_size();
}
inline void CPlayer_RecordDisconnectedPlaytime_Request::clear_play_sessions() {
  play_sessions_.Clear();
}
inline ::CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory* CPlayer_RecordDisconnectedPlaytime_Request::mutable_play_sessions(int index) {
  // @@protoc_insertion_point(field_mutable:CPlayer_RecordDisconnectedPlaytime_Request.play_sessions)
  return play_sessions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory >*
CPlayer_RecordDisconnectedPlaytime_Request::mutable_play_sessions() {
  // @@protoc_insertion_point(field_mutable_list:CPlayer_RecordDisconnectedPlaytime_Request.play_sessions)
  return &play_sessions_;
}
inline const ::CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory& CPlayer_RecordDisconnectedPlaytime_Request::_internal_play_sessions(int index) const {
  return play_sessions_.Get(index);
}
inline const ::CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory& CPlayer_RecordDisconnectedPlaytime_Request::play_sessions(int index) const {
  // @@protoc_insertion_point(field_get:CPlayer_RecordDisconnectedPlaytime_Request.play_sessions)
  return _internal_play_sessions(index);
}
inline ::CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory* CPlayer_RecordDisconnectedPlaytime_Request::_internal_add_play_sessions() {
  return play_sessions_.Add();
}
inline ::CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory* CPlayer_RecordDisconnectedPlaytime_Request::add_play_sessions() {
  ::CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory* _add = _internal_add_play_sessions();
  // @@protoc_insertion_point(field_add:CPlayer_RecordDisconnectedPlaytime_Request.play_sessions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory >&
CPlayer_RecordDisconnectedPlaytime_Request::play_sessions() const {
  // @@protoc_insertion_point(field_list:CPlayer_RecordDisconnectedPlaytime_Request.play_sessions)
  return play_sessions_;
}

// -------------------------------------------------------------------

// CPlayer_RecordDisconnectedPlaytime_Response

// -------------------------------------------------------------------

// CPlayer_LastPlayedTimes_Notification

// repeated .CPlayer_GetLastPlayedTimes_Response.Game games = 1;
inline int CPlayer_LastPlayedTimes_Notification::_internal_games_size() const {
  return games_.size();
}
inline int CPlayer_LastPlayedTimes_Notification::games_size() const {
  return _internal_games_size();
}
inline void CPlayer_LastPlayedTimes_Notification::clear_games() {
  games_.Clear();
}
inline ::CPlayer_GetLastPlayedTimes_Response_Game* CPlayer_LastPlayedTimes_Notification::mutable_games(int index) {
  // @@protoc_insertion_point(field_mutable:CPlayer_LastPlayedTimes_Notification.games)
  return games_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetLastPlayedTimes_Response_Game >*
CPlayer_LastPlayedTimes_Notification::mutable_games() {
  // @@protoc_insertion_point(field_mutable_list:CPlayer_LastPlayedTimes_Notification.games)
  return &games_;
}
inline const ::CPlayer_GetLastPlayedTimes_Response_Game& CPlayer_LastPlayedTimes_Notification::_internal_games(int index) const {
  return games_.Get(index);
}
inline const ::CPlayer_GetLastPlayedTimes_Response_Game& CPlayer_LastPlayedTimes_Notification::games(int index) const {
  // @@protoc_insertion_point(field_get:CPlayer_LastPlayedTimes_Notification.games)
  return _internal_games(index);
}
inline ::CPlayer_GetLastPlayedTimes_Response_Game* CPlayer_LastPlayedTimes_Notification::_internal_add_games() {
  return games_.Add();
}
inline ::CPlayer_GetLastPlayedTimes_Response_Game* CPlayer_LastPlayedTimes_Notification::add_games() {
  ::CPlayer_GetLastPlayedTimes_Response_Game* _add = _internal_add_games();
  // @@protoc_insertion_point(field_add:CPlayer_LastPlayedTimes_Notification.games)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPlayer_GetLastPlayedTimes_Response_Game >&
CPlayer_LastPlayedTimes_Notification::games() const {
  // @@protoc_insertion_point(field_list:CPlayer_LastPlayedTimes_Notification.games)
  return games_;
}

// -------------------------------------------------------------------

// CPlayer_FriendNicknameChanged_Notification

// optional fixed32 accountid = 1;
inline bool CPlayer_FriendNicknameChanged_Notification::_internal_has_accountid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPlayer_FriendNicknameChanged_Notification::has_accountid() const {
  return _internal_has_accountid();
}
inline void CPlayer_FriendNicknameChanged_Notification::clear_accountid() {
  accountid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CPlayer_FriendNicknameChanged_Notification::_internal_accountid() const {
  return accountid_;
}
inline uint32_t CPlayer_FriendNicknameChanged_Notification::accountid() const {
  // @@protoc_insertion_point(field_get:CPlayer_FriendNicknameChanged_Notification.accountid)
  return _internal_accountid();
}
inline void CPlayer_FriendNicknameChanged_Notification::_internal_set_accountid(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  accountid_ = value;
}
inline void CPlayer_FriendNicknameChanged_Notification::set_accountid(uint32_t value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:CPlayer_FriendNicknameChanged_Notification.accountid)
}

// optional string nickname = 2;
inline bool CPlayer_FriendNicknameChanged_Notification::_internal_has_nickname() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPlayer_FriendNicknameChanged_Notification::has_nickname() const {
  return _internal_has_nickname();
}
inline void CPlayer_FriendNicknameChanged_Notification::clear_nickname() {
  nickname_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CPlayer_FriendNicknameChanged_Notification::nickname() const {
  // @@protoc_insertion_point(field_get:CPlayer_FriendNicknameChanged_Notification.nickname)
  return _internal_nickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CPlayer_FriendNicknameChanged_Notification::set_nickname(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CPlayer_FriendNicknameChanged_Notification.nickname)
}
inline std::string* CPlayer_FriendNicknameChanged_Notification::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:CPlayer_FriendNicknameChanged_Notification.nickname)
  return _s;
}
inline const std::string& CPlayer_FriendNicknameChanged_Notification::_internal_nickname() const {
  return nickname_.Get();
}
inline void CPlayer_FriendNicknameChanged_Notification::_internal_set_nickname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CPlayer_FriendNicknameChanged_Notification::_internal_mutable_nickname() {
  _has_bits_[0] |= 0x00000001u;
  return nickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CPlayer_FriendNicknameChanged_Notification::release_nickname() {
  // @@protoc_insertion_point(field_release:CPlayer_FriendNicknameChanged_Notification.nickname)
  if (!_internal_has_nickname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = nickname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (nickname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CPlayer_FriendNicknameChanged_Notification::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (nickname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CPlayer_FriendNicknameChanged_Notification.nickname)
}

// optional bool is_echo_to_self = 3;
inline bool CPlayer_FriendNicknameChanged_Notification::_internal_has_is_echo_to_self() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CPlayer_FriendNicknameChanged_Notification::has_is_echo_to_self() const {
  return _internal_has_is_echo_to_self();
}
inline void CPlayer_FriendNicknameChanged_Notification::clear_is_echo_to_self() {
  is_echo_to_self_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CPlayer_FriendNicknameChanged_Notification::_internal_is_echo_to_self() const {
  return is_echo_to_self_;
}
inline bool CPlayer_FriendNicknameChanged_Notification::is_echo_to_self() const {
  // @@protoc_insertion_point(field_get:CPlayer_FriendNicknameChanged_Notification.is_echo_to_self)
  return _internal_is_echo_to_self();
}
inline void CPlayer_FriendNicknameChanged_Notification::_internal_set_is_echo_to_self(bool value) {
  _has_bits_[0] |= 0x00000004u;
  is_echo_to_self_ = value;
}
inline void CPlayer_FriendNicknameChanged_Notification::set_is_echo_to_self(bool value) {
  _internal_set_is_echo_to_self(value);
  // @@protoc_insertion_point(field_set:CPlayer_FriendNicknameChanged_Notification.is_echo_to_self)
}

// -------------------------------------------------------------------

// CPlayer_FriendEquippedProfileItemsChanged_Notification

// optional fixed32 accountid = 1;
inline bool CPlayer_FriendEquippedProfileItemsChanged_Notification::_internal_has_accountid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPlayer_FriendEquippedProfileItemsChanged_Notification::has_accountid() const {
  return _internal_has_accountid();
}
inline void CPlayer_FriendEquippedProfileItemsChanged_Notification::clear_accountid() {
  accountid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CPlayer_FriendEquippedProfileItemsChanged_Notification::_internal_accountid() const {
  return accountid_;
}
inline uint32_t CPlayer_FriendEquippedProfileItemsChanged_Notification::accountid() const {
  // @@protoc_insertion_point(field_get:CPlayer_FriendEquippedProfileItemsChanged_Notification.accountid)
  return _internal_accountid();
}
inline void CPlayer_FriendEquippedProfileItemsChanged_Notification::_internal_set_accountid(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  accountid_ = value;
}
inline void CPlayer_FriendEquippedProfileItemsChanged_Notification::set_accountid(uint32_t value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:CPlayer_FriendEquippedProfileItemsChanged_Notification.accountid)
}

// -------------------------------------------------------------------

// CPlayer_NewSteamAnnouncementState_Notification

// optional .ENewSteamAnnouncementState state = 1 [default = k_ENewSteamAnnouncementState_Invalid];
inline bool CPlayer_NewSteamAnnouncementState_Notification::_internal_has_state() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CPlayer_NewSteamAnnouncementState_Notification::has_state() const {
  return _internal_has_state();
}
inline void CPlayer_NewSteamAnnouncementState_Notification::clear_state() {
  state_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::ENewSteamAnnouncementState CPlayer_NewSteamAnnouncementState_Notification::_internal_state() const {
  return static_cast< ::ENewSteamAnnouncementState >(state_);
}
inline ::ENewSteamAnnouncementState CPlayer_NewSteamAnnouncementState_Notification::state() const {
  // @@protoc_insertion_point(field_get:CPlayer_NewSteamAnnouncementState_Notification.state)
  return _internal_state();
}
inline void CPlayer_NewSteamAnnouncementState_Notification::_internal_set_state(::ENewSteamAnnouncementState value) {
  assert(::ENewSteamAnnouncementState_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  state_ = value;
}
inline void CPlayer_NewSteamAnnouncementState_Notification::set_state(::ENewSteamAnnouncementState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:CPlayer_NewSteamAnnouncementState_Notification.state)
}

// optional string announcement_headline = 2;
inline bool CPlayer_NewSteamAnnouncementState_Notification::_internal_has_announcement_headline() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPlayer_NewSteamAnnouncementState_Notification::has_announcement_headline() const {
  return _internal_has_announcement_headline();
}
inline void CPlayer_NewSteamAnnouncementState_Notification::clear_announcement_headline() {
  announcement_headline_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CPlayer_NewSteamAnnouncementState_Notification::announcement_headline() const {
  // @@protoc_insertion_point(field_get:CPlayer_NewSteamAnnouncementState_Notification.announcement_headline)
  return _internal_announcement_headline();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CPlayer_NewSteamAnnouncementState_Notification::set_announcement_headline(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 announcement_headline_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CPlayer_NewSteamAnnouncementState_Notification.announcement_headline)
}
inline std::string* CPlayer_NewSteamAnnouncementState_Notification::mutable_announcement_headline() {
  std::string* _s = _internal_mutable_announcement_headline();
  // @@protoc_insertion_point(field_mutable:CPlayer_NewSteamAnnouncementState_Notification.announcement_headline)
  return _s;
}
inline const std::string& CPlayer_NewSteamAnnouncementState_Notification::_internal_announcement_headline() const {
  return announcement_headline_.Get();
}
inline void CPlayer_NewSteamAnnouncementState_Notification::_internal_set_announcement_headline(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  announcement_headline_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CPlayer_NewSteamAnnouncementState_Notification::_internal_mutable_announcement_headline() {
  _has_bits_[0] |= 0x00000001u;
  return announcement_headline_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CPlayer_NewSteamAnnouncementState_Notification::release_announcement_headline() {
  // @@protoc_insertion_point(field_release:CPlayer_NewSteamAnnouncementState_Notification.announcement_headline)
  if (!_internal_has_announcement_headline()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = announcement_headline_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (announcement_headline_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    announcement_headline_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CPlayer_NewSteamAnnouncementState_Notification::set_allocated_announcement_headline(std::string* announcement_headline) {
  if (announcement_headline != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  announcement_headline_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), announcement_headline,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (announcement_headline_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    announcement_headline_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CPlayer_NewSteamAnnouncementState_Notification.announcement_headline)
}

// optional string announcement_url = 3;
inline bool CPlayer_NewSteamAnnouncementState_Notification::_internal_has_announcement_url() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPlayer_NewSteamAnnouncementState_Notification::has_announcement_url() const {
  return _internal_has_announcement_url();
}
inline void CPlayer_NewSteamAnnouncementState_Notification::clear_announcement_url() {
  announcement_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CPlayer_NewSteamAnnouncementState_Notification::announcement_url() const {
  // @@protoc_insertion_point(field_get:CPlayer_NewSteamAnnouncementState_Notification.announcement_url)
  return _internal_announcement_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CPlayer_NewSteamAnnouncementState_Notification::set_announcement_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 announcement_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CPlayer_NewSteamAnnouncementState_Notification.announcement_url)
}
inline std::string* CPlayer_NewSteamAnnouncementState_Notification::mutable_announcement_url() {
  std::string* _s = _internal_mutable_announcement_url();
  // @@protoc_insertion_point(field_mutable:CPlayer_NewSteamAnnouncementState_Notification.announcement_url)
  return _s;
}
inline const std::string& CPlayer_NewSteamAnnouncementState_Notification::_internal_announcement_url() const {
  return announcement_url_.Get();
}
inline void CPlayer_NewSteamAnnouncementState_Notification::_internal_set_announcement_url(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  announcement_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CPlayer_NewSteamAnnouncementState_Notification::_internal_mutable_announcement_url() {
  _has_bits_[0] |= 0x00000002u;
  return announcement_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CPlayer_NewSteamAnnouncementState_Notification::release_announcement_url() {
  // @@protoc_insertion_point(field_release:CPlayer_NewSteamAnnouncementState_Notification.announcement_url)
  if (!_internal_has_announcement_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = announcement_url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (announcement_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    announcement_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CPlayer_NewSteamAnnouncementState_Notification::set_allocated_announcement_url(std::string* announcement_url) {
  if (announcement_url != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  announcement_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), announcement_url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (announcement_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    announcement_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CPlayer_NewSteamAnnouncementState_Notification.announcement_url)
}

// optional uint32 time_posted = 4;
inline bool CPlayer_NewSteamAnnouncementState_Notification::_internal_has_time_posted() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CPlayer_NewSteamAnnouncementState_Notification::has_time_posted() const {
  return _internal_has_time_posted();
}
inline void CPlayer_NewSteamAnnouncementState_Notification::clear_time_posted() {
  time_posted_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CPlayer_NewSteamAnnouncementState_Notification::_internal_time_posted() const {
  return time_posted_;
}
inline uint32_t CPlayer_NewSteamAnnouncementState_Notification::time_posted() const {
  // @@protoc_insertion_point(field_get:CPlayer_NewSteamAnnouncementState_Notification.time_posted)
  return _internal_time_posted();
}
inline void CPlayer_NewSteamAnnouncementState_Notification::_internal_set_time_posted(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  time_posted_ = value;
}
inline void CPlayer_NewSteamAnnouncementState_Notification::set_time_posted(uint32_t value) {
  _internal_set_time_posted(value);
  // @@protoc_insertion_point(field_set:CPlayer_NewSteamAnnouncementState_Notification.time_posted)
}

// optional uint64 announcement_gid = 5;
inline bool CPlayer_NewSteamAnnouncementState_Notification::_internal_has_announcement_gid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CPlayer_NewSteamAnnouncementState_Notification::has_announcement_gid() const {
  return _internal_has_announcement_gid();
}
inline void CPlayer_NewSteamAnnouncementState_Notification::clear_announcement_gid() {
  announcement_gid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000010u;
}
inline uint64_t CPlayer_NewSteamAnnouncementState_Notification::_internal_announcement_gid() const {
  return announcement_gid_;
}
inline uint64_t CPlayer_NewSteamAnnouncementState_Notification::announcement_gid() const {
  // @@protoc_insertion_point(field_get:CPlayer_NewSteamAnnouncementState_Notification.announcement_gid)
  return _internal_announcement_gid();
}
inline void CPlayer_NewSteamAnnouncementState_Notification::_internal_set_announcement_gid(uint64_t value) {
  _has_bits_[0] |= 0x00000010u;
  announcement_gid_ = value;
}
inline void CPlayer_NewSteamAnnouncementState_Notification::set_announcement_gid(uint64_t value) {
  _internal_set_announcement_gid(value);
  // @@protoc_insertion_point(field_set:CPlayer_NewSteamAnnouncementState_Notification.announcement_gid)
}

// -------------------------------------------------------------------

// CPlayer_CommunityPreferencesChanged_Notification

// optional .CPlayer_CommunityPreferences preferences = 1;
inline bool CPlayer_CommunityPreferencesChanged_Notification::_internal_has_preferences() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || preferences_ != nullptr);
  return value;
}
inline bool CPlayer_CommunityPreferencesChanged_Notification::has_preferences() const {
  return _internal_has_preferences();
}
inline void CPlayer_CommunityPreferencesChanged_Notification::clear_preferences() {
  if (preferences_ != nullptr) preferences_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CPlayer_CommunityPreferences& CPlayer_CommunityPreferencesChanged_Notification::_internal_preferences() const {
  const ::CPlayer_CommunityPreferences* p = preferences_;
  return p != nullptr ? *p : reinterpret_cast<const ::CPlayer_CommunityPreferences&>(
      ::_CPlayer_CommunityPreferences_default_instance_);
}
inline const ::CPlayer_CommunityPreferences& CPlayer_CommunityPreferencesChanged_Notification::preferences() const {
  // @@protoc_insertion_point(field_get:CPlayer_CommunityPreferencesChanged_Notification.preferences)
  return _internal_preferences();
}
inline void CPlayer_CommunityPreferencesChanged_Notification::unsafe_arena_set_allocated_preferences(
    ::CPlayer_CommunityPreferences* preferences) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(preferences_);
  }
  preferences_ = preferences;
  if (preferences) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CPlayer_CommunityPreferencesChanged_Notification.preferences)
}
inline ::CPlayer_CommunityPreferences* CPlayer_CommunityPreferencesChanged_Notification::release_preferences() {
  _has_bits_[0] &= ~0x00000001u;
  ::CPlayer_CommunityPreferences* temp = preferences_;
  preferences_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CPlayer_CommunityPreferences* CPlayer_CommunityPreferencesChanged_Notification::unsafe_arena_release_preferences() {
  // @@protoc_insertion_point(field_release:CPlayer_CommunityPreferencesChanged_Notification.preferences)
  _has_bits_[0] &= ~0x00000001u;
  ::CPlayer_CommunityPreferences* temp = preferences_;
  preferences_ = nullptr;
  return temp;
}
inline ::CPlayer_CommunityPreferences* CPlayer_CommunityPreferencesChanged_Notification::_internal_mutable_preferences() {
  _has_bits_[0] |= 0x00000001u;
  if (preferences_ == nullptr) {
    auto* p = CreateMaybeMessage<::CPlayer_CommunityPreferences>(GetArenaForAllocation());
    preferences_ = p;
  }
  return preferences_;
}
inline ::CPlayer_CommunityPreferences* CPlayer_CommunityPreferencesChanged_Notification::mutable_preferences() {
  ::CPlayer_CommunityPreferences* _msg = _internal_mutable_preferences();
  // @@protoc_insertion_point(field_mutable:CPlayer_CommunityPreferencesChanged_Notification.preferences)
  return _msg;
}
inline void CPlayer_CommunityPreferencesChanged_Notification::set_allocated_preferences(::CPlayer_CommunityPreferences* preferences) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete preferences_;
  }
  if (preferences) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CPlayer_CommunityPreferences>::GetOwningArena(preferences);
    if (message_arena != submessage_arena) {
      preferences = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, preferences, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  preferences_ = preferences;
  // @@protoc_insertion_point(field_set_allocated:CPlayer_CommunityPreferencesChanged_Notification.preferences)
}

// optional .UserContentDescriptorPreferences content_descriptor_preferences = 2;
inline bool CPlayer_CommunityPreferencesChanged_Notification::_internal_has_content_descriptor_preferences() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || content_descriptor_preferences_ != nullptr);
  return value;
}
inline bool CPlayer_CommunityPreferencesChanged_Notification::has_content_descriptor_preferences() const {
  return _internal_has_content_descriptor_preferences();
}
inline const ::UserContentDescriptorPreferences& CPlayer_CommunityPreferencesChanged_Notification::_internal_content_descriptor_preferences() const {
  const ::UserContentDescriptorPreferences* p = content_descriptor_preferences_;
  return p != nullptr ? *p : reinterpret_cast<const ::UserContentDescriptorPreferences&>(
      ::_UserContentDescriptorPreferences_default_instance_);
}
inline const ::UserContentDescriptorPreferences& CPlayer_CommunityPreferencesChanged_Notification::content_descriptor_preferences() const {
  // @@protoc_insertion_point(field_get:CPlayer_CommunityPreferencesChanged_Notification.content_descriptor_preferences)
  return _internal_content_descriptor_preferences();
}
inline void CPlayer_CommunityPreferencesChanged_Notification::unsafe_arena_set_allocated_content_descriptor_preferences(
    ::UserContentDescriptorPreferences* content_descriptor_preferences) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(content_descriptor_preferences_);
  }
  content_descriptor_preferences_ = content_descriptor_preferences;
  if (content_descriptor_preferences) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CPlayer_CommunityPreferencesChanged_Notification.content_descriptor_preferences)
}
inline ::UserContentDescriptorPreferences* CPlayer_CommunityPreferencesChanged_Notification::release_content_descriptor_preferences() {
  _has_bits_[0] &= ~0x00000002u;
  ::UserContentDescriptorPreferences* temp = content_descriptor_preferences_;
  content_descriptor_preferences_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::UserContentDescriptorPreferences* CPlayer_CommunityPreferencesChanged_Notification::unsafe_arena_release_content_descriptor_preferences() {
  // @@protoc_insertion_point(field_release:CPlayer_CommunityPreferencesChanged_Notification.content_descriptor_preferences)
  _has_bits_[0] &= ~0x00000002u;
  ::UserContentDescriptorPreferences* temp = content_descriptor_preferences_;
  content_descriptor_preferences_ = nullptr;
  return temp;
}
inline ::UserContentDescriptorPreferences* CPlayer_CommunityPreferencesChanged_Notification::_internal_mutable_content_descriptor_preferences() {
  _has_bits_[0] |= 0x00000002u;
  if (content_descriptor_preferences_ == nullptr) {
    auto* p = CreateMaybeMessage<::UserContentDescriptorPreferences>(GetArenaForAllocation());
    content_descriptor_preferences_ = p;
  }
  return content_descriptor_preferences_;
}
inline ::UserContentDescriptorPreferences* CPlayer_CommunityPreferencesChanged_Notification::mutable_content_descriptor_preferences() {
  ::UserContentDescriptorPreferences* _msg = _internal_mutable_content_descriptor_preferences();
  // @@protoc_insertion_point(field_mutable:CPlayer_CommunityPreferencesChanged_Notification.content_descriptor_preferences)
  return _msg;
}
inline void CPlayer_CommunityPreferencesChanged_Notification::set_allocated_content_descriptor_preferences(::UserContentDescriptorPreferences* content_descriptor_preferences) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(content_descriptor_preferences_);
  }
  if (content_descriptor_preferences) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(content_descriptor_preferences));
    if (message_arena != submessage_arena) {
      content_descriptor_preferences = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, content_descriptor_preferences, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  content_descriptor_preferences_ = content_descriptor_preferences;
  // @@protoc_insertion_point(field_set_allocated:CPlayer_CommunityPreferencesChanged_Notification.content_descriptor_preferences)
}

// -------------------------------------------------------------------

// CPlayer_TextFilterWordsChanged_Notification

// optional .CPlayer_TextFilterWords words = 1;
inline bool CPlayer_TextFilterWordsChanged_Notification::_internal_has_words() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || words_ != nullptr);
  return value;
}
inline bool CPlayer_TextFilterWordsChanged_Notification::has_words() const {
  return _internal_has_words();
}
inline void CPlayer_TextFilterWordsChanged_Notification::clear_words() {
  if (words_ != nullptr) words_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CPlayer_TextFilterWords& CPlayer_TextFilterWordsChanged_Notification::_internal_words() const {
  const ::CPlayer_TextFilterWords* p = words_;
  return p != nullptr ? *p : reinterpret_cast<const ::CPlayer_TextFilterWords&>(
      ::_CPlayer_TextFilterWords_default_instance_);
}
inline const ::CPlayer_TextFilterWords& CPlayer_TextFilterWordsChanged_Notification::words() const {
  // @@protoc_insertion_point(field_get:CPlayer_TextFilterWordsChanged_Notification.words)
  return _internal_words();
}
inline void CPlayer_TextFilterWordsChanged_Notification::unsafe_arena_set_allocated_words(
    ::CPlayer_TextFilterWords* words) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(words_);
  }
  words_ = words;
  if (words) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CPlayer_TextFilterWordsChanged_Notification.words)
}
inline ::CPlayer_TextFilterWords* CPlayer_TextFilterWordsChanged_Notification::release_words() {
  _has_bits_[0] &= ~0x00000001u;
  ::CPlayer_TextFilterWords* temp = words_;
  words_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CPlayer_TextFilterWords* CPlayer_TextFilterWordsChanged_Notification::unsafe_arena_release_words() {
  // @@protoc_insertion_point(field_release:CPlayer_TextFilterWordsChanged_Notification.words)
  _has_bits_[0] &= ~0x00000001u;
  ::CPlayer_TextFilterWords* temp = words_;
  words_ = nullptr;
  return temp;
}
inline ::CPlayer_TextFilterWords* CPlayer_TextFilterWordsChanged_Notification::_internal_mutable_words() {
  _has_bits_[0] |= 0x00000001u;
  if (words_ == nullptr) {
    auto* p = CreateMaybeMessage<::CPlayer_TextFilterWords>(GetArenaForAllocation());
    words_ = p;
  }
  return words_;
}
inline ::CPlayer_TextFilterWords* CPlayer_TextFilterWordsChanged_Notification::mutable_words() {
  ::CPlayer_TextFilterWords* _msg = _internal_mutable_words();
  // @@protoc_insertion_point(field_mutable:CPlayer_TextFilterWordsChanged_Notification.words)
  return _msg;
}
inline void CPlayer_TextFilterWordsChanged_Notification::set_allocated_words(::CPlayer_TextFilterWords* words) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete words_;
  }
  if (words) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CPlayer_TextFilterWords>::GetOwningArena(words);
    if (message_arena != submessage_arena) {
      words = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, words, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  words_ = words;
  // @@protoc_insertion_point(field_set_allocated:CPlayer_TextFilterWordsChanged_Notification.words)
}

// -------------------------------------------------------------------

// CPlayer_PerFriendPreferencesChanged_Notification

// optional fixed32 accountid = 1;
inline bool CPlayer_PerFriendPreferencesChanged_Notification::_internal_has_accountid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPlayer_PerFriendPreferencesChanged_Notification::has_accountid() const {
  return _internal_has_accountid();
}
inline void CPlayer_PerFriendPreferencesChanged_Notification::clear_accountid() {
  accountid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CPlayer_PerFriendPreferencesChanged_Notification::_internal_accountid() const {
  return accountid_;
}
inline uint32_t CPlayer_PerFriendPreferencesChanged_Notification::accountid() const {
  // @@protoc_insertion_point(field_get:CPlayer_PerFriendPreferencesChanged_Notification.accountid)
  return _internal_accountid();
}
inline void CPlayer_PerFriendPreferencesChanged_Notification::_internal_set_accountid(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  accountid_ = value;
}
inline void CPlayer_PerFriendPreferencesChanged_Notification::set_accountid(uint32_t value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:CPlayer_PerFriendPreferencesChanged_Notification.accountid)
}

// optional .PerFriendPreferences preferences = 2;
inline bool CPlayer_PerFriendPreferencesChanged_Notification::_internal_has_preferences() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || preferences_ != nullptr);
  return value;
}
inline bool CPlayer_PerFriendPreferencesChanged_Notification::has_preferences() const {
  return _internal_has_preferences();
}
inline void CPlayer_PerFriendPreferencesChanged_Notification::clear_preferences() {
  if (preferences_ != nullptr) preferences_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::PerFriendPreferences& CPlayer_PerFriendPreferencesChanged_Notification::_internal_preferences() const {
  const ::PerFriendPreferences* p = preferences_;
  return p != nullptr ? *p : reinterpret_cast<const ::PerFriendPreferences&>(
      ::_PerFriendPreferences_default_instance_);
}
inline const ::PerFriendPreferences& CPlayer_PerFriendPreferencesChanged_Notification::preferences() const {
  // @@protoc_insertion_point(field_get:CPlayer_PerFriendPreferencesChanged_Notification.preferences)
  return _internal_preferences();
}
inline void CPlayer_PerFriendPreferencesChanged_Notification::unsafe_arena_set_allocated_preferences(
    ::PerFriendPreferences* preferences) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(preferences_);
  }
  preferences_ = preferences;
  if (preferences) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CPlayer_PerFriendPreferencesChanged_Notification.preferences)
}
inline ::PerFriendPreferences* CPlayer_PerFriendPreferencesChanged_Notification::release_preferences() {
  _has_bits_[0] &= ~0x00000001u;
  ::PerFriendPreferences* temp = preferences_;
  preferences_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PerFriendPreferences* CPlayer_PerFriendPreferencesChanged_Notification::unsafe_arena_release_preferences() {
  // @@protoc_insertion_point(field_release:CPlayer_PerFriendPreferencesChanged_Notification.preferences)
  _has_bits_[0] &= ~0x00000001u;
  ::PerFriendPreferences* temp = preferences_;
  preferences_ = nullptr;
  return temp;
}
inline ::PerFriendPreferences* CPlayer_PerFriendPreferencesChanged_Notification::_internal_mutable_preferences() {
  _has_bits_[0] |= 0x00000001u;
  if (preferences_ == nullptr) {
    auto* p = CreateMaybeMessage<::PerFriendPreferences>(GetArenaForAllocation());
    preferences_ = p;
  }
  return preferences_;
}
inline ::PerFriendPreferences* CPlayer_PerFriendPreferencesChanged_Notification::mutable_preferences() {
  ::PerFriendPreferences* _msg = _internal_mutable_preferences();
  // @@protoc_insertion_point(field_mutable:CPlayer_PerFriendPreferencesChanged_Notification.preferences)
  return _msg;
}
inline void CPlayer_PerFriendPreferencesChanged_Notification::set_allocated_preferences(::PerFriendPreferences* preferences) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete preferences_;
  }
  if (preferences) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::PerFriendPreferences>::GetOwningArena(preferences);
    if (message_arena != submessage_arena) {
      preferences = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, preferences, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  preferences_ = preferences;
  // @@protoc_insertion_point(field_set_allocated:CPlayer_PerFriendPreferencesChanged_Notification.preferences)
}

// -------------------------------------------------------------------

// CPlayer_PrivacySettingsChanged_Notification

// optional .CPrivacySettings privacy_settings = 1;
inline bool CPlayer_PrivacySettingsChanged_Notification::_internal_has_privacy_settings() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || privacy_settings_ != nullptr);
  return value;
}
inline bool CPlayer_PrivacySettingsChanged_Notification::has_privacy_settings() const {
  return _internal_has_privacy_settings();
}
inline void CPlayer_PrivacySettingsChanged_Notification::clear_privacy_settings() {
  if (privacy_settings_ != nullptr) privacy_settings_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CPrivacySettings& CPlayer_PrivacySettingsChanged_Notification::_internal_privacy_settings() const {
  const ::CPrivacySettings* p = privacy_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::CPrivacySettings&>(
      ::_CPrivacySettings_default_instance_);
}
inline const ::CPrivacySettings& CPlayer_PrivacySettingsChanged_Notification::privacy_settings() const {
  // @@protoc_insertion_point(field_get:CPlayer_PrivacySettingsChanged_Notification.privacy_settings)
  return _internal_privacy_settings();
}
inline void CPlayer_PrivacySettingsChanged_Notification::unsafe_arena_set_allocated_privacy_settings(
    ::CPrivacySettings* privacy_settings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(privacy_settings_);
  }
  privacy_settings_ = privacy_settings;
  if (privacy_settings) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CPlayer_PrivacySettingsChanged_Notification.privacy_settings)
}
inline ::CPrivacySettings* CPlayer_PrivacySettingsChanged_Notification::release_privacy_settings() {
  _has_bits_[0] &= ~0x00000001u;
  ::CPrivacySettings* temp = privacy_settings_;
  privacy_settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CPrivacySettings* CPlayer_PrivacySettingsChanged_Notification::unsafe_arena_release_privacy_settings() {
  // @@protoc_insertion_point(field_release:CPlayer_PrivacySettingsChanged_Notification.privacy_settings)
  _has_bits_[0] &= ~0x00000001u;
  ::CPrivacySettings* temp = privacy_settings_;
  privacy_settings_ = nullptr;
  return temp;
}
inline ::CPrivacySettings* CPlayer_PrivacySettingsChanged_Notification::_internal_mutable_privacy_settings() {
  _has_bits_[0] |= 0x00000001u;
  if (privacy_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::CPrivacySettings>(GetArenaForAllocation());
    privacy_settings_ = p;
  }
  return privacy_settings_;
}
inline ::CPrivacySettings* CPlayer_PrivacySettingsChanged_Notification::mutable_privacy_settings() {
  ::CPrivacySettings* _msg = _internal_mutable_privacy_settings();
  // @@protoc_insertion_point(field_mutable:CPlayer_PrivacySettingsChanged_Notification.privacy_settings)
  return _msg;
}
inline void CPlayer_PrivacySettingsChanged_Notification::set_allocated_privacy_settings(::CPrivacySettings* privacy_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete privacy_settings_;
  }
  if (privacy_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CPrivacySettings>::GetOwningArena(privacy_settings);
    if (message_arena != submessage_arena) {
      privacy_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, privacy_settings, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  privacy_settings_ = privacy_settings;
  // @@protoc_insertion_point(field_set_allocated:CPlayer_PrivacySettingsChanged_Notification.privacy_settings)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::EProfileCustomizationStyle> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EProfileCustomizationStyle>() {
  return ::EProfileCustomizationStyle_descriptor();
}
template <> struct is_proto_enum< ::EAgreementType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EAgreementType>() {
  return ::EAgreementType_descriptor();
}
template <> struct is_proto_enum< ::ENotificationSetting> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ENotificationSetting>() {
  return ::ENotificationSetting_descriptor();
}
template <> struct is_proto_enum< ::ETextFilterSetting> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ETextFilterSetting>() {
  return ::ETextFilterSetting_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_steammessages_5fplayer_2esteamclient_2eproto
