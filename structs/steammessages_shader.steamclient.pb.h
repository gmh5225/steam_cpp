// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_shader.steamclient.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_steammessages_5fshader_2esteamclient_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_steammessages_5fshader_2esteamclient_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "steammessages_base.pb.h"
#include "steammessages_unified_base.steamclient.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_5fshader_2esteamclient_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_5fshader_2esteamclient_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fshader_2esteamclient_2eproto;
class CShader_GetBucketManifest_Request;
struct CShader_GetBucketManifest_RequestDefaultTypeInternal;
extern CShader_GetBucketManifest_RequestDefaultTypeInternal _CShader_GetBucketManifest_Request_default_instance_;
class CShader_GetBucketManifest_Response;
struct CShader_GetBucketManifest_ResponseDefaultTypeInternal;
extern CShader_GetBucketManifest_ResponseDefaultTypeInternal _CShader_GetBucketManifest_Response_default_instance_;
class CShader_GetStaleBucket_Request;
struct CShader_GetStaleBucket_RequestDefaultTypeInternal;
extern CShader_GetStaleBucket_RequestDefaultTypeInternal _CShader_GetStaleBucket_Request_default_instance_;
class CShader_GetStaleBucket_Response;
struct CShader_GetStaleBucket_ResponseDefaultTypeInternal;
extern CShader_GetStaleBucket_ResponseDefaultTypeInternal _CShader_GetStaleBucket_Response_default_instance_;
class CShader_RegisterShader_Request;
struct CShader_RegisterShader_RequestDefaultTypeInternal;
extern CShader_RegisterShader_RequestDefaultTypeInternal _CShader_RegisterShader_Request_default_instance_;
class CShader_RegisterShader_Request_Shader;
struct CShader_RegisterShader_Request_ShaderDefaultTypeInternal;
extern CShader_RegisterShader_Request_ShaderDefaultTypeInternal _CShader_RegisterShader_Request_Shader_default_instance_;
class CShader_RegisterShader_Response;
struct CShader_RegisterShader_ResponseDefaultTypeInternal;
extern CShader_RegisterShader_ResponseDefaultTypeInternal _CShader_RegisterShader_Response_default_instance_;
class CShader_ReportExternalBuild_Request;
struct CShader_ReportExternalBuild_RequestDefaultTypeInternal;
extern CShader_ReportExternalBuild_RequestDefaultTypeInternal _CShader_ReportExternalBuild_Request_default_instance_;
class CShader_ReportExternalBuild_Response;
struct CShader_ReportExternalBuild_ResponseDefaultTypeInternal;
extern CShader_ReportExternalBuild_ResponseDefaultTypeInternal _CShader_ReportExternalBuild_Response_default_instance_;
class CShader_SendShader_Request;
struct CShader_SendShader_RequestDefaultTypeInternal;
extern CShader_SendShader_RequestDefaultTypeInternal _CShader_SendShader_Request_default_instance_;
class CShader_SendShader_Request_ShaderCode;
struct CShader_SendShader_Request_ShaderCodeDefaultTypeInternal;
extern CShader_SendShader_Request_ShaderCodeDefaultTypeInternal _CShader_SendShader_Request_ShaderCode_default_instance_;
class CShader_SendShader_Response;
struct CShader_SendShader_ResponseDefaultTypeInternal;
extern CShader_SendShader_ResponseDefaultTypeInternal _CShader_SendShader_Response_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CShader_GetBucketManifest_Request* Arena::CreateMaybeMessage<::CShader_GetBucketManifest_Request>(Arena*);
template<> ::CShader_GetBucketManifest_Response* Arena::CreateMaybeMessage<::CShader_GetBucketManifest_Response>(Arena*);
template<> ::CShader_GetStaleBucket_Request* Arena::CreateMaybeMessage<::CShader_GetStaleBucket_Request>(Arena*);
template<> ::CShader_GetStaleBucket_Response* Arena::CreateMaybeMessage<::CShader_GetStaleBucket_Response>(Arena*);
template<> ::CShader_RegisterShader_Request* Arena::CreateMaybeMessage<::CShader_RegisterShader_Request>(Arena*);
template<> ::CShader_RegisterShader_Request_Shader* Arena::CreateMaybeMessage<::CShader_RegisterShader_Request_Shader>(Arena*);
template<> ::CShader_RegisterShader_Response* Arena::CreateMaybeMessage<::CShader_RegisterShader_Response>(Arena*);
template<> ::CShader_ReportExternalBuild_Request* Arena::CreateMaybeMessage<::CShader_ReportExternalBuild_Request>(Arena*);
template<> ::CShader_ReportExternalBuild_Response* Arena::CreateMaybeMessage<::CShader_ReportExternalBuild_Response>(Arena*);
template<> ::CShader_SendShader_Request* Arena::CreateMaybeMessage<::CShader_SendShader_Request>(Arena*);
template<> ::CShader_SendShader_Request_ShaderCode* Arena::CreateMaybeMessage<::CShader_SendShader_Request_ShaderCode>(Arena*);
template<> ::CShader_SendShader_Response* Arena::CreateMaybeMessage<::CShader_SendShader_Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class CShader_RegisterShader_Request_Shader final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CShader_RegisterShader_Request.Shader) */ {
 public:
  inline CShader_RegisterShader_Request_Shader() : CShader_RegisterShader_Request_Shader(nullptr) {}
  ~CShader_RegisterShader_Request_Shader() override;
  explicit constexpr CShader_RegisterShader_Request_Shader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CShader_RegisterShader_Request_Shader(const CShader_RegisterShader_Request_Shader& from);
  CShader_RegisterShader_Request_Shader(CShader_RegisterShader_Request_Shader&& from) noexcept
    : CShader_RegisterShader_Request_Shader() {
    *this = ::std::move(from);
  }

  inline CShader_RegisterShader_Request_Shader& operator=(const CShader_RegisterShader_Request_Shader& from) {
    CopyFrom(from);
    return *this;
  }
  inline CShader_RegisterShader_Request_Shader& operator=(CShader_RegisterShader_Request_Shader&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CShader_RegisterShader_Request_Shader& default_instance() {
    return *internal_default_instance();
  }
  static inline const CShader_RegisterShader_Request_Shader* internal_default_instance() {
    return reinterpret_cast<const CShader_RegisterShader_Request_Shader*>(
               &_CShader_RegisterShader_Request_Shader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CShader_RegisterShader_Request_Shader& a, CShader_RegisterShader_Request_Shader& b) {
    a.Swap(&b);
  }
  inline void Swap(CShader_RegisterShader_Request_Shader* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CShader_RegisterShader_Request_Shader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CShader_RegisterShader_Request_Shader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CShader_RegisterShader_Request_Shader>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CShader_RegisterShader_Request_Shader& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CShader_RegisterShader_Request_Shader& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CShader_RegisterShader_Request_Shader* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CShader_RegisterShader_Request.Shader";
  }
  protected:
  explicit CShader_RegisterShader_Request_Shader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCacheKeyShaFieldNumber = 1,
    kShaderCodeShaFieldNumber = 2,
  };
  // optional bytes cache_key_sha = 1;
  bool has_cache_key_sha() const;
  private:
  bool _internal_has_cache_key_sha() const;
  public:
  void clear_cache_key_sha();
  const std::string& cache_key_sha() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cache_key_sha(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cache_key_sha();
  PROTOBUF_NODISCARD std::string* release_cache_key_sha();
  void set_allocated_cache_key_sha(std::string* cache_key_sha);
  private:
  const std::string& _internal_cache_key_sha() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cache_key_sha(const std::string& value);
  std::string* _internal_mutable_cache_key_sha();
  public:

  // optional bytes shader_code_sha = 2;
  bool has_shader_code_sha() const;
  private:
  bool _internal_has_shader_code_sha() const;
  public:
  void clear_shader_code_sha();
  const std::string& shader_code_sha() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_shader_code_sha(ArgT0&& arg0, ArgT... args);
  std::string* mutable_shader_code_sha();
  PROTOBUF_NODISCARD std::string* release_shader_code_sha();
  void set_allocated_shader_code_sha(std::string* shader_code_sha);
  private:
  const std::string& _internal_shader_code_sha() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_shader_code_sha(const std::string& value);
  std::string* _internal_mutable_shader_code_sha();
  public:

  // @@protoc_insertion_point(class_scope:CShader_RegisterShader_Request.Shader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cache_key_sha_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shader_code_sha_;
  friend struct ::TableStruct_steammessages_5fshader_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CShader_RegisterShader_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CShader_RegisterShader_Request) */ {
 public:
  inline CShader_RegisterShader_Request() : CShader_RegisterShader_Request(nullptr) {}
  ~CShader_RegisterShader_Request() override;
  explicit constexpr CShader_RegisterShader_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CShader_RegisterShader_Request(const CShader_RegisterShader_Request& from);
  CShader_RegisterShader_Request(CShader_RegisterShader_Request&& from) noexcept
    : CShader_RegisterShader_Request() {
    *this = ::std::move(from);
  }

  inline CShader_RegisterShader_Request& operator=(const CShader_RegisterShader_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CShader_RegisterShader_Request& operator=(CShader_RegisterShader_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CShader_RegisterShader_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CShader_RegisterShader_Request* internal_default_instance() {
    return reinterpret_cast<const CShader_RegisterShader_Request*>(
               &_CShader_RegisterShader_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CShader_RegisterShader_Request& a, CShader_RegisterShader_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CShader_RegisterShader_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CShader_RegisterShader_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CShader_RegisterShader_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CShader_RegisterShader_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CShader_RegisterShader_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CShader_RegisterShader_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CShader_RegisterShader_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CShader_RegisterShader_Request";
  }
  protected:
  explicit CShader_RegisterShader_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CShader_RegisterShader_Request_Shader Shader;

  // accessors -------------------------------------------------------

  enum : int {
    kShadersFieldNumber = 4,
    kGpuDescFieldNumber = 2,
    kDriverDescFieldNumber = 3,
    kAppidFieldNumber = 1,
  };
  // repeated .CShader_RegisterShader_Request.Shader shaders = 4;
  int shaders_size() const;
  private:
  int _internal_shaders_size() const;
  public:
  void clear_shaders();
  ::CShader_RegisterShader_Request_Shader* mutable_shaders(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CShader_RegisterShader_Request_Shader >*
      mutable_shaders();
  private:
  const ::CShader_RegisterShader_Request_Shader& _internal_shaders(int index) const;
  ::CShader_RegisterShader_Request_Shader* _internal_add_shaders();
  public:
  const ::CShader_RegisterShader_Request_Shader& shaders(int index) const;
  ::CShader_RegisterShader_Request_Shader* add_shaders();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CShader_RegisterShader_Request_Shader >&
      shaders() const;

  // optional string gpu_desc = 2;
  bool has_gpu_desc() const;
  private:
  bool _internal_has_gpu_desc() const;
  public:
  void clear_gpu_desc();
  const std::string& gpu_desc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gpu_desc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gpu_desc();
  PROTOBUF_NODISCARD std::string* release_gpu_desc();
  void set_allocated_gpu_desc(std::string* gpu_desc);
  private:
  const std::string& _internal_gpu_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gpu_desc(const std::string& value);
  std::string* _internal_mutable_gpu_desc();
  public:

  // optional string driver_desc = 3;
  bool has_driver_desc() const;
  private:
  bool _internal_has_driver_desc() const;
  public:
  void clear_driver_desc();
  const std::string& driver_desc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_driver_desc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_driver_desc();
  PROTOBUF_NODISCARD std::string* release_driver_desc();
  void set_allocated_driver_desc(std::string* driver_desc);
  private:
  const std::string& _internal_driver_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_driver_desc(const std::string& value);
  std::string* _internal_mutable_driver_desc();
  public:

  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CShader_RegisterShader_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CShader_RegisterShader_Request_Shader > shaders_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gpu_desc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr driver_desc_;
  uint32_t appid_;
  friend struct ::TableStruct_steammessages_5fshader_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CShader_RegisterShader_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CShader_RegisterShader_Response) */ {
 public:
  inline CShader_RegisterShader_Response() : CShader_RegisterShader_Response(nullptr) {}
  ~CShader_RegisterShader_Response() override;
  explicit constexpr CShader_RegisterShader_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CShader_RegisterShader_Response(const CShader_RegisterShader_Response& from);
  CShader_RegisterShader_Response(CShader_RegisterShader_Response&& from) noexcept
    : CShader_RegisterShader_Response() {
    *this = ::std::move(from);
  }

  inline CShader_RegisterShader_Response& operator=(const CShader_RegisterShader_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CShader_RegisterShader_Response& operator=(CShader_RegisterShader_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CShader_RegisterShader_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CShader_RegisterShader_Response* internal_default_instance() {
    return reinterpret_cast<const CShader_RegisterShader_Response*>(
               &_CShader_RegisterShader_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CShader_RegisterShader_Response& a, CShader_RegisterShader_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CShader_RegisterShader_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CShader_RegisterShader_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CShader_RegisterShader_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CShader_RegisterShader_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CShader_RegisterShader_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CShader_RegisterShader_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CShader_RegisterShader_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CShader_RegisterShader_Response";
  }
  protected:
  explicit CShader_RegisterShader_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestedCodeidsFieldNumber = 1,
  };
  // repeated uint32 requested_codeids = 1;
  int requested_codeids_size() const;
  private:
  int _internal_requested_codeids_size() const;
  public:
  void clear_requested_codeids();
  private:
  uint32_t _internal_requested_codeids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_requested_codeids() const;
  void _internal_add_requested_codeids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_requested_codeids();
  public:
  uint32_t requested_codeids(int index) const;
  void set_requested_codeids(int index, uint32_t value);
  void add_requested_codeids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      requested_codeids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_requested_codeids();

  // @@protoc_insertion_point(class_scope:CShader_RegisterShader_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > requested_codeids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fshader_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CShader_SendShader_Request_ShaderCode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CShader_SendShader_Request.ShaderCode) */ {
 public:
  inline CShader_SendShader_Request_ShaderCode() : CShader_SendShader_Request_ShaderCode(nullptr) {}
  ~CShader_SendShader_Request_ShaderCode() override;
  explicit constexpr CShader_SendShader_Request_ShaderCode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CShader_SendShader_Request_ShaderCode(const CShader_SendShader_Request_ShaderCode& from);
  CShader_SendShader_Request_ShaderCode(CShader_SendShader_Request_ShaderCode&& from) noexcept
    : CShader_SendShader_Request_ShaderCode() {
    *this = ::std::move(from);
  }

  inline CShader_SendShader_Request_ShaderCode& operator=(const CShader_SendShader_Request_ShaderCode& from) {
    CopyFrom(from);
    return *this;
  }
  inline CShader_SendShader_Request_ShaderCode& operator=(CShader_SendShader_Request_ShaderCode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CShader_SendShader_Request_ShaderCode& default_instance() {
    return *internal_default_instance();
  }
  static inline const CShader_SendShader_Request_ShaderCode* internal_default_instance() {
    return reinterpret_cast<const CShader_SendShader_Request_ShaderCode*>(
               &_CShader_SendShader_Request_ShaderCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CShader_SendShader_Request_ShaderCode& a, CShader_SendShader_Request_ShaderCode& b) {
    a.Swap(&b);
  }
  inline void Swap(CShader_SendShader_Request_ShaderCode* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CShader_SendShader_Request_ShaderCode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CShader_SendShader_Request_ShaderCode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CShader_SendShader_Request_ShaderCode>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CShader_SendShader_Request_ShaderCode& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CShader_SendShader_Request_ShaderCode& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CShader_SendShader_Request_ShaderCode* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CShader_SendShader_Request.ShaderCode";
  }
  protected:
  explicit CShader_SendShader_Request_ShaderCode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShaderCodeShaFieldNumber = 1,
    kShaderCodeFieldNumber = 2,
  };
  // optional bytes shader_code_sha = 1;
  bool has_shader_code_sha() const;
  private:
  bool _internal_has_shader_code_sha() const;
  public:
  void clear_shader_code_sha();
  const std::string& shader_code_sha() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_shader_code_sha(ArgT0&& arg0, ArgT... args);
  std::string* mutable_shader_code_sha();
  PROTOBUF_NODISCARD std::string* release_shader_code_sha();
  void set_allocated_shader_code_sha(std::string* shader_code_sha);
  private:
  const std::string& _internal_shader_code_sha() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_shader_code_sha(const std::string& value);
  std::string* _internal_mutable_shader_code_sha();
  public:

  // optional bytes shader_code = 2;
  bool has_shader_code() const;
  private:
  bool _internal_has_shader_code() const;
  public:
  void clear_shader_code();
  const std::string& shader_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_shader_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_shader_code();
  PROTOBUF_NODISCARD std::string* release_shader_code();
  void set_allocated_shader_code(std::string* shader_code);
  private:
  const std::string& _internal_shader_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_shader_code(const std::string& value);
  std::string* _internal_mutable_shader_code();
  public:

  // @@protoc_insertion_point(class_scope:CShader_SendShader_Request.ShaderCode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shader_code_sha_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shader_code_;
  friend struct ::TableStruct_steammessages_5fshader_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CShader_SendShader_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CShader_SendShader_Request) */ {
 public:
  inline CShader_SendShader_Request() : CShader_SendShader_Request(nullptr) {}
  ~CShader_SendShader_Request() override;
  explicit constexpr CShader_SendShader_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CShader_SendShader_Request(const CShader_SendShader_Request& from);
  CShader_SendShader_Request(CShader_SendShader_Request&& from) noexcept
    : CShader_SendShader_Request() {
    *this = ::std::move(from);
  }

  inline CShader_SendShader_Request& operator=(const CShader_SendShader_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CShader_SendShader_Request& operator=(CShader_SendShader_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CShader_SendShader_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CShader_SendShader_Request* internal_default_instance() {
    return reinterpret_cast<const CShader_SendShader_Request*>(
               &_CShader_SendShader_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CShader_SendShader_Request& a, CShader_SendShader_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CShader_SendShader_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CShader_SendShader_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CShader_SendShader_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CShader_SendShader_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CShader_SendShader_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CShader_SendShader_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CShader_SendShader_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CShader_SendShader_Request";
  }
  protected:
  explicit CShader_SendShader_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CShader_SendShader_Request_ShaderCode ShaderCode;

  // accessors -------------------------------------------------------

  enum : int {
    kShadersFieldNumber = 2,
    kAppidFieldNumber = 1,
  };
  // repeated .CShader_SendShader_Request.ShaderCode shaders = 2;
  int shaders_size() const;
  private:
  int _internal_shaders_size() const;
  public:
  void clear_shaders();
  ::CShader_SendShader_Request_ShaderCode* mutable_shaders(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CShader_SendShader_Request_ShaderCode >*
      mutable_shaders();
  private:
  const ::CShader_SendShader_Request_ShaderCode& _internal_shaders(int index) const;
  ::CShader_SendShader_Request_ShaderCode* _internal_add_shaders();
  public:
  const ::CShader_SendShader_Request_ShaderCode& shaders(int index) const;
  ::CShader_SendShader_Request_ShaderCode* add_shaders();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CShader_SendShader_Request_ShaderCode >&
      shaders() const;

  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CShader_SendShader_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CShader_SendShader_Request_ShaderCode > shaders_;
  uint32_t appid_;
  friend struct ::TableStruct_steammessages_5fshader_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CShader_SendShader_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CShader_SendShader_Response) */ {
 public:
  inline CShader_SendShader_Response() : CShader_SendShader_Response(nullptr) {}
  explicit constexpr CShader_SendShader_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CShader_SendShader_Response(const CShader_SendShader_Response& from);
  CShader_SendShader_Response(CShader_SendShader_Response&& from) noexcept
    : CShader_SendShader_Response() {
    *this = ::std::move(from);
  }

  inline CShader_SendShader_Response& operator=(const CShader_SendShader_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CShader_SendShader_Response& operator=(CShader_SendShader_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CShader_SendShader_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CShader_SendShader_Response* internal_default_instance() {
    return reinterpret_cast<const CShader_SendShader_Response*>(
               &_CShader_SendShader_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CShader_SendShader_Response& a, CShader_SendShader_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CShader_SendShader_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CShader_SendShader_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CShader_SendShader_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CShader_SendShader_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CShader_SendShader_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CShader_SendShader_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CShader_SendShader_Response";
  }
  protected:
  explicit CShader_SendShader_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CShader_SendShader_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fshader_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CShader_GetBucketManifest_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CShader_GetBucketManifest_Request) */ {
 public:
  inline CShader_GetBucketManifest_Request() : CShader_GetBucketManifest_Request(nullptr) {}
  ~CShader_GetBucketManifest_Request() override;
  explicit constexpr CShader_GetBucketManifest_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CShader_GetBucketManifest_Request(const CShader_GetBucketManifest_Request& from);
  CShader_GetBucketManifest_Request(CShader_GetBucketManifest_Request&& from) noexcept
    : CShader_GetBucketManifest_Request() {
    *this = ::std::move(from);
  }

  inline CShader_GetBucketManifest_Request& operator=(const CShader_GetBucketManifest_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CShader_GetBucketManifest_Request& operator=(CShader_GetBucketManifest_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CShader_GetBucketManifest_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CShader_GetBucketManifest_Request* internal_default_instance() {
    return reinterpret_cast<const CShader_GetBucketManifest_Request*>(
               &_CShader_GetBucketManifest_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CShader_GetBucketManifest_Request& a, CShader_GetBucketManifest_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CShader_GetBucketManifest_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CShader_GetBucketManifest_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CShader_GetBucketManifest_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CShader_GetBucketManifest_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CShader_GetBucketManifest_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CShader_GetBucketManifest_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CShader_GetBucketManifest_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CShader_GetBucketManifest_Request";
  }
  protected:
  explicit CShader_GetBucketManifest_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGpuDescFieldNumber = 2,
    kDriverDescFieldNumber = 3,
    kAppidFieldNumber = 1,
  };
  // optional string gpu_desc = 2;
  bool has_gpu_desc() const;
  private:
  bool _internal_has_gpu_desc() const;
  public:
  void clear_gpu_desc();
  const std::string& gpu_desc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gpu_desc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gpu_desc();
  PROTOBUF_NODISCARD std::string* release_gpu_desc();
  void set_allocated_gpu_desc(std::string* gpu_desc);
  private:
  const std::string& _internal_gpu_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gpu_desc(const std::string& value);
  std::string* _internal_mutable_gpu_desc();
  public:

  // optional string driver_desc = 3;
  bool has_driver_desc() const;
  private:
  bool _internal_has_driver_desc() const;
  public:
  void clear_driver_desc();
  const std::string& driver_desc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_driver_desc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_driver_desc();
  PROTOBUF_NODISCARD std::string* release_driver_desc();
  void set_allocated_driver_desc(std::string* driver_desc);
  private:
  const std::string& _internal_driver_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_driver_desc(const std::string& value);
  std::string* _internal_mutable_driver_desc();
  public:

  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CShader_GetBucketManifest_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gpu_desc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr driver_desc_;
  uint32_t appid_;
  friend struct ::TableStruct_steammessages_5fshader_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CShader_GetBucketManifest_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CShader_GetBucketManifest_Response) */ {
 public:
  inline CShader_GetBucketManifest_Response() : CShader_GetBucketManifest_Response(nullptr) {}
  ~CShader_GetBucketManifest_Response() override;
  explicit constexpr CShader_GetBucketManifest_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CShader_GetBucketManifest_Response(const CShader_GetBucketManifest_Response& from);
  CShader_GetBucketManifest_Response(CShader_GetBucketManifest_Response&& from) noexcept
    : CShader_GetBucketManifest_Response() {
    *this = ::std::move(from);
  }

  inline CShader_GetBucketManifest_Response& operator=(const CShader_GetBucketManifest_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CShader_GetBucketManifest_Response& operator=(CShader_GetBucketManifest_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CShader_GetBucketManifest_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CShader_GetBucketManifest_Response* internal_default_instance() {
    return reinterpret_cast<const CShader_GetBucketManifest_Response*>(
               &_CShader_GetBucketManifest_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CShader_GetBucketManifest_Response& a, CShader_GetBucketManifest_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CShader_GetBucketManifest_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CShader_GetBucketManifest_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CShader_GetBucketManifest_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CShader_GetBucketManifest_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CShader_GetBucketManifest_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CShader_GetBucketManifest_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CShader_GetBucketManifest_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CShader_GetBucketManifest_Response";
  }
  protected:
  explicit CShader_GetBucketManifest_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kManifestidFieldNumber = 1,
    kDepotsizeFieldNumber = 2,
    kBucketidFieldNumber = 3,
  };
  // optional uint64 manifestid = 1;
  bool has_manifestid() const;
  private:
  bool _internal_has_manifestid() const;
  public:
  void clear_manifestid();
  uint64_t manifestid() const;
  void set_manifestid(uint64_t value);
  private:
  uint64_t _internal_manifestid() const;
  void _internal_set_manifestid(uint64_t value);
  public:

  // optional uint64 depotsize = 2;
  bool has_depotsize() const;
  private:
  bool _internal_has_depotsize() const;
  public:
  void clear_depotsize();
  uint64_t depotsize() const;
  void set_depotsize(uint64_t value);
  private:
  uint64_t _internal_depotsize() const;
  void _internal_set_depotsize(uint64_t value);
  public:

  // optional uint64 bucketid = 3;
  bool has_bucketid() const;
  private:
  bool _internal_has_bucketid() const;
  public:
  void clear_bucketid();
  uint64_t bucketid() const;
  void set_bucketid(uint64_t value);
  private:
  uint64_t _internal_bucketid() const;
  void _internal_set_bucketid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CShader_GetBucketManifest_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t manifestid_;
  uint64_t depotsize_;
  uint64_t bucketid_;
  friend struct ::TableStruct_steammessages_5fshader_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CShader_GetStaleBucket_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CShader_GetStaleBucket_Request) */ {
 public:
  inline CShader_GetStaleBucket_Request() : CShader_GetStaleBucket_Request(nullptr) {}
  ~CShader_GetStaleBucket_Request() override;
  explicit constexpr CShader_GetStaleBucket_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CShader_GetStaleBucket_Request(const CShader_GetStaleBucket_Request& from);
  CShader_GetStaleBucket_Request(CShader_GetStaleBucket_Request&& from) noexcept
    : CShader_GetStaleBucket_Request() {
    *this = ::std::move(from);
  }

  inline CShader_GetStaleBucket_Request& operator=(const CShader_GetStaleBucket_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CShader_GetStaleBucket_Request& operator=(CShader_GetStaleBucket_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CShader_GetStaleBucket_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CShader_GetStaleBucket_Request* internal_default_instance() {
    return reinterpret_cast<const CShader_GetStaleBucket_Request*>(
               &_CShader_GetStaleBucket_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CShader_GetStaleBucket_Request& a, CShader_GetStaleBucket_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CShader_GetStaleBucket_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CShader_GetStaleBucket_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CShader_GetStaleBucket_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CShader_GetStaleBucket_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CShader_GetStaleBucket_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CShader_GetStaleBucket_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CShader_GetStaleBucket_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CShader_GetStaleBucket_Request";
  }
  protected:
  explicit CShader_GetStaleBucket_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGpuDescFieldNumber = 1,
    kDriverDescFieldNumber = 2,
  };
  // optional string gpu_desc = 1;
  bool has_gpu_desc() const;
  private:
  bool _internal_has_gpu_desc() const;
  public:
  void clear_gpu_desc();
  const std::string& gpu_desc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gpu_desc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gpu_desc();
  PROTOBUF_NODISCARD std::string* release_gpu_desc();
  void set_allocated_gpu_desc(std::string* gpu_desc);
  private:
  const std::string& _internal_gpu_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gpu_desc(const std::string& value);
  std::string* _internal_mutable_gpu_desc();
  public:

  // optional string driver_desc = 2;
  bool has_driver_desc() const;
  private:
  bool _internal_has_driver_desc() const;
  public:
  void clear_driver_desc();
  const std::string& driver_desc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_driver_desc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_driver_desc();
  PROTOBUF_NODISCARD std::string* release_driver_desc();
  void set_allocated_driver_desc(std::string* driver_desc);
  private:
  const std::string& _internal_driver_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_driver_desc(const std::string& value);
  std::string* _internal_mutable_driver_desc();
  public:

  // @@protoc_insertion_point(class_scope:CShader_GetStaleBucket_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gpu_desc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr driver_desc_;
  friend struct ::TableStruct_steammessages_5fshader_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CShader_GetStaleBucket_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CShader_GetStaleBucket_Response) */ {
 public:
  inline CShader_GetStaleBucket_Response() : CShader_GetStaleBucket_Response(nullptr) {}
  ~CShader_GetStaleBucket_Response() override;
  explicit constexpr CShader_GetStaleBucket_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CShader_GetStaleBucket_Response(const CShader_GetStaleBucket_Response& from);
  CShader_GetStaleBucket_Response(CShader_GetStaleBucket_Response&& from) noexcept
    : CShader_GetStaleBucket_Response() {
    *this = ::std::move(from);
  }

  inline CShader_GetStaleBucket_Response& operator=(const CShader_GetStaleBucket_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CShader_GetStaleBucket_Response& operator=(CShader_GetStaleBucket_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CShader_GetStaleBucket_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CShader_GetStaleBucket_Response* internal_default_instance() {
    return reinterpret_cast<const CShader_GetStaleBucket_Response*>(
               &_CShader_GetStaleBucket_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CShader_GetStaleBucket_Response& a, CShader_GetStaleBucket_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CShader_GetStaleBucket_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CShader_GetStaleBucket_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CShader_GetStaleBucket_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CShader_GetStaleBucket_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CShader_GetStaleBucket_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CShader_GetStaleBucket_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CShader_GetStaleBucket_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CShader_GetStaleBucket_Response";
  }
  protected:
  explicit CShader_GetStaleBucket_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGpuDescFieldNumber = 4,
    kDriverDescFieldNumber = 5,
    kDepotEncryptionKeyFieldNumber = 6,
    kBucketidFieldNumber = 1,
    kManifestidFieldNumber = 3,
    kAppidFieldNumber = 2,
  };
  // optional string gpu_desc = 4;
  bool has_gpu_desc() const;
  private:
  bool _internal_has_gpu_desc() const;
  public:
  void clear_gpu_desc();
  const std::string& gpu_desc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gpu_desc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gpu_desc();
  PROTOBUF_NODISCARD std::string* release_gpu_desc();
  void set_allocated_gpu_desc(std::string* gpu_desc);
  private:
  const std::string& _internal_gpu_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gpu_desc(const std::string& value);
  std::string* _internal_mutable_gpu_desc();
  public:

  // optional string driver_desc = 5;
  bool has_driver_desc() const;
  private:
  bool _internal_has_driver_desc() const;
  public:
  void clear_driver_desc();
  const std::string& driver_desc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_driver_desc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_driver_desc();
  PROTOBUF_NODISCARD std::string* release_driver_desc();
  void set_allocated_driver_desc(std::string* driver_desc);
  private:
  const std::string& _internal_driver_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_driver_desc(const std::string& value);
  std::string* _internal_mutable_driver_desc();
  public:

  // optional bytes depot_encryption_key = 6;
  bool has_depot_encryption_key() const;
  private:
  bool _internal_has_depot_encryption_key() const;
  public:
  void clear_depot_encryption_key();
  const std::string& depot_encryption_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_depot_encryption_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_depot_encryption_key();
  PROTOBUF_NODISCARD std::string* release_depot_encryption_key();
  void set_allocated_depot_encryption_key(std::string* depot_encryption_key);
  private:
  const std::string& _internal_depot_encryption_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_depot_encryption_key(const std::string& value);
  std::string* _internal_mutable_depot_encryption_key();
  public:

  // optional uint64 bucketid = 1;
  bool has_bucketid() const;
  private:
  bool _internal_has_bucketid() const;
  public:
  void clear_bucketid();
  uint64_t bucketid() const;
  void set_bucketid(uint64_t value);
  private:
  uint64_t _internal_bucketid() const;
  void _internal_set_bucketid(uint64_t value);
  public:

  // optional uint64 manifestid = 3;
  bool has_manifestid() const;
  private:
  bool _internal_has_manifestid() const;
  public:
  void clear_manifestid();
  uint64_t manifestid() const;
  void set_manifestid(uint64_t value);
  private:
  uint64_t _internal_manifestid() const;
  void _internal_set_manifestid(uint64_t value);
  public:

  // optional uint32 appid = 2;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CShader_GetStaleBucket_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gpu_desc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr driver_desc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr depot_encryption_key_;
  uint64_t bucketid_;
  uint64_t manifestid_;
  uint32_t appid_;
  friend struct ::TableStruct_steammessages_5fshader_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CShader_ReportExternalBuild_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CShader_ReportExternalBuild_Request) */ {
 public:
  inline CShader_ReportExternalBuild_Request() : CShader_ReportExternalBuild_Request(nullptr) {}
  ~CShader_ReportExternalBuild_Request() override;
  explicit constexpr CShader_ReportExternalBuild_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CShader_ReportExternalBuild_Request(const CShader_ReportExternalBuild_Request& from);
  CShader_ReportExternalBuild_Request(CShader_ReportExternalBuild_Request&& from) noexcept
    : CShader_ReportExternalBuild_Request() {
    *this = ::std::move(from);
  }

  inline CShader_ReportExternalBuild_Request& operator=(const CShader_ReportExternalBuild_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CShader_ReportExternalBuild_Request& operator=(CShader_ReportExternalBuild_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CShader_ReportExternalBuild_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CShader_ReportExternalBuild_Request* internal_default_instance() {
    return reinterpret_cast<const CShader_ReportExternalBuild_Request*>(
               &_CShader_ReportExternalBuild_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CShader_ReportExternalBuild_Request& a, CShader_ReportExternalBuild_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CShader_ReportExternalBuild_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CShader_ReportExternalBuild_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CShader_ReportExternalBuild_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CShader_ReportExternalBuild_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CShader_ReportExternalBuild_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CShader_ReportExternalBuild_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CShader_ReportExternalBuild_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CShader_ReportExternalBuild_Request";
  }
  protected:
  explicit CShader_ReportExternalBuild_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGpuDescFieldNumber = 2,
    kDriverDescFieldNumber = 3,
    kSourceGpuDescFieldNumber = 5,
    kSourceDriverDescFieldNumber = 6,
    kManifestidFieldNumber = 4,
    kDepotsizeFieldNumber = 7,
    kAppidFieldNumber = 1,
  };
  // optional string gpu_desc = 2;
  bool has_gpu_desc() const;
  private:
  bool _internal_has_gpu_desc() const;
  public:
  void clear_gpu_desc();
  const std::string& gpu_desc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gpu_desc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gpu_desc();
  PROTOBUF_NODISCARD std::string* release_gpu_desc();
  void set_allocated_gpu_desc(std::string* gpu_desc);
  private:
  const std::string& _internal_gpu_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gpu_desc(const std::string& value);
  std::string* _internal_mutable_gpu_desc();
  public:

  // optional string driver_desc = 3;
  bool has_driver_desc() const;
  private:
  bool _internal_has_driver_desc() const;
  public:
  void clear_driver_desc();
  const std::string& driver_desc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_driver_desc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_driver_desc();
  PROTOBUF_NODISCARD std::string* release_driver_desc();
  void set_allocated_driver_desc(std::string* driver_desc);
  private:
  const std::string& _internal_driver_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_driver_desc(const std::string& value);
  std::string* _internal_mutable_driver_desc();
  public:

  // optional string source_gpu_desc = 5;
  bool has_source_gpu_desc() const;
  private:
  bool _internal_has_source_gpu_desc() const;
  public:
  void clear_source_gpu_desc();
  const std::string& source_gpu_desc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_source_gpu_desc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_source_gpu_desc();
  PROTOBUF_NODISCARD std::string* release_source_gpu_desc();
  void set_allocated_source_gpu_desc(std::string* source_gpu_desc);
  private:
  const std::string& _internal_source_gpu_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source_gpu_desc(const std::string& value);
  std::string* _internal_mutable_source_gpu_desc();
  public:

  // optional string source_driver_desc = 6;
  bool has_source_driver_desc() const;
  private:
  bool _internal_has_source_driver_desc() const;
  public:
  void clear_source_driver_desc();
  const std::string& source_driver_desc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_source_driver_desc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_source_driver_desc();
  PROTOBUF_NODISCARD std::string* release_source_driver_desc();
  void set_allocated_source_driver_desc(std::string* source_driver_desc);
  private:
  const std::string& _internal_source_driver_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source_driver_desc(const std::string& value);
  std::string* _internal_mutable_source_driver_desc();
  public:

  // optional uint64 manifestid = 4;
  bool has_manifestid() const;
  private:
  bool _internal_has_manifestid() const;
  public:
  void clear_manifestid();
  uint64_t manifestid() const;
  void set_manifestid(uint64_t value);
  private:
  uint64_t _internal_manifestid() const;
  void _internal_set_manifestid(uint64_t value);
  public:

  // optional uint64 depotsize = 7;
  bool has_depotsize() const;
  private:
  bool _internal_has_depotsize() const;
  public:
  void clear_depotsize();
  uint64_t depotsize() const;
  void set_depotsize(uint64_t value);
  private:
  uint64_t _internal_depotsize() const;
  void _internal_set_depotsize(uint64_t value);
  public:

  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CShader_ReportExternalBuild_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gpu_desc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr driver_desc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_gpu_desc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_driver_desc_;
  uint64_t manifestid_;
  uint64_t depotsize_;
  uint32_t appid_;
  friend struct ::TableStruct_steammessages_5fshader_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CShader_ReportExternalBuild_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CShader_ReportExternalBuild_Response) */ {
 public:
  inline CShader_ReportExternalBuild_Response() : CShader_ReportExternalBuild_Response(nullptr) {}
  explicit constexpr CShader_ReportExternalBuild_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CShader_ReportExternalBuild_Response(const CShader_ReportExternalBuild_Response& from);
  CShader_ReportExternalBuild_Response(CShader_ReportExternalBuild_Response&& from) noexcept
    : CShader_ReportExternalBuild_Response() {
    *this = ::std::move(from);
  }

  inline CShader_ReportExternalBuild_Response& operator=(const CShader_ReportExternalBuild_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CShader_ReportExternalBuild_Response& operator=(CShader_ReportExternalBuild_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CShader_ReportExternalBuild_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CShader_ReportExternalBuild_Response* internal_default_instance() {
    return reinterpret_cast<const CShader_ReportExternalBuild_Response*>(
               &_CShader_ReportExternalBuild_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CShader_ReportExternalBuild_Response& a, CShader_ReportExternalBuild_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CShader_ReportExternalBuild_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CShader_ReportExternalBuild_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CShader_ReportExternalBuild_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CShader_ReportExternalBuild_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CShader_ReportExternalBuild_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CShader_ReportExternalBuild_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CShader_ReportExternalBuild_Response";
  }
  protected:
  explicit CShader_ReportExternalBuild_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CShader_ReportExternalBuild_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fshader_2esteamclient_2eproto;
};
// ===================================================================

class Shader_Stub;

class Shader : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline Shader() {};
 public:
  virtual ~Shader();

  typedef Shader_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void RegisterShader(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CShader_RegisterShader_Request* request,
                       ::CShader_RegisterShader_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void SendShader(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CShader_SendShader_Request* request,
                       ::CShader_SendShader_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetBucketManifest(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CShader_GetBucketManifest_Request* request,
                       ::CShader_GetBucketManifest_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetStaleBucket(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CShader_GetStaleBucket_Request* request,
                       ::CShader_GetStaleBucket_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void ReportExternalBuild(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CShader_ReportExternalBuild_Request* request,
                       ::CShader_ReportExternalBuild_Response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Shader);
};

class Shader_Stub : public Shader {
 public:
  Shader_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  Shader_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~Shader_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements Shader ------------------------------------------

  void RegisterShader(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CShader_RegisterShader_Request* request,
                       ::CShader_RegisterShader_Response* response,
                       ::google::protobuf::Closure* done);
  void SendShader(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CShader_SendShader_Request* request,
                       ::CShader_SendShader_Response* response,
                       ::google::protobuf::Closure* done);
  void GetBucketManifest(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CShader_GetBucketManifest_Request* request,
                       ::CShader_GetBucketManifest_Response* response,
                       ::google::protobuf::Closure* done);
  void GetStaleBucket(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CShader_GetStaleBucket_Request* request,
                       ::CShader_GetStaleBucket_Response* response,
                       ::google::protobuf::Closure* done);
  void ReportExternalBuild(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CShader_ReportExternalBuild_Request* request,
                       ::CShader_ReportExternalBuild_Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Shader_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CShader_RegisterShader_Request_Shader

// optional bytes cache_key_sha = 1;
inline bool CShader_RegisterShader_Request_Shader::_internal_has_cache_key_sha() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CShader_RegisterShader_Request_Shader::has_cache_key_sha() const {
  return _internal_has_cache_key_sha();
}
inline void CShader_RegisterShader_Request_Shader::clear_cache_key_sha() {
  cache_key_sha_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CShader_RegisterShader_Request_Shader::cache_key_sha() const {
  // @@protoc_insertion_point(field_get:CShader_RegisterShader_Request.Shader.cache_key_sha)
  return _internal_cache_key_sha();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CShader_RegisterShader_Request_Shader::set_cache_key_sha(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 cache_key_sha_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CShader_RegisterShader_Request.Shader.cache_key_sha)
}
inline std::string* CShader_RegisterShader_Request_Shader::mutable_cache_key_sha() {
  std::string* _s = _internal_mutable_cache_key_sha();
  // @@protoc_insertion_point(field_mutable:CShader_RegisterShader_Request.Shader.cache_key_sha)
  return _s;
}
inline const std::string& CShader_RegisterShader_Request_Shader::_internal_cache_key_sha() const {
  return cache_key_sha_.Get();
}
inline void CShader_RegisterShader_Request_Shader::_internal_set_cache_key_sha(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  cache_key_sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CShader_RegisterShader_Request_Shader::_internal_mutable_cache_key_sha() {
  _has_bits_[0] |= 0x00000001u;
  return cache_key_sha_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CShader_RegisterShader_Request_Shader::release_cache_key_sha() {
  // @@protoc_insertion_point(field_release:CShader_RegisterShader_Request.Shader.cache_key_sha)
  if (!_internal_has_cache_key_sha()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = cache_key_sha_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cache_key_sha_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    cache_key_sha_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CShader_RegisterShader_Request_Shader::set_allocated_cache_key_sha(std::string* cache_key_sha) {
  if (cache_key_sha != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  cache_key_sha_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cache_key_sha,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cache_key_sha_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    cache_key_sha_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CShader_RegisterShader_Request.Shader.cache_key_sha)
}

// optional bytes shader_code_sha = 2;
inline bool CShader_RegisterShader_Request_Shader::_internal_has_shader_code_sha() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CShader_RegisterShader_Request_Shader::has_shader_code_sha() const {
  return _internal_has_shader_code_sha();
}
inline void CShader_RegisterShader_Request_Shader::clear_shader_code_sha() {
  shader_code_sha_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CShader_RegisterShader_Request_Shader::shader_code_sha() const {
  // @@protoc_insertion_point(field_get:CShader_RegisterShader_Request.Shader.shader_code_sha)
  return _internal_shader_code_sha();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CShader_RegisterShader_Request_Shader::set_shader_code_sha(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 shader_code_sha_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CShader_RegisterShader_Request.Shader.shader_code_sha)
}
inline std::string* CShader_RegisterShader_Request_Shader::mutable_shader_code_sha() {
  std::string* _s = _internal_mutable_shader_code_sha();
  // @@protoc_insertion_point(field_mutable:CShader_RegisterShader_Request.Shader.shader_code_sha)
  return _s;
}
inline const std::string& CShader_RegisterShader_Request_Shader::_internal_shader_code_sha() const {
  return shader_code_sha_.Get();
}
inline void CShader_RegisterShader_Request_Shader::_internal_set_shader_code_sha(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  shader_code_sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CShader_RegisterShader_Request_Shader::_internal_mutable_shader_code_sha() {
  _has_bits_[0] |= 0x00000002u;
  return shader_code_sha_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CShader_RegisterShader_Request_Shader::release_shader_code_sha() {
  // @@protoc_insertion_point(field_release:CShader_RegisterShader_Request.Shader.shader_code_sha)
  if (!_internal_has_shader_code_sha()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = shader_code_sha_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (shader_code_sha_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    shader_code_sha_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CShader_RegisterShader_Request_Shader::set_allocated_shader_code_sha(std::string* shader_code_sha) {
  if (shader_code_sha != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  shader_code_sha_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), shader_code_sha,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (shader_code_sha_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    shader_code_sha_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CShader_RegisterShader_Request.Shader.shader_code_sha)
}

// -------------------------------------------------------------------

// CShader_RegisterShader_Request

// optional uint32 appid = 1;
inline bool CShader_RegisterShader_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CShader_RegisterShader_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CShader_RegisterShader_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CShader_RegisterShader_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CShader_RegisterShader_Request::appid() const {
  // @@protoc_insertion_point(field_get:CShader_RegisterShader_Request.appid)
  return _internal_appid();
}
inline void CShader_RegisterShader_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  appid_ = value;
}
inline void CShader_RegisterShader_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CShader_RegisterShader_Request.appid)
}

// optional string gpu_desc = 2;
inline bool CShader_RegisterShader_Request::_internal_has_gpu_desc() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CShader_RegisterShader_Request::has_gpu_desc() const {
  return _internal_has_gpu_desc();
}
inline void CShader_RegisterShader_Request::clear_gpu_desc() {
  gpu_desc_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CShader_RegisterShader_Request::gpu_desc() const {
  // @@protoc_insertion_point(field_get:CShader_RegisterShader_Request.gpu_desc)
  return _internal_gpu_desc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CShader_RegisterShader_Request::set_gpu_desc(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 gpu_desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CShader_RegisterShader_Request.gpu_desc)
}
inline std::string* CShader_RegisterShader_Request::mutable_gpu_desc() {
  std::string* _s = _internal_mutable_gpu_desc();
  // @@protoc_insertion_point(field_mutable:CShader_RegisterShader_Request.gpu_desc)
  return _s;
}
inline const std::string& CShader_RegisterShader_Request::_internal_gpu_desc() const {
  return gpu_desc_.Get();
}
inline void CShader_RegisterShader_Request::_internal_set_gpu_desc(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  gpu_desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CShader_RegisterShader_Request::_internal_mutable_gpu_desc() {
  _has_bits_[0] |= 0x00000001u;
  return gpu_desc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CShader_RegisterShader_Request::release_gpu_desc() {
  // @@protoc_insertion_point(field_release:CShader_RegisterShader_Request.gpu_desc)
  if (!_internal_has_gpu_desc()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = gpu_desc_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (gpu_desc_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    gpu_desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CShader_RegisterShader_Request::set_allocated_gpu_desc(std::string* gpu_desc) {
  if (gpu_desc != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  gpu_desc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gpu_desc,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (gpu_desc_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    gpu_desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CShader_RegisterShader_Request.gpu_desc)
}

// optional string driver_desc = 3;
inline bool CShader_RegisterShader_Request::_internal_has_driver_desc() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CShader_RegisterShader_Request::has_driver_desc() const {
  return _internal_has_driver_desc();
}
inline void CShader_RegisterShader_Request::clear_driver_desc() {
  driver_desc_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CShader_RegisterShader_Request::driver_desc() const {
  // @@protoc_insertion_point(field_get:CShader_RegisterShader_Request.driver_desc)
  return _internal_driver_desc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CShader_RegisterShader_Request::set_driver_desc(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 driver_desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CShader_RegisterShader_Request.driver_desc)
}
inline std::string* CShader_RegisterShader_Request::mutable_driver_desc() {
  std::string* _s = _internal_mutable_driver_desc();
  // @@protoc_insertion_point(field_mutable:CShader_RegisterShader_Request.driver_desc)
  return _s;
}
inline const std::string& CShader_RegisterShader_Request::_internal_driver_desc() const {
  return driver_desc_.Get();
}
inline void CShader_RegisterShader_Request::_internal_set_driver_desc(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  driver_desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CShader_RegisterShader_Request::_internal_mutable_driver_desc() {
  _has_bits_[0] |= 0x00000002u;
  return driver_desc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CShader_RegisterShader_Request::release_driver_desc() {
  // @@protoc_insertion_point(field_release:CShader_RegisterShader_Request.driver_desc)
  if (!_internal_has_driver_desc()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = driver_desc_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (driver_desc_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    driver_desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CShader_RegisterShader_Request::set_allocated_driver_desc(std::string* driver_desc) {
  if (driver_desc != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  driver_desc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), driver_desc,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (driver_desc_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    driver_desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CShader_RegisterShader_Request.driver_desc)
}

// repeated .CShader_RegisterShader_Request.Shader shaders = 4;
inline int CShader_RegisterShader_Request::_internal_shaders_size() const {
  return shaders_.size();
}
inline int CShader_RegisterShader_Request::shaders_size() const {
  return _internal_shaders_size();
}
inline void CShader_RegisterShader_Request::clear_shaders() {
  shaders_.Clear();
}
inline ::CShader_RegisterShader_Request_Shader* CShader_RegisterShader_Request::mutable_shaders(int index) {
  // @@protoc_insertion_point(field_mutable:CShader_RegisterShader_Request.shaders)
  return shaders_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CShader_RegisterShader_Request_Shader >*
CShader_RegisterShader_Request::mutable_shaders() {
  // @@protoc_insertion_point(field_mutable_list:CShader_RegisterShader_Request.shaders)
  return &shaders_;
}
inline const ::CShader_RegisterShader_Request_Shader& CShader_RegisterShader_Request::_internal_shaders(int index) const {
  return shaders_.Get(index);
}
inline const ::CShader_RegisterShader_Request_Shader& CShader_RegisterShader_Request::shaders(int index) const {
  // @@protoc_insertion_point(field_get:CShader_RegisterShader_Request.shaders)
  return _internal_shaders(index);
}
inline ::CShader_RegisterShader_Request_Shader* CShader_RegisterShader_Request::_internal_add_shaders() {
  return shaders_.Add();
}
inline ::CShader_RegisterShader_Request_Shader* CShader_RegisterShader_Request::add_shaders() {
  ::CShader_RegisterShader_Request_Shader* _add = _internal_add_shaders();
  // @@protoc_insertion_point(field_add:CShader_RegisterShader_Request.shaders)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CShader_RegisterShader_Request_Shader >&
CShader_RegisterShader_Request::shaders() const {
  // @@protoc_insertion_point(field_list:CShader_RegisterShader_Request.shaders)
  return shaders_;
}

// -------------------------------------------------------------------

// CShader_RegisterShader_Response

// repeated uint32 requested_codeids = 1;
inline int CShader_RegisterShader_Response::_internal_requested_codeids_size() const {
  return requested_codeids_.size();
}
inline int CShader_RegisterShader_Response::requested_codeids_size() const {
  return _internal_requested_codeids_size();
}
inline void CShader_RegisterShader_Response::clear_requested_codeids() {
  requested_codeids_.Clear();
}
inline uint32_t CShader_RegisterShader_Response::_internal_requested_codeids(int index) const {
  return requested_codeids_.Get(index);
}
inline uint32_t CShader_RegisterShader_Response::requested_codeids(int index) const {
  // @@protoc_insertion_point(field_get:CShader_RegisterShader_Response.requested_codeids)
  return _internal_requested_codeids(index);
}
inline void CShader_RegisterShader_Response::set_requested_codeids(int index, uint32_t value) {
  requested_codeids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CShader_RegisterShader_Response.requested_codeids)
}
inline void CShader_RegisterShader_Response::_internal_add_requested_codeids(uint32_t value) {
  requested_codeids_.Add(value);
}
inline void CShader_RegisterShader_Response::add_requested_codeids(uint32_t value) {
  _internal_add_requested_codeids(value);
  // @@protoc_insertion_point(field_add:CShader_RegisterShader_Response.requested_codeids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CShader_RegisterShader_Response::_internal_requested_codeids() const {
  return requested_codeids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CShader_RegisterShader_Response::requested_codeids() const {
  // @@protoc_insertion_point(field_list:CShader_RegisterShader_Response.requested_codeids)
  return _internal_requested_codeids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CShader_RegisterShader_Response::_internal_mutable_requested_codeids() {
  return &requested_codeids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CShader_RegisterShader_Response::mutable_requested_codeids() {
  // @@protoc_insertion_point(field_mutable_list:CShader_RegisterShader_Response.requested_codeids)
  return _internal_mutable_requested_codeids();
}

// -------------------------------------------------------------------

// CShader_SendShader_Request_ShaderCode

// optional bytes shader_code_sha = 1;
inline bool CShader_SendShader_Request_ShaderCode::_internal_has_shader_code_sha() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CShader_SendShader_Request_ShaderCode::has_shader_code_sha() const {
  return _internal_has_shader_code_sha();
}
inline void CShader_SendShader_Request_ShaderCode::clear_shader_code_sha() {
  shader_code_sha_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CShader_SendShader_Request_ShaderCode::shader_code_sha() const {
  // @@protoc_insertion_point(field_get:CShader_SendShader_Request.ShaderCode.shader_code_sha)
  return _internal_shader_code_sha();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CShader_SendShader_Request_ShaderCode::set_shader_code_sha(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 shader_code_sha_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CShader_SendShader_Request.ShaderCode.shader_code_sha)
}
inline std::string* CShader_SendShader_Request_ShaderCode::mutable_shader_code_sha() {
  std::string* _s = _internal_mutable_shader_code_sha();
  // @@protoc_insertion_point(field_mutable:CShader_SendShader_Request.ShaderCode.shader_code_sha)
  return _s;
}
inline const std::string& CShader_SendShader_Request_ShaderCode::_internal_shader_code_sha() const {
  return shader_code_sha_.Get();
}
inline void CShader_SendShader_Request_ShaderCode::_internal_set_shader_code_sha(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  shader_code_sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CShader_SendShader_Request_ShaderCode::_internal_mutable_shader_code_sha() {
  _has_bits_[0] |= 0x00000001u;
  return shader_code_sha_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CShader_SendShader_Request_ShaderCode::release_shader_code_sha() {
  // @@protoc_insertion_point(field_release:CShader_SendShader_Request.ShaderCode.shader_code_sha)
  if (!_internal_has_shader_code_sha()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = shader_code_sha_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (shader_code_sha_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    shader_code_sha_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CShader_SendShader_Request_ShaderCode::set_allocated_shader_code_sha(std::string* shader_code_sha) {
  if (shader_code_sha != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  shader_code_sha_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), shader_code_sha,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (shader_code_sha_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    shader_code_sha_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CShader_SendShader_Request.ShaderCode.shader_code_sha)
}

// optional bytes shader_code = 2;
inline bool CShader_SendShader_Request_ShaderCode::_internal_has_shader_code() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CShader_SendShader_Request_ShaderCode::has_shader_code() const {
  return _internal_has_shader_code();
}
inline void CShader_SendShader_Request_ShaderCode::clear_shader_code() {
  shader_code_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CShader_SendShader_Request_ShaderCode::shader_code() const {
  // @@protoc_insertion_point(field_get:CShader_SendShader_Request.ShaderCode.shader_code)
  return _internal_shader_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CShader_SendShader_Request_ShaderCode::set_shader_code(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 shader_code_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CShader_SendShader_Request.ShaderCode.shader_code)
}
inline std::string* CShader_SendShader_Request_ShaderCode::mutable_shader_code() {
  std::string* _s = _internal_mutable_shader_code();
  // @@protoc_insertion_point(field_mutable:CShader_SendShader_Request.ShaderCode.shader_code)
  return _s;
}
inline const std::string& CShader_SendShader_Request_ShaderCode::_internal_shader_code() const {
  return shader_code_.Get();
}
inline void CShader_SendShader_Request_ShaderCode::_internal_set_shader_code(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  shader_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CShader_SendShader_Request_ShaderCode::_internal_mutable_shader_code() {
  _has_bits_[0] |= 0x00000002u;
  return shader_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CShader_SendShader_Request_ShaderCode::release_shader_code() {
  // @@protoc_insertion_point(field_release:CShader_SendShader_Request.ShaderCode.shader_code)
  if (!_internal_has_shader_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = shader_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (shader_code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    shader_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CShader_SendShader_Request_ShaderCode::set_allocated_shader_code(std::string* shader_code) {
  if (shader_code != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  shader_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), shader_code,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (shader_code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    shader_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CShader_SendShader_Request.ShaderCode.shader_code)
}

// -------------------------------------------------------------------

// CShader_SendShader_Request

// optional uint32 appid = 1;
inline bool CShader_SendShader_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CShader_SendShader_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CShader_SendShader_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CShader_SendShader_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CShader_SendShader_Request::appid() const {
  // @@protoc_insertion_point(field_get:CShader_SendShader_Request.appid)
  return _internal_appid();
}
inline void CShader_SendShader_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  appid_ = value;
}
inline void CShader_SendShader_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CShader_SendShader_Request.appid)
}

// repeated .CShader_SendShader_Request.ShaderCode shaders = 2;
inline int CShader_SendShader_Request::_internal_shaders_size() const {
  return shaders_.size();
}
inline int CShader_SendShader_Request::shaders_size() const {
  return _internal_shaders_size();
}
inline void CShader_SendShader_Request::clear_shaders() {
  shaders_.Clear();
}
inline ::CShader_SendShader_Request_ShaderCode* CShader_SendShader_Request::mutable_shaders(int index) {
  // @@protoc_insertion_point(field_mutable:CShader_SendShader_Request.shaders)
  return shaders_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CShader_SendShader_Request_ShaderCode >*
CShader_SendShader_Request::mutable_shaders() {
  // @@protoc_insertion_point(field_mutable_list:CShader_SendShader_Request.shaders)
  return &shaders_;
}
inline const ::CShader_SendShader_Request_ShaderCode& CShader_SendShader_Request::_internal_shaders(int index) const {
  return shaders_.Get(index);
}
inline const ::CShader_SendShader_Request_ShaderCode& CShader_SendShader_Request::shaders(int index) const {
  // @@protoc_insertion_point(field_get:CShader_SendShader_Request.shaders)
  return _internal_shaders(index);
}
inline ::CShader_SendShader_Request_ShaderCode* CShader_SendShader_Request::_internal_add_shaders() {
  return shaders_.Add();
}
inline ::CShader_SendShader_Request_ShaderCode* CShader_SendShader_Request::add_shaders() {
  ::CShader_SendShader_Request_ShaderCode* _add = _internal_add_shaders();
  // @@protoc_insertion_point(field_add:CShader_SendShader_Request.shaders)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CShader_SendShader_Request_ShaderCode >&
CShader_SendShader_Request::shaders() const {
  // @@protoc_insertion_point(field_list:CShader_SendShader_Request.shaders)
  return shaders_;
}

// -------------------------------------------------------------------

// CShader_SendShader_Response

// -------------------------------------------------------------------

// CShader_GetBucketManifest_Request

// optional uint32 appid = 1;
inline bool CShader_GetBucketManifest_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CShader_GetBucketManifest_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CShader_GetBucketManifest_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CShader_GetBucketManifest_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CShader_GetBucketManifest_Request::appid() const {
  // @@protoc_insertion_point(field_get:CShader_GetBucketManifest_Request.appid)
  return _internal_appid();
}
inline void CShader_GetBucketManifest_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  appid_ = value;
}
inline void CShader_GetBucketManifest_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CShader_GetBucketManifest_Request.appid)
}

// optional string gpu_desc = 2;
inline bool CShader_GetBucketManifest_Request::_internal_has_gpu_desc() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CShader_GetBucketManifest_Request::has_gpu_desc() const {
  return _internal_has_gpu_desc();
}
inline void CShader_GetBucketManifest_Request::clear_gpu_desc() {
  gpu_desc_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CShader_GetBucketManifest_Request::gpu_desc() const {
  // @@protoc_insertion_point(field_get:CShader_GetBucketManifest_Request.gpu_desc)
  return _internal_gpu_desc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CShader_GetBucketManifest_Request::set_gpu_desc(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 gpu_desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CShader_GetBucketManifest_Request.gpu_desc)
}
inline std::string* CShader_GetBucketManifest_Request::mutable_gpu_desc() {
  std::string* _s = _internal_mutable_gpu_desc();
  // @@protoc_insertion_point(field_mutable:CShader_GetBucketManifest_Request.gpu_desc)
  return _s;
}
inline const std::string& CShader_GetBucketManifest_Request::_internal_gpu_desc() const {
  return gpu_desc_.Get();
}
inline void CShader_GetBucketManifest_Request::_internal_set_gpu_desc(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  gpu_desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CShader_GetBucketManifest_Request::_internal_mutable_gpu_desc() {
  _has_bits_[0] |= 0x00000001u;
  return gpu_desc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CShader_GetBucketManifest_Request::release_gpu_desc() {
  // @@protoc_insertion_point(field_release:CShader_GetBucketManifest_Request.gpu_desc)
  if (!_internal_has_gpu_desc()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = gpu_desc_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (gpu_desc_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    gpu_desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CShader_GetBucketManifest_Request::set_allocated_gpu_desc(std::string* gpu_desc) {
  if (gpu_desc != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  gpu_desc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gpu_desc,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (gpu_desc_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    gpu_desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CShader_GetBucketManifest_Request.gpu_desc)
}

// optional string driver_desc = 3;
inline bool CShader_GetBucketManifest_Request::_internal_has_driver_desc() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CShader_GetBucketManifest_Request::has_driver_desc() const {
  return _internal_has_driver_desc();
}
inline void CShader_GetBucketManifest_Request::clear_driver_desc() {
  driver_desc_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CShader_GetBucketManifest_Request::driver_desc() const {
  // @@protoc_insertion_point(field_get:CShader_GetBucketManifest_Request.driver_desc)
  return _internal_driver_desc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CShader_GetBucketManifest_Request::set_driver_desc(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 driver_desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CShader_GetBucketManifest_Request.driver_desc)
}
inline std::string* CShader_GetBucketManifest_Request::mutable_driver_desc() {
  std::string* _s = _internal_mutable_driver_desc();
  // @@protoc_insertion_point(field_mutable:CShader_GetBucketManifest_Request.driver_desc)
  return _s;
}
inline const std::string& CShader_GetBucketManifest_Request::_internal_driver_desc() const {
  return driver_desc_.Get();
}
inline void CShader_GetBucketManifest_Request::_internal_set_driver_desc(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  driver_desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CShader_GetBucketManifest_Request::_internal_mutable_driver_desc() {
  _has_bits_[0] |= 0x00000002u;
  return driver_desc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CShader_GetBucketManifest_Request::release_driver_desc() {
  // @@protoc_insertion_point(field_release:CShader_GetBucketManifest_Request.driver_desc)
  if (!_internal_has_driver_desc()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = driver_desc_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (driver_desc_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    driver_desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CShader_GetBucketManifest_Request::set_allocated_driver_desc(std::string* driver_desc) {
  if (driver_desc != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  driver_desc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), driver_desc,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (driver_desc_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    driver_desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CShader_GetBucketManifest_Request.driver_desc)
}

// -------------------------------------------------------------------

// CShader_GetBucketManifest_Response

// optional uint64 manifestid = 1;
inline bool CShader_GetBucketManifest_Response::_internal_has_manifestid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CShader_GetBucketManifest_Response::has_manifestid() const {
  return _internal_has_manifestid();
}
inline void CShader_GetBucketManifest_Response::clear_manifestid() {
  manifestid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CShader_GetBucketManifest_Response::_internal_manifestid() const {
  return manifestid_;
}
inline uint64_t CShader_GetBucketManifest_Response::manifestid() const {
  // @@protoc_insertion_point(field_get:CShader_GetBucketManifest_Response.manifestid)
  return _internal_manifestid();
}
inline void CShader_GetBucketManifest_Response::_internal_set_manifestid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  manifestid_ = value;
}
inline void CShader_GetBucketManifest_Response::set_manifestid(uint64_t value) {
  _internal_set_manifestid(value);
  // @@protoc_insertion_point(field_set:CShader_GetBucketManifest_Response.manifestid)
}

// optional uint64 depotsize = 2;
inline bool CShader_GetBucketManifest_Response::_internal_has_depotsize() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CShader_GetBucketManifest_Response::has_depotsize() const {
  return _internal_has_depotsize();
}
inline void CShader_GetBucketManifest_Response::clear_depotsize() {
  depotsize_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CShader_GetBucketManifest_Response::_internal_depotsize() const {
  return depotsize_;
}
inline uint64_t CShader_GetBucketManifest_Response::depotsize() const {
  // @@protoc_insertion_point(field_get:CShader_GetBucketManifest_Response.depotsize)
  return _internal_depotsize();
}
inline void CShader_GetBucketManifest_Response::_internal_set_depotsize(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  depotsize_ = value;
}
inline void CShader_GetBucketManifest_Response::set_depotsize(uint64_t value) {
  _internal_set_depotsize(value);
  // @@protoc_insertion_point(field_set:CShader_GetBucketManifest_Response.depotsize)
}

// optional uint64 bucketid = 3;
inline bool CShader_GetBucketManifest_Response::_internal_has_bucketid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CShader_GetBucketManifest_Response::has_bucketid() const {
  return _internal_has_bucketid();
}
inline void CShader_GetBucketManifest_Response::clear_bucketid() {
  bucketid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CShader_GetBucketManifest_Response::_internal_bucketid() const {
  return bucketid_;
}
inline uint64_t CShader_GetBucketManifest_Response::bucketid() const {
  // @@protoc_insertion_point(field_get:CShader_GetBucketManifest_Response.bucketid)
  return _internal_bucketid();
}
inline void CShader_GetBucketManifest_Response::_internal_set_bucketid(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  bucketid_ = value;
}
inline void CShader_GetBucketManifest_Response::set_bucketid(uint64_t value) {
  _internal_set_bucketid(value);
  // @@protoc_insertion_point(field_set:CShader_GetBucketManifest_Response.bucketid)
}

// -------------------------------------------------------------------

// CShader_GetStaleBucket_Request

// optional string gpu_desc = 1;
inline bool CShader_GetStaleBucket_Request::_internal_has_gpu_desc() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CShader_GetStaleBucket_Request::has_gpu_desc() const {
  return _internal_has_gpu_desc();
}
inline void CShader_GetStaleBucket_Request::clear_gpu_desc() {
  gpu_desc_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CShader_GetStaleBucket_Request::gpu_desc() const {
  // @@protoc_insertion_point(field_get:CShader_GetStaleBucket_Request.gpu_desc)
  return _internal_gpu_desc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CShader_GetStaleBucket_Request::set_gpu_desc(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 gpu_desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CShader_GetStaleBucket_Request.gpu_desc)
}
inline std::string* CShader_GetStaleBucket_Request::mutable_gpu_desc() {
  std::string* _s = _internal_mutable_gpu_desc();
  // @@protoc_insertion_point(field_mutable:CShader_GetStaleBucket_Request.gpu_desc)
  return _s;
}
inline const std::string& CShader_GetStaleBucket_Request::_internal_gpu_desc() const {
  return gpu_desc_.Get();
}
inline void CShader_GetStaleBucket_Request::_internal_set_gpu_desc(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  gpu_desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CShader_GetStaleBucket_Request::_internal_mutable_gpu_desc() {
  _has_bits_[0] |= 0x00000001u;
  return gpu_desc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CShader_GetStaleBucket_Request::release_gpu_desc() {
  // @@protoc_insertion_point(field_release:CShader_GetStaleBucket_Request.gpu_desc)
  if (!_internal_has_gpu_desc()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = gpu_desc_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (gpu_desc_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    gpu_desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CShader_GetStaleBucket_Request::set_allocated_gpu_desc(std::string* gpu_desc) {
  if (gpu_desc != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  gpu_desc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gpu_desc,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (gpu_desc_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    gpu_desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CShader_GetStaleBucket_Request.gpu_desc)
}

// optional string driver_desc = 2;
inline bool CShader_GetStaleBucket_Request::_internal_has_driver_desc() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CShader_GetStaleBucket_Request::has_driver_desc() const {
  return _internal_has_driver_desc();
}
inline void CShader_GetStaleBucket_Request::clear_driver_desc() {
  driver_desc_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CShader_GetStaleBucket_Request::driver_desc() const {
  // @@protoc_insertion_point(field_get:CShader_GetStaleBucket_Request.driver_desc)
  return _internal_driver_desc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CShader_GetStaleBucket_Request::set_driver_desc(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 driver_desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CShader_GetStaleBucket_Request.driver_desc)
}
inline std::string* CShader_GetStaleBucket_Request::mutable_driver_desc() {
  std::string* _s = _internal_mutable_driver_desc();
  // @@protoc_insertion_point(field_mutable:CShader_GetStaleBucket_Request.driver_desc)
  return _s;
}
inline const std::string& CShader_GetStaleBucket_Request::_internal_driver_desc() const {
  return driver_desc_.Get();
}
inline void CShader_GetStaleBucket_Request::_internal_set_driver_desc(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  driver_desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CShader_GetStaleBucket_Request::_internal_mutable_driver_desc() {
  _has_bits_[0] |= 0x00000002u;
  return driver_desc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CShader_GetStaleBucket_Request::release_driver_desc() {
  // @@protoc_insertion_point(field_release:CShader_GetStaleBucket_Request.driver_desc)
  if (!_internal_has_driver_desc()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = driver_desc_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (driver_desc_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    driver_desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CShader_GetStaleBucket_Request::set_allocated_driver_desc(std::string* driver_desc) {
  if (driver_desc != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  driver_desc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), driver_desc,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (driver_desc_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    driver_desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CShader_GetStaleBucket_Request.driver_desc)
}

// -------------------------------------------------------------------

// CShader_GetStaleBucket_Response

// optional uint64 bucketid = 1;
inline bool CShader_GetStaleBucket_Response::_internal_has_bucketid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CShader_GetStaleBucket_Response::has_bucketid() const {
  return _internal_has_bucketid();
}
inline void CShader_GetStaleBucket_Response::clear_bucketid() {
  bucketid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline uint64_t CShader_GetStaleBucket_Response::_internal_bucketid() const {
  return bucketid_;
}
inline uint64_t CShader_GetStaleBucket_Response::bucketid() const {
  // @@protoc_insertion_point(field_get:CShader_GetStaleBucket_Response.bucketid)
  return _internal_bucketid();
}
inline void CShader_GetStaleBucket_Response::_internal_set_bucketid(uint64_t value) {
  _has_bits_[0] |= 0x00000008u;
  bucketid_ = value;
}
inline void CShader_GetStaleBucket_Response::set_bucketid(uint64_t value) {
  _internal_set_bucketid(value);
  // @@protoc_insertion_point(field_set:CShader_GetStaleBucket_Response.bucketid)
}

// optional uint32 appid = 2;
inline bool CShader_GetStaleBucket_Response::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CShader_GetStaleBucket_Response::has_appid() const {
  return _internal_has_appid();
}
inline void CShader_GetStaleBucket_Response::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CShader_GetStaleBucket_Response::_internal_appid() const {
  return appid_;
}
inline uint32_t CShader_GetStaleBucket_Response::appid() const {
  // @@protoc_insertion_point(field_get:CShader_GetStaleBucket_Response.appid)
  return _internal_appid();
}
inline void CShader_GetStaleBucket_Response::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  appid_ = value;
}
inline void CShader_GetStaleBucket_Response::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CShader_GetStaleBucket_Response.appid)
}

// optional uint64 manifestid = 3;
inline bool CShader_GetStaleBucket_Response::_internal_has_manifestid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CShader_GetStaleBucket_Response::has_manifestid() const {
  return _internal_has_manifestid();
}
inline void CShader_GetStaleBucket_Response::clear_manifestid() {
  manifestid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000010u;
}
inline uint64_t CShader_GetStaleBucket_Response::_internal_manifestid() const {
  return manifestid_;
}
inline uint64_t CShader_GetStaleBucket_Response::manifestid() const {
  // @@protoc_insertion_point(field_get:CShader_GetStaleBucket_Response.manifestid)
  return _internal_manifestid();
}
inline void CShader_GetStaleBucket_Response::_internal_set_manifestid(uint64_t value) {
  _has_bits_[0] |= 0x00000010u;
  manifestid_ = value;
}
inline void CShader_GetStaleBucket_Response::set_manifestid(uint64_t value) {
  _internal_set_manifestid(value);
  // @@protoc_insertion_point(field_set:CShader_GetStaleBucket_Response.manifestid)
}

// optional string gpu_desc = 4;
inline bool CShader_GetStaleBucket_Response::_internal_has_gpu_desc() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CShader_GetStaleBucket_Response::has_gpu_desc() const {
  return _internal_has_gpu_desc();
}
inline void CShader_GetStaleBucket_Response::clear_gpu_desc() {
  gpu_desc_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CShader_GetStaleBucket_Response::gpu_desc() const {
  // @@protoc_insertion_point(field_get:CShader_GetStaleBucket_Response.gpu_desc)
  return _internal_gpu_desc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CShader_GetStaleBucket_Response::set_gpu_desc(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 gpu_desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CShader_GetStaleBucket_Response.gpu_desc)
}
inline std::string* CShader_GetStaleBucket_Response::mutable_gpu_desc() {
  std::string* _s = _internal_mutable_gpu_desc();
  // @@protoc_insertion_point(field_mutable:CShader_GetStaleBucket_Response.gpu_desc)
  return _s;
}
inline const std::string& CShader_GetStaleBucket_Response::_internal_gpu_desc() const {
  return gpu_desc_.Get();
}
inline void CShader_GetStaleBucket_Response::_internal_set_gpu_desc(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  gpu_desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CShader_GetStaleBucket_Response::_internal_mutable_gpu_desc() {
  _has_bits_[0] |= 0x00000001u;
  return gpu_desc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CShader_GetStaleBucket_Response::release_gpu_desc() {
  // @@protoc_insertion_point(field_release:CShader_GetStaleBucket_Response.gpu_desc)
  if (!_internal_has_gpu_desc()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = gpu_desc_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (gpu_desc_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    gpu_desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CShader_GetStaleBucket_Response::set_allocated_gpu_desc(std::string* gpu_desc) {
  if (gpu_desc != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  gpu_desc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gpu_desc,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (gpu_desc_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    gpu_desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CShader_GetStaleBucket_Response.gpu_desc)
}

// optional string driver_desc = 5;
inline bool CShader_GetStaleBucket_Response::_internal_has_driver_desc() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CShader_GetStaleBucket_Response::has_driver_desc() const {
  return _internal_has_driver_desc();
}
inline void CShader_GetStaleBucket_Response::clear_driver_desc() {
  driver_desc_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CShader_GetStaleBucket_Response::driver_desc() const {
  // @@protoc_insertion_point(field_get:CShader_GetStaleBucket_Response.driver_desc)
  return _internal_driver_desc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CShader_GetStaleBucket_Response::set_driver_desc(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 driver_desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CShader_GetStaleBucket_Response.driver_desc)
}
inline std::string* CShader_GetStaleBucket_Response::mutable_driver_desc() {
  std::string* _s = _internal_mutable_driver_desc();
  // @@protoc_insertion_point(field_mutable:CShader_GetStaleBucket_Response.driver_desc)
  return _s;
}
inline const std::string& CShader_GetStaleBucket_Response::_internal_driver_desc() const {
  return driver_desc_.Get();
}
inline void CShader_GetStaleBucket_Response::_internal_set_driver_desc(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  driver_desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CShader_GetStaleBucket_Response::_internal_mutable_driver_desc() {
  _has_bits_[0] |= 0x00000002u;
  return driver_desc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CShader_GetStaleBucket_Response::release_driver_desc() {
  // @@protoc_insertion_point(field_release:CShader_GetStaleBucket_Response.driver_desc)
  if (!_internal_has_driver_desc()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = driver_desc_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (driver_desc_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    driver_desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CShader_GetStaleBucket_Response::set_allocated_driver_desc(std::string* driver_desc) {
  if (driver_desc != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  driver_desc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), driver_desc,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (driver_desc_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    driver_desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CShader_GetStaleBucket_Response.driver_desc)
}

// optional bytes depot_encryption_key = 6;
inline bool CShader_GetStaleBucket_Response::_internal_has_depot_encryption_key() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CShader_GetStaleBucket_Response::has_depot_encryption_key() const {
  return _internal_has_depot_encryption_key();
}
inline void CShader_GetStaleBucket_Response::clear_depot_encryption_key() {
  depot_encryption_key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CShader_GetStaleBucket_Response::depot_encryption_key() const {
  // @@protoc_insertion_point(field_get:CShader_GetStaleBucket_Response.depot_encryption_key)
  return _internal_depot_encryption_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CShader_GetStaleBucket_Response::set_depot_encryption_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 depot_encryption_key_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CShader_GetStaleBucket_Response.depot_encryption_key)
}
inline std::string* CShader_GetStaleBucket_Response::mutable_depot_encryption_key() {
  std::string* _s = _internal_mutable_depot_encryption_key();
  // @@protoc_insertion_point(field_mutable:CShader_GetStaleBucket_Response.depot_encryption_key)
  return _s;
}
inline const std::string& CShader_GetStaleBucket_Response::_internal_depot_encryption_key() const {
  return depot_encryption_key_.Get();
}
inline void CShader_GetStaleBucket_Response::_internal_set_depot_encryption_key(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  depot_encryption_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CShader_GetStaleBucket_Response::_internal_mutable_depot_encryption_key() {
  _has_bits_[0] |= 0x00000004u;
  return depot_encryption_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CShader_GetStaleBucket_Response::release_depot_encryption_key() {
  // @@protoc_insertion_point(field_release:CShader_GetStaleBucket_Response.depot_encryption_key)
  if (!_internal_has_depot_encryption_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = depot_encryption_key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (depot_encryption_key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    depot_encryption_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CShader_GetStaleBucket_Response::set_allocated_depot_encryption_key(std::string* depot_encryption_key) {
  if (depot_encryption_key != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  depot_encryption_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), depot_encryption_key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (depot_encryption_key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    depot_encryption_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CShader_GetStaleBucket_Response.depot_encryption_key)
}

// -------------------------------------------------------------------

// CShader_ReportExternalBuild_Request

// optional uint32 appid = 1;
inline bool CShader_ReportExternalBuild_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CShader_ReportExternalBuild_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CShader_ReportExternalBuild_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CShader_ReportExternalBuild_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CShader_ReportExternalBuild_Request::appid() const {
  // @@protoc_insertion_point(field_get:CShader_ReportExternalBuild_Request.appid)
  return _internal_appid();
}
inline void CShader_ReportExternalBuild_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000040u;
  appid_ = value;
}
inline void CShader_ReportExternalBuild_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CShader_ReportExternalBuild_Request.appid)
}

// optional string gpu_desc = 2;
inline bool CShader_ReportExternalBuild_Request::_internal_has_gpu_desc() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CShader_ReportExternalBuild_Request::has_gpu_desc() const {
  return _internal_has_gpu_desc();
}
inline void CShader_ReportExternalBuild_Request::clear_gpu_desc() {
  gpu_desc_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CShader_ReportExternalBuild_Request::gpu_desc() const {
  // @@protoc_insertion_point(field_get:CShader_ReportExternalBuild_Request.gpu_desc)
  return _internal_gpu_desc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CShader_ReportExternalBuild_Request::set_gpu_desc(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 gpu_desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CShader_ReportExternalBuild_Request.gpu_desc)
}
inline std::string* CShader_ReportExternalBuild_Request::mutable_gpu_desc() {
  std::string* _s = _internal_mutable_gpu_desc();
  // @@protoc_insertion_point(field_mutable:CShader_ReportExternalBuild_Request.gpu_desc)
  return _s;
}
inline const std::string& CShader_ReportExternalBuild_Request::_internal_gpu_desc() const {
  return gpu_desc_.Get();
}
inline void CShader_ReportExternalBuild_Request::_internal_set_gpu_desc(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  gpu_desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CShader_ReportExternalBuild_Request::_internal_mutable_gpu_desc() {
  _has_bits_[0] |= 0x00000001u;
  return gpu_desc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CShader_ReportExternalBuild_Request::release_gpu_desc() {
  // @@protoc_insertion_point(field_release:CShader_ReportExternalBuild_Request.gpu_desc)
  if (!_internal_has_gpu_desc()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = gpu_desc_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (gpu_desc_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    gpu_desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CShader_ReportExternalBuild_Request::set_allocated_gpu_desc(std::string* gpu_desc) {
  if (gpu_desc != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  gpu_desc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gpu_desc,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (gpu_desc_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    gpu_desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CShader_ReportExternalBuild_Request.gpu_desc)
}

// optional string driver_desc = 3;
inline bool CShader_ReportExternalBuild_Request::_internal_has_driver_desc() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CShader_ReportExternalBuild_Request::has_driver_desc() const {
  return _internal_has_driver_desc();
}
inline void CShader_ReportExternalBuild_Request::clear_driver_desc() {
  driver_desc_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CShader_ReportExternalBuild_Request::driver_desc() const {
  // @@protoc_insertion_point(field_get:CShader_ReportExternalBuild_Request.driver_desc)
  return _internal_driver_desc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CShader_ReportExternalBuild_Request::set_driver_desc(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 driver_desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CShader_ReportExternalBuild_Request.driver_desc)
}
inline std::string* CShader_ReportExternalBuild_Request::mutable_driver_desc() {
  std::string* _s = _internal_mutable_driver_desc();
  // @@protoc_insertion_point(field_mutable:CShader_ReportExternalBuild_Request.driver_desc)
  return _s;
}
inline const std::string& CShader_ReportExternalBuild_Request::_internal_driver_desc() const {
  return driver_desc_.Get();
}
inline void CShader_ReportExternalBuild_Request::_internal_set_driver_desc(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  driver_desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CShader_ReportExternalBuild_Request::_internal_mutable_driver_desc() {
  _has_bits_[0] |= 0x00000002u;
  return driver_desc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CShader_ReportExternalBuild_Request::release_driver_desc() {
  // @@protoc_insertion_point(field_release:CShader_ReportExternalBuild_Request.driver_desc)
  if (!_internal_has_driver_desc()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = driver_desc_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (driver_desc_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    driver_desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CShader_ReportExternalBuild_Request::set_allocated_driver_desc(std::string* driver_desc) {
  if (driver_desc != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  driver_desc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), driver_desc,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (driver_desc_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    driver_desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CShader_ReportExternalBuild_Request.driver_desc)
}

// optional uint64 manifestid = 4;
inline bool CShader_ReportExternalBuild_Request::_internal_has_manifestid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CShader_ReportExternalBuild_Request::has_manifestid() const {
  return _internal_has_manifestid();
}
inline void CShader_ReportExternalBuild_Request::clear_manifestid() {
  manifestid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000010u;
}
inline uint64_t CShader_ReportExternalBuild_Request::_internal_manifestid() const {
  return manifestid_;
}
inline uint64_t CShader_ReportExternalBuild_Request::manifestid() const {
  // @@protoc_insertion_point(field_get:CShader_ReportExternalBuild_Request.manifestid)
  return _internal_manifestid();
}
inline void CShader_ReportExternalBuild_Request::_internal_set_manifestid(uint64_t value) {
  _has_bits_[0] |= 0x00000010u;
  manifestid_ = value;
}
inline void CShader_ReportExternalBuild_Request::set_manifestid(uint64_t value) {
  _internal_set_manifestid(value);
  // @@protoc_insertion_point(field_set:CShader_ReportExternalBuild_Request.manifestid)
}

// optional string source_gpu_desc = 5;
inline bool CShader_ReportExternalBuild_Request::_internal_has_source_gpu_desc() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CShader_ReportExternalBuild_Request::has_source_gpu_desc() const {
  return _internal_has_source_gpu_desc();
}
inline void CShader_ReportExternalBuild_Request::clear_source_gpu_desc() {
  source_gpu_desc_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CShader_ReportExternalBuild_Request::source_gpu_desc() const {
  // @@protoc_insertion_point(field_get:CShader_ReportExternalBuild_Request.source_gpu_desc)
  return _internal_source_gpu_desc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CShader_ReportExternalBuild_Request::set_source_gpu_desc(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 source_gpu_desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CShader_ReportExternalBuild_Request.source_gpu_desc)
}
inline std::string* CShader_ReportExternalBuild_Request::mutable_source_gpu_desc() {
  std::string* _s = _internal_mutable_source_gpu_desc();
  // @@protoc_insertion_point(field_mutable:CShader_ReportExternalBuild_Request.source_gpu_desc)
  return _s;
}
inline const std::string& CShader_ReportExternalBuild_Request::_internal_source_gpu_desc() const {
  return source_gpu_desc_.Get();
}
inline void CShader_ReportExternalBuild_Request::_internal_set_source_gpu_desc(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  source_gpu_desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CShader_ReportExternalBuild_Request::_internal_mutable_source_gpu_desc() {
  _has_bits_[0] |= 0x00000004u;
  return source_gpu_desc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CShader_ReportExternalBuild_Request::release_source_gpu_desc() {
  // @@protoc_insertion_point(field_release:CShader_ReportExternalBuild_Request.source_gpu_desc)
  if (!_internal_has_source_gpu_desc()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = source_gpu_desc_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (source_gpu_desc_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    source_gpu_desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CShader_ReportExternalBuild_Request::set_allocated_source_gpu_desc(std::string* source_gpu_desc) {
  if (source_gpu_desc != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  source_gpu_desc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source_gpu_desc,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (source_gpu_desc_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    source_gpu_desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CShader_ReportExternalBuild_Request.source_gpu_desc)
}

// optional string source_driver_desc = 6;
inline bool CShader_ReportExternalBuild_Request::_internal_has_source_driver_desc() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CShader_ReportExternalBuild_Request::has_source_driver_desc() const {
  return _internal_has_source_driver_desc();
}
inline void CShader_ReportExternalBuild_Request::clear_source_driver_desc() {
  source_driver_desc_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CShader_ReportExternalBuild_Request::source_driver_desc() const {
  // @@protoc_insertion_point(field_get:CShader_ReportExternalBuild_Request.source_driver_desc)
  return _internal_source_driver_desc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CShader_ReportExternalBuild_Request::set_source_driver_desc(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 source_driver_desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CShader_ReportExternalBuild_Request.source_driver_desc)
}
inline std::string* CShader_ReportExternalBuild_Request::mutable_source_driver_desc() {
  std::string* _s = _internal_mutable_source_driver_desc();
  // @@protoc_insertion_point(field_mutable:CShader_ReportExternalBuild_Request.source_driver_desc)
  return _s;
}
inline const std::string& CShader_ReportExternalBuild_Request::_internal_source_driver_desc() const {
  return source_driver_desc_.Get();
}
inline void CShader_ReportExternalBuild_Request::_internal_set_source_driver_desc(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  source_driver_desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CShader_ReportExternalBuild_Request::_internal_mutable_source_driver_desc() {
  _has_bits_[0] |= 0x00000008u;
  return source_driver_desc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CShader_ReportExternalBuild_Request::release_source_driver_desc() {
  // @@protoc_insertion_point(field_release:CShader_ReportExternalBuild_Request.source_driver_desc)
  if (!_internal_has_source_driver_desc()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = source_driver_desc_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (source_driver_desc_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    source_driver_desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CShader_ReportExternalBuild_Request::set_allocated_source_driver_desc(std::string* source_driver_desc) {
  if (source_driver_desc != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  source_driver_desc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source_driver_desc,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (source_driver_desc_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    source_driver_desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CShader_ReportExternalBuild_Request.source_driver_desc)
}

// optional uint64 depotsize = 7;
inline bool CShader_ReportExternalBuild_Request::_internal_has_depotsize() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CShader_ReportExternalBuild_Request::has_depotsize() const {
  return _internal_has_depotsize();
}
inline void CShader_ReportExternalBuild_Request::clear_depotsize() {
  depotsize_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000020u;
}
inline uint64_t CShader_ReportExternalBuild_Request::_internal_depotsize() const {
  return depotsize_;
}
inline uint64_t CShader_ReportExternalBuild_Request::depotsize() const {
  // @@protoc_insertion_point(field_get:CShader_ReportExternalBuild_Request.depotsize)
  return _internal_depotsize();
}
inline void CShader_ReportExternalBuild_Request::_internal_set_depotsize(uint64_t value) {
  _has_bits_[0] |= 0x00000020u;
  depotsize_ = value;
}
inline void CShader_ReportExternalBuild_Request::set_depotsize(uint64_t value) {
  _internal_set_depotsize(value);
  // @@protoc_insertion_point(field_set:CShader_ReportExternalBuild_Request.depotsize)
}

// -------------------------------------------------------------------

// CShader_ReportExternalBuild_Response

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_steammessages_5fshader_2esteamclient_2eproto
