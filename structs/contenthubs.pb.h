// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: contenthubs.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_contenthubs_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_contenthubs_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "steammessages_base.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_contenthubs_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_contenthubs_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_contenthubs_2eproto;
class CStorePageFilter;
struct CStorePageFilterDefaultTypeInternal;
extern CStorePageFilterDefaultTypeInternal _CStorePageFilter_default_instance_;
class CStorePageFilter_ContentHubFilter;
struct CStorePageFilter_ContentHubFilterDefaultTypeInternal;
extern CStorePageFilter_ContentHubFilterDefaultTypeInternal _CStorePageFilter_ContentHubFilter_default_instance_;
class CStorePageFilter_ContentHubFilter_OptInInfo;
struct CStorePageFilter_ContentHubFilter_OptInInfoDefaultTypeInternal;
extern CStorePageFilter_ContentHubFilter_OptInInfoDefaultTypeInternal _CStorePageFilter_ContentHubFilter_OptInInfo_default_instance_;
class CStorePageFilter_SalePageFilter;
struct CStorePageFilter_SalePageFilterDefaultTypeInternal;
extern CStorePageFilter_SalePageFilterDefaultTypeInternal _CStorePageFilter_SalePageFilter_default_instance_;
class CStorePageFilter_StoreFilter;
struct CStorePageFilter_StoreFilterDefaultTypeInternal;
extern CStorePageFilter_StoreFilterDefaultTypeInternal _CStorePageFilter_StoreFilter_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CStorePageFilter* Arena::CreateMaybeMessage<::CStorePageFilter>(Arena*);
template<> ::CStorePageFilter_ContentHubFilter* Arena::CreateMaybeMessage<::CStorePageFilter_ContentHubFilter>(Arena*);
template<> ::CStorePageFilter_ContentHubFilter_OptInInfo* Arena::CreateMaybeMessage<::CStorePageFilter_ContentHubFilter_OptInInfo>(Arena*);
template<> ::CStorePageFilter_SalePageFilter* Arena::CreateMaybeMessage<::CStorePageFilter_SalePageFilter>(Arena*);
template<> ::CStorePageFilter_StoreFilter* Arena::CreateMaybeMessage<::CStorePageFilter_StoreFilter>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum EContentHubDiscountFilterType : int {
  k_EContentHubDiscountFilterType_None = 0,
  k_EContentHubDiscountFilterType_DiscountsOnly = 1,
  k_EContentHubDiscountFilterType_PrioritizeDiscounts = 2
};
bool EContentHubDiscountFilterType_IsValid(int value);
constexpr EContentHubDiscountFilterType EContentHubDiscountFilterType_MIN = k_EContentHubDiscountFilterType_None;
constexpr EContentHubDiscountFilterType EContentHubDiscountFilterType_MAX = k_EContentHubDiscountFilterType_PrioritizeDiscounts;
constexpr int EContentHubDiscountFilterType_ARRAYSIZE = EContentHubDiscountFilterType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EContentHubDiscountFilterType_descriptor();
template<typename T>
inline const std::string& EContentHubDiscountFilterType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EContentHubDiscountFilterType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EContentHubDiscountFilterType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EContentHubDiscountFilterType_descriptor(), enum_t_value);
}
inline bool EContentHubDiscountFilterType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EContentHubDiscountFilterType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EContentHubDiscountFilterType>(
    EContentHubDiscountFilterType_descriptor(), name, value);
}
// ===================================================================

class CStorePageFilter_SalePageFilter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CStorePageFilter.SalePageFilter) */ {
 public:
  inline CStorePageFilter_SalePageFilter() : CStorePageFilter_SalePageFilter(nullptr) {}
  ~CStorePageFilter_SalePageFilter() override;
  explicit constexpr CStorePageFilter_SalePageFilter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CStorePageFilter_SalePageFilter(const CStorePageFilter_SalePageFilter& from);
  CStorePageFilter_SalePageFilter(CStorePageFilter_SalePageFilter&& from) noexcept
    : CStorePageFilter_SalePageFilter() {
    *this = ::std::move(from);
  }

  inline CStorePageFilter_SalePageFilter& operator=(const CStorePageFilter_SalePageFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline CStorePageFilter_SalePageFilter& operator=(CStorePageFilter_SalePageFilter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CStorePageFilter_SalePageFilter& default_instance() {
    return *internal_default_instance();
  }
  static inline const CStorePageFilter_SalePageFilter* internal_default_instance() {
    return reinterpret_cast<const CStorePageFilter_SalePageFilter*>(
               &_CStorePageFilter_SalePageFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CStorePageFilter_SalePageFilter& a, CStorePageFilter_SalePageFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(CStorePageFilter_SalePageFilter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CStorePageFilter_SalePageFilter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CStorePageFilter_SalePageFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CStorePageFilter_SalePageFilter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CStorePageFilter_SalePageFilter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CStorePageFilter_SalePageFilter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CStorePageFilter_SalePageFilter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CStorePageFilter.SalePageFilter";
  }
  protected:
  explicit CStorePageFilter_SalePageFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSaleTagidFieldNumber = 1,
  };
  // optional uint32 sale_tagid = 1;
  bool has_sale_tagid() const;
  private:
  bool _internal_has_sale_tagid() const;
  public:
  void clear_sale_tagid();
  uint32_t sale_tagid() const;
  void set_sale_tagid(uint32_t value);
  private:
  uint32_t _internal_sale_tagid() const;
  void _internal_set_sale_tagid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CStorePageFilter.SalePageFilter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t sale_tagid_;
  friend struct ::TableStruct_contenthubs_2eproto;
};
// -------------------------------------------------------------------

class CStorePageFilter_ContentHubFilter_OptInInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CStorePageFilter.ContentHubFilter.OptInInfo) */ {
 public:
  inline CStorePageFilter_ContentHubFilter_OptInInfo() : CStorePageFilter_ContentHubFilter_OptInInfo(nullptr) {}
  ~CStorePageFilter_ContentHubFilter_OptInInfo() override;
  explicit constexpr CStorePageFilter_ContentHubFilter_OptInInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CStorePageFilter_ContentHubFilter_OptInInfo(const CStorePageFilter_ContentHubFilter_OptInInfo& from);
  CStorePageFilter_ContentHubFilter_OptInInfo(CStorePageFilter_ContentHubFilter_OptInInfo&& from) noexcept
    : CStorePageFilter_ContentHubFilter_OptInInfo() {
    *this = ::std::move(from);
  }

  inline CStorePageFilter_ContentHubFilter_OptInInfo& operator=(const CStorePageFilter_ContentHubFilter_OptInInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CStorePageFilter_ContentHubFilter_OptInInfo& operator=(CStorePageFilter_ContentHubFilter_OptInInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CStorePageFilter_ContentHubFilter_OptInInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CStorePageFilter_ContentHubFilter_OptInInfo* internal_default_instance() {
    return reinterpret_cast<const CStorePageFilter_ContentHubFilter_OptInInfo*>(
               &_CStorePageFilter_ContentHubFilter_OptInInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CStorePageFilter_ContentHubFilter_OptInInfo& a, CStorePageFilter_ContentHubFilter_OptInInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CStorePageFilter_ContentHubFilter_OptInInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CStorePageFilter_ContentHubFilter_OptInInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CStorePageFilter_ContentHubFilter_OptInInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CStorePageFilter_ContentHubFilter_OptInInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CStorePageFilter_ContentHubFilter_OptInInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CStorePageFilter_ContentHubFilter_OptInInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CStorePageFilter_ContentHubFilter_OptInInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CStorePageFilter.ContentHubFilter.OptInInfo";
  }
  protected:
  explicit CStorePageFilter_ContentHubFilter_OptInInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kOptinTagidFieldNumber = 2,
    kPruneTagidFieldNumber = 3,
    kOptinOnlyFieldNumber = 4,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional uint32 optin_tagid = 2;
  bool has_optin_tagid() const;
  private:
  bool _internal_has_optin_tagid() const;
  public:
  void clear_optin_tagid();
  uint32_t optin_tagid() const;
  void set_optin_tagid(uint32_t value);
  private:
  uint32_t _internal_optin_tagid() const;
  void _internal_set_optin_tagid(uint32_t value);
  public:

  // optional uint32 prune_tagid = 3;
  bool has_prune_tagid() const;
  private:
  bool _internal_has_prune_tagid() const;
  public:
  void clear_prune_tagid();
  uint32_t prune_tagid() const;
  void set_prune_tagid(uint32_t value);
  private:
  uint32_t _internal_prune_tagid() const;
  void _internal_set_prune_tagid(uint32_t value);
  public:

  // optional bool optin_only = 4;
  bool has_optin_only() const;
  private:
  bool _internal_has_optin_only() const;
  public:
  void clear_optin_only();
  bool optin_only() const;
  void set_optin_only(bool value);
  private:
  bool _internal_optin_only() const;
  void _internal_set_optin_only(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CStorePageFilter.ContentHubFilter.OptInInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  uint32_t optin_tagid_;
  uint32_t prune_tagid_;
  bool optin_only_;
  friend struct ::TableStruct_contenthubs_2eproto;
};
// -------------------------------------------------------------------

class CStorePageFilter_ContentHubFilter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CStorePageFilter.ContentHubFilter) */ {
 public:
  inline CStorePageFilter_ContentHubFilter() : CStorePageFilter_ContentHubFilter(nullptr) {}
  ~CStorePageFilter_ContentHubFilter() override;
  explicit constexpr CStorePageFilter_ContentHubFilter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CStorePageFilter_ContentHubFilter(const CStorePageFilter_ContentHubFilter& from);
  CStorePageFilter_ContentHubFilter(CStorePageFilter_ContentHubFilter&& from) noexcept
    : CStorePageFilter_ContentHubFilter() {
    *this = ::std::move(from);
  }

  inline CStorePageFilter_ContentHubFilter& operator=(const CStorePageFilter_ContentHubFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline CStorePageFilter_ContentHubFilter& operator=(CStorePageFilter_ContentHubFilter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CStorePageFilter_ContentHubFilter& default_instance() {
    return *internal_default_instance();
  }
  static inline const CStorePageFilter_ContentHubFilter* internal_default_instance() {
    return reinterpret_cast<const CStorePageFilter_ContentHubFilter*>(
               &_CStorePageFilter_ContentHubFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CStorePageFilter_ContentHubFilter& a, CStorePageFilter_ContentHubFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(CStorePageFilter_ContentHubFilter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CStorePageFilter_ContentHubFilter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CStorePageFilter_ContentHubFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CStorePageFilter_ContentHubFilter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CStorePageFilter_ContentHubFilter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CStorePageFilter_ContentHubFilter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CStorePageFilter_ContentHubFilter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CStorePageFilter.ContentHubFilter";
  }
  protected:
  explicit CStorePageFilter_ContentHubFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CStorePageFilter_ContentHubFilter_OptInInfo OptInInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kHubTypeFieldNumber = 1,
    kHubCategoryFieldNumber = 2,
    kOptinFieldNumber = 5,
    kHubTagidFieldNumber = 3,
    kDiscountFilterFieldNumber = 4,
  };
  // optional string hub_type = 1;
  bool has_hub_type() const;
  private:
  bool _internal_has_hub_type() const;
  public:
  void clear_hub_type();
  const std::string& hub_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hub_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hub_type();
  PROTOBUF_NODISCARD std::string* release_hub_type();
  void set_allocated_hub_type(std::string* hub_type);
  private:
  const std::string& _internal_hub_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hub_type(const std::string& value);
  std::string* _internal_mutable_hub_type();
  public:

  // optional string hub_category = 2;
  bool has_hub_category() const;
  private:
  bool _internal_has_hub_category() const;
  public:
  void clear_hub_category();
  const std::string& hub_category() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hub_category(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hub_category();
  PROTOBUF_NODISCARD std::string* release_hub_category();
  void set_allocated_hub_category(std::string* hub_category);
  private:
  const std::string& _internal_hub_category() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hub_category(const std::string& value);
  std::string* _internal_mutable_hub_category();
  public:

  // optional .CStorePageFilter.ContentHubFilter.OptInInfo optin = 5;
  bool has_optin() const;
  private:
  bool _internal_has_optin() const;
  public:
  void clear_optin();
  const ::CStorePageFilter_ContentHubFilter_OptInInfo& optin() const;
  PROTOBUF_NODISCARD ::CStorePageFilter_ContentHubFilter_OptInInfo* release_optin();
  ::CStorePageFilter_ContentHubFilter_OptInInfo* mutable_optin();
  void set_allocated_optin(::CStorePageFilter_ContentHubFilter_OptInInfo* optin);
  private:
  const ::CStorePageFilter_ContentHubFilter_OptInInfo& _internal_optin() const;
  ::CStorePageFilter_ContentHubFilter_OptInInfo* _internal_mutable_optin();
  public:
  void unsafe_arena_set_allocated_optin(
      ::CStorePageFilter_ContentHubFilter_OptInInfo* optin);
  ::CStorePageFilter_ContentHubFilter_OptInInfo* unsafe_arena_release_optin();

  // optional uint32 hub_tagid = 3;
  bool has_hub_tagid() const;
  private:
  bool _internal_has_hub_tagid() const;
  public:
  void clear_hub_tagid();
  uint32_t hub_tagid() const;
  void set_hub_tagid(uint32_t value);
  private:
  uint32_t _internal_hub_tagid() const;
  void _internal_set_hub_tagid(uint32_t value);
  public:

  // optional .EContentHubDiscountFilterType discount_filter = 4 [default = k_EContentHubDiscountFilterType_None];
  bool has_discount_filter() const;
  private:
  bool _internal_has_discount_filter() const;
  public:
  void clear_discount_filter();
  ::EContentHubDiscountFilterType discount_filter() const;
  void set_discount_filter(::EContentHubDiscountFilterType value);
  private:
  ::EContentHubDiscountFilterType _internal_discount_filter() const;
  void _internal_set_discount_filter(::EContentHubDiscountFilterType value);
  public:

  // @@protoc_insertion_point(class_scope:CStorePageFilter.ContentHubFilter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hub_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hub_category_;
  ::CStorePageFilter_ContentHubFilter_OptInInfo* optin_;
  uint32_t hub_tagid_;
  int discount_filter_;
  friend struct ::TableStruct_contenthubs_2eproto;
};
// -------------------------------------------------------------------

class CStorePageFilter_StoreFilter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CStorePageFilter.StoreFilter) */ {
 public:
  inline CStorePageFilter_StoreFilter() : CStorePageFilter_StoreFilter(nullptr) {}
  ~CStorePageFilter_StoreFilter() override;
  explicit constexpr CStorePageFilter_StoreFilter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CStorePageFilter_StoreFilter(const CStorePageFilter_StoreFilter& from);
  CStorePageFilter_StoreFilter(CStorePageFilter_StoreFilter&& from) noexcept
    : CStorePageFilter_StoreFilter() {
    *this = ::std::move(from);
  }

  inline CStorePageFilter_StoreFilter& operator=(const CStorePageFilter_StoreFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline CStorePageFilter_StoreFilter& operator=(CStorePageFilter_StoreFilter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CStorePageFilter_StoreFilter& default_instance() {
    return *internal_default_instance();
  }
  static inline const CStorePageFilter_StoreFilter* internal_default_instance() {
    return reinterpret_cast<const CStorePageFilter_StoreFilter*>(
               &_CStorePageFilter_StoreFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CStorePageFilter_StoreFilter& a, CStorePageFilter_StoreFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(CStorePageFilter_StoreFilter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CStorePageFilter_StoreFilter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CStorePageFilter_StoreFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CStorePageFilter_StoreFilter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CStorePageFilter_StoreFilter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CStorePageFilter_StoreFilter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CStorePageFilter_StoreFilter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CStorePageFilter.StoreFilter";
  }
  protected:
  explicit CStorePageFilter_StoreFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilterJsonFieldNumber = 1,
    kCacheKeyFieldNumber = 2,
  };
  // optional string filter_json = 1;
  bool has_filter_json() const;
  private:
  bool _internal_has_filter_json() const;
  public:
  void clear_filter_json();
  const std::string& filter_json() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filter_json(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filter_json();
  PROTOBUF_NODISCARD std::string* release_filter_json();
  void set_allocated_filter_json(std::string* filter_json);
  private:
  const std::string& _internal_filter_json() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filter_json(const std::string& value);
  std::string* _internal_mutable_filter_json();
  public:

  // optional string cache_key = 2;
  bool has_cache_key() const;
  private:
  bool _internal_has_cache_key() const;
  public:
  void clear_cache_key();
  const std::string& cache_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cache_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cache_key();
  PROTOBUF_NODISCARD std::string* release_cache_key();
  void set_allocated_cache_key(std::string* cache_key);
  private:
  const std::string& _internal_cache_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cache_key(const std::string& value);
  std::string* _internal_mutable_cache_key();
  public:

  // @@protoc_insertion_point(class_scope:CStorePageFilter.StoreFilter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filter_json_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cache_key_;
  friend struct ::TableStruct_contenthubs_2eproto;
};
// -------------------------------------------------------------------

class CStorePageFilter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CStorePageFilter) */ {
 public:
  inline CStorePageFilter() : CStorePageFilter(nullptr) {}
  ~CStorePageFilter() override;
  explicit constexpr CStorePageFilter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CStorePageFilter(const CStorePageFilter& from);
  CStorePageFilter(CStorePageFilter&& from) noexcept
    : CStorePageFilter() {
    *this = ::std::move(from);
  }

  inline CStorePageFilter& operator=(const CStorePageFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline CStorePageFilter& operator=(CStorePageFilter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CStorePageFilter& default_instance() {
    return *internal_default_instance();
  }
  static inline const CStorePageFilter* internal_default_instance() {
    return reinterpret_cast<const CStorePageFilter*>(
               &_CStorePageFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CStorePageFilter& a, CStorePageFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(CStorePageFilter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CStorePageFilter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CStorePageFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CStorePageFilter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CStorePageFilter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CStorePageFilter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CStorePageFilter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CStorePageFilter";
  }
  protected:
  explicit CStorePageFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CStorePageFilter_SalePageFilter SalePageFilter;
  typedef CStorePageFilter_ContentHubFilter ContentHubFilter;
  typedef CStorePageFilter_StoreFilter StoreFilter;

  // accessors -------------------------------------------------------

  enum : int {
    kStoreFiltersFieldNumber = 3,
    kSaleFilterFieldNumber = 1,
    kContentHubFilterFieldNumber = 2,
  };
  // repeated .CStorePageFilter.StoreFilter store_filters = 3;
  int store_filters_size() const;
  private:
  int _internal_store_filters_size() const;
  public:
  void clear_store_filters();
  ::CStorePageFilter_StoreFilter* mutable_store_filters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CStorePageFilter_StoreFilter >*
      mutable_store_filters();
  private:
  const ::CStorePageFilter_StoreFilter& _internal_store_filters(int index) const;
  ::CStorePageFilter_StoreFilter* _internal_add_store_filters();
  public:
  const ::CStorePageFilter_StoreFilter& store_filters(int index) const;
  ::CStorePageFilter_StoreFilter* add_store_filters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CStorePageFilter_StoreFilter >&
      store_filters() const;

  // optional .CStorePageFilter.SalePageFilter sale_filter = 1;
  bool has_sale_filter() const;
  private:
  bool _internal_has_sale_filter() const;
  public:
  void clear_sale_filter();
  const ::CStorePageFilter_SalePageFilter& sale_filter() const;
  PROTOBUF_NODISCARD ::CStorePageFilter_SalePageFilter* release_sale_filter();
  ::CStorePageFilter_SalePageFilter* mutable_sale_filter();
  void set_allocated_sale_filter(::CStorePageFilter_SalePageFilter* sale_filter);
  private:
  const ::CStorePageFilter_SalePageFilter& _internal_sale_filter() const;
  ::CStorePageFilter_SalePageFilter* _internal_mutable_sale_filter();
  public:
  void unsafe_arena_set_allocated_sale_filter(
      ::CStorePageFilter_SalePageFilter* sale_filter);
  ::CStorePageFilter_SalePageFilter* unsafe_arena_release_sale_filter();

  // optional .CStorePageFilter.ContentHubFilter content_hub_filter = 2;
  bool has_content_hub_filter() const;
  private:
  bool _internal_has_content_hub_filter() const;
  public:
  void clear_content_hub_filter();
  const ::CStorePageFilter_ContentHubFilter& content_hub_filter() const;
  PROTOBUF_NODISCARD ::CStorePageFilter_ContentHubFilter* release_content_hub_filter();
  ::CStorePageFilter_ContentHubFilter* mutable_content_hub_filter();
  void set_allocated_content_hub_filter(::CStorePageFilter_ContentHubFilter* content_hub_filter);
  private:
  const ::CStorePageFilter_ContentHubFilter& _internal_content_hub_filter() const;
  ::CStorePageFilter_ContentHubFilter* _internal_mutable_content_hub_filter();
  public:
  void unsafe_arena_set_allocated_content_hub_filter(
      ::CStorePageFilter_ContentHubFilter* content_hub_filter);
  ::CStorePageFilter_ContentHubFilter* unsafe_arena_release_content_hub_filter();

  // @@protoc_insertion_point(class_scope:CStorePageFilter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CStorePageFilter_StoreFilter > store_filters_;
  ::CStorePageFilter_SalePageFilter* sale_filter_;
  ::CStorePageFilter_ContentHubFilter* content_hub_filter_;
  friend struct ::TableStruct_contenthubs_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CStorePageFilter_SalePageFilter

// optional uint32 sale_tagid = 1;
inline bool CStorePageFilter_SalePageFilter::_internal_has_sale_tagid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CStorePageFilter_SalePageFilter::has_sale_tagid() const {
  return _internal_has_sale_tagid();
}
inline void CStorePageFilter_SalePageFilter::clear_sale_tagid() {
  sale_tagid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CStorePageFilter_SalePageFilter::_internal_sale_tagid() const {
  return sale_tagid_;
}
inline uint32_t CStorePageFilter_SalePageFilter::sale_tagid() const {
  // @@protoc_insertion_point(field_get:CStorePageFilter.SalePageFilter.sale_tagid)
  return _internal_sale_tagid();
}
inline void CStorePageFilter_SalePageFilter::_internal_set_sale_tagid(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  sale_tagid_ = value;
}
inline void CStorePageFilter_SalePageFilter::set_sale_tagid(uint32_t value) {
  _internal_set_sale_tagid(value);
  // @@protoc_insertion_point(field_set:CStorePageFilter.SalePageFilter.sale_tagid)
}

// -------------------------------------------------------------------

// CStorePageFilter_ContentHubFilter_OptInInfo

// optional string name = 1;
inline bool CStorePageFilter_ContentHubFilter_OptInInfo::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CStorePageFilter_ContentHubFilter_OptInInfo::has_name() const {
  return _internal_has_name();
}
inline void CStorePageFilter_ContentHubFilter_OptInInfo::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CStorePageFilter_ContentHubFilter_OptInInfo::name() const {
  // @@protoc_insertion_point(field_get:CStorePageFilter.ContentHubFilter.OptInInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CStorePageFilter_ContentHubFilter_OptInInfo::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CStorePageFilter.ContentHubFilter.OptInInfo.name)
}
inline std::string* CStorePageFilter_ContentHubFilter_OptInInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CStorePageFilter.ContentHubFilter.OptInInfo.name)
  return _s;
}
inline const std::string& CStorePageFilter_ContentHubFilter_OptInInfo::_internal_name() const {
  return name_.Get();
}
inline void CStorePageFilter_ContentHubFilter_OptInInfo::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CStorePageFilter_ContentHubFilter_OptInInfo::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CStorePageFilter_ContentHubFilter_OptInInfo::release_name() {
  // @@protoc_insertion_point(field_release:CStorePageFilter.ContentHubFilter.OptInInfo.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CStorePageFilter_ContentHubFilter_OptInInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CStorePageFilter.ContentHubFilter.OptInInfo.name)
}

// optional uint32 optin_tagid = 2;
inline bool CStorePageFilter_ContentHubFilter_OptInInfo::_internal_has_optin_tagid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CStorePageFilter_ContentHubFilter_OptInInfo::has_optin_tagid() const {
  return _internal_has_optin_tagid();
}
inline void CStorePageFilter_ContentHubFilter_OptInInfo::clear_optin_tagid() {
  optin_tagid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CStorePageFilter_ContentHubFilter_OptInInfo::_internal_optin_tagid() const {
  return optin_tagid_;
}
inline uint32_t CStorePageFilter_ContentHubFilter_OptInInfo::optin_tagid() const {
  // @@protoc_insertion_point(field_get:CStorePageFilter.ContentHubFilter.OptInInfo.optin_tagid)
  return _internal_optin_tagid();
}
inline void CStorePageFilter_ContentHubFilter_OptInInfo::_internal_set_optin_tagid(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  optin_tagid_ = value;
}
inline void CStorePageFilter_ContentHubFilter_OptInInfo::set_optin_tagid(uint32_t value) {
  _internal_set_optin_tagid(value);
  // @@protoc_insertion_point(field_set:CStorePageFilter.ContentHubFilter.OptInInfo.optin_tagid)
}

// optional uint32 prune_tagid = 3;
inline bool CStorePageFilter_ContentHubFilter_OptInInfo::_internal_has_prune_tagid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CStorePageFilter_ContentHubFilter_OptInInfo::has_prune_tagid() const {
  return _internal_has_prune_tagid();
}
inline void CStorePageFilter_ContentHubFilter_OptInInfo::clear_prune_tagid() {
  prune_tagid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CStorePageFilter_ContentHubFilter_OptInInfo::_internal_prune_tagid() const {
  return prune_tagid_;
}
inline uint32_t CStorePageFilter_ContentHubFilter_OptInInfo::prune_tagid() const {
  // @@protoc_insertion_point(field_get:CStorePageFilter.ContentHubFilter.OptInInfo.prune_tagid)
  return _internal_prune_tagid();
}
inline void CStorePageFilter_ContentHubFilter_OptInInfo::_internal_set_prune_tagid(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  prune_tagid_ = value;
}
inline void CStorePageFilter_ContentHubFilter_OptInInfo::set_prune_tagid(uint32_t value) {
  _internal_set_prune_tagid(value);
  // @@protoc_insertion_point(field_set:CStorePageFilter.ContentHubFilter.OptInInfo.prune_tagid)
}

// optional bool optin_only = 4;
inline bool CStorePageFilter_ContentHubFilter_OptInInfo::_internal_has_optin_only() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CStorePageFilter_ContentHubFilter_OptInInfo::has_optin_only() const {
  return _internal_has_optin_only();
}
inline void CStorePageFilter_ContentHubFilter_OptInInfo::clear_optin_only() {
  optin_only_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CStorePageFilter_ContentHubFilter_OptInInfo::_internal_optin_only() const {
  return optin_only_;
}
inline bool CStorePageFilter_ContentHubFilter_OptInInfo::optin_only() const {
  // @@protoc_insertion_point(field_get:CStorePageFilter.ContentHubFilter.OptInInfo.optin_only)
  return _internal_optin_only();
}
inline void CStorePageFilter_ContentHubFilter_OptInInfo::_internal_set_optin_only(bool value) {
  _has_bits_[0] |= 0x00000008u;
  optin_only_ = value;
}
inline void CStorePageFilter_ContentHubFilter_OptInInfo::set_optin_only(bool value) {
  _internal_set_optin_only(value);
  // @@protoc_insertion_point(field_set:CStorePageFilter.ContentHubFilter.OptInInfo.optin_only)
}

// -------------------------------------------------------------------

// CStorePageFilter_ContentHubFilter

// optional string hub_type = 1;
inline bool CStorePageFilter_ContentHubFilter::_internal_has_hub_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CStorePageFilter_ContentHubFilter::has_hub_type() const {
  return _internal_has_hub_type();
}
inline void CStorePageFilter_ContentHubFilter::clear_hub_type() {
  hub_type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CStorePageFilter_ContentHubFilter::hub_type() const {
  // @@protoc_insertion_point(field_get:CStorePageFilter.ContentHubFilter.hub_type)
  return _internal_hub_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CStorePageFilter_ContentHubFilter::set_hub_type(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 hub_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CStorePageFilter.ContentHubFilter.hub_type)
}
inline std::string* CStorePageFilter_ContentHubFilter::mutable_hub_type() {
  std::string* _s = _internal_mutable_hub_type();
  // @@protoc_insertion_point(field_mutable:CStorePageFilter.ContentHubFilter.hub_type)
  return _s;
}
inline const std::string& CStorePageFilter_ContentHubFilter::_internal_hub_type() const {
  return hub_type_.Get();
}
inline void CStorePageFilter_ContentHubFilter::_internal_set_hub_type(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  hub_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CStorePageFilter_ContentHubFilter::_internal_mutable_hub_type() {
  _has_bits_[0] |= 0x00000001u;
  return hub_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CStorePageFilter_ContentHubFilter::release_hub_type() {
  // @@protoc_insertion_point(field_release:CStorePageFilter.ContentHubFilter.hub_type)
  if (!_internal_has_hub_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = hub_type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (hub_type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    hub_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CStorePageFilter_ContentHubFilter::set_allocated_hub_type(std::string* hub_type) {
  if (hub_type != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  hub_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hub_type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (hub_type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    hub_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CStorePageFilter.ContentHubFilter.hub_type)
}

// optional string hub_category = 2;
inline bool CStorePageFilter_ContentHubFilter::_internal_has_hub_category() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CStorePageFilter_ContentHubFilter::has_hub_category() const {
  return _internal_has_hub_category();
}
inline void CStorePageFilter_ContentHubFilter::clear_hub_category() {
  hub_category_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CStorePageFilter_ContentHubFilter::hub_category() const {
  // @@protoc_insertion_point(field_get:CStorePageFilter.ContentHubFilter.hub_category)
  return _internal_hub_category();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CStorePageFilter_ContentHubFilter::set_hub_category(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 hub_category_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CStorePageFilter.ContentHubFilter.hub_category)
}
inline std::string* CStorePageFilter_ContentHubFilter::mutable_hub_category() {
  std::string* _s = _internal_mutable_hub_category();
  // @@protoc_insertion_point(field_mutable:CStorePageFilter.ContentHubFilter.hub_category)
  return _s;
}
inline const std::string& CStorePageFilter_ContentHubFilter::_internal_hub_category() const {
  return hub_category_.Get();
}
inline void CStorePageFilter_ContentHubFilter::_internal_set_hub_category(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  hub_category_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CStorePageFilter_ContentHubFilter::_internal_mutable_hub_category() {
  _has_bits_[0] |= 0x00000002u;
  return hub_category_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CStorePageFilter_ContentHubFilter::release_hub_category() {
  // @@protoc_insertion_point(field_release:CStorePageFilter.ContentHubFilter.hub_category)
  if (!_internal_has_hub_category()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = hub_category_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (hub_category_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    hub_category_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CStorePageFilter_ContentHubFilter::set_allocated_hub_category(std::string* hub_category) {
  if (hub_category != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  hub_category_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hub_category,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (hub_category_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    hub_category_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CStorePageFilter.ContentHubFilter.hub_category)
}

// optional uint32 hub_tagid = 3;
inline bool CStorePageFilter_ContentHubFilter::_internal_has_hub_tagid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CStorePageFilter_ContentHubFilter::has_hub_tagid() const {
  return _internal_has_hub_tagid();
}
inline void CStorePageFilter_ContentHubFilter::clear_hub_tagid() {
  hub_tagid_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CStorePageFilter_ContentHubFilter::_internal_hub_tagid() const {
  return hub_tagid_;
}
inline uint32_t CStorePageFilter_ContentHubFilter::hub_tagid() const {
  // @@protoc_insertion_point(field_get:CStorePageFilter.ContentHubFilter.hub_tagid)
  return _internal_hub_tagid();
}
inline void CStorePageFilter_ContentHubFilter::_internal_set_hub_tagid(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  hub_tagid_ = value;
}
inline void CStorePageFilter_ContentHubFilter::set_hub_tagid(uint32_t value) {
  _internal_set_hub_tagid(value);
  // @@protoc_insertion_point(field_set:CStorePageFilter.ContentHubFilter.hub_tagid)
}

// optional .EContentHubDiscountFilterType discount_filter = 4 [default = k_EContentHubDiscountFilterType_None];
inline bool CStorePageFilter_ContentHubFilter::_internal_has_discount_filter() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CStorePageFilter_ContentHubFilter::has_discount_filter() const {
  return _internal_has_discount_filter();
}
inline void CStorePageFilter_ContentHubFilter::clear_discount_filter() {
  discount_filter_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::EContentHubDiscountFilterType CStorePageFilter_ContentHubFilter::_internal_discount_filter() const {
  return static_cast< ::EContentHubDiscountFilterType >(discount_filter_);
}
inline ::EContentHubDiscountFilterType CStorePageFilter_ContentHubFilter::discount_filter() const {
  // @@protoc_insertion_point(field_get:CStorePageFilter.ContentHubFilter.discount_filter)
  return _internal_discount_filter();
}
inline void CStorePageFilter_ContentHubFilter::_internal_set_discount_filter(::EContentHubDiscountFilterType value) {
  assert(::EContentHubDiscountFilterType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  discount_filter_ = value;
}
inline void CStorePageFilter_ContentHubFilter::set_discount_filter(::EContentHubDiscountFilterType value) {
  _internal_set_discount_filter(value);
  // @@protoc_insertion_point(field_set:CStorePageFilter.ContentHubFilter.discount_filter)
}

// optional .CStorePageFilter.ContentHubFilter.OptInInfo optin = 5;
inline bool CStorePageFilter_ContentHubFilter::_internal_has_optin() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || optin_ != nullptr);
  return value;
}
inline bool CStorePageFilter_ContentHubFilter::has_optin() const {
  return _internal_has_optin();
}
inline void CStorePageFilter_ContentHubFilter::clear_optin() {
  if (optin_ != nullptr) optin_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::CStorePageFilter_ContentHubFilter_OptInInfo& CStorePageFilter_ContentHubFilter::_internal_optin() const {
  const ::CStorePageFilter_ContentHubFilter_OptInInfo* p = optin_;
  return p != nullptr ? *p : reinterpret_cast<const ::CStorePageFilter_ContentHubFilter_OptInInfo&>(
      ::_CStorePageFilter_ContentHubFilter_OptInInfo_default_instance_);
}
inline const ::CStorePageFilter_ContentHubFilter_OptInInfo& CStorePageFilter_ContentHubFilter::optin() const {
  // @@protoc_insertion_point(field_get:CStorePageFilter.ContentHubFilter.optin)
  return _internal_optin();
}
inline void CStorePageFilter_ContentHubFilter::unsafe_arena_set_allocated_optin(
    ::CStorePageFilter_ContentHubFilter_OptInInfo* optin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(optin_);
  }
  optin_ = optin;
  if (optin) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CStorePageFilter.ContentHubFilter.optin)
}
inline ::CStorePageFilter_ContentHubFilter_OptInInfo* CStorePageFilter_ContentHubFilter::release_optin() {
  _has_bits_[0] &= ~0x00000004u;
  ::CStorePageFilter_ContentHubFilter_OptInInfo* temp = optin_;
  optin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CStorePageFilter_ContentHubFilter_OptInInfo* CStorePageFilter_ContentHubFilter::unsafe_arena_release_optin() {
  // @@protoc_insertion_point(field_release:CStorePageFilter.ContentHubFilter.optin)
  _has_bits_[0] &= ~0x00000004u;
  ::CStorePageFilter_ContentHubFilter_OptInInfo* temp = optin_;
  optin_ = nullptr;
  return temp;
}
inline ::CStorePageFilter_ContentHubFilter_OptInInfo* CStorePageFilter_ContentHubFilter::_internal_mutable_optin() {
  _has_bits_[0] |= 0x00000004u;
  if (optin_ == nullptr) {
    auto* p = CreateMaybeMessage<::CStorePageFilter_ContentHubFilter_OptInInfo>(GetArenaForAllocation());
    optin_ = p;
  }
  return optin_;
}
inline ::CStorePageFilter_ContentHubFilter_OptInInfo* CStorePageFilter_ContentHubFilter::mutable_optin() {
  ::CStorePageFilter_ContentHubFilter_OptInInfo* _msg = _internal_mutable_optin();
  // @@protoc_insertion_point(field_mutable:CStorePageFilter.ContentHubFilter.optin)
  return _msg;
}
inline void CStorePageFilter_ContentHubFilter::set_allocated_optin(::CStorePageFilter_ContentHubFilter_OptInInfo* optin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete optin_;
  }
  if (optin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CStorePageFilter_ContentHubFilter_OptInInfo>::GetOwningArena(optin);
    if (message_arena != submessage_arena) {
      optin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, optin, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  optin_ = optin;
  // @@protoc_insertion_point(field_set_allocated:CStorePageFilter.ContentHubFilter.optin)
}

// -------------------------------------------------------------------

// CStorePageFilter_StoreFilter

// optional string filter_json = 1;
inline bool CStorePageFilter_StoreFilter::_internal_has_filter_json() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CStorePageFilter_StoreFilter::has_filter_json() const {
  return _internal_has_filter_json();
}
inline void CStorePageFilter_StoreFilter::clear_filter_json() {
  filter_json_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CStorePageFilter_StoreFilter::filter_json() const {
  // @@protoc_insertion_point(field_get:CStorePageFilter.StoreFilter.filter_json)
  return _internal_filter_json();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CStorePageFilter_StoreFilter::set_filter_json(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 filter_json_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CStorePageFilter.StoreFilter.filter_json)
}
inline std::string* CStorePageFilter_StoreFilter::mutable_filter_json() {
  std::string* _s = _internal_mutable_filter_json();
  // @@protoc_insertion_point(field_mutable:CStorePageFilter.StoreFilter.filter_json)
  return _s;
}
inline const std::string& CStorePageFilter_StoreFilter::_internal_filter_json() const {
  return filter_json_.Get();
}
inline void CStorePageFilter_StoreFilter::_internal_set_filter_json(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  filter_json_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CStorePageFilter_StoreFilter::_internal_mutable_filter_json() {
  _has_bits_[0] |= 0x00000001u;
  return filter_json_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CStorePageFilter_StoreFilter::release_filter_json() {
  // @@protoc_insertion_point(field_release:CStorePageFilter.StoreFilter.filter_json)
  if (!_internal_has_filter_json()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = filter_json_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (filter_json_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    filter_json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CStorePageFilter_StoreFilter::set_allocated_filter_json(std::string* filter_json) {
  if (filter_json != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  filter_json_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filter_json,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (filter_json_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    filter_json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CStorePageFilter.StoreFilter.filter_json)
}

// optional string cache_key = 2;
inline bool CStorePageFilter_StoreFilter::_internal_has_cache_key() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CStorePageFilter_StoreFilter::has_cache_key() const {
  return _internal_has_cache_key();
}
inline void CStorePageFilter_StoreFilter::clear_cache_key() {
  cache_key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CStorePageFilter_StoreFilter::cache_key() const {
  // @@protoc_insertion_point(field_get:CStorePageFilter.StoreFilter.cache_key)
  return _internal_cache_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CStorePageFilter_StoreFilter::set_cache_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 cache_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CStorePageFilter.StoreFilter.cache_key)
}
inline std::string* CStorePageFilter_StoreFilter::mutable_cache_key() {
  std::string* _s = _internal_mutable_cache_key();
  // @@protoc_insertion_point(field_mutable:CStorePageFilter.StoreFilter.cache_key)
  return _s;
}
inline const std::string& CStorePageFilter_StoreFilter::_internal_cache_key() const {
  return cache_key_.Get();
}
inline void CStorePageFilter_StoreFilter::_internal_set_cache_key(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  cache_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CStorePageFilter_StoreFilter::_internal_mutable_cache_key() {
  _has_bits_[0] |= 0x00000002u;
  return cache_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CStorePageFilter_StoreFilter::release_cache_key() {
  // @@protoc_insertion_point(field_release:CStorePageFilter.StoreFilter.cache_key)
  if (!_internal_has_cache_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = cache_key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cache_key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    cache_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CStorePageFilter_StoreFilter::set_allocated_cache_key(std::string* cache_key) {
  if (cache_key != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  cache_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cache_key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cache_key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    cache_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CStorePageFilter.StoreFilter.cache_key)
}

// -------------------------------------------------------------------

// CStorePageFilter

// optional .CStorePageFilter.SalePageFilter sale_filter = 1;
inline bool CStorePageFilter::_internal_has_sale_filter() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || sale_filter_ != nullptr);
  return value;
}
inline bool CStorePageFilter::has_sale_filter() const {
  return _internal_has_sale_filter();
}
inline void CStorePageFilter::clear_sale_filter() {
  if (sale_filter_ != nullptr) sale_filter_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CStorePageFilter_SalePageFilter& CStorePageFilter::_internal_sale_filter() const {
  const ::CStorePageFilter_SalePageFilter* p = sale_filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::CStorePageFilter_SalePageFilter&>(
      ::_CStorePageFilter_SalePageFilter_default_instance_);
}
inline const ::CStorePageFilter_SalePageFilter& CStorePageFilter::sale_filter() const {
  // @@protoc_insertion_point(field_get:CStorePageFilter.sale_filter)
  return _internal_sale_filter();
}
inline void CStorePageFilter::unsafe_arena_set_allocated_sale_filter(
    ::CStorePageFilter_SalePageFilter* sale_filter) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sale_filter_);
  }
  sale_filter_ = sale_filter;
  if (sale_filter) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CStorePageFilter.sale_filter)
}
inline ::CStorePageFilter_SalePageFilter* CStorePageFilter::release_sale_filter() {
  _has_bits_[0] &= ~0x00000001u;
  ::CStorePageFilter_SalePageFilter* temp = sale_filter_;
  sale_filter_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CStorePageFilter_SalePageFilter* CStorePageFilter::unsafe_arena_release_sale_filter() {
  // @@protoc_insertion_point(field_release:CStorePageFilter.sale_filter)
  _has_bits_[0] &= ~0x00000001u;
  ::CStorePageFilter_SalePageFilter* temp = sale_filter_;
  sale_filter_ = nullptr;
  return temp;
}
inline ::CStorePageFilter_SalePageFilter* CStorePageFilter::_internal_mutable_sale_filter() {
  _has_bits_[0] |= 0x00000001u;
  if (sale_filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::CStorePageFilter_SalePageFilter>(GetArenaForAllocation());
    sale_filter_ = p;
  }
  return sale_filter_;
}
inline ::CStorePageFilter_SalePageFilter* CStorePageFilter::mutable_sale_filter() {
  ::CStorePageFilter_SalePageFilter* _msg = _internal_mutable_sale_filter();
  // @@protoc_insertion_point(field_mutable:CStorePageFilter.sale_filter)
  return _msg;
}
inline void CStorePageFilter::set_allocated_sale_filter(::CStorePageFilter_SalePageFilter* sale_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete sale_filter_;
  }
  if (sale_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CStorePageFilter_SalePageFilter>::GetOwningArena(sale_filter);
    if (message_arena != submessage_arena) {
      sale_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sale_filter, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sale_filter_ = sale_filter;
  // @@protoc_insertion_point(field_set_allocated:CStorePageFilter.sale_filter)
}

// optional .CStorePageFilter.ContentHubFilter content_hub_filter = 2;
inline bool CStorePageFilter::_internal_has_content_hub_filter() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || content_hub_filter_ != nullptr);
  return value;
}
inline bool CStorePageFilter::has_content_hub_filter() const {
  return _internal_has_content_hub_filter();
}
inline void CStorePageFilter::clear_content_hub_filter() {
  if (content_hub_filter_ != nullptr) content_hub_filter_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::CStorePageFilter_ContentHubFilter& CStorePageFilter::_internal_content_hub_filter() const {
  const ::CStorePageFilter_ContentHubFilter* p = content_hub_filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::CStorePageFilter_ContentHubFilter&>(
      ::_CStorePageFilter_ContentHubFilter_default_instance_);
}
inline const ::CStorePageFilter_ContentHubFilter& CStorePageFilter::content_hub_filter() const {
  // @@protoc_insertion_point(field_get:CStorePageFilter.content_hub_filter)
  return _internal_content_hub_filter();
}
inline void CStorePageFilter::unsafe_arena_set_allocated_content_hub_filter(
    ::CStorePageFilter_ContentHubFilter* content_hub_filter) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(content_hub_filter_);
  }
  content_hub_filter_ = content_hub_filter;
  if (content_hub_filter) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CStorePageFilter.content_hub_filter)
}
inline ::CStorePageFilter_ContentHubFilter* CStorePageFilter::release_content_hub_filter() {
  _has_bits_[0] &= ~0x00000002u;
  ::CStorePageFilter_ContentHubFilter* temp = content_hub_filter_;
  content_hub_filter_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CStorePageFilter_ContentHubFilter* CStorePageFilter::unsafe_arena_release_content_hub_filter() {
  // @@protoc_insertion_point(field_release:CStorePageFilter.content_hub_filter)
  _has_bits_[0] &= ~0x00000002u;
  ::CStorePageFilter_ContentHubFilter* temp = content_hub_filter_;
  content_hub_filter_ = nullptr;
  return temp;
}
inline ::CStorePageFilter_ContentHubFilter* CStorePageFilter::_internal_mutable_content_hub_filter() {
  _has_bits_[0] |= 0x00000002u;
  if (content_hub_filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::CStorePageFilter_ContentHubFilter>(GetArenaForAllocation());
    content_hub_filter_ = p;
  }
  return content_hub_filter_;
}
inline ::CStorePageFilter_ContentHubFilter* CStorePageFilter::mutable_content_hub_filter() {
  ::CStorePageFilter_ContentHubFilter* _msg = _internal_mutable_content_hub_filter();
  // @@protoc_insertion_point(field_mutable:CStorePageFilter.content_hub_filter)
  return _msg;
}
inline void CStorePageFilter::set_allocated_content_hub_filter(::CStorePageFilter_ContentHubFilter* content_hub_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete content_hub_filter_;
  }
  if (content_hub_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CStorePageFilter_ContentHubFilter>::GetOwningArena(content_hub_filter);
    if (message_arena != submessage_arena) {
      content_hub_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, content_hub_filter, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  content_hub_filter_ = content_hub_filter;
  // @@protoc_insertion_point(field_set_allocated:CStorePageFilter.content_hub_filter)
}

// repeated .CStorePageFilter.StoreFilter store_filters = 3;
inline int CStorePageFilter::_internal_store_filters_size() const {
  return store_filters_.size();
}
inline int CStorePageFilter::store_filters_size() const {
  return _internal_store_filters_size();
}
inline void CStorePageFilter::clear_store_filters() {
  store_filters_.Clear();
}
inline ::CStorePageFilter_StoreFilter* CStorePageFilter::mutable_store_filters(int index) {
  // @@protoc_insertion_point(field_mutable:CStorePageFilter.store_filters)
  return store_filters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CStorePageFilter_StoreFilter >*
CStorePageFilter::mutable_store_filters() {
  // @@protoc_insertion_point(field_mutable_list:CStorePageFilter.store_filters)
  return &store_filters_;
}
inline const ::CStorePageFilter_StoreFilter& CStorePageFilter::_internal_store_filters(int index) const {
  return store_filters_.Get(index);
}
inline const ::CStorePageFilter_StoreFilter& CStorePageFilter::store_filters(int index) const {
  // @@protoc_insertion_point(field_get:CStorePageFilter.store_filters)
  return _internal_store_filters(index);
}
inline ::CStorePageFilter_StoreFilter* CStorePageFilter::_internal_add_store_filters() {
  return store_filters_.Add();
}
inline ::CStorePageFilter_StoreFilter* CStorePageFilter::add_store_filters() {
  ::CStorePageFilter_StoreFilter* _add = _internal_add_store_filters();
  // @@protoc_insertion_point(field_add:CStorePageFilter.store_filters)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CStorePageFilter_StoreFilter >&
CStorePageFilter::store_filters() const {
  // @@protoc_insertion_point(field_list:CStorePageFilter.store_filters)
  return store_filters_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::EContentHubDiscountFilterType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EContentHubDiscountFilterType>() {
  return ::EContentHubDiscountFilterType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_contenthubs_2eproto
