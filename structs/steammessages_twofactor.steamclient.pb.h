// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_twofactor.steamclient.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_steammessages_5ftwofactor_2esteamclient_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_steammessages_5ftwofactor_2esteamclient_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "steammessages_base.pb.h"
#include "steammessages_unified_base.steamclient.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_5ftwofactor_2esteamclient_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_5ftwofactor_2esteamclient_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[19]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5ftwofactor_2esteamclient_2eproto;
class CRemoveAuthenticatorViaChallengeContinue_Replacement_Token;
struct CRemoveAuthenticatorViaChallengeContinue_Replacement_TokenDefaultTypeInternal;
extern CRemoveAuthenticatorViaChallengeContinue_Replacement_TokenDefaultTypeInternal _CRemoveAuthenticatorViaChallengeContinue_Replacement_Token_default_instance_;
class CTwoFactor_AddAuthenticator_Request;
struct CTwoFactor_AddAuthenticator_RequestDefaultTypeInternal;
extern CTwoFactor_AddAuthenticator_RequestDefaultTypeInternal _CTwoFactor_AddAuthenticator_Request_default_instance_;
class CTwoFactor_AddAuthenticator_Response;
struct CTwoFactor_AddAuthenticator_ResponseDefaultTypeInternal;
extern CTwoFactor_AddAuthenticator_ResponseDefaultTypeInternal _CTwoFactor_AddAuthenticator_Response_default_instance_;
class CTwoFactor_FinalizeAddAuthenticator_Request;
struct CTwoFactor_FinalizeAddAuthenticator_RequestDefaultTypeInternal;
extern CTwoFactor_FinalizeAddAuthenticator_RequestDefaultTypeInternal _CTwoFactor_FinalizeAddAuthenticator_Request_default_instance_;
class CTwoFactor_FinalizeAddAuthenticator_Response;
struct CTwoFactor_FinalizeAddAuthenticator_ResponseDefaultTypeInternal;
extern CTwoFactor_FinalizeAddAuthenticator_ResponseDefaultTypeInternal _CTwoFactor_FinalizeAddAuthenticator_Response_default_instance_;
class CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request;
struct CTwoFactor_RemoveAuthenticatorViaChallengeContinue_RequestDefaultTypeInternal;
extern CTwoFactor_RemoveAuthenticatorViaChallengeContinue_RequestDefaultTypeInternal _CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request_default_instance_;
class CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response;
struct CTwoFactor_RemoveAuthenticatorViaChallengeContinue_ResponseDefaultTypeInternal;
extern CTwoFactor_RemoveAuthenticatorViaChallengeContinue_ResponseDefaultTypeInternal _CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response_default_instance_;
class CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request;
struct CTwoFactor_RemoveAuthenticatorViaChallengeStart_RequestDefaultTypeInternal;
extern CTwoFactor_RemoveAuthenticatorViaChallengeStart_RequestDefaultTypeInternal _CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request_default_instance_;
class CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response;
struct CTwoFactor_RemoveAuthenticatorViaChallengeStart_ResponseDefaultTypeInternal;
extern CTwoFactor_RemoveAuthenticatorViaChallengeStart_ResponseDefaultTypeInternal _CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response_default_instance_;
class CTwoFactor_RemoveAuthenticator_Request;
struct CTwoFactor_RemoveAuthenticator_RequestDefaultTypeInternal;
extern CTwoFactor_RemoveAuthenticator_RequestDefaultTypeInternal _CTwoFactor_RemoveAuthenticator_Request_default_instance_;
class CTwoFactor_RemoveAuthenticator_Response;
struct CTwoFactor_RemoveAuthenticator_ResponseDefaultTypeInternal;
extern CTwoFactor_RemoveAuthenticator_ResponseDefaultTypeInternal _CTwoFactor_RemoveAuthenticator_Response_default_instance_;
class CTwoFactor_SendEmail_Request;
struct CTwoFactor_SendEmail_RequestDefaultTypeInternal;
extern CTwoFactor_SendEmail_RequestDefaultTypeInternal _CTwoFactor_SendEmail_Request_default_instance_;
class CTwoFactor_SendEmail_Response;
struct CTwoFactor_SendEmail_ResponseDefaultTypeInternal;
extern CTwoFactor_SendEmail_ResponseDefaultTypeInternal _CTwoFactor_SendEmail_Response_default_instance_;
class CTwoFactor_Status_Request;
struct CTwoFactor_Status_RequestDefaultTypeInternal;
extern CTwoFactor_Status_RequestDefaultTypeInternal _CTwoFactor_Status_Request_default_instance_;
class CTwoFactor_Status_Response;
struct CTwoFactor_Status_ResponseDefaultTypeInternal;
extern CTwoFactor_Status_ResponseDefaultTypeInternal _CTwoFactor_Status_Response_default_instance_;
class CTwoFactor_Time_Request;
struct CTwoFactor_Time_RequestDefaultTypeInternal;
extern CTwoFactor_Time_RequestDefaultTypeInternal _CTwoFactor_Time_Request_default_instance_;
class CTwoFactor_Time_Response;
struct CTwoFactor_Time_ResponseDefaultTypeInternal;
extern CTwoFactor_Time_ResponseDefaultTypeInternal _CTwoFactor_Time_Response_default_instance_;
class CTwoFactor_UpdateTokenVersion_Request;
struct CTwoFactor_UpdateTokenVersion_RequestDefaultTypeInternal;
extern CTwoFactor_UpdateTokenVersion_RequestDefaultTypeInternal _CTwoFactor_UpdateTokenVersion_Request_default_instance_;
class CTwoFactor_UpdateTokenVersion_Response;
struct CTwoFactor_UpdateTokenVersion_ResponseDefaultTypeInternal;
extern CTwoFactor_UpdateTokenVersion_ResponseDefaultTypeInternal _CTwoFactor_UpdateTokenVersion_Response_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CRemoveAuthenticatorViaChallengeContinue_Replacement_Token* Arena::CreateMaybeMessage<::CRemoveAuthenticatorViaChallengeContinue_Replacement_Token>(Arena*);
template<> ::CTwoFactor_AddAuthenticator_Request* Arena::CreateMaybeMessage<::CTwoFactor_AddAuthenticator_Request>(Arena*);
template<> ::CTwoFactor_AddAuthenticator_Response* Arena::CreateMaybeMessage<::CTwoFactor_AddAuthenticator_Response>(Arena*);
template<> ::CTwoFactor_FinalizeAddAuthenticator_Request* Arena::CreateMaybeMessage<::CTwoFactor_FinalizeAddAuthenticator_Request>(Arena*);
template<> ::CTwoFactor_FinalizeAddAuthenticator_Response* Arena::CreateMaybeMessage<::CTwoFactor_FinalizeAddAuthenticator_Response>(Arena*);
template<> ::CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request* Arena::CreateMaybeMessage<::CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request>(Arena*);
template<> ::CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response* Arena::CreateMaybeMessage<::CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response>(Arena*);
template<> ::CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request* Arena::CreateMaybeMessage<::CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request>(Arena*);
template<> ::CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response* Arena::CreateMaybeMessage<::CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response>(Arena*);
template<> ::CTwoFactor_RemoveAuthenticator_Request* Arena::CreateMaybeMessage<::CTwoFactor_RemoveAuthenticator_Request>(Arena*);
template<> ::CTwoFactor_RemoveAuthenticator_Response* Arena::CreateMaybeMessage<::CTwoFactor_RemoveAuthenticator_Response>(Arena*);
template<> ::CTwoFactor_SendEmail_Request* Arena::CreateMaybeMessage<::CTwoFactor_SendEmail_Request>(Arena*);
template<> ::CTwoFactor_SendEmail_Response* Arena::CreateMaybeMessage<::CTwoFactor_SendEmail_Response>(Arena*);
template<> ::CTwoFactor_Status_Request* Arena::CreateMaybeMessage<::CTwoFactor_Status_Request>(Arena*);
template<> ::CTwoFactor_Status_Response* Arena::CreateMaybeMessage<::CTwoFactor_Status_Response>(Arena*);
template<> ::CTwoFactor_Time_Request* Arena::CreateMaybeMessage<::CTwoFactor_Time_Request>(Arena*);
template<> ::CTwoFactor_Time_Response* Arena::CreateMaybeMessage<::CTwoFactor_Time_Response>(Arena*);
template<> ::CTwoFactor_UpdateTokenVersion_Request* Arena::CreateMaybeMessage<::CTwoFactor_UpdateTokenVersion_Request>(Arena*);
template<> ::CTwoFactor_UpdateTokenVersion_Response* Arena::CreateMaybeMessage<::CTwoFactor_UpdateTokenVersion_Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class CTwoFactor_Time_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CTwoFactor_Time_Request) */ {
 public:
  inline CTwoFactor_Time_Request() : CTwoFactor_Time_Request(nullptr) {}
  ~CTwoFactor_Time_Request() override;
  explicit constexpr CTwoFactor_Time_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CTwoFactor_Time_Request(const CTwoFactor_Time_Request& from);
  CTwoFactor_Time_Request(CTwoFactor_Time_Request&& from) noexcept
    : CTwoFactor_Time_Request() {
    *this = ::std::move(from);
  }

  inline CTwoFactor_Time_Request& operator=(const CTwoFactor_Time_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTwoFactor_Time_Request& operator=(CTwoFactor_Time_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CTwoFactor_Time_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CTwoFactor_Time_Request* internal_default_instance() {
    return reinterpret_cast<const CTwoFactor_Time_Request*>(
               &_CTwoFactor_Time_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CTwoFactor_Time_Request& a, CTwoFactor_Time_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CTwoFactor_Time_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CTwoFactor_Time_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CTwoFactor_Time_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CTwoFactor_Time_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CTwoFactor_Time_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CTwoFactor_Time_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CTwoFactor_Time_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CTwoFactor_Time_Request";
  }
  protected:
  explicit CTwoFactor_Time_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSenderTimeFieldNumber = 1,
  };
  // optional uint64 sender_time = 1 [(.description) = "Current time on the sender (for stats, don\'t trust this)"];
  bool has_sender_time() const;
  private:
  bool _internal_has_sender_time() const;
  public:
  void clear_sender_time();
  uint64_t sender_time() const;
  void set_sender_time(uint64_t value);
  private:
  uint64_t _internal_sender_time() const;
  void _internal_set_sender_time(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CTwoFactor_Time_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t sender_time_;
  friend struct ::TableStruct_steammessages_5ftwofactor_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CTwoFactor_Time_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CTwoFactor_Time_Response) */ {
 public:
  inline CTwoFactor_Time_Response() : CTwoFactor_Time_Response(nullptr) {}
  ~CTwoFactor_Time_Response() override;
  explicit constexpr CTwoFactor_Time_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CTwoFactor_Time_Response(const CTwoFactor_Time_Response& from);
  CTwoFactor_Time_Response(CTwoFactor_Time_Response&& from) noexcept
    : CTwoFactor_Time_Response() {
    *this = ::std::move(from);
  }

  inline CTwoFactor_Time_Response& operator=(const CTwoFactor_Time_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTwoFactor_Time_Response& operator=(CTwoFactor_Time_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CTwoFactor_Time_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CTwoFactor_Time_Response* internal_default_instance() {
    return reinterpret_cast<const CTwoFactor_Time_Response*>(
               &_CTwoFactor_Time_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CTwoFactor_Time_Response& a, CTwoFactor_Time_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CTwoFactor_Time_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CTwoFactor_Time_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CTwoFactor_Time_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CTwoFactor_Time_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CTwoFactor_Time_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CTwoFactor_Time_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CTwoFactor_Time_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CTwoFactor_Time_Response";
  }
  protected:
  explicit CTwoFactor_Time_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerTimeFieldNumber = 1,
    kSkewToleranceSecondsFieldNumber = 2,
    kLargeTimeJinkFieldNumber = 3,
    kProbeFrequencySecondsFieldNumber = 4,
    kAdjustedTimeProbeFrequencySecondsFieldNumber = 5,
    kHintProbeFrequencySecondsFieldNumber = 6,
    kSyncTimeoutFieldNumber = 7,
    kTryAgainSecondsFieldNumber = 8,
    kMaxAttemptsFieldNumber = 9,
  };
  // optional uint64 server_time = 1 [(.description) = "Current server time"];
  bool has_server_time() const;
  private:
  bool _internal_has_server_time() const;
  public:
  void clear_server_time();
  uint64_t server_time() const;
  void set_server_time(uint64_t value);
  private:
  uint64_t _internal_server_time() const;
  void _internal_set_server_time(uint64_t value);
  public:

  // optional uint64 skew_tolerance_seconds = 2 [(.description) = "Time skew we\'ll tolerate before applying an adjustment"];
  bool has_skew_tolerance_seconds() const;
  private:
  bool _internal_has_skew_tolerance_seconds() const;
  public:
  void clear_skew_tolerance_seconds();
  uint64_t skew_tolerance_seconds() const;
  void set_skew_tolerance_seconds(uint64_t value);
  private:
  uint64_t _internal_skew_tolerance_seconds() const;
  void _internal_set_skew_tolerance_seconds(uint64_t value);
  public:

  // optional uint64 large_time_jink = 3 [(.description) = "Re-sync if local time jitters by this much"];
  bool has_large_time_jink() const;
  private:
  bool _internal_has_large_time_jink() const;
  public:
  void clear_large_time_jink();
  uint64_t large_time_jink() const;
  void set_large_time_jink(uint64_t value);
  private:
  uint64_t _internal_large_time_jink() const;
  void _internal_set_large_time_jink(uint64_t value);
  public:

  // optional uint32 probe_frequency_seconds = 4 [(.description) = "Time probe frequency if phone time is synchronized"];
  bool has_probe_frequency_seconds() const;
  private:
  bool _internal_has_probe_frequency_seconds() const;
  public:
  void clear_probe_frequency_seconds();
  uint32_t probe_frequency_seconds() const;
  void set_probe_frequency_seconds(uint32_t value);
  private:
  uint32_t _internal_probe_frequency_seconds() const;
  void _internal_set_probe_frequency_seconds(uint32_t value);
  public:

  // optional uint32 adjusted_time_probe_frequency_seconds = 5 [(.description) = "Time probe frequency if phone time is not synchronized"];
  bool has_adjusted_time_probe_frequency_seconds() const;
  private:
  bool _internal_has_adjusted_time_probe_frequency_seconds() const;
  public:
  void clear_adjusted_time_probe_frequency_seconds();
  uint32_t adjusted_time_probe_frequency_seconds() const;
  void set_adjusted_time_probe_frequency_seconds(uint32_t value);
  private:
  uint32_t _internal_adjusted_time_probe_frequency_seconds() const;
  void _internal_set_adjusted_time_probe_frequency_seconds(uint32_t value);
  public:

  // optional uint32 hint_probe_frequency_seconds = 6 [(.description) = "Floor of probe frequency, no matter what"];
  bool has_hint_probe_frequency_seconds() const;
  private:
  bool _internal_has_hint_probe_frequency_seconds() const;
  public:
  void clear_hint_probe_frequency_seconds();
  uint32_t hint_probe_frequency_seconds() const;
  void set_hint_probe_frequency_seconds(uint32_t value);
  private:
  uint32_t _internal_hint_probe_frequency_seconds() const;
  void _internal_set_hint_probe_frequency_seconds(uint32_t value);
  public:

  // optional uint32 sync_timeout = 7 [(.description) = "More than this, and we call the current sync failed"];
  bool has_sync_timeout() const;
  private:
  bool _internal_has_sync_timeout() const;
  public:
  void clear_sync_timeout();
  uint32_t sync_timeout() const;
  void set_sync_timeout(uint32_t value);
  private:
  uint32_t _internal_sync_timeout() const;
  void _internal_set_sync_timeout(uint32_t value);
  public:

  // optional uint32 try_again_seconds = 8 [(.description) = "Seconds to try again after a failed sync"];
  bool has_try_again_seconds() const;
  private:
  bool _internal_has_try_again_seconds() const;
  public:
  void clear_try_again_seconds();
  uint32_t try_again_seconds() const;
  void set_try_again_seconds(uint32_t value);
  private:
  uint32_t _internal_try_again_seconds() const;
  void _internal_set_try_again_seconds(uint32_t value);
  public:

  // optional uint32 max_attempts = 9 [(.description) = "# times we\'ll ask for server time before we bail"];
  bool has_max_attempts() const;
  private:
  bool _internal_has_max_attempts() const;
  public:
  void clear_max_attempts();
  uint32_t max_attempts() const;
  void set_max_attempts(uint32_t value);
  private:
  uint32_t _internal_max_attempts() const;
  void _internal_set_max_attempts(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CTwoFactor_Time_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t server_time_;
  uint64_t skew_tolerance_seconds_;
  uint64_t large_time_jink_;
  uint32_t probe_frequency_seconds_;
  uint32_t adjusted_time_probe_frequency_seconds_;
  uint32_t hint_probe_frequency_seconds_;
  uint32_t sync_timeout_;
  uint32_t try_again_seconds_;
  uint32_t max_attempts_;
  friend struct ::TableStruct_steammessages_5ftwofactor_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CTwoFactor_Status_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CTwoFactor_Status_Request) */ {
 public:
  inline CTwoFactor_Status_Request() : CTwoFactor_Status_Request(nullptr) {}
  ~CTwoFactor_Status_Request() override;
  explicit constexpr CTwoFactor_Status_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CTwoFactor_Status_Request(const CTwoFactor_Status_Request& from);
  CTwoFactor_Status_Request(CTwoFactor_Status_Request&& from) noexcept
    : CTwoFactor_Status_Request() {
    *this = ::std::move(from);
  }

  inline CTwoFactor_Status_Request& operator=(const CTwoFactor_Status_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTwoFactor_Status_Request& operator=(CTwoFactor_Status_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CTwoFactor_Status_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CTwoFactor_Status_Request* internal_default_instance() {
    return reinterpret_cast<const CTwoFactor_Status_Request*>(
               &_CTwoFactor_Status_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CTwoFactor_Status_Request& a, CTwoFactor_Status_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CTwoFactor_Status_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CTwoFactor_Status_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CTwoFactor_Status_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CTwoFactor_Status_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CTwoFactor_Status_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CTwoFactor_Status_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CTwoFactor_Status_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CTwoFactor_Status_Request";
  }
  protected:
  explicit CTwoFactor_Status_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidFieldNumber = 1,
  };
  // optional fixed64 steamid = 1 [(.description) = "steamid to use"];
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CTwoFactor_Status_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t steamid_;
  friend struct ::TableStruct_steammessages_5ftwofactor_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CTwoFactor_Status_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CTwoFactor_Status_Response) */ {
 public:
  inline CTwoFactor_Status_Response() : CTwoFactor_Status_Response(nullptr) {}
  ~CTwoFactor_Status_Response() override;
  explicit constexpr CTwoFactor_Status_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CTwoFactor_Status_Response(const CTwoFactor_Status_Response& from);
  CTwoFactor_Status_Response(CTwoFactor_Status_Response&& from) noexcept
    : CTwoFactor_Status_Response() {
    *this = ::std::move(from);
  }

  inline CTwoFactor_Status_Response& operator=(const CTwoFactor_Status_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTwoFactor_Status_Response& operator=(CTwoFactor_Status_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CTwoFactor_Status_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CTwoFactor_Status_Response* internal_default_instance() {
    return reinterpret_cast<const CTwoFactor_Status_Response*>(
               &_CTwoFactor_Status_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CTwoFactor_Status_Response& a, CTwoFactor_Status_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CTwoFactor_Status_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CTwoFactor_Status_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CTwoFactor_Status_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CTwoFactor_Status_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CTwoFactor_Status_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CTwoFactor_Status_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CTwoFactor_Status_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CTwoFactor_Status_Response";
  }
  protected:
  explicit CTwoFactor_Status_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenGidFieldNumber = 6,
    kDeviceIdentifierFieldNumber = 8,
    kClassifiedAgentFieldNumber = 11,
    kStateFieldNumber = 1,
    kInactivationReasonFieldNumber = 2,
    kAuthenticatorTypeFieldNumber = 3,
    kSteamguardSchemeFieldNumber = 5,
    kAuthenticatorAllowedFieldNumber = 4,
    kEmailValidatedFieldNumber = 7,
    kAllowExternalAuthenticatorFieldNumber = 12,
    kTimeCreatedFieldNumber = 9,
    kRevocationAttemptsRemainingFieldNumber = 10,
    kTimeTransferredFieldNumber = 13,
    kVersionFieldNumber = 14,
  };
  // optional string token_gid = 6 [(.description) = "String rep of token GID assigned by server"];
  bool has_token_gid() const;
  private:
  bool _internal_has_token_gid() const;
  public:
  void clear_token_gid();
  const std::string& token_gid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token_gid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token_gid();
  PROTOBUF_NODISCARD std::string* release_token_gid();
  void set_allocated_token_gid(std::string* token_gid);
  private:
  const std::string& _internal_token_gid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token_gid(const std::string& value);
  std::string* _internal_mutable_token_gid();
  public:

  // optional string device_identifier = 8 [(.description) = "Authenticator (phone) identifier"];
  bool has_device_identifier() const;
  private:
  bool _internal_has_device_identifier() const;
  public:
  void clear_device_identifier();
  const std::string& device_identifier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_device_identifier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_device_identifier();
  PROTOBUF_NODISCARD std::string* release_device_identifier();
  void set_allocated_device_identifier(std::string* device_identifier);
  private:
  const std::string& _internal_device_identifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_identifier(const std::string& value);
  std::string* _internal_mutable_device_identifier();
  public:

  // optional string classified_agent = 11 [(.description) = "Agent that added the authenticator (e.g., ios / android / other)"];
  bool has_classified_agent() const;
  private:
  bool _internal_has_classified_agent() const;
  public:
  void clear_classified_agent();
  const std::string& classified_agent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_classified_agent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_classified_agent();
  PROTOBUF_NODISCARD std::string* release_classified_agent();
  void set_allocated_classified_agent(std::string* classified_agent);
  private:
  const std::string& _internal_classified_agent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_classified_agent(const std::string& value);
  std::string* _internal_mutable_classified_agent();
  public:

  // optional uint32 state = 1 [(.description) = "Authenticator state"];
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  uint32_t state() const;
  void set_state(uint32_t value);
  private:
  uint32_t _internal_state() const;
  void _internal_set_state(uint32_t value);
  public:

  // optional uint32 inactivation_reason = 2 [(.description) = "Inactivation reason (if any)"];
  bool has_inactivation_reason() const;
  private:
  bool _internal_has_inactivation_reason() const;
  public:
  void clear_inactivation_reason();
  uint32_t inactivation_reason() const;
  void set_inactivation_reason(uint32_t value);
  private:
  uint32_t _internal_inactivation_reason() const;
  void _internal_set_inactivation_reason(uint32_t value);
  public:

  // optional uint32 authenticator_type = 3 [(.description) = "Type of authenticator"];
  bool has_authenticator_type() const;
  private:
  bool _internal_has_authenticator_type() const;
  public:
  void clear_authenticator_type();
  uint32_t authenticator_type() const;
  void set_authenticator_type(uint32_t value);
  private:
  uint32_t _internal_authenticator_type() const;
  void _internal_set_authenticator_type(uint32_t value);
  public:

  // optional uint32 steamguard_scheme = 5 [(.description) = "Steam Guard scheme in effect"];
  bool has_steamguard_scheme() const;
  private:
  bool _internal_has_steamguard_scheme() const;
  public:
  void clear_steamguard_scheme();
  uint32_t steamguard_scheme() const;
  void set_steamguard_scheme(uint32_t value);
  private:
  uint32_t _internal_steamguard_scheme() const;
  void _internal_set_steamguard_scheme(uint32_t value);
  public:

  // optional bool authenticator_allowed = 4 [(.description) = "Account allowed to have an authenticator?"];
  bool has_authenticator_allowed() const;
  private:
  bool _internal_has_authenticator_allowed() const;
  public:
  void clear_authenticator_allowed();
  bool authenticator_allowed() const;
  void set_authenticator_allowed(bool value);
  private:
  bool _internal_authenticator_allowed() const;
  void _internal_set_authenticator_allowed(bool value);
  public:

  // optional bool email_validated = 7 [(.description) = "Account has verified email capability"];
  bool has_email_validated() const;
  private:
  bool _internal_has_email_validated() const;
  public:
  void clear_email_validated();
  bool email_validated() const;
  void set_email_validated(bool value);
  private:
  bool _internal_email_validated() const;
  void _internal_set_email_validated(bool value);
  public:

  // optional bool allow_external_authenticator = 12 [(.description) = "Allow a third-party authenticator (in addition to two-factor)"];
  bool has_allow_external_authenticator() const;
  private:
  bool _internal_has_allow_external_authenticator() const;
  public:
  void clear_allow_external_authenticator();
  bool allow_external_authenticator() const;
  void set_allow_external_authenticator(bool value);
  private:
  bool _internal_allow_external_authenticator() const;
  void _internal_set_allow_external_authenticator(bool value);
  public:

  // optional uint32 time_created = 9 [(.description) = "When the token was created"];
  bool has_time_created() const;
  private:
  bool _internal_has_time_created() const;
  public:
  void clear_time_created();
  uint32_t time_created() const;
  void set_time_created(uint32_t value);
  private:
  uint32_t _internal_time_created() const;
  void _internal_set_time_created(uint32_t value);
  public:

  // optional uint32 revocation_attempts_remaining = 10 [(.description) = "Number of revocation code attempts remaining"];
  bool has_revocation_attempts_remaining() const;
  private:
  bool _internal_has_revocation_attempts_remaining() const;
  public:
  void clear_revocation_attempts_remaining();
  uint32_t revocation_attempts_remaining() const;
  void set_revocation_attempts_remaining(uint32_t value);
  private:
  uint32_t _internal_revocation_attempts_remaining() const;
  void _internal_set_revocation_attempts_remaining(uint32_t value);
  public:

  // optional uint32 time_transferred = 13 [(.description) = "When the token was transferred from another device, if applicable"];
  bool has_time_transferred() const;
  private:
  bool _internal_has_time_transferred() const;
  public:
  void clear_time_transferred();
  uint32_t time_transferred() const;
  void set_time_transferred(uint32_t value);
  private:
  uint32_t _internal_time_transferred() const;
  void _internal_set_time_transferred(uint32_t value);
  public:

  // optional uint32 version = 14 [(.description) = "Current token version"];
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  uint32_t version() const;
  void set_version(uint32_t value);
  private:
  uint32_t _internal_version() const;
  void _internal_set_version(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CTwoFactor_Status_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_gid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_identifier_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr classified_agent_;
  uint32_t state_;
  uint32_t inactivation_reason_;
  uint32_t authenticator_type_;
  uint32_t steamguard_scheme_;
  bool authenticator_allowed_;
  bool email_validated_;
  bool allow_external_authenticator_;
  uint32_t time_created_;
  uint32_t revocation_attempts_remaining_;
  uint32_t time_transferred_;
  uint32_t version_;
  friend struct ::TableStruct_steammessages_5ftwofactor_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CTwoFactor_AddAuthenticator_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CTwoFactor_AddAuthenticator_Request) */ {
 public:
  inline CTwoFactor_AddAuthenticator_Request() : CTwoFactor_AddAuthenticator_Request(nullptr) {}
  ~CTwoFactor_AddAuthenticator_Request() override;
  explicit constexpr CTwoFactor_AddAuthenticator_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CTwoFactor_AddAuthenticator_Request(const CTwoFactor_AddAuthenticator_Request& from);
  CTwoFactor_AddAuthenticator_Request(CTwoFactor_AddAuthenticator_Request&& from) noexcept
    : CTwoFactor_AddAuthenticator_Request() {
    *this = ::std::move(from);
  }

  inline CTwoFactor_AddAuthenticator_Request& operator=(const CTwoFactor_AddAuthenticator_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTwoFactor_AddAuthenticator_Request& operator=(CTwoFactor_AddAuthenticator_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CTwoFactor_AddAuthenticator_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CTwoFactor_AddAuthenticator_Request* internal_default_instance() {
    return reinterpret_cast<const CTwoFactor_AddAuthenticator_Request*>(
               &_CTwoFactor_AddAuthenticator_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CTwoFactor_AddAuthenticator_Request& a, CTwoFactor_AddAuthenticator_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CTwoFactor_AddAuthenticator_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CTwoFactor_AddAuthenticator_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CTwoFactor_AddAuthenticator_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CTwoFactor_AddAuthenticator_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CTwoFactor_AddAuthenticator_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CTwoFactor_AddAuthenticator_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CTwoFactor_AddAuthenticator_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CTwoFactor_AddAuthenticator_Request";
  }
  protected:
  explicit CTwoFactor_AddAuthenticator_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHttpHeadersFieldNumber = 7,
    kDeviceIdentifierFieldNumber = 5,
    kSmsPhoneIdFieldNumber = 6,
    kSteamidFieldNumber = 1,
    kAuthenticatorTimeFieldNumber = 2,
    kSerialNumberFieldNumber = 3,
    kAuthenticatorTypeFieldNumber = 4,
    kVersionFieldNumber = 8,
  };
  // repeated string http_headers = 7 [(.description) = "HTTP headers alternating by K/V"];
  int http_headers_size() const;
  private:
  int _internal_http_headers_size() const;
  public:
  void clear_http_headers();
  const std::string& http_headers(int index) const;
  std::string* mutable_http_headers(int index);
  void set_http_headers(int index, const std::string& value);
  void set_http_headers(int index, std::string&& value);
  void set_http_headers(int index, const char* value);
  void set_http_headers(int index, const char* value, size_t size);
  std::string* add_http_headers();
  void add_http_headers(const std::string& value);
  void add_http_headers(std::string&& value);
  void add_http_headers(const char* value);
  void add_http_headers(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& http_headers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_http_headers();
  private:
  const std::string& _internal_http_headers(int index) const;
  std::string* _internal_add_http_headers();
  public:

  // optional string device_identifier = 5 [(.description) = "Authenticator identifier"];
  bool has_device_identifier() const;
  private:
  bool _internal_has_device_identifier() const;
  public:
  void clear_device_identifier();
  const std::string& device_identifier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_device_identifier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_device_identifier();
  PROTOBUF_NODISCARD std::string* release_device_identifier();
  void set_allocated_device_identifier(std::string* device_identifier);
  private:
  const std::string& _internal_device_identifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_identifier(const std::string& value);
  std::string* _internal_mutable_device_identifier();
  public:

  // optional string sms_phone_id = 6 [(.description) = "ID of phone to use for SMS verification"];
  bool has_sms_phone_id() const;
  private:
  bool _internal_has_sms_phone_id() const;
  public:
  void clear_sms_phone_id();
  const std::string& sms_phone_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sms_phone_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sms_phone_id();
  PROTOBUF_NODISCARD std::string* release_sms_phone_id();
  void set_allocated_sms_phone_id(std::string* sms_phone_id);
  private:
  const std::string& _internal_sms_phone_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sms_phone_id(const std::string& value);
  std::string* _internal_mutable_sms_phone_id();
  public:

  // optional fixed64 steamid = 1 [(.description) = "steamid to use"];
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional uint64 authenticator_time = 2 [(.description) = "Current authenticator time"];
  bool has_authenticator_time() const;
  private:
  bool _internal_has_authenticator_time() const;
  public:
  void clear_authenticator_time();
  uint64_t authenticator_time() const;
  void set_authenticator_time(uint64_t value);
  private:
  uint64_t _internal_authenticator_time() const;
  void _internal_set_authenticator_time(uint64_t value);
  public:

  // optional fixed64 serial_number = 3 [(.description) = "locally computed serial (deprecated)"];
  bool has_serial_number() const;
  private:
  bool _internal_has_serial_number() const;
  public:
  void clear_serial_number();
  uint64_t serial_number() const;
  void set_serial_number(uint64_t value);
  private:
  uint64_t _internal_serial_number() const;
  void _internal_set_serial_number(uint64_t value);
  public:

  // optional uint32 authenticator_type = 4 [(.description) = "Authenticator type"];
  bool has_authenticator_type() const;
  private:
  bool _internal_has_authenticator_type() const;
  public:
  void clear_authenticator_type();
  uint32_t authenticator_type() const;
  void set_authenticator_type(uint32_t value);
  private:
  uint32_t _internal_authenticator_type() const;
  void _internal_set_authenticator_type(uint32_t value);
  public:

  // optional uint32 version = 8 [default = 1, (.description) = "What the version of our token should be"];
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  uint32_t version() const;
  void set_version(uint32_t value);
  private:
  uint32_t _internal_version() const;
  void _internal_set_version(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CTwoFactor_AddAuthenticator_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> http_headers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_identifier_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sms_phone_id_;
  uint64_t steamid_;
  uint64_t authenticator_time_;
  uint64_t serial_number_;
  uint32_t authenticator_type_;
  uint32_t version_;
  friend struct ::TableStruct_steammessages_5ftwofactor_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CTwoFactor_AddAuthenticator_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CTwoFactor_AddAuthenticator_Response) */ {
 public:
  inline CTwoFactor_AddAuthenticator_Response() : CTwoFactor_AddAuthenticator_Response(nullptr) {}
  ~CTwoFactor_AddAuthenticator_Response() override;
  explicit constexpr CTwoFactor_AddAuthenticator_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CTwoFactor_AddAuthenticator_Response(const CTwoFactor_AddAuthenticator_Response& from);
  CTwoFactor_AddAuthenticator_Response(CTwoFactor_AddAuthenticator_Response&& from) noexcept
    : CTwoFactor_AddAuthenticator_Response() {
    *this = ::std::move(from);
  }

  inline CTwoFactor_AddAuthenticator_Response& operator=(const CTwoFactor_AddAuthenticator_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTwoFactor_AddAuthenticator_Response& operator=(CTwoFactor_AddAuthenticator_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CTwoFactor_AddAuthenticator_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CTwoFactor_AddAuthenticator_Response* internal_default_instance() {
    return reinterpret_cast<const CTwoFactor_AddAuthenticator_Response*>(
               &_CTwoFactor_AddAuthenticator_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CTwoFactor_AddAuthenticator_Response& a, CTwoFactor_AddAuthenticator_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CTwoFactor_AddAuthenticator_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CTwoFactor_AddAuthenticator_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CTwoFactor_AddAuthenticator_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CTwoFactor_AddAuthenticator_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CTwoFactor_AddAuthenticator_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CTwoFactor_AddAuthenticator_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CTwoFactor_AddAuthenticator_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CTwoFactor_AddAuthenticator_Response";
  }
  protected:
  explicit CTwoFactor_AddAuthenticator_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSharedSecretFieldNumber = 1,
    kRevocationCodeFieldNumber = 3,
    kUriFieldNumber = 4,
    kAccountNameFieldNumber = 6,
    kTokenGidFieldNumber = 7,
    kIdentitySecretFieldNumber = 8,
    kSecret1FieldNumber = 9,
    kPhoneNumberHintFieldNumber = 11,
    kSerialNumberFieldNumber = 2,
    kServerTimeFieldNumber = 5,
    kStatusFieldNumber = 10,
  };
  // optional bytes shared_secret = 1 [(.description) = "Shared secret between server and authenticator"];
  bool has_shared_secret() const;
  private:
  bool _internal_has_shared_secret() const;
  public:
  void clear_shared_secret();
  const std::string& shared_secret() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_shared_secret(ArgT0&& arg0, ArgT... args);
  std::string* mutable_shared_secret();
  PROTOBUF_NODISCARD std::string* release_shared_secret();
  void set_allocated_shared_secret(std::string* shared_secret);
  private:
  const std::string& _internal_shared_secret() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_shared_secret(const std::string& value);
  std::string* _internal_mutable_shared_secret();
  public:

  // optional string revocation_code = 3 [(.description) = "code used to revoke authenticator"];
  bool has_revocation_code() const;
  private:
  bool _internal_has_revocation_code() const;
  public:
  void clear_revocation_code();
  const std::string& revocation_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_revocation_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_revocation_code();
  PROTOBUF_NODISCARD std::string* release_revocation_code();
  void set_allocated_revocation_code(std::string* revocation_code);
  private:
  const std::string& _internal_revocation_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_revocation_code(const std::string& value);
  std::string* _internal_mutable_revocation_code();
  public:

  // optional string uri = 4 [(.description) = "URI for QR code generation"];
  bool has_uri() const;
  private:
  bool _internal_has_uri() const;
  public:
  void clear_uri();
  const std::string& uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uri();
  PROTOBUF_NODISCARD std::string* release_uri();
  void set_allocated_uri(std::string* uri);
  private:
  const std::string& _internal_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uri(const std::string& value);
  std::string* _internal_mutable_uri();
  public:

  // optional string account_name = 6 [(.description) = "Account name to display on token client"];
  bool has_account_name() const;
  private:
  bool _internal_has_account_name() const;
  public:
  void clear_account_name();
  const std::string& account_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account_name();
  PROTOBUF_NODISCARD std::string* release_account_name();
  void set_allocated_account_name(std::string* account_name);
  private:
  const std::string& _internal_account_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_name(const std::string& value);
  std::string* _internal_mutable_account_name();
  public:

  // optional string token_gid = 7 [(.description) = "Token GID assigned by server"];
  bool has_token_gid() const;
  private:
  bool _internal_has_token_gid() const;
  public:
  void clear_token_gid();
  const std::string& token_gid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token_gid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token_gid();
  PROTOBUF_NODISCARD std::string* release_token_gid();
  void set_allocated_token_gid(std::string* token_gid);
  private:
  const std::string& _internal_token_gid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token_gid(const std::string& value);
  std::string* _internal_mutable_token_gid();
  public:

  // optional bytes identity_secret = 8 [(.description) = "Secret used for identity attestation (e.g., for eventing)"];
  bool has_identity_secret() const;
  private:
  bool _internal_has_identity_secret() const;
  public:
  void clear_identity_secret();
  const std::string& identity_secret() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_identity_secret(ArgT0&& arg0, ArgT... args);
  std::string* mutable_identity_secret();
  PROTOBUF_NODISCARD std::string* release_identity_secret();
  void set_allocated_identity_secret(std::string* identity_secret);
  private:
  const std::string& _internal_identity_secret() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_identity_secret(const std::string& value);
  std::string* _internal_mutable_identity_secret();
  public:

  // optional bytes secret_1 = 9 [(.description) = "Spare shared secret"];
  bool has_secret_1() const;
  private:
  bool _internal_has_secret_1() const;
  public:
  void clear_secret_1();
  const std::string& secret_1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_secret_1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_secret_1();
  PROTOBUF_NODISCARD std::string* release_secret_1();
  void set_allocated_secret_1(std::string* secret_1);
  private:
  const std::string& _internal_secret_1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secret_1(const std::string& value);
  std::string* _internal_mutable_secret_1();
  public:

  // optional string phone_number_hint = 11 [(.description) = "a portion of the phone number the SMS code was sent to"];
  bool has_phone_number_hint() const;
  private:
  bool _internal_has_phone_number_hint() const;
  public:
  void clear_phone_number_hint();
  const std::string& phone_number_hint() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_phone_number_hint(ArgT0&& arg0, ArgT... args);
  std::string* mutable_phone_number_hint();
  PROTOBUF_NODISCARD std::string* release_phone_number_hint();
  void set_allocated_phone_number_hint(std::string* phone_number_hint);
  private:
  const std::string& _internal_phone_number_hint() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_phone_number_hint(const std::string& value);
  std::string* _internal_mutable_phone_number_hint();
  public:

  // optional fixed64 serial_number = 2 [(.description) = "Authenticator serial number (unique per token)"];
  bool has_serial_number() const;
  private:
  bool _internal_has_serial_number() const;
  public:
  void clear_serial_number();
  uint64_t serial_number() const;
  void set_serial_number(uint64_t value);
  private:
  uint64_t _internal_serial_number() const;
  void _internal_set_serial_number(uint64_t value);
  public:

  // optional uint64 server_time = 5 [(.description) = "Current server time"];
  bool has_server_time() const;
  private:
  bool _internal_has_server_time() const;
  public:
  void clear_server_time();
  uint64_t server_time() const;
  void set_server_time(uint64_t value);
  private:
  uint64_t _internal_server_time() const;
  void _internal_set_server_time(uint64_t value);
  public:

  // optional int32 status = 10 [(.description) = "Result code"];
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  int32_t status() const;
  void set_status(int32_t value);
  private:
  int32_t _internal_status() const;
  void _internal_set_status(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CTwoFactor_AddAuthenticator_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shared_secret_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr revocation_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_gid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identity_secret_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secret_1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phone_number_hint_;
  uint64_t serial_number_;
  uint64_t server_time_;
  int32_t status_;
  friend struct ::TableStruct_steammessages_5ftwofactor_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CTwoFactor_SendEmail_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CTwoFactor_SendEmail_Request) */ {
 public:
  inline CTwoFactor_SendEmail_Request() : CTwoFactor_SendEmail_Request(nullptr) {}
  ~CTwoFactor_SendEmail_Request() override;
  explicit constexpr CTwoFactor_SendEmail_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CTwoFactor_SendEmail_Request(const CTwoFactor_SendEmail_Request& from);
  CTwoFactor_SendEmail_Request(CTwoFactor_SendEmail_Request&& from) noexcept
    : CTwoFactor_SendEmail_Request() {
    *this = ::std::move(from);
  }

  inline CTwoFactor_SendEmail_Request& operator=(const CTwoFactor_SendEmail_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTwoFactor_SendEmail_Request& operator=(CTwoFactor_SendEmail_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CTwoFactor_SendEmail_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CTwoFactor_SendEmail_Request* internal_default_instance() {
    return reinterpret_cast<const CTwoFactor_SendEmail_Request*>(
               &_CTwoFactor_SendEmail_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CTwoFactor_SendEmail_Request& a, CTwoFactor_SendEmail_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CTwoFactor_SendEmail_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CTwoFactor_SendEmail_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CTwoFactor_SendEmail_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CTwoFactor_SendEmail_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CTwoFactor_SendEmail_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CTwoFactor_SendEmail_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CTwoFactor_SendEmail_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CTwoFactor_SendEmail_Request";
  }
  protected:
  explicit CTwoFactor_SendEmail_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidFieldNumber = 1,
    kEmailTypeFieldNumber = 2,
    kIncludeActivationCodeFieldNumber = 3,
  };
  // optional fixed64 steamid = 1 [(.description) = "Steamid to use"];
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional uint32 email_type = 2 [(.description) = "Type of email to send (ETwoFactorEmailType::*)"];
  bool has_email_type() const;
  private:
  bool _internal_has_email_type() const;
  public:
  void clear_email_type();
  uint32_t email_type() const;
  void set_email_type(uint32_t value);
  private:
  uint32_t _internal_email_type() const;
  void _internal_set_email_type(uint32_t value);
  public:

  // optional bool include_activation_code = 3 [(.description) = "Include activation code in email parameters"];
  bool has_include_activation_code() const;
  private:
  bool _internal_has_include_activation_code() const;
  public:
  void clear_include_activation_code();
  bool include_activation_code() const;
  void set_include_activation_code(bool value);
  private:
  bool _internal_include_activation_code() const;
  void _internal_set_include_activation_code(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CTwoFactor_SendEmail_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t steamid_;
  uint32_t email_type_;
  bool include_activation_code_;
  friend struct ::TableStruct_steammessages_5ftwofactor_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CTwoFactor_SendEmail_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CTwoFactor_SendEmail_Response) */ {
 public:
  inline CTwoFactor_SendEmail_Response() : CTwoFactor_SendEmail_Response(nullptr) {}
  explicit constexpr CTwoFactor_SendEmail_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CTwoFactor_SendEmail_Response(const CTwoFactor_SendEmail_Response& from);
  CTwoFactor_SendEmail_Response(CTwoFactor_SendEmail_Response&& from) noexcept
    : CTwoFactor_SendEmail_Response() {
    *this = ::std::move(from);
  }

  inline CTwoFactor_SendEmail_Response& operator=(const CTwoFactor_SendEmail_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTwoFactor_SendEmail_Response& operator=(CTwoFactor_SendEmail_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CTwoFactor_SendEmail_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CTwoFactor_SendEmail_Response* internal_default_instance() {
    return reinterpret_cast<const CTwoFactor_SendEmail_Response*>(
               &_CTwoFactor_SendEmail_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CTwoFactor_SendEmail_Response& a, CTwoFactor_SendEmail_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CTwoFactor_SendEmail_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CTwoFactor_SendEmail_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CTwoFactor_SendEmail_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CTwoFactor_SendEmail_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CTwoFactor_SendEmail_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CTwoFactor_SendEmail_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CTwoFactor_SendEmail_Response";
  }
  protected:
  explicit CTwoFactor_SendEmail_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CTwoFactor_SendEmail_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5ftwofactor_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CTwoFactor_FinalizeAddAuthenticator_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CTwoFactor_FinalizeAddAuthenticator_Request) */ {
 public:
  inline CTwoFactor_FinalizeAddAuthenticator_Request() : CTwoFactor_FinalizeAddAuthenticator_Request(nullptr) {}
  ~CTwoFactor_FinalizeAddAuthenticator_Request() override;
  explicit constexpr CTwoFactor_FinalizeAddAuthenticator_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CTwoFactor_FinalizeAddAuthenticator_Request(const CTwoFactor_FinalizeAddAuthenticator_Request& from);
  CTwoFactor_FinalizeAddAuthenticator_Request(CTwoFactor_FinalizeAddAuthenticator_Request&& from) noexcept
    : CTwoFactor_FinalizeAddAuthenticator_Request() {
    *this = ::std::move(from);
  }

  inline CTwoFactor_FinalizeAddAuthenticator_Request& operator=(const CTwoFactor_FinalizeAddAuthenticator_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTwoFactor_FinalizeAddAuthenticator_Request& operator=(CTwoFactor_FinalizeAddAuthenticator_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CTwoFactor_FinalizeAddAuthenticator_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CTwoFactor_FinalizeAddAuthenticator_Request* internal_default_instance() {
    return reinterpret_cast<const CTwoFactor_FinalizeAddAuthenticator_Request*>(
               &_CTwoFactor_FinalizeAddAuthenticator_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CTwoFactor_FinalizeAddAuthenticator_Request& a, CTwoFactor_FinalizeAddAuthenticator_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CTwoFactor_FinalizeAddAuthenticator_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CTwoFactor_FinalizeAddAuthenticator_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CTwoFactor_FinalizeAddAuthenticator_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CTwoFactor_FinalizeAddAuthenticator_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CTwoFactor_FinalizeAddAuthenticator_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CTwoFactor_FinalizeAddAuthenticator_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CTwoFactor_FinalizeAddAuthenticator_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CTwoFactor_FinalizeAddAuthenticator_Request";
  }
  protected:
  explicit CTwoFactor_FinalizeAddAuthenticator_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHttpHeadersFieldNumber = 5,
    kAuthenticatorCodeFieldNumber = 2,
    kActivationCodeFieldNumber = 4,
    kSteamidFieldNumber = 1,
    kAuthenticatorTimeFieldNumber = 3,
    kValidateSmsCodeFieldNumber = 6,
  };
  // repeated string http_headers = 5 [(.description) = "HTTP headers alternating by K/V"];
  int http_headers_size() const;
  private:
  int _internal_http_headers_size() const;
  public:
  void clear_http_headers();
  const std::string& http_headers(int index) const;
  std::string* mutable_http_headers(int index);
  void set_http_headers(int index, const std::string& value);
  void set_http_headers(int index, std::string&& value);
  void set_http_headers(int index, const char* value);
  void set_http_headers(int index, const char* value, size_t size);
  std::string* add_http_headers();
  void add_http_headers(const std::string& value);
  void add_http_headers(std::string&& value);
  void add_http_headers(const char* value);
  void add_http_headers(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& http_headers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_http_headers();
  private:
  const std::string& _internal_http_headers(int index) const;
  std::string* _internal_add_http_headers();
  public:

  // optional string authenticator_code = 2 [(.description) = "Current auth code"];
  bool has_authenticator_code() const;
  private:
  bool _internal_has_authenticator_code() const;
  public:
  void clear_authenticator_code();
  const std::string& authenticator_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_authenticator_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_authenticator_code();
  PROTOBUF_NODISCARD std::string* release_authenticator_code();
  void set_allocated_authenticator_code(std::string* authenticator_code);
  private:
  const std::string& _internal_authenticator_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_authenticator_code(const std::string& value);
  std::string* _internal_mutable_authenticator_code();
  public:

  // optional string activation_code = 4 [(.description) = "Activation code from out-of-band message"];
  bool has_activation_code() const;
  private:
  bool _internal_has_activation_code() const;
  public:
  void clear_activation_code();
  const std::string& activation_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_activation_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_activation_code();
  PROTOBUF_NODISCARD std::string* release_activation_code();
  void set_allocated_activation_code(std::string* activation_code);
  private:
  const std::string& _internal_activation_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_activation_code(const std::string& value);
  std::string* _internal_mutable_activation_code();
  public:

  // optional fixed64 steamid = 1 [(.description) = "steamid to use"];
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional uint64 authenticator_time = 3 [(.description) = "Current authenticator time"];
  bool has_authenticator_time() const;
  private:
  bool _internal_has_authenticator_time() const;
  public:
  void clear_authenticator_time();
  uint64_t authenticator_time() const;
  void set_authenticator_time(uint64_t value);
  private:
  uint64_t _internal_authenticator_time() const;
  void _internal_set_authenticator_time(uint64_t value);
  public:

  // optional bool validate_sms_code = 6 [(.description) = "When finalizing with an SMS code, pass the request on to the PhoneService to update its state too."];
  bool has_validate_sms_code() const;
  private:
  bool _internal_has_validate_sms_code() const;
  public:
  void clear_validate_sms_code();
  bool validate_sms_code() const;
  void set_validate_sms_code(bool value);
  private:
  bool _internal_validate_sms_code() const;
  void _internal_set_validate_sms_code(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CTwoFactor_FinalizeAddAuthenticator_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> http_headers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr authenticator_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr activation_code_;
  uint64_t steamid_;
  uint64_t authenticator_time_;
  bool validate_sms_code_;
  friend struct ::TableStruct_steammessages_5ftwofactor_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CTwoFactor_FinalizeAddAuthenticator_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CTwoFactor_FinalizeAddAuthenticator_Response) */ {
 public:
  inline CTwoFactor_FinalizeAddAuthenticator_Response() : CTwoFactor_FinalizeAddAuthenticator_Response(nullptr) {}
  ~CTwoFactor_FinalizeAddAuthenticator_Response() override;
  explicit constexpr CTwoFactor_FinalizeAddAuthenticator_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CTwoFactor_FinalizeAddAuthenticator_Response(const CTwoFactor_FinalizeAddAuthenticator_Response& from);
  CTwoFactor_FinalizeAddAuthenticator_Response(CTwoFactor_FinalizeAddAuthenticator_Response&& from) noexcept
    : CTwoFactor_FinalizeAddAuthenticator_Response() {
    *this = ::std::move(from);
  }

  inline CTwoFactor_FinalizeAddAuthenticator_Response& operator=(const CTwoFactor_FinalizeAddAuthenticator_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTwoFactor_FinalizeAddAuthenticator_Response& operator=(CTwoFactor_FinalizeAddAuthenticator_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CTwoFactor_FinalizeAddAuthenticator_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CTwoFactor_FinalizeAddAuthenticator_Response* internal_default_instance() {
    return reinterpret_cast<const CTwoFactor_FinalizeAddAuthenticator_Response*>(
               &_CTwoFactor_FinalizeAddAuthenticator_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CTwoFactor_FinalizeAddAuthenticator_Response& a, CTwoFactor_FinalizeAddAuthenticator_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CTwoFactor_FinalizeAddAuthenticator_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CTwoFactor_FinalizeAddAuthenticator_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CTwoFactor_FinalizeAddAuthenticator_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CTwoFactor_FinalizeAddAuthenticator_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CTwoFactor_FinalizeAddAuthenticator_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CTwoFactor_FinalizeAddAuthenticator_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CTwoFactor_FinalizeAddAuthenticator_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CTwoFactor_FinalizeAddAuthenticator_Response";
  }
  protected:
  explicit CTwoFactor_FinalizeAddAuthenticator_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
    kWantMoreFieldNumber = 2,
    kStatusFieldNumber = 4,
    kServerTimeFieldNumber = 3,
  };
  // optional bool success = 1 [(.description) = "True if succeeded, or want more tries"];
  bool has_success() const;
  private:
  bool _internal_has_success() const;
  public:
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // optional bool want_more = 2 [(.description) = "True if want more tries"];
  bool has_want_more() const;
  private:
  bool _internal_has_want_more() const;
  public:
  void clear_want_more();
  bool want_more() const;
  void set_want_more(bool value);
  private:
  bool _internal_want_more() const;
  void _internal_set_want_more(bool value);
  public:

  // optional int32 status = 4 [(.description) = "Result code"];
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  int32_t status() const;
  void set_status(int32_t value);
  private:
  int32_t _internal_status() const;
  void _internal_set_status(int32_t value);
  public:

  // optional uint64 server_time = 3 [(.description) = "Current server time"];
  bool has_server_time() const;
  private:
  bool _internal_has_server_time() const;
  public:
  void clear_server_time();
  uint64_t server_time() const;
  void set_server_time(uint64_t value);
  private:
  uint64_t _internal_server_time() const;
  void _internal_set_server_time(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CTwoFactor_FinalizeAddAuthenticator_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool success_;
  bool want_more_;
  int32_t status_;
  uint64_t server_time_;
  friend struct ::TableStruct_steammessages_5ftwofactor_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CTwoFactor_UpdateTokenVersion_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CTwoFactor_UpdateTokenVersion_Request) */ {
 public:
  inline CTwoFactor_UpdateTokenVersion_Request() : CTwoFactor_UpdateTokenVersion_Request(nullptr) {}
  ~CTwoFactor_UpdateTokenVersion_Request() override;
  explicit constexpr CTwoFactor_UpdateTokenVersion_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CTwoFactor_UpdateTokenVersion_Request(const CTwoFactor_UpdateTokenVersion_Request& from);
  CTwoFactor_UpdateTokenVersion_Request(CTwoFactor_UpdateTokenVersion_Request&& from) noexcept
    : CTwoFactor_UpdateTokenVersion_Request() {
    *this = ::std::move(from);
  }

  inline CTwoFactor_UpdateTokenVersion_Request& operator=(const CTwoFactor_UpdateTokenVersion_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTwoFactor_UpdateTokenVersion_Request& operator=(CTwoFactor_UpdateTokenVersion_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CTwoFactor_UpdateTokenVersion_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CTwoFactor_UpdateTokenVersion_Request* internal_default_instance() {
    return reinterpret_cast<const CTwoFactor_UpdateTokenVersion_Request*>(
               &_CTwoFactor_UpdateTokenVersion_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CTwoFactor_UpdateTokenVersion_Request& a, CTwoFactor_UpdateTokenVersion_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CTwoFactor_UpdateTokenVersion_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CTwoFactor_UpdateTokenVersion_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CTwoFactor_UpdateTokenVersion_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CTwoFactor_UpdateTokenVersion_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CTwoFactor_UpdateTokenVersion_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CTwoFactor_UpdateTokenVersion_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CTwoFactor_UpdateTokenVersion_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CTwoFactor_UpdateTokenVersion_Request";
  }
  protected:
  explicit CTwoFactor_UpdateTokenVersion_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignatureFieldNumber = 3,
    kSteamidFieldNumber = 1,
    kVersionFieldNumber = 2,
  };
  // optional bytes signature = 3 [(.description) = "HMAC digest over user\'s private key"];
  bool has_signature() const;
  private:
  bool _internal_has_signature() const;
  public:
  void clear_signature();
  const std::string& signature() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_signature(ArgT0&& arg0, ArgT... args);
  std::string* mutable_signature();
  PROTOBUF_NODISCARD std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional uint32 version = 2 [(.description) = "What the version of our token should be"];
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  uint32_t version() const;
  void set_version(uint32_t value);
  private:
  uint32_t _internal_version() const;
  void _internal_set_version(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CTwoFactor_UpdateTokenVersion_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  uint64_t steamid_;
  uint32_t version_;
  friend struct ::TableStruct_steammessages_5ftwofactor_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CTwoFactor_UpdateTokenVersion_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CTwoFactor_UpdateTokenVersion_Response) */ {
 public:
  inline CTwoFactor_UpdateTokenVersion_Response() : CTwoFactor_UpdateTokenVersion_Response(nullptr) {}
  explicit constexpr CTwoFactor_UpdateTokenVersion_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CTwoFactor_UpdateTokenVersion_Response(const CTwoFactor_UpdateTokenVersion_Response& from);
  CTwoFactor_UpdateTokenVersion_Response(CTwoFactor_UpdateTokenVersion_Response&& from) noexcept
    : CTwoFactor_UpdateTokenVersion_Response() {
    *this = ::std::move(from);
  }

  inline CTwoFactor_UpdateTokenVersion_Response& operator=(const CTwoFactor_UpdateTokenVersion_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTwoFactor_UpdateTokenVersion_Response& operator=(CTwoFactor_UpdateTokenVersion_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CTwoFactor_UpdateTokenVersion_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CTwoFactor_UpdateTokenVersion_Response* internal_default_instance() {
    return reinterpret_cast<const CTwoFactor_UpdateTokenVersion_Response*>(
               &_CTwoFactor_UpdateTokenVersion_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CTwoFactor_UpdateTokenVersion_Response& a, CTwoFactor_UpdateTokenVersion_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CTwoFactor_UpdateTokenVersion_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CTwoFactor_UpdateTokenVersion_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CTwoFactor_UpdateTokenVersion_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CTwoFactor_UpdateTokenVersion_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CTwoFactor_UpdateTokenVersion_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CTwoFactor_UpdateTokenVersion_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CTwoFactor_UpdateTokenVersion_Response";
  }
  protected:
  explicit CTwoFactor_UpdateTokenVersion_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CTwoFactor_UpdateTokenVersion_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5ftwofactor_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CTwoFactor_RemoveAuthenticator_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CTwoFactor_RemoveAuthenticator_Request) */ {
 public:
  inline CTwoFactor_RemoveAuthenticator_Request() : CTwoFactor_RemoveAuthenticator_Request(nullptr) {}
  ~CTwoFactor_RemoveAuthenticator_Request() override;
  explicit constexpr CTwoFactor_RemoveAuthenticator_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CTwoFactor_RemoveAuthenticator_Request(const CTwoFactor_RemoveAuthenticator_Request& from);
  CTwoFactor_RemoveAuthenticator_Request(CTwoFactor_RemoveAuthenticator_Request&& from) noexcept
    : CTwoFactor_RemoveAuthenticator_Request() {
    *this = ::std::move(from);
  }

  inline CTwoFactor_RemoveAuthenticator_Request& operator=(const CTwoFactor_RemoveAuthenticator_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTwoFactor_RemoveAuthenticator_Request& operator=(CTwoFactor_RemoveAuthenticator_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CTwoFactor_RemoveAuthenticator_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CTwoFactor_RemoveAuthenticator_Request* internal_default_instance() {
    return reinterpret_cast<const CTwoFactor_RemoveAuthenticator_Request*>(
               &_CTwoFactor_RemoveAuthenticator_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CTwoFactor_RemoveAuthenticator_Request& a, CTwoFactor_RemoveAuthenticator_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CTwoFactor_RemoveAuthenticator_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CTwoFactor_RemoveAuthenticator_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CTwoFactor_RemoveAuthenticator_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CTwoFactor_RemoveAuthenticator_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CTwoFactor_RemoveAuthenticator_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CTwoFactor_RemoveAuthenticator_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CTwoFactor_RemoveAuthenticator_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CTwoFactor_RemoveAuthenticator_Request";
  }
  protected:
  explicit CTwoFactor_RemoveAuthenticator_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRevocationCodeFieldNumber = 2,
    kRemoveAllSteamguardCookiesFieldNumber = 7,
    kRevocationReasonFieldNumber = 5,
    kSteamguardSchemeFieldNumber = 6,
  };
  // optional string revocation_code = 2 [(.description) = "Password needed to remove token"];
  bool has_revocation_code() const;
  private:
  bool _internal_has_revocation_code() const;
  public:
  void clear_revocation_code();
  const std::string& revocation_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_revocation_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_revocation_code();
  PROTOBUF_NODISCARD std::string* release_revocation_code();
  void set_allocated_revocation_code(std::string* revocation_code);
  private:
  const std::string& _internal_revocation_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_revocation_code(const std::string& value);
  std::string* _internal_mutable_revocation_code();
  public:

  // optional bool remove_all_steamguard_cookies = 7 [(.description) = "Remove all steamguard cookies"];
  bool has_remove_all_steamguard_cookies() const;
  private:
  bool _internal_has_remove_all_steamguard_cookies() const;
  public:
  void clear_remove_all_steamguard_cookies();
  bool remove_all_steamguard_cookies() const;
  void set_remove_all_steamguard_cookies(bool value);
  private:
  bool _internal_remove_all_steamguard_cookies() const;
  void _internal_set_remove_all_steamguard_cookies(bool value);
  public:

  // optional uint32 revocation_reason = 5 [(.description) = "Reason the authenticator is being removed"];
  bool has_revocation_reason() const;
  private:
  bool _internal_has_revocation_reason() const;
  public:
  void clear_revocation_reason();
  uint32_t revocation_reason() const;
  void set_revocation_reason(uint32_t value);
  private:
  uint32_t _internal_revocation_reason() const;
  void _internal_set_revocation_reason(uint32_t value);
  public:

  // optional uint32 steamguard_scheme = 6 [(.description) = "Type of Steam Guard to use once token is removed"];
  bool has_steamguard_scheme() const;
  private:
  bool _internal_has_steamguard_scheme() const;
  public:
  void clear_steamguard_scheme();
  uint32_t steamguard_scheme() const;
  void set_steamguard_scheme(uint32_t value);
  private:
  uint32_t _internal_steamguard_scheme() const;
  void _internal_set_steamguard_scheme(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CTwoFactor_RemoveAuthenticator_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr revocation_code_;
  bool remove_all_steamguard_cookies_;
  uint32_t revocation_reason_;
  uint32_t steamguard_scheme_;
  friend struct ::TableStruct_steammessages_5ftwofactor_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CTwoFactor_RemoveAuthenticator_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CTwoFactor_RemoveAuthenticator_Response) */ {
 public:
  inline CTwoFactor_RemoveAuthenticator_Response() : CTwoFactor_RemoveAuthenticator_Response(nullptr) {}
  ~CTwoFactor_RemoveAuthenticator_Response() override;
  explicit constexpr CTwoFactor_RemoveAuthenticator_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CTwoFactor_RemoveAuthenticator_Response(const CTwoFactor_RemoveAuthenticator_Response& from);
  CTwoFactor_RemoveAuthenticator_Response(CTwoFactor_RemoveAuthenticator_Response&& from) noexcept
    : CTwoFactor_RemoveAuthenticator_Response() {
    *this = ::std::move(from);
  }

  inline CTwoFactor_RemoveAuthenticator_Response& operator=(const CTwoFactor_RemoveAuthenticator_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTwoFactor_RemoveAuthenticator_Response& operator=(CTwoFactor_RemoveAuthenticator_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CTwoFactor_RemoveAuthenticator_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CTwoFactor_RemoveAuthenticator_Response* internal_default_instance() {
    return reinterpret_cast<const CTwoFactor_RemoveAuthenticator_Response*>(
               &_CTwoFactor_RemoveAuthenticator_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CTwoFactor_RemoveAuthenticator_Response& a, CTwoFactor_RemoveAuthenticator_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CTwoFactor_RemoveAuthenticator_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CTwoFactor_RemoveAuthenticator_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CTwoFactor_RemoveAuthenticator_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CTwoFactor_RemoveAuthenticator_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CTwoFactor_RemoveAuthenticator_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CTwoFactor_RemoveAuthenticator_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CTwoFactor_RemoveAuthenticator_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CTwoFactor_RemoveAuthenticator_Response";
  }
  protected:
  explicit CTwoFactor_RemoveAuthenticator_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerTimeFieldNumber = 3,
    kSuccessFieldNumber = 1,
    kRevocationAttemptsRemainingFieldNumber = 5,
  };
  // optional uint64 server_time = 3 [(.description) = "Current server time"];
  bool has_server_time() const;
  private:
  bool _internal_has_server_time() const;
  public:
  void clear_server_time();
  uint64_t server_time() const;
  void set_server_time(uint64_t value);
  private:
  uint64_t _internal_server_time() const;
  void _internal_set_server_time(uint64_t value);
  public:

  // optional bool success = 1 [(.description) = "True if request succeeeded. The mobile app checks this."];
  bool has_success() const;
  private:
  bool _internal_has_success() const;
  public:
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // optional uint32 revocation_attempts_remaining = 5 [(.description) = "Number of revocation code attempts remaining"];
  bool has_revocation_attempts_remaining() const;
  private:
  bool _internal_has_revocation_attempts_remaining() const;
  public:
  void clear_revocation_attempts_remaining();
  uint32_t revocation_attempts_remaining() const;
  void set_revocation_attempts_remaining(uint32_t value);
  private:
  uint32_t _internal_revocation_attempts_remaining() const;
  void _internal_set_revocation_attempts_remaining(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CTwoFactor_RemoveAuthenticator_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t server_time_;
  bool success_;
  uint32_t revocation_attempts_remaining_;
  friend struct ::TableStruct_steammessages_5ftwofactor_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request) */ {
 public:
  inline CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request() : CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request(nullptr) {}
  explicit constexpr CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request(const CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request& from);
  CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request(CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request&& from) noexcept
    : CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request() {
    *this = ::std::move(from);
  }

  inline CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request& operator=(const CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request& operator=(CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request* internal_default_instance() {
    return reinterpret_cast<const CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request*>(
               &_CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request& a, CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request";
  }
  protected:
  explicit CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5ftwofactor_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response) */ {
 public:
  inline CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response() : CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response(nullptr) {}
  ~CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response() override;
  explicit constexpr CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response(const CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response& from);
  CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response(CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response&& from) noexcept
    : CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response() {
    *this = ::std::move(from);
  }

  inline CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response& operator=(const CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response& operator=(CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response* internal_default_instance() {
    return reinterpret_cast<const CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response*>(
               &_CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response& a, CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response";
  }
  protected:
  explicit CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // optional bool success = 1 [(.description) = "True if succeeded, or want more tries with an authenticator_code"];
  bool has_success() const;
  private:
  bool _internal_has_success() const;
  public:
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool success_;
  friend struct ::TableStruct_steammessages_5ftwofactor_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request) */ {
 public:
  inline CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request() : CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request(nullptr) {}
  ~CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request() override;
  explicit constexpr CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request(const CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request& from);
  CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request(CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request&& from) noexcept
    : CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request() {
    *this = ::std::move(from);
  }

  inline CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request& operator=(const CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request& operator=(CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request* internal_default_instance() {
    return reinterpret_cast<const CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request*>(
               &_CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request& a, CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request";
  }
  protected:
  explicit CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSmsCodeFieldNumber = 1,
    kGenerateNewTokenFieldNumber = 2,
    kVersionFieldNumber = 3,
  };
  // optional string sms_code = 1 [(.description) = "Code from SMS"];
  bool has_sms_code() const;
  private:
  bool _internal_has_sms_code() const;
  public:
  void clear_sms_code();
  const std::string& sms_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sms_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sms_code();
  PROTOBUF_NODISCARD std::string* release_sms_code();
  void set_allocated_sms_code(std::string* sms_code);
  private:
  const std::string& _internal_sms_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sms_code(const std::string& value);
  std::string* _internal_mutable_sms_code();
  public:

  // optional bool generate_new_token = 2 [(.description) = "Generate new token (instead of removing old one)"];
  bool has_generate_new_token() const;
  private:
  bool _internal_has_generate_new_token() const;
  public:
  void clear_generate_new_token();
  bool generate_new_token() const;
  void set_generate_new_token(bool value);
  private:
  bool _internal_generate_new_token() const;
  void _internal_set_generate_new_token(bool value);
  public:

  // optional uint32 version = 3 [default = 1, (.description) = "What the version of our token should be"];
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  uint32_t version() const;
  void set_version(uint32_t value);
  private:
  uint32_t _internal_version() const;
  void _internal_set_version(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sms_code_;
  bool generate_new_token_;
  uint32_t version_;
  friend struct ::TableStruct_steammessages_5ftwofactor_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CRemoveAuthenticatorViaChallengeContinue_Replacement_Token final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRemoveAuthenticatorViaChallengeContinue_Replacement_Token) */ {
 public:
  inline CRemoveAuthenticatorViaChallengeContinue_Replacement_Token() : CRemoveAuthenticatorViaChallengeContinue_Replacement_Token(nullptr) {}
  ~CRemoveAuthenticatorViaChallengeContinue_Replacement_Token() override;
  explicit constexpr CRemoveAuthenticatorViaChallengeContinue_Replacement_Token(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CRemoveAuthenticatorViaChallengeContinue_Replacement_Token(const CRemoveAuthenticatorViaChallengeContinue_Replacement_Token& from);
  CRemoveAuthenticatorViaChallengeContinue_Replacement_Token(CRemoveAuthenticatorViaChallengeContinue_Replacement_Token&& from) noexcept
    : CRemoveAuthenticatorViaChallengeContinue_Replacement_Token() {
    *this = ::std::move(from);
  }

  inline CRemoveAuthenticatorViaChallengeContinue_Replacement_Token& operator=(const CRemoveAuthenticatorViaChallengeContinue_Replacement_Token& from) {
    CopyFrom(from);
    return *this;
  }
  inline CRemoveAuthenticatorViaChallengeContinue_Replacement_Token& operator=(CRemoveAuthenticatorViaChallengeContinue_Replacement_Token&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CRemoveAuthenticatorViaChallengeContinue_Replacement_Token& default_instance() {
    return *internal_default_instance();
  }
  static inline const CRemoveAuthenticatorViaChallengeContinue_Replacement_Token* internal_default_instance() {
    return reinterpret_cast<const CRemoveAuthenticatorViaChallengeContinue_Replacement_Token*>(
               &_CRemoveAuthenticatorViaChallengeContinue_Replacement_Token_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CRemoveAuthenticatorViaChallengeContinue_Replacement_Token& a, CRemoveAuthenticatorViaChallengeContinue_Replacement_Token& b) {
    a.Swap(&b);
  }
  inline void Swap(CRemoveAuthenticatorViaChallengeContinue_Replacement_Token* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CRemoveAuthenticatorViaChallengeContinue_Replacement_Token* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CRemoveAuthenticatorViaChallengeContinue_Replacement_Token* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CRemoveAuthenticatorViaChallengeContinue_Replacement_Token>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CRemoveAuthenticatorViaChallengeContinue_Replacement_Token& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CRemoveAuthenticatorViaChallengeContinue_Replacement_Token& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CRemoveAuthenticatorViaChallengeContinue_Replacement_Token* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRemoveAuthenticatorViaChallengeContinue_Replacement_Token";
  }
  protected:
  explicit CRemoveAuthenticatorViaChallengeContinue_Replacement_Token(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSharedSecretFieldNumber = 1,
    kRevocationCodeFieldNumber = 3,
    kUriFieldNumber = 4,
    kAccountNameFieldNumber = 6,
    kTokenGidFieldNumber = 7,
    kIdentitySecretFieldNumber = 8,
    kSecret1FieldNumber = 9,
    kSerialNumberFieldNumber = 2,
    kServerTimeFieldNumber = 5,
    kStatusFieldNumber = 10,
    kSteamguardSchemeFieldNumber = 11,
    kSteamidFieldNumber = 12,
  };
  // optional bytes shared_secret = 1 [(.description) = "Shared secret between server and authenticator"];
  bool has_shared_secret() const;
  private:
  bool _internal_has_shared_secret() const;
  public:
  void clear_shared_secret();
  const std::string& shared_secret() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_shared_secret(ArgT0&& arg0, ArgT... args);
  std::string* mutable_shared_secret();
  PROTOBUF_NODISCARD std::string* release_shared_secret();
  void set_allocated_shared_secret(std::string* shared_secret);
  private:
  const std::string& _internal_shared_secret() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_shared_secret(const std::string& value);
  std::string* _internal_mutable_shared_secret();
  public:

  // optional string revocation_code = 3 [(.description) = "code used to revoke authenticator"];
  bool has_revocation_code() const;
  private:
  bool _internal_has_revocation_code() const;
  public:
  void clear_revocation_code();
  const std::string& revocation_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_revocation_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_revocation_code();
  PROTOBUF_NODISCARD std::string* release_revocation_code();
  void set_allocated_revocation_code(std::string* revocation_code);
  private:
  const std::string& _internal_revocation_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_revocation_code(const std::string& value);
  std::string* _internal_mutable_revocation_code();
  public:

  // optional string uri = 4 [(.description) = "URI for QR code generation"];
  bool has_uri() const;
  private:
  bool _internal_has_uri() const;
  public:
  void clear_uri();
  const std::string& uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uri();
  PROTOBUF_NODISCARD std::string* release_uri();
  void set_allocated_uri(std::string* uri);
  private:
  const std::string& _internal_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uri(const std::string& value);
  std::string* _internal_mutable_uri();
  public:

  // optional string account_name = 6 [(.description) = "Account name to display on token client"];
  bool has_account_name() const;
  private:
  bool _internal_has_account_name() const;
  public:
  void clear_account_name();
  const std::string& account_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account_name();
  PROTOBUF_NODISCARD std::string* release_account_name();
  void set_allocated_account_name(std::string* account_name);
  private:
  const std::string& _internal_account_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_name(const std::string& value);
  std::string* _internal_mutable_account_name();
  public:

  // optional string token_gid = 7 [(.description) = "Token GID assigned by server"];
  bool has_token_gid() const;
  private:
  bool _internal_has_token_gid() const;
  public:
  void clear_token_gid();
  const std::string& token_gid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token_gid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token_gid();
  PROTOBUF_NODISCARD std::string* release_token_gid();
  void set_allocated_token_gid(std::string* token_gid);
  private:
  const std::string& _internal_token_gid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token_gid(const std::string& value);
  std::string* _internal_mutable_token_gid();
  public:

  // optional bytes identity_secret = 8 [(.description) = "Secret used for identity attestation (e.g., for eventing)"];
  bool has_identity_secret() const;
  private:
  bool _internal_has_identity_secret() const;
  public:
  void clear_identity_secret();
  const std::string& identity_secret() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_identity_secret(ArgT0&& arg0, ArgT... args);
  std::string* mutable_identity_secret();
  PROTOBUF_NODISCARD std::string* release_identity_secret();
  void set_allocated_identity_secret(std::string* identity_secret);
  private:
  const std::string& _internal_identity_secret() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_identity_secret(const std::string& value);
  std::string* _internal_mutable_identity_secret();
  public:

  // optional bytes secret_1 = 9 [(.description) = "Spare shared secret"];
  bool has_secret_1() const;
  private:
  bool _internal_has_secret_1() const;
  public:
  void clear_secret_1();
  const std::string& secret_1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_secret_1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_secret_1();
  PROTOBUF_NODISCARD std::string* release_secret_1();
  void set_allocated_secret_1(std::string* secret_1);
  private:
  const std::string& _internal_secret_1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secret_1(const std::string& value);
  std::string* _internal_mutable_secret_1();
  public:

  // optional fixed64 serial_number = 2 [(.description) = "Authenticator serial number (unique per token)"];
  bool has_serial_number() const;
  private:
  bool _internal_has_serial_number() const;
  public:
  void clear_serial_number();
  uint64_t serial_number() const;
  void set_serial_number(uint64_t value);
  private:
  uint64_t _internal_serial_number() const;
  void _internal_set_serial_number(uint64_t value);
  public:

  // optional uint64 server_time = 5 [(.description) = "Current server time"];
  bool has_server_time() const;
  private:
  bool _internal_has_server_time() const;
  public:
  void clear_server_time();
  uint64_t server_time() const;
  void set_server_time(uint64_t value);
  private:
  uint64_t _internal_server_time() const;
  void _internal_set_server_time(uint64_t value);
  public:

  // optional int32 status = 10 [(.description) = "Result code"];
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  int32_t status() const;
  void set_status(int32_t value);
  private:
  int32_t _internal_status() const;
  void _internal_set_status(int32_t value);
  public:

  // optional uint32 steamguard_scheme = 11 [(.description) = "Type of Steam Guard to use once token is removed"];
  bool has_steamguard_scheme() const;
  private:
  bool _internal_has_steamguard_scheme() const;
  public:
  void clear_steamguard_scheme();
  uint32_t steamguard_scheme() const;
  void set_steamguard_scheme(uint32_t value);
  private:
  uint32_t _internal_steamguard_scheme() const;
  void _internal_set_steamguard_scheme(uint32_t value);
  public:

  // optional fixed64 steamid = 12 [(.description) = "steamid that owns the secret"];
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CRemoveAuthenticatorViaChallengeContinue_Replacement_Token)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shared_secret_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr revocation_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_gid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identity_secret_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secret_1_;
  uint64_t serial_number_;
  uint64_t server_time_;
  int32_t status_;
  uint32_t steamguard_scheme_;
  uint64_t steamid_;
  friend struct ::TableStruct_steammessages_5ftwofactor_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response) */ {
 public:
  inline CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response() : CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response(nullptr) {}
  ~CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response() override;
  explicit constexpr CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response(const CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response& from);
  CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response(CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response&& from) noexcept
    : CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response() {
    *this = ::std::move(from);
  }

  inline CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response& operator=(const CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response& operator=(CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response* internal_default_instance() {
    return reinterpret_cast<const CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response*>(
               &_CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response& a, CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response";
  }
  protected:
  explicit CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReplacementTokenFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // optional .CRemoveAuthenticatorViaChallengeContinue_Replacement_Token replacement_token = 2 [(.description) = "Fresh secret to install"];
  bool has_replacement_token() const;
  private:
  bool _internal_has_replacement_token() const;
  public:
  void clear_replacement_token();
  const ::CRemoveAuthenticatorViaChallengeContinue_Replacement_Token& replacement_token() const;
  PROTOBUF_NODISCARD ::CRemoveAuthenticatorViaChallengeContinue_Replacement_Token* release_replacement_token();
  ::CRemoveAuthenticatorViaChallengeContinue_Replacement_Token* mutable_replacement_token();
  void set_allocated_replacement_token(::CRemoveAuthenticatorViaChallengeContinue_Replacement_Token* replacement_token);
  private:
  const ::CRemoveAuthenticatorViaChallengeContinue_Replacement_Token& _internal_replacement_token() const;
  ::CRemoveAuthenticatorViaChallengeContinue_Replacement_Token* _internal_mutable_replacement_token();
  public:
  void unsafe_arena_set_allocated_replacement_token(
      ::CRemoveAuthenticatorViaChallengeContinue_Replacement_Token* replacement_token);
  ::CRemoveAuthenticatorViaChallengeContinue_Replacement_Token* unsafe_arena_release_replacement_token();

  // optional bool success = 1 [(.description) = "True if succeeded, or want more tries with an authenticator_code"];
  bool has_success() const;
  private:
  bool _internal_has_success() const;
  public:
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CRemoveAuthenticatorViaChallengeContinue_Replacement_Token* replacement_token_;
  bool success_;
  friend struct ::TableStruct_steammessages_5ftwofactor_2esteamclient_2eproto;
};
// ===================================================================

class TwoFactor_Stub;

class TwoFactor : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline TwoFactor() {};
 public:
  virtual ~TwoFactor();

  typedef TwoFactor_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void QueryTime(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CTwoFactor_Time_Request* request,
                       ::CTwoFactor_Time_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void QueryStatus(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CTwoFactor_Status_Request* request,
                       ::CTwoFactor_Status_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void AddAuthenticator(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CTwoFactor_AddAuthenticator_Request* request,
                       ::CTwoFactor_AddAuthenticator_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void SendEmail(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CTwoFactor_SendEmail_Request* request,
                       ::CTwoFactor_SendEmail_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void FinalizeAddAuthenticator(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CTwoFactor_FinalizeAddAuthenticator_Request* request,
                       ::CTwoFactor_FinalizeAddAuthenticator_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void UpdateTokenVersion(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CTwoFactor_UpdateTokenVersion_Request* request,
                       ::CTwoFactor_UpdateTokenVersion_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void RemoveAuthenticator(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CTwoFactor_RemoveAuthenticator_Request* request,
                       ::CTwoFactor_RemoveAuthenticator_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void RemoveAuthenticatorViaChallengeStart(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request* request,
                       ::CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void RemoveAuthenticatorViaChallengeContinue(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request* request,
                       ::CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(TwoFactor);
};

class TwoFactor_Stub : public TwoFactor {
 public:
  TwoFactor_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  TwoFactor_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~TwoFactor_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements TwoFactor ------------------------------------------

  void QueryTime(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CTwoFactor_Time_Request* request,
                       ::CTwoFactor_Time_Response* response,
                       ::google::protobuf::Closure* done);
  void QueryStatus(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CTwoFactor_Status_Request* request,
                       ::CTwoFactor_Status_Response* response,
                       ::google::protobuf::Closure* done);
  void AddAuthenticator(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CTwoFactor_AddAuthenticator_Request* request,
                       ::CTwoFactor_AddAuthenticator_Response* response,
                       ::google::protobuf::Closure* done);
  void SendEmail(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CTwoFactor_SendEmail_Request* request,
                       ::CTwoFactor_SendEmail_Response* response,
                       ::google::protobuf::Closure* done);
  void FinalizeAddAuthenticator(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CTwoFactor_FinalizeAddAuthenticator_Request* request,
                       ::CTwoFactor_FinalizeAddAuthenticator_Response* response,
                       ::google::protobuf::Closure* done);
  void UpdateTokenVersion(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CTwoFactor_UpdateTokenVersion_Request* request,
                       ::CTwoFactor_UpdateTokenVersion_Response* response,
                       ::google::protobuf::Closure* done);
  void RemoveAuthenticator(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CTwoFactor_RemoveAuthenticator_Request* request,
                       ::CTwoFactor_RemoveAuthenticator_Response* response,
                       ::google::protobuf::Closure* done);
  void RemoveAuthenticatorViaChallengeStart(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request* request,
                       ::CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response* response,
                       ::google::protobuf::Closure* done);
  void RemoveAuthenticatorViaChallengeContinue(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request* request,
                       ::CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(TwoFactor_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CTwoFactor_Time_Request

// optional uint64 sender_time = 1 [(.description) = "Current time on the sender (for stats, don\'t trust this)"];
inline bool CTwoFactor_Time_Request::_internal_has_sender_time() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CTwoFactor_Time_Request::has_sender_time() const {
  return _internal_has_sender_time();
}
inline void CTwoFactor_Time_Request::clear_sender_time() {
  sender_time_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CTwoFactor_Time_Request::_internal_sender_time() const {
  return sender_time_;
}
inline uint64_t CTwoFactor_Time_Request::sender_time() const {
  // @@protoc_insertion_point(field_get:CTwoFactor_Time_Request.sender_time)
  return _internal_sender_time();
}
inline void CTwoFactor_Time_Request::_internal_set_sender_time(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  sender_time_ = value;
}
inline void CTwoFactor_Time_Request::set_sender_time(uint64_t value) {
  _internal_set_sender_time(value);
  // @@protoc_insertion_point(field_set:CTwoFactor_Time_Request.sender_time)
}

// -------------------------------------------------------------------

// CTwoFactor_Time_Response

// optional uint64 server_time = 1 [(.description) = "Current server time"];
inline bool CTwoFactor_Time_Response::_internal_has_server_time() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CTwoFactor_Time_Response::has_server_time() const {
  return _internal_has_server_time();
}
inline void CTwoFactor_Time_Response::clear_server_time() {
  server_time_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CTwoFactor_Time_Response::_internal_server_time() const {
  return server_time_;
}
inline uint64_t CTwoFactor_Time_Response::server_time() const {
  // @@protoc_insertion_point(field_get:CTwoFactor_Time_Response.server_time)
  return _internal_server_time();
}
inline void CTwoFactor_Time_Response::_internal_set_server_time(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  server_time_ = value;
}
inline void CTwoFactor_Time_Response::set_server_time(uint64_t value) {
  _internal_set_server_time(value);
  // @@protoc_insertion_point(field_set:CTwoFactor_Time_Response.server_time)
}

// optional uint64 skew_tolerance_seconds = 2 [(.description) = "Time skew we\'ll tolerate before applying an adjustment"];
inline bool CTwoFactor_Time_Response::_internal_has_skew_tolerance_seconds() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CTwoFactor_Time_Response::has_skew_tolerance_seconds() const {
  return _internal_has_skew_tolerance_seconds();
}
inline void CTwoFactor_Time_Response::clear_skew_tolerance_seconds() {
  skew_tolerance_seconds_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CTwoFactor_Time_Response::_internal_skew_tolerance_seconds() const {
  return skew_tolerance_seconds_;
}
inline uint64_t CTwoFactor_Time_Response::skew_tolerance_seconds() const {
  // @@protoc_insertion_point(field_get:CTwoFactor_Time_Response.skew_tolerance_seconds)
  return _internal_skew_tolerance_seconds();
}
inline void CTwoFactor_Time_Response::_internal_set_skew_tolerance_seconds(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  skew_tolerance_seconds_ = value;
}
inline void CTwoFactor_Time_Response::set_skew_tolerance_seconds(uint64_t value) {
  _internal_set_skew_tolerance_seconds(value);
  // @@protoc_insertion_point(field_set:CTwoFactor_Time_Response.skew_tolerance_seconds)
}

// optional uint64 large_time_jink = 3 [(.description) = "Re-sync if local time jitters by this much"];
inline bool CTwoFactor_Time_Response::_internal_has_large_time_jink() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CTwoFactor_Time_Response::has_large_time_jink() const {
  return _internal_has_large_time_jink();
}
inline void CTwoFactor_Time_Response::clear_large_time_jink() {
  large_time_jink_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CTwoFactor_Time_Response::_internal_large_time_jink() const {
  return large_time_jink_;
}
inline uint64_t CTwoFactor_Time_Response::large_time_jink() const {
  // @@protoc_insertion_point(field_get:CTwoFactor_Time_Response.large_time_jink)
  return _internal_large_time_jink();
}
inline void CTwoFactor_Time_Response::_internal_set_large_time_jink(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  large_time_jink_ = value;
}
inline void CTwoFactor_Time_Response::set_large_time_jink(uint64_t value) {
  _internal_set_large_time_jink(value);
  // @@protoc_insertion_point(field_set:CTwoFactor_Time_Response.large_time_jink)
}

// optional uint32 probe_frequency_seconds = 4 [(.description) = "Time probe frequency if phone time is synchronized"];
inline bool CTwoFactor_Time_Response::_internal_has_probe_frequency_seconds() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CTwoFactor_Time_Response::has_probe_frequency_seconds() const {
  return _internal_has_probe_frequency_seconds();
}
inline void CTwoFactor_Time_Response::clear_probe_frequency_seconds() {
  probe_frequency_seconds_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CTwoFactor_Time_Response::_internal_probe_frequency_seconds() const {
  return probe_frequency_seconds_;
}
inline uint32_t CTwoFactor_Time_Response::probe_frequency_seconds() const {
  // @@protoc_insertion_point(field_get:CTwoFactor_Time_Response.probe_frequency_seconds)
  return _internal_probe_frequency_seconds();
}
inline void CTwoFactor_Time_Response::_internal_set_probe_frequency_seconds(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  probe_frequency_seconds_ = value;
}
inline void CTwoFactor_Time_Response::set_probe_frequency_seconds(uint32_t value) {
  _internal_set_probe_frequency_seconds(value);
  // @@protoc_insertion_point(field_set:CTwoFactor_Time_Response.probe_frequency_seconds)
}

// optional uint32 adjusted_time_probe_frequency_seconds = 5 [(.description) = "Time probe frequency if phone time is not synchronized"];
inline bool CTwoFactor_Time_Response::_internal_has_adjusted_time_probe_frequency_seconds() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CTwoFactor_Time_Response::has_adjusted_time_probe_frequency_seconds() const {
  return _internal_has_adjusted_time_probe_frequency_seconds();
}
inline void CTwoFactor_Time_Response::clear_adjusted_time_probe_frequency_seconds() {
  adjusted_time_probe_frequency_seconds_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CTwoFactor_Time_Response::_internal_adjusted_time_probe_frequency_seconds() const {
  return adjusted_time_probe_frequency_seconds_;
}
inline uint32_t CTwoFactor_Time_Response::adjusted_time_probe_frequency_seconds() const {
  // @@protoc_insertion_point(field_get:CTwoFactor_Time_Response.adjusted_time_probe_frequency_seconds)
  return _internal_adjusted_time_probe_frequency_seconds();
}
inline void CTwoFactor_Time_Response::_internal_set_adjusted_time_probe_frequency_seconds(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  adjusted_time_probe_frequency_seconds_ = value;
}
inline void CTwoFactor_Time_Response::set_adjusted_time_probe_frequency_seconds(uint32_t value) {
  _internal_set_adjusted_time_probe_frequency_seconds(value);
  // @@protoc_insertion_point(field_set:CTwoFactor_Time_Response.adjusted_time_probe_frequency_seconds)
}

// optional uint32 hint_probe_frequency_seconds = 6 [(.description) = "Floor of probe frequency, no matter what"];
inline bool CTwoFactor_Time_Response::_internal_has_hint_probe_frequency_seconds() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CTwoFactor_Time_Response::has_hint_probe_frequency_seconds() const {
  return _internal_has_hint_probe_frequency_seconds();
}
inline void CTwoFactor_Time_Response::clear_hint_probe_frequency_seconds() {
  hint_probe_frequency_seconds_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CTwoFactor_Time_Response::_internal_hint_probe_frequency_seconds() const {
  return hint_probe_frequency_seconds_;
}
inline uint32_t CTwoFactor_Time_Response::hint_probe_frequency_seconds() const {
  // @@protoc_insertion_point(field_get:CTwoFactor_Time_Response.hint_probe_frequency_seconds)
  return _internal_hint_probe_frequency_seconds();
}
inline void CTwoFactor_Time_Response::_internal_set_hint_probe_frequency_seconds(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  hint_probe_frequency_seconds_ = value;
}
inline void CTwoFactor_Time_Response::set_hint_probe_frequency_seconds(uint32_t value) {
  _internal_set_hint_probe_frequency_seconds(value);
  // @@protoc_insertion_point(field_set:CTwoFactor_Time_Response.hint_probe_frequency_seconds)
}

// optional uint32 sync_timeout = 7 [(.description) = "More than this, and we call the current sync failed"];
inline bool CTwoFactor_Time_Response::_internal_has_sync_timeout() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CTwoFactor_Time_Response::has_sync_timeout() const {
  return _internal_has_sync_timeout();
}
inline void CTwoFactor_Time_Response::clear_sync_timeout() {
  sync_timeout_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CTwoFactor_Time_Response::_internal_sync_timeout() const {
  return sync_timeout_;
}
inline uint32_t CTwoFactor_Time_Response::sync_timeout() const {
  // @@protoc_insertion_point(field_get:CTwoFactor_Time_Response.sync_timeout)
  return _internal_sync_timeout();
}
inline void CTwoFactor_Time_Response::_internal_set_sync_timeout(uint32_t value) {
  _has_bits_[0] |= 0x00000040u;
  sync_timeout_ = value;
}
inline void CTwoFactor_Time_Response::set_sync_timeout(uint32_t value) {
  _internal_set_sync_timeout(value);
  // @@protoc_insertion_point(field_set:CTwoFactor_Time_Response.sync_timeout)
}

// optional uint32 try_again_seconds = 8 [(.description) = "Seconds to try again after a failed sync"];
inline bool CTwoFactor_Time_Response::_internal_has_try_again_seconds() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CTwoFactor_Time_Response::has_try_again_seconds() const {
  return _internal_has_try_again_seconds();
}
inline void CTwoFactor_Time_Response::clear_try_again_seconds() {
  try_again_seconds_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CTwoFactor_Time_Response::_internal_try_again_seconds() const {
  return try_again_seconds_;
}
inline uint32_t CTwoFactor_Time_Response::try_again_seconds() const {
  // @@protoc_insertion_point(field_get:CTwoFactor_Time_Response.try_again_seconds)
  return _internal_try_again_seconds();
}
inline void CTwoFactor_Time_Response::_internal_set_try_again_seconds(uint32_t value) {
  _has_bits_[0] |= 0x00000080u;
  try_again_seconds_ = value;
}
inline void CTwoFactor_Time_Response::set_try_again_seconds(uint32_t value) {
  _internal_set_try_again_seconds(value);
  // @@protoc_insertion_point(field_set:CTwoFactor_Time_Response.try_again_seconds)
}

// optional uint32 max_attempts = 9 [(.description) = "# times we\'ll ask for server time before we bail"];
inline bool CTwoFactor_Time_Response::_internal_has_max_attempts() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CTwoFactor_Time_Response::has_max_attempts() const {
  return _internal_has_max_attempts();
}
inline void CTwoFactor_Time_Response::clear_max_attempts() {
  max_attempts_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CTwoFactor_Time_Response::_internal_max_attempts() const {
  return max_attempts_;
}
inline uint32_t CTwoFactor_Time_Response::max_attempts() const {
  // @@protoc_insertion_point(field_get:CTwoFactor_Time_Response.max_attempts)
  return _internal_max_attempts();
}
inline void CTwoFactor_Time_Response::_internal_set_max_attempts(uint32_t value) {
  _has_bits_[0] |= 0x00000100u;
  max_attempts_ = value;
}
inline void CTwoFactor_Time_Response::set_max_attempts(uint32_t value) {
  _internal_set_max_attempts(value);
  // @@protoc_insertion_point(field_set:CTwoFactor_Time_Response.max_attempts)
}

// -------------------------------------------------------------------

// CTwoFactor_Status_Request

// optional fixed64 steamid = 1 [(.description) = "steamid to use"];
inline bool CTwoFactor_Status_Request::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CTwoFactor_Status_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CTwoFactor_Status_Request::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CTwoFactor_Status_Request::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CTwoFactor_Status_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CTwoFactor_Status_Request.steamid)
  return _internal_steamid();
}
inline void CTwoFactor_Status_Request::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
}
inline void CTwoFactor_Status_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CTwoFactor_Status_Request.steamid)
}

// -------------------------------------------------------------------

// CTwoFactor_Status_Response

// optional uint32 state = 1 [(.description) = "Authenticator state"];
inline bool CTwoFactor_Status_Response::_internal_has_state() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CTwoFactor_Status_Response::has_state() const {
  return _internal_has_state();
}
inline void CTwoFactor_Status_Response::clear_state() {
  state_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CTwoFactor_Status_Response::_internal_state() const {
  return state_;
}
inline uint32_t CTwoFactor_Status_Response::state() const {
  // @@protoc_insertion_point(field_get:CTwoFactor_Status_Response.state)
  return _internal_state();
}
inline void CTwoFactor_Status_Response::_internal_set_state(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  state_ = value;
}
inline void CTwoFactor_Status_Response::set_state(uint32_t value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:CTwoFactor_Status_Response.state)
}

// optional uint32 inactivation_reason = 2 [(.description) = "Inactivation reason (if any)"];
inline bool CTwoFactor_Status_Response::_internal_has_inactivation_reason() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CTwoFactor_Status_Response::has_inactivation_reason() const {
  return _internal_has_inactivation_reason();
}
inline void CTwoFactor_Status_Response::clear_inactivation_reason() {
  inactivation_reason_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CTwoFactor_Status_Response::_internal_inactivation_reason() const {
  return inactivation_reason_;
}
inline uint32_t CTwoFactor_Status_Response::inactivation_reason() const {
  // @@protoc_insertion_point(field_get:CTwoFactor_Status_Response.inactivation_reason)
  return _internal_inactivation_reason();
}
inline void CTwoFactor_Status_Response::_internal_set_inactivation_reason(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  inactivation_reason_ = value;
}
inline void CTwoFactor_Status_Response::set_inactivation_reason(uint32_t value) {
  _internal_set_inactivation_reason(value);
  // @@protoc_insertion_point(field_set:CTwoFactor_Status_Response.inactivation_reason)
}

// optional uint32 authenticator_type = 3 [(.description) = "Type of authenticator"];
inline bool CTwoFactor_Status_Response::_internal_has_authenticator_type() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CTwoFactor_Status_Response::has_authenticator_type() const {
  return _internal_has_authenticator_type();
}
inline void CTwoFactor_Status_Response::clear_authenticator_type() {
  authenticator_type_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CTwoFactor_Status_Response::_internal_authenticator_type() const {
  return authenticator_type_;
}
inline uint32_t CTwoFactor_Status_Response::authenticator_type() const {
  // @@protoc_insertion_point(field_get:CTwoFactor_Status_Response.authenticator_type)
  return _internal_authenticator_type();
}
inline void CTwoFactor_Status_Response::_internal_set_authenticator_type(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  authenticator_type_ = value;
}
inline void CTwoFactor_Status_Response::set_authenticator_type(uint32_t value) {
  _internal_set_authenticator_type(value);
  // @@protoc_insertion_point(field_set:CTwoFactor_Status_Response.authenticator_type)
}

// optional bool authenticator_allowed = 4 [(.description) = "Account allowed to have an authenticator?"];
inline bool CTwoFactor_Status_Response::_internal_has_authenticator_allowed() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CTwoFactor_Status_Response::has_authenticator_allowed() const {
  return _internal_has_authenticator_allowed();
}
inline void CTwoFactor_Status_Response::clear_authenticator_allowed() {
  authenticator_allowed_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CTwoFactor_Status_Response::_internal_authenticator_allowed() const {
  return authenticator_allowed_;
}
inline bool CTwoFactor_Status_Response::authenticator_allowed() const {
  // @@protoc_insertion_point(field_get:CTwoFactor_Status_Response.authenticator_allowed)
  return _internal_authenticator_allowed();
}
inline void CTwoFactor_Status_Response::_internal_set_authenticator_allowed(bool value) {
  _has_bits_[0] |= 0x00000080u;
  authenticator_allowed_ = value;
}
inline void CTwoFactor_Status_Response::set_authenticator_allowed(bool value) {
  _internal_set_authenticator_allowed(value);
  // @@protoc_insertion_point(field_set:CTwoFactor_Status_Response.authenticator_allowed)
}

// optional uint32 steamguard_scheme = 5 [(.description) = "Steam Guard scheme in effect"];
inline bool CTwoFactor_Status_Response::_internal_has_steamguard_scheme() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CTwoFactor_Status_Response::has_steamguard_scheme() const {
  return _internal_has_steamguard_scheme();
}
inline void CTwoFactor_Status_Response::clear_steamguard_scheme() {
  steamguard_scheme_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CTwoFactor_Status_Response::_internal_steamguard_scheme() const {
  return steamguard_scheme_;
}
inline uint32_t CTwoFactor_Status_Response::steamguard_scheme() const {
  // @@protoc_insertion_point(field_get:CTwoFactor_Status_Response.steamguard_scheme)
  return _internal_steamguard_scheme();
}
inline void CTwoFactor_Status_Response::_internal_set_steamguard_scheme(uint32_t value) {
  _has_bits_[0] |= 0x00000040u;
  steamguard_scheme_ = value;
}
inline void CTwoFactor_Status_Response::set_steamguard_scheme(uint32_t value) {
  _internal_set_steamguard_scheme(value);
  // @@protoc_insertion_point(field_set:CTwoFactor_Status_Response.steamguard_scheme)
}

// optional string token_gid = 6 [(.description) = "String rep of token GID assigned by server"];
inline bool CTwoFactor_Status_Response::_internal_has_token_gid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CTwoFactor_Status_Response::has_token_gid() const {
  return _internal_has_token_gid();
}
inline void CTwoFactor_Status_Response::clear_token_gid() {
  token_gid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CTwoFactor_Status_Response::token_gid() const {
  // @@protoc_insertion_point(field_get:CTwoFactor_Status_Response.token_gid)
  return _internal_token_gid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CTwoFactor_Status_Response::set_token_gid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 token_gid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CTwoFactor_Status_Response.token_gid)
}
inline std::string* CTwoFactor_Status_Response::mutable_token_gid() {
  std::string* _s = _internal_mutable_token_gid();
  // @@protoc_insertion_point(field_mutable:CTwoFactor_Status_Response.token_gid)
  return _s;
}
inline const std::string& CTwoFactor_Status_Response::_internal_token_gid() const {
  return token_gid_.Get();
}
inline void CTwoFactor_Status_Response::_internal_set_token_gid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  token_gid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CTwoFactor_Status_Response::_internal_mutable_token_gid() {
  _has_bits_[0] |= 0x00000001u;
  return token_gid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CTwoFactor_Status_Response::release_token_gid() {
  // @@protoc_insertion_point(field_release:CTwoFactor_Status_Response.token_gid)
  if (!_internal_has_token_gid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = token_gid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (token_gid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    token_gid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CTwoFactor_Status_Response::set_allocated_token_gid(std::string* token_gid) {
  if (token_gid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  token_gid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token_gid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (token_gid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    token_gid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CTwoFactor_Status_Response.token_gid)
}

// optional bool email_validated = 7 [(.description) = "Account has verified email capability"];
inline bool CTwoFactor_Status_Response::_internal_has_email_validated() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CTwoFactor_Status_Response::has_email_validated() const {
  return _internal_has_email_validated();
}
inline void CTwoFactor_Status_Response::clear_email_validated() {
  email_validated_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool CTwoFactor_Status_Response::_internal_email_validated() const {
  return email_validated_;
}
inline bool CTwoFactor_Status_Response::email_validated() const {
  // @@protoc_insertion_point(field_get:CTwoFactor_Status_Response.email_validated)
  return _internal_email_validated();
}
inline void CTwoFactor_Status_Response::_internal_set_email_validated(bool value) {
  _has_bits_[0] |= 0x00000100u;
  email_validated_ = value;
}
inline void CTwoFactor_Status_Response::set_email_validated(bool value) {
  _internal_set_email_validated(value);
  // @@protoc_insertion_point(field_set:CTwoFactor_Status_Response.email_validated)
}

// optional string device_identifier = 8 [(.description) = "Authenticator (phone) identifier"];
inline bool CTwoFactor_Status_Response::_internal_has_device_identifier() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CTwoFactor_Status_Response::has_device_identifier() const {
  return _internal_has_device_identifier();
}
inline void CTwoFactor_Status_Response::clear_device_identifier() {
  device_identifier_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CTwoFactor_Status_Response::device_identifier() const {
  // @@protoc_insertion_point(field_get:CTwoFactor_Status_Response.device_identifier)
  return _internal_device_identifier();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CTwoFactor_Status_Response::set_device_identifier(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 device_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CTwoFactor_Status_Response.device_identifier)
}
inline std::string* CTwoFactor_Status_Response::mutable_device_identifier() {
  std::string* _s = _internal_mutable_device_identifier();
  // @@protoc_insertion_point(field_mutable:CTwoFactor_Status_Response.device_identifier)
  return _s;
}
inline const std::string& CTwoFactor_Status_Response::_internal_device_identifier() const {
  return device_identifier_.Get();
}
inline void CTwoFactor_Status_Response::_internal_set_device_identifier(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  device_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CTwoFactor_Status_Response::_internal_mutable_device_identifier() {
  _has_bits_[0] |= 0x00000002u;
  return device_identifier_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CTwoFactor_Status_Response::release_device_identifier() {
  // @@protoc_insertion_point(field_release:CTwoFactor_Status_Response.device_identifier)
  if (!_internal_has_device_identifier()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = device_identifier_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (device_identifier_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    device_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CTwoFactor_Status_Response::set_allocated_device_identifier(std::string* device_identifier) {
  if (device_identifier != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  device_identifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_identifier,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (device_identifier_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    device_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CTwoFactor_Status_Response.device_identifier)
}

// optional uint32 time_created = 9 [(.description) = "When the token was created"];
inline bool CTwoFactor_Status_Response::_internal_has_time_created() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CTwoFactor_Status_Response::has_time_created() const {
  return _internal_has_time_created();
}
inline void CTwoFactor_Status_Response::clear_time_created() {
  time_created_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline uint32_t CTwoFactor_Status_Response::_internal_time_created() const {
  return time_created_;
}
inline uint32_t CTwoFactor_Status_Response::time_created() const {
  // @@protoc_insertion_point(field_get:CTwoFactor_Status_Response.time_created)
  return _internal_time_created();
}
inline void CTwoFactor_Status_Response::_internal_set_time_created(uint32_t value) {
  _has_bits_[0] |= 0x00000400u;
  time_created_ = value;
}
inline void CTwoFactor_Status_Response::set_time_created(uint32_t value) {
  _internal_set_time_created(value);
  // @@protoc_insertion_point(field_set:CTwoFactor_Status_Response.time_created)
}

// optional uint32 revocation_attempts_remaining = 10 [(.description) = "Number of revocation code attempts remaining"];
inline bool CTwoFactor_Status_Response::_internal_has_revocation_attempts_remaining() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CTwoFactor_Status_Response::has_revocation_attempts_remaining() const {
  return _internal_has_revocation_attempts_remaining();
}
inline void CTwoFactor_Status_Response::clear_revocation_attempts_remaining() {
  revocation_attempts_remaining_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline uint32_t CTwoFactor_Status_Response::_internal_revocation_attempts_remaining() const {
  return revocation_attempts_remaining_;
}
inline uint32_t CTwoFactor_Status_Response::revocation_attempts_remaining() const {
  // @@protoc_insertion_point(field_get:CTwoFactor_Status_Response.revocation_attempts_remaining)
  return _internal_revocation_attempts_remaining();
}
inline void CTwoFactor_Status_Response::_internal_set_revocation_attempts_remaining(uint32_t value) {
  _has_bits_[0] |= 0x00000800u;
  revocation_attempts_remaining_ = value;
}
inline void CTwoFactor_Status_Response::set_revocation_attempts_remaining(uint32_t value) {
  _internal_set_revocation_attempts_remaining(value);
  // @@protoc_insertion_point(field_set:CTwoFactor_Status_Response.revocation_attempts_remaining)
}

// optional string classified_agent = 11 [(.description) = "Agent that added the authenticator (e.g., ios / android / other)"];
inline bool CTwoFactor_Status_Response::_internal_has_classified_agent() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CTwoFactor_Status_Response::has_classified_agent() const {
  return _internal_has_classified_agent();
}
inline void CTwoFactor_Status_Response::clear_classified_agent() {
  classified_agent_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CTwoFactor_Status_Response::classified_agent() const {
  // @@protoc_insertion_point(field_get:CTwoFactor_Status_Response.classified_agent)
  return _internal_classified_agent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CTwoFactor_Status_Response::set_classified_agent(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 classified_agent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CTwoFactor_Status_Response.classified_agent)
}
inline std::string* CTwoFactor_Status_Response::mutable_classified_agent() {
  std::string* _s = _internal_mutable_classified_agent();
  // @@protoc_insertion_point(field_mutable:CTwoFactor_Status_Response.classified_agent)
  return _s;
}
inline const std::string& CTwoFactor_Status_Response::_internal_classified_agent() const {
  return classified_agent_.Get();
}
inline void CTwoFactor_Status_Response::_internal_set_classified_agent(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  classified_agent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CTwoFactor_Status_Response::_internal_mutable_classified_agent() {
  _has_bits_[0] |= 0x00000004u;
  return classified_agent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CTwoFactor_Status_Response::release_classified_agent() {
  // @@protoc_insertion_point(field_release:CTwoFactor_Status_Response.classified_agent)
  if (!_internal_has_classified_agent()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = classified_agent_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (classified_agent_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    classified_agent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CTwoFactor_Status_Response::set_allocated_classified_agent(std::string* classified_agent) {
  if (classified_agent != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  classified_agent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), classified_agent,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (classified_agent_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    classified_agent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CTwoFactor_Status_Response.classified_agent)
}

// optional bool allow_external_authenticator = 12 [(.description) = "Allow a third-party authenticator (in addition to two-factor)"];
inline bool CTwoFactor_Status_Response::_internal_has_allow_external_authenticator() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CTwoFactor_Status_Response::has_allow_external_authenticator() const {
  return _internal_has_allow_external_authenticator();
}
inline void CTwoFactor_Status_Response::clear_allow_external_authenticator() {
  allow_external_authenticator_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool CTwoFactor_Status_Response::_internal_allow_external_authenticator() const {
  return allow_external_authenticator_;
}
inline bool CTwoFactor_Status_Response::allow_external_authenticator() const {
  // @@protoc_insertion_point(field_get:CTwoFactor_Status_Response.allow_external_authenticator)
  return _internal_allow_external_authenticator();
}
inline void CTwoFactor_Status_Response::_internal_set_allow_external_authenticator(bool value) {
  _has_bits_[0] |= 0x00000200u;
  allow_external_authenticator_ = value;
}
inline void CTwoFactor_Status_Response::set_allow_external_authenticator(bool value) {
  _internal_set_allow_external_authenticator(value);
  // @@protoc_insertion_point(field_set:CTwoFactor_Status_Response.allow_external_authenticator)
}

// optional uint32 time_transferred = 13 [(.description) = "When the token was transferred from another device, if applicable"];
inline bool CTwoFactor_Status_Response::_internal_has_time_transferred() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CTwoFactor_Status_Response::has_time_transferred() const {
  return _internal_has_time_transferred();
}
inline void CTwoFactor_Status_Response::clear_time_transferred() {
  time_transferred_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline uint32_t CTwoFactor_Status_Response::_internal_time_transferred() const {
  return time_transferred_;
}
inline uint32_t CTwoFactor_Status_Response::time_transferred() const {
  // @@protoc_insertion_point(field_get:CTwoFactor_Status_Response.time_transferred)
  return _internal_time_transferred();
}
inline void CTwoFactor_Status_Response::_internal_set_time_transferred(uint32_t value) {
  _has_bits_[0] |= 0x00001000u;
  time_transferred_ = value;
}
inline void CTwoFactor_Status_Response::set_time_transferred(uint32_t value) {
  _internal_set_time_transferred(value);
  // @@protoc_insertion_point(field_set:CTwoFactor_Status_Response.time_transferred)
}

// optional uint32 version = 14 [(.description) = "Current token version"];
inline bool CTwoFactor_Status_Response::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CTwoFactor_Status_Response::has_version() const {
  return _internal_has_version();
}
inline void CTwoFactor_Status_Response::clear_version() {
  version_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline uint32_t CTwoFactor_Status_Response::_internal_version() const {
  return version_;
}
inline uint32_t CTwoFactor_Status_Response::version() const {
  // @@protoc_insertion_point(field_get:CTwoFactor_Status_Response.version)
  return _internal_version();
}
inline void CTwoFactor_Status_Response::_internal_set_version(uint32_t value) {
  _has_bits_[0] |= 0x00002000u;
  version_ = value;
}
inline void CTwoFactor_Status_Response::set_version(uint32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:CTwoFactor_Status_Response.version)
}

// -------------------------------------------------------------------

// CTwoFactor_AddAuthenticator_Request

// optional fixed64 steamid = 1 [(.description) = "steamid to use"];
inline bool CTwoFactor_AddAuthenticator_Request::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CTwoFactor_AddAuthenticator_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CTwoFactor_AddAuthenticator_Request::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CTwoFactor_AddAuthenticator_Request::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CTwoFactor_AddAuthenticator_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CTwoFactor_AddAuthenticator_Request.steamid)
  return _internal_steamid();
}
inline void CTwoFactor_AddAuthenticator_Request::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  steamid_ = value;
}
inline void CTwoFactor_AddAuthenticator_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CTwoFactor_AddAuthenticator_Request.steamid)
}

// optional uint64 authenticator_time = 2 [(.description) = "Current authenticator time"];
inline bool CTwoFactor_AddAuthenticator_Request::_internal_has_authenticator_time() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CTwoFactor_AddAuthenticator_Request::has_authenticator_time() const {
  return _internal_has_authenticator_time();
}
inline void CTwoFactor_AddAuthenticator_Request::clear_authenticator_time() {
  authenticator_time_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline uint64_t CTwoFactor_AddAuthenticator_Request::_internal_authenticator_time() const {
  return authenticator_time_;
}
inline uint64_t CTwoFactor_AddAuthenticator_Request::authenticator_time() const {
  // @@protoc_insertion_point(field_get:CTwoFactor_AddAuthenticator_Request.authenticator_time)
  return _internal_authenticator_time();
}
inline void CTwoFactor_AddAuthenticator_Request::_internal_set_authenticator_time(uint64_t value) {
  _has_bits_[0] |= 0x00000008u;
  authenticator_time_ = value;
}
inline void CTwoFactor_AddAuthenticator_Request::set_authenticator_time(uint64_t value) {
  _internal_set_authenticator_time(value);
  // @@protoc_insertion_point(field_set:CTwoFactor_AddAuthenticator_Request.authenticator_time)
}

// optional fixed64 serial_number = 3 [(.description) = "locally computed serial (deprecated)"];
inline bool CTwoFactor_AddAuthenticator_Request::_internal_has_serial_number() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CTwoFactor_AddAuthenticator_Request::has_serial_number() const {
  return _internal_has_serial_number();
}
inline void CTwoFactor_AddAuthenticator_Request::clear_serial_number() {
  serial_number_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000010u;
}
inline uint64_t CTwoFactor_AddAuthenticator_Request::_internal_serial_number() const {
  return serial_number_;
}
inline uint64_t CTwoFactor_AddAuthenticator_Request::serial_number() const {
  // @@protoc_insertion_point(field_get:CTwoFactor_AddAuthenticator_Request.serial_number)
  return _internal_serial_number();
}
inline void CTwoFactor_AddAuthenticator_Request::_internal_set_serial_number(uint64_t value) {
  _has_bits_[0] |= 0x00000010u;
  serial_number_ = value;
}
inline void CTwoFactor_AddAuthenticator_Request::set_serial_number(uint64_t value) {
  _internal_set_serial_number(value);
  // @@protoc_insertion_point(field_set:CTwoFactor_AddAuthenticator_Request.serial_number)
}

// optional uint32 authenticator_type = 4 [(.description) = "Authenticator type"];
inline bool CTwoFactor_AddAuthenticator_Request::_internal_has_authenticator_type() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CTwoFactor_AddAuthenticator_Request::has_authenticator_type() const {
  return _internal_has_authenticator_type();
}
inline void CTwoFactor_AddAuthenticator_Request::clear_authenticator_type() {
  authenticator_type_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CTwoFactor_AddAuthenticator_Request::_internal_authenticator_type() const {
  return authenticator_type_;
}
inline uint32_t CTwoFactor_AddAuthenticator_Request::authenticator_type() const {
  // @@protoc_insertion_point(field_get:CTwoFactor_AddAuthenticator_Request.authenticator_type)
  return _internal_authenticator_type();
}
inline void CTwoFactor_AddAuthenticator_Request::_internal_set_authenticator_type(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  authenticator_type_ = value;
}
inline void CTwoFactor_AddAuthenticator_Request::set_authenticator_type(uint32_t value) {
  _internal_set_authenticator_type(value);
  // @@protoc_insertion_point(field_set:CTwoFactor_AddAuthenticator_Request.authenticator_type)
}

// optional string device_identifier = 5 [(.description) = "Authenticator identifier"];
inline bool CTwoFactor_AddAuthenticator_Request::_internal_has_device_identifier() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CTwoFactor_AddAuthenticator_Request::has_device_identifier() const {
  return _internal_has_device_identifier();
}
inline void CTwoFactor_AddAuthenticator_Request::clear_device_identifier() {
  device_identifier_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CTwoFactor_AddAuthenticator_Request::device_identifier() const {
  // @@protoc_insertion_point(field_get:CTwoFactor_AddAuthenticator_Request.device_identifier)
  return _internal_device_identifier();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CTwoFactor_AddAuthenticator_Request::set_device_identifier(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 device_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CTwoFactor_AddAuthenticator_Request.device_identifier)
}
inline std::string* CTwoFactor_AddAuthenticator_Request::mutable_device_identifier() {
  std::string* _s = _internal_mutable_device_identifier();
  // @@protoc_insertion_point(field_mutable:CTwoFactor_AddAuthenticator_Request.device_identifier)
  return _s;
}
inline const std::string& CTwoFactor_AddAuthenticator_Request::_internal_device_identifier() const {
  return device_identifier_.Get();
}
inline void CTwoFactor_AddAuthenticator_Request::_internal_set_device_identifier(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  device_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CTwoFactor_AddAuthenticator_Request::_internal_mutable_device_identifier() {
  _has_bits_[0] |= 0x00000001u;
  return device_identifier_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CTwoFactor_AddAuthenticator_Request::release_device_identifier() {
  // @@protoc_insertion_point(field_release:CTwoFactor_AddAuthenticator_Request.device_identifier)
  if (!_internal_has_device_identifier()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = device_identifier_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (device_identifier_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    device_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CTwoFactor_AddAuthenticator_Request::set_allocated_device_identifier(std::string* device_identifier) {
  if (device_identifier != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  device_identifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_identifier,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (device_identifier_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    device_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CTwoFactor_AddAuthenticator_Request.device_identifier)
}

// optional string sms_phone_id = 6 [(.description) = "ID of phone to use for SMS verification"];
inline bool CTwoFactor_AddAuthenticator_Request::_internal_has_sms_phone_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CTwoFactor_AddAuthenticator_Request::has_sms_phone_id() const {
  return _internal_has_sms_phone_id();
}
inline void CTwoFactor_AddAuthenticator_Request::clear_sms_phone_id() {
  sms_phone_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CTwoFactor_AddAuthenticator_Request::sms_phone_id() const {
  // @@protoc_insertion_point(field_get:CTwoFactor_AddAuthenticator_Request.sms_phone_id)
  return _internal_sms_phone_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CTwoFactor_AddAuthenticator_Request::set_sms_phone_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 sms_phone_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CTwoFactor_AddAuthenticator_Request.sms_phone_id)
}
inline std::string* CTwoFactor_AddAuthenticator_Request::mutable_sms_phone_id() {
  std::string* _s = _internal_mutable_sms_phone_id();
  // @@protoc_insertion_point(field_mutable:CTwoFactor_AddAuthenticator_Request.sms_phone_id)
  return _s;
}
inline const std::string& CTwoFactor_AddAuthenticator_Request::_internal_sms_phone_id() const {
  return sms_phone_id_.Get();
}
inline void CTwoFactor_AddAuthenticator_Request::_internal_set_sms_phone_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  sms_phone_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CTwoFactor_AddAuthenticator_Request::_internal_mutable_sms_phone_id() {
  _has_bits_[0] |= 0x00000002u;
  return sms_phone_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CTwoFactor_AddAuthenticator_Request::release_sms_phone_id() {
  // @@protoc_insertion_point(field_release:CTwoFactor_AddAuthenticator_Request.sms_phone_id)
  if (!_internal_has_sms_phone_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = sms_phone_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sms_phone_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sms_phone_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CTwoFactor_AddAuthenticator_Request::set_allocated_sms_phone_id(std::string* sms_phone_id) {
  if (sms_phone_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sms_phone_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sms_phone_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sms_phone_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sms_phone_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CTwoFactor_AddAuthenticator_Request.sms_phone_id)
}

// repeated string http_headers = 7 [(.description) = "HTTP headers alternating by K/V"];
inline int CTwoFactor_AddAuthenticator_Request::_internal_http_headers_size() const {
  return http_headers_.size();
}
inline int CTwoFactor_AddAuthenticator_Request::http_headers_size() const {
  return _internal_http_headers_size();
}
inline void CTwoFactor_AddAuthenticator_Request::clear_http_headers() {
  http_headers_.Clear();
}
inline std::string* CTwoFactor_AddAuthenticator_Request::add_http_headers() {
  std::string* _s = _internal_add_http_headers();
  // @@protoc_insertion_point(field_add_mutable:CTwoFactor_AddAuthenticator_Request.http_headers)
  return _s;
}
inline const std::string& CTwoFactor_AddAuthenticator_Request::_internal_http_headers(int index) const {
  return http_headers_.Get(index);
}
inline const std::string& CTwoFactor_AddAuthenticator_Request::http_headers(int index) const {
  // @@protoc_insertion_point(field_get:CTwoFactor_AddAuthenticator_Request.http_headers)
  return _internal_http_headers(index);
}
inline std::string* CTwoFactor_AddAuthenticator_Request::mutable_http_headers(int index) {
  // @@protoc_insertion_point(field_mutable:CTwoFactor_AddAuthenticator_Request.http_headers)
  return http_headers_.Mutable(index);
}
inline void CTwoFactor_AddAuthenticator_Request::set_http_headers(int index, const std::string& value) {
  http_headers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:CTwoFactor_AddAuthenticator_Request.http_headers)
}
inline void CTwoFactor_AddAuthenticator_Request::set_http_headers(int index, std::string&& value) {
  http_headers_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:CTwoFactor_AddAuthenticator_Request.http_headers)
}
inline void CTwoFactor_AddAuthenticator_Request::set_http_headers(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  http_headers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CTwoFactor_AddAuthenticator_Request.http_headers)
}
inline void CTwoFactor_AddAuthenticator_Request::set_http_headers(int index, const char* value, size_t size) {
  http_headers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CTwoFactor_AddAuthenticator_Request.http_headers)
}
inline std::string* CTwoFactor_AddAuthenticator_Request::_internal_add_http_headers() {
  return http_headers_.Add();
}
inline void CTwoFactor_AddAuthenticator_Request::add_http_headers(const std::string& value) {
  http_headers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CTwoFactor_AddAuthenticator_Request.http_headers)
}
inline void CTwoFactor_AddAuthenticator_Request::add_http_headers(std::string&& value) {
  http_headers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CTwoFactor_AddAuthenticator_Request.http_headers)
}
inline void CTwoFactor_AddAuthenticator_Request::add_http_headers(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  http_headers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CTwoFactor_AddAuthenticator_Request.http_headers)
}
inline void CTwoFactor_AddAuthenticator_Request::add_http_headers(const char* value, size_t size) {
  http_headers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CTwoFactor_AddAuthenticator_Request.http_headers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CTwoFactor_AddAuthenticator_Request::http_headers() const {
  // @@protoc_insertion_point(field_list:CTwoFactor_AddAuthenticator_Request.http_headers)
  return http_headers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CTwoFactor_AddAuthenticator_Request::mutable_http_headers() {
  // @@protoc_insertion_point(field_mutable_list:CTwoFactor_AddAuthenticator_Request.http_headers)
  return &http_headers_;
}

// optional uint32 version = 8 [default = 1, (.description) = "What the version of our token should be"];
inline bool CTwoFactor_AddAuthenticator_Request::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CTwoFactor_AddAuthenticator_Request::has_version() const {
  return _internal_has_version();
}
inline void CTwoFactor_AddAuthenticator_Request::clear_version() {
  version_ = 1u;
  _has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CTwoFactor_AddAuthenticator_Request::_internal_version() const {
  return version_;
}
inline uint32_t CTwoFactor_AddAuthenticator_Request::version() const {
  // @@protoc_insertion_point(field_get:CTwoFactor_AddAuthenticator_Request.version)
  return _internal_version();
}
inline void CTwoFactor_AddAuthenticator_Request::_internal_set_version(uint32_t value) {
  _has_bits_[0] |= 0x00000040u;
  version_ = value;
}
inline void CTwoFactor_AddAuthenticator_Request::set_version(uint32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:CTwoFactor_AddAuthenticator_Request.version)
}

// -------------------------------------------------------------------

// CTwoFactor_AddAuthenticator_Response

// optional bytes shared_secret = 1 [(.description) = "Shared secret between server and authenticator"];
inline bool CTwoFactor_AddAuthenticator_Response::_internal_has_shared_secret() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CTwoFactor_AddAuthenticator_Response::has_shared_secret() const {
  return _internal_has_shared_secret();
}
inline void CTwoFactor_AddAuthenticator_Response::clear_shared_secret() {
  shared_secret_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CTwoFactor_AddAuthenticator_Response::shared_secret() const {
  // @@protoc_insertion_point(field_get:CTwoFactor_AddAuthenticator_Response.shared_secret)
  return _internal_shared_secret();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CTwoFactor_AddAuthenticator_Response::set_shared_secret(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 shared_secret_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CTwoFactor_AddAuthenticator_Response.shared_secret)
}
inline std::string* CTwoFactor_AddAuthenticator_Response::mutable_shared_secret() {
  std::string* _s = _internal_mutable_shared_secret();
  // @@protoc_insertion_point(field_mutable:CTwoFactor_AddAuthenticator_Response.shared_secret)
  return _s;
}
inline const std::string& CTwoFactor_AddAuthenticator_Response::_internal_shared_secret() const {
  return shared_secret_.Get();
}
inline void CTwoFactor_AddAuthenticator_Response::_internal_set_shared_secret(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  shared_secret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CTwoFactor_AddAuthenticator_Response::_internal_mutable_shared_secret() {
  _has_bits_[0] |= 0x00000001u;
  return shared_secret_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CTwoFactor_AddAuthenticator_Response::release_shared_secret() {
  // @@protoc_insertion_point(field_release:CTwoFactor_AddAuthenticator_Response.shared_secret)
  if (!_internal_has_shared_secret()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = shared_secret_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (shared_secret_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    shared_secret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CTwoFactor_AddAuthenticator_Response::set_allocated_shared_secret(std::string* shared_secret) {
  if (shared_secret != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  shared_secret_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), shared_secret,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (shared_secret_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    shared_secret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CTwoFactor_AddAuthenticator_Response.shared_secret)
}

// optional fixed64 serial_number = 2 [(.description) = "Authenticator serial number (unique per token)"];
inline bool CTwoFactor_AddAuthenticator_Response::_internal_has_serial_number() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CTwoFactor_AddAuthenticator_Response::has_serial_number() const {
  return _internal_has_serial_number();
}
inline void CTwoFactor_AddAuthenticator_Response::clear_serial_number() {
  serial_number_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000100u;
}
inline uint64_t CTwoFactor_AddAuthenticator_Response::_internal_serial_number() const {
  return serial_number_;
}
inline uint64_t CTwoFactor_AddAuthenticator_Response::serial_number() const {
  // @@protoc_insertion_point(field_get:CTwoFactor_AddAuthenticator_Response.serial_number)
  return _internal_serial_number();
}
inline void CTwoFactor_AddAuthenticator_Response::_internal_set_serial_number(uint64_t value) {
  _has_bits_[0] |= 0x00000100u;
  serial_number_ = value;
}
inline void CTwoFactor_AddAuthenticator_Response::set_serial_number(uint64_t value) {
  _internal_set_serial_number(value);
  // @@protoc_insertion_point(field_set:CTwoFactor_AddAuthenticator_Response.serial_number)
}

// optional string revocation_code = 3 [(.description) = "code used to revoke authenticator"];
inline bool CTwoFactor_AddAuthenticator_Response::_internal_has_revocation_code() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CTwoFactor_AddAuthenticator_Response::has_revocation_code() const {
  return _internal_has_revocation_code();
}
inline void CTwoFactor_AddAuthenticator_Response::clear_revocation_code() {
  revocation_code_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CTwoFactor_AddAuthenticator_Response::revocation_code() const {
  // @@protoc_insertion_point(field_get:CTwoFactor_AddAuthenticator_Response.revocation_code)
  return _internal_revocation_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CTwoFactor_AddAuthenticator_Response::set_revocation_code(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 revocation_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CTwoFactor_AddAuthenticator_Response.revocation_code)
}
inline std::string* CTwoFactor_AddAuthenticator_Response::mutable_revocation_code() {
  std::string* _s = _internal_mutable_revocation_code();
  // @@protoc_insertion_point(field_mutable:CTwoFactor_AddAuthenticator_Response.revocation_code)
  return _s;
}
inline const std::string& CTwoFactor_AddAuthenticator_Response::_internal_revocation_code() const {
  return revocation_code_.Get();
}
inline void CTwoFactor_AddAuthenticator_Response::_internal_set_revocation_code(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  revocation_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CTwoFactor_AddAuthenticator_Response::_internal_mutable_revocation_code() {
  _has_bits_[0] |= 0x00000002u;
  return revocation_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CTwoFactor_AddAuthenticator_Response::release_revocation_code() {
  // @@protoc_insertion_point(field_release:CTwoFactor_AddAuthenticator_Response.revocation_code)
  if (!_internal_has_revocation_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = revocation_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (revocation_code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    revocation_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CTwoFactor_AddAuthenticator_Response::set_allocated_revocation_code(std::string* revocation_code) {
  if (revocation_code != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  revocation_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), revocation_code,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (revocation_code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    revocation_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CTwoFactor_AddAuthenticator_Response.revocation_code)
}

// optional string uri = 4 [(.description) = "URI for QR code generation"];
inline bool CTwoFactor_AddAuthenticator_Response::_internal_has_uri() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CTwoFactor_AddAuthenticator_Response::has_uri() const {
  return _internal_has_uri();
}
inline void CTwoFactor_AddAuthenticator_Response::clear_uri() {
  uri_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CTwoFactor_AddAuthenticator_Response::uri() const {
  // @@protoc_insertion_point(field_get:CTwoFactor_AddAuthenticator_Response.uri)
  return _internal_uri();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CTwoFactor_AddAuthenticator_Response::set_uri(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CTwoFactor_AddAuthenticator_Response.uri)
}
inline std::string* CTwoFactor_AddAuthenticator_Response::mutable_uri() {
  std::string* _s = _internal_mutable_uri();
  // @@protoc_insertion_point(field_mutable:CTwoFactor_AddAuthenticator_Response.uri)
  return _s;
}
inline const std::string& CTwoFactor_AddAuthenticator_Response::_internal_uri() const {
  return uri_.Get();
}
inline void CTwoFactor_AddAuthenticator_Response::_internal_set_uri(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CTwoFactor_AddAuthenticator_Response::_internal_mutable_uri() {
  _has_bits_[0] |= 0x00000004u;
  return uri_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CTwoFactor_AddAuthenticator_Response::release_uri() {
  // @@protoc_insertion_point(field_release:CTwoFactor_AddAuthenticator_Response.uri)
  if (!_internal_has_uri()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = uri_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (uri_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CTwoFactor_AddAuthenticator_Response::set_allocated_uri(std::string* uri) {
  if (uri != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  uri_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uri,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (uri_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CTwoFactor_AddAuthenticator_Response.uri)
}

// optional uint64 server_time = 5 [(.description) = "Current server time"];
inline bool CTwoFactor_AddAuthenticator_Response::_internal_has_server_time() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CTwoFactor_AddAuthenticator_Response::has_server_time() const {
  return _internal_has_server_time();
}
inline void CTwoFactor_AddAuthenticator_Response::clear_server_time() {
  server_time_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000200u;
}
inline uint64_t CTwoFactor_AddAuthenticator_Response::_internal_server_time() const {
  return server_time_;
}
inline uint64_t CTwoFactor_AddAuthenticator_Response::server_time() const {
  // @@protoc_insertion_point(field_get:CTwoFactor_AddAuthenticator_Response.server_time)
  return _internal_server_time();
}
inline void CTwoFactor_AddAuthenticator_Response::_internal_set_server_time(uint64_t value) {
  _has_bits_[0] |= 0x00000200u;
  server_time_ = value;
}
inline void CTwoFactor_AddAuthenticator_Response::set_server_time(uint64_t value) {
  _internal_set_server_time(value);
  // @@protoc_insertion_point(field_set:CTwoFactor_AddAuthenticator_Response.server_time)
}

// optional string account_name = 6 [(.description) = "Account name to display on token client"];
inline bool CTwoFactor_AddAuthenticator_Response::_internal_has_account_name() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CTwoFactor_AddAuthenticator_Response::has_account_name() const {
  return _internal_has_account_name();
}
inline void CTwoFactor_AddAuthenticator_Response::clear_account_name() {
  account_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CTwoFactor_AddAuthenticator_Response::account_name() const {
  // @@protoc_insertion_point(field_get:CTwoFactor_AddAuthenticator_Response.account_name)
  return _internal_account_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CTwoFactor_AddAuthenticator_Response::set_account_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 account_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CTwoFactor_AddAuthenticator_Response.account_name)
}
inline std::string* CTwoFactor_AddAuthenticator_Response::mutable_account_name() {
  std::string* _s = _internal_mutable_account_name();
  // @@protoc_insertion_point(field_mutable:CTwoFactor_AddAuthenticator_Response.account_name)
  return _s;
}
inline const std::string& CTwoFactor_AddAuthenticator_Response::_internal_account_name() const {
  return account_name_.Get();
}
inline void CTwoFactor_AddAuthenticator_Response::_internal_set_account_name(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  account_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CTwoFactor_AddAuthenticator_Response::_internal_mutable_account_name() {
  _has_bits_[0] |= 0x00000008u;
  return account_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CTwoFactor_AddAuthenticator_Response::release_account_name() {
  // @@protoc_insertion_point(field_release:CTwoFactor_AddAuthenticator_Response.account_name)
  if (!_internal_has_account_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = account_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (account_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    account_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CTwoFactor_AddAuthenticator_Response::set_allocated_account_name(std::string* account_name) {
  if (account_name != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  account_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (account_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    account_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CTwoFactor_AddAuthenticator_Response.account_name)
}

// optional string token_gid = 7 [(.description) = "Token GID assigned by server"];
inline bool CTwoFactor_AddAuthenticator_Response::_internal_has_token_gid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CTwoFactor_AddAuthenticator_Response::has_token_gid() const {
  return _internal_has_token_gid();
}
inline void CTwoFactor_AddAuthenticator_Response::clear_token_gid() {
  token_gid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& CTwoFactor_AddAuthenticator_Response::token_gid() const {
  // @@protoc_insertion_point(field_get:CTwoFactor_AddAuthenticator_Response.token_gid)
  return _internal_token_gid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CTwoFactor_AddAuthenticator_Response::set_token_gid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 token_gid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CTwoFactor_AddAuthenticator_Response.token_gid)
}
inline std::string* CTwoFactor_AddAuthenticator_Response::mutable_token_gid() {
  std::string* _s = _internal_mutable_token_gid();
  // @@protoc_insertion_point(field_mutable:CTwoFactor_AddAuthenticator_Response.token_gid)
  return _s;
}
inline const std::string& CTwoFactor_AddAuthenticator_Response::_internal_token_gid() const {
  return token_gid_.Get();
}
inline void CTwoFactor_AddAuthenticator_Response::_internal_set_token_gid(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  token_gid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CTwoFactor_AddAuthenticator_Response::_internal_mutable_token_gid() {
  _has_bits_[0] |= 0x00000010u;
  return token_gid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CTwoFactor_AddAuthenticator_Response::release_token_gid() {
  // @@protoc_insertion_point(field_release:CTwoFactor_AddAuthenticator_Response.token_gid)
  if (!_internal_has_token_gid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  auto* p = token_gid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (token_gid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    token_gid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CTwoFactor_AddAuthenticator_Response::set_allocated_token_gid(std::string* token_gid) {
  if (token_gid != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  token_gid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token_gid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (token_gid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    token_gid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CTwoFactor_AddAuthenticator_Response.token_gid)
}

// optional bytes identity_secret = 8 [(.description) = "Secret used for identity attestation (e.g., for eventing)"];
inline bool CTwoFactor_AddAuthenticator_Response::_internal_has_identity_secret() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CTwoFactor_AddAuthenticator_Response::has_identity_secret() const {
  return _internal_has_identity_secret();
}
inline void CTwoFactor_AddAuthenticator_Response::clear_identity_secret() {
  identity_secret_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& CTwoFactor_AddAuthenticator_Response::identity_secret() const {
  // @@protoc_insertion_point(field_get:CTwoFactor_AddAuthenticator_Response.identity_secret)
  return _internal_identity_secret();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CTwoFactor_AddAuthenticator_Response::set_identity_secret(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000020u;
 identity_secret_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CTwoFactor_AddAuthenticator_Response.identity_secret)
}
inline std::string* CTwoFactor_AddAuthenticator_Response::mutable_identity_secret() {
  std::string* _s = _internal_mutable_identity_secret();
  // @@protoc_insertion_point(field_mutable:CTwoFactor_AddAuthenticator_Response.identity_secret)
  return _s;
}
inline const std::string& CTwoFactor_AddAuthenticator_Response::_internal_identity_secret() const {
  return identity_secret_.Get();
}
inline void CTwoFactor_AddAuthenticator_Response::_internal_set_identity_secret(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  identity_secret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CTwoFactor_AddAuthenticator_Response::_internal_mutable_identity_secret() {
  _has_bits_[0] |= 0x00000020u;
  return identity_secret_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CTwoFactor_AddAuthenticator_Response::release_identity_secret() {
  // @@protoc_insertion_point(field_release:CTwoFactor_AddAuthenticator_Response.identity_secret)
  if (!_internal_has_identity_secret()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  auto* p = identity_secret_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (identity_secret_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    identity_secret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CTwoFactor_AddAuthenticator_Response::set_allocated_identity_secret(std::string* identity_secret) {
  if (identity_secret != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  identity_secret_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), identity_secret,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (identity_secret_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    identity_secret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CTwoFactor_AddAuthenticator_Response.identity_secret)
}

// optional bytes secret_1 = 9 [(.description) = "Spare shared secret"];
inline bool CTwoFactor_AddAuthenticator_Response::_internal_has_secret_1() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CTwoFactor_AddAuthenticator_Response::has_secret_1() const {
  return _internal_has_secret_1();
}
inline void CTwoFactor_AddAuthenticator_Response::clear_secret_1() {
  secret_1_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& CTwoFactor_AddAuthenticator_Response::secret_1() const {
  // @@protoc_insertion_point(field_get:CTwoFactor_AddAuthenticator_Response.secret_1)
  return _internal_secret_1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CTwoFactor_AddAuthenticator_Response::set_secret_1(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000040u;
 secret_1_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CTwoFactor_AddAuthenticator_Response.secret_1)
}
inline std::string* CTwoFactor_AddAuthenticator_Response::mutable_secret_1() {
  std::string* _s = _internal_mutable_secret_1();
  // @@protoc_insertion_point(field_mutable:CTwoFactor_AddAuthenticator_Response.secret_1)
  return _s;
}
inline const std::string& CTwoFactor_AddAuthenticator_Response::_internal_secret_1() const {
  return secret_1_.Get();
}
inline void CTwoFactor_AddAuthenticator_Response::_internal_set_secret_1(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  secret_1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CTwoFactor_AddAuthenticator_Response::_internal_mutable_secret_1() {
  _has_bits_[0] |= 0x00000040u;
  return secret_1_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CTwoFactor_AddAuthenticator_Response::release_secret_1() {
  // @@protoc_insertion_point(field_release:CTwoFactor_AddAuthenticator_Response.secret_1)
  if (!_internal_has_secret_1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  auto* p = secret_1_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (secret_1_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    secret_1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CTwoFactor_AddAuthenticator_Response::set_allocated_secret_1(std::string* secret_1) {
  if (secret_1 != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  secret_1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), secret_1,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (secret_1_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    secret_1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CTwoFactor_AddAuthenticator_Response.secret_1)
}

// optional int32 status = 10 [(.description) = "Result code"];
inline bool CTwoFactor_AddAuthenticator_Response::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CTwoFactor_AddAuthenticator_Response::has_status() const {
  return _internal_has_status();
}
inline void CTwoFactor_AddAuthenticator_Response::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline int32_t CTwoFactor_AddAuthenticator_Response::_internal_status() const {
  return status_;
}
inline int32_t CTwoFactor_AddAuthenticator_Response::status() const {
  // @@protoc_insertion_point(field_get:CTwoFactor_AddAuthenticator_Response.status)
  return _internal_status();
}
inline void CTwoFactor_AddAuthenticator_Response::_internal_set_status(int32_t value) {
  _has_bits_[0] |= 0x00000400u;
  status_ = value;
}
inline void CTwoFactor_AddAuthenticator_Response::set_status(int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:CTwoFactor_AddAuthenticator_Response.status)
}

// optional string phone_number_hint = 11 [(.description) = "a portion of the phone number the SMS code was sent to"];
inline bool CTwoFactor_AddAuthenticator_Response::_internal_has_phone_number_hint() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CTwoFactor_AddAuthenticator_Response::has_phone_number_hint() const {
  return _internal_has_phone_number_hint();
}
inline void CTwoFactor_AddAuthenticator_Response::clear_phone_number_hint() {
  phone_number_hint_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& CTwoFactor_AddAuthenticator_Response::phone_number_hint() const {
  // @@protoc_insertion_point(field_get:CTwoFactor_AddAuthenticator_Response.phone_number_hint)
  return _internal_phone_number_hint();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CTwoFactor_AddAuthenticator_Response::set_phone_number_hint(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000080u;
 phone_number_hint_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CTwoFactor_AddAuthenticator_Response.phone_number_hint)
}
inline std::string* CTwoFactor_AddAuthenticator_Response::mutable_phone_number_hint() {
  std::string* _s = _internal_mutable_phone_number_hint();
  // @@protoc_insertion_point(field_mutable:CTwoFactor_AddAuthenticator_Response.phone_number_hint)
  return _s;
}
inline const std::string& CTwoFactor_AddAuthenticator_Response::_internal_phone_number_hint() const {
  return phone_number_hint_.Get();
}
inline void CTwoFactor_AddAuthenticator_Response::_internal_set_phone_number_hint(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  phone_number_hint_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CTwoFactor_AddAuthenticator_Response::_internal_mutable_phone_number_hint() {
  _has_bits_[0] |= 0x00000080u;
  return phone_number_hint_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CTwoFactor_AddAuthenticator_Response::release_phone_number_hint() {
  // @@protoc_insertion_point(field_release:CTwoFactor_AddAuthenticator_Response.phone_number_hint)
  if (!_internal_has_phone_number_hint()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  auto* p = phone_number_hint_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (phone_number_hint_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    phone_number_hint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CTwoFactor_AddAuthenticator_Response::set_allocated_phone_number_hint(std::string* phone_number_hint) {
  if (phone_number_hint != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  phone_number_hint_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), phone_number_hint,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (phone_number_hint_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    phone_number_hint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CTwoFactor_AddAuthenticator_Response.phone_number_hint)
}

// -------------------------------------------------------------------

// CTwoFactor_SendEmail_Request

// optional fixed64 steamid = 1 [(.description) = "Steamid to use"];
inline bool CTwoFactor_SendEmail_Request::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CTwoFactor_SendEmail_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CTwoFactor_SendEmail_Request::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CTwoFactor_SendEmail_Request::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CTwoFactor_SendEmail_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CTwoFactor_SendEmail_Request.steamid)
  return _internal_steamid();
}
inline void CTwoFactor_SendEmail_Request::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
}
inline void CTwoFactor_SendEmail_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CTwoFactor_SendEmail_Request.steamid)
}

// optional uint32 email_type = 2 [(.description) = "Type of email to send (ETwoFactorEmailType::*)"];
inline bool CTwoFactor_SendEmail_Request::_internal_has_email_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CTwoFactor_SendEmail_Request::has_email_type() const {
  return _internal_has_email_type();
}
inline void CTwoFactor_SendEmail_Request::clear_email_type() {
  email_type_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CTwoFactor_SendEmail_Request::_internal_email_type() const {
  return email_type_;
}
inline uint32_t CTwoFactor_SendEmail_Request::email_type() const {
  // @@protoc_insertion_point(field_get:CTwoFactor_SendEmail_Request.email_type)
  return _internal_email_type();
}
inline void CTwoFactor_SendEmail_Request::_internal_set_email_type(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  email_type_ = value;
}
inline void CTwoFactor_SendEmail_Request::set_email_type(uint32_t value) {
  _internal_set_email_type(value);
  // @@protoc_insertion_point(field_set:CTwoFactor_SendEmail_Request.email_type)
}

// optional bool include_activation_code = 3 [(.description) = "Include activation code in email parameters"];
inline bool CTwoFactor_SendEmail_Request::_internal_has_include_activation_code() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CTwoFactor_SendEmail_Request::has_include_activation_code() const {
  return _internal_has_include_activation_code();
}
inline void CTwoFactor_SendEmail_Request::clear_include_activation_code() {
  include_activation_code_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CTwoFactor_SendEmail_Request::_internal_include_activation_code() const {
  return include_activation_code_;
}
inline bool CTwoFactor_SendEmail_Request::include_activation_code() const {
  // @@protoc_insertion_point(field_get:CTwoFactor_SendEmail_Request.include_activation_code)
  return _internal_include_activation_code();
}
inline void CTwoFactor_SendEmail_Request::_internal_set_include_activation_code(bool value) {
  _has_bits_[0] |= 0x00000004u;
  include_activation_code_ = value;
}
inline void CTwoFactor_SendEmail_Request::set_include_activation_code(bool value) {
  _internal_set_include_activation_code(value);
  // @@protoc_insertion_point(field_set:CTwoFactor_SendEmail_Request.include_activation_code)
}

// -------------------------------------------------------------------

// CTwoFactor_SendEmail_Response

// -------------------------------------------------------------------

// CTwoFactor_FinalizeAddAuthenticator_Request

// optional fixed64 steamid = 1 [(.description) = "steamid to use"];
inline bool CTwoFactor_FinalizeAddAuthenticator_Request::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CTwoFactor_FinalizeAddAuthenticator_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CTwoFactor_FinalizeAddAuthenticator_Request::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CTwoFactor_FinalizeAddAuthenticator_Request::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CTwoFactor_FinalizeAddAuthenticator_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CTwoFactor_FinalizeAddAuthenticator_Request.steamid)
  return _internal_steamid();
}
inline void CTwoFactor_FinalizeAddAuthenticator_Request::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  steamid_ = value;
}
inline void CTwoFactor_FinalizeAddAuthenticator_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CTwoFactor_FinalizeAddAuthenticator_Request.steamid)
}

// optional string authenticator_code = 2 [(.description) = "Current auth code"];
inline bool CTwoFactor_FinalizeAddAuthenticator_Request::_internal_has_authenticator_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CTwoFactor_FinalizeAddAuthenticator_Request::has_authenticator_code() const {
  return _internal_has_authenticator_code();
}
inline void CTwoFactor_FinalizeAddAuthenticator_Request::clear_authenticator_code() {
  authenticator_code_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CTwoFactor_FinalizeAddAuthenticator_Request::authenticator_code() const {
  // @@protoc_insertion_point(field_get:CTwoFactor_FinalizeAddAuthenticator_Request.authenticator_code)
  return _internal_authenticator_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CTwoFactor_FinalizeAddAuthenticator_Request::set_authenticator_code(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 authenticator_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CTwoFactor_FinalizeAddAuthenticator_Request.authenticator_code)
}
inline std::string* CTwoFactor_FinalizeAddAuthenticator_Request::mutable_authenticator_code() {
  std::string* _s = _internal_mutable_authenticator_code();
  // @@protoc_insertion_point(field_mutable:CTwoFactor_FinalizeAddAuthenticator_Request.authenticator_code)
  return _s;
}
inline const std::string& CTwoFactor_FinalizeAddAuthenticator_Request::_internal_authenticator_code() const {
  return authenticator_code_.Get();
}
inline void CTwoFactor_FinalizeAddAuthenticator_Request::_internal_set_authenticator_code(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  authenticator_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CTwoFactor_FinalizeAddAuthenticator_Request::_internal_mutable_authenticator_code() {
  _has_bits_[0] |= 0x00000001u;
  return authenticator_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CTwoFactor_FinalizeAddAuthenticator_Request::release_authenticator_code() {
  // @@protoc_insertion_point(field_release:CTwoFactor_FinalizeAddAuthenticator_Request.authenticator_code)
  if (!_internal_has_authenticator_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = authenticator_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (authenticator_code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    authenticator_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CTwoFactor_FinalizeAddAuthenticator_Request::set_allocated_authenticator_code(std::string* authenticator_code) {
  if (authenticator_code != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  authenticator_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), authenticator_code,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (authenticator_code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    authenticator_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CTwoFactor_FinalizeAddAuthenticator_Request.authenticator_code)
}

// optional uint64 authenticator_time = 3 [(.description) = "Current authenticator time"];
inline bool CTwoFactor_FinalizeAddAuthenticator_Request::_internal_has_authenticator_time() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CTwoFactor_FinalizeAddAuthenticator_Request::has_authenticator_time() const {
  return _internal_has_authenticator_time();
}
inline void CTwoFactor_FinalizeAddAuthenticator_Request::clear_authenticator_time() {
  authenticator_time_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline uint64_t CTwoFactor_FinalizeAddAuthenticator_Request::_internal_authenticator_time() const {
  return authenticator_time_;
}
inline uint64_t CTwoFactor_FinalizeAddAuthenticator_Request::authenticator_time() const {
  // @@protoc_insertion_point(field_get:CTwoFactor_FinalizeAddAuthenticator_Request.authenticator_time)
  return _internal_authenticator_time();
}
inline void CTwoFactor_FinalizeAddAuthenticator_Request::_internal_set_authenticator_time(uint64_t value) {
  _has_bits_[0] |= 0x00000008u;
  authenticator_time_ = value;
}
inline void CTwoFactor_FinalizeAddAuthenticator_Request::set_authenticator_time(uint64_t value) {
  _internal_set_authenticator_time(value);
  // @@protoc_insertion_point(field_set:CTwoFactor_FinalizeAddAuthenticator_Request.authenticator_time)
}

// optional string activation_code = 4 [(.description) = "Activation code from out-of-band message"];
inline bool CTwoFactor_FinalizeAddAuthenticator_Request::_internal_has_activation_code() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CTwoFactor_FinalizeAddAuthenticator_Request::has_activation_code() const {
  return _internal_has_activation_code();
}
inline void CTwoFactor_FinalizeAddAuthenticator_Request::clear_activation_code() {
  activation_code_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CTwoFactor_FinalizeAddAuthenticator_Request::activation_code() const {
  // @@protoc_insertion_point(field_get:CTwoFactor_FinalizeAddAuthenticator_Request.activation_code)
  return _internal_activation_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CTwoFactor_FinalizeAddAuthenticator_Request::set_activation_code(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 activation_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CTwoFactor_FinalizeAddAuthenticator_Request.activation_code)
}
inline std::string* CTwoFactor_FinalizeAddAuthenticator_Request::mutable_activation_code() {
  std::string* _s = _internal_mutable_activation_code();
  // @@protoc_insertion_point(field_mutable:CTwoFactor_FinalizeAddAuthenticator_Request.activation_code)
  return _s;
}
inline const std::string& CTwoFactor_FinalizeAddAuthenticator_Request::_internal_activation_code() const {
  return activation_code_.Get();
}
inline void CTwoFactor_FinalizeAddAuthenticator_Request::_internal_set_activation_code(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  activation_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CTwoFactor_FinalizeAddAuthenticator_Request::_internal_mutable_activation_code() {
  _has_bits_[0] |= 0x00000002u;
  return activation_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CTwoFactor_FinalizeAddAuthenticator_Request::release_activation_code() {
  // @@protoc_insertion_point(field_release:CTwoFactor_FinalizeAddAuthenticator_Request.activation_code)
  if (!_internal_has_activation_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = activation_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (activation_code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    activation_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CTwoFactor_FinalizeAddAuthenticator_Request::set_allocated_activation_code(std::string* activation_code) {
  if (activation_code != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  activation_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), activation_code,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (activation_code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    activation_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CTwoFactor_FinalizeAddAuthenticator_Request.activation_code)
}

// repeated string http_headers = 5 [(.description) = "HTTP headers alternating by K/V"];
inline int CTwoFactor_FinalizeAddAuthenticator_Request::_internal_http_headers_size() const {
  return http_headers_.size();
}
inline int CTwoFactor_FinalizeAddAuthenticator_Request::http_headers_size() const {
  return _internal_http_headers_size();
}
inline void CTwoFactor_FinalizeAddAuthenticator_Request::clear_http_headers() {
  http_headers_.Clear();
}
inline std::string* CTwoFactor_FinalizeAddAuthenticator_Request::add_http_headers() {
  std::string* _s = _internal_add_http_headers();
  // @@protoc_insertion_point(field_add_mutable:CTwoFactor_FinalizeAddAuthenticator_Request.http_headers)
  return _s;
}
inline const std::string& CTwoFactor_FinalizeAddAuthenticator_Request::_internal_http_headers(int index) const {
  return http_headers_.Get(index);
}
inline const std::string& CTwoFactor_FinalizeAddAuthenticator_Request::http_headers(int index) const {
  // @@protoc_insertion_point(field_get:CTwoFactor_FinalizeAddAuthenticator_Request.http_headers)
  return _internal_http_headers(index);
}
inline std::string* CTwoFactor_FinalizeAddAuthenticator_Request::mutable_http_headers(int index) {
  // @@protoc_insertion_point(field_mutable:CTwoFactor_FinalizeAddAuthenticator_Request.http_headers)
  return http_headers_.Mutable(index);
}
inline void CTwoFactor_FinalizeAddAuthenticator_Request::set_http_headers(int index, const std::string& value) {
  http_headers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:CTwoFactor_FinalizeAddAuthenticator_Request.http_headers)
}
inline void CTwoFactor_FinalizeAddAuthenticator_Request::set_http_headers(int index, std::string&& value) {
  http_headers_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:CTwoFactor_FinalizeAddAuthenticator_Request.http_headers)
}
inline void CTwoFactor_FinalizeAddAuthenticator_Request::set_http_headers(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  http_headers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CTwoFactor_FinalizeAddAuthenticator_Request.http_headers)
}
inline void CTwoFactor_FinalizeAddAuthenticator_Request::set_http_headers(int index, const char* value, size_t size) {
  http_headers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CTwoFactor_FinalizeAddAuthenticator_Request.http_headers)
}
inline std::string* CTwoFactor_FinalizeAddAuthenticator_Request::_internal_add_http_headers() {
  return http_headers_.Add();
}
inline void CTwoFactor_FinalizeAddAuthenticator_Request::add_http_headers(const std::string& value) {
  http_headers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CTwoFactor_FinalizeAddAuthenticator_Request.http_headers)
}
inline void CTwoFactor_FinalizeAddAuthenticator_Request::add_http_headers(std::string&& value) {
  http_headers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CTwoFactor_FinalizeAddAuthenticator_Request.http_headers)
}
inline void CTwoFactor_FinalizeAddAuthenticator_Request::add_http_headers(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  http_headers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CTwoFactor_FinalizeAddAuthenticator_Request.http_headers)
}
inline void CTwoFactor_FinalizeAddAuthenticator_Request::add_http_headers(const char* value, size_t size) {
  http_headers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CTwoFactor_FinalizeAddAuthenticator_Request.http_headers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CTwoFactor_FinalizeAddAuthenticator_Request::http_headers() const {
  // @@protoc_insertion_point(field_list:CTwoFactor_FinalizeAddAuthenticator_Request.http_headers)
  return http_headers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CTwoFactor_FinalizeAddAuthenticator_Request::mutable_http_headers() {
  // @@protoc_insertion_point(field_mutable_list:CTwoFactor_FinalizeAddAuthenticator_Request.http_headers)
  return &http_headers_;
}

// optional bool validate_sms_code = 6 [(.description) = "When finalizing with an SMS code, pass the request on to the PhoneService to update its state too."];
inline bool CTwoFactor_FinalizeAddAuthenticator_Request::_internal_has_validate_sms_code() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CTwoFactor_FinalizeAddAuthenticator_Request::has_validate_sms_code() const {
  return _internal_has_validate_sms_code();
}
inline void CTwoFactor_FinalizeAddAuthenticator_Request::clear_validate_sms_code() {
  validate_sms_code_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CTwoFactor_FinalizeAddAuthenticator_Request::_internal_validate_sms_code() const {
  return validate_sms_code_;
}
inline bool CTwoFactor_FinalizeAddAuthenticator_Request::validate_sms_code() const {
  // @@protoc_insertion_point(field_get:CTwoFactor_FinalizeAddAuthenticator_Request.validate_sms_code)
  return _internal_validate_sms_code();
}
inline void CTwoFactor_FinalizeAddAuthenticator_Request::_internal_set_validate_sms_code(bool value) {
  _has_bits_[0] |= 0x00000010u;
  validate_sms_code_ = value;
}
inline void CTwoFactor_FinalizeAddAuthenticator_Request::set_validate_sms_code(bool value) {
  _internal_set_validate_sms_code(value);
  // @@protoc_insertion_point(field_set:CTwoFactor_FinalizeAddAuthenticator_Request.validate_sms_code)
}

// -------------------------------------------------------------------

// CTwoFactor_FinalizeAddAuthenticator_Response

// optional bool success = 1 [(.description) = "True if succeeded, or want more tries"];
inline bool CTwoFactor_FinalizeAddAuthenticator_Response::_internal_has_success() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CTwoFactor_FinalizeAddAuthenticator_Response::has_success() const {
  return _internal_has_success();
}
inline void CTwoFactor_FinalizeAddAuthenticator_Response::clear_success() {
  success_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CTwoFactor_FinalizeAddAuthenticator_Response::_internal_success() const {
  return success_;
}
inline bool CTwoFactor_FinalizeAddAuthenticator_Response::success() const {
  // @@protoc_insertion_point(field_get:CTwoFactor_FinalizeAddAuthenticator_Response.success)
  return _internal_success();
}
inline void CTwoFactor_FinalizeAddAuthenticator_Response::_internal_set_success(bool value) {
  _has_bits_[0] |= 0x00000001u;
  success_ = value;
}
inline void CTwoFactor_FinalizeAddAuthenticator_Response::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:CTwoFactor_FinalizeAddAuthenticator_Response.success)
}

// optional bool want_more = 2 [(.description) = "True if want more tries"];
inline bool CTwoFactor_FinalizeAddAuthenticator_Response::_internal_has_want_more() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CTwoFactor_FinalizeAddAuthenticator_Response::has_want_more() const {
  return _internal_has_want_more();
}
inline void CTwoFactor_FinalizeAddAuthenticator_Response::clear_want_more() {
  want_more_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CTwoFactor_FinalizeAddAuthenticator_Response::_internal_want_more() const {
  return want_more_;
}
inline bool CTwoFactor_FinalizeAddAuthenticator_Response::want_more() const {
  // @@protoc_insertion_point(field_get:CTwoFactor_FinalizeAddAuthenticator_Response.want_more)
  return _internal_want_more();
}
inline void CTwoFactor_FinalizeAddAuthenticator_Response::_internal_set_want_more(bool value) {
  _has_bits_[0] |= 0x00000002u;
  want_more_ = value;
}
inline void CTwoFactor_FinalizeAddAuthenticator_Response::set_want_more(bool value) {
  _internal_set_want_more(value);
  // @@protoc_insertion_point(field_set:CTwoFactor_FinalizeAddAuthenticator_Response.want_more)
}

// optional uint64 server_time = 3 [(.description) = "Current server time"];
inline bool CTwoFactor_FinalizeAddAuthenticator_Response::_internal_has_server_time() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CTwoFactor_FinalizeAddAuthenticator_Response::has_server_time() const {
  return _internal_has_server_time();
}
inline void CTwoFactor_FinalizeAddAuthenticator_Response::clear_server_time() {
  server_time_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline uint64_t CTwoFactor_FinalizeAddAuthenticator_Response::_internal_server_time() const {
  return server_time_;
}
inline uint64_t CTwoFactor_FinalizeAddAuthenticator_Response::server_time() const {
  // @@protoc_insertion_point(field_get:CTwoFactor_FinalizeAddAuthenticator_Response.server_time)
  return _internal_server_time();
}
inline void CTwoFactor_FinalizeAddAuthenticator_Response::_internal_set_server_time(uint64_t value) {
  _has_bits_[0] |= 0x00000008u;
  server_time_ = value;
}
inline void CTwoFactor_FinalizeAddAuthenticator_Response::set_server_time(uint64_t value) {
  _internal_set_server_time(value);
  // @@protoc_insertion_point(field_set:CTwoFactor_FinalizeAddAuthenticator_Response.server_time)
}

// optional int32 status = 4 [(.description) = "Result code"];
inline bool CTwoFactor_FinalizeAddAuthenticator_Response::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CTwoFactor_FinalizeAddAuthenticator_Response::has_status() const {
  return _internal_has_status();
}
inline void CTwoFactor_FinalizeAddAuthenticator_Response::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t CTwoFactor_FinalizeAddAuthenticator_Response::_internal_status() const {
  return status_;
}
inline int32_t CTwoFactor_FinalizeAddAuthenticator_Response::status() const {
  // @@protoc_insertion_point(field_get:CTwoFactor_FinalizeAddAuthenticator_Response.status)
  return _internal_status();
}
inline void CTwoFactor_FinalizeAddAuthenticator_Response::_internal_set_status(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  status_ = value;
}
inline void CTwoFactor_FinalizeAddAuthenticator_Response::set_status(int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:CTwoFactor_FinalizeAddAuthenticator_Response.status)
}

// -------------------------------------------------------------------

// CTwoFactor_UpdateTokenVersion_Request

// optional fixed64 steamid = 1;
inline bool CTwoFactor_UpdateTokenVersion_Request::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CTwoFactor_UpdateTokenVersion_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CTwoFactor_UpdateTokenVersion_Request::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CTwoFactor_UpdateTokenVersion_Request::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CTwoFactor_UpdateTokenVersion_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CTwoFactor_UpdateTokenVersion_Request.steamid)
  return _internal_steamid();
}
inline void CTwoFactor_UpdateTokenVersion_Request::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  steamid_ = value;
}
inline void CTwoFactor_UpdateTokenVersion_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CTwoFactor_UpdateTokenVersion_Request.steamid)
}

// optional uint32 version = 2 [(.description) = "What the version of our token should be"];
inline bool CTwoFactor_UpdateTokenVersion_Request::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CTwoFactor_UpdateTokenVersion_Request::has_version() const {
  return _internal_has_version();
}
inline void CTwoFactor_UpdateTokenVersion_Request::clear_version() {
  version_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CTwoFactor_UpdateTokenVersion_Request::_internal_version() const {
  return version_;
}
inline uint32_t CTwoFactor_UpdateTokenVersion_Request::version() const {
  // @@protoc_insertion_point(field_get:CTwoFactor_UpdateTokenVersion_Request.version)
  return _internal_version();
}
inline void CTwoFactor_UpdateTokenVersion_Request::_internal_set_version(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  version_ = value;
}
inline void CTwoFactor_UpdateTokenVersion_Request::set_version(uint32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:CTwoFactor_UpdateTokenVersion_Request.version)
}

// optional bytes signature = 3 [(.description) = "HMAC digest over user\'s private key"];
inline bool CTwoFactor_UpdateTokenVersion_Request::_internal_has_signature() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CTwoFactor_UpdateTokenVersion_Request::has_signature() const {
  return _internal_has_signature();
}
inline void CTwoFactor_UpdateTokenVersion_Request::clear_signature() {
  signature_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CTwoFactor_UpdateTokenVersion_Request::signature() const {
  // @@protoc_insertion_point(field_get:CTwoFactor_UpdateTokenVersion_Request.signature)
  return _internal_signature();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CTwoFactor_UpdateTokenVersion_Request::set_signature(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 signature_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CTwoFactor_UpdateTokenVersion_Request.signature)
}
inline std::string* CTwoFactor_UpdateTokenVersion_Request::mutable_signature() {
  std::string* _s = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:CTwoFactor_UpdateTokenVersion_Request.signature)
  return _s;
}
inline const std::string& CTwoFactor_UpdateTokenVersion_Request::_internal_signature() const {
  return signature_.Get();
}
inline void CTwoFactor_UpdateTokenVersion_Request::_internal_set_signature(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CTwoFactor_UpdateTokenVersion_Request::_internal_mutable_signature() {
  _has_bits_[0] |= 0x00000001u;
  return signature_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CTwoFactor_UpdateTokenVersion_Request::release_signature() {
  // @@protoc_insertion_point(field_release:CTwoFactor_UpdateTokenVersion_Request.signature)
  if (!_internal_has_signature()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = signature_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (signature_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CTwoFactor_UpdateTokenVersion_Request::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  signature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (signature_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CTwoFactor_UpdateTokenVersion_Request.signature)
}

// -------------------------------------------------------------------

// CTwoFactor_UpdateTokenVersion_Response

// -------------------------------------------------------------------

// CTwoFactor_RemoveAuthenticator_Request

// optional string revocation_code = 2 [(.description) = "Password needed to remove token"];
inline bool CTwoFactor_RemoveAuthenticator_Request::_internal_has_revocation_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CTwoFactor_RemoveAuthenticator_Request::has_revocation_code() const {
  return _internal_has_revocation_code();
}
inline void CTwoFactor_RemoveAuthenticator_Request::clear_revocation_code() {
  revocation_code_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CTwoFactor_RemoveAuthenticator_Request::revocation_code() const {
  // @@protoc_insertion_point(field_get:CTwoFactor_RemoveAuthenticator_Request.revocation_code)
  return _internal_revocation_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CTwoFactor_RemoveAuthenticator_Request::set_revocation_code(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 revocation_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CTwoFactor_RemoveAuthenticator_Request.revocation_code)
}
inline std::string* CTwoFactor_RemoveAuthenticator_Request::mutable_revocation_code() {
  std::string* _s = _internal_mutable_revocation_code();
  // @@protoc_insertion_point(field_mutable:CTwoFactor_RemoveAuthenticator_Request.revocation_code)
  return _s;
}
inline const std::string& CTwoFactor_RemoveAuthenticator_Request::_internal_revocation_code() const {
  return revocation_code_.Get();
}
inline void CTwoFactor_RemoveAuthenticator_Request::_internal_set_revocation_code(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  revocation_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CTwoFactor_RemoveAuthenticator_Request::_internal_mutable_revocation_code() {
  _has_bits_[0] |= 0x00000001u;
  return revocation_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CTwoFactor_RemoveAuthenticator_Request::release_revocation_code() {
  // @@protoc_insertion_point(field_release:CTwoFactor_RemoveAuthenticator_Request.revocation_code)
  if (!_internal_has_revocation_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = revocation_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (revocation_code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    revocation_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CTwoFactor_RemoveAuthenticator_Request::set_allocated_revocation_code(std::string* revocation_code) {
  if (revocation_code != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  revocation_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), revocation_code,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (revocation_code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    revocation_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CTwoFactor_RemoveAuthenticator_Request.revocation_code)
}

// optional uint32 revocation_reason = 5 [(.description) = "Reason the authenticator is being removed"];
inline bool CTwoFactor_RemoveAuthenticator_Request::_internal_has_revocation_reason() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CTwoFactor_RemoveAuthenticator_Request::has_revocation_reason() const {
  return _internal_has_revocation_reason();
}
inline void CTwoFactor_RemoveAuthenticator_Request::clear_revocation_reason() {
  revocation_reason_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CTwoFactor_RemoveAuthenticator_Request::_internal_revocation_reason() const {
  return revocation_reason_;
}
inline uint32_t CTwoFactor_RemoveAuthenticator_Request::revocation_reason() const {
  // @@protoc_insertion_point(field_get:CTwoFactor_RemoveAuthenticator_Request.revocation_reason)
  return _internal_revocation_reason();
}
inline void CTwoFactor_RemoveAuthenticator_Request::_internal_set_revocation_reason(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  revocation_reason_ = value;
}
inline void CTwoFactor_RemoveAuthenticator_Request::set_revocation_reason(uint32_t value) {
  _internal_set_revocation_reason(value);
  // @@protoc_insertion_point(field_set:CTwoFactor_RemoveAuthenticator_Request.revocation_reason)
}

// optional uint32 steamguard_scheme = 6 [(.description) = "Type of Steam Guard to use once token is removed"];
inline bool CTwoFactor_RemoveAuthenticator_Request::_internal_has_steamguard_scheme() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CTwoFactor_RemoveAuthenticator_Request::has_steamguard_scheme() const {
  return _internal_has_steamguard_scheme();
}
inline void CTwoFactor_RemoveAuthenticator_Request::clear_steamguard_scheme() {
  steamguard_scheme_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CTwoFactor_RemoveAuthenticator_Request::_internal_steamguard_scheme() const {
  return steamguard_scheme_;
}
inline uint32_t CTwoFactor_RemoveAuthenticator_Request::steamguard_scheme() const {
  // @@protoc_insertion_point(field_get:CTwoFactor_RemoveAuthenticator_Request.steamguard_scheme)
  return _internal_steamguard_scheme();
}
inline void CTwoFactor_RemoveAuthenticator_Request::_internal_set_steamguard_scheme(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  steamguard_scheme_ = value;
}
inline void CTwoFactor_RemoveAuthenticator_Request::set_steamguard_scheme(uint32_t value) {
  _internal_set_steamguard_scheme(value);
  // @@protoc_insertion_point(field_set:CTwoFactor_RemoveAuthenticator_Request.steamguard_scheme)
}

// optional bool remove_all_steamguard_cookies = 7 [(.description) = "Remove all steamguard cookies"];
inline bool CTwoFactor_RemoveAuthenticator_Request::_internal_has_remove_all_steamguard_cookies() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CTwoFactor_RemoveAuthenticator_Request::has_remove_all_steamguard_cookies() const {
  return _internal_has_remove_all_steamguard_cookies();
}
inline void CTwoFactor_RemoveAuthenticator_Request::clear_remove_all_steamguard_cookies() {
  remove_all_steamguard_cookies_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CTwoFactor_RemoveAuthenticator_Request::_internal_remove_all_steamguard_cookies() const {
  return remove_all_steamguard_cookies_;
}
inline bool CTwoFactor_RemoveAuthenticator_Request::remove_all_steamguard_cookies() const {
  // @@protoc_insertion_point(field_get:CTwoFactor_RemoveAuthenticator_Request.remove_all_steamguard_cookies)
  return _internal_remove_all_steamguard_cookies();
}
inline void CTwoFactor_RemoveAuthenticator_Request::_internal_set_remove_all_steamguard_cookies(bool value) {
  _has_bits_[0] |= 0x00000002u;
  remove_all_steamguard_cookies_ = value;
}
inline void CTwoFactor_RemoveAuthenticator_Request::set_remove_all_steamguard_cookies(bool value) {
  _internal_set_remove_all_steamguard_cookies(value);
  // @@protoc_insertion_point(field_set:CTwoFactor_RemoveAuthenticator_Request.remove_all_steamguard_cookies)
}

// -------------------------------------------------------------------

// CTwoFactor_RemoveAuthenticator_Response

// optional bool success = 1 [(.description) = "True if request succeeeded. The mobile app checks this."];
inline bool CTwoFactor_RemoveAuthenticator_Response::_internal_has_success() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CTwoFactor_RemoveAuthenticator_Response::has_success() const {
  return _internal_has_success();
}
inline void CTwoFactor_RemoveAuthenticator_Response::clear_success() {
  success_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CTwoFactor_RemoveAuthenticator_Response::_internal_success() const {
  return success_;
}
inline bool CTwoFactor_RemoveAuthenticator_Response::success() const {
  // @@protoc_insertion_point(field_get:CTwoFactor_RemoveAuthenticator_Response.success)
  return _internal_success();
}
inline void CTwoFactor_RemoveAuthenticator_Response::_internal_set_success(bool value) {
  _has_bits_[0] |= 0x00000002u;
  success_ = value;
}
inline void CTwoFactor_RemoveAuthenticator_Response::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:CTwoFactor_RemoveAuthenticator_Response.success)
}

// optional uint64 server_time = 3 [(.description) = "Current server time"];
inline bool CTwoFactor_RemoveAuthenticator_Response::_internal_has_server_time() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CTwoFactor_RemoveAuthenticator_Response::has_server_time() const {
  return _internal_has_server_time();
}
inline void CTwoFactor_RemoveAuthenticator_Response::clear_server_time() {
  server_time_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CTwoFactor_RemoveAuthenticator_Response::_internal_server_time() const {
  return server_time_;
}
inline uint64_t CTwoFactor_RemoveAuthenticator_Response::server_time() const {
  // @@protoc_insertion_point(field_get:CTwoFactor_RemoveAuthenticator_Response.server_time)
  return _internal_server_time();
}
inline void CTwoFactor_RemoveAuthenticator_Response::_internal_set_server_time(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  server_time_ = value;
}
inline void CTwoFactor_RemoveAuthenticator_Response::set_server_time(uint64_t value) {
  _internal_set_server_time(value);
  // @@protoc_insertion_point(field_set:CTwoFactor_RemoveAuthenticator_Response.server_time)
}

// optional uint32 revocation_attempts_remaining = 5 [(.description) = "Number of revocation code attempts remaining"];
inline bool CTwoFactor_RemoveAuthenticator_Response::_internal_has_revocation_attempts_remaining() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CTwoFactor_RemoveAuthenticator_Response::has_revocation_attempts_remaining() const {
  return _internal_has_revocation_attempts_remaining();
}
inline void CTwoFactor_RemoveAuthenticator_Response::clear_revocation_attempts_remaining() {
  revocation_attempts_remaining_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CTwoFactor_RemoveAuthenticator_Response::_internal_revocation_attempts_remaining() const {
  return revocation_attempts_remaining_;
}
inline uint32_t CTwoFactor_RemoveAuthenticator_Response::revocation_attempts_remaining() const {
  // @@protoc_insertion_point(field_get:CTwoFactor_RemoveAuthenticator_Response.revocation_attempts_remaining)
  return _internal_revocation_attempts_remaining();
}
inline void CTwoFactor_RemoveAuthenticator_Response::_internal_set_revocation_attempts_remaining(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  revocation_attempts_remaining_ = value;
}
inline void CTwoFactor_RemoveAuthenticator_Response::set_revocation_attempts_remaining(uint32_t value) {
  _internal_set_revocation_attempts_remaining(value);
  // @@protoc_insertion_point(field_set:CTwoFactor_RemoveAuthenticator_Response.revocation_attempts_remaining)
}

// -------------------------------------------------------------------

// CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request

// -------------------------------------------------------------------

// CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response

// optional bool success = 1 [(.description) = "True if succeeded, or want more tries with an authenticator_code"];
inline bool CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response::_internal_has_success() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response::has_success() const {
  return _internal_has_success();
}
inline void CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response::clear_success() {
  success_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response::_internal_success() const {
  return success_;
}
inline bool CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response::success() const {
  // @@protoc_insertion_point(field_get:CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response.success)
  return _internal_success();
}
inline void CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response::_internal_set_success(bool value) {
  _has_bits_[0] |= 0x00000001u;
  success_ = value;
}
inline void CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response.success)
}

// -------------------------------------------------------------------

// CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request

// optional string sms_code = 1 [(.description) = "Code from SMS"];
inline bool CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request::_internal_has_sms_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request::has_sms_code() const {
  return _internal_has_sms_code();
}
inline void CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request::clear_sms_code() {
  sms_code_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request::sms_code() const {
  // @@protoc_insertion_point(field_get:CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request.sms_code)
  return _internal_sms_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request::set_sms_code(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 sms_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request.sms_code)
}
inline std::string* CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request::mutable_sms_code() {
  std::string* _s = _internal_mutable_sms_code();
  // @@protoc_insertion_point(field_mutable:CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request.sms_code)
  return _s;
}
inline const std::string& CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request::_internal_sms_code() const {
  return sms_code_.Get();
}
inline void CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request::_internal_set_sms_code(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sms_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request::_internal_mutable_sms_code() {
  _has_bits_[0] |= 0x00000001u;
  return sms_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request::release_sms_code() {
  // @@protoc_insertion_point(field_release:CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request.sms_code)
  if (!_internal_has_sms_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = sms_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sms_code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sms_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request::set_allocated_sms_code(std::string* sms_code) {
  if (sms_code != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sms_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sms_code,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sms_code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sms_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request.sms_code)
}

// optional bool generate_new_token = 2 [(.description) = "Generate new token (instead of removing old one)"];
inline bool CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request::_internal_has_generate_new_token() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request::has_generate_new_token() const {
  return _internal_has_generate_new_token();
}
inline void CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request::clear_generate_new_token() {
  generate_new_token_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request::_internal_generate_new_token() const {
  return generate_new_token_;
}
inline bool CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request::generate_new_token() const {
  // @@protoc_insertion_point(field_get:CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request.generate_new_token)
  return _internal_generate_new_token();
}
inline void CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request::_internal_set_generate_new_token(bool value) {
  _has_bits_[0] |= 0x00000002u;
  generate_new_token_ = value;
}
inline void CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request::set_generate_new_token(bool value) {
  _internal_set_generate_new_token(value);
  // @@protoc_insertion_point(field_set:CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request.generate_new_token)
}

// optional uint32 version = 3 [default = 1, (.description) = "What the version of our token should be"];
inline bool CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request::has_version() const {
  return _internal_has_version();
}
inline void CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request::clear_version() {
  version_ = 1u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request::_internal_version() const {
  return version_;
}
inline uint32_t CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request::version() const {
  // @@protoc_insertion_point(field_get:CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request.version)
  return _internal_version();
}
inline void CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request::_internal_set_version(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  version_ = value;
}
inline void CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request::set_version(uint32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request.version)
}

// -------------------------------------------------------------------

// CRemoveAuthenticatorViaChallengeContinue_Replacement_Token

// optional bytes shared_secret = 1 [(.description) = "Shared secret between server and authenticator"];
inline bool CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::_internal_has_shared_secret() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::has_shared_secret() const {
  return _internal_has_shared_secret();
}
inline void CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::clear_shared_secret() {
  shared_secret_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::shared_secret() const {
  // @@protoc_insertion_point(field_get:CRemoveAuthenticatorViaChallengeContinue_Replacement_Token.shared_secret)
  return _internal_shared_secret();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::set_shared_secret(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 shared_secret_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CRemoveAuthenticatorViaChallengeContinue_Replacement_Token.shared_secret)
}
inline std::string* CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::mutable_shared_secret() {
  std::string* _s = _internal_mutable_shared_secret();
  // @@protoc_insertion_point(field_mutable:CRemoveAuthenticatorViaChallengeContinue_Replacement_Token.shared_secret)
  return _s;
}
inline const std::string& CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::_internal_shared_secret() const {
  return shared_secret_.Get();
}
inline void CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::_internal_set_shared_secret(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  shared_secret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::_internal_mutable_shared_secret() {
  _has_bits_[0] |= 0x00000001u;
  return shared_secret_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::release_shared_secret() {
  // @@protoc_insertion_point(field_release:CRemoveAuthenticatorViaChallengeContinue_Replacement_Token.shared_secret)
  if (!_internal_has_shared_secret()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = shared_secret_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (shared_secret_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    shared_secret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::set_allocated_shared_secret(std::string* shared_secret) {
  if (shared_secret != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  shared_secret_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), shared_secret,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (shared_secret_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    shared_secret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CRemoveAuthenticatorViaChallengeContinue_Replacement_Token.shared_secret)
}

// optional fixed64 serial_number = 2 [(.description) = "Authenticator serial number (unique per token)"];
inline bool CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::_internal_has_serial_number() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::has_serial_number() const {
  return _internal_has_serial_number();
}
inline void CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::clear_serial_number() {
  serial_number_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000080u;
}
inline uint64_t CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::_internal_serial_number() const {
  return serial_number_;
}
inline uint64_t CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::serial_number() const {
  // @@protoc_insertion_point(field_get:CRemoveAuthenticatorViaChallengeContinue_Replacement_Token.serial_number)
  return _internal_serial_number();
}
inline void CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::_internal_set_serial_number(uint64_t value) {
  _has_bits_[0] |= 0x00000080u;
  serial_number_ = value;
}
inline void CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::set_serial_number(uint64_t value) {
  _internal_set_serial_number(value);
  // @@protoc_insertion_point(field_set:CRemoveAuthenticatorViaChallengeContinue_Replacement_Token.serial_number)
}

// optional string revocation_code = 3 [(.description) = "code used to revoke authenticator"];
inline bool CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::_internal_has_revocation_code() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::has_revocation_code() const {
  return _internal_has_revocation_code();
}
inline void CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::clear_revocation_code() {
  revocation_code_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::revocation_code() const {
  // @@protoc_insertion_point(field_get:CRemoveAuthenticatorViaChallengeContinue_Replacement_Token.revocation_code)
  return _internal_revocation_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::set_revocation_code(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 revocation_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CRemoveAuthenticatorViaChallengeContinue_Replacement_Token.revocation_code)
}
inline std::string* CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::mutable_revocation_code() {
  std::string* _s = _internal_mutable_revocation_code();
  // @@protoc_insertion_point(field_mutable:CRemoveAuthenticatorViaChallengeContinue_Replacement_Token.revocation_code)
  return _s;
}
inline const std::string& CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::_internal_revocation_code() const {
  return revocation_code_.Get();
}
inline void CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::_internal_set_revocation_code(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  revocation_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::_internal_mutable_revocation_code() {
  _has_bits_[0] |= 0x00000002u;
  return revocation_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::release_revocation_code() {
  // @@protoc_insertion_point(field_release:CRemoveAuthenticatorViaChallengeContinue_Replacement_Token.revocation_code)
  if (!_internal_has_revocation_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = revocation_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (revocation_code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    revocation_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::set_allocated_revocation_code(std::string* revocation_code) {
  if (revocation_code != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  revocation_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), revocation_code,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (revocation_code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    revocation_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CRemoveAuthenticatorViaChallengeContinue_Replacement_Token.revocation_code)
}

// optional string uri = 4 [(.description) = "URI for QR code generation"];
inline bool CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::_internal_has_uri() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::has_uri() const {
  return _internal_has_uri();
}
inline void CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::clear_uri() {
  uri_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::uri() const {
  // @@protoc_insertion_point(field_get:CRemoveAuthenticatorViaChallengeContinue_Replacement_Token.uri)
  return _internal_uri();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::set_uri(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CRemoveAuthenticatorViaChallengeContinue_Replacement_Token.uri)
}
inline std::string* CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::mutable_uri() {
  std::string* _s = _internal_mutable_uri();
  // @@protoc_insertion_point(field_mutable:CRemoveAuthenticatorViaChallengeContinue_Replacement_Token.uri)
  return _s;
}
inline const std::string& CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::_internal_uri() const {
  return uri_.Get();
}
inline void CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::_internal_set_uri(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::_internal_mutable_uri() {
  _has_bits_[0] |= 0x00000004u;
  return uri_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::release_uri() {
  // @@protoc_insertion_point(field_release:CRemoveAuthenticatorViaChallengeContinue_Replacement_Token.uri)
  if (!_internal_has_uri()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = uri_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (uri_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::set_allocated_uri(std::string* uri) {
  if (uri != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  uri_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uri,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (uri_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CRemoveAuthenticatorViaChallengeContinue_Replacement_Token.uri)
}

// optional uint64 server_time = 5 [(.description) = "Current server time"];
inline bool CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::_internal_has_server_time() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::has_server_time() const {
  return _internal_has_server_time();
}
inline void CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::clear_server_time() {
  server_time_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000100u;
}
inline uint64_t CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::_internal_server_time() const {
  return server_time_;
}
inline uint64_t CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::server_time() const {
  // @@protoc_insertion_point(field_get:CRemoveAuthenticatorViaChallengeContinue_Replacement_Token.server_time)
  return _internal_server_time();
}
inline void CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::_internal_set_server_time(uint64_t value) {
  _has_bits_[0] |= 0x00000100u;
  server_time_ = value;
}
inline void CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::set_server_time(uint64_t value) {
  _internal_set_server_time(value);
  // @@protoc_insertion_point(field_set:CRemoveAuthenticatorViaChallengeContinue_Replacement_Token.server_time)
}

// optional string account_name = 6 [(.description) = "Account name to display on token client"];
inline bool CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::_internal_has_account_name() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::has_account_name() const {
  return _internal_has_account_name();
}
inline void CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::clear_account_name() {
  account_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::account_name() const {
  // @@protoc_insertion_point(field_get:CRemoveAuthenticatorViaChallengeContinue_Replacement_Token.account_name)
  return _internal_account_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::set_account_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 account_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CRemoveAuthenticatorViaChallengeContinue_Replacement_Token.account_name)
}
inline std::string* CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::mutable_account_name() {
  std::string* _s = _internal_mutable_account_name();
  // @@protoc_insertion_point(field_mutable:CRemoveAuthenticatorViaChallengeContinue_Replacement_Token.account_name)
  return _s;
}
inline const std::string& CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::_internal_account_name() const {
  return account_name_.Get();
}
inline void CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::_internal_set_account_name(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  account_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::_internal_mutable_account_name() {
  _has_bits_[0] |= 0x00000008u;
  return account_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::release_account_name() {
  // @@protoc_insertion_point(field_release:CRemoveAuthenticatorViaChallengeContinue_Replacement_Token.account_name)
  if (!_internal_has_account_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = account_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (account_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    account_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::set_allocated_account_name(std::string* account_name) {
  if (account_name != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  account_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (account_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    account_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CRemoveAuthenticatorViaChallengeContinue_Replacement_Token.account_name)
}

// optional string token_gid = 7 [(.description) = "Token GID assigned by server"];
inline bool CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::_internal_has_token_gid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::has_token_gid() const {
  return _internal_has_token_gid();
}
inline void CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::clear_token_gid() {
  token_gid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::token_gid() const {
  // @@protoc_insertion_point(field_get:CRemoveAuthenticatorViaChallengeContinue_Replacement_Token.token_gid)
  return _internal_token_gid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::set_token_gid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 token_gid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CRemoveAuthenticatorViaChallengeContinue_Replacement_Token.token_gid)
}
inline std::string* CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::mutable_token_gid() {
  std::string* _s = _internal_mutable_token_gid();
  // @@protoc_insertion_point(field_mutable:CRemoveAuthenticatorViaChallengeContinue_Replacement_Token.token_gid)
  return _s;
}
inline const std::string& CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::_internal_token_gid() const {
  return token_gid_.Get();
}
inline void CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::_internal_set_token_gid(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  token_gid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::_internal_mutable_token_gid() {
  _has_bits_[0] |= 0x00000010u;
  return token_gid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::release_token_gid() {
  // @@protoc_insertion_point(field_release:CRemoveAuthenticatorViaChallengeContinue_Replacement_Token.token_gid)
  if (!_internal_has_token_gid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  auto* p = token_gid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (token_gid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    token_gid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::set_allocated_token_gid(std::string* token_gid) {
  if (token_gid != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  token_gid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token_gid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (token_gid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    token_gid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CRemoveAuthenticatorViaChallengeContinue_Replacement_Token.token_gid)
}

// optional bytes identity_secret = 8 [(.description) = "Secret used for identity attestation (e.g., for eventing)"];
inline bool CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::_internal_has_identity_secret() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::has_identity_secret() const {
  return _internal_has_identity_secret();
}
inline void CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::clear_identity_secret() {
  identity_secret_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::identity_secret() const {
  // @@protoc_insertion_point(field_get:CRemoveAuthenticatorViaChallengeContinue_Replacement_Token.identity_secret)
  return _internal_identity_secret();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::set_identity_secret(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000020u;
 identity_secret_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CRemoveAuthenticatorViaChallengeContinue_Replacement_Token.identity_secret)
}
inline std::string* CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::mutable_identity_secret() {
  std::string* _s = _internal_mutable_identity_secret();
  // @@protoc_insertion_point(field_mutable:CRemoveAuthenticatorViaChallengeContinue_Replacement_Token.identity_secret)
  return _s;
}
inline const std::string& CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::_internal_identity_secret() const {
  return identity_secret_.Get();
}
inline void CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::_internal_set_identity_secret(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  identity_secret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::_internal_mutable_identity_secret() {
  _has_bits_[0] |= 0x00000020u;
  return identity_secret_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::release_identity_secret() {
  // @@protoc_insertion_point(field_release:CRemoveAuthenticatorViaChallengeContinue_Replacement_Token.identity_secret)
  if (!_internal_has_identity_secret()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  auto* p = identity_secret_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (identity_secret_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    identity_secret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::set_allocated_identity_secret(std::string* identity_secret) {
  if (identity_secret != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  identity_secret_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), identity_secret,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (identity_secret_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    identity_secret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CRemoveAuthenticatorViaChallengeContinue_Replacement_Token.identity_secret)
}

// optional bytes secret_1 = 9 [(.description) = "Spare shared secret"];
inline bool CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::_internal_has_secret_1() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::has_secret_1() const {
  return _internal_has_secret_1();
}
inline void CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::clear_secret_1() {
  secret_1_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::secret_1() const {
  // @@protoc_insertion_point(field_get:CRemoveAuthenticatorViaChallengeContinue_Replacement_Token.secret_1)
  return _internal_secret_1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::set_secret_1(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000040u;
 secret_1_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CRemoveAuthenticatorViaChallengeContinue_Replacement_Token.secret_1)
}
inline std::string* CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::mutable_secret_1() {
  std::string* _s = _internal_mutable_secret_1();
  // @@protoc_insertion_point(field_mutable:CRemoveAuthenticatorViaChallengeContinue_Replacement_Token.secret_1)
  return _s;
}
inline const std::string& CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::_internal_secret_1() const {
  return secret_1_.Get();
}
inline void CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::_internal_set_secret_1(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  secret_1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::_internal_mutable_secret_1() {
  _has_bits_[0] |= 0x00000040u;
  return secret_1_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::release_secret_1() {
  // @@protoc_insertion_point(field_release:CRemoveAuthenticatorViaChallengeContinue_Replacement_Token.secret_1)
  if (!_internal_has_secret_1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  auto* p = secret_1_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (secret_1_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    secret_1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::set_allocated_secret_1(std::string* secret_1) {
  if (secret_1 != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  secret_1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), secret_1,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (secret_1_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    secret_1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CRemoveAuthenticatorViaChallengeContinue_Replacement_Token.secret_1)
}

// optional int32 status = 10 [(.description) = "Result code"];
inline bool CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::has_status() const {
  return _internal_has_status();
}
inline void CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline int32_t CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::_internal_status() const {
  return status_;
}
inline int32_t CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::status() const {
  // @@protoc_insertion_point(field_get:CRemoveAuthenticatorViaChallengeContinue_Replacement_Token.status)
  return _internal_status();
}
inline void CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::_internal_set_status(int32_t value) {
  _has_bits_[0] |= 0x00000200u;
  status_ = value;
}
inline void CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::set_status(int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:CRemoveAuthenticatorViaChallengeContinue_Replacement_Token.status)
}

// optional uint32 steamguard_scheme = 11 [(.description) = "Type of Steam Guard to use once token is removed"];
inline bool CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::_internal_has_steamguard_scheme() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::has_steamguard_scheme() const {
  return _internal_has_steamguard_scheme();
}
inline void CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::clear_steamguard_scheme() {
  steamguard_scheme_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline uint32_t CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::_internal_steamguard_scheme() const {
  return steamguard_scheme_;
}
inline uint32_t CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::steamguard_scheme() const {
  // @@protoc_insertion_point(field_get:CRemoveAuthenticatorViaChallengeContinue_Replacement_Token.steamguard_scheme)
  return _internal_steamguard_scheme();
}
inline void CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::_internal_set_steamguard_scheme(uint32_t value) {
  _has_bits_[0] |= 0x00000400u;
  steamguard_scheme_ = value;
}
inline void CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::set_steamguard_scheme(uint32_t value) {
  _internal_set_steamguard_scheme(value);
  // @@protoc_insertion_point(field_set:CRemoveAuthenticatorViaChallengeContinue_Replacement_Token.steamguard_scheme)
}

// optional fixed64 steamid = 12 [(.description) = "steamid that owns the secret"];
inline bool CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::has_steamid() const {
  return _internal_has_steamid();
}
inline void CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000800u;
}
inline uint64_t CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::steamid() const {
  // @@protoc_insertion_point(field_get:CRemoveAuthenticatorViaChallengeContinue_Replacement_Token.steamid)
  return _internal_steamid();
}
inline void CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000800u;
  steamid_ = value;
}
inline void CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CRemoveAuthenticatorViaChallengeContinue_Replacement_Token.steamid)
}

// -------------------------------------------------------------------

// CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response

// optional bool success = 1 [(.description) = "True if succeeded, or want more tries with an authenticator_code"];
inline bool CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response::_internal_has_success() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response::has_success() const {
  return _internal_has_success();
}
inline void CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response::clear_success() {
  success_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response::_internal_success() const {
  return success_;
}
inline bool CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response::success() const {
  // @@protoc_insertion_point(field_get:CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response.success)
  return _internal_success();
}
inline void CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response::_internal_set_success(bool value) {
  _has_bits_[0] |= 0x00000002u;
  success_ = value;
}
inline void CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response.success)
}

// optional .CRemoveAuthenticatorViaChallengeContinue_Replacement_Token replacement_token = 2 [(.description) = "Fresh secret to install"];
inline bool CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response::_internal_has_replacement_token() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || replacement_token_ != nullptr);
  return value;
}
inline bool CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response::has_replacement_token() const {
  return _internal_has_replacement_token();
}
inline void CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response::clear_replacement_token() {
  if (replacement_token_ != nullptr) replacement_token_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CRemoveAuthenticatorViaChallengeContinue_Replacement_Token& CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response::_internal_replacement_token() const {
  const ::CRemoveAuthenticatorViaChallengeContinue_Replacement_Token* p = replacement_token_;
  return p != nullptr ? *p : reinterpret_cast<const ::CRemoveAuthenticatorViaChallengeContinue_Replacement_Token&>(
      ::_CRemoveAuthenticatorViaChallengeContinue_Replacement_Token_default_instance_);
}
inline const ::CRemoveAuthenticatorViaChallengeContinue_Replacement_Token& CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response::replacement_token() const {
  // @@protoc_insertion_point(field_get:CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response.replacement_token)
  return _internal_replacement_token();
}
inline void CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response::unsafe_arena_set_allocated_replacement_token(
    ::CRemoveAuthenticatorViaChallengeContinue_Replacement_Token* replacement_token) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(replacement_token_);
  }
  replacement_token_ = replacement_token;
  if (replacement_token) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response.replacement_token)
}
inline ::CRemoveAuthenticatorViaChallengeContinue_Replacement_Token* CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response::release_replacement_token() {
  _has_bits_[0] &= ~0x00000001u;
  ::CRemoveAuthenticatorViaChallengeContinue_Replacement_Token* temp = replacement_token_;
  replacement_token_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CRemoveAuthenticatorViaChallengeContinue_Replacement_Token* CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response::unsafe_arena_release_replacement_token() {
  // @@protoc_insertion_point(field_release:CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response.replacement_token)
  _has_bits_[0] &= ~0x00000001u;
  ::CRemoveAuthenticatorViaChallengeContinue_Replacement_Token* temp = replacement_token_;
  replacement_token_ = nullptr;
  return temp;
}
inline ::CRemoveAuthenticatorViaChallengeContinue_Replacement_Token* CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response::_internal_mutable_replacement_token() {
  _has_bits_[0] |= 0x00000001u;
  if (replacement_token_ == nullptr) {
    auto* p = CreateMaybeMessage<::CRemoveAuthenticatorViaChallengeContinue_Replacement_Token>(GetArenaForAllocation());
    replacement_token_ = p;
  }
  return replacement_token_;
}
inline ::CRemoveAuthenticatorViaChallengeContinue_Replacement_Token* CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response::mutable_replacement_token() {
  ::CRemoveAuthenticatorViaChallengeContinue_Replacement_Token* _msg = _internal_mutable_replacement_token();
  // @@protoc_insertion_point(field_mutable:CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response.replacement_token)
  return _msg;
}
inline void CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response::set_allocated_replacement_token(::CRemoveAuthenticatorViaChallengeContinue_Replacement_Token* replacement_token) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete replacement_token_;
  }
  if (replacement_token) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CRemoveAuthenticatorViaChallengeContinue_Replacement_Token>::GetOwningArena(replacement_token);
    if (message_arena != submessage_arena) {
      replacement_token = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, replacement_token, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  replacement_token_ = replacement_token;
  // @@protoc_insertion_point(field_set_allocated:CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response.replacement_token)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_steammessages_5ftwofactor_2esteamclient_2eproto
