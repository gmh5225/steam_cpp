// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_depotbuilder.steamclient.proto

#include "steammessages_depotbuilder.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CContentBuilder_InitDepotBuild_Request::CContentBuilder_InitDepotBuild_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : target_branch_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , appid_(0u)
  , depotid_(0u)
  , workshop_itemid_(uint64_t{0u})
  , for_local_cs_(false){}
struct CContentBuilder_InitDepotBuild_RequestDefaultTypeInternal {
  constexpr CContentBuilder_InitDepotBuild_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CContentBuilder_InitDepotBuild_RequestDefaultTypeInternal() {}
  union {
    CContentBuilder_InitDepotBuild_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CContentBuilder_InitDepotBuild_RequestDefaultTypeInternal _CContentBuilder_InitDepotBuild_Request_default_instance_;
constexpr CContentBuilder_InitDepotBuild_Response::CContentBuilder_InitDepotBuild_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : aes_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , rsa_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , url_host_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , baseline_manifestid_(uint64_t{0u})
  , chunk_size_(0u)
  , offset_detection_enabled_(false)
  , offset_detection_min_clean_chunk_(0u)
  , offset_detection_blast_radius_pre_(0u)
  , offset_detection_blast_radius_post_(0u)
  , offset_detection_max_distance_pre_(0u)
  , offset_detection_max_distance_post_(0u){}
struct CContentBuilder_InitDepotBuild_ResponseDefaultTypeInternal {
  constexpr CContentBuilder_InitDepotBuild_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CContentBuilder_InitDepotBuild_ResponseDefaultTypeInternal() {}
  union {
    CContentBuilder_InitDepotBuild_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CContentBuilder_InitDepotBuild_ResponseDefaultTypeInternal _CContentBuilder_InitDepotBuild_Response_default_instance_;
constexpr CContentBuilder_StartDepotUpload_Request::CContentBuilder_StartDepotUpload_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appid_(0u)
  , depotid_(0u)
  , workshop_itemid_(uint64_t{0u})
  , baseline_manifestid_(uint64_t{0u})
  , for_local_cs_(false)
  , manifest_size_(0u){}
struct CContentBuilder_StartDepotUpload_RequestDefaultTypeInternal {
  constexpr CContentBuilder_StartDepotUpload_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CContentBuilder_StartDepotUpload_RequestDefaultTypeInternal() {}
  union {
    CContentBuilder_StartDepotUpload_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CContentBuilder_StartDepotUpload_RequestDefaultTypeInternal _CContentBuilder_StartDepotUpload_Request_default_instance_;
constexpr CContentBuilder_StartDepotUpload_Response::CContentBuilder_StartDepotUpload_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : depot_build_handle_(uint64_t{0u}){}
struct CContentBuilder_StartDepotUpload_ResponseDefaultTypeInternal {
  constexpr CContentBuilder_StartDepotUpload_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CContentBuilder_StartDepotUpload_ResponseDefaultTypeInternal() {}
  union {
    CContentBuilder_StartDepotUpload_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CContentBuilder_StartDepotUpload_ResponseDefaultTypeInternal _CContentBuilder_StartDepotUpload_Response_default_instance_;
constexpr CContentBuilder_GetMissingDepotChunks_Request::CContentBuilder_GetMissingDepotChunks_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : depot_build_handle_(uint64_t{0u})
  , appid_(0u){}
struct CContentBuilder_GetMissingDepotChunks_RequestDefaultTypeInternal {
  constexpr CContentBuilder_GetMissingDepotChunks_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CContentBuilder_GetMissingDepotChunks_RequestDefaultTypeInternal() {}
  union {
    CContentBuilder_GetMissingDepotChunks_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CContentBuilder_GetMissingDepotChunks_RequestDefaultTypeInternal _CContentBuilder_GetMissingDepotChunks_Request_default_instance_;
constexpr CContentBuilder_GetMissingDepotChunks_Response_Chunks::CContentBuilder_GetMissingDepotChunks_Response_Chunks(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sha_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CContentBuilder_GetMissingDepotChunks_Response_ChunksDefaultTypeInternal {
  constexpr CContentBuilder_GetMissingDepotChunks_Response_ChunksDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CContentBuilder_GetMissingDepotChunks_Response_ChunksDefaultTypeInternal() {}
  union {
    CContentBuilder_GetMissingDepotChunks_Response_Chunks _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CContentBuilder_GetMissingDepotChunks_Response_ChunksDefaultTypeInternal _CContentBuilder_GetMissingDepotChunks_Response_Chunks_default_instance_;
constexpr CContentBuilder_GetMissingDepotChunks_Response::CContentBuilder_GetMissingDepotChunks_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : missing_chunks_()
  , total_missing_bytes_(uint64_t{0u})
  , total_missing_chunks_(0u){}
struct CContentBuilder_GetMissingDepotChunks_ResponseDefaultTypeInternal {
  constexpr CContentBuilder_GetMissingDepotChunks_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CContentBuilder_GetMissingDepotChunks_ResponseDefaultTypeInternal() {}
  union {
    CContentBuilder_GetMissingDepotChunks_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CContentBuilder_GetMissingDepotChunks_ResponseDefaultTypeInternal _CContentBuilder_GetMissingDepotChunks_Response_default_instance_;
constexpr CContentBuilder_FinishDepotUpload_Request::CContentBuilder_FinishDepotUpload_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : depot_build_handle_(uint64_t{0u})
  , appid_(0u){}
struct CContentBuilder_FinishDepotUpload_RequestDefaultTypeInternal {
  constexpr CContentBuilder_FinishDepotUpload_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CContentBuilder_FinishDepotUpload_RequestDefaultTypeInternal() {}
  union {
    CContentBuilder_FinishDepotUpload_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CContentBuilder_FinishDepotUpload_RequestDefaultTypeInternal _CContentBuilder_FinishDepotUpload_Request_default_instance_;
constexpr CContentBuilder_FinishDepotUpload_Response::CContentBuilder_FinishDepotUpload_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : manifestid_(uint64_t{0u})
  , prev_reused_(false){}
struct CContentBuilder_FinishDepotUpload_ResponseDefaultTypeInternal {
  constexpr CContentBuilder_FinishDepotUpload_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CContentBuilder_FinishDepotUpload_ResponseDefaultTypeInternal() {}
  union {
    CContentBuilder_FinishDepotUpload_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CContentBuilder_FinishDepotUpload_ResponseDefaultTypeInternal _CContentBuilder_FinishDepotUpload_Response_default_instance_;
constexpr CContentBuilder_CommitAppBuild_Request_Depots::CContentBuilder_CommitAppBuild_Request_Depots(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : manifestid_(uint64_t{0u})
  , depotid_(0u){}
struct CContentBuilder_CommitAppBuild_Request_DepotsDefaultTypeInternal {
  constexpr CContentBuilder_CommitAppBuild_Request_DepotsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CContentBuilder_CommitAppBuild_Request_DepotsDefaultTypeInternal() {}
  union {
    CContentBuilder_CommitAppBuild_Request_Depots _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CContentBuilder_CommitAppBuild_Request_DepotsDefaultTypeInternal _CContentBuilder_CommitAppBuild_Request_Depots_default_instance_;
constexpr CContentBuilder_CommitAppBuild_Request::CContentBuilder_CommitAppBuild_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : depot_manifests_()
  , build_notes_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , live_branch_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , appid_(0u){}
struct CContentBuilder_CommitAppBuild_RequestDefaultTypeInternal {
  constexpr CContentBuilder_CommitAppBuild_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CContentBuilder_CommitAppBuild_RequestDefaultTypeInternal() {}
  union {
    CContentBuilder_CommitAppBuild_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CContentBuilder_CommitAppBuild_RequestDefaultTypeInternal _CContentBuilder_CommitAppBuild_Request_default_instance_;
constexpr CContentBuilder_CommitAppBuild_Response::CContentBuilder_CommitAppBuild_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : buildid_(0u){}
struct CContentBuilder_CommitAppBuild_ResponseDefaultTypeInternal {
  constexpr CContentBuilder_CommitAppBuild_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CContentBuilder_CommitAppBuild_ResponseDefaultTypeInternal() {}
  union {
    CContentBuilder_CommitAppBuild_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CContentBuilder_CommitAppBuild_ResponseDefaultTypeInternal _CContentBuilder_CommitAppBuild_Response_default_instance_;
constexpr CContentBuilder_SignInstallScript_Request::CContentBuilder_SignInstallScript_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : install_script_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , appid_(0u)
  , depotid_(0u){}
struct CContentBuilder_SignInstallScript_RequestDefaultTypeInternal {
  constexpr CContentBuilder_SignInstallScript_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CContentBuilder_SignInstallScript_RequestDefaultTypeInternal() {}
  union {
    CContentBuilder_SignInstallScript_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CContentBuilder_SignInstallScript_RequestDefaultTypeInternal _CContentBuilder_SignInstallScript_Request_default_instance_;
constexpr CContentBuilder_SignInstallScript_Response::CContentBuilder_SignInstallScript_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : signed_install_script_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CContentBuilder_SignInstallScript_ResponseDefaultTypeInternal {
  constexpr CContentBuilder_SignInstallScript_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CContentBuilder_SignInstallScript_ResponseDefaultTypeInternal() {}
  union {
    CContentBuilder_SignInstallScript_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CContentBuilder_SignInstallScript_ResponseDefaultTypeInternal _CContentBuilder_SignInstallScript_Response_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steammessages_5fdepotbuilder_2esteamclient_2eproto[14];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_steammessages_5fdepotbuilder_2esteamclient_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_steammessages_5fdepotbuilder_2esteamclient_2eproto[1];

const uint32_t TableStruct_steammessages_5fdepotbuilder_2esteamclient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CContentBuilder_InitDepotBuild_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CContentBuilder_InitDepotBuild_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CContentBuilder_InitDepotBuild_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CContentBuilder_InitDepotBuild_Request, depotid_),
  PROTOBUF_FIELD_OFFSET(::CContentBuilder_InitDepotBuild_Request, workshop_itemid_),
  PROTOBUF_FIELD_OFFSET(::CContentBuilder_InitDepotBuild_Request, for_local_cs_),
  PROTOBUF_FIELD_OFFSET(::CContentBuilder_InitDepotBuild_Request, target_branch_),
  1,
  2,
  3,
  4,
  0,
  PROTOBUF_FIELD_OFFSET(::CContentBuilder_InitDepotBuild_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CContentBuilder_InitDepotBuild_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CContentBuilder_InitDepotBuild_Response, baseline_manifestid_),
  PROTOBUF_FIELD_OFFSET(::CContentBuilder_InitDepotBuild_Response, chunk_size_),
  PROTOBUF_FIELD_OFFSET(::CContentBuilder_InitDepotBuild_Response, aes_key_),
  PROTOBUF_FIELD_OFFSET(::CContentBuilder_InitDepotBuild_Response, rsa_key_),
  PROTOBUF_FIELD_OFFSET(::CContentBuilder_InitDepotBuild_Response, url_host_),
  PROTOBUF_FIELD_OFFSET(::CContentBuilder_InitDepotBuild_Response, offset_detection_enabled_),
  PROTOBUF_FIELD_OFFSET(::CContentBuilder_InitDepotBuild_Response, offset_detection_min_clean_chunk_),
  PROTOBUF_FIELD_OFFSET(::CContentBuilder_InitDepotBuild_Response, offset_detection_blast_radius_pre_),
  PROTOBUF_FIELD_OFFSET(::CContentBuilder_InitDepotBuild_Response, offset_detection_blast_radius_post_),
  PROTOBUF_FIELD_OFFSET(::CContentBuilder_InitDepotBuild_Response, offset_detection_max_distance_pre_),
  PROTOBUF_FIELD_OFFSET(::CContentBuilder_InitDepotBuild_Response, offset_detection_max_distance_post_),
  3,
  4,
  0,
  1,
  2,
  5,
  6,
  7,
  8,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::CContentBuilder_StartDepotUpload_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CContentBuilder_StartDepotUpload_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CContentBuilder_StartDepotUpload_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CContentBuilder_StartDepotUpload_Request, depotid_),
  PROTOBUF_FIELD_OFFSET(::CContentBuilder_StartDepotUpload_Request, workshop_itemid_),
  PROTOBUF_FIELD_OFFSET(::CContentBuilder_StartDepotUpload_Request, for_local_cs_),
  PROTOBUF_FIELD_OFFSET(::CContentBuilder_StartDepotUpload_Request, baseline_manifestid_),
  PROTOBUF_FIELD_OFFSET(::CContentBuilder_StartDepotUpload_Request, manifest_size_),
  0,
  1,
  2,
  4,
  3,
  5,
  PROTOBUF_FIELD_OFFSET(::CContentBuilder_StartDepotUpload_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CContentBuilder_StartDepotUpload_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CContentBuilder_StartDepotUpload_Response, depot_build_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::CContentBuilder_GetMissingDepotChunks_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CContentBuilder_GetMissingDepotChunks_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CContentBuilder_GetMissingDepotChunks_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CContentBuilder_GetMissingDepotChunks_Request, depot_build_handle_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CContentBuilder_GetMissingDepotChunks_Response_Chunks, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CContentBuilder_GetMissingDepotChunks_Response_Chunks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CContentBuilder_GetMissingDepotChunks_Response_Chunks, sha_),
  0,
  PROTOBUF_FIELD_OFFSET(::CContentBuilder_GetMissingDepotChunks_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CContentBuilder_GetMissingDepotChunks_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CContentBuilder_GetMissingDepotChunks_Response, missing_chunks_),
  PROTOBUF_FIELD_OFFSET(::CContentBuilder_GetMissingDepotChunks_Response, total_missing_chunks_),
  PROTOBUF_FIELD_OFFSET(::CContentBuilder_GetMissingDepotChunks_Response, total_missing_bytes_),
  ~0u,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CContentBuilder_FinishDepotUpload_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CContentBuilder_FinishDepotUpload_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CContentBuilder_FinishDepotUpload_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CContentBuilder_FinishDepotUpload_Request, depot_build_handle_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CContentBuilder_FinishDepotUpload_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CContentBuilder_FinishDepotUpload_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CContentBuilder_FinishDepotUpload_Response, manifestid_),
  PROTOBUF_FIELD_OFFSET(::CContentBuilder_FinishDepotUpload_Response, prev_reused_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CContentBuilder_CommitAppBuild_Request_Depots, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CContentBuilder_CommitAppBuild_Request_Depots, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CContentBuilder_CommitAppBuild_Request_Depots, depotid_),
  PROTOBUF_FIELD_OFFSET(::CContentBuilder_CommitAppBuild_Request_Depots, manifestid_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CContentBuilder_CommitAppBuild_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CContentBuilder_CommitAppBuild_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CContentBuilder_CommitAppBuild_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CContentBuilder_CommitAppBuild_Request, depot_manifests_),
  PROTOBUF_FIELD_OFFSET(::CContentBuilder_CommitAppBuild_Request, build_notes_),
  PROTOBUF_FIELD_OFFSET(::CContentBuilder_CommitAppBuild_Request, live_branch_),
  2,
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CContentBuilder_CommitAppBuild_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CContentBuilder_CommitAppBuild_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CContentBuilder_CommitAppBuild_Response, buildid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CContentBuilder_SignInstallScript_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CContentBuilder_SignInstallScript_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CContentBuilder_SignInstallScript_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CContentBuilder_SignInstallScript_Request, depotid_),
  PROTOBUF_FIELD_OFFSET(::CContentBuilder_SignInstallScript_Request, install_script_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CContentBuilder_SignInstallScript_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CContentBuilder_SignInstallScript_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CContentBuilder_SignInstallScript_Response, signed_install_script_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, -1, sizeof(::CContentBuilder_InitDepotBuild_Request)},
  { 16, 33, -1, sizeof(::CContentBuilder_InitDepotBuild_Response)},
  { 44, 56, -1, sizeof(::CContentBuilder_StartDepotUpload_Request)},
  { 62, 69, -1, sizeof(::CContentBuilder_StartDepotUpload_Response)},
  { 70, 78, -1, sizeof(::CContentBuilder_GetMissingDepotChunks_Request)},
  { 80, 87, -1, sizeof(::CContentBuilder_GetMissingDepotChunks_Response_Chunks)},
  { 88, 97, -1, sizeof(::CContentBuilder_GetMissingDepotChunks_Response)},
  { 100, 108, -1, sizeof(::CContentBuilder_FinishDepotUpload_Request)},
  { 110, 118, -1, sizeof(::CContentBuilder_FinishDepotUpload_Response)},
  { 120, 128, -1, sizeof(::CContentBuilder_CommitAppBuild_Request_Depots)},
  { 130, 140, -1, sizeof(::CContentBuilder_CommitAppBuild_Request)},
  { 144, 151, -1, sizeof(::CContentBuilder_CommitAppBuild_Response)},
  { 152, 161, -1, sizeof(::CContentBuilder_SignInstallScript_Request)},
  { 164, 171, -1, sizeof(::CContentBuilder_SignInstallScript_Response)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CContentBuilder_InitDepotBuild_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CContentBuilder_InitDepotBuild_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CContentBuilder_StartDepotUpload_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CContentBuilder_StartDepotUpload_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CContentBuilder_GetMissingDepotChunks_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CContentBuilder_GetMissingDepotChunks_Response_Chunks_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CContentBuilder_GetMissingDepotChunks_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CContentBuilder_FinishDepotUpload_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CContentBuilder_FinishDepotUpload_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CContentBuilder_CommitAppBuild_Request_Depots_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CContentBuilder_CommitAppBuild_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CContentBuilder_CommitAppBuild_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CContentBuilder_SignInstallScript_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CContentBuilder_SignInstallScript_Response_default_instance_),
};

const char descriptor_table_protodef_steammessages_5fdepotbuilder_2esteamclient_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n,steammessages_depotbuilder.steamclient"
  ".proto\032\030steammessages_base.proto\032,steamm"
  "essages_unified_base.steamclient.proto\"\216"
  "\001\n&CContentBuilder_InitDepotBuild_Reques"
  "t\022\r\n\005appid\030\001 \001(\r\022\017\n\007depotid\030\002 \001(\r\022\027\n\017wor"
  "kshop_itemid\030\003 \001(\004\022\024\n\014for_local_cs\030\004 \001(\010"
  "\022\025\n\rtarget_branch\030\005 \001(\t\"\210\003\n\'CContentBuil"
  "der_InitDepotBuild_Response\022\033\n\023baseline_"
  "manifestid\030\001 \001(\004\022\022\n\nchunk_size\030\002 \001(\r\022\017\n\007"
  "aes_key\030\003 \001(\014\022\017\n\007rsa_key\030\004 \001(\014\022\020\n\010url_ho"
  "st\030\005 \001(\t\022 \n\030offset_detection_enabled\030\006 \001"
  "(\010\022(\n offset_detection_min_clean_chunk\030\007"
  " \001(\r\022)\n!offset_detection_blast_radius_pr"
  "e\030\010 \001(\r\022*\n\"offset_detection_blast_radius"
  "_post\030\t \001(\r\022)\n!offset_detection_max_dist"
  "ance_pre\030\n \001(\r\022*\n\"offset_detection_max_d"
  "istance_post\030\013 \001(\r\"\255\001\n(CContentBuilder_S"
  "tartDepotUpload_Request\022\r\n\005appid\030\001 \001(\r\022\017"
  "\n\007depotid\030\002 \001(\r\022\027\n\017workshop_itemid\030\003 \001(\004"
  "\022\024\n\014for_local_cs\030\004 \001(\010\022\033\n\023baseline_manif"
  "estid\030\005 \001(\004\022\025\n\rmanifest_size\030\006 \001(\r\"G\n)CC"
  "ontentBuilder_StartDepotUpload_Response\022"
  "\032\n\022depot_build_handle\030\001 \001(\004\"Z\n-CContentB"
  "uilder_GetMissingDepotChunks_Request\022\r\n\005"
  "appid\030\001 \001(\r\022\032\n\022depot_build_handle\030\002 \001(\004\""
  "\322\001\n.CContentBuilder_GetMissingDepotChunk"
  "s_Response\022N\n\016missing_chunks\030\001 \003(\01326.CCo"
  "ntentBuilder_GetMissingDepotChunks_Respo"
  "nse.Chunks\022\034\n\024total_missing_chunks\030\002 \001(\r"
  "\022\033\n\023total_missing_bytes\030\003 \001(\004\032\025\n\006Chunks\022"
  "\013\n\003sha\030\001 \001(\014\"V\n)CContentBuilder_FinishDe"
  "potUpload_Request\022\r\n\005appid\030\001 \001(\r\022\032\n\022depo"
  "t_build_handle\030\002 \001(\004\"U\n*CContentBuilder_"
  "FinishDepotUpload_Response\022\022\n\nmanifestid"
  "\030\001 \001(\004\022\023\n\013prev_reused\030\002 \001(\010\"\331\001\n&CContent"
  "Builder_CommitAppBuild_Request\022\r\n\005appid\030"
  "\001 \001(\r\022G\n\017depot_manifests\030\002 \003(\0132..CConten"
  "tBuilder_CommitAppBuild_Request.Depots\022\023"
  "\n\013build_notes\030\004 \001(\t\022\023\n\013live_branch\030\005 \001(\t"
  "\032-\n\006Depots\022\017\n\007depotid\030\001 \001(\r\022\022\n\nmanifesti"
  "d\030\002 \001(\004\":\n\'CContentBuilder_CommitAppBuil"
  "d_Response\022\017\n\007buildid\030\001 \001(\r\"c\n)CContentB"
  "uilder_SignInstallScript_Request\022\r\n\005appi"
  "d\030\001 \001(\r\022\017\n\007depotid\030\002 \001(\r\022\026\n\016install_scri"
  "pt\030\003 \001(\t\"K\n*CContentBuilder_SignInstallS"
  "cript_Response\022\035\n\025signed_install_script\030"
  "\001 \001(\t2\222\010\n\016ContentBuilder\022\230\001\n\016InitDepotBu"
  "ild\022\'.CContentBuilder_InitDepotBuild_Req"
  "uest\032(.CContentBuilder_InitDepotBuild_Re"
  "sponse\"3\202\265\030/Get inital parameters to sta"
  "rt building a depot\022\236\001\n\020StartDepotUpload"
  "\022).CContentBuilder_StartDepotUpload_Requ"
  "est\032*.CContentBuilder_StartDepotUpload_R"
  "esponse\"3\202\265\030/Start uploading manifest an"
  "d chunks for a depot\022\251\001\n\025GetMissingDepot"
  "Chunks\022..CContentBuilder_GetMissingDepot"
  "Chunks_Request\032/.CContentBuilder_GetMiss"
  "ingDepotChunks_Response\"/\202\265\030+Get list of"
  " missing chunks for depot upload\022\261\001\n\021Fin"
  "ishDepotUpload\022*.CContentBuilder_FinishD"
  "epotUpload_Request\032+.CContentBuilder_Fin"
  "ishDepotUpload_Response\"C\202\265\030\?Commit a de"
  "pot build after manifest and all chunks "
  "are uploaded\022\247\001\n\016CommitAppBuild\022\'.CConte"
  "ntBuilder_CommitAppBuild_Request\032(.CCont"
  "entBuilder_CommitAppBuild_Response\"B\202\265\030>"
  "Combine previous depot uploads into an a"
  "pp build and commit it\022\210\001\n\021SignInstallSc"
  "ript\022*.CContentBuilder_SignInstallScript"
  "_Request\032+.CContentBuilder_SignInstallSc"
  "ript_Response\"\032\202\265\030\026Sign an install scrip"
  "t\032/\202\265\030+Interface to build and upload dep"
  "ot contentB\003\200\001\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_steammessages_5fdepotbuilder_2esteamclient_2eproto_deps[2] = {
  &::descriptor_table_steammessages_5fbase_2eproto,
  &::descriptor_table_steammessages_5funified_5fbase_2esteamclient_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steammessages_5fdepotbuilder_2esteamclient_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fdepotbuilder_2esteamclient_2eproto = {
  false, false, 2895, descriptor_table_protodef_steammessages_5fdepotbuilder_2esteamclient_2eproto, "steammessages_depotbuilder.steamclient.proto", 
  &descriptor_table_steammessages_5fdepotbuilder_2esteamclient_2eproto_once, descriptor_table_steammessages_5fdepotbuilder_2esteamclient_2eproto_deps, 2, 14,
  schemas, file_default_instances, TableStruct_steammessages_5fdepotbuilder_2esteamclient_2eproto::offsets,
  file_level_metadata_steammessages_5fdepotbuilder_2esteamclient_2eproto, file_level_enum_descriptors_steammessages_5fdepotbuilder_2esteamclient_2eproto, file_level_service_descriptors_steammessages_5fdepotbuilder_2esteamclient_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_steammessages_5fdepotbuilder_2esteamclient_2eproto_getter() {
  return &descriptor_table_steammessages_5fdepotbuilder_2esteamclient_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_steammessages_5fdepotbuilder_2esteamclient_2eproto(&descriptor_table_steammessages_5fdepotbuilder_2esteamclient_2eproto);

// ===================================================================

class CContentBuilder_InitDepotBuild_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CContentBuilder_InitDepotBuild_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_depotid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_workshop_itemid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_for_local_cs(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_target_branch(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CContentBuilder_InitDepotBuild_Request::CContentBuilder_InitDepotBuild_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CContentBuilder_InitDepotBuild_Request)
}
CContentBuilder_InitDepotBuild_Request::CContentBuilder_InitDepotBuild_Request(const CContentBuilder_InitDepotBuild_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  target_branch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    target_branch_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_target_branch()) {
    target_branch_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_target_branch(), 
      GetArenaForAllocation());
  }
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&for_local_cs_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(for_local_cs_));
  // @@protoc_insertion_point(copy_constructor:CContentBuilder_InitDepotBuild_Request)
}

inline void CContentBuilder_InitDepotBuild_Request::SharedCtor() {
target_branch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  target_branch_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&appid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&for_local_cs_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(for_local_cs_));
}

CContentBuilder_InitDepotBuild_Request::~CContentBuilder_InitDepotBuild_Request() {
  // @@protoc_insertion_point(destructor:CContentBuilder_InitDepotBuild_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CContentBuilder_InitDepotBuild_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  target_branch_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CContentBuilder_InitDepotBuild_Request::ArenaDtor(void* object) {
  CContentBuilder_InitDepotBuild_Request* _this = reinterpret_cast< CContentBuilder_InitDepotBuild_Request* >(object);
  (void)_this;
}
void CContentBuilder_InitDepotBuild_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CContentBuilder_InitDepotBuild_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CContentBuilder_InitDepotBuild_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CContentBuilder_InitDepotBuild_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    target_branch_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&for_local_cs_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(for_local_cs_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CContentBuilder_InitDepotBuild_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 depotid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_depotid(&has_bits);
          depotid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 workshop_itemid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_workshop_itemid(&has_bits);
          workshop_itemid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool for_local_cs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_for_local_cs(&has_bits);
          for_local_cs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string target_branch = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_target_branch();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CContentBuilder_InitDepotBuild_Request.target_branch");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CContentBuilder_InitDepotBuild_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CContentBuilder_InitDepotBuild_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional uint32 depotid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_depotid(), target);
  }

  // optional uint64 workshop_itemid = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_workshop_itemid(), target);
  }

  // optional bool for_local_cs = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_for_local_cs(), target);
  }

  // optional string target_branch = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_target_branch().data(), static_cast<int>(this->_internal_target_branch().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CContentBuilder_InitDepotBuild_Request.target_branch");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_target_branch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CContentBuilder_InitDepotBuild_Request)
  return target;
}

size_t CContentBuilder_InitDepotBuild_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CContentBuilder_InitDepotBuild_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string target_branch = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_target_branch());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional uint32 depotid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_depotid());
    }

    // optional uint64 workshop_itemid = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_workshop_itemid());
    }

    // optional bool for_local_cs = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CContentBuilder_InitDepotBuild_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CContentBuilder_InitDepotBuild_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CContentBuilder_InitDepotBuild_Request::GetClassData() const { return &_class_data_; }

void CContentBuilder_InitDepotBuild_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CContentBuilder_InitDepotBuild_Request *>(to)->MergeFrom(
      static_cast<const CContentBuilder_InitDepotBuild_Request &>(from));
}


void CContentBuilder_InitDepotBuild_Request::MergeFrom(const CContentBuilder_InitDepotBuild_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CContentBuilder_InitDepotBuild_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_target_branch(from._internal_target_branch());
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000004u) {
      depotid_ = from.depotid_;
    }
    if (cached_has_bits & 0x00000008u) {
      workshop_itemid_ = from.workshop_itemid_;
    }
    if (cached_has_bits & 0x00000010u) {
      for_local_cs_ = from.for_local_cs_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CContentBuilder_InitDepotBuild_Request::CopyFrom(const CContentBuilder_InitDepotBuild_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CContentBuilder_InitDepotBuild_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CContentBuilder_InitDepotBuild_Request::IsInitialized() const {
  return true;
}

void CContentBuilder_InitDepotBuild_Request::InternalSwap(CContentBuilder_InitDepotBuild_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &target_branch_, lhs_arena,
      &other->target_branch_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CContentBuilder_InitDepotBuild_Request, for_local_cs_)
      + sizeof(CContentBuilder_InitDepotBuild_Request::for_local_cs_)
      - PROTOBUF_FIELD_OFFSET(CContentBuilder_InitDepotBuild_Request, appid_)>(
          reinterpret_cast<char*>(&appid_),
          reinterpret_cast<char*>(&other->appid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CContentBuilder_InitDepotBuild_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fdepotbuilder_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fdepotbuilder_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fdepotbuilder_2esteamclient_2eproto[0]);
}

// ===================================================================

class CContentBuilder_InitDepotBuild_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CContentBuilder_InitDepotBuild_Response>()._has_bits_);
  static void set_has_baseline_manifestid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_chunk_size(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_aes_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rsa_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_url_host(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_offset_detection_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_offset_detection_min_clean_chunk(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_offset_detection_blast_radius_pre(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_offset_detection_blast_radius_post(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_offset_detection_max_distance_pre(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_offset_detection_max_distance_post(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

CContentBuilder_InitDepotBuild_Response::CContentBuilder_InitDepotBuild_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CContentBuilder_InitDepotBuild_Response)
}
CContentBuilder_InitDepotBuild_Response::CContentBuilder_InitDepotBuild_Response(const CContentBuilder_InitDepotBuild_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  aes_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    aes_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_aes_key()) {
    aes_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_aes_key(), 
      GetArenaForAllocation());
  }
  rsa_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    rsa_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_rsa_key()) {
    rsa_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rsa_key(), 
      GetArenaForAllocation());
  }
  url_host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url_host()) {
    url_host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url_host(), 
      GetArenaForAllocation());
  }
  ::memcpy(&baseline_manifestid_, &from.baseline_manifestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&offset_detection_max_distance_post_) -
    reinterpret_cast<char*>(&baseline_manifestid_)) + sizeof(offset_detection_max_distance_post_));
  // @@protoc_insertion_point(copy_constructor:CContentBuilder_InitDepotBuild_Response)
}

inline void CContentBuilder_InitDepotBuild_Response::SharedCtor() {
aes_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  aes_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
rsa_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  rsa_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
url_host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&baseline_manifestid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&offset_detection_max_distance_post_) -
    reinterpret_cast<char*>(&baseline_manifestid_)) + sizeof(offset_detection_max_distance_post_));
}

CContentBuilder_InitDepotBuild_Response::~CContentBuilder_InitDepotBuild_Response() {
  // @@protoc_insertion_point(destructor:CContentBuilder_InitDepotBuild_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CContentBuilder_InitDepotBuild_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  aes_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rsa_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_host_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CContentBuilder_InitDepotBuild_Response::ArenaDtor(void* object) {
  CContentBuilder_InitDepotBuild_Response* _this = reinterpret_cast< CContentBuilder_InitDepotBuild_Response* >(object);
  (void)_this;
}
void CContentBuilder_InitDepotBuild_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CContentBuilder_InitDepotBuild_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CContentBuilder_InitDepotBuild_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CContentBuilder_InitDepotBuild_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      aes_key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      rsa_key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      url_host_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&baseline_manifestid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&offset_detection_blast_radius_pre_) -
        reinterpret_cast<char*>(&baseline_manifestid_)) + sizeof(offset_detection_blast_radius_pre_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&offset_detection_blast_radius_post_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&offset_detection_max_distance_post_) -
        reinterpret_cast<char*>(&offset_detection_blast_radius_post_)) + sizeof(offset_detection_max_distance_post_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CContentBuilder_InitDepotBuild_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 baseline_manifestid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_baseline_manifestid(&has_bits);
          baseline_manifestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 chunk_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_chunk_size(&has_bits);
          chunk_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes aes_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_aes_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes rsa_key = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_rsa_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string url_host = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_url_host();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CContentBuilder_InitDepotBuild_Response.url_host");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool offset_detection_enabled = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_offset_detection_enabled(&has_bits);
          offset_detection_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 offset_detection_min_clean_chunk = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_offset_detection_min_clean_chunk(&has_bits);
          offset_detection_min_clean_chunk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 offset_detection_blast_radius_pre = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_offset_detection_blast_radius_pre(&has_bits);
          offset_detection_blast_radius_pre_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 offset_detection_blast_radius_post = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_offset_detection_blast_radius_post(&has_bits);
          offset_detection_blast_radius_post_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 offset_detection_max_distance_pre = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_offset_detection_max_distance_pre(&has_bits);
          offset_detection_max_distance_pre_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 offset_detection_max_distance_post = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_offset_detection_max_distance_post(&has_bits);
          offset_detection_max_distance_post_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CContentBuilder_InitDepotBuild_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CContentBuilder_InitDepotBuild_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 baseline_manifestid = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_baseline_manifestid(), target);
  }

  // optional uint32 chunk_size = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_chunk_size(), target);
  }

  // optional bytes aes_key = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_aes_key(), target);
  }

  // optional bytes rsa_key = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_rsa_key(), target);
  }

  // optional string url_host = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url_host().data(), static_cast<int>(this->_internal_url_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CContentBuilder_InitDepotBuild_Response.url_host");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_url_host(), target);
  }

  // optional bool offset_detection_enabled = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_offset_detection_enabled(), target);
  }

  // optional uint32 offset_detection_min_clean_chunk = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_offset_detection_min_clean_chunk(), target);
  }

  // optional uint32 offset_detection_blast_radius_pre = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_offset_detection_blast_radius_pre(), target);
  }

  // optional uint32 offset_detection_blast_radius_post = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_offset_detection_blast_radius_post(), target);
  }

  // optional uint32 offset_detection_max_distance_pre = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_offset_detection_max_distance_pre(), target);
  }

  // optional uint32 offset_detection_max_distance_post = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_offset_detection_max_distance_post(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CContentBuilder_InitDepotBuild_Response)
  return target;
}

size_t CContentBuilder_InitDepotBuild_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CContentBuilder_InitDepotBuild_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes aes_key = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_aes_key());
    }

    // optional bytes rsa_key = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_rsa_key());
    }

    // optional string url_host = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url_host());
    }

    // optional uint64 baseline_manifestid = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_baseline_manifestid());
    }

    // optional uint32 chunk_size = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_chunk_size());
    }

    // optional bool offset_detection_enabled = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional uint32 offset_detection_min_clean_chunk = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_offset_detection_min_clean_chunk());
    }

    // optional uint32 offset_detection_blast_radius_pre = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_offset_detection_blast_radius_pre());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional uint32 offset_detection_blast_radius_post = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_offset_detection_blast_radius_post());
    }

    // optional uint32 offset_detection_max_distance_pre = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_offset_detection_max_distance_pre());
    }

    // optional uint32 offset_detection_max_distance_post = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_offset_detection_max_distance_post());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CContentBuilder_InitDepotBuild_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CContentBuilder_InitDepotBuild_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CContentBuilder_InitDepotBuild_Response::GetClassData() const { return &_class_data_; }

void CContentBuilder_InitDepotBuild_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CContentBuilder_InitDepotBuild_Response *>(to)->MergeFrom(
      static_cast<const CContentBuilder_InitDepotBuild_Response &>(from));
}


void CContentBuilder_InitDepotBuild_Response::MergeFrom(const CContentBuilder_InitDepotBuild_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CContentBuilder_InitDepotBuild_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_aes_key(from._internal_aes_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_rsa_key(from._internal_rsa_key());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_url_host(from._internal_url_host());
    }
    if (cached_has_bits & 0x00000008u) {
      baseline_manifestid_ = from.baseline_manifestid_;
    }
    if (cached_has_bits & 0x00000010u) {
      chunk_size_ = from.chunk_size_;
    }
    if (cached_has_bits & 0x00000020u) {
      offset_detection_enabled_ = from.offset_detection_enabled_;
    }
    if (cached_has_bits & 0x00000040u) {
      offset_detection_min_clean_chunk_ = from.offset_detection_min_clean_chunk_;
    }
    if (cached_has_bits & 0x00000080u) {
      offset_detection_blast_radius_pre_ = from.offset_detection_blast_radius_pre_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      offset_detection_blast_radius_post_ = from.offset_detection_blast_radius_post_;
    }
    if (cached_has_bits & 0x00000200u) {
      offset_detection_max_distance_pre_ = from.offset_detection_max_distance_pre_;
    }
    if (cached_has_bits & 0x00000400u) {
      offset_detection_max_distance_post_ = from.offset_detection_max_distance_post_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CContentBuilder_InitDepotBuild_Response::CopyFrom(const CContentBuilder_InitDepotBuild_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CContentBuilder_InitDepotBuild_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CContentBuilder_InitDepotBuild_Response::IsInitialized() const {
  return true;
}

void CContentBuilder_InitDepotBuild_Response::InternalSwap(CContentBuilder_InitDepotBuild_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &aes_key_, lhs_arena,
      &other->aes_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &rsa_key_, lhs_arena,
      &other->rsa_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &url_host_, lhs_arena,
      &other->url_host_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CContentBuilder_InitDepotBuild_Response, offset_detection_max_distance_post_)
      + sizeof(CContentBuilder_InitDepotBuild_Response::offset_detection_max_distance_post_)
      - PROTOBUF_FIELD_OFFSET(CContentBuilder_InitDepotBuild_Response, baseline_manifestid_)>(
          reinterpret_cast<char*>(&baseline_manifestid_),
          reinterpret_cast<char*>(&other->baseline_manifestid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CContentBuilder_InitDepotBuild_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fdepotbuilder_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fdepotbuilder_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fdepotbuilder_2esteamclient_2eproto[1]);
}

// ===================================================================

class CContentBuilder_StartDepotUpload_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CContentBuilder_StartDepotUpload_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_depotid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_workshop_itemid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_for_local_cs(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_baseline_manifestid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_manifest_size(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CContentBuilder_StartDepotUpload_Request::CContentBuilder_StartDepotUpload_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CContentBuilder_StartDepotUpload_Request)
}
CContentBuilder_StartDepotUpload_Request::CContentBuilder_StartDepotUpload_Request(const CContentBuilder_StartDepotUpload_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&manifest_size_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(manifest_size_));
  // @@protoc_insertion_point(copy_constructor:CContentBuilder_StartDepotUpload_Request)
}

inline void CContentBuilder_StartDepotUpload_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&appid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&manifest_size_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(manifest_size_));
}

CContentBuilder_StartDepotUpload_Request::~CContentBuilder_StartDepotUpload_Request() {
  // @@protoc_insertion_point(destructor:CContentBuilder_StartDepotUpload_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CContentBuilder_StartDepotUpload_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CContentBuilder_StartDepotUpload_Request::ArenaDtor(void* object) {
  CContentBuilder_StartDepotUpload_Request* _this = reinterpret_cast< CContentBuilder_StartDepotUpload_Request* >(object);
  (void)_this;
}
void CContentBuilder_StartDepotUpload_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CContentBuilder_StartDepotUpload_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CContentBuilder_StartDepotUpload_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CContentBuilder_StartDepotUpload_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&manifest_size_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(manifest_size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CContentBuilder_StartDepotUpload_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 depotid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_depotid(&has_bits);
          depotid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 workshop_itemid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_workshop_itemid(&has_bits);
          workshop_itemid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool for_local_cs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_for_local_cs(&has_bits);
          for_local_cs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 baseline_manifestid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_baseline_manifestid(&has_bits);
          baseline_manifestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 manifest_size = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_manifest_size(&has_bits);
          manifest_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CContentBuilder_StartDepotUpload_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CContentBuilder_StartDepotUpload_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional uint32 depotid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_depotid(), target);
  }

  // optional uint64 workshop_itemid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_workshop_itemid(), target);
  }

  // optional bool for_local_cs = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_for_local_cs(), target);
  }

  // optional uint64 baseline_manifestid = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_baseline_manifestid(), target);
  }

  // optional uint32 manifest_size = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_manifest_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CContentBuilder_StartDepotUpload_Request)
  return target;
}

size_t CContentBuilder_StartDepotUpload_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CContentBuilder_StartDepotUpload_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional uint32 depotid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_depotid());
    }

    // optional uint64 workshop_itemid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_workshop_itemid());
    }

    // optional uint64 baseline_manifestid = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_baseline_manifestid());
    }

    // optional bool for_local_cs = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional uint32 manifest_size = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_manifest_size());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CContentBuilder_StartDepotUpload_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CContentBuilder_StartDepotUpload_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CContentBuilder_StartDepotUpload_Request::GetClassData() const { return &_class_data_; }

void CContentBuilder_StartDepotUpload_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CContentBuilder_StartDepotUpload_Request *>(to)->MergeFrom(
      static_cast<const CContentBuilder_StartDepotUpload_Request &>(from));
}


void CContentBuilder_StartDepotUpload_Request::MergeFrom(const CContentBuilder_StartDepotUpload_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CContentBuilder_StartDepotUpload_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000002u) {
      depotid_ = from.depotid_;
    }
    if (cached_has_bits & 0x00000004u) {
      workshop_itemid_ = from.workshop_itemid_;
    }
    if (cached_has_bits & 0x00000008u) {
      baseline_manifestid_ = from.baseline_manifestid_;
    }
    if (cached_has_bits & 0x00000010u) {
      for_local_cs_ = from.for_local_cs_;
    }
    if (cached_has_bits & 0x00000020u) {
      manifest_size_ = from.manifest_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CContentBuilder_StartDepotUpload_Request::CopyFrom(const CContentBuilder_StartDepotUpload_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CContentBuilder_StartDepotUpload_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CContentBuilder_StartDepotUpload_Request::IsInitialized() const {
  return true;
}

void CContentBuilder_StartDepotUpload_Request::InternalSwap(CContentBuilder_StartDepotUpload_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CContentBuilder_StartDepotUpload_Request, manifest_size_)
      + sizeof(CContentBuilder_StartDepotUpload_Request::manifest_size_)
      - PROTOBUF_FIELD_OFFSET(CContentBuilder_StartDepotUpload_Request, appid_)>(
          reinterpret_cast<char*>(&appid_),
          reinterpret_cast<char*>(&other->appid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CContentBuilder_StartDepotUpload_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fdepotbuilder_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fdepotbuilder_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fdepotbuilder_2esteamclient_2eproto[2]);
}

// ===================================================================

class CContentBuilder_StartDepotUpload_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CContentBuilder_StartDepotUpload_Response>()._has_bits_);
  static void set_has_depot_build_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CContentBuilder_StartDepotUpload_Response::CContentBuilder_StartDepotUpload_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CContentBuilder_StartDepotUpload_Response)
}
CContentBuilder_StartDepotUpload_Response::CContentBuilder_StartDepotUpload_Response(const CContentBuilder_StartDepotUpload_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  depot_build_handle_ = from.depot_build_handle_;
  // @@protoc_insertion_point(copy_constructor:CContentBuilder_StartDepotUpload_Response)
}

inline void CContentBuilder_StartDepotUpload_Response::SharedCtor() {
depot_build_handle_ = uint64_t{0u};
}

CContentBuilder_StartDepotUpload_Response::~CContentBuilder_StartDepotUpload_Response() {
  // @@protoc_insertion_point(destructor:CContentBuilder_StartDepotUpload_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CContentBuilder_StartDepotUpload_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CContentBuilder_StartDepotUpload_Response::ArenaDtor(void* object) {
  CContentBuilder_StartDepotUpload_Response* _this = reinterpret_cast< CContentBuilder_StartDepotUpload_Response* >(object);
  (void)_this;
}
void CContentBuilder_StartDepotUpload_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CContentBuilder_StartDepotUpload_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CContentBuilder_StartDepotUpload_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CContentBuilder_StartDepotUpload_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  depot_build_handle_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CContentBuilder_StartDepotUpload_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 depot_build_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_depot_build_handle(&has_bits);
          depot_build_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CContentBuilder_StartDepotUpload_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CContentBuilder_StartDepotUpload_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 depot_build_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_depot_build_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CContentBuilder_StartDepotUpload_Response)
  return target;
}

size_t CContentBuilder_StartDepotUpload_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CContentBuilder_StartDepotUpload_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 depot_build_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_depot_build_handle());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CContentBuilder_StartDepotUpload_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CContentBuilder_StartDepotUpload_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CContentBuilder_StartDepotUpload_Response::GetClassData() const { return &_class_data_; }

void CContentBuilder_StartDepotUpload_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CContentBuilder_StartDepotUpload_Response *>(to)->MergeFrom(
      static_cast<const CContentBuilder_StartDepotUpload_Response &>(from));
}


void CContentBuilder_StartDepotUpload_Response::MergeFrom(const CContentBuilder_StartDepotUpload_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CContentBuilder_StartDepotUpload_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_depot_build_handle()) {
    _internal_set_depot_build_handle(from._internal_depot_build_handle());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CContentBuilder_StartDepotUpload_Response::CopyFrom(const CContentBuilder_StartDepotUpload_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CContentBuilder_StartDepotUpload_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CContentBuilder_StartDepotUpload_Response::IsInitialized() const {
  return true;
}

void CContentBuilder_StartDepotUpload_Response::InternalSwap(CContentBuilder_StartDepotUpload_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(depot_build_handle_, other->depot_build_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CContentBuilder_StartDepotUpload_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fdepotbuilder_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fdepotbuilder_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fdepotbuilder_2esteamclient_2eproto[3]);
}

// ===================================================================

class CContentBuilder_GetMissingDepotChunks_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CContentBuilder_GetMissingDepotChunks_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_depot_build_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CContentBuilder_GetMissingDepotChunks_Request::CContentBuilder_GetMissingDepotChunks_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CContentBuilder_GetMissingDepotChunks_Request)
}
CContentBuilder_GetMissingDepotChunks_Request::CContentBuilder_GetMissingDepotChunks_Request(const CContentBuilder_GetMissingDepotChunks_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&depot_build_handle_, &from.depot_build_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&depot_build_handle_)) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:CContentBuilder_GetMissingDepotChunks_Request)
}

inline void CContentBuilder_GetMissingDepotChunks_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&depot_build_handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&depot_build_handle_)) + sizeof(appid_));
}

CContentBuilder_GetMissingDepotChunks_Request::~CContentBuilder_GetMissingDepotChunks_Request() {
  // @@protoc_insertion_point(destructor:CContentBuilder_GetMissingDepotChunks_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CContentBuilder_GetMissingDepotChunks_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CContentBuilder_GetMissingDepotChunks_Request::ArenaDtor(void* object) {
  CContentBuilder_GetMissingDepotChunks_Request* _this = reinterpret_cast< CContentBuilder_GetMissingDepotChunks_Request* >(object);
  (void)_this;
}
void CContentBuilder_GetMissingDepotChunks_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CContentBuilder_GetMissingDepotChunks_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CContentBuilder_GetMissingDepotChunks_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CContentBuilder_GetMissingDepotChunks_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&depot_build_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&appid_) -
        reinterpret_cast<char*>(&depot_build_handle_)) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CContentBuilder_GetMissingDepotChunks_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 depot_build_handle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_depot_build_handle(&has_bits);
          depot_build_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CContentBuilder_GetMissingDepotChunks_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CContentBuilder_GetMissingDepotChunks_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional uint64 depot_build_handle = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_depot_build_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CContentBuilder_GetMissingDepotChunks_Request)
  return target;
}

size_t CContentBuilder_GetMissingDepotChunks_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CContentBuilder_GetMissingDepotChunks_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 depot_build_handle = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_depot_build_handle());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CContentBuilder_GetMissingDepotChunks_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CContentBuilder_GetMissingDepotChunks_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CContentBuilder_GetMissingDepotChunks_Request::GetClassData() const { return &_class_data_; }

void CContentBuilder_GetMissingDepotChunks_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CContentBuilder_GetMissingDepotChunks_Request *>(to)->MergeFrom(
      static_cast<const CContentBuilder_GetMissingDepotChunks_Request &>(from));
}


void CContentBuilder_GetMissingDepotChunks_Request::MergeFrom(const CContentBuilder_GetMissingDepotChunks_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CContentBuilder_GetMissingDepotChunks_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      depot_build_handle_ = from.depot_build_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CContentBuilder_GetMissingDepotChunks_Request::CopyFrom(const CContentBuilder_GetMissingDepotChunks_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CContentBuilder_GetMissingDepotChunks_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CContentBuilder_GetMissingDepotChunks_Request::IsInitialized() const {
  return true;
}

void CContentBuilder_GetMissingDepotChunks_Request::InternalSwap(CContentBuilder_GetMissingDepotChunks_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CContentBuilder_GetMissingDepotChunks_Request, appid_)
      + sizeof(CContentBuilder_GetMissingDepotChunks_Request::appid_)
      - PROTOBUF_FIELD_OFFSET(CContentBuilder_GetMissingDepotChunks_Request, depot_build_handle_)>(
          reinterpret_cast<char*>(&depot_build_handle_),
          reinterpret_cast<char*>(&other->depot_build_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CContentBuilder_GetMissingDepotChunks_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fdepotbuilder_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fdepotbuilder_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fdepotbuilder_2esteamclient_2eproto[4]);
}

// ===================================================================

class CContentBuilder_GetMissingDepotChunks_Response_Chunks::_Internal {
 public:
  using HasBits = decltype(std::declval<CContentBuilder_GetMissingDepotChunks_Response_Chunks>()._has_bits_);
  static void set_has_sha(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CContentBuilder_GetMissingDepotChunks_Response_Chunks::CContentBuilder_GetMissingDepotChunks_Response_Chunks(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CContentBuilder_GetMissingDepotChunks_Response.Chunks)
}
CContentBuilder_GetMissingDepotChunks_Response_Chunks::CContentBuilder_GetMissingDepotChunks_Response_Chunks(const CContentBuilder_GetMissingDepotChunks_Response_Chunks& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sha_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sha_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sha()) {
    sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sha(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CContentBuilder_GetMissingDepotChunks_Response.Chunks)
}

inline void CContentBuilder_GetMissingDepotChunks_Response_Chunks::SharedCtor() {
sha_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sha_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CContentBuilder_GetMissingDepotChunks_Response_Chunks::~CContentBuilder_GetMissingDepotChunks_Response_Chunks() {
  // @@protoc_insertion_point(destructor:CContentBuilder_GetMissingDepotChunks_Response.Chunks)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CContentBuilder_GetMissingDepotChunks_Response_Chunks::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sha_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CContentBuilder_GetMissingDepotChunks_Response_Chunks::ArenaDtor(void* object) {
  CContentBuilder_GetMissingDepotChunks_Response_Chunks* _this = reinterpret_cast< CContentBuilder_GetMissingDepotChunks_Response_Chunks* >(object);
  (void)_this;
}
void CContentBuilder_GetMissingDepotChunks_Response_Chunks::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CContentBuilder_GetMissingDepotChunks_Response_Chunks::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CContentBuilder_GetMissingDepotChunks_Response_Chunks::Clear() {
// @@protoc_insertion_point(message_clear_start:CContentBuilder_GetMissingDepotChunks_Response.Chunks)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    sha_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CContentBuilder_GetMissingDepotChunks_Response_Chunks::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes sha = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sha();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CContentBuilder_GetMissingDepotChunks_Response_Chunks::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CContentBuilder_GetMissingDepotChunks_Response.Chunks)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes sha = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_sha(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CContentBuilder_GetMissingDepotChunks_Response.Chunks)
  return target;
}

size_t CContentBuilder_GetMissingDepotChunks_Response_Chunks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CContentBuilder_GetMissingDepotChunks_Response.Chunks)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes sha = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sha());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CContentBuilder_GetMissingDepotChunks_Response_Chunks::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CContentBuilder_GetMissingDepotChunks_Response_Chunks::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CContentBuilder_GetMissingDepotChunks_Response_Chunks::GetClassData() const { return &_class_data_; }

void CContentBuilder_GetMissingDepotChunks_Response_Chunks::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CContentBuilder_GetMissingDepotChunks_Response_Chunks *>(to)->MergeFrom(
      static_cast<const CContentBuilder_GetMissingDepotChunks_Response_Chunks &>(from));
}


void CContentBuilder_GetMissingDepotChunks_Response_Chunks::MergeFrom(const CContentBuilder_GetMissingDepotChunks_Response_Chunks& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CContentBuilder_GetMissingDepotChunks_Response.Chunks)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_sha()) {
    _internal_set_sha(from._internal_sha());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CContentBuilder_GetMissingDepotChunks_Response_Chunks::CopyFrom(const CContentBuilder_GetMissingDepotChunks_Response_Chunks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CContentBuilder_GetMissingDepotChunks_Response.Chunks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CContentBuilder_GetMissingDepotChunks_Response_Chunks::IsInitialized() const {
  return true;
}

void CContentBuilder_GetMissingDepotChunks_Response_Chunks::InternalSwap(CContentBuilder_GetMissingDepotChunks_Response_Chunks* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sha_, lhs_arena,
      &other->sha_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CContentBuilder_GetMissingDepotChunks_Response_Chunks::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fdepotbuilder_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fdepotbuilder_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fdepotbuilder_2esteamclient_2eproto[5]);
}

// ===================================================================

class CContentBuilder_GetMissingDepotChunks_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CContentBuilder_GetMissingDepotChunks_Response>()._has_bits_);
  static void set_has_total_missing_chunks(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_total_missing_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CContentBuilder_GetMissingDepotChunks_Response::CContentBuilder_GetMissingDepotChunks_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  missing_chunks_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CContentBuilder_GetMissingDepotChunks_Response)
}
CContentBuilder_GetMissingDepotChunks_Response::CContentBuilder_GetMissingDepotChunks_Response(const CContentBuilder_GetMissingDepotChunks_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      missing_chunks_(from.missing_chunks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&total_missing_bytes_, &from.total_missing_bytes_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_missing_chunks_) -
    reinterpret_cast<char*>(&total_missing_bytes_)) + sizeof(total_missing_chunks_));
  // @@protoc_insertion_point(copy_constructor:CContentBuilder_GetMissingDepotChunks_Response)
}

inline void CContentBuilder_GetMissingDepotChunks_Response::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&total_missing_bytes_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&total_missing_chunks_) -
    reinterpret_cast<char*>(&total_missing_bytes_)) + sizeof(total_missing_chunks_));
}

CContentBuilder_GetMissingDepotChunks_Response::~CContentBuilder_GetMissingDepotChunks_Response() {
  // @@protoc_insertion_point(destructor:CContentBuilder_GetMissingDepotChunks_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CContentBuilder_GetMissingDepotChunks_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CContentBuilder_GetMissingDepotChunks_Response::ArenaDtor(void* object) {
  CContentBuilder_GetMissingDepotChunks_Response* _this = reinterpret_cast< CContentBuilder_GetMissingDepotChunks_Response* >(object);
  (void)_this;
}
void CContentBuilder_GetMissingDepotChunks_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CContentBuilder_GetMissingDepotChunks_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CContentBuilder_GetMissingDepotChunks_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CContentBuilder_GetMissingDepotChunks_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  missing_chunks_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&total_missing_bytes_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&total_missing_chunks_) -
        reinterpret_cast<char*>(&total_missing_bytes_)) + sizeof(total_missing_chunks_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CContentBuilder_GetMissingDepotChunks_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CContentBuilder_GetMissingDepotChunks_Response.Chunks missing_chunks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_missing_chunks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 total_missing_chunks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_total_missing_chunks(&has_bits);
          total_missing_chunks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 total_missing_bytes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_total_missing_bytes(&has_bits);
          total_missing_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CContentBuilder_GetMissingDepotChunks_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CContentBuilder_GetMissingDepotChunks_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CContentBuilder_GetMissingDepotChunks_Response.Chunks missing_chunks = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_missing_chunks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_missing_chunks(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 total_missing_chunks = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_total_missing_chunks(), target);
  }

  // optional uint64 total_missing_bytes = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_total_missing_bytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CContentBuilder_GetMissingDepotChunks_Response)
  return target;
}

size_t CContentBuilder_GetMissingDepotChunks_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CContentBuilder_GetMissingDepotChunks_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CContentBuilder_GetMissingDepotChunks_Response.Chunks missing_chunks = 1;
  total_size += 1UL * this->_internal_missing_chunks_size();
  for (const auto& msg : this->missing_chunks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 total_missing_bytes = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_total_missing_bytes());
    }

    // optional uint32 total_missing_chunks = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_total_missing_chunks());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CContentBuilder_GetMissingDepotChunks_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CContentBuilder_GetMissingDepotChunks_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CContentBuilder_GetMissingDepotChunks_Response::GetClassData() const { return &_class_data_; }

void CContentBuilder_GetMissingDepotChunks_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CContentBuilder_GetMissingDepotChunks_Response *>(to)->MergeFrom(
      static_cast<const CContentBuilder_GetMissingDepotChunks_Response &>(from));
}


void CContentBuilder_GetMissingDepotChunks_Response::MergeFrom(const CContentBuilder_GetMissingDepotChunks_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CContentBuilder_GetMissingDepotChunks_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  missing_chunks_.MergeFrom(from.missing_chunks_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      total_missing_bytes_ = from.total_missing_bytes_;
    }
    if (cached_has_bits & 0x00000002u) {
      total_missing_chunks_ = from.total_missing_chunks_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CContentBuilder_GetMissingDepotChunks_Response::CopyFrom(const CContentBuilder_GetMissingDepotChunks_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CContentBuilder_GetMissingDepotChunks_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CContentBuilder_GetMissingDepotChunks_Response::IsInitialized() const {
  return true;
}

void CContentBuilder_GetMissingDepotChunks_Response::InternalSwap(CContentBuilder_GetMissingDepotChunks_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  missing_chunks_.InternalSwap(&other->missing_chunks_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CContentBuilder_GetMissingDepotChunks_Response, total_missing_chunks_)
      + sizeof(CContentBuilder_GetMissingDepotChunks_Response::total_missing_chunks_)
      - PROTOBUF_FIELD_OFFSET(CContentBuilder_GetMissingDepotChunks_Response, total_missing_bytes_)>(
          reinterpret_cast<char*>(&total_missing_bytes_),
          reinterpret_cast<char*>(&other->total_missing_bytes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CContentBuilder_GetMissingDepotChunks_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fdepotbuilder_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fdepotbuilder_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fdepotbuilder_2esteamclient_2eproto[6]);
}

// ===================================================================

class CContentBuilder_FinishDepotUpload_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CContentBuilder_FinishDepotUpload_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_depot_build_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CContentBuilder_FinishDepotUpload_Request::CContentBuilder_FinishDepotUpload_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CContentBuilder_FinishDepotUpload_Request)
}
CContentBuilder_FinishDepotUpload_Request::CContentBuilder_FinishDepotUpload_Request(const CContentBuilder_FinishDepotUpload_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&depot_build_handle_, &from.depot_build_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&depot_build_handle_)) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:CContentBuilder_FinishDepotUpload_Request)
}

inline void CContentBuilder_FinishDepotUpload_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&depot_build_handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&depot_build_handle_)) + sizeof(appid_));
}

CContentBuilder_FinishDepotUpload_Request::~CContentBuilder_FinishDepotUpload_Request() {
  // @@protoc_insertion_point(destructor:CContentBuilder_FinishDepotUpload_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CContentBuilder_FinishDepotUpload_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CContentBuilder_FinishDepotUpload_Request::ArenaDtor(void* object) {
  CContentBuilder_FinishDepotUpload_Request* _this = reinterpret_cast< CContentBuilder_FinishDepotUpload_Request* >(object);
  (void)_this;
}
void CContentBuilder_FinishDepotUpload_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CContentBuilder_FinishDepotUpload_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CContentBuilder_FinishDepotUpload_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CContentBuilder_FinishDepotUpload_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&depot_build_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&appid_) -
        reinterpret_cast<char*>(&depot_build_handle_)) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CContentBuilder_FinishDepotUpload_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 depot_build_handle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_depot_build_handle(&has_bits);
          depot_build_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CContentBuilder_FinishDepotUpload_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CContentBuilder_FinishDepotUpload_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional uint64 depot_build_handle = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_depot_build_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CContentBuilder_FinishDepotUpload_Request)
  return target;
}

size_t CContentBuilder_FinishDepotUpload_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CContentBuilder_FinishDepotUpload_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 depot_build_handle = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_depot_build_handle());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CContentBuilder_FinishDepotUpload_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CContentBuilder_FinishDepotUpload_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CContentBuilder_FinishDepotUpload_Request::GetClassData() const { return &_class_data_; }

void CContentBuilder_FinishDepotUpload_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CContentBuilder_FinishDepotUpload_Request *>(to)->MergeFrom(
      static_cast<const CContentBuilder_FinishDepotUpload_Request &>(from));
}


void CContentBuilder_FinishDepotUpload_Request::MergeFrom(const CContentBuilder_FinishDepotUpload_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CContentBuilder_FinishDepotUpload_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      depot_build_handle_ = from.depot_build_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CContentBuilder_FinishDepotUpload_Request::CopyFrom(const CContentBuilder_FinishDepotUpload_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CContentBuilder_FinishDepotUpload_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CContentBuilder_FinishDepotUpload_Request::IsInitialized() const {
  return true;
}

void CContentBuilder_FinishDepotUpload_Request::InternalSwap(CContentBuilder_FinishDepotUpload_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CContentBuilder_FinishDepotUpload_Request, appid_)
      + sizeof(CContentBuilder_FinishDepotUpload_Request::appid_)
      - PROTOBUF_FIELD_OFFSET(CContentBuilder_FinishDepotUpload_Request, depot_build_handle_)>(
          reinterpret_cast<char*>(&depot_build_handle_),
          reinterpret_cast<char*>(&other->depot_build_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CContentBuilder_FinishDepotUpload_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fdepotbuilder_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fdepotbuilder_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fdepotbuilder_2esteamclient_2eproto[7]);
}

// ===================================================================

class CContentBuilder_FinishDepotUpload_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CContentBuilder_FinishDepotUpload_Response>()._has_bits_);
  static void set_has_manifestid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_prev_reused(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CContentBuilder_FinishDepotUpload_Response::CContentBuilder_FinishDepotUpload_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CContentBuilder_FinishDepotUpload_Response)
}
CContentBuilder_FinishDepotUpload_Response::CContentBuilder_FinishDepotUpload_Response(const CContentBuilder_FinishDepotUpload_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&manifestid_, &from.manifestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&prev_reused_) -
    reinterpret_cast<char*>(&manifestid_)) + sizeof(prev_reused_));
  // @@protoc_insertion_point(copy_constructor:CContentBuilder_FinishDepotUpload_Response)
}

inline void CContentBuilder_FinishDepotUpload_Response::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&manifestid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&prev_reused_) -
    reinterpret_cast<char*>(&manifestid_)) + sizeof(prev_reused_));
}

CContentBuilder_FinishDepotUpload_Response::~CContentBuilder_FinishDepotUpload_Response() {
  // @@protoc_insertion_point(destructor:CContentBuilder_FinishDepotUpload_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CContentBuilder_FinishDepotUpload_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CContentBuilder_FinishDepotUpload_Response::ArenaDtor(void* object) {
  CContentBuilder_FinishDepotUpload_Response* _this = reinterpret_cast< CContentBuilder_FinishDepotUpload_Response* >(object);
  (void)_this;
}
void CContentBuilder_FinishDepotUpload_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CContentBuilder_FinishDepotUpload_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CContentBuilder_FinishDepotUpload_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CContentBuilder_FinishDepotUpload_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&manifestid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&prev_reused_) -
        reinterpret_cast<char*>(&manifestid_)) + sizeof(prev_reused_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CContentBuilder_FinishDepotUpload_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 manifestid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_manifestid(&has_bits);
          manifestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool prev_reused = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_prev_reused(&has_bits);
          prev_reused_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CContentBuilder_FinishDepotUpload_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CContentBuilder_FinishDepotUpload_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 manifestid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_manifestid(), target);
  }

  // optional bool prev_reused = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_prev_reused(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CContentBuilder_FinishDepotUpload_Response)
  return target;
}

size_t CContentBuilder_FinishDepotUpload_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CContentBuilder_FinishDepotUpload_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 manifestid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_manifestid());
    }

    // optional bool prev_reused = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CContentBuilder_FinishDepotUpload_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CContentBuilder_FinishDepotUpload_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CContentBuilder_FinishDepotUpload_Response::GetClassData() const { return &_class_data_; }

void CContentBuilder_FinishDepotUpload_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CContentBuilder_FinishDepotUpload_Response *>(to)->MergeFrom(
      static_cast<const CContentBuilder_FinishDepotUpload_Response &>(from));
}


void CContentBuilder_FinishDepotUpload_Response::MergeFrom(const CContentBuilder_FinishDepotUpload_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CContentBuilder_FinishDepotUpload_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      manifestid_ = from.manifestid_;
    }
    if (cached_has_bits & 0x00000002u) {
      prev_reused_ = from.prev_reused_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CContentBuilder_FinishDepotUpload_Response::CopyFrom(const CContentBuilder_FinishDepotUpload_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CContentBuilder_FinishDepotUpload_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CContentBuilder_FinishDepotUpload_Response::IsInitialized() const {
  return true;
}

void CContentBuilder_FinishDepotUpload_Response::InternalSwap(CContentBuilder_FinishDepotUpload_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CContentBuilder_FinishDepotUpload_Response, prev_reused_)
      + sizeof(CContentBuilder_FinishDepotUpload_Response::prev_reused_)
      - PROTOBUF_FIELD_OFFSET(CContentBuilder_FinishDepotUpload_Response, manifestid_)>(
          reinterpret_cast<char*>(&manifestid_),
          reinterpret_cast<char*>(&other->manifestid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CContentBuilder_FinishDepotUpload_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fdepotbuilder_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fdepotbuilder_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fdepotbuilder_2esteamclient_2eproto[8]);
}

// ===================================================================

class CContentBuilder_CommitAppBuild_Request_Depots::_Internal {
 public:
  using HasBits = decltype(std::declval<CContentBuilder_CommitAppBuild_Request_Depots>()._has_bits_);
  static void set_has_depotid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_manifestid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CContentBuilder_CommitAppBuild_Request_Depots::CContentBuilder_CommitAppBuild_Request_Depots(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CContentBuilder_CommitAppBuild_Request.Depots)
}
CContentBuilder_CommitAppBuild_Request_Depots::CContentBuilder_CommitAppBuild_Request_Depots(const CContentBuilder_CommitAppBuild_Request_Depots& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&manifestid_, &from.manifestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&depotid_) -
    reinterpret_cast<char*>(&manifestid_)) + sizeof(depotid_));
  // @@protoc_insertion_point(copy_constructor:CContentBuilder_CommitAppBuild_Request.Depots)
}

inline void CContentBuilder_CommitAppBuild_Request_Depots::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&manifestid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&depotid_) -
    reinterpret_cast<char*>(&manifestid_)) + sizeof(depotid_));
}

CContentBuilder_CommitAppBuild_Request_Depots::~CContentBuilder_CommitAppBuild_Request_Depots() {
  // @@protoc_insertion_point(destructor:CContentBuilder_CommitAppBuild_Request.Depots)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CContentBuilder_CommitAppBuild_Request_Depots::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CContentBuilder_CommitAppBuild_Request_Depots::ArenaDtor(void* object) {
  CContentBuilder_CommitAppBuild_Request_Depots* _this = reinterpret_cast< CContentBuilder_CommitAppBuild_Request_Depots* >(object);
  (void)_this;
}
void CContentBuilder_CommitAppBuild_Request_Depots::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CContentBuilder_CommitAppBuild_Request_Depots::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CContentBuilder_CommitAppBuild_Request_Depots::Clear() {
// @@protoc_insertion_point(message_clear_start:CContentBuilder_CommitAppBuild_Request.Depots)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&manifestid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&depotid_) -
        reinterpret_cast<char*>(&manifestid_)) + sizeof(depotid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CContentBuilder_CommitAppBuild_Request_Depots::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 depotid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_depotid(&has_bits);
          depotid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 manifestid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_manifestid(&has_bits);
          manifestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CContentBuilder_CommitAppBuild_Request_Depots::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CContentBuilder_CommitAppBuild_Request.Depots)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 depotid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_depotid(), target);
  }

  // optional uint64 manifestid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_manifestid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CContentBuilder_CommitAppBuild_Request.Depots)
  return target;
}

size_t CContentBuilder_CommitAppBuild_Request_Depots::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CContentBuilder_CommitAppBuild_Request.Depots)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 manifestid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_manifestid());
    }

    // optional uint32 depotid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_depotid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CContentBuilder_CommitAppBuild_Request_Depots::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CContentBuilder_CommitAppBuild_Request_Depots::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CContentBuilder_CommitAppBuild_Request_Depots::GetClassData() const { return &_class_data_; }

void CContentBuilder_CommitAppBuild_Request_Depots::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CContentBuilder_CommitAppBuild_Request_Depots *>(to)->MergeFrom(
      static_cast<const CContentBuilder_CommitAppBuild_Request_Depots &>(from));
}


void CContentBuilder_CommitAppBuild_Request_Depots::MergeFrom(const CContentBuilder_CommitAppBuild_Request_Depots& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CContentBuilder_CommitAppBuild_Request.Depots)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      manifestid_ = from.manifestid_;
    }
    if (cached_has_bits & 0x00000002u) {
      depotid_ = from.depotid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CContentBuilder_CommitAppBuild_Request_Depots::CopyFrom(const CContentBuilder_CommitAppBuild_Request_Depots& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CContentBuilder_CommitAppBuild_Request.Depots)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CContentBuilder_CommitAppBuild_Request_Depots::IsInitialized() const {
  return true;
}

void CContentBuilder_CommitAppBuild_Request_Depots::InternalSwap(CContentBuilder_CommitAppBuild_Request_Depots* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CContentBuilder_CommitAppBuild_Request_Depots, depotid_)
      + sizeof(CContentBuilder_CommitAppBuild_Request_Depots::depotid_)
      - PROTOBUF_FIELD_OFFSET(CContentBuilder_CommitAppBuild_Request_Depots, manifestid_)>(
          reinterpret_cast<char*>(&manifestid_),
          reinterpret_cast<char*>(&other->manifestid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CContentBuilder_CommitAppBuild_Request_Depots::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fdepotbuilder_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fdepotbuilder_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fdepotbuilder_2esteamclient_2eproto[9]);
}

// ===================================================================

class CContentBuilder_CommitAppBuild_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CContentBuilder_CommitAppBuild_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_build_notes(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_live_branch(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CContentBuilder_CommitAppBuild_Request::CContentBuilder_CommitAppBuild_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  depot_manifests_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CContentBuilder_CommitAppBuild_Request)
}
CContentBuilder_CommitAppBuild_Request::CContentBuilder_CommitAppBuild_Request(const CContentBuilder_CommitAppBuild_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      depot_manifests_(from.depot_manifests_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  build_notes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    build_notes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_build_notes()) {
    build_notes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_build_notes(), 
      GetArenaForAllocation());
  }
  live_branch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    live_branch_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_live_branch()) {
    live_branch_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_live_branch(), 
      GetArenaForAllocation());
  }
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:CContentBuilder_CommitAppBuild_Request)
}

inline void CContentBuilder_CommitAppBuild_Request::SharedCtor() {
build_notes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  build_notes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
live_branch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  live_branch_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
appid_ = 0u;
}

CContentBuilder_CommitAppBuild_Request::~CContentBuilder_CommitAppBuild_Request() {
  // @@protoc_insertion_point(destructor:CContentBuilder_CommitAppBuild_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CContentBuilder_CommitAppBuild_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  build_notes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  live_branch_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CContentBuilder_CommitAppBuild_Request::ArenaDtor(void* object) {
  CContentBuilder_CommitAppBuild_Request* _this = reinterpret_cast< CContentBuilder_CommitAppBuild_Request* >(object);
  (void)_this;
}
void CContentBuilder_CommitAppBuild_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CContentBuilder_CommitAppBuild_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CContentBuilder_CommitAppBuild_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CContentBuilder_CommitAppBuild_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  depot_manifests_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      build_notes_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      live_branch_.ClearNonDefaultToEmpty();
    }
  }
  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CContentBuilder_CommitAppBuild_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CContentBuilder_CommitAppBuild_Request.Depots depot_manifests = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_depot_manifests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string build_notes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_build_notes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CContentBuilder_CommitAppBuild_Request.build_notes");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string live_branch = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_live_branch();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CContentBuilder_CommitAppBuild_Request.live_branch");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CContentBuilder_CommitAppBuild_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CContentBuilder_CommitAppBuild_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // repeated .CContentBuilder_CommitAppBuild_Request.Depots depot_manifests = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_depot_manifests_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_depot_manifests(i), target, stream);
  }

  // optional string build_notes = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_build_notes().data(), static_cast<int>(this->_internal_build_notes().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CContentBuilder_CommitAppBuild_Request.build_notes");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_build_notes(), target);
  }

  // optional string live_branch = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_live_branch().data(), static_cast<int>(this->_internal_live_branch().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CContentBuilder_CommitAppBuild_Request.live_branch");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_live_branch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CContentBuilder_CommitAppBuild_Request)
  return target;
}

size_t CContentBuilder_CommitAppBuild_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CContentBuilder_CommitAppBuild_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CContentBuilder_CommitAppBuild_Request.Depots depot_manifests = 2;
  total_size += 1UL * this->_internal_depot_manifests_size();
  for (const auto& msg : this->depot_manifests_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string build_notes = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_build_notes());
    }

    // optional string live_branch = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_live_branch());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CContentBuilder_CommitAppBuild_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CContentBuilder_CommitAppBuild_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CContentBuilder_CommitAppBuild_Request::GetClassData() const { return &_class_data_; }

void CContentBuilder_CommitAppBuild_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CContentBuilder_CommitAppBuild_Request *>(to)->MergeFrom(
      static_cast<const CContentBuilder_CommitAppBuild_Request &>(from));
}


void CContentBuilder_CommitAppBuild_Request::MergeFrom(const CContentBuilder_CommitAppBuild_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CContentBuilder_CommitAppBuild_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  depot_manifests_.MergeFrom(from.depot_manifests_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_build_notes(from._internal_build_notes());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_live_branch(from._internal_live_branch());
    }
    if (cached_has_bits & 0x00000004u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CContentBuilder_CommitAppBuild_Request::CopyFrom(const CContentBuilder_CommitAppBuild_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CContentBuilder_CommitAppBuild_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CContentBuilder_CommitAppBuild_Request::IsInitialized() const {
  return true;
}

void CContentBuilder_CommitAppBuild_Request::InternalSwap(CContentBuilder_CommitAppBuild_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  depot_manifests_.InternalSwap(&other->depot_manifests_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &build_notes_, lhs_arena,
      &other->build_notes_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &live_branch_, lhs_arena,
      &other->live_branch_, rhs_arena
  );
  swap(appid_, other->appid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CContentBuilder_CommitAppBuild_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fdepotbuilder_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fdepotbuilder_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fdepotbuilder_2esteamclient_2eproto[10]);
}

// ===================================================================

class CContentBuilder_CommitAppBuild_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CContentBuilder_CommitAppBuild_Response>()._has_bits_);
  static void set_has_buildid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CContentBuilder_CommitAppBuild_Response::CContentBuilder_CommitAppBuild_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CContentBuilder_CommitAppBuild_Response)
}
CContentBuilder_CommitAppBuild_Response::CContentBuilder_CommitAppBuild_Response(const CContentBuilder_CommitAppBuild_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  buildid_ = from.buildid_;
  // @@protoc_insertion_point(copy_constructor:CContentBuilder_CommitAppBuild_Response)
}

inline void CContentBuilder_CommitAppBuild_Response::SharedCtor() {
buildid_ = 0u;
}

CContentBuilder_CommitAppBuild_Response::~CContentBuilder_CommitAppBuild_Response() {
  // @@protoc_insertion_point(destructor:CContentBuilder_CommitAppBuild_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CContentBuilder_CommitAppBuild_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CContentBuilder_CommitAppBuild_Response::ArenaDtor(void* object) {
  CContentBuilder_CommitAppBuild_Response* _this = reinterpret_cast< CContentBuilder_CommitAppBuild_Response* >(object);
  (void)_this;
}
void CContentBuilder_CommitAppBuild_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CContentBuilder_CommitAppBuild_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CContentBuilder_CommitAppBuild_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CContentBuilder_CommitAppBuild_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buildid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CContentBuilder_CommitAppBuild_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 buildid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_buildid(&has_bits);
          buildid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CContentBuilder_CommitAppBuild_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CContentBuilder_CommitAppBuild_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 buildid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_buildid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CContentBuilder_CommitAppBuild_Response)
  return target;
}

size_t CContentBuilder_CommitAppBuild_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CContentBuilder_CommitAppBuild_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 buildid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_buildid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CContentBuilder_CommitAppBuild_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CContentBuilder_CommitAppBuild_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CContentBuilder_CommitAppBuild_Response::GetClassData() const { return &_class_data_; }

void CContentBuilder_CommitAppBuild_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CContentBuilder_CommitAppBuild_Response *>(to)->MergeFrom(
      static_cast<const CContentBuilder_CommitAppBuild_Response &>(from));
}


void CContentBuilder_CommitAppBuild_Response::MergeFrom(const CContentBuilder_CommitAppBuild_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CContentBuilder_CommitAppBuild_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_buildid()) {
    _internal_set_buildid(from._internal_buildid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CContentBuilder_CommitAppBuild_Response::CopyFrom(const CContentBuilder_CommitAppBuild_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CContentBuilder_CommitAppBuild_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CContentBuilder_CommitAppBuild_Response::IsInitialized() const {
  return true;
}

void CContentBuilder_CommitAppBuild_Response::InternalSwap(CContentBuilder_CommitAppBuild_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(buildid_, other->buildid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CContentBuilder_CommitAppBuild_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fdepotbuilder_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fdepotbuilder_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fdepotbuilder_2esteamclient_2eproto[11]);
}

// ===================================================================

class CContentBuilder_SignInstallScript_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CContentBuilder_SignInstallScript_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_depotid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_install_script(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CContentBuilder_SignInstallScript_Request::CContentBuilder_SignInstallScript_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CContentBuilder_SignInstallScript_Request)
}
CContentBuilder_SignInstallScript_Request::CContentBuilder_SignInstallScript_Request(const CContentBuilder_SignInstallScript_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  install_script_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    install_script_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_install_script()) {
    install_script_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_install_script(), 
      GetArenaForAllocation());
  }
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&depotid_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(depotid_));
  // @@protoc_insertion_point(copy_constructor:CContentBuilder_SignInstallScript_Request)
}

inline void CContentBuilder_SignInstallScript_Request::SharedCtor() {
install_script_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  install_script_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&appid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&depotid_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(depotid_));
}

CContentBuilder_SignInstallScript_Request::~CContentBuilder_SignInstallScript_Request() {
  // @@protoc_insertion_point(destructor:CContentBuilder_SignInstallScript_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CContentBuilder_SignInstallScript_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  install_script_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CContentBuilder_SignInstallScript_Request::ArenaDtor(void* object) {
  CContentBuilder_SignInstallScript_Request* _this = reinterpret_cast< CContentBuilder_SignInstallScript_Request* >(object);
  (void)_this;
}
void CContentBuilder_SignInstallScript_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CContentBuilder_SignInstallScript_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CContentBuilder_SignInstallScript_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CContentBuilder_SignInstallScript_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    install_script_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&depotid_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(depotid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CContentBuilder_SignInstallScript_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 depotid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_depotid(&has_bits);
          depotid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string install_script = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_install_script();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CContentBuilder_SignInstallScript_Request.install_script");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CContentBuilder_SignInstallScript_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CContentBuilder_SignInstallScript_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional uint32 depotid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_depotid(), target);
  }

  // optional string install_script = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_install_script().data(), static_cast<int>(this->_internal_install_script().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CContentBuilder_SignInstallScript_Request.install_script");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_install_script(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CContentBuilder_SignInstallScript_Request)
  return target;
}

size_t CContentBuilder_SignInstallScript_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CContentBuilder_SignInstallScript_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string install_script = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_install_script());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional uint32 depotid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_depotid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CContentBuilder_SignInstallScript_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CContentBuilder_SignInstallScript_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CContentBuilder_SignInstallScript_Request::GetClassData() const { return &_class_data_; }

void CContentBuilder_SignInstallScript_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CContentBuilder_SignInstallScript_Request *>(to)->MergeFrom(
      static_cast<const CContentBuilder_SignInstallScript_Request &>(from));
}


void CContentBuilder_SignInstallScript_Request::MergeFrom(const CContentBuilder_SignInstallScript_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CContentBuilder_SignInstallScript_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_install_script(from._internal_install_script());
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000004u) {
      depotid_ = from.depotid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CContentBuilder_SignInstallScript_Request::CopyFrom(const CContentBuilder_SignInstallScript_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CContentBuilder_SignInstallScript_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CContentBuilder_SignInstallScript_Request::IsInitialized() const {
  return true;
}

void CContentBuilder_SignInstallScript_Request::InternalSwap(CContentBuilder_SignInstallScript_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &install_script_, lhs_arena,
      &other->install_script_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CContentBuilder_SignInstallScript_Request, depotid_)
      + sizeof(CContentBuilder_SignInstallScript_Request::depotid_)
      - PROTOBUF_FIELD_OFFSET(CContentBuilder_SignInstallScript_Request, appid_)>(
          reinterpret_cast<char*>(&appid_),
          reinterpret_cast<char*>(&other->appid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CContentBuilder_SignInstallScript_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fdepotbuilder_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fdepotbuilder_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fdepotbuilder_2esteamclient_2eproto[12]);
}

// ===================================================================

class CContentBuilder_SignInstallScript_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CContentBuilder_SignInstallScript_Response>()._has_bits_);
  static void set_has_signed_install_script(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CContentBuilder_SignInstallScript_Response::CContentBuilder_SignInstallScript_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CContentBuilder_SignInstallScript_Response)
}
CContentBuilder_SignInstallScript_Response::CContentBuilder_SignInstallScript_Response(const CContentBuilder_SignInstallScript_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  signed_install_script_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    signed_install_script_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_signed_install_script()) {
    signed_install_script_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signed_install_script(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CContentBuilder_SignInstallScript_Response)
}

inline void CContentBuilder_SignInstallScript_Response::SharedCtor() {
signed_install_script_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  signed_install_script_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CContentBuilder_SignInstallScript_Response::~CContentBuilder_SignInstallScript_Response() {
  // @@protoc_insertion_point(destructor:CContentBuilder_SignInstallScript_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CContentBuilder_SignInstallScript_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  signed_install_script_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CContentBuilder_SignInstallScript_Response::ArenaDtor(void* object) {
  CContentBuilder_SignInstallScript_Response* _this = reinterpret_cast< CContentBuilder_SignInstallScript_Response* >(object);
  (void)_this;
}
void CContentBuilder_SignInstallScript_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CContentBuilder_SignInstallScript_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CContentBuilder_SignInstallScript_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CContentBuilder_SignInstallScript_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    signed_install_script_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CContentBuilder_SignInstallScript_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string signed_install_script = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_signed_install_script();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CContentBuilder_SignInstallScript_Response.signed_install_script");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CContentBuilder_SignInstallScript_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CContentBuilder_SignInstallScript_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string signed_install_script = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_signed_install_script().data(), static_cast<int>(this->_internal_signed_install_script().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CContentBuilder_SignInstallScript_Response.signed_install_script");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_signed_install_script(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CContentBuilder_SignInstallScript_Response)
  return target;
}

size_t CContentBuilder_SignInstallScript_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CContentBuilder_SignInstallScript_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string signed_install_script = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_signed_install_script());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CContentBuilder_SignInstallScript_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CContentBuilder_SignInstallScript_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CContentBuilder_SignInstallScript_Response::GetClassData() const { return &_class_data_; }

void CContentBuilder_SignInstallScript_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CContentBuilder_SignInstallScript_Response *>(to)->MergeFrom(
      static_cast<const CContentBuilder_SignInstallScript_Response &>(from));
}


void CContentBuilder_SignInstallScript_Response::MergeFrom(const CContentBuilder_SignInstallScript_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CContentBuilder_SignInstallScript_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_signed_install_script()) {
    _internal_set_signed_install_script(from._internal_signed_install_script());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CContentBuilder_SignInstallScript_Response::CopyFrom(const CContentBuilder_SignInstallScript_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CContentBuilder_SignInstallScript_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CContentBuilder_SignInstallScript_Response::IsInitialized() const {
  return true;
}

void CContentBuilder_SignInstallScript_Response::InternalSwap(CContentBuilder_SignInstallScript_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &signed_install_script_, lhs_arena,
      &other->signed_install_script_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CContentBuilder_SignInstallScript_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fdepotbuilder_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fdepotbuilder_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fdepotbuilder_2esteamclient_2eproto[13]);
}

// ===================================================================

ContentBuilder::~ContentBuilder() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* ContentBuilder::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fdepotbuilder_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5fdepotbuilder_2esteamclient_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* ContentBuilder::GetDescriptor() {
  return descriptor();
}

void ContentBuilder::InitDepotBuild(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CContentBuilder_InitDepotBuild_Request*,
                         ::CContentBuilder_InitDepotBuild_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method InitDepotBuild() not implemented.");
  done->Run();
}

void ContentBuilder::StartDepotUpload(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CContentBuilder_StartDepotUpload_Request*,
                         ::CContentBuilder_StartDepotUpload_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method StartDepotUpload() not implemented.");
  done->Run();
}

void ContentBuilder::GetMissingDepotChunks(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CContentBuilder_GetMissingDepotChunks_Request*,
                         ::CContentBuilder_GetMissingDepotChunks_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetMissingDepotChunks() not implemented.");
  done->Run();
}

void ContentBuilder::FinishDepotUpload(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CContentBuilder_FinishDepotUpload_Request*,
                         ::CContentBuilder_FinishDepotUpload_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method FinishDepotUpload() not implemented.");
  done->Run();
}

void ContentBuilder::CommitAppBuild(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CContentBuilder_CommitAppBuild_Request*,
                         ::CContentBuilder_CommitAppBuild_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CommitAppBuild() not implemented.");
  done->Run();
}

void ContentBuilder::SignInstallScript(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CContentBuilder_SignInstallScript_Request*,
                         ::CContentBuilder_SignInstallScript_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SignInstallScript() not implemented.");
  done->Run();
}

void ContentBuilder::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5fdepotbuilder_2esteamclient_2eproto[0]);
  switch(method->index()) {
    case 0:
      InitDepotBuild(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CContentBuilder_InitDepotBuild_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CContentBuilder_InitDepotBuild_Response*>(
                 response),
             done);
      break;
    case 1:
      StartDepotUpload(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CContentBuilder_StartDepotUpload_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CContentBuilder_StartDepotUpload_Response*>(
                 response),
             done);
      break;
    case 2:
      GetMissingDepotChunks(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CContentBuilder_GetMissingDepotChunks_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CContentBuilder_GetMissingDepotChunks_Response*>(
                 response),
             done);
      break;
    case 3:
      FinishDepotUpload(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CContentBuilder_FinishDepotUpload_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CContentBuilder_FinishDepotUpload_Response*>(
                 response),
             done);
      break;
    case 4:
      CommitAppBuild(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CContentBuilder_CommitAppBuild_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CContentBuilder_CommitAppBuild_Response*>(
                 response),
             done);
      break;
    case 5:
      SignInstallScript(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CContentBuilder_SignInstallScript_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CContentBuilder_SignInstallScript_Response*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& ContentBuilder::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CContentBuilder_InitDepotBuild_Request::default_instance();
    case 1:
      return ::CContentBuilder_StartDepotUpload_Request::default_instance();
    case 2:
      return ::CContentBuilder_GetMissingDepotChunks_Request::default_instance();
    case 3:
      return ::CContentBuilder_FinishDepotUpload_Request::default_instance();
    case 4:
      return ::CContentBuilder_CommitAppBuild_Request::default_instance();
    case 5:
      return ::CContentBuilder_SignInstallScript_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& ContentBuilder::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CContentBuilder_InitDepotBuild_Response::default_instance();
    case 1:
      return ::CContentBuilder_StartDepotUpload_Response::default_instance();
    case 2:
      return ::CContentBuilder_GetMissingDepotChunks_Response::default_instance();
    case 3:
      return ::CContentBuilder_FinishDepotUpload_Response::default_instance();
    case 4:
      return ::CContentBuilder_CommitAppBuild_Response::default_instance();
    case 5:
      return ::CContentBuilder_SignInstallScript_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

ContentBuilder_Stub::ContentBuilder_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
ContentBuilder_Stub::ContentBuilder_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
ContentBuilder_Stub::~ContentBuilder_Stub() {
  if (owns_channel_) delete channel_;
}

void ContentBuilder_Stub::InitDepotBuild(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CContentBuilder_InitDepotBuild_Request* request,
                              ::CContentBuilder_InitDepotBuild_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void ContentBuilder_Stub::StartDepotUpload(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CContentBuilder_StartDepotUpload_Request* request,
                              ::CContentBuilder_StartDepotUpload_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void ContentBuilder_Stub::GetMissingDepotChunks(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CContentBuilder_GetMissingDepotChunks_Request* request,
                              ::CContentBuilder_GetMissingDepotChunks_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void ContentBuilder_Stub::FinishDepotUpload(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CContentBuilder_FinishDepotUpload_Request* request,
                              ::CContentBuilder_FinishDepotUpload_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void ContentBuilder_Stub::CommitAppBuild(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CContentBuilder_CommitAppBuild_Request* request,
                              ::CContentBuilder_CommitAppBuild_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void ContentBuilder_Stub::SignInstallScript(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CContentBuilder_SignInstallScript_Request* request,
                              ::CContentBuilder_SignInstallScript_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CContentBuilder_InitDepotBuild_Request* Arena::CreateMaybeMessage< ::CContentBuilder_InitDepotBuild_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CContentBuilder_InitDepotBuild_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CContentBuilder_InitDepotBuild_Response* Arena::CreateMaybeMessage< ::CContentBuilder_InitDepotBuild_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CContentBuilder_InitDepotBuild_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CContentBuilder_StartDepotUpload_Request* Arena::CreateMaybeMessage< ::CContentBuilder_StartDepotUpload_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CContentBuilder_StartDepotUpload_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CContentBuilder_StartDepotUpload_Response* Arena::CreateMaybeMessage< ::CContentBuilder_StartDepotUpload_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CContentBuilder_StartDepotUpload_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CContentBuilder_GetMissingDepotChunks_Request* Arena::CreateMaybeMessage< ::CContentBuilder_GetMissingDepotChunks_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CContentBuilder_GetMissingDepotChunks_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CContentBuilder_GetMissingDepotChunks_Response_Chunks* Arena::CreateMaybeMessage< ::CContentBuilder_GetMissingDepotChunks_Response_Chunks >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CContentBuilder_GetMissingDepotChunks_Response_Chunks >(arena);
}
template<> PROTOBUF_NOINLINE ::CContentBuilder_GetMissingDepotChunks_Response* Arena::CreateMaybeMessage< ::CContentBuilder_GetMissingDepotChunks_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CContentBuilder_GetMissingDepotChunks_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CContentBuilder_FinishDepotUpload_Request* Arena::CreateMaybeMessage< ::CContentBuilder_FinishDepotUpload_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CContentBuilder_FinishDepotUpload_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CContentBuilder_FinishDepotUpload_Response* Arena::CreateMaybeMessage< ::CContentBuilder_FinishDepotUpload_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CContentBuilder_FinishDepotUpload_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CContentBuilder_CommitAppBuild_Request_Depots* Arena::CreateMaybeMessage< ::CContentBuilder_CommitAppBuild_Request_Depots >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CContentBuilder_CommitAppBuild_Request_Depots >(arena);
}
template<> PROTOBUF_NOINLINE ::CContentBuilder_CommitAppBuild_Request* Arena::CreateMaybeMessage< ::CContentBuilder_CommitAppBuild_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CContentBuilder_CommitAppBuild_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CContentBuilder_CommitAppBuild_Response* Arena::CreateMaybeMessage< ::CContentBuilder_CommitAppBuild_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CContentBuilder_CommitAppBuild_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CContentBuilder_SignInstallScript_Request* Arena::CreateMaybeMessage< ::CContentBuilder_SignInstallScript_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CContentBuilder_SignInstallScript_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CContentBuilder_SignInstallScript_Response* Arena::CreateMaybeMessage< ::CContentBuilder_SignInstallScript_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CContentBuilder_SignInstallScript_Response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
