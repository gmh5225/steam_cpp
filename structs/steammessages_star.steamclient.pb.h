// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_star.steamclient.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_steammessages_5fstar_2esteamclient_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_steammessages_5fstar_2esteamclient_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "steammessages_base.pb.h"
#include "steammessages_unified_base.steamclient.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_5fstar_2esteamclient_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_5fstar_2esteamclient_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fstar_2esteamclient_2eproto;
class CSTAR_GlyphData;
struct CSTAR_GlyphDataDefaultTypeInternal;
extern CSTAR_GlyphDataDefaultTypeInternal _CSTAR_GlyphData_default_instance_;
class CSTAR_GlyphQueryParams;
struct CSTAR_GlyphQueryParamsDefaultTypeInternal;
extern CSTAR_GlyphQueryParamsDefaultTypeInternal _CSTAR_GlyphQueryParams_default_instance_;
class CSTAR_KeyValueQuery;
struct CSTAR_KeyValueQueryDefaultTypeInternal;
extern CSTAR_KeyValueQueryDefaultTypeInternal _CSTAR_KeyValueQuery_default_instance_;
class CSTAR_ReadGlyphData_Request;
struct CSTAR_ReadGlyphData_RequestDefaultTypeInternal;
extern CSTAR_ReadGlyphData_RequestDefaultTypeInternal _CSTAR_ReadGlyphData_Request_default_instance_;
class CSTAR_ReadGlyphData_Response;
struct CSTAR_ReadGlyphData_ResponseDefaultTypeInternal;
extern CSTAR_ReadGlyphData_ResponseDefaultTypeInternal _CSTAR_ReadGlyphData_Response_default_instance_;
class CSTAR_Request;
struct CSTAR_RequestDefaultTypeInternal;
extern CSTAR_RequestDefaultTypeInternal _CSTAR_Request_default_instance_;
class CSTAR_Response;
struct CSTAR_ResponseDefaultTypeInternal;
extern CSTAR_ResponseDefaultTypeInternal _CSTAR_Response_default_instance_;
class CSTAR_WriteGlyphData_Request;
struct CSTAR_WriteGlyphData_RequestDefaultTypeInternal;
extern CSTAR_WriteGlyphData_RequestDefaultTypeInternal _CSTAR_WriteGlyphData_Request_default_instance_;
class CSTAR_WriteGlyphData_Response;
struct CSTAR_WriteGlyphData_ResponseDefaultTypeInternal;
extern CSTAR_WriteGlyphData_ResponseDefaultTypeInternal _CSTAR_WriteGlyphData_Response_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CSTAR_GlyphData* Arena::CreateMaybeMessage<::CSTAR_GlyphData>(Arena*);
template<> ::CSTAR_GlyphQueryParams* Arena::CreateMaybeMessage<::CSTAR_GlyphQueryParams>(Arena*);
template<> ::CSTAR_KeyValueQuery* Arena::CreateMaybeMessage<::CSTAR_KeyValueQuery>(Arena*);
template<> ::CSTAR_ReadGlyphData_Request* Arena::CreateMaybeMessage<::CSTAR_ReadGlyphData_Request>(Arena*);
template<> ::CSTAR_ReadGlyphData_Response* Arena::CreateMaybeMessage<::CSTAR_ReadGlyphData_Response>(Arena*);
template<> ::CSTAR_Request* Arena::CreateMaybeMessage<::CSTAR_Request>(Arena*);
template<> ::CSTAR_Response* Arena::CreateMaybeMessage<::CSTAR_Response>(Arena*);
template<> ::CSTAR_WriteGlyphData_Request* Arena::CreateMaybeMessage<::CSTAR_WriteGlyphData_Request>(Arena*);
template<> ::CSTAR_WriteGlyphData_Response* Arena::CreateMaybeMessage<::CSTAR_WriteGlyphData_Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum E_STAR_GlyphWriteResult : int {
  k_E_STAR_GlyphWriteResult_Success = 0,
  k_E_STAR_GlyphWriteResult_InvalidMessage = 1,
  k_E_STAR_GlyphWriteResult_InvalidJSON = 2,
  k_E_STAR_GlyphWriteResult_SQLError = 3
};
bool E_STAR_GlyphWriteResult_IsValid(int value);
constexpr E_STAR_GlyphWriteResult E_STAR_GlyphWriteResult_MIN = k_E_STAR_GlyphWriteResult_Success;
constexpr E_STAR_GlyphWriteResult E_STAR_GlyphWriteResult_MAX = k_E_STAR_GlyphWriteResult_SQLError;
constexpr int E_STAR_GlyphWriteResult_ARRAYSIZE = E_STAR_GlyphWriteResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* E_STAR_GlyphWriteResult_descriptor();
template<typename T>
inline const std::string& E_STAR_GlyphWriteResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, E_STAR_GlyphWriteResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function E_STAR_GlyphWriteResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    E_STAR_GlyphWriteResult_descriptor(), enum_t_value);
}
inline bool E_STAR_GlyphWriteResult_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, E_STAR_GlyphWriteResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<E_STAR_GlyphWriteResult>(
    E_STAR_GlyphWriteResult_descriptor(), name, value);
}
// ===================================================================

class CSTAR_KeyValueQuery final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSTAR_KeyValueQuery) */ {
 public:
  inline CSTAR_KeyValueQuery() : CSTAR_KeyValueQuery(nullptr) {}
  ~CSTAR_KeyValueQuery() override;
  explicit constexpr CSTAR_KeyValueQuery(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSTAR_KeyValueQuery(const CSTAR_KeyValueQuery& from);
  CSTAR_KeyValueQuery(CSTAR_KeyValueQuery&& from) noexcept
    : CSTAR_KeyValueQuery() {
    *this = ::std::move(from);
  }

  inline CSTAR_KeyValueQuery& operator=(const CSTAR_KeyValueQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSTAR_KeyValueQuery& operator=(CSTAR_KeyValueQuery&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSTAR_KeyValueQuery& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSTAR_KeyValueQuery* internal_default_instance() {
    return reinterpret_cast<const CSTAR_KeyValueQuery*>(
               &_CSTAR_KeyValueQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CSTAR_KeyValueQuery& a, CSTAR_KeyValueQuery& b) {
    a.Swap(&b);
  }
  inline void Swap(CSTAR_KeyValueQuery* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSTAR_KeyValueQuery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSTAR_KeyValueQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSTAR_KeyValueQuery>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSTAR_KeyValueQuery& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CSTAR_KeyValueQuery& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSTAR_KeyValueQuery* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSTAR_KeyValueQuery";
  }
  protected:
  explicit CSTAR_KeyValueQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional string key = 1 [(.description) = "key to search for in JSON path format (SQL subset)"];
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // optional string value = 2 [(.description) = "the value to compare against (the JSON value will be compared for equality as a string)"];
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:CSTAR_KeyValueQuery)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_steammessages_5fstar_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CSTAR_GlyphQueryParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSTAR_GlyphQueryParams) */ {
 public:
  inline CSTAR_GlyphQueryParams() : CSTAR_GlyphQueryParams(nullptr) {}
  ~CSTAR_GlyphQueryParams() override;
  explicit constexpr CSTAR_GlyphQueryParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSTAR_GlyphQueryParams(const CSTAR_GlyphQueryParams& from);
  CSTAR_GlyphQueryParams(CSTAR_GlyphQueryParams&& from) noexcept
    : CSTAR_GlyphQueryParams() {
    *this = ::std::move(from);
  }

  inline CSTAR_GlyphQueryParams& operator=(const CSTAR_GlyphQueryParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSTAR_GlyphQueryParams& operator=(CSTAR_GlyphQueryParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSTAR_GlyphQueryParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSTAR_GlyphQueryParams* internal_default_instance() {
    return reinterpret_cast<const CSTAR_GlyphQueryParams*>(
               &_CSTAR_GlyphQueryParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CSTAR_GlyphQueryParams& a, CSTAR_GlyphQueryParams& b) {
    a.Swap(&b);
  }
  inline void Swap(CSTAR_GlyphQueryParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSTAR_GlyphQueryParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSTAR_GlyphQueryParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSTAR_GlyphQueryParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSTAR_GlyphQueryParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CSTAR_GlyphQueryParams& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSTAR_GlyphQueryParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSTAR_GlyphQueryParams";
  }
  protected:
  explicit CSTAR_GlyphQueryParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueriesFieldNumber = 2,
    kBundleIdFieldNumber = 1,
  };
  // repeated .CSTAR_KeyValueQuery queries = 2 [(.description) = "key value queries"];
  int queries_size() const;
  private:
  int _internal_queries_size() const;
  public:
  void clear_queries();
  ::CSTAR_KeyValueQuery* mutable_queries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSTAR_KeyValueQuery >*
      mutable_queries();
  private:
  const ::CSTAR_KeyValueQuery& _internal_queries(int index) const;
  ::CSTAR_KeyValueQuery* _internal_add_queries();
  public:
  const ::CSTAR_KeyValueQuery& queries(int index) const;
  ::CSTAR_KeyValueQuery* add_queries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSTAR_KeyValueQuery >&
      queries() const;

  // optional uint64 bundle_id = 1 [(.description) = "if provided, Bundle ID is used instead of the other query parameters (much faster SQL query)"];
  bool has_bundle_id() const;
  private:
  bool _internal_has_bundle_id() const;
  public:
  void clear_bundle_id();
  uint64_t bundle_id() const;
  void set_bundle_id(uint64_t value);
  private:
  uint64_t _internal_bundle_id() const;
  void _internal_set_bundle_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CSTAR_GlyphQueryParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSTAR_KeyValueQuery > queries_;
  uint64_t bundle_id_;
  friend struct ::TableStruct_steammessages_5fstar_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CSTAR_ReadGlyphData_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSTAR_ReadGlyphData_Request) */ {
 public:
  inline CSTAR_ReadGlyphData_Request() : CSTAR_ReadGlyphData_Request(nullptr) {}
  ~CSTAR_ReadGlyphData_Request() override;
  explicit constexpr CSTAR_ReadGlyphData_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSTAR_ReadGlyphData_Request(const CSTAR_ReadGlyphData_Request& from);
  CSTAR_ReadGlyphData_Request(CSTAR_ReadGlyphData_Request&& from) noexcept
    : CSTAR_ReadGlyphData_Request() {
    *this = ::std::move(from);
  }

  inline CSTAR_ReadGlyphData_Request& operator=(const CSTAR_ReadGlyphData_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSTAR_ReadGlyphData_Request& operator=(CSTAR_ReadGlyphData_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSTAR_ReadGlyphData_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSTAR_ReadGlyphData_Request* internal_default_instance() {
    return reinterpret_cast<const CSTAR_ReadGlyphData_Request*>(
               &_CSTAR_ReadGlyphData_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CSTAR_ReadGlyphData_Request& a, CSTAR_ReadGlyphData_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CSTAR_ReadGlyphData_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSTAR_ReadGlyphData_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSTAR_ReadGlyphData_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSTAR_ReadGlyphData_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSTAR_ReadGlyphData_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CSTAR_ReadGlyphData_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSTAR_ReadGlyphData_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSTAR_ReadGlyphData_Request";
  }
  protected:
  explicit CSTAR_ReadGlyphData_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLastModifiedTimeLowerLimitFieldNumber = 2,
    kQueryParamsFieldNumber = 1,
  };
  // optional string last_modified_time_lower_limit = 2 [(.description) = "if provided, only return glyphs modified more recently than this timestamp  (RFC 3339 UTC format)"];
  bool has_last_modified_time_lower_limit() const;
  private:
  bool _internal_has_last_modified_time_lower_limit() const;
  public:
  void clear_last_modified_time_lower_limit();
  const std::string& last_modified_time_lower_limit() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_last_modified_time_lower_limit(ArgT0&& arg0, ArgT... args);
  std::string* mutable_last_modified_time_lower_limit();
  PROTOBUF_NODISCARD std::string* release_last_modified_time_lower_limit();
  void set_allocated_last_modified_time_lower_limit(std::string* last_modified_time_lower_limit);
  private:
  const std::string& _internal_last_modified_time_lower_limit() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_modified_time_lower_limit(const std::string& value);
  std::string* _internal_mutable_last_modified_time_lower_limit();
  public:

  // optional .CSTAR_GlyphQueryParams query_params = 1 [(.description) = "parameters to identify the glyphs to read from SQL"];
  bool has_query_params() const;
  private:
  bool _internal_has_query_params() const;
  public:
  void clear_query_params();
  const ::CSTAR_GlyphQueryParams& query_params() const;
  PROTOBUF_NODISCARD ::CSTAR_GlyphQueryParams* release_query_params();
  ::CSTAR_GlyphQueryParams* mutable_query_params();
  void set_allocated_query_params(::CSTAR_GlyphQueryParams* query_params);
  private:
  const ::CSTAR_GlyphQueryParams& _internal_query_params() const;
  ::CSTAR_GlyphQueryParams* _internal_mutable_query_params();
  public:
  void unsafe_arena_set_allocated_query_params(
      ::CSTAR_GlyphQueryParams* query_params);
  ::CSTAR_GlyphQueryParams* unsafe_arena_release_query_params();

  // @@protoc_insertion_point(class_scope:CSTAR_ReadGlyphData_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_modified_time_lower_limit_;
  ::CSTAR_GlyphQueryParams* query_params_;
  friend struct ::TableStruct_steammessages_5fstar_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CSTAR_GlyphData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSTAR_GlyphData) */ {
 public:
  inline CSTAR_GlyphData() : CSTAR_GlyphData(nullptr) {}
  ~CSTAR_GlyphData() override;
  explicit constexpr CSTAR_GlyphData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSTAR_GlyphData(const CSTAR_GlyphData& from);
  CSTAR_GlyphData(CSTAR_GlyphData&& from) noexcept
    : CSTAR_GlyphData() {
    *this = ::std::move(from);
  }

  inline CSTAR_GlyphData& operator=(const CSTAR_GlyphData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSTAR_GlyphData& operator=(CSTAR_GlyphData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSTAR_GlyphData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSTAR_GlyphData* internal_default_instance() {
    return reinterpret_cast<const CSTAR_GlyphData*>(
               &_CSTAR_GlyphData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CSTAR_GlyphData& a, CSTAR_GlyphData& b) {
    a.Swap(&b);
  }
  inline void Swap(CSTAR_GlyphData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSTAR_GlyphData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSTAR_GlyphData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSTAR_GlyphData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSTAR_GlyphData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CSTAR_GlyphData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSTAR_GlyphData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSTAR_GlyphData";
  }
  protected:
  explicit CSTAR_GlyphData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGlyphGuidFieldNumber = 1,
    kGlyphLastModifiedFieldNumber = 2,
    kGlyphJsonDataFieldNumber = 3,
  };
  // optional bytes glyph_guid = 1 [(.description) = "GUID uniquely identifying this glyph"];
  bool has_glyph_guid() const;
  private:
  bool _internal_has_glyph_guid() const;
  public:
  void clear_glyph_guid();
  const std::string& glyph_guid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_glyph_guid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_glyph_guid();
  PROTOBUF_NODISCARD std::string* release_glyph_guid();
  void set_allocated_glyph_guid(std::string* glyph_guid);
  private:
  const std::string& _internal_glyph_guid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_glyph_guid(const std::string& value);
  std::string* _internal_mutable_glyph_guid();
  public:

  // optional string glyph_last_modified = 2 [(.description) = "timestamp of when this glyph was last modified (RFC 3339 UTC format)"];
  bool has_glyph_last_modified() const;
  private:
  bool _internal_has_glyph_last_modified() const;
  public:
  void clear_glyph_last_modified();
  const std::string& glyph_last_modified() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_glyph_last_modified(ArgT0&& arg0, ArgT... args);
  std::string* mutable_glyph_last_modified();
  PROTOBUF_NODISCARD std::string* release_glyph_last_modified();
  void set_allocated_glyph_last_modified(std::string* glyph_last_modified);
  private:
  const std::string& _internal_glyph_last_modified() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_glyph_last_modified(const std::string& value);
  std::string* _internal_mutable_glyph_last_modified();
  public:

  // optional string glyph_json_data = 3 [(.description) = "JSON encoded glyph data"];
  bool has_glyph_json_data() const;
  private:
  bool _internal_has_glyph_json_data() const;
  public:
  void clear_glyph_json_data();
  const std::string& glyph_json_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_glyph_json_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_glyph_json_data();
  PROTOBUF_NODISCARD std::string* release_glyph_json_data();
  void set_allocated_glyph_json_data(std::string* glyph_json_data);
  private:
  const std::string& _internal_glyph_json_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_glyph_json_data(const std::string& value);
  std::string* _internal_mutable_glyph_json_data();
  public:

  // @@protoc_insertion_point(class_scope:CSTAR_GlyphData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr glyph_guid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr glyph_last_modified_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr glyph_json_data_;
  friend struct ::TableStruct_steammessages_5fstar_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CSTAR_WriteGlyphData_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSTAR_WriteGlyphData_Request) */ {
 public:
  inline CSTAR_WriteGlyphData_Request() : CSTAR_WriteGlyphData_Request(nullptr) {}
  ~CSTAR_WriteGlyphData_Request() override;
  explicit constexpr CSTAR_WriteGlyphData_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSTAR_WriteGlyphData_Request(const CSTAR_WriteGlyphData_Request& from);
  CSTAR_WriteGlyphData_Request(CSTAR_WriteGlyphData_Request&& from) noexcept
    : CSTAR_WriteGlyphData_Request() {
    *this = ::std::move(from);
  }

  inline CSTAR_WriteGlyphData_Request& operator=(const CSTAR_WriteGlyphData_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSTAR_WriteGlyphData_Request& operator=(CSTAR_WriteGlyphData_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSTAR_WriteGlyphData_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSTAR_WriteGlyphData_Request* internal_default_instance() {
    return reinterpret_cast<const CSTAR_WriteGlyphData_Request*>(
               &_CSTAR_WriteGlyphData_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CSTAR_WriteGlyphData_Request& a, CSTAR_WriteGlyphData_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CSTAR_WriteGlyphData_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSTAR_WriteGlyphData_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSTAR_WriteGlyphData_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSTAR_WriteGlyphData_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSTAR_WriteGlyphData_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CSTAR_WriteGlyphData_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSTAR_WriteGlyphData_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSTAR_WriteGlyphData_Request";
  }
  protected:
  explicit CSTAR_WriteGlyphData_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGlyphDataFieldNumber = 2,
    kBundleIdFieldNumber = 1,
  };
  // repeated .CSTAR_GlyphData glyph_data = 2 [(.description) = "one or more items of glyph data to write"];
  int glyph_data_size() const;
  private:
  int _internal_glyph_data_size() const;
  public:
  void clear_glyph_data();
  ::CSTAR_GlyphData* mutable_glyph_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSTAR_GlyphData >*
      mutable_glyph_data();
  private:
  const ::CSTAR_GlyphData& _internal_glyph_data(int index) const;
  ::CSTAR_GlyphData* _internal_add_glyph_data();
  public:
  const ::CSTAR_GlyphData& glyph_data(int index) const;
  ::CSTAR_GlyphData* add_glyph_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSTAR_GlyphData >&
      glyph_data() const;

  // optional uint64 bundle_id = 1 [(.description) = "the Bundle ID of the glyphs to be written"];
  bool has_bundle_id() const;
  private:
  bool _internal_has_bundle_id() const;
  public:
  void clear_bundle_id();
  uint64_t bundle_id() const;
  void set_bundle_id(uint64_t value);
  private:
  uint64_t _internal_bundle_id() const;
  void _internal_set_bundle_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CSTAR_WriteGlyphData_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSTAR_GlyphData > glyph_data_;
  uint64_t bundle_id_;
  friend struct ::TableStruct_steammessages_5fstar_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CSTAR_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSTAR_Request) */ {
 public:
  inline CSTAR_Request() : CSTAR_Request(nullptr) {}
  ~CSTAR_Request() override;
  explicit constexpr CSTAR_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSTAR_Request(const CSTAR_Request& from);
  CSTAR_Request(CSTAR_Request&& from) noexcept
    : CSTAR_Request() {
    *this = ::std::move(from);
  }

  inline CSTAR_Request& operator=(const CSTAR_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSTAR_Request& operator=(CSTAR_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSTAR_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSTAR_Request* internal_default_instance() {
    return reinterpret_cast<const CSTAR_Request*>(
               &_CSTAR_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CSTAR_Request& a, CSTAR_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CSTAR_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSTAR_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSTAR_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSTAR_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSTAR_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CSTAR_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSTAR_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSTAR_Request";
  }
  protected:
  explicit CSTAR_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReadGlyphDataFieldNumber = 1,
    kWriteGlyphDataFieldNumber = 2,
  };
  // optional .CSTAR_ReadGlyphData_Request read_glyph_data = 1;
  bool has_read_glyph_data() const;
  private:
  bool _internal_has_read_glyph_data() const;
  public:
  void clear_read_glyph_data();
  const ::CSTAR_ReadGlyphData_Request& read_glyph_data() const;
  PROTOBUF_NODISCARD ::CSTAR_ReadGlyphData_Request* release_read_glyph_data();
  ::CSTAR_ReadGlyphData_Request* mutable_read_glyph_data();
  void set_allocated_read_glyph_data(::CSTAR_ReadGlyphData_Request* read_glyph_data);
  private:
  const ::CSTAR_ReadGlyphData_Request& _internal_read_glyph_data() const;
  ::CSTAR_ReadGlyphData_Request* _internal_mutable_read_glyph_data();
  public:
  void unsafe_arena_set_allocated_read_glyph_data(
      ::CSTAR_ReadGlyphData_Request* read_glyph_data);
  ::CSTAR_ReadGlyphData_Request* unsafe_arena_release_read_glyph_data();

  // optional .CSTAR_WriteGlyphData_Request write_glyph_data = 2;
  bool has_write_glyph_data() const;
  private:
  bool _internal_has_write_glyph_data() const;
  public:
  void clear_write_glyph_data();
  const ::CSTAR_WriteGlyphData_Request& write_glyph_data() const;
  PROTOBUF_NODISCARD ::CSTAR_WriteGlyphData_Request* release_write_glyph_data();
  ::CSTAR_WriteGlyphData_Request* mutable_write_glyph_data();
  void set_allocated_write_glyph_data(::CSTAR_WriteGlyphData_Request* write_glyph_data);
  private:
  const ::CSTAR_WriteGlyphData_Request& _internal_write_glyph_data() const;
  ::CSTAR_WriteGlyphData_Request* _internal_mutable_write_glyph_data();
  public:
  void unsafe_arena_set_allocated_write_glyph_data(
      ::CSTAR_WriteGlyphData_Request* write_glyph_data);
  ::CSTAR_WriteGlyphData_Request* unsafe_arena_release_write_glyph_data();

  // @@protoc_insertion_point(class_scope:CSTAR_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CSTAR_ReadGlyphData_Request* read_glyph_data_;
  ::CSTAR_WriteGlyphData_Request* write_glyph_data_;
  friend struct ::TableStruct_steammessages_5fstar_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CSTAR_ReadGlyphData_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSTAR_ReadGlyphData_Response) */ {
 public:
  inline CSTAR_ReadGlyphData_Response() : CSTAR_ReadGlyphData_Response(nullptr) {}
  ~CSTAR_ReadGlyphData_Response() override;
  explicit constexpr CSTAR_ReadGlyphData_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSTAR_ReadGlyphData_Response(const CSTAR_ReadGlyphData_Response& from);
  CSTAR_ReadGlyphData_Response(CSTAR_ReadGlyphData_Response&& from) noexcept
    : CSTAR_ReadGlyphData_Response() {
    *this = ::std::move(from);
  }

  inline CSTAR_ReadGlyphData_Response& operator=(const CSTAR_ReadGlyphData_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSTAR_ReadGlyphData_Response& operator=(CSTAR_ReadGlyphData_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSTAR_ReadGlyphData_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSTAR_ReadGlyphData_Response* internal_default_instance() {
    return reinterpret_cast<const CSTAR_ReadGlyphData_Response*>(
               &_CSTAR_ReadGlyphData_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CSTAR_ReadGlyphData_Response& a, CSTAR_ReadGlyphData_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CSTAR_ReadGlyphData_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSTAR_ReadGlyphData_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSTAR_ReadGlyphData_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSTAR_ReadGlyphData_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSTAR_ReadGlyphData_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CSTAR_ReadGlyphData_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSTAR_ReadGlyphData_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSTAR_ReadGlyphData_Response";
  }
  protected:
  explicit CSTAR_ReadGlyphData_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGlyphDataFieldNumber = 2,
    kBundleIdFieldNumber = 1,
  };
  // repeated .CSTAR_GlyphData glyph_data = 2 [(.description) = "zero or more items of returned glyph data"];
  int glyph_data_size() const;
  private:
  int _internal_glyph_data_size() const;
  public:
  void clear_glyph_data();
  ::CSTAR_GlyphData* mutable_glyph_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSTAR_GlyphData >*
      mutable_glyph_data();
  private:
  const ::CSTAR_GlyphData& _internal_glyph_data(int index) const;
  ::CSTAR_GlyphData* _internal_add_glyph_data();
  public:
  const ::CSTAR_GlyphData& glyph_data(int index) const;
  ::CSTAR_GlyphData* add_glyph_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSTAR_GlyphData >&
      glyph_data() const;

  // optional uint64 bundle_id = 1 [(.description) = "the Bundle ID of the returned glyphs; the client should send this back to optimize subsequent queries"];
  bool has_bundle_id() const;
  private:
  bool _internal_has_bundle_id() const;
  public:
  void clear_bundle_id();
  uint64_t bundle_id() const;
  void set_bundle_id(uint64_t value);
  private:
  uint64_t _internal_bundle_id() const;
  void _internal_set_bundle_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CSTAR_ReadGlyphData_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSTAR_GlyphData > glyph_data_;
  uint64_t bundle_id_;
  friend struct ::TableStruct_steammessages_5fstar_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CSTAR_WriteGlyphData_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSTAR_WriteGlyphData_Response) */ {
 public:
  inline CSTAR_WriteGlyphData_Response() : CSTAR_WriteGlyphData_Response(nullptr) {}
  ~CSTAR_WriteGlyphData_Response() override;
  explicit constexpr CSTAR_WriteGlyphData_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSTAR_WriteGlyphData_Response(const CSTAR_WriteGlyphData_Response& from);
  CSTAR_WriteGlyphData_Response(CSTAR_WriteGlyphData_Response&& from) noexcept
    : CSTAR_WriteGlyphData_Response() {
    *this = ::std::move(from);
  }

  inline CSTAR_WriteGlyphData_Response& operator=(const CSTAR_WriteGlyphData_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSTAR_WriteGlyphData_Response& operator=(CSTAR_WriteGlyphData_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSTAR_WriteGlyphData_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSTAR_WriteGlyphData_Response* internal_default_instance() {
    return reinterpret_cast<const CSTAR_WriteGlyphData_Response*>(
               &_CSTAR_WriteGlyphData_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CSTAR_WriteGlyphData_Response& a, CSTAR_WriteGlyphData_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CSTAR_WriteGlyphData_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSTAR_WriteGlyphData_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSTAR_WriteGlyphData_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSTAR_WriteGlyphData_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSTAR_WriteGlyphData_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CSTAR_WriteGlyphData_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSTAR_WriteGlyphData_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSTAR_WriteGlyphData_Response";
  }
  protected:
  explicit CSTAR_WriteGlyphData_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // repeated .E_STAR_GlyphWriteResult result = 1 [(.description) = "write result for each item of glyph data"];
  int result_size() const;
  private:
  int _internal_result_size() const;
  public:
  void clear_result();
  private:
  ::E_STAR_GlyphWriteResult _internal_result(int index) const;
  void _internal_add_result(::E_STAR_GlyphWriteResult value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_result();
  public:
  ::E_STAR_GlyphWriteResult result(int index) const;
  void set_result(int index, ::E_STAR_GlyphWriteResult value);
  void add_result(::E_STAR_GlyphWriteResult value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& result() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_result();

  // @@protoc_insertion_point(class_scope:CSTAR_WriteGlyphData_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fstar_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CSTAR_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSTAR_Response) */ {
 public:
  inline CSTAR_Response() : CSTAR_Response(nullptr) {}
  ~CSTAR_Response() override;
  explicit constexpr CSTAR_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSTAR_Response(const CSTAR_Response& from);
  CSTAR_Response(CSTAR_Response&& from) noexcept
    : CSTAR_Response() {
    *this = ::std::move(from);
  }

  inline CSTAR_Response& operator=(const CSTAR_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSTAR_Response& operator=(CSTAR_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSTAR_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSTAR_Response* internal_default_instance() {
    return reinterpret_cast<const CSTAR_Response*>(
               &_CSTAR_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CSTAR_Response& a, CSTAR_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CSTAR_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSTAR_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSTAR_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSTAR_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSTAR_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CSTAR_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSTAR_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSTAR_Response";
  }
  protected:
  explicit CSTAR_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReadGlyphDataFieldNumber = 1,
    kWriteGlyphDataFieldNumber = 2,
  };
  // optional .CSTAR_ReadGlyphData_Response read_glyph_data = 1;
  bool has_read_glyph_data() const;
  private:
  bool _internal_has_read_glyph_data() const;
  public:
  void clear_read_glyph_data();
  const ::CSTAR_ReadGlyphData_Response& read_glyph_data() const;
  PROTOBUF_NODISCARD ::CSTAR_ReadGlyphData_Response* release_read_glyph_data();
  ::CSTAR_ReadGlyphData_Response* mutable_read_glyph_data();
  void set_allocated_read_glyph_data(::CSTAR_ReadGlyphData_Response* read_glyph_data);
  private:
  const ::CSTAR_ReadGlyphData_Response& _internal_read_glyph_data() const;
  ::CSTAR_ReadGlyphData_Response* _internal_mutable_read_glyph_data();
  public:
  void unsafe_arena_set_allocated_read_glyph_data(
      ::CSTAR_ReadGlyphData_Response* read_glyph_data);
  ::CSTAR_ReadGlyphData_Response* unsafe_arena_release_read_glyph_data();

  // optional .CSTAR_WriteGlyphData_Response write_glyph_data = 2;
  bool has_write_glyph_data() const;
  private:
  bool _internal_has_write_glyph_data() const;
  public:
  void clear_write_glyph_data();
  const ::CSTAR_WriteGlyphData_Response& write_glyph_data() const;
  PROTOBUF_NODISCARD ::CSTAR_WriteGlyphData_Response* release_write_glyph_data();
  ::CSTAR_WriteGlyphData_Response* mutable_write_glyph_data();
  void set_allocated_write_glyph_data(::CSTAR_WriteGlyphData_Response* write_glyph_data);
  private:
  const ::CSTAR_WriteGlyphData_Response& _internal_write_glyph_data() const;
  ::CSTAR_WriteGlyphData_Response* _internal_mutable_write_glyph_data();
  public:
  void unsafe_arena_set_allocated_write_glyph_data(
      ::CSTAR_WriteGlyphData_Response* write_glyph_data);
  ::CSTAR_WriteGlyphData_Response* unsafe_arena_release_write_glyph_data();

  // @@protoc_insertion_point(class_scope:CSTAR_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CSTAR_ReadGlyphData_Response* read_glyph_data_;
  ::CSTAR_WriteGlyphData_Response* write_glyph_data_;
  friend struct ::TableStruct_steammessages_5fstar_2esteamclient_2eproto;
};
// ===================================================================

class STAR_Stub;

class STAR : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline STAR() {};
 public:
  virtual ~STAR();

  typedef STAR_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void ProcessMessage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CSTAR_Request* request,
                       ::CSTAR_Response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(STAR);
};

class STAR_Stub : public STAR {
 public:
  STAR_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  STAR_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~STAR_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements STAR ------------------------------------------

  void ProcessMessage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CSTAR_Request* request,
                       ::CSTAR_Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(STAR_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CSTAR_KeyValueQuery

// optional string key = 1 [(.description) = "key to search for in JSON path format (SQL subset)"];
inline bool CSTAR_KeyValueQuery::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSTAR_KeyValueQuery::has_key() const {
  return _internal_has_key();
}
inline void CSTAR_KeyValueQuery::clear_key() {
  key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSTAR_KeyValueQuery::key() const {
  // @@protoc_insertion_point(field_get:CSTAR_KeyValueQuery.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSTAR_KeyValueQuery::set_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CSTAR_KeyValueQuery.key)
}
inline std::string* CSTAR_KeyValueQuery::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:CSTAR_KeyValueQuery.key)
  return _s;
}
inline const std::string& CSTAR_KeyValueQuery::_internal_key() const {
  return key_.Get();
}
inline void CSTAR_KeyValueQuery::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CSTAR_KeyValueQuery::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CSTAR_KeyValueQuery::release_key() {
  // @@protoc_insertion_point(field_release:CSTAR_KeyValueQuery.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CSTAR_KeyValueQuery::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CSTAR_KeyValueQuery.key)
}

// optional string value = 2 [(.description) = "the value to compare against (the JSON value will be compared for equality as a string)"];
inline bool CSTAR_KeyValueQuery::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSTAR_KeyValueQuery::has_value() const {
  return _internal_has_value();
}
inline void CSTAR_KeyValueQuery::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CSTAR_KeyValueQuery::value() const {
  // @@protoc_insertion_point(field_get:CSTAR_KeyValueQuery.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSTAR_KeyValueQuery::set_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CSTAR_KeyValueQuery.value)
}
inline std::string* CSTAR_KeyValueQuery::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:CSTAR_KeyValueQuery.value)
  return _s;
}
inline const std::string& CSTAR_KeyValueQuery::_internal_value() const {
  return value_.Get();
}
inline void CSTAR_KeyValueQuery::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CSTAR_KeyValueQuery::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CSTAR_KeyValueQuery::release_value() {
  // @@protoc_insertion_point(field_release:CSTAR_KeyValueQuery.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CSTAR_KeyValueQuery::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CSTAR_KeyValueQuery.value)
}

// -------------------------------------------------------------------

// CSTAR_GlyphQueryParams

// optional uint64 bundle_id = 1 [(.description) = "if provided, Bundle ID is used instead of the other query parameters (much faster SQL query)"];
inline bool CSTAR_GlyphQueryParams::_internal_has_bundle_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSTAR_GlyphQueryParams::has_bundle_id() const {
  return _internal_has_bundle_id();
}
inline void CSTAR_GlyphQueryParams::clear_bundle_id() {
  bundle_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CSTAR_GlyphQueryParams::_internal_bundle_id() const {
  return bundle_id_;
}
inline uint64_t CSTAR_GlyphQueryParams::bundle_id() const {
  // @@protoc_insertion_point(field_get:CSTAR_GlyphQueryParams.bundle_id)
  return _internal_bundle_id();
}
inline void CSTAR_GlyphQueryParams::_internal_set_bundle_id(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  bundle_id_ = value;
}
inline void CSTAR_GlyphQueryParams::set_bundle_id(uint64_t value) {
  _internal_set_bundle_id(value);
  // @@protoc_insertion_point(field_set:CSTAR_GlyphQueryParams.bundle_id)
}

// repeated .CSTAR_KeyValueQuery queries = 2 [(.description) = "key value queries"];
inline int CSTAR_GlyphQueryParams::_internal_queries_size() const {
  return queries_.size();
}
inline int CSTAR_GlyphQueryParams::queries_size() const {
  return _internal_queries_size();
}
inline void CSTAR_GlyphQueryParams::clear_queries() {
  queries_.Clear();
}
inline ::CSTAR_KeyValueQuery* CSTAR_GlyphQueryParams::mutable_queries(int index) {
  // @@protoc_insertion_point(field_mutable:CSTAR_GlyphQueryParams.queries)
  return queries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSTAR_KeyValueQuery >*
CSTAR_GlyphQueryParams::mutable_queries() {
  // @@protoc_insertion_point(field_mutable_list:CSTAR_GlyphQueryParams.queries)
  return &queries_;
}
inline const ::CSTAR_KeyValueQuery& CSTAR_GlyphQueryParams::_internal_queries(int index) const {
  return queries_.Get(index);
}
inline const ::CSTAR_KeyValueQuery& CSTAR_GlyphQueryParams::queries(int index) const {
  // @@protoc_insertion_point(field_get:CSTAR_GlyphQueryParams.queries)
  return _internal_queries(index);
}
inline ::CSTAR_KeyValueQuery* CSTAR_GlyphQueryParams::_internal_add_queries() {
  return queries_.Add();
}
inline ::CSTAR_KeyValueQuery* CSTAR_GlyphQueryParams::add_queries() {
  ::CSTAR_KeyValueQuery* _add = _internal_add_queries();
  // @@protoc_insertion_point(field_add:CSTAR_GlyphQueryParams.queries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSTAR_KeyValueQuery >&
CSTAR_GlyphQueryParams::queries() const {
  // @@protoc_insertion_point(field_list:CSTAR_GlyphQueryParams.queries)
  return queries_;
}

// -------------------------------------------------------------------

// CSTAR_ReadGlyphData_Request

// optional .CSTAR_GlyphQueryParams query_params = 1 [(.description) = "parameters to identify the glyphs to read from SQL"];
inline bool CSTAR_ReadGlyphData_Request::_internal_has_query_params() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || query_params_ != nullptr);
  return value;
}
inline bool CSTAR_ReadGlyphData_Request::has_query_params() const {
  return _internal_has_query_params();
}
inline void CSTAR_ReadGlyphData_Request::clear_query_params() {
  if (query_params_ != nullptr) query_params_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::CSTAR_GlyphQueryParams& CSTAR_ReadGlyphData_Request::_internal_query_params() const {
  const ::CSTAR_GlyphQueryParams* p = query_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::CSTAR_GlyphQueryParams&>(
      ::_CSTAR_GlyphQueryParams_default_instance_);
}
inline const ::CSTAR_GlyphQueryParams& CSTAR_ReadGlyphData_Request::query_params() const {
  // @@protoc_insertion_point(field_get:CSTAR_ReadGlyphData_Request.query_params)
  return _internal_query_params();
}
inline void CSTAR_ReadGlyphData_Request::unsafe_arena_set_allocated_query_params(
    ::CSTAR_GlyphQueryParams* query_params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(query_params_);
  }
  query_params_ = query_params;
  if (query_params) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CSTAR_ReadGlyphData_Request.query_params)
}
inline ::CSTAR_GlyphQueryParams* CSTAR_ReadGlyphData_Request::release_query_params() {
  _has_bits_[0] &= ~0x00000002u;
  ::CSTAR_GlyphQueryParams* temp = query_params_;
  query_params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CSTAR_GlyphQueryParams* CSTAR_ReadGlyphData_Request::unsafe_arena_release_query_params() {
  // @@protoc_insertion_point(field_release:CSTAR_ReadGlyphData_Request.query_params)
  _has_bits_[0] &= ~0x00000002u;
  ::CSTAR_GlyphQueryParams* temp = query_params_;
  query_params_ = nullptr;
  return temp;
}
inline ::CSTAR_GlyphQueryParams* CSTAR_ReadGlyphData_Request::_internal_mutable_query_params() {
  _has_bits_[0] |= 0x00000002u;
  if (query_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::CSTAR_GlyphQueryParams>(GetArenaForAllocation());
    query_params_ = p;
  }
  return query_params_;
}
inline ::CSTAR_GlyphQueryParams* CSTAR_ReadGlyphData_Request::mutable_query_params() {
  ::CSTAR_GlyphQueryParams* _msg = _internal_mutable_query_params();
  // @@protoc_insertion_point(field_mutable:CSTAR_ReadGlyphData_Request.query_params)
  return _msg;
}
inline void CSTAR_ReadGlyphData_Request::set_allocated_query_params(::CSTAR_GlyphQueryParams* query_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete query_params_;
  }
  if (query_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CSTAR_GlyphQueryParams>::GetOwningArena(query_params);
    if (message_arena != submessage_arena) {
      query_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, query_params, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  query_params_ = query_params;
  // @@protoc_insertion_point(field_set_allocated:CSTAR_ReadGlyphData_Request.query_params)
}

// optional string last_modified_time_lower_limit = 2 [(.description) = "if provided, only return glyphs modified more recently than this timestamp  (RFC 3339 UTC format)"];
inline bool CSTAR_ReadGlyphData_Request::_internal_has_last_modified_time_lower_limit() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSTAR_ReadGlyphData_Request::has_last_modified_time_lower_limit() const {
  return _internal_has_last_modified_time_lower_limit();
}
inline void CSTAR_ReadGlyphData_Request::clear_last_modified_time_lower_limit() {
  last_modified_time_lower_limit_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSTAR_ReadGlyphData_Request::last_modified_time_lower_limit() const {
  // @@protoc_insertion_point(field_get:CSTAR_ReadGlyphData_Request.last_modified_time_lower_limit)
  return _internal_last_modified_time_lower_limit();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSTAR_ReadGlyphData_Request::set_last_modified_time_lower_limit(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 last_modified_time_lower_limit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CSTAR_ReadGlyphData_Request.last_modified_time_lower_limit)
}
inline std::string* CSTAR_ReadGlyphData_Request::mutable_last_modified_time_lower_limit() {
  std::string* _s = _internal_mutable_last_modified_time_lower_limit();
  // @@protoc_insertion_point(field_mutable:CSTAR_ReadGlyphData_Request.last_modified_time_lower_limit)
  return _s;
}
inline const std::string& CSTAR_ReadGlyphData_Request::_internal_last_modified_time_lower_limit() const {
  return last_modified_time_lower_limit_.Get();
}
inline void CSTAR_ReadGlyphData_Request::_internal_set_last_modified_time_lower_limit(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  last_modified_time_lower_limit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CSTAR_ReadGlyphData_Request::_internal_mutable_last_modified_time_lower_limit() {
  _has_bits_[0] |= 0x00000001u;
  return last_modified_time_lower_limit_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CSTAR_ReadGlyphData_Request::release_last_modified_time_lower_limit() {
  // @@protoc_insertion_point(field_release:CSTAR_ReadGlyphData_Request.last_modified_time_lower_limit)
  if (!_internal_has_last_modified_time_lower_limit()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = last_modified_time_lower_limit_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (last_modified_time_lower_limit_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    last_modified_time_lower_limit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CSTAR_ReadGlyphData_Request::set_allocated_last_modified_time_lower_limit(std::string* last_modified_time_lower_limit) {
  if (last_modified_time_lower_limit != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  last_modified_time_lower_limit_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_modified_time_lower_limit,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (last_modified_time_lower_limit_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    last_modified_time_lower_limit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CSTAR_ReadGlyphData_Request.last_modified_time_lower_limit)
}

// -------------------------------------------------------------------

// CSTAR_GlyphData

// optional bytes glyph_guid = 1 [(.description) = "GUID uniquely identifying this glyph"];
inline bool CSTAR_GlyphData::_internal_has_glyph_guid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSTAR_GlyphData::has_glyph_guid() const {
  return _internal_has_glyph_guid();
}
inline void CSTAR_GlyphData::clear_glyph_guid() {
  glyph_guid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSTAR_GlyphData::glyph_guid() const {
  // @@protoc_insertion_point(field_get:CSTAR_GlyphData.glyph_guid)
  return _internal_glyph_guid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSTAR_GlyphData::set_glyph_guid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 glyph_guid_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CSTAR_GlyphData.glyph_guid)
}
inline std::string* CSTAR_GlyphData::mutable_glyph_guid() {
  std::string* _s = _internal_mutable_glyph_guid();
  // @@protoc_insertion_point(field_mutable:CSTAR_GlyphData.glyph_guid)
  return _s;
}
inline const std::string& CSTAR_GlyphData::_internal_glyph_guid() const {
  return glyph_guid_.Get();
}
inline void CSTAR_GlyphData::_internal_set_glyph_guid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  glyph_guid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CSTAR_GlyphData::_internal_mutable_glyph_guid() {
  _has_bits_[0] |= 0x00000001u;
  return glyph_guid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CSTAR_GlyphData::release_glyph_guid() {
  // @@protoc_insertion_point(field_release:CSTAR_GlyphData.glyph_guid)
  if (!_internal_has_glyph_guid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = glyph_guid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (glyph_guid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    glyph_guid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CSTAR_GlyphData::set_allocated_glyph_guid(std::string* glyph_guid) {
  if (glyph_guid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  glyph_guid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), glyph_guid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (glyph_guid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    glyph_guid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CSTAR_GlyphData.glyph_guid)
}

// optional string glyph_last_modified = 2 [(.description) = "timestamp of when this glyph was last modified (RFC 3339 UTC format)"];
inline bool CSTAR_GlyphData::_internal_has_glyph_last_modified() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSTAR_GlyphData::has_glyph_last_modified() const {
  return _internal_has_glyph_last_modified();
}
inline void CSTAR_GlyphData::clear_glyph_last_modified() {
  glyph_last_modified_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CSTAR_GlyphData::glyph_last_modified() const {
  // @@protoc_insertion_point(field_get:CSTAR_GlyphData.glyph_last_modified)
  return _internal_glyph_last_modified();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSTAR_GlyphData::set_glyph_last_modified(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 glyph_last_modified_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CSTAR_GlyphData.glyph_last_modified)
}
inline std::string* CSTAR_GlyphData::mutable_glyph_last_modified() {
  std::string* _s = _internal_mutable_glyph_last_modified();
  // @@protoc_insertion_point(field_mutable:CSTAR_GlyphData.glyph_last_modified)
  return _s;
}
inline const std::string& CSTAR_GlyphData::_internal_glyph_last_modified() const {
  return glyph_last_modified_.Get();
}
inline void CSTAR_GlyphData::_internal_set_glyph_last_modified(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  glyph_last_modified_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CSTAR_GlyphData::_internal_mutable_glyph_last_modified() {
  _has_bits_[0] |= 0x00000002u;
  return glyph_last_modified_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CSTAR_GlyphData::release_glyph_last_modified() {
  // @@protoc_insertion_point(field_release:CSTAR_GlyphData.glyph_last_modified)
  if (!_internal_has_glyph_last_modified()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = glyph_last_modified_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (glyph_last_modified_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    glyph_last_modified_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CSTAR_GlyphData::set_allocated_glyph_last_modified(std::string* glyph_last_modified) {
  if (glyph_last_modified != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  glyph_last_modified_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), glyph_last_modified,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (glyph_last_modified_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    glyph_last_modified_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CSTAR_GlyphData.glyph_last_modified)
}

// optional string glyph_json_data = 3 [(.description) = "JSON encoded glyph data"];
inline bool CSTAR_GlyphData::_internal_has_glyph_json_data() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSTAR_GlyphData::has_glyph_json_data() const {
  return _internal_has_glyph_json_data();
}
inline void CSTAR_GlyphData::clear_glyph_json_data() {
  glyph_json_data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CSTAR_GlyphData::glyph_json_data() const {
  // @@protoc_insertion_point(field_get:CSTAR_GlyphData.glyph_json_data)
  return _internal_glyph_json_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSTAR_GlyphData::set_glyph_json_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 glyph_json_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CSTAR_GlyphData.glyph_json_data)
}
inline std::string* CSTAR_GlyphData::mutable_glyph_json_data() {
  std::string* _s = _internal_mutable_glyph_json_data();
  // @@protoc_insertion_point(field_mutable:CSTAR_GlyphData.glyph_json_data)
  return _s;
}
inline const std::string& CSTAR_GlyphData::_internal_glyph_json_data() const {
  return glyph_json_data_.Get();
}
inline void CSTAR_GlyphData::_internal_set_glyph_json_data(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  glyph_json_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CSTAR_GlyphData::_internal_mutable_glyph_json_data() {
  _has_bits_[0] |= 0x00000004u;
  return glyph_json_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CSTAR_GlyphData::release_glyph_json_data() {
  // @@protoc_insertion_point(field_release:CSTAR_GlyphData.glyph_json_data)
  if (!_internal_has_glyph_json_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = glyph_json_data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (glyph_json_data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    glyph_json_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CSTAR_GlyphData::set_allocated_glyph_json_data(std::string* glyph_json_data) {
  if (glyph_json_data != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  glyph_json_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), glyph_json_data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (glyph_json_data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    glyph_json_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CSTAR_GlyphData.glyph_json_data)
}

// -------------------------------------------------------------------

// CSTAR_WriteGlyphData_Request

// optional uint64 bundle_id = 1 [(.description) = "the Bundle ID of the glyphs to be written"];
inline bool CSTAR_WriteGlyphData_Request::_internal_has_bundle_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSTAR_WriteGlyphData_Request::has_bundle_id() const {
  return _internal_has_bundle_id();
}
inline void CSTAR_WriteGlyphData_Request::clear_bundle_id() {
  bundle_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CSTAR_WriteGlyphData_Request::_internal_bundle_id() const {
  return bundle_id_;
}
inline uint64_t CSTAR_WriteGlyphData_Request::bundle_id() const {
  // @@protoc_insertion_point(field_get:CSTAR_WriteGlyphData_Request.bundle_id)
  return _internal_bundle_id();
}
inline void CSTAR_WriteGlyphData_Request::_internal_set_bundle_id(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  bundle_id_ = value;
}
inline void CSTAR_WriteGlyphData_Request::set_bundle_id(uint64_t value) {
  _internal_set_bundle_id(value);
  // @@protoc_insertion_point(field_set:CSTAR_WriteGlyphData_Request.bundle_id)
}

// repeated .CSTAR_GlyphData glyph_data = 2 [(.description) = "one or more items of glyph data to write"];
inline int CSTAR_WriteGlyphData_Request::_internal_glyph_data_size() const {
  return glyph_data_.size();
}
inline int CSTAR_WriteGlyphData_Request::glyph_data_size() const {
  return _internal_glyph_data_size();
}
inline void CSTAR_WriteGlyphData_Request::clear_glyph_data() {
  glyph_data_.Clear();
}
inline ::CSTAR_GlyphData* CSTAR_WriteGlyphData_Request::mutable_glyph_data(int index) {
  // @@protoc_insertion_point(field_mutable:CSTAR_WriteGlyphData_Request.glyph_data)
  return glyph_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSTAR_GlyphData >*
CSTAR_WriteGlyphData_Request::mutable_glyph_data() {
  // @@protoc_insertion_point(field_mutable_list:CSTAR_WriteGlyphData_Request.glyph_data)
  return &glyph_data_;
}
inline const ::CSTAR_GlyphData& CSTAR_WriteGlyphData_Request::_internal_glyph_data(int index) const {
  return glyph_data_.Get(index);
}
inline const ::CSTAR_GlyphData& CSTAR_WriteGlyphData_Request::glyph_data(int index) const {
  // @@protoc_insertion_point(field_get:CSTAR_WriteGlyphData_Request.glyph_data)
  return _internal_glyph_data(index);
}
inline ::CSTAR_GlyphData* CSTAR_WriteGlyphData_Request::_internal_add_glyph_data() {
  return glyph_data_.Add();
}
inline ::CSTAR_GlyphData* CSTAR_WriteGlyphData_Request::add_glyph_data() {
  ::CSTAR_GlyphData* _add = _internal_add_glyph_data();
  // @@protoc_insertion_point(field_add:CSTAR_WriteGlyphData_Request.glyph_data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSTAR_GlyphData >&
CSTAR_WriteGlyphData_Request::glyph_data() const {
  // @@protoc_insertion_point(field_list:CSTAR_WriteGlyphData_Request.glyph_data)
  return glyph_data_;
}

// -------------------------------------------------------------------

// CSTAR_Request

// optional .CSTAR_ReadGlyphData_Request read_glyph_data = 1;
inline bool CSTAR_Request::_internal_has_read_glyph_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || read_glyph_data_ != nullptr);
  return value;
}
inline bool CSTAR_Request::has_read_glyph_data() const {
  return _internal_has_read_glyph_data();
}
inline void CSTAR_Request::clear_read_glyph_data() {
  if (read_glyph_data_ != nullptr) read_glyph_data_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CSTAR_ReadGlyphData_Request& CSTAR_Request::_internal_read_glyph_data() const {
  const ::CSTAR_ReadGlyphData_Request* p = read_glyph_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::CSTAR_ReadGlyphData_Request&>(
      ::_CSTAR_ReadGlyphData_Request_default_instance_);
}
inline const ::CSTAR_ReadGlyphData_Request& CSTAR_Request::read_glyph_data() const {
  // @@protoc_insertion_point(field_get:CSTAR_Request.read_glyph_data)
  return _internal_read_glyph_data();
}
inline void CSTAR_Request::unsafe_arena_set_allocated_read_glyph_data(
    ::CSTAR_ReadGlyphData_Request* read_glyph_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(read_glyph_data_);
  }
  read_glyph_data_ = read_glyph_data;
  if (read_glyph_data) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CSTAR_Request.read_glyph_data)
}
inline ::CSTAR_ReadGlyphData_Request* CSTAR_Request::release_read_glyph_data() {
  _has_bits_[0] &= ~0x00000001u;
  ::CSTAR_ReadGlyphData_Request* temp = read_glyph_data_;
  read_glyph_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CSTAR_ReadGlyphData_Request* CSTAR_Request::unsafe_arena_release_read_glyph_data() {
  // @@protoc_insertion_point(field_release:CSTAR_Request.read_glyph_data)
  _has_bits_[0] &= ~0x00000001u;
  ::CSTAR_ReadGlyphData_Request* temp = read_glyph_data_;
  read_glyph_data_ = nullptr;
  return temp;
}
inline ::CSTAR_ReadGlyphData_Request* CSTAR_Request::_internal_mutable_read_glyph_data() {
  _has_bits_[0] |= 0x00000001u;
  if (read_glyph_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::CSTAR_ReadGlyphData_Request>(GetArenaForAllocation());
    read_glyph_data_ = p;
  }
  return read_glyph_data_;
}
inline ::CSTAR_ReadGlyphData_Request* CSTAR_Request::mutable_read_glyph_data() {
  ::CSTAR_ReadGlyphData_Request* _msg = _internal_mutable_read_glyph_data();
  // @@protoc_insertion_point(field_mutable:CSTAR_Request.read_glyph_data)
  return _msg;
}
inline void CSTAR_Request::set_allocated_read_glyph_data(::CSTAR_ReadGlyphData_Request* read_glyph_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete read_glyph_data_;
  }
  if (read_glyph_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CSTAR_ReadGlyphData_Request>::GetOwningArena(read_glyph_data);
    if (message_arena != submessage_arena) {
      read_glyph_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, read_glyph_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  read_glyph_data_ = read_glyph_data;
  // @@protoc_insertion_point(field_set_allocated:CSTAR_Request.read_glyph_data)
}

// optional .CSTAR_WriteGlyphData_Request write_glyph_data = 2;
inline bool CSTAR_Request::_internal_has_write_glyph_data() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || write_glyph_data_ != nullptr);
  return value;
}
inline bool CSTAR_Request::has_write_glyph_data() const {
  return _internal_has_write_glyph_data();
}
inline void CSTAR_Request::clear_write_glyph_data() {
  if (write_glyph_data_ != nullptr) write_glyph_data_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::CSTAR_WriteGlyphData_Request& CSTAR_Request::_internal_write_glyph_data() const {
  const ::CSTAR_WriteGlyphData_Request* p = write_glyph_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::CSTAR_WriteGlyphData_Request&>(
      ::_CSTAR_WriteGlyphData_Request_default_instance_);
}
inline const ::CSTAR_WriteGlyphData_Request& CSTAR_Request::write_glyph_data() const {
  // @@protoc_insertion_point(field_get:CSTAR_Request.write_glyph_data)
  return _internal_write_glyph_data();
}
inline void CSTAR_Request::unsafe_arena_set_allocated_write_glyph_data(
    ::CSTAR_WriteGlyphData_Request* write_glyph_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(write_glyph_data_);
  }
  write_glyph_data_ = write_glyph_data;
  if (write_glyph_data) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CSTAR_Request.write_glyph_data)
}
inline ::CSTAR_WriteGlyphData_Request* CSTAR_Request::release_write_glyph_data() {
  _has_bits_[0] &= ~0x00000002u;
  ::CSTAR_WriteGlyphData_Request* temp = write_glyph_data_;
  write_glyph_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CSTAR_WriteGlyphData_Request* CSTAR_Request::unsafe_arena_release_write_glyph_data() {
  // @@protoc_insertion_point(field_release:CSTAR_Request.write_glyph_data)
  _has_bits_[0] &= ~0x00000002u;
  ::CSTAR_WriteGlyphData_Request* temp = write_glyph_data_;
  write_glyph_data_ = nullptr;
  return temp;
}
inline ::CSTAR_WriteGlyphData_Request* CSTAR_Request::_internal_mutable_write_glyph_data() {
  _has_bits_[0] |= 0x00000002u;
  if (write_glyph_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::CSTAR_WriteGlyphData_Request>(GetArenaForAllocation());
    write_glyph_data_ = p;
  }
  return write_glyph_data_;
}
inline ::CSTAR_WriteGlyphData_Request* CSTAR_Request::mutable_write_glyph_data() {
  ::CSTAR_WriteGlyphData_Request* _msg = _internal_mutable_write_glyph_data();
  // @@protoc_insertion_point(field_mutable:CSTAR_Request.write_glyph_data)
  return _msg;
}
inline void CSTAR_Request::set_allocated_write_glyph_data(::CSTAR_WriteGlyphData_Request* write_glyph_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete write_glyph_data_;
  }
  if (write_glyph_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CSTAR_WriteGlyphData_Request>::GetOwningArena(write_glyph_data);
    if (message_arena != submessage_arena) {
      write_glyph_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, write_glyph_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  write_glyph_data_ = write_glyph_data;
  // @@protoc_insertion_point(field_set_allocated:CSTAR_Request.write_glyph_data)
}

// -------------------------------------------------------------------

// CSTAR_ReadGlyphData_Response

// optional uint64 bundle_id = 1 [(.description) = "the Bundle ID of the returned glyphs; the client should send this back to optimize subsequent queries"];
inline bool CSTAR_ReadGlyphData_Response::_internal_has_bundle_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSTAR_ReadGlyphData_Response::has_bundle_id() const {
  return _internal_has_bundle_id();
}
inline void CSTAR_ReadGlyphData_Response::clear_bundle_id() {
  bundle_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CSTAR_ReadGlyphData_Response::_internal_bundle_id() const {
  return bundle_id_;
}
inline uint64_t CSTAR_ReadGlyphData_Response::bundle_id() const {
  // @@protoc_insertion_point(field_get:CSTAR_ReadGlyphData_Response.bundle_id)
  return _internal_bundle_id();
}
inline void CSTAR_ReadGlyphData_Response::_internal_set_bundle_id(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  bundle_id_ = value;
}
inline void CSTAR_ReadGlyphData_Response::set_bundle_id(uint64_t value) {
  _internal_set_bundle_id(value);
  // @@protoc_insertion_point(field_set:CSTAR_ReadGlyphData_Response.bundle_id)
}

// repeated .CSTAR_GlyphData glyph_data = 2 [(.description) = "zero or more items of returned glyph data"];
inline int CSTAR_ReadGlyphData_Response::_internal_glyph_data_size() const {
  return glyph_data_.size();
}
inline int CSTAR_ReadGlyphData_Response::glyph_data_size() const {
  return _internal_glyph_data_size();
}
inline void CSTAR_ReadGlyphData_Response::clear_glyph_data() {
  glyph_data_.Clear();
}
inline ::CSTAR_GlyphData* CSTAR_ReadGlyphData_Response::mutable_glyph_data(int index) {
  // @@protoc_insertion_point(field_mutable:CSTAR_ReadGlyphData_Response.glyph_data)
  return glyph_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSTAR_GlyphData >*
CSTAR_ReadGlyphData_Response::mutable_glyph_data() {
  // @@protoc_insertion_point(field_mutable_list:CSTAR_ReadGlyphData_Response.glyph_data)
  return &glyph_data_;
}
inline const ::CSTAR_GlyphData& CSTAR_ReadGlyphData_Response::_internal_glyph_data(int index) const {
  return glyph_data_.Get(index);
}
inline const ::CSTAR_GlyphData& CSTAR_ReadGlyphData_Response::glyph_data(int index) const {
  // @@protoc_insertion_point(field_get:CSTAR_ReadGlyphData_Response.glyph_data)
  return _internal_glyph_data(index);
}
inline ::CSTAR_GlyphData* CSTAR_ReadGlyphData_Response::_internal_add_glyph_data() {
  return glyph_data_.Add();
}
inline ::CSTAR_GlyphData* CSTAR_ReadGlyphData_Response::add_glyph_data() {
  ::CSTAR_GlyphData* _add = _internal_add_glyph_data();
  // @@protoc_insertion_point(field_add:CSTAR_ReadGlyphData_Response.glyph_data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSTAR_GlyphData >&
CSTAR_ReadGlyphData_Response::glyph_data() const {
  // @@protoc_insertion_point(field_list:CSTAR_ReadGlyphData_Response.glyph_data)
  return glyph_data_;
}

// -------------------------------------------------------------------

// CSTAR_WriteGlyphData_Response

// repeated .E_STAR_GlyphWriteResult result = 1 [(.description) = "write result for each item of glyph data"];
inline int CSTAR_WriteGlyphData_Response::_internal_result_size() const {
  return result_.size();
}
inline int CSTAR_WriteGlyphData_Response::result_size() const {
  return _internal_result_size();
}
inline void CSTAR_WriteGlyphData_Response::clear_result() {
  result_.Clear();
}
inline ::E_STAR_GlyphWriteResult CSTAR_WriteGlyphData_Response::_internal_result(int index) const {
  return static_cast< ::E_STAR_GlyphWriteResult >(result_.Get(index));
}
inline ::E_STAR_GlyphWriteResult CSTAR_WriteGlyphData_Response::result(int index) const {
  // @@protoc_insertion_point(field_get:CSTAR_WriteGlyphData_Response.result)
  return _internal_result(index);
}
inline void CSTAR_WriteGlyphData_Response::set_result(int index, ::E_STAR_GlyphWriteResult value) {
  assert(::E_STAR_GlyphWriteResult_IsValid(value));
  result_.Set(index, value);
  // @@protoc_insertion_point(field_set:CSTAR_WriteGlyphData_Response.result)
}
inline void CSTAR_WriteGlyphData_Response::_internal_add_result(::E_STAR_GlyphWriteResult value) {
  assert(::E_STAR_GlyphWriteResult_IsValid(value));
  result_.Add(value);
}
inline void CSTAR_WriteGlyphData_Response::add_result(::E_STAR_GlyphWriteResult value) {
  _internal_add_result(value);
  // @@protoc_insertion_point(field_add:CSTAR_WriteGlyphData_Response.result)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
CSTAR_WriteGlyphData_Response::result() const {
  // @@protoc_insertion_point(field_list:CSTAR_WriteGlyphData_Response.result)
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CSTAR_WriteGlyphData_Response::_internal_mutable_result() {
  return &result_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CSTAR_WriteGlyphData_Response::mutable_result() {
  // @@protoc_insertion_point(field_mutable_list:CSTAR_WriteGlyphData_Response.result)
  return _internal_mutable_result();
}

// -------------------------------------------------------------------

// CSTAR_Response

// optional .CSTAR_ReadGlyphData_Response read_glyph_data = 1;
inline bool CSTAR_Response::_internal_has_read_glyph_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || read_glyph_data_ != nullptr);
  return value;
}
inline bool CSTAR_Response::has_read_glyph_data() const {
  return _internal_has_read_glyph_data();
}
inline void CSTAR_Response::clear_read_glyph_data() {
  if (read_glyph_data_ != nullptr) read_glyph_data_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CSTAR_ReadGlyphData_Response& CSTAR_Response::_internal_read_glyph_data() const {
  const ::CSTAR_ReadGlyphData_Response* p = read_glyph_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::CSTAR_ReadGlyphData_Response&>(
      ::_CSTAR_ReadGlyphData_Response_default_instance_);
}
inline const ::CSTAR_ReadGlyphData_Response& CSTAR_Response::read_glyph_data() const {
  // @@protoc_insertion_point(field_get:CSTAR_Response.read_glyph_data)
  return _internal_read_glyph_data();
}
inline void CSTAR_Response::unsafe_arena_set_allocated_read_glyph_data(
    ::CSTAR_ReadGlyphData_Response* read_glyph_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(read_glyph_data_);
  }
  read_glyph_data_ = read_glyph_data;
  if (read_glyph_data) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CSTAR_Response.read_glyph_data)
}
inline ::CSTAR_ReadGlyphData_Response* CSTAR_Response::release_read_glyph_data() {
  _has_bits_[0] &= ~0x00000001u;
  ::CSTAR_ReadGlyphData_Response* temp = read_glyph_data_;
  read_glyph_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CSTAR_ReadGlyphData_Response* CSTAR_Response::unsafe_arena_release_read_glyph_data() {
  // @@protoc_insertion_point(field_release:CSTAR_Response.read_glyph_data)
  _has_bits_[0] &= ~0x00000001u;
  ::CSTAR_ReadGlyphData_Response* temp = read_glyph_data_;
  read_glyph_data_ = nullptr;
  return temp;
}
inline ::CSTAR_ReadGlyphData_Response* CSTAR_Response::_internal_mutable_read_glyph_data() {
  _has_bits_[0] |= 0x00000001u;
  if (read_glyph_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::CSTAR_ReadGlyphData_Response>(GetArenaForAllocation());
    read_glyph_data_ = p;
  }
  return read_glyph_data_;
}
inline ::CSTAR_ReadGlyphData_Response* CSTAR_Response::mutable_read_glyph_data() {
  ::CSTAR_ReadGlyphData_Response* _msg = _internal_mutable_read_glyph_data();
  // @@protoc_insertion_point(field_mutable:CSTAR_Response.read_glyph_data)
  return _msg;
}
inline void CSTAR_Response::set_allocated_read_glyph_data(::CSTAR_ReadGlyphData_Response* read_glyph_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete read_glyph_data_;
  }
  if (read_glyph_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CSTAR_ReadGlyphData_Response>::GetOwningArena(read_glyph_data);
    if (message_arena != submessage_arena) {
      read_glyph_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, read_glyph_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  read_glyph_data_ = read_glyph_data;
  // @@protoc_insertion_point(field_set_allocated:CSTAR_Response.read_glyph_data)
}

// optional .CSTAR_WriteGlyphData_Response write_glyph_data = 2;
inline bool CSTAR_Response::_internal_has_write_glyph_data() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || write_glyph_data_ != nullptr);
  return value;
}
inline bool CSTAR_Response::has_write_glyph_data() const {
  return _internal_has_write_glyph_data();
}
inline void CSTAR_Response::clear_write_glyph_data() {
  if (write_glyph_data_ != nullptr) write_glyph_data_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::CSTAR_WriteGlyphData_Response& CSTAR_Response::_internal_write_glyph_data() const {
  const ::CSTAR_WriteGlyphData_Response* p = write_glyph_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::CSTAR_WriteGlyphData_Response&>(
      ::_CSTAR_WriteGlyphData_Response_default_instance_);
}
inline const ::CSTAR_WriteGlyphData_Response& CSTAR_Response::write_glyph_data() const {
  // @@protoc_insertion_point(field_get:CSTAR_Response.write_glyph_data)
  return _internal_write_glyph_data();
}
inline void CSTAR_Response::unsafe_arena_set_allocated_write_glyph_data(
    ::CSTAR_WriteGlyphData_Response* write_glyph_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(write_glyph_data_);
  }
  write_glyph_data_ = write_glyph_data;
  if (write_glyph_data) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CSTAR_Response.write_glyph_data)
}
inline ::CSTAR_WriteGlyphData_Response* CSTAR_Response::release_write_glyph_data() {
  _has_bits_[0] &= ~0x00000002u;
  ::CSTAR_WriteGlyphData_Response* temp = write_glyph_data_;
  write_glyph_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CSTAR_WriteGlyphData_Response* CSTAR_Response::unsafe_arena_release_write_glyph_data() {
  // @@protoc_insertion_point(field_release:CSTAR_Response.write_glyph_data)
  _has_bits_[0] &= ~0x00000002u;
  ::CSTAR_WriteGlyphData_Response* temp = write_glyph_data_;
  write_glyph_data_ = nullptr;
  return temp;
}
inline ::CSTAR_WriteGlyphData_Response* CSTAR_Response::_internal_mutable_write_glyph_data() {
  _has_bits_[0] |= 0x00000002u;
  if (write_glyph_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::CSTAR_WriteGlyphData_Response>(GetArenaForAllocation());
    write_glyph_data_ = p;
  }
  return write_glyph_data_;
}
inline ::CSTAR_WriteGlyphData_Response* CSTAR_Response::mutable_write_glyph_data() {
  ::CSTAR_WriteGlyphData_Response* _msg = _internal_mutable_write_glyph_data();
  // @@protoc_insertion_point(field_mutable:CSTAR_Response.write_glyph_data)
  return _msg;
}
inline void CSTAR_Response::set_allocated_write_glyph_data(::CSTAR_WriteGlyphData_Response* write_glyph_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete write_glyph_data_;
  }
  if (write_glyph_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CSTAR_WriteGlyphData_Response>::GetOwningArena(write_glyph_data);
    if (message_arena != submessage_arena) {
      write_glyph_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, write_glyph_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  write_glyph_data_ = write_glyph_data;
  // @@protoc_insertion_point(field_set_allocated:CSTAR_Response.write_glyph_data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::E_STAR_GlyphWriteResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::E_STAR_GlyphWriteResult>() {
  return ::E_STAR_GlyphWriteResult_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_steammessages_5fstar_2esteamclient_2eproto
