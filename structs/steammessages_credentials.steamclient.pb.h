// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_credentials.steamclient.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_steammessages_5fcredentials_2esteamclient_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_steammessages_5fcredentials_2esteamclient_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "steammessages_base.pb.h"
#include "steammessages_unified_base.steamclient.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_5fcredentials_2esteamclient_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_5fcredentials_2esteamclient_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[13]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fcredentials_2esteamclient_2eproto;
class CCredentials_GetAccountAuthSecret_Request;
struct CCredentials_GetAccountAuthSecret_RequestDefaultTypeInternal;
extern CCredentials_GetAccountAuthSecret_RequestDefaultTypeInternal _CCredentials_GetAccountAuthSecret_Request_default_instance_;
class CCredentials_GetAccountAuthSecret_Response;
struct CCredentials_GetAccountAuthSecret_ResponseDefaultTypeInternal;
extern CCredentials_GetAccountAuthSecret_ResponseDefaultTypeInternal _CCredentials_GetAccountAuthSecret_Response_default_instance_;
class CCredentials_GetSteamGuardDetails_Request;
struct CCredentials_GetSteamGuardDetails_RequestDefaultTypeInternal;
extern CCredentials_GetSteamGuardDetails_RequestDefaultTypeInternal _CCredentials_GetSteamGuardDetails_Request_default_instance_;
class CCredentials_GetSteamGuardDetails_Response;
struct CCredentials_GetSteamGuardDetails_ResponseDefaultTypeInternal;
extern CCredentials_GetSteamGuardDetails_ResponseDefaultTypeInternal _CCredentials_GetSteamGuardDetails_Response_default_instance_;
class CCredentials_GetSteamGuardDetails_Response_SessionData;
struct CCredentials_GetSteamGuardDetails_Response_SessionDataDefaultTypeInternal;
extern CCredentials_GetSteamGuardDetails_Response_SessionDataDefaultTypeInternal _CCredentials_GetSteamGuardDetails_Response_SessionData_default_instance_;
class CCredentials_LastCredentialChangeTime_Request;
struct CCredentials_LastCredentialChangeTime_RequestDefaultTypeInternal;
extern CCredentials_LastCredentialChangeTime_RequestDefaultTypeInternal _CCredentials_LastCredentialChangeTime_Request_default_instance_;
class CCredentials_LastCredentialChangeTime_Response;
struct CCredentials_LastCredentialChangeTime_ResponseDefaultTypeInternal;
extern CCredentials_LastCredentialChangeTime_ResponseDefaultTypeInternal _CCredentials_LastCredentialChangeTime_Response_default_instance_;
class CCredentials_SteamGuardPhishingReport_Request;
struct CCredentials_SteamGuardPhishingReport_RequestDefaultTypeInternal;
extern CCredentials_SteamGuardPhishingReport_RequestDefaultTypeInternal _CCredentials_SteamGuardPhishingReport_Request_default_instance_;
class CCredentials_SteamGuardPhishingReport_Response;
struct CCredentials_SteamGuardPhishingReport_ResponseDefaultTypeInternal;
extern CCredentials_SteamGuardPhishingReport_ResponseDefaultTypeInternal _CCredentials_SteamGuardPhishingReport_Response_default_instance_;
class CCredentials_TestAvailablePassword_Request;
struct CCredentials_TestAvailablePassword_RequestDefaultTypeInternal;
extern CCredentials_TestAvailablePassword_RequestDefaultTypeInternal _CCredentials_TestAvailablePassword_Request_default_instance_;
class CCredentials_TestAvailablePassword_Response;
struct CCredentials_TestAvailablePassword_ResponseDefaultTypeInternal;
extern CCredentials_TestAvailablePassword_ResponseDefaultTypeInternal _CCredentials_TestAvailablePassword_Response_default_instance_;
class CCredentials_ValidateEmailAddress_Request;
struct CCredentials_ValidateEmailAddress_RequestDefaultTypeInternal;
extern CCredentials_ValidateEmailAddress_RequestDefaultTypeInternal _CCredentials_ValidateEmailAddress_Request_default_instance_;
class CCredentials_ValidateEmailAddress_Response;
struct CCredentials_ValidateEmailAddress_ResponseDefaultTypeInternal;
extern CCredentials_ValidateEmailAddress_ResponseDefaultTypeInternal _CCredentials_ValidateEmailAddress_Response_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CCredentials_GetAccountAuthSecret_Request* Arena::CreateMaybeMessage<::CCredentials_GetAccountAuthSecret_Request>(Arena*);
template<> ::CCredentials_GetAccountAuthSecret_Response* Arena::CreateMaybeMessage<::CCredentials_GetAccountAuthSecret_Response>(Arena*);
template<> ::CCredentials_GetSteamGuardDetails_Request* Arena::CreateMaybeMessage<::CCredentials_GetSteamGuardDetails_Request>(Arena*);
template<> ::CCredentials_GetSteamGuardDetails_Response* Arena::CreateMaybeMessage<::CCredentials_GetSteamGuardDetails_Response>(Arena*);
template<> ::CCredentials_GetSteamGuardDetails_Response_SessionData* Arena::CreateMaybeMessage<::CCredentials_GetSteamGuardDetails_Response_SessionData>(Arena*);
template<> ::CCredentials_LastCredentialChangeTime_Request* Arena::CreateMaybeMessage<::CCredentials_LastCredentialChangeTime_Request>(Arena*);
template<> ::CCredentials_LastCredentialChangeTime_Response* Arena::CreateMaybeMessage<::CCredentials_LastCredentialChangeTime_Response>(Arena*);
template<> ::CCredentials_SteamGuardPhishingReport_Request* Arena::CreateMaybeMessage<::CCredentials_SteamGuardPhishingReport_Request>(Arena*);
template<> ::CCredentials_SteamGuardPhishingReport_Response* Arena::CreateMaybeMessage<::CCredentials_SteamGuardPhishingReport_Response>(Arena*);
template<> ::CCredentials_TestAvailablePassword_Request* Arena::CreateMaybeMessage<::CCredentials_TestAvailablePassword_Request>(Arena*);
template<> ::CCredentials_TestAvailablePassword_Response* Arena::CreateMaybeMessage<::CCredentials_TestAvailablePassword_Response>(Arena*);
template<> ::CCredentials_ValidateEmailAddress_Request* Arena::CreateMaybeMessage<::CCredentials_ValidateEmailAddress_Request>(Arena*);
template<> ::CCredentials_ValidateEmailAddress_Response* Arena::CreateMaybeMessage<::CCredentials_ValidateEmailAddress_Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class CCredentials_TestAvailablePassword_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCredentials_TestAvailablePassword_Request) */ {
 public:
  inline CCredentials_TestAvailablePassword_Request() : CCredentials_TestAvailablePassword_Request(nullptr) {}
  ~CCredentials_TestAvailablePassword_Request() override;
  explicit constexpr CCredentials_TestAvailablePassword_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCredentials_TestAvailablePassword_Request(const CCredentials_TestAvailablePassword_Request& from);
  CCredentials_TestAvailablePassword_Request(CCredentials_TestAvailablePassword_Request&& from) noexcept
    : CCredentials_TestAvailablePassword_Request() {
    *this = ::std::move(from);
  }

  inline CCredentials_TestAvailablePassword_Request& operator=(const CCredentials_TestAvailablePassword_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCredentials_TestAvailablePassword_Request& operator=(CCredentials_TestAvailablePassword_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCredentials_TestAvailablePassword_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCredentials_TestAvailablePassword_Request* internal_default_instance() {
    return reinterpret_cast<const CCredentials_TestAvailablePassword_Request*>(
               &_CCredentials_TestAvailablePassword_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CCredentials_TestAvailablePassword_Request& a, CCredentials_TestAvailablePassword_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CCredentials_TestAvailablePassword_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCredentials_TestAvailablePassword_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCredentials_TestAvailablePassword_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCredentials_TestAvailablePassword_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCredentials_TestAvailablePassword_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCredentials_TestAvailablePassword_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCredentials_TestAvailablePassword_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCredentials_TestAvailablePassword_Request";
  }
  protected:
  explicit CCredentials_TestAvailablePassword_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPasswordFieldNumber = 1,
    kShaDigestPasswordFieldNumber = 2,
    kAccountNameFieldNumber = 3,
  };
  // optional string password = 1;
  bool has_password() const;
  private:
  bool _internal_has_password() const;
  public:
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // optional bytes sha_digest_password = 2;
  bool has_sha_digest_password() const;
  private:
  bool _internal_has_sha_digest_password() const;
  public:
  void clear_sha_digest_password();
  const std::string& sha_digest_password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sha_digest_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sha_digest_password();
  PROTOBUF_NODISCARD std::string* release_sha_digest_password();
  void set_allocated_sha_digest_password(std::string* sha_digest_password);
  private:
  const std::string& _internal_sha_digest_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sha_digest_password(const std::string& value);
  std::string* _internal_mutable_sha_digest_password();
  public:

  // optional string account_name = 3;
  bool has_account_name() const;
  private:
  bool _internal_has_account_name() const;
  public:
  void clear_account_name();
  const std::string& account_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account_name();
  PROTOBUF_NODISCARD std::string* release_account_name();
  void set_allocated_account_name(std::string* account_name);
  private:
  const std::string& _internal_account_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_name(const std::string& value);
  std::string* _internal_mutable_account_name();
  public:

  // @@protoc_insertion_point(class_scope:CCredentials_TestAvailablePassword_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sha_digest_password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_name_;
  friend struct ::TableStruct_steammessages_5fcredentials_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCredentials_TestAvailablePassword_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCredentials_TestAvailablePassword_Response) */ {
 public:
  inline CCredentials_TestAvailablePassword_Response() : CCredentials_TestAvailablePassword_Response(nullptr) {}
  ~CCredentials_TestAvailablePassword_Response() override;
  explicit constexpr CCredentials_TestAvailablePassword_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCredentials_TestAvailablePassword_Response(const CCredentials_TestAvailablePassword_Response& from);
  CCredentials_TestAvailablePassword_Response(CCredentials_TestAvailablePassword_Response&& from) noexcept
    : CCredentials_TestAvailablePassword_Response() {
    *this = ::std::move(from);
  }

  inline CCredentials_TestAvailablePassword_Response& operator=(const CCredentials_TestAvailablePassword_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCredentials_TestAvailablePassword_Response& operator=(CCredentials_TestAvailablePassword_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCredentials_TestAvailablePassword_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCredentials_TestAvailablePassword_Response* internal_default_instance() {
    return reinterpret_cast<const CCredentials_TestAvailablePassword_Response*>(
               &_CCredentials_TestAvailablePassword_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CCredentials_TestAvailablePassword_Response& a, CCredentials_TestAvailablePassword_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CCredentials_TestAvailablePassword_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCredentials_TestAvailablePassword_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCredentials_TestAvailablePassword_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCredentials_TestAvailablePassword_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCredentials_TestAvailablePassword_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCredentials_TestAvailablePassword_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCredentials_TestAvailablePassword_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCredentials_TestAvailablePassword_Response";
  }
  protected:
  explicit CCredentials_TestAvailablePassword_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsValidFieldNumber = 3,
  };
  // optional bool is_valid = 3;
  bool has_is_valid() const;
  private:
  bool _internal_has_is_valid() const;
  public:
  void clear_is_valid();
  bool is_valid() const;
  void set_is_valid(bool value);
  private:
  bool _internal_is_valid() const;
  void _internal_set_is_valid(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CCredentials_TestAvailablePassword_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool is_valid_;
  friend struct ::TableStruct_steammessages_5fcredentials_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCredentials_GetSteamGuardDetails_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCredentials_GetSteamGuardDetails_Request) */ {
 public:
  inline CCredentials_GetSteamGuardDetails_Request() : CCredentials_GetSteamGuardDetails_Request(nullptr) {}
  ~CCredentials_GetSteamGuardDetails_Request() override;
  explicit constexpr CCredentials_GetSteamGuardDetails_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCredentials_GetSteamGuardDetails_Request(const CCredentials_GetSteamGuardDetails_Request& from);
  CCredentials_GetSteamGuardDetails_Request(CCredentials_GetSteamGuardDetails_Request&& from) noexcept
    : CCredentials_GetSteamGuardDetails_Request() {
    *this = ::std::move(from);
  }

  inline CCredentials_GetSteamGuardDetails_Request& operator=(const CCredentials_GetSteamGuardDetails_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCredentials_GetSteamGuardDetails_Request& operator=(CCredentials_GetSteamGuardDetails_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCredentials_GetSteamGuardDetails_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCredentials_GetSteamGuardDetails_Request* internal_default_instance() {
    return reinterpret_cast<const CCredentials_GetSteamGuardDetails_Request*>(
               &_CCredentials_GetSteamGuardDetails_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CCredentials_GetSteamGuardDetails_Request& a, CCredentials_GetSteamGuardDetails_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CCredentials_GetSteamGuardDetails_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCredentials_GetSteamGuardDetails_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCredentials_GetSteamGuardDetails_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCredentials_GetSteamGuardDetails_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCredentials_GetSteamGuardDetails_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCredentials_GetSteamGuardDetails_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCredentials_GetSteamGuardDetails_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCredentials_GetSteamGuardDetails_Request";
  }
  protected:
  explicit CCredentials_GetSteamGuardDetails_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWebcookieFieldNumber = 2,
    kIpAddressFieldNumber = 5,
    kTimestampMinimumWantedFieldNumber = 3,
    kDeprecatedIpaddressFieldNumber = 4,
  };
  // optional string webcookie = 2 [(.description) = "The user\'s Steam Guard machine auth cookie. If present, it\'ll be used to get the user\'s machine ID instead of the AM session."];
  bool has_webcookie() const;
  private:
  bool _internal_has_webcookie() const;
  public:
  void clear_webcookie();
  const std::string& webcookie() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_webcookie(ArgT0&& arg0, ArgT... args);
  std::string* mutable_webcookie();
  PROTOBUF_NODISCARD std::string* release_webcookie();
  void set_allocated_webcookie(std::string* webcookie);
  private:
  const std::string& _internal_webcookie() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_webcookie(const std::string& value);
  std::string* _internal_mutable_webcookie();
  public:

  // optional .CMsgIPAddress ip_address = 5;
  bool has_ip_address() const;
  private:
  bool _internal_has_ip_address() const;
  public:
  void clear_ip_address();
  const ::CMsgIPAddress& ip_address() const;
  PROTOBUF_NODISCARD ::CMsgIPAddress* release_ip_address();
  ::CMsgIPAddress* mutable_ip_address();
  void set_allocated_ip_address(::CMsgIPAddress* ip_address);
  private:
  const ::CMsgIPAddress& _internal_ip_address() const;
  ::CMsgIPAddress* _internal_mutable_ip_address();
  public:
  void unsafe_arena_set_allocated_ip_address(
      ::CMsgIPAddress* ip_address);
  ::CMsgIPAddress* unsafe_arena_release_ip_address();

  // optional fixed32 timestamp_minimum_wanted = 3;
  bool has_timestamp_minimum_wanted() const;
  private:
  bool _internal_has_timestamp_minimum_wanted() const;
  public:
  void clear_timestamp_minimum_wanted();
  uint32_t timestamp_minimum_wanted() const;
  void set_timestamp_minimum_wanted(uint32_t value);
  private:
  uint32_t _internal_timestamp_minimum_wanted() const;
  void _internal_set_timestamp_minimum_wanted(uint32_t value);
  public:

  // optional int32 deprecated_ipaddress = 4;
  bool has_deprecated_ipaddress() const;
  private:
  bool _internal_has_deprecated_ipaddress() const;
  public:
  void clear_deprecated_ipaddress();
  int32_t deprecated_ipaddress() const;
  void set_deprecated_ipaddress(int32_t value);
  private:
  int32_t _internal_deprecated_ipaddress() const;
  void _internal_set_deprecated_ipaddress(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CCredentials_GetSteamGuardDetails_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr webcookie_;
  ::CMsgIPAddress* ip_address_;
  uint32_t timestamp_minimum_wanted_;
  int32_t deprecated_ipaddress_;
  friend struct ::TableStruct_steammessages_5fcredentials_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCredentials_GetSteamGuardDetails_Response_SessionData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCredentials_GetSteamGuardDetails_Response.SessionData) */ {
 public:
  inline CCredentials_GetSteamGuardDetails_Response_SessionData() : CCredentials_GetSteamGuardDetails_Response_SessionData(nullptr) {}
  ~CCredentials_GetSteamGuardDetails_Response_SessionData() override;
  explicit constexpr CCredentials_GetSteamGuardDetails_Response_SessionData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCredentials_GetSteamGuardDetails_Response_SessionData(const CCredentials_GetSteamGuardDetails_Response_SessionData& from);
  CCredentials_GetSteamGuardDetails_Response_SessionData(CCredentials_GetSteamGuardDetails_Response_SessionData&& from) noexcept
    : CCredentials_GetSteamGuardDetails_Response_SessionData() {
    *this = ::std::move(from);
  }

  inline CCredentials_GetSteamGuardDetails_Response_SessionData& operator=(const CCredentials_GetSteamGuardDetails_Response_SessionData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCredentials_GetSteamGuardDetails_Response_SessionData& operator=(CCredentials_GetSteamGuardDetails_Response_SessionData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCredentials_GetSteamGuardDetails_Response_SessionData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCredentials_GetSteamGuardDetails_Response_SessionData* internal_default_instance() {
    return reinterpret_cast<const CCredentials_GetSteamGuardDetails_Response_SessionData*>(
               &_CCredentials_GetSteamGuardDetails_Response_SessionData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CCredentials_GetSteamGuardDetails_Response_SessionData& a, CCredentials_GetSteamGuardDetails_Response_SessionData& b) {
    a.Swap(&b);
  }
  inline void Swap(CCredentials_GetSteamGuardDetails_Response_SessionData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCredentials_GetSteamGuardDetails_Response_SessionData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCredentials_GetSteamGuardDetails_Response_SessionData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCredentials_GetSteamGuardDetails_Response_SessionData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCredentials_GetSteamGuardDetails_Response_SessionData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCredentials_GetSteamGuardDetails_Response_SessionData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCredentials_GetSteamGuardDetails_Response_SessionData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCredentials_GetSteamGuardDetails_Response.SessionData";
  }
  protected:
  explicit CCredentials_GetSteamGuardDetails_Response_SessionData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMachineNameUserchosenFieldNumber = 2,
    kPublicIpAddressFieldNumber = 8,
    kMachineIdFieldNumber = 1,
    kTimestampMachineSteamguardEnabledFieldNumber = 3,
    kAuthenticationExistsFromGeolocBeforeMintimeFieldNumber = 4,
    kAuthenticationExistsFromSameIpBeforeMintimeFieldNumber = 6,
    kPublicIpv4FieldNumber = 7,
  };
  // optional string machine_name_userchosen = 2;
  bool has_machine_name_userchosen() const;
  private:
  bool _internal_has_machine_name_userchosen() const;
  public:
  void clear_machine_name_userchosen();
  const std::string& machine_name_userchosen() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_machine_name_userchosen(ArgT0&& arg0, ArgT... args);
  std::string* mutable_machine_name_userchosen();
  PROTOBUF_NODISCARD std::string* release_machine_name_userchosen();
  void set_allocated_machine_name_userchosen(std::string* machine_name_userchosen);
  private:
  const std::string& _internal_machine_name_userchosen() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_machine_name_userchosen(const std::string& value);
  std::string* _internal_mutable_machine_name_userchosen();
  public:

  // optional string public_ip_address = 8;
  bool has_public_ip_address() const;
  private:
  bool _internal_has_public_ip_address() const;
  public:
  void clear_public_ip_address();
  const std::string& public_ip_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_public_ip_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_public_ip_address();
  PROTOBUF_NODISCARD std::string* release_public_ip_address();
  void set_allocated_public_ip_address(std::string* public_ip_address);
  private:
  const std::string& _internal_public_ip_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_public_ip_address(const std::string& value);
  std::string* _internal_mutable_public_ip_address();
  public:

  // optional uint64 machine_id = 1;
  bool has_machine_id() const;
  private:
  bool _internal_has_machine_id() const;
  public:
  void clear_machine_id();
  uint64_t machine_id() const;
  void set_machine_id(uint64_t value);
  private:
  uint64_t _internal_machine_id() const;
  void _internal_set_machine_id(uint64_t value);
  public:

  // optional fixed32 timestamp_machine_steamguard_enabled = 3;
  bool has_timestamp_machine_steamguard_enabled() const;
  private:
  bool _internal_has_timestamp_machine_steamguard_enabled() const;
  public:
  void clear_timestamp_machine_steamguard_enabled();
  uint32_t timestamp_machine_steamguard_enabled() const;
  void set_timestamp_machine_steamguard_enabled(uint32_t value);
  private:
  uint32_t _internal_timestamp_machine_steamguard_enabled() const;
  void _internal_set_timestamp_machine_steamguard_enabled(uint32_t value);
  public:

  // optional bool authentication_exists_from_geoloc_before_mintime = 4;
  bool has_authentication_exists_from_geoloc_before_mintime() const;
  private:
  bool _internal_has_authentication_exists_from_geoloc_before_mintime() const;
  public:
  void clear_authentication_exists_from_geoloc_before_mintime();
  bool authentication_exists_from_geoloc_before_mintime() const;
  void set_authentication_exists_from_geoloc_before_mintime(bool value);
  private:
  bool _internal_authentication_exists_from_geoloc_before_mintime() const;
  void _internal_set_authentication_exists_from_geoloc_before_mintime(bool value);
  public:

  // optional bool authentication_exists_from_same_ip_before_mintime = 6;
  bool has_authentication_exists_from_same_ip_before_mintime() const;
  private:
  bool _internal_has_authentication_exists_from_same_ip_before_mintime() const;
  public:
  void clear_authentication_exists_from_same_ip_before_mintime();
  bool authentication_exists_from_same_ip_before_mintime() const;
  void set_authentication_exists_from_same_ip_before_mintime(bool value);
  private:
  bool _internal_authentication_exists_from_same_ip_before_mintime() const;
  void _internal_set_authentication_exists_from_same_ip_before_mintime(bool value);
  public:

  // optional uint32 public_ipv4 = 7;
  bool has_public_ipv4() const;
  private:
  bool _internal_has_public_ipv4() const;
  public:
  void clear_public_ipv4();
  uint32_t public_ipv4() const;
  void set_public_ipv4(uint32_t value);
  private:
  uint32_t _internal_public_ipv4() const;
  void _internal_set_public_ipv4(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CCredentials_GetSteamGuardDetails_Response.SessionData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr machine_name_userchosen_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_ip_address_;
  uint64_t machine_id_;
  uint32_t timestamp_machine_steamguard_enabled_;
  bool authentication_exists_from_geoloc_before_mintime_;
  bool authentication_exists_from_same_ip_before_mintime_;
  uint32_t public_ipv4_;
  friend struct ::TableStruct_steammessages_5fcredentials_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCredentials_GetSteamGuardDetails_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCredentials_GetSteamGuardDetails_Response) */ {
 public:
  inline CCredentials_GetSteamGuardDetails_Response() : CCredentials_GetSteamGuardDetails_Response(nullptr) {}
  ~CCredentials_GetSteamGuardDetails_Response() override;
  explicit constexpr CCredentials_GetSteamGuardDetails_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCredentials_GetSteamGuardDetails_Response(const CCredentials_GetSteamGuardDetails_Response& from);
  CCredentials_GetSteamGuardDetails_Response(CCredentials_GetSteamGuardDetails_Response&& from) noexcept
    : CCredentials_GetSteamGuardDetails_Response() {
    *this = ::std::move(from);
  }

  inline CCredentials_GetSteamGuardDetails_Response& operator=(const CCredentials_GetSteamGuardDetails_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCredentials_GetSteamGuardDetails_Response& operator=(CCredentials_GetSteamGuardDetails_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCredentials_GetSteamGuardDetails_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCredentials_GetSteamGuardDetails_Response* internal_default_instance() {
    return reinterpret_cast<const CCredentials_GetSteamGuardDetails_Response*>(
               &_CCredentials_GetSteamGuardDetails_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CCredentials_GetSteamGuardDetails_Response& a, CCredentials_GetSteamGuardDetails_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CCredentials_GetSteamGuardDetails_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCredentials_GetSteamGuardDetails_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCredentials_GetSteamGuardDetails_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCredentials_GetSteamGuardDetails_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCredentials_GetSteamGuardDetails_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCredentials_GetSteamGuardDetails_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCredentials_GetSteamGuardDetails_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCredentials_GetSteamGuardDetails_Response";
  }
  protected:
  explicit CCredentials_GetSteamGuardDetails_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CCredentials_GetSteamGuardDetails_Response_SessionData SessionData;

  // accessors -------------------------------------------------------

  enum : int {
    kSessionDataFieldNumber = 8,
    kDeprecatedMachineNameUserchosenFieldNumber = 4,
    kTimestampSteamguardEnabledFieldNumber = 2,
    kDeprecatedTimestampMachineSteamguardEnabledFieldNumber = 5,
    kDeprecatedMachineIdFieldNumber = 7,
    kIsSteamguardEnabledFieldNumber = 1,
    kDeprecatedAuthenticationExistsFromGeolocBeforeMintimeFieldNumber = 6,
    kIsTwofactorEnabledFieldNumber = 9,
    kIsPhoneVerifiedFieldNumber = 11,
    kTimestampTwofactorEnabledFieldNumber = 10,
  };
  // repeated .CCredentials_GetSteamGuardDetails_Response.SessionData session_data = 8;
  int session_data_size() const;
  private:
  int _internal_session_data_size() const;
  public:
  void clear_session_data();
  ::CCredentials_GetSteamGuardDetails_Response_SessionData* mutable_session_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCredentials_GetSteamGuardDetails_Response_SessionData >*
      mutable_session_data();
  private:
  const ::CCredentials_GetSteamGuardDetails_Response_SessionData& _internal_session_data(int index) const;
  ::CCredentials_GetSteamGuardDetails_Response_SessionData* _internal_add_session_data();
  public:
  const ::CCredentials_GetSteamGuardDetails_Response_SessionData& session_data(int index) const;
  ::CCredentials_GetSteamGuardDetails_Response_SessionData* add_session_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCredentials_GetSteamGuardDetails_Response_SessionData >&
      session_data() const;

  // optional string deprecated_machine_name_userchosen = 4;
  bool has_deprecated_machine_name_userchosen() const;
  private:
  bool _internal_has_deprecated_machine_name_userchosen() const;
  public:
  void clear_deprecated_machine_name_userchosen();
  const std::string& deprecated_machine_name_userchosen() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_deprecated_machine_name_userchosen(ArgT0&& arg0, ArgT... args);
  std::string* mutable_deprecated_machine_name_userchosen();
  PROTOBUF_NODISCARD std::string* release_deprecated_machine_name_userchosen();
  void set_allocated_deprecated_machine_name_userchosen(std::string* deprecated_machine_name_userchosen);
  private:
  const std::string& _internal_deprecated_machine_name_userchosen() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_deprecated_machine_name_userchosen(const std::string& value);
  std::string* _internal_mutable_deprecated_machine_name_userchosen();
  public:

  // optional fixed32 timestamp_steamguard_enabled = 2;
  bool has_timestamp_steamguard_enabled() const;
  private:
  bool _internal_has_timestamp_steamguard_enabled() const;
  public:
  void clear_timestamp_steamguard_enabled();
  uint32_t timestamp_steamguard_enabled() const;
  void set_timestamp_steamguard_enabled(uint32_t value);
  private:
  uint32_t _internal_timestamp_steamguard_enabled() const;
  void _internal_set_timestamp_steamguard_enabled(uint32_t value);
  public:

  // optional fixed32 deprecated_timestamp_machine_steamguard_enabled = 5;
  bool has_deprecated_timestamp_machine_steamguard_enabled() const;
  private:
  bool _internal_has_deprecated_timestamp_machine_steamguard_enabled() const;
  public:
  void clear_deprecated_timestamp_machine_steamguard_enabled();
  uint32_t deprecated_timestamp_machine_steamguard_enabled() const;
  void set_deprecated_timestamp_machine_steamguard_enabled(uint32_t value);
  private:
  uint32_t _internal_deprecated_timestamp_machine_steamguard_enabled() const;
  void _internal_set_deprecated_timestamp_machine_steamguard_enabled(uint32_t value);
  public:

  // optional uint64 deprecated_machine_id = 7;
  bool has_deprecated_machine_id() const;
  private:
  bool _internal_has_deprecated_machine_id() const;
  public:
  void clear_deprecated_machine_id();
  uint64_t deprecated_machine_id() const;
  void set_deprecated_machine_id(uint64_t value);
  private:
  uint64_t _internal_deprecated_machine_id() const;
  void _internal_set_deprecated_machine_id(uint64_t value);
  public:

  // optional bool is_steamguard_enabled = 1;
  bool has_is_steamguard_enabled() const;
  private:
  bool _internal_has_is_steamguard_enabled() const;
  public:
  void clear_is_steamguard_enabled();
  bool is_steamguard_enabled() const;
  void set_is_steamguard_enabled(bool value);
  private:
  bool _internal_is_steamguard_enabled() const;
  void _internal_set_is_steamguard_enabled(bool value);
  public:

  // optional bool deprecated_authentication_exists_from_geoloc_before_mintime = 6;
  bool has_deprecated_authentication_exists_from_geoloc_before_mintime() const;
  private:
  bool _internal_has_deprecated_authentication_exists_from_geoloc_before_mintime() const;
  public:
  void clear_deprecated_authentication_exists_from_geoloc_before_mintime();
  bool deprecated_authentication_exists_from_geoloc_before_mintime() const;
  void set_deprecated_authentication_exists_from_geoloc_before_mintime(bool value);
  private:
  bool _internal_deprecated_authentication_exists_from_geoloc_before_mintime() const;
  void _internal_set_deprecated_authentication_exists_from_geoloc_before_mintime(bool value);
  public:

  // optional bool is_twofactor_enabled = 9;
  bool has_is_twofactor_enabled() const;
  private:
  bool _internal_has_is_twofactor_enabled() const;
  public:
  void clear_is_twofactor_enabled();
  bool is_twofactor_enabled() const;
  void set_is_twofactor_enabled(bool value);
  private:
  bool _internal_is_twofactor_enabled() const;
  void _internal_set_is_twofactor_enabled(bool value);
  public:

  // optional bool is_phone_verified = 11;
  bool has_is_phone_verified() const;
  private:
  bool _internal_has_is_phone_verified() const;
  public:
  void clear_is_phone_verified();
  bool is_phone_verified() const;
  void set_is_phone_verified(bool value);
  private:
  bool _internal_is_phone_verified() const;
  void _internal_set_is_phone_verified(bool value);
  public:

  // optional fixed32 timestamp_twofactor_enabled = 10;
  bool has_timestamp_twofactor_enabled() const;
  private:
  bool _internal_has_timestamp_twofactor_enabled() const;
  public:
  void clear_timestamp_twofactor_enabled();
  uint32_t timestamp_twofactor_enabled() const;
  void set_timestamp_twofactor_enabled(uint32_t value);
  private:
  uint32_t _internal_timestamp_twofactor_enabled() const;
  void _internal_set_timestamp_twofactor_enabled(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CCredentials_GetSteamGuardDetails_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCredentials_GetSteamGuardDetails_Response_SessionData > session_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deprecated_machine_name_userchosen_;
  uint32_t timestamp_steamguard_enabled_;
  uint32_t deprecated_timestamp_machine_steamguard_enabled_;
  uint64_t deprecated_machine_id_;
  bool is_steamguard_enabled_;
  bool deprecated_authentication_exists_from_geoloc_before_mintime_;
  bool is_twofactor_enabled_;
  bool is_phone_verified_;
  uint32_t timestamp_twofactor_enabled_;
  friend struct ::TableStruct_steammessages_5fcredentials_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCredentials_ValidateEmailAddress_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCredentials_ValidateEmailAddress_Request) */ {
 public:
  inline CCredentials_ValidateEmailAddress_Request() : CCredentials_ValidateEmailAddress_Request(nullptr) {}
  ~CCredentials_ValidateEmailAddress_Request() override;
  explicit constexpr CCredentials_ValidateEmailAddress_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCredentials_ValidateEmailAddress_Request(const CCredentials_ValidateEmailAddress_Request& from);
  CCredentials_ValidateEmailAddress_Request(CCredentials_ValidateEmailAddress_Request&& from) noexcept
    : CCredentials_ValidateEmailAddress_Request() {
    *this = ::std::move(from);
  }

  inline CCredentials_ValidateEmailAddress_Request& operator=(const CCredentials_ValidateEmailAddress_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCredentials_ValidateEmailAddress_Request& operator=(CCredentials_ValidateEmailAddress_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCredentials_ValidateEmailAddress_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCredentials_ValidateEmailAddress_Request* internal_default_instance() {
    return reinterpret_cast<const CCredentials_ValidateEmailAddress_Request*>(
               &_CCredentials_ValidateEmailAddress_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CCredentials_ValidateEmailAddress_Request& a, CCredentials_ValidateEmailAddress_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CCredentials_ValidateEmailAddress_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCredentials_ValidateEmailAddress_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCredentials_ValidateEmailAddress_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCredentials_ValidateEmailAddress_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCredentials_ValidateEmailAddress_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCredentials_ValidateEmailAddress_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCredentials_ValidateEmailAddress_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCredentials_ValidateEmailAddress_Request";
  }
  protected:
  explicit CCredentials_ValidateEmailAddress_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStokenFieldNumber = 1,
  };
  // optional string stoken = 1;
  bool has_stoken() const;
  private:
  bool _internal_has_stoken() const;
  public:
  void clear_stoken();
  const std::string& stoken() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stoken(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stoken();
  PROTOBUF_NODISCARD std::string* release_stoken();
  void set_allocated_stoken(std::string* stoken);
  private:
  const std::string& _internal_stoken() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stoken(const std::string& value);
  std::string* _internal_mutable_stoken();
  public:

  // @@protoc_insertion_point(class_scope:CCredentials_ValidateEmailAddress_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stoken_;
  friend struct ::TableStruct_steammessages_5fcredentials_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCredentials_ValidateEmailAddress_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCredentials_ValidateEmailAddress_Response) */ {
 public:
  inline CCredentials_ValidateEmailAddress_Response() : CCredentials_ValidateEmailAddress_Response(nullptr) {}
  ~CCredentials_ValidateEmailAddress_Response() override;
  explicit constexpr CCredentials_ValidateEmailAddress_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCredentials_ValidateEmailAddress_Response(const CCredentials_ValidateEmailAddress_Response& from);
  CCredentials_ValidateEmailAddress_Response(CCredentials_ValidateEmailAddress_Response&& from) noexcept
    : CCredentials_ValidateEmailAddress_Response() {
    *this = ::std::move(from);
  }

  inline CCredentials_ValidateEmailAddress_Response& operator=(const CCredentials_ValidateEmailAddress_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCredentials_ValidateEmailAddress_Response& operator=(CCredentials_ValidateEmailAddress_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCredentials_ValidateEmailAddress_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCredentials_ValidateEmailAddress_Response* internal_default_instance() {
    return reinterpret_cast<const CCredentials_ValidateEmailAddress_Response*>(
               &_CCredentials_ValidateEmailAddress_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CCredentials_ValidateEmailAddress_Response& a, CCredentials_ValidateEmailAddress_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CCredentials_ValidateEmailAddress_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCredentials_ValidateEmailAddress_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCredentials_ValidateEmailAddress_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCredentials_ValidateEmailAddress_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCredentials_ValidateEmailAddress_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCredentials_ValidateEmailAddress_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCredentials_ValidateEmailAddress_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCredentials_ValidateEmailAddress_Response";
  }
  protected:
  explicit CCredentials_ValidateEmailAddress_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWasValidatedFieldNumber = 1,
  };
  // optional bool was_validated = 1;
  bool has_was_validated() const;
  private:
  bool _internal_has_was_validated() const;
  public:
  void clear_was_validated();
  bool was_validated() const;
  void set_was_validated(bool value);
  private:
  bool _internal_was_validated() const;
  void _internal_set_was_validated(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CCredentials_ValidateEmailAddress_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool was_validated_;
  friend struct ::TableStruct_steammessages_5fcredentials_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCredentials_SteamGuardPhishingReport_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCredentials_SteamGuardPhishingReport_Request) */ {
 public:
  inline CCredentials_SteamGuardPhishingReport_Request() : CCredentials_SteamGuardPhishingReport_Request(nullptr) {}
  ~CCredentials_SteamGuardPhishingReport_Request() override;
  explicit constexpr CCredentials_SteamGuardPhishingReport_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCredentials_SteamGuardPhishingReport_Request(const CCredentials_SteamGuardPhishingReport_Request& from);
  CCredentials_SteamGuardPhishingReport_Request(CCredentials_SteamGuardPhishingReport_Request&& from) noexcept
    : CCredentials_SteamGuardPhishingReport_Request() {
    *this = ::std::move(from);
  }

  inline CCredentials_SteamGuardPhishingReport_Request& operator=(const CCredentials_SteamGuardPhishingReport_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCredentials_SteamGuardPhishingReport_Request& operator=(CCredentials_SteamGuardPhishingReport_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCredentials_SteamGuardPhishingReport_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCredentials_SteamGuardPhishingReport_Request* internal_default_instance() {
    return reinterpret_cast<const CCredentials_SteamGuardPhishingReport_Request*>(
               &_CCredentials_SteamGuardPhishingReport_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CCredentials_SteamGuardPhishingReport_Request& a, CCredentials_SteamGuardPhishingReport_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CCredentials_SteamGuardPhishingReport_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCredentials_SteamGuardPhishingReport_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCredentials_SteamGuardPhishingReport_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCredentials_SteamGuardPhishingReport_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCredentials_SteamGuardPhishingReport_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCredentials_SteamGuardPhishingReport_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCredentials_SteamGuardPhishingReport_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCredentials_SteamGuardPhishingReport_Request";
  }
  protected:
  explicit CCredentials_SteamGuardPhishingReport_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamStringFieldNumber = 1,
    kIpaddressActualFieldNumber = 2,
  };
  // optional string param_string = 1;
  bool has_param_string() const;
  private:
  bool _internal_has_param_string() const;
  public:
  void clear_param_string();
  const std::string& param_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_param_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_param_string();
  PROTOBUF_NODISCARD std::string* release_param_string();
  void set_allocated_param_string(std::string* param_string);
  private:
  const std::string& _internal_param_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_param_string(const std::string& value);
  std::string* _internal_mutable_param_string();
  public:

  // optional string ipaddress_actual = 2;
  bool has_ipaddress_actual() const;
  private:
  bool _internal_has_ipaddress_actual() const;
  public:
  void clear_ipaddress_actual();
  const std::string& ipaddress_actual() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ipaddress_actual(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ipaddress_actual();
  PROTOBUF_NODISCARD std::string* release_ipaddress_actual();
  void set_allocated_ipaddress_actual(std::string* ipaddress_actual);
  private:
  const std::string& _internal_ipaddress_actual() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ipaddress_actual(const std::string& value);
  std::string* _internal_mutable_ipaddress_actual();
  public:

  // @@protoc_insertion_point(class_scope:CCredentials_SteamGuardPhishingReport_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr param_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipaddress_actual_;
  friend struct ::TableStruct_steammessages_5fcredentials_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCredentials_SteamGuardPhishingReport_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCredentials_SteamGuardPhishingReport_Response) */ {
 public:
  inline CCredentials_SteamGuardPhishingReport_Response() : CCredentials_SteamGuardPhishingReport_Response(nullptr) {}
  ~CCredentials_SteamGuardPhishingReport_Response() override;
  explicit constexpr CCredentials_SteamGuardPhishingReport_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCredentials_SteamGuardPhishingReport_Response(const CCredentials_SteamGuardPhishingReport_Response& from);
  CCredentials_SteamGuardPhishingReport_Response(CCredentials_SteamGuardPhishingReport_Response&& from) noexcept
    : CCredentials_SteamGuardPhishingReport_Response() {
    *this = ::std::move(from);
  }

  inline CCredentials_SteamGuardPhishingReport_Response& operator=(const CCredentials_SteamGuardPhishingReport_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCredentials_SteamGuardPhishingReport_Response& operator=(CCredentials_SteamGuardPhishingReport_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCredentials_SteamGuardPhishingReport_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCredentials_SteamGuardPhishingReport_Response* internal_default_instance() {
    return reinterpret_cast<const CCredentials_SteamGuardPhishingReport_Response*>(
               &_CCredentials_SteamGuardPhishingReport_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CCredentials_SteamGuardPhishingReport_Response& a, CCredentials_SteamGuardPhishingReport_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CCredentials_SteamGuardPhishingReport_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCredentials_SteamGuardPhishingReport_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCredentials_SteamGuardPhishingReport_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCredentials_SteamGuardPhishingReport_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCredentials_SteamGuardPhishingReport_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCredentials_SteamGuardPhishingReport_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCredentials_SteamGuardPhishingReport_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCredentials_SteamGuardPhishingReport_Response";
  }
  protected:
  explicit CCredentials_SteamGuardPhishingReport_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpaddressLoginattemptFieldNumber = 1,
    kCountrynameLoginattemptFieldNumber = 2,
    kStatenameLoginattemptFieldNumber = 3,
    kCitynameLoginattemptFieldNumber = 4,
    kIpaddressActualFieldNumber = 5,
    kCountrynameActualFieldNumber = 6,
    kStatenameActualFieldNumber = 7,
    kCitynameActualFieldNumber = 8,
    kSteamguardCodeFieldNumber = 9,
  };
  // optional string ipaddress_loginattempt = 1;
  bool has_ipaddress_loginattempt() const;
  private:
  bool _internal_has_ipaddress_loginattempt() const;
  public:
  void clear_ipaddress_loginattempt();
  const std::string& ipaddress_loginattempt() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ipaddress_loginattempt(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ipaddress_loginattempt();
  PROTOBUF_NODISCARD std::string* release_ipaddress_loginattempt();
  void set_allocated_ipaddress_loginattempt(std::string* ipaddress_loginattempt);
  private:
  const std::string& _internal_ipaddress_loginattempt() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ipaddress_loginattempt(const std::string& value);
  std::string* _internal_mutable_ipaddress_loginattempt();
  public:

  // optional string countryname_loginattempt = 2;
  bool has_countryname_loginattempt() const;
  private:
  bool _internal_has_countryname_loginattempt() const;
  public:
  void clear_countryname_loginattempt();
  const std::string& countryname_loginattempt() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_countryname_loginattempt(ArgT0&& arg0, ArgT... args);
  std::string* mutable_countryname_loginattempt();
  PROTOBUF_NODISCARD std::string* release_countryname_loginattempt();
  void set_allocated_countryname_loginattempt(std::string* countryname_loginattempt);
  private:
  const std::string& _internal_countryname_loginattempt() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_countryname_loginattempt(const std::string& value);
  std::string* _internal_mutable_countryname_loginattempt();
  public:

  // optional string statename_loginattempt = 3;
  bool has_statename_loginattempt() const;
  private:
  bool _internal_has_statename_loginattempt() const;
  public:
  void clear_statename_loginattempt();
  const std::string& statename_loginattempt() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_statename_loginattempt(ArgT0&& arg0, ArgT... args);
  std::string* mutable_statename_loginattempt();
  PROTOBUF_NODISCARD std::string* release_statename_loginattempt();
  void set_allocated_statename_loginattempt(std::string* statename_loginattempt);
  private:
  const std::string& _internal_statename_loginattempt() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_statename_loginattempt(const std::string& value);
  std::string* _internal_mutable_statename_loginattempt();
  public:

  // optional string cityname_loginattempt = 4;
  bool has_cityname_loginattempt() const;
  private:
  bool _internal_has_cityname_loginattempt() const;
  public:
  void clear_cityname_loginattempt();
  const std::string& cityname_loginattempt() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cityname_loginattempt(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cityname_loginattempt();
  PROTOBUF_NODISCARD std::string* release_cityname_loginattempt();
  void set_allocated_cityname_loginattempt(std::string* cityname_loginattempt);
  private:
  const std::string& _internal_cityname_loginattempt() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cityname_loginattempt(const std::string& value);
  std::string* _internal_mutable_cityname_loginattempt();
  public:

  // optional string ipaddress_actual = 5;
  bool has_ipaddress_actual() const;
  private:
  bool _internal_has_ipaddress_actual() const;
  public:
  void clear_ipaddress_actual();
  const std::string& ipaddress_actual() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ipaddress_actual(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ipaddress_actual();
  PROTOBUF_NODISCARD std::string* release_ipaddress_actual();
  void set_allocated_ipaddress_actual(std::string* ipaddress_actual);
  private:
  const std::string& _internal_ipaddress_actual() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ipaddress_actual(const std::string& value);
  std::string* _internal_mutable_ipaddress_actual();
  public:

  // optional string countryname_actual = 6;
  bool has_countryname_actual() const;
  private:
  bool _internal_has_countryname_actual() const;
  public:
  void clear_countryname_actual();
  const std::string& countryname_actual() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_countryname_actual(ArgT0&& arg0, ArgT... args);
  std::string* mutable_countryname_actual();
  PROTOBUF_NODISCARD std::string* release_countryname_actual();
  void set_allocated_countryname_actual(std::string* countryname_actual);
  private:
  const std::string& _internal_countryname_actual() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_countryname_actual(const std::string& value);
  std::string* _internal_mutable_countryname_actual();
  public:

  // optional string statename_actual = 7;
  bool has_statename_actual() const;
  private:
  bool _internal_has_statename_actual() const;
  public:
  void clear_statename_actual();
  const std::string& statename_actual() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_statename_actual(ArgT0&& arg0, ArgT... args);
  std::string* mutable_statename_actual();
  PROTOBUF_NODISCARD std::string* release_statename_actual();
  void set_allocated_statename_actual(std::string* statename_actual);
  private:
  const std::string& _internal_statename_actual() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_statename_actual(const std::string& value);
  std::string* _internal_mutable_statename_actual();
  public:

  // optional string cityname_actual = 8;
  bool has_cityname_actual() const;
  private:
  bool _internal_has_cityname_actual() const;
  public:
  void clear_cityname_actual();
  const std::string& cityname_actual() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cityname_actual(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cityname_actual();
  PROTOBUF_NODISCARD std::string* release_cityname_actual();
  void set_allocated_cityname_actual(std::string* cityname_actual);
  private:
  const std::string& _internal_cityname_actual() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cityname_actual(const std::string& value);
  std::string* _internal_mutable_cityname_actual();
  public:

  // optional string steamguard_code = 9;
  bool has_steamguard_code() const;
  private:
  bool _internal_has_steamguard_code() const;
  public:
  void clear_steamguard_code();
  const std::string& steamguard_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_steamguard_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_steamguard_code();
  PROTOBUF_NODISCARD std::string* release_steamguard_code();
  void set_allocated_steamguard_code(std::string* steamguard_code);
  private:
  const std::string& _internal_steamguard_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_steamguard_code(const std::string& value);
  std::string* _internal_mutable_steamguard_code();
  public:

  // @@protoc_insertion_point(class_scope:CCredentials_SteamGuardPhishingReport_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipaddress_loginattempt_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr countryname_loginattempt_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr statename_loginattempt_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cityname_loginattempt_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipaddress_actual_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr countryname_actual_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr statename_actual_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cityname_actual_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr steamguard_code_;
  friend struct ::TableStruct_steammessages_5fcredentials_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCredentials_LastCredentialChangeTime_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCredentials_LastCredentialChangeTime_Request) */ {
 public:
  inline CCredentials_LastCredentialChangeTime_Request() : CCredentials_LastCredentialChangeTime_Request(nullptr) {}
  ~CCredentials_LastCredentialChangeTime_Request() override;
  explicit constexpr CCredentials_LastCredentialChangeTime_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCredentials_LastCredentialChangeTime_Request(const CCredentials_LastCredentialChangeTime_Request& from);
  CCredentials_LastCredentialChangeTime_Request(CCredentials_LastCredentialChangeTime_Request&& from) noexcept
    : CCredentials_LastCredentialChangeTime_Request() {
    *this = ::std::move(from);
  }

  inline CCredentials_LastCredentialChangeTime_Request& operator=(const CCredentials_LastCredentialChangeTime_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCredentials_LastCredentialChangeTime_Request& operator=(CCredentials_LastCredentialChangeTime_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCredentials_LastCredentialChangeTime_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCredentials_LastCredentialChangeTime_Request* internal_default_instance() {
    return reinterpret_cast<const CCredentials_LastCredentialChangeTime_Request*>(
               &_CCredentials_LastCredentialChangeTime_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CCredentials_LastCredentialChangeTime_Request& a, CCredentials_LastCredentialChangeTime_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CCredentials_LastCredentialChangeTime_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCredentials_LastCredentialChangeTime_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCredentials_LastCredentialChangeTime_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCredentials_LastCredentialChangeTime_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCredentials_LastCredentialChangeTime_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCredentials_LastCredentialChangeTime_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCredentials_LastCredentialChangeTime_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCredentials_LastCredentialChangeTime_Request";
  }
  protected:
  explicit CCredentials_LastCredentialChangeTime_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserChangesOnlyFieldNumber = 1,
  };
  // optional bool user_changes_only = 1;
  bool has_user_changes_only() const;
  private:
  bool _internal_has_user_changes_only() const;
  public:
  void clear_user_changes_only();
  bool user_changes_only() const;
  void set_user_changes_only(bool value);
  private:
  bool _internal_user_changes_only() const;
  void _internal_set_user_changes_only(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CCredentials_LastCredentialChangeTime_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool user_changes_only_;
  friend struct ::TableStruct_steammessages_5fcredentials_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCredentials_LastCredentialChangeTime_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCredentials_LastCredentialChangeTime_Response) */ {
 public:
  inline CCredentials_LastCredentialChangeTime_Response() : CCredentials_LastCredentialChangeTime_Response(nullptr) {}
  ~CCredentials_LastCredentialChangeTime_Response() override;
  explicit constexpr CCredentials_LastCredentialChangeTime_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCredentials_LastCredentialChangeTime_Response(const CCredentials_LastCredentialChangeTime_Response& from);
  CCredentials_LastCredentialChangeTime_Response(CCredentials_LastCredentialChangeTime_Response&& from) noexcept
    : CCredentials_LastCredentialChangeTime_Response() {
    *this = ::std::move(from);
  }

  inline CCredentials_LastCredentialChangeTime_Response& operator=(const CCredentials_LastCredentialChangeTime_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCredentials_LastCredentialChangeTime_Response& operator=(CCredentials_LastCredentialChangeTime_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCredentials_LastCredentialChangeTime_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCredentials_LastCredentialChangeTime_Response* internal_default_instance() {
    return reinterpret_cast<const CCredentials_LastCredentialChangeTime_Response*>(
               &_CCredentials_LastCredentialChangeTime_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CCredentials_LastCredentialChangeTime_Response& a, CCredentials_LastCredentialChangeTime_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CCredentials_LastCredentialChangeTime_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCredentials_LastCredentialChangeTime_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCredentials_LastCredentialChangeTime_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCredentials_LastCredentialChangeTime_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCredentials_LastCredentialChangeTime_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCredentials_LastCredentialChangeTime_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCredentials_LastCredentialChangeTime_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCredentials_LastCredentialChangeTime_Response";
  }
  protected:
  explicit CCredentials_LastCredentialChangeTime_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampLastPasswordChangeFieldNumber = 1,
    kTimestampLastEmailChangeFieldNumber = 2,
    kTimestampLastPasswordResetFieldNumber = 3,
  };
  // optional fixed32 timestamp_last_password_change = 1;
  bool has_timestamp_last_password_change() const;
  private:
  bool _internal_has_timestamp_last_password_change() const;
  public:
  void clear_timestamp_last_password_change();
  uint32_t timestamp_last_password_change() const;
  void set_timestamp_last_password_change(uint32_t value);
  private:
  uint32_t _internal_timestamp_last_password_change() const;
  void _internal_set_timestamp_last_password_change(uint32_t value);
  public:

  // optional fixed32 timestamp_last_email_change = 2;
  bool has_timestamp_last_email_change() const;
  private:
  bool _internal_has_timestamp_last_email_change() const;
  public:
  void clear_timestamp_last_email_change();
  uint32_t timestamp_last_email_change() const;
  void set_timestamp_last_email_change(uint32_t value);
  private:
  uint32_t _internal_timestamp_last_email_change() const;
  void _internal_set_timestamp_last_email_change(uint32_t value);
  public:

  // optional fixed32 timestamp_last_password_reset = 3;
  bool has_timestamp_last_password_reset() const;
  private:
  bool _internal_has_timestamp_last_password_reset() const;
  public:
  void clear_timestamp_last_password_reset();
  uint32_t timestamp_last_password_reset() const;
  void set_timestamp_last_password_reset(uint32_t value);
  private:
  uint32_t _internal_timestamp_last_password_reset() const;
  void _internal_set_timestamp_last_password_reset(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CCredentials_LastCredentialChangeTime_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t timestamp_last_password_change_;
  uint32_t timestamp_last_email_change_;
  uint32_t timestamp_last_password_reset_;
  friend struct ::TableStruct_steammessages_5fcredentials_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCredentials_GetAccountAuthSecret_Request final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CCredentials_GetAccountAuthSecret_Request) */ {
 public:
  inline CCredentials_GetAccountAuthSecret_Request() : CCredentials_GetAccountAuthSecret_Request(nullptr) {}
  explicit constexpr CCredentials_GetAccountAuthSecret_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCredentials_GetAccountAuthSecret_Request(const CCredentials_GetAccountAuthSecret_Request& from);
  CCredentials_GetAccountAuthSecret_Request(CCredentials_GetAccountAuthSecret_Request&& from) noexcept
    : CCredentials_GetAccountAuthSecret_Request() {
    *this = ::std::move(from);
  }

  inline CCredentials_GetAccountAuthSecret_Request& operator=(const CCredentials_GetAccountAuthSecret_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCredentials_GetAccountAuthSecret_Request& operator=(CCredentials_GetAccountAuthSecret_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCredentials_GetAccountAuthSecret_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCredentials_GetAccountAuthSecret_Request* internal_default_instance() {
    return reinterpret_cast<const CCredentials_GetAccountAuthSecret_Request*>(
               &_CCredentials_GetAccountAuthSecret_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CCredentials_GetAccountAuthSecret_Request& a, CCredentials_GetAccountAuthSecret_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CCredentials_GetAccountAuthSecret_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCredentials_GetAccountAuthSecret_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCredentials_GetAccountAuthSecret_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCredentials_GetAccountAuthSecret_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CCredentials_GetAccountAuthSecret_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CCredentials_GetAccountAuthSecret_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCredentials_GetAccountAuthSecret_Request";
  }
  protected:
  explicit CCredentials_GetAccountAuthSecret_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CCredentials_GetAccountAuthSecret_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fcredentials_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCredentials_GetAccountAuthSecret_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCredentials_GetAccountAuthSecret_Response) */ {
 public:
  inline CCredentials_GetAccountAuthSecret_Response() : CCredentials_GetAccountAuthSecret_Response(nullptr) {}
  ~CCredentials_GetAccountAuthSecret_Response() override;
  explicit constexpr CCredentials_GetAccountAuthSecret_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCredentials_GetAccountAuthSecret_Response(const CCredentials_GetAccountAuthSecret_Response& from);
  CCredentials_GetAccountAuthSecret_Response(CCredentials_GetAccountAuthSecret_Response&& from) noexcept
    : CCredentials_GetAccountAuthSecret_Response() {
    *this = ::std::move(from);
  }

  inline CCredentials_GetAccountAuthSecret_Response& operator=(const CCredentials_GetAccountAuthSecret_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCredentials_GetAccountAuthSecret_Response& operator=(CCredentials_GetAccountAuthSecret_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCredentials_GetAccountAuthSecret_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCredentials_GetAccountAuthSecret_Response* internal_default_instance() {
    return reinterpret_cast<const CCredentials_GetAccountAuthSecret_Response*>(
               &_CCredentials_GetAccountAuthSecret_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CCredentials_GetAccountAuthSecret_Response& a, CCredentials_GetAccountAuthSecret_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CCredentials_GetAccountAuthSecret_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCredentials_GetAccountAuthSecret_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCredentials_GetAccountAuthSecret_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCredentials_GetAccountAuthSecret_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCredentials_GetAccountAuthSecret_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCredentials_GetAccountAuthSecret_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCredentials_GetAccountAuthSecret_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCredentials_GetAccountAuthSecret_Response";
  }
  protected:
  explicit CCredentials_GetAccountAuthSecret_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecretFieldNumber = 2,
    kSecretIdFieldNumber = 1,
  };
  // optional bytes secret = 2;
  bool has_secret() const;
  private:
  bool _internal_has_secret() const;
  public:
  void clear_secret();
  const std::string& secret() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_secret(ArgT0&& arg0, ArgT... args);
  std::string* mutable_secret();
  PROTOBUF_NODISCARD std::string* release_secret();
  void set_allocated_secret(std::string* secret);
  private:
  const std::string& _internal_secret() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secret(const std::string& value);
  std::string* _internal_mutable_secret();
  public:

  // optional int32 secret_id = 1;
  bool has_secret_id() const;
  private:
  bool _internal_has_secret_id() const;
  public:
  void clear_secret_id();
  int32_t secret_id() const;
  void set_secret_id(int32_t value);
  private:
  int32_t _internal_secret_id() const;
  void _internal_set_secret_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CCredentials_GetAccountAuthSecret_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secret_;
  int32_t secret_id_;
  friend struct ::TableStruct_steammessages_5fcredentials_2esteamclient_2eproto;
};
// ===================================================================

class Credentials_Stub;

class Credentials : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline Credentials() {};
 public:
  virtual ~Credentials();

  typedef Credentials_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void TestAvailablePassword(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCredentials_TestAvailablePassword_Request* request,
                       ::CCredentials_TestAvailablePassword_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetSteamGuardDetails(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCredentials_GetSteamGuardDetails_Request* request,
                       ::CCredentials_GetSteamGuardDetails_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void ValidateEmailAddress(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCredentials_ValidateEmailAddress_Request* request,
                       ::CCredentials_ValidateEmailAddress_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void SteamGuardPhishingReport(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCredentials_SteamGuardPhishingReport_Request* request,
                       ::CCredentials_SteamGuardPhishingReport_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetCredentialChangeTimeDetails(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCredentials_LastCredentialChangeTime_Request* request,
                       ::CCredentials_LastCredentialChangeTime_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetAccountAuthSecret(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCredentials_GetAccountAuthSecret_Request* request,
                       ::CCredentials_GetAccountAuthSecret_Response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Credentials);
};

class Credentials_Stub : public Credentials {
 public:
  Credentials_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  Credentials_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~Credentials_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements Credentials ------------------------------------------

  void TestAvailablePassword(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCredentials_TestAvailablePassword_Request* request,
                       ::CCredentials_TestAvailablePassword_Response* response,
                       ::google::protobuf::Closure* done);
  void GetSteamGuardDetails(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCredentials_GetSteamGuardDetails_Request* request,
                       ::CCredentials_GetSteamGuardDetails_Response* response,
                       ::google::protobuf::Closure* done);
  void ValidateEmailAddress(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCredentials_ValidateEmailAddress_Request* request,
                       ::CCredentials_ValidateEmailAddress_Response* response,
                       ::google::protobuf::Closure* done);
  void SteamGuardPhishingReport(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCredentials_SteamGuardPhishingReport_Request* request,
                       ::CCredentials_SteamGuardPhishingReport_Response* response,
                       ::google::protobuf::Closure* done);
  void GetCredentialChangeTimeDetails(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCredentials_LastCredentialChangeTime_Request* request,
                       ::CCredentials_LastCredentialChangeTime_Response* response,
                       ::google::protobuf::Closure* done);
  void GetAccountAuthSecret(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCredentials_GetAccountAuthSecret_Request* request,
                       ::CCredentials_GetAccountAuthSecret_Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Credentials_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CCredentials_TestAvailablePassword_Request

// optional string password = 1;
inline bool CCredentials_TestAvailablePassword_Request::_internal_has_password() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCredentials_TestAvailablePassword_Request::has_password() const {
  return _internal_has_password();
}
inline void CCredentials_TestAvailablePassword_Request::clear_password() {
  password_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CCredentials_TestAvailablePassword_Request::password() const {
  // @@protoc_insertion_point(field_get:CCredentials_TestAvailablePassword_Request.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCredentials_TestAvailablePassword_Request::set_password(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCredentials_TestAvailablePassword_Request.password)
}
inline std::string* CCredentials_TestAvailablePassword_Request::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:CCredentials_TestAvailablePassword_Request.password)
  return _s;
}
inline const std::string& CCredentials_TestAvailablePassword_Request::_internal_password() const {
  return password_.Get();
}
inline void CCredentials_TestAvailablePassword_Request::_internal_set_password(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCredentials_TestAvailablePassword_Request::_internal_mutable_password() {
  _has_bits_[0] |= 0x00000001u;
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCredentials_TestAvailablePassword_Request::release_password() {
  // @@protoc_insertion_point(field_release:CCredentials_TestAvailablePassword_Request.password)
  if (!_internal_has_password()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = password_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (password_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCredentials_TestAvailablePassword_Request::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (password_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCredentials_TestAvailablePassword_Request.password)
}

// optional bytes sha_digest_password = 2;
inline bool CCredentials_TestAvailablePassword_Request::_internal_has_sha_digest_password() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCredentials_TestAvailablePassword_Request::has_sha_digest_password() const {
  return _internal_has_sha_digest_password();
}
inline void CCredentials_TestAvailablePassword_Request::clear_sha_digest_password() {
  sha_digest_password_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CCredentials_TestAvailablePassword_Request::sha_digest_password() const {
  // @@protoc_insertion_point(field_get:CCredentials_TestAvailablePassword_Request.sha_digest_password)
  return _internal_sha_digest_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCredentials_TestAvailablePassword_Request::set_sha_digest_password(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 sha_digest_password_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCredentials_TestAvailablePassword_Request.sha_digest_password)
}
inline std::string* CCredentials_TestAvailablePassword_Request::mutable_sha_digest_password() {
  std::string* _s = _internal_mutable_sha_digest_password();
  // @@protoc_insertion_point(field_mutable:CCredentials_TestAvailablePassword_Request.sha_digest_password)
  return _s;
}
inline const std::string& CCredentials_TestAvailablePassword_Request::_internal_sha_digest_password() const {
  return sha_digest_password_.Get();
}
inline void CCredentials_TestAvailablePassword_Request::_internal_set_sha_digest_password(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  sha_digest_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCredentials_TestAvailablePassword_Request::_internal_mutable_sha_digest_password() {
  _has_bits_[0] |= 0x00000002u;
  return sha_digest_password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCredentials_TestAvailablePassword_Request::release_sha_digest_password() {
  // @@protoc_insertion_point(field_release:CCredentials_TestAvailablePassword_Request.sha_digest_password)
  if (!_internal_has_sha_digest_password()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = sha_digest_password_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sha_digest_password_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sha_digest_password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCredentials_TestAvailablePassword_Request::set_allocated_sha_digest_password(std::string* sha_digest_password) {
  if (sha_digest_password != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sha_digest_password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sha_digest_password,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sha_digest_password_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sha_digest_password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCredentials_TestAvailablePassword_Request.sha_digest_password)
}

// optional string account_name = 3;
inline bool CCredentials_TestAvailablePassword_Request::_internal_has_account_name() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CCredentials_TestAvailablePassword_Request::has_account_name() const {
  return _internal_has_account_name();
}
inline void CCredentials_TestAvailablePassword_Request::clear_account_name() {
  account_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CCredentials_TestAvailablePassword_Request::account_name() const {
  // @@protoc_insertion_point(field_get:CCredentials_TestAvailablePassword_Request.account_name)
  return _internal_account_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCredentials_TestAvailablePassword_Request::set_account_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 account_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCredentials_TestAvailablePassword_Request.account_name)
}
inline std::string* CCredentials_TestAvailablePassword_Request::mutable_account_name() {
  std::string* _s = _internal_mutable_account_name();
  // @@protoc_insertion_point(field_mutable:CCredentials_TestAvailablePassword_Request.account_name)
  return _s;
}
inline const std::string& CCredentials_TestAvailablePassword_Request::_internal_account_name() const {
  return account_name_.Get();
}
inline void CCredentials_TestAvailablePassword_Request::_internal_set_account_name(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  account_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCredentials_TestAvailablePassword_Request::_internal_mutable_account_name() {
  _has_bits_[0] |= 0x00000004u;
  return account_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCredentials_TestAvailablePassword_Request::release_account_name() {
  // @@protoc_insertion_point(field_release:CCredentials_TestAvailablePassword_Request.account_name)
  if (!_internal_has_account_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = account_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (account_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    account_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCredentials_TestAvailablePassword_Request::set_allocated_account_name(std::string* account_name) {
  if (account_name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  account_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (account_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    account_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCredentials_TestAvailablePassword_Request.account_name)
}

// -------------------------------------------------------------------

// CCredentials_TestAvailablePassword_Response

// optional bool is_valid = 3;
inline bool CCredentials_TestAvailablePassword_Response::_internal_has_is_valid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCredentials_TestAvailablePassword_Response::has_is_valid() const {
  return _internal_has_is_valid();
}
inline void CCredentials_TestAvailablePassword_Response::clear_is_valid() {
  is_valid_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CCredentials_TestAvailablePassword_Response::_internal_is_valid() const {
  return is_valid_;
}
inline bool CCredentials_TestAvailablePassword_Response::is_valid() const {
  // @@protoc_insertion_point(field_get:CCredentials_TestAvailablePassword_Response.is_valid)
  return _internal_is_valid();
}
inline void CCredentials_TestAvailablePassword_Response::_internal_set_is_valid(bool value) {
  _has_bits_[0] |= 0x00000001u;
  is_valid_ = value;
}
inline void CCredentials_TestAvailablePassword_Response::set_is_valid(bool value) {
  _internal_set_is_valid(value);
  // @@protoc_insertion_point(field_set:CCredentials_TestAvailablePassword_Response.is_valid)
}

// -------------------------------------------------------------------

// CCredentials_GetSteamGuardDetails_Request

// optional string webcookie = 2 [(.description) = "The user\'s Steam Guard machine auth cookie. If present, it\'ll be used to get the user\'s machine ID instead of the AM session."];
inline bool CCredentials_GetSteamGuardDetails_Request::_internal_has_webcookie() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCredentials_GetSteamGuardDetails_Request::has_webcookie() const {
  return _internal_has_webcookie();
}
inline void CCredentials_GetSteamGuardDetails_Request::clear_webcookie() {
  webcookie_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CCredentials_GetSteamGuardDetails_Request::webcookie() const {
  // @@protoc_insertion_point(field_get:CCredentials_GetSteamGuardDetails_Request.webcookie)
  return _internal_webcookie();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCredentials_GetSteamGuardDetails_Request::set_webcookie(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 webcookie_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCredentials_GetSteamGuardDetails_Request.webcookie)
}
inline std::string* CCredentials_GetSteamGuardDetails_Request::mutable_webcookie() {
  std::string* _s = _internal_mutable_webcookie();
  // @@protoc_insertion_point(field_mutable:CCredentials_GetSteamGuardDetails_Request.webcookie)
  return _s;
}
inline const std::string& CCredentials_GetSteamGuardDetails_Request::_internal_webcookie() const {
  return webcookie_.Get();
}
inline void CCredentials_GetSteamGuardDetails_Request::_internal_set_webcookie(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  webcookie_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCredentials_GetSteamGuardDetails_Request::_internal_mutable_webcookie() {
  _has_bits_[0] |= 0x00000001u;
  return webcookie_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCredentials_GetSteamGuardDetails_Request::release_webcookie() {
  // @@protoc_insertion_point(field_release:CCredentials_GetSteamGuardDetails_Request.webcookie)
  if (!_internal_has_webcookie()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = webcookie_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (webcookie_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    webcookie_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCredentials_GetSteamGuardDetails_Request::set_allocated_webcookie(std::string* webcookie) {
  if (webcookie != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  webcookie_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), webcookie,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (webcookie_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    webcookie_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCredentials_GetSteamGuardDetails_Request.webcookie)
}

// optional fixed32 timestamp_minimum_wanted = 3;
inline bool CCredentials_GetSteamGuardDetails_Request::_internal_has_timestamp_minimum_wanted() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CCredentials_GetSteamGuardDetails_Request::has_timestamp_minimum_wanted() const {
  return _internal_has_timestamp_minimum_wanted();
}
inline void CCredentials_GetSteamGuardDetails_Request::clear_timestamp_minimum_wanted() {
  timestamp_minimum_wanted_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CCredentials_GetSteamGuardDetails_Request::_internal_timestamp_minimum_wanted() const {
  return timestamp_minimum_wanted_;
}
inline uint32_t CCredentials_GetSteamGuardDetails_Request::timestamp_minimum_wanted() const {
  // @@protoc_insertion_point(field_get:CCredentials_GetSteamGuardDetails_Request.timestamp_minimum_wanted)
  return _internal_timestamp_minimum_wanted();
}
inline void CCredentials_GetSteamGuardDetails_Request::_internal_set_timestamp_minimum_wanted(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  timestamp_minimum_wanted_ = value;
}
inline void CCredentials_GetSteamGuardDetails_Request::set_timestamp_minimum_wanted(uint32_t value) {
  _internal_set_timestamp_minimum_wanted(value);
  // @@protoc_insertion_point(field_set:CCredentials_GetSteamGuardDetails_Request.timestamp_minimum_wanted)
}

// optional int32 deprecated_ipaddress = 4;
inline bool CCredentials_GetSteamGuardDetails_Request::_internal_has_deprecated_ipaddress() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CCredentials_GetSteamGuardDetails_Request::has_deprecated_ipaddress() const {
  return _internal_has_deprecated_ipaddress();
}
inline void CCredentials_GetSteamGuardDetails_Request::clear_deprecated_ipaddress() {
  deprecated_ipaddress_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t CCredentials_GetSteamGuardDetails_Request::_internal_deprecated_ipaddress() const {
  return deprecated_ipaddress_;
}
inline int32_t CCredentials_GetSteamGuardDetails_Request::deprecated_ipaddress() const {
  // @@protoc_insertion_point(field_get:CCredentials_GetSteamGuardDetails_Request.deprecated_ipaddress)
  return _internal_deprecated_ipaddress();
}
inline void CCredentials_GetSteamGuardDetails_Request::_internal_set_deprecated_ipaddress(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  deprecated_ipaddress_ = value;
}
inline void CCredentials_GetSteamGuardDetails_Request::set_deprecated_ipaddress(int32_t value) {
  _internal_set_deprecated_ipaddress(value);
  // @@protoc_insertion_point(field_set:CCredentials_GetSteamGuardDetails_Request.deprecated_ipaddress)
}

// optional .CMsgIPAddress ip_address = 5;
inline bool CCredentials_GetSteamGuardDetails_Request::_internal_has_ip_address() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || ip_address_ != nullptr);
  return value;
}
inline bool CCredentials_GetSteamGuardDetails_Request::has_ip_address() const {
  return _internal_has_ip_address();
}
inline const ::CMsgIPAddress& CCredentials_GetSteamGuardDetails_Request::_internal_ip_address() const {
  const ::CMsgIPAddress* p = ip_address_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgIPAddress&>(
      ::_CMsgIPAddress_default_instance_);
}
inline const ::CMsgIPAddress& CCredentials_GetSteamGuardDetails_Request::ip_address() const {
  // @@protoc_insertion_point(field_get:CCredentials_GetSteamGuardDetails_Request.ip_address)
  return _internal_ip_address();
}
inline void CCredentials_GetSteamGuardDetails_Request::unsafe_arena_set_allocated_ip_address(
    ::CMsgIPAddress* ip_address) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ip_address_);
  }
  ip_address_ = ip_address;
  if (ip_address) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CCredentials_GetSteamGuardDetails_Request.ip_address)
}
inline ::CMsgIPAddress* CCredentials_GetSteamGuardDetails_Request::release_ip_address() {
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgIPAddress* temp = ip_address_;
  ip_address_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgIPAddress* CCredentials_GetSteamGuardDetails_Request::unsafe_arena_release_ip_address() {
  // @@protoc_insertion_point(field_release:CCredentials_GetSteamGuardDetails_Request.ip_address)
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgIPAddress* temp = ip_address_;
  ip_address_ = nullptr;
  return temp;
}
inline ::CMsgIPAddress* CCredentials_GetSteamGuardDetails_Request::_internal_mutable_ip_address() {
  _has_bits_[0] |= 0x00000002u;
  if (ip_address_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgIPAddress>(GetArenaForAllocation());
    ip_address_ = p;
  }
  return ip_address_;
}
inline ::CMsgIPAddress* CCredentials_GetSteamGuardDetails_Request::mutable_ip_address() {
  ::CMsgIPAddress* _msg = _internal_mutable_ip_address();
  // @@protoc_insertion_point(field_mutable:CCredentials_GetSteamGuardDetails_Request.ip_address)
  return _msg;
}
inline void CCredentials_GetSteamGuardDetails_Request::set_allocated_ip_address(::CMsgIPAddress* ip_address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ip_address_);
  }
  if (ip_address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ip_address));
    if (message_arena != submessage_arena) {
      ip_address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ip_address, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ip_address_ = ip_address;
  // @@protoc_insertion_point(field_set_allocated:CCredentials_GetSteamGuardDetails_Request.ip_address)
}

// -------------------------------------------------------------------

// CCredentials_GetSteamGuardDetails_Response_SessionData

// optional uint64 machine_id = 1;
inline bool CCredentials_GetSteamGuardDetails_Response_SessionData::_internal_has_machine_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CCredentials_GetSteamGuardDetails_Response_SessionData::has_machine_id() const {
  return _internal_has_machine_id();
}
inline void CCredentials_GetSteamGuardDetails_Response_SessionData::clear_machine_id() {
  machine_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CCredentials_GetSteamGuardDetails_Response_SessionData::_internal_machine_id() const {
  return machine_id_;
}
inline uint64_t CCredentials_GetSteamGuardDetails_Response_SessionData::machine_id() const {
  // @@protoc_insertion_point(field_get:CCredentials_GetSteamGuardDetails_Response.SessionData.machine_id)
  return _internal_machine_id();
}
inline void CCredentials_GetSteamGuardDetails_Response_SessionData::_internal_set_machine_id(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  machine_id_ = value;
}
inline void CCredentials_GetSteamGuardDetails_Response_SessionData::set_machine_id(uint64_t value) {
  _internal_set_machine_id(value);
  // @@protoc_insertion_point(field_set:CCredentials_GetSteamGuardDetails_Response.SessionData.machine_id)
}

// optional string machine_name_userchosen = 2;
inline bool CCredentials_GetSteamGuardDetails_Response_SessionData::_internal_has_machine_name_userchosen() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCredentials_GetSteamGuardDetails_Response_SessionData::has_machine_name_userchosen() const {
  return _internal_has_machine_name_userchosen();
}
inline void CCredentials_GetSteamGuardDetails_Response_SessionData::clear_machine_name_userchosen() {
  machine_name_userchosen_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CCredentials_GetSteamGuardDetails_Response_SessionData::machine_name_userchosen() const {
  // @@protoc_insertion_point(field_get:CCredentials_GetSteamGuardDetails_Response.SessionData.machine_name_userchosen)
  return _internal_machine_name_userchosen();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCredentials_GetSteamGuardDetails_Response_SessionData::set_machine_name_userchosen(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 machine_name_userchosen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCredentials_GetSteamGuardDetails_Response.SessionData.machine_name_userchosen)
}
inline std::string* CCredentials_GetSteamGuardDetails_Response_SessionData::mutable_machine_name_userchosen() {
  std::string* _s = _internal_mutable_machine_name_userchosen();
  // @@protoc_insertion_point(field_mutable:CCredentials_GetSteamGuardDetails_Response.SessionData.machine_name_userchosen)
  return _s;
}
inline const std::string& CCredentials_GetSteamGuardDetails_Response_SessionData::_internal_machine_name_userchosen() const {
  return machine_name_userchosen_.Get();
}
inline void CCredentials_GetSteamGuardDetails_Response_SessionData::_internal_set_machine_name_userchosen(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  machine_name_userchosen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCredentials_GetSteamGuardDetails_Response_SessionData::_internal_mutable_machine_name_userchosen() {
  _has_bits_[0] |= 0x00000001u;
  return machine_name_userchosen_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCredentials_GetSteamGuardDetails_Response_SessionData::release_machine_name_userchosen() {
  // @@protoc_insertion_point(field_release:CCredentials_GetSteamGuardDetails_Response.SessionData.machine_name_userchosen)
  if (!_internal_has_machine_name_userchosen()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = machine_name_userchosen_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (machine_name_userchosen_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    machine_name_userchosen_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCredentials_GetSteamGuardDetails_Response_SessionData::set_allocated_machine_name_userchosen(std::string* machine_name_userchosen) {
  if (machine_name_userchosen != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  machine_name_userchosen_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), machine_name_userchosen,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (machine_name_userchosen_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    machine_name_userchosen_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCredentials_GetSteamGuardDetails_Response.SessionData.machine_name_userchosen)
}

// optional fixed32 timestamp_machine_steamguard_enabled = 3;
inline bool CCredentials_GetSteamGuardDetails_Response_SessionData::_internal_has_timestamp_machine_steamguard_enabled() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CCredentials_GetSteamGuardDetails_Response_SessionData::has_timestamp_machine_steamguard_enabled() const {
  return _internal_has_timestamp_machine_steamguard_enabled();
}
inline void CCredentials_GetSteamGuardDetails_Response_SessionData::clear_timestamp_machine_steamguard_enabled() {
  timestamp_machine_steamguard_enabled_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CCredentials_GetSteamGuardDetails_Response_SessionData::_internal_timestamp_machine_steamguard_enabled() const {
  return timestamp_machine_steamguard_enabled_;
}
inline uint32_t CCredentials_GetSteamGuardDetails_Response_SessionData::timestamp_machine_steamguard_enabled() const {
  // @@protoc_insertion_point(field_get:CCredentials_GetSteamGuardDetails_Response.SessionData.timestamp_machine_steamguard_enabled)
  return _internal_timestamp_machine_steamguard_enabled();
}
inline void CCredentials_GetSteamGuardDetails_Response_SessionData::_internal_set_timestamp_machine_steamguard_enabled(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  timestamp_machine_steamguard_enabled_ = value;
}
inline void CCredentials_GetSteamGuardDetails_Response_SessionData::set_timestamp_machine_steamguard_enabled(uint32_t value) {
  _internal_set_timestamp_machine_steamguard_enabled(value);
  // @@protoc_insertion_point(field_set:CCredentials_GetSteamGuardDetails_Response.SessionData.timestamp_machine_steamguard_enabled)
}

// optional bool authentication_exists_from_geoloc_before_mintime = 4;
inline bool CCredentials_GetSteamGuardDetails_Response_SessionData::_internal_has_authentication_exists_from_geoloc_before_mintime() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CCredentials_GetSteamGuardDetails_Response_SessionData::has_authentication_exists_from_geoloc_before_mintime() const {
  return _internal_has_authentication_exists_from_geoloc_before_mintime();
}
inline void CCredentials_GetSteamGuardDetails_Response_SessionData::clear_authentication_exists_from_geoloc_before_mintime() {
  authentication_exists_from_geoloc_before_mintime_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CCredentials_GetSteamGuardDetails_Response_SessionData::_internal_authentication_exists_from_geoloc_before_mintime() const {
  return authentication_exists_from_geoloc_before_mintime_;
}
inline bool CCredentials_GetSteamGuardDetails_Response_SessionData::authentication_exists_from_geoloc_before_mintime() const {
  // @@protoc_insertion_point(field_get:CCredentials_GetSteamGuardDetails_Response.SessionData.authentication_exists_from_geoloc_before_mintime)
  return _internal_authentication_exists_from_geoloc_before_mintime();
}
inline void CCredentials_GetSteamGuardDetails_Response_SessionData::_internal_set_authentication_exists_from_geoloc_before_mintime(bool value) {
  _has_bits_[0] |= 0x00000010u;
  authentication_exists_from_geoloc_before_mintime_ = value;
}
inline void CCredentials_GetSteamGuardDetails_Response_SessionData::set_authentication_exists_from_geoloc_before_mintime(bool value) {
  _internal_set_authentication_exists_from_geoloc_before_mintime(value);
  // @@protoc_insertion_point(field_set:CCredentials_GetSteamGuardDetails_Response.SessionData.authentication_exists_from_geoloc_before_mintime)
}

// optional bool authentication_exists_from_same_ip_before_mintime = 6;
inline bool CCredentials_GetSteamGuardDetails_Response_SessionData::_internal_has_authentication_exists_from_same_ip_before_mintime() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CCredentials_GetSteamGuardDetails_Response_SessionData::has_authentication_exists_from_same_ip_before_mintime() const {
  return _internal_has_authentication_exists_from_same_ip_before_mintime();
}
inline void CCredentials_GetSteamGuardDetails_Response_SessionData::clear_authentication_exists_from_same_ip_before_mintime() {
  authentication_exists_from_same_ip_before_mintime_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CCredentials_GetSteamGuardDetails_Response_SessionData::_internal_authentication_exists_from_same_ip_before_mintime() const {
  return authentication_exists_from_same_ip_before_mintime_;
}
inline bool CCredentials_GetSteamGuardDetails_Response_SessionData::authentication_exists_from_same_ip_before_mintime() const {
  // @@protoc_insertion_point(field_get:CCredentials_GetSteamGuardDetails_Response.SessionData.authentication_exists_from_same_ip_before_mintime)
  return _internal_authentication_exists_from_same_ip_before_mintime();
}
inline void CCredentials_GetSteamGuardDetails_Response_SessionData::_internal_set_authentication_exists_from_same_ip_before_mintime(bool value) {
  _has_bits_[0] |= 0x00000020u;
  authentication_exists_from_same_ip_before_mintime_ = value;
}
inline void CCredentials_GetSteamGuardDetails_Response_SessionData::set_authentication_exists_from_same_ip_before_mintime(bool value) {
  _internal_set_authentication_exists_from_same_ip_before_mintime(value);
  // @@protoc_insertion_point(field_set:CCredentials_GetSteamGuardDetails_Response.SessionData.authentication_exists_from_same_ip_before_mintime)
}

// optional uint32 public_ipv4 = 7;
inline bool CCredentials_GetSteamGuardDetails_Response_SessionData::_internal_has_public_ipv4() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CCredentials_GetSteamGuardDetails_Response_SessionData::has_public_ipv4() const {
  return _internal_has_public_ipv4();
}
inline void CCredentials_GetSteamGuardDetails_Response_SessionData::clear_public_ipv4() {
  public_ipv4_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CCredentials_GetSteamGuardDetails_Response_SessionData::_internal_public_ipv4() const {
  return public_ipv4_;
}
inline uint32_t CCredentials_GetSteamGuardDetails_Response_SessionData::public_ipv4() const {
  // @@protoc_insertion_point(field_get:CCredentials_GetSteamGuardDetails_Response.SessionData.public_ipv4)
  return _internal_public_ipv4();
}
inline void CCredentials_GetSteamGuardDetails_Response_SessionData::_internal_set_public_ipv4(uint32_t value) {
  _has_bits_[0] |= 0x00000040u;
  public_ipv4_ = value;
}
inline void CCredentials_GetSteamGuardDetails_Response_SessionData::set_public_ipv4(uint32_t value) {
  _internal_set_public_ipv4(value);
  // @@protoc_insertion_point(field_set:CCredentials_GetSteamGuardDetails_Response.SessionData.public_ipv4)
}

// optional string public_ip_address = 8;
inline bool CCredentials_GetSteamGuardDetails_Response_SessionData::_internal_has_public_ip_address() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCredentials_GetSteamGuardDetails_Response_SessionData::has_public_ip_address() const {
  return _internal_has_public_ip_address();
}
inline void CCredentials_GetSteamGuardDetails_Response_SessionData::clear_public_ip_address() {
  public_ip_address_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CCredentials_GetSteamGuardDetails_Response_SessionData::public_ip_address() const {
  // @@protoc_insertion_point(field_get:CCredentials_GetSteamGuardDetails_Response.SessionData.public_ip_address)
  return _internal_public_ip_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCredentials_GetSteamGuardDetails_Response_SessionData::set_public_ip_address(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 public_ip_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCredentials_GetSteamGuardDetails_Response.SessionData.public_ip_address)
}
inline std::string* CCredentials_GetSteamGuardDetails_Response_SessionData::mutable_public_ip_address() {
  std::string* _s = _internal_mutable_public_ip_address();
  // @@protoc_insertion_point(field_mutable:CCredentials_GetSteamGuardDetails_Response.SessionData.public_ip_address)
  return _s;
}
inline const std::string& CCredentials_GetSteamGuardDetails_Response_SessionData::_internal_public_ip_address() const {
  return public_ip_address_.Get();
}
inline void CCredentials_GetSteamGuardDetails_Response_SessionData::_internal_set_public_ip_address(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  public_ip_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCredentials_GetSteamGuardDetails_Response_SessionData::_internal_mutable_public_ip_address() {
  _has_bits_[0] |= 0x00000002u;
  return public_ip_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCredentials_GetSteamGuardDetails_Response_SessionData::release_public_ip_address() {
  // @@protoc_insertion_point(field_release:CCredentials_GetSteamGuardDetails_Response.SessionData.public_ip_address)
  if (!_internal_has_public_ip_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = public_ip_address_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (public_ip_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    public_ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCredentials_GetSteamGuardDetails_Response_SessionData::set_allocated_public_ip_address(std::string* public_ip_address) {
  if (public_ip_address != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  public_ip_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_ip_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (public_ip_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    public_ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCredentials_GetSteamGuardDetails_Response.SessionData.public_ip_address)
}

// -------------------------------------------------------------------

// CCredentials_GetSteamGuardDetails_Response

// optional bool is_steamguard_enabled = 1;
inline bool CCredentials_GetSteamGuardDetails_Response::_internal_has_is_steamguard_enabled() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CCredentials_GetSteamGuardDetails_Response::has_is_steamguard_enabled() const {
  return _internal_has_is_steamguard_enabled();
}
inline void CCredentials_GetSteamGuardDetails_Response::clear_is_steamguard_enabled() {
  is_steamguard_enabled_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CCredentials_GetSteamGuardDetails_Response::_internal_is_steamguard_enabled() const {
  return is_steamguard_enabled_;
}
inline bool CCredentials_GetSteamGuardDetails_Response::is_steamguard_enabled() const {
  // @@protoc_insertion_point(field_get:CCredentials_GetSteamGuardDetails_Response.is_steamguard_enabled)
  return _internal_is_steamguard_enabled();
}
inline void CCredentials_GetSteamGuardDetails_Response::_internal_set_is_steamguard_enabled(bool value) {
  _has_bits_[0] |= 0x00000010u;
  is_steamguard_enabled_ = value;
}
inline void CCredentials_GetSteamGuardDetails_Response::set_is_steamguard_enabled(bool value) {
  _internal_set_is_steamguard_enabled(value);
  // @@protoc_insertion_point(field_set:CCredentials_GetSteamGuardDetails_Response.is_steamguard_enabled)
}

// optional fixed32 timestamp_steamguard_enabled = 2;
inline bool CCredentials_GetSteamGuardDetails_Response::_internal_has_timestamp_steamguard_enabled() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCredentials_GetSteamGuardDetails_Response::has_timestamp_steamguard_enabled() const {
  return _internal_has_timestamp_steamguard_enabled();
}
inline void CCredentials_GetSteamGuardDetails_Response::clear_timestamp_steamguard_enabled() {
  timestamp_steamguard_enabled_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CCredentials_GetSteamGuardDetails_Response::_internal_timestamp_steamguard_enabled() const {
  return timestamp_steamguard_enabled_;
}
inline uint32_t CCredentials_GetSteamGuardDetails_Response::timestamp_steamguard_enabled() const {
  // @@protoc_insertion_point(field_get:CCredentials_GetSteamGuardDetails_Response.timestamp_steamguard_enabled)
  return _internal_timestamp_steamguard_enabled();
}
inline void CCredentials_GetSteamGuardDetails_Response::_internal_set_timestamp_steamguard_enabled(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  timestamp_steamguard_enabled_ = value;
}
inline void CCredentials_GetSteamGuardDetails_Response::set_timestamp_steamguard_enabled(uint32_t value) {
  _internal_set_timestamp_steamguard_enabled(value);
  // @@protoc_insertion_point(field_set:CCredentials_GetSteamGuardDetails_Response.timestamp_steamguard_enabled)
}

// optional string deprecated_machine_name_userchosen = 4;
inline bool CCredentials_GetSteamGuardDetails_Response::_internal_has_deprecated_machine_name_userchosen() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCredentials_GetSteamGuardDetails_Response::has_deprecated_machine_name_userchosen() const {
  return _internal_has_deprecated_machine_name_userchosen();
}
inline void CCredentials_GetSteamGuardDetails_Response::clear_deprecated_machine_name_userchosen() {
  deprecated_machine_name_userchosen_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CCredentials_GetSteamGuardDetails_Response::deprecated_machine_name_userchosen() const {
  // @@protoc_insertion_point(field_get:CCredentials_GetSteamGuardDetails_Response.deprecated_machine_name_userchosen)
  return _internal_deprecated_machine_name_userchosen();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCredentials_GetSteamGuardDetails_Response::set_deprecated_machine_name_userchosen(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 deprecated_machine_name_userchosen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCredentials_GetSteamGuardDetails_Response.deprecated_machine_name_userchosen)
}
inline std::string* CCredentials_GetSteamGuardDetails_Response::mutable_deprecated_machine_name_userchosen() {
  std::string* _s = _internal_mutable_deprecated_machine_name_userchosen();
  // @@protoc_insertion_point(field_mutable:CCredentials_GetSteamGuardDetails_Response.deprecated_machine_name_userchosen)
  return _s;
}
inline const std::string& CCredentials_GetSteamGuardDetails_Response::_internal_deprecated_machine_name_userchosen() const {
  return deprecated_machine_name_userchosen_.Get();
}
inline void CCredentials_GetSteamGuardDetails_Response::_internal_set_deprecated_machine_name_userchosen(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  deprecated_machine_name_userchosen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCredentials_GetSteamGuardDetails_Response::_internal_mutable_deprecated_machine_name_userchosen() {
  _has_bits_[0] |= 0x00000001u;
  return deprecated_machine_name_userchosen_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCredentials_GetSteamGuardDetails_Response::release_deprecated_machine_name_userchosen() {
  // @@protoc_insertion_point(field_release:CCredentials_GetSteamGuardDetails_Response.deprecated_machine_name_userchosen)
  if (!_internal_has_deprecated_machine_name_userchosen()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = deprecated_machine_name_userchosen_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (deprecated_machine_name_userchosen_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    deprecated_machine_name_userchosen_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCredentials_GetSteamGuardDetails_Response::set_allocated_deprecated_machine_name_userchosen(std::string* deprecated_machine_name_userchosen) {
  if (deprecated_machine_name_userchosen != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  deprecated_machine_name_userchosen_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deprecated_machine_name_userchosen,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (deprecated_machine_name_userchosen_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    deprecated_machine_name_userchosen_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCredentials_GetSteamGuardDetails_Response.deprecated_machine_name_userchosen)
}

// optional fixed32 deprecated_timestamp_machine_steamguard_enabled = 5;
inline bool CCredentials_GetSteamGuardDetails_Response::_internal_has_deprecated_timestamp_machine_steamguard_enabled() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CCredentials_GetSteamGuardDetails_Response::has_deprecated_timestamp_machine_steamguard_enabled() const {
  return _internal_has_deprecated_timestamp_machine_steamguard_enabled();
}
inline void CCredentials_GetSteamGuardDetails_Response::clear_deprecated_timestamp_machine_steamguard_enabled() {
  deprecated_timestamp_machine_steamguard_enabled_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CCredentials_GetSteamGuardDetails_Response::_internal_deprecated_timestamp_machine_steamguard_enabled() const {
  return deprecated_timestamp_machine_steamguard_enabled_;
}
inline uint32_t CCredentials_GetSteamGuardDetails_Response::deprecated_timestamp_machine_steamguard_enabled() const {
  // @@protoc_insertion_point(field_get:CCredentials_GetSteamGuardDetails_Response.deprecated_timestamp_machine_steamguard_enabled)
  return _internal_deprecated_timestamp_machine_steamguard_enabled();
}
inline void CCredentials_GetSteamGuardDetails_Response::_internal_set_deprecated_timestamp_machine_steamguard_enabled(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  deprecated_timestamp_machine_steamguard_enabled_ = value;
}
inline void CCredentials_GetSteamGuardDetails_Response::set_deprecated_timestamp_machine_steamguard_enabled(uint32_t value) {
  _internal_set_deprecated_timestamp_machine_steamguard_enabled(value);
  // @@protoc_insertion_point(field_set:CCredentials_GetSteamGuardDetails_Response.deprecated_timestamp_machine_steamguard_enabled)
}

// optional bool deprecated_authentication_exists_from_geoloc_before_mintime = 6;
inline bool CCredentials_GetSteamGuardDetails_Response::_internal_has_deprecated_authentication_exists_from_geoloc_before_mintime() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CCredentials_GetSteamGuardDetails_Response::has_deprecated_authentication_exists_from_geoloc_before_mintime() const {
  return _internal_has_deprecated_authentication_exists_from_geoloc_before_mintime();
}
inline void CCredentials_GetSteamGuardDetails_Response::clear_deprecated_authentication_exists_from_geoloc_before_mintime() {
  deprecated_authentication_exists_from_geoloc_before_mintime_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CCredentials_GetSteamGuardDetails_Response::_internal_deprecated_authentication_exists_from_geoloc_before_mintime() const {
  return deprecated_authentication_exists_from_geoloc_before_mintime_;
}
inline bool CCredentials_GetSteamGuardDetails_Response::deprecated_authentication_exists_from_geoloc_before_mintime() const {
  // @@protoc_insertion_point(field_get:CCredentials_GetSteamGuardDetails_Response.deprecated_authentication_exists_from_geoloc_before_mintime)
  return _internal_deprecated_authentication_exists_from_geoloc_before_mintime();
}
inline void CCredentials_GetSteamGuardDetails_Response::_internal_set_deprecated_authentication_exists_from_geoloc_before_mintime(bool value) {
  _has_bits_[0] |= 0x00000020u;
  deprecated_authentication_exists_from_geoloc_before_mintime_ = value;
}
inline void CCredentials_GetSteamGuardDetails_Response::set_deprecated_authentication_exists_from_geoloc_before_mintime(bool value) {
  _internal_set_deprecated_authentication_exists_from_geoloc_before_mintime(value);
  // @@protoc_insertion_point(field_set:CCredentials_GetSteamGuardDetails_Response.deprecated_authentication_exists_from_geoloc_before_mintime)
}

// optional uint64 deprecated_machine_id = 7;
inline bool CCredentials_GetSteamGuardDetails_Response::_internal_has_deprecated_machine_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CCredentials_GetSteamGuardDetails_Response::has_deprecated_machine_id() const {
  return _internal_has_deprecated_machine_id();
}
inline void CCredentials_GetSteamGuardDetails_Response::clear_deprecated_machine_id() {
  deprecated_machine_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline uint64_t CCredentials_GetSteamGuardDetails_Response::_internal_deprecated_machine_id() const {
  return deprecated_machine_id_;
}
inline uint64_t CCredentials_GetSteamGuardDetails_Response::deprecated_machine_id() const {
  // @@protoc_insertion_point(field_get:CCredentials_GetSteamGuardDetails_Response.deprecated_machine_id)
  return _internal_deprecated_machine_id();
}
inline void CCredentials_GetSteamGuardDetails_Response::_internal_set_deprecated_machine_id(uint64_t value) {
  _has_bits_[0] |= 0x00000008u;
  deprecated_machine_id_ = value;
}
inline void CCredentials_GetSteamGuardDetails_Response::set_deprecated_machine_id(uint64_t value) {
  _internal_set_deprecated_machine_id(value);
  // @@protoc_insertion_point(field_set:CCredentials_GetSteamGuardDetails_Response.deprecated_machine_id)
}

// repeated .CCredentials_GetSteamGuardDetails_Response.SessionData session_data = 8;
inline int CCredentials_GetSteamGuardDetails_Response::_internal_session_data_size() const {
  return session_data_.size();
}
inline int CCredentials_GetSteamGuardDetails_Response::session_data_size() const {
  return _internal_session_data_size();
}
inline void CCredentials_GetSteamGuardDetails_Response::clear_session_data() {
  session_data_.Clear();
}
inline ::CCredentials_GetSteamGuardDetails_Response_SessionData* CCredentials_GetSteamGuardDetails_Response::mutable_session_data(int index) {
  // @@protoc_insertion_point(field_mutable:CCredentials_GetSteamGuardDetails_Response.session_data)
  return session_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCredentials_GetSteamGuardDetails_Response_SessionData >*
CCredentials_GetSteamGuardDetails_Response::mutable_session_data() {
  // @@protoc_insertion_point(field_mutable_list:CCredentials_GetSteamGuardDetails_Response.session_data)
  return &session_data_;
}
inline const ::CCredentials_GetSteamGuardDetails_Response_SessionData& CCredentials_GetSteamGuardDetails_Response::_internal_session_data(int index) const {
  return session_data_.Get(index);
}
inline const ::CCredentials_GetSteamGuardDetails_Response_SessionData& CCredentials_GetSteamGuardDetails_Response::session_data(int index) const {
  // @@protoc_insertion_point(field_get:CCredentials_GetSteamGuardDetails_Response.session_data)
  return _internal_session_data(index);
}
inline ::CCredentials_GetSteamGuardDetails_Response_SessionData* CCredentials_GetSteamGuardDetails_Response::_internal_add_session_data() {
  return session_data_.Add();
}
inline ::CCredentials_GetSteamGuardDetails_Response_SessionData* CCredentials_GetSteamGuardDetails_Response::add_session_data() {
  ::CCredentials_GetSteamGuardDetails_Response_SessionData* _add = _internal_add_session_data();
  // @@protoc_insertion_point(field_add:CCredentials_GetSteamGuardDetails_Response.session_data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCredentials_GetSteamGuardDetails_Response_SessionData >&
CCredentials_GetSteamGuardDetails_Response::session_data() const {
  // @@protoc_insertion_point(field_list:CCredentials_GetSteamGuardDetails_Response.session_data)
  return session_data_;
}

// optional bool is_twofactor_enabled = 9;
inline bool CCredentials_GetSteamGuardDetails_Response::_internal_has_is_twofactor_enabled() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CCredentials_GetSteamGuardDetails_Response::has_is_twofactor_enabled() const {
  return _internal_has_is_twofactor_enabled();
}
inline void CCredentials_GetSteamGuardDetails_Response::clear_is_twofactor_enabled() {
  is_twofactor_enabled_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool CCredentials_GetSteamGuardDetails_Response::_internal_is_twofactor_enabled() const {
  return is_twofactor_enabled_;
}
inline bool CCredentials_GetSteamGuardDetails_Response::is_twofactor_enabled() const {
  // @@protoc_insertion_point(field_get:CCredentials_GetSteamGuardDetails_Response.is_twofactor_enabled)
  return _internal_is_twofactor_enabled();
}
inline void CCredentials_GetSteamGuardDetails_Response::_internal_set_is_twofactor_enabled(bool value) {
  _has_bits_[0] |= 0x00000040u;
  is_twofactor_enabled_ = value;
}
inline void CCredentials_GetSteamGuardDetails_Response::set_is_twofactor_enabled(bool value) {
  _internal_set_is_twofactor_enabled(value);
  // @@protoc_insertion_point(field_set:CCredentials_GetSteamGuardDetails_Response.is_twofactor_enabled)
}

// optional fixed32 timestamp_twofactor_enabled = 10;
inline bool CCredentials_GetSteamGuardDetails_Response::_internal_has_timestamp_twofactor_enabled() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CCredentials_GetSteamGuardDetails_Response::has_timestamp_twofactor_enabled() const {
  return _internal_has_timestamp_twofactor_enabled();
}
inline void CCredentials_GetSteamGuardDetails_Response::clear_timestamp_twofactor_enabled() {
  timestamp_twofactor_enabled_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CCredentials_GetSteamGuardDetails_Response::_internal_timestamp_twofactor_enabled() const {
  return timestamp_twofactor_enabled_;
}
inline uint32_t CCredentials_GetSteamGuardDetails_Response::timestamp_twofactor_enabled() const {
  // @@protoc_insertion_point(field_get:CCredentials_GetSteamGuardDetails_Response.timestamp_twofactor_enabled)
  return _internal_timestamp_twofactor_enabled();
}
inline void CCredentials_GetSteamGuardDetails_Response::_internal_set_timestamp_twofactor_enabled(uint32_t value) {
  _has_bits_[0] |= 0x00000100u;
  timestamp_twofactor_enabled_ = value;
}
inline void CCredentials_GetSteamGuardDetails_Response::set_timestamp_twofactor_enabled(uint32_t value) {
  _internal_set_timestamp_twofactor_enabled(value);
  // @@protoc_insertion_point(field_set:CCredentials_GetSteamGuardDetails_Response.timestamp_twofactor_enabled)
}

// optional bool is_phone_verified = 11;
inline bool CCredentials_GetSteamGuardDetails_Response::_internal_has_is_phone_verified() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CCredentials_GetSteamGuardDetails_Response::has_is_phone_verified() const {
  return _internal_has_is_phone_verified();
}
inline void CCredentials_GetSteamGuardDetails_Response::clear_is_phone_verified() {
  is_phone_verified_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CCredentials_GetSteamGuardDetails_Response::_internal_is_phone_verified() const {
  return is_phone_verified_;
}
inline bool CCredentials_GetSteamGuardDetails_Response::is_phone_verified() const {
  // @@protoc_insertion_point(field_get:CCredentials_GetSteamGuardDetails_Response.is_phone_verified)
  return _internal_is_phone_verified();
}
inline void CCredentials_GetSteamGuardDetails_Response::_internal_set_is_phone_verified(bool value) {
  _has_bits_[0] |= 0x00000080u;
  is_phone_verified_ = value;
}
inline void CCredentials_GetSteamGuardDetails_Response::set_is_phone_verified(bool value) {
  _internal_set_is_phone_verified(value);
  // @@protoc_insertion_point(field_set:CCredentials_GetSteamGuardDetails_Response.is_phone_verified)
}

// -------------------------------------------------------------------

// CCredentials_ValidateEmailAddress_Request

// optional string stoken = 1;
inline bool CCredentials_ValidateEmailAddress_Request::_internal_has_stoken() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCredentials_ValidateEmailAddress_Request::has_stoken() const {
  return _internal_has_stoken();
}
inline void CCredentials_ValidateEmailAddress_Request::clear_stoken() {
  stoken_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CCredentials_ValidateEmailAddress_Request::stoken() const {
  // @@protoc_insertion_point(field_get:CCredentials_ValidateEmailAddress_Request.stoken)
  return _internal_stoken();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCredentials_ValidateEmailAddress_Request::set_stoken(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 stoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCredentials_ValidateEmailAddress_Request.stoken)
}
inline std::string* CCredentials_ValidateEmailAddress_Request::mutable_stoken() {
  std::string* _s = _internal_mutable_stoken();
  // @@protoc_insertion_point(field_mutable:CCredentials_ValidateEmailAddress_Request.stoken)
  return _s;
}
inline const std::string& CCredentials_ValidateEmailAddress_Request::_internal_stoken() const {
  return stoken_.Get();
}
inline void CCredentials_ValidateEmailAddress_Request::_internal_set_stoken(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  stoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCredentials_ValidateEmailAddress_Request::_internal_mutable_stoken() {
  _has_bits_[0] |= 0x00000001u;
  return stoken_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCredentials_ValidateEmailAddress_Request::release_stoken() {
  // @@protoc_insertion_point(field_release:CCredentials_ValidateEmailAddress_Request.stoken)
  if (!_internal_has_stoken()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = stoken_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (stoken_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    stoken_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCredentials_ValidateEmailAddress_Request::set_allocated_stoken(std::string* stoken) {
  if (stoken != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  stoken_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stoken,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (stoken_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    stoken_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCredentials_ValidateEmailAddress_Request.stoken)
}

// -------------------------------------------------------------------

// CCredentials_ValidateEmailAddress_Response

// optional bool was_validated = 1;
inline bool CCredentials_ValidateEmailAddress_Response::_internal_has_was_validated() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCredentials_ValidateEmailAddress_Response::has_was_validated() const {
  return _internal_has_was_validated();
}
inline void CCredentials_ValidateEmailAddress_Response::clear_was_validated() {
  was_validated_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CCredentials_ValidateEmailAddress_Response::_internal_was_validated() const {
  return was_validated_;
}
inline bool CCredentials_ValidateEmailAddress_Response::was_validated() const {
  // @@protoc_insertion_point(field_get:CCredentials_ValidateEmailAddress_Response.was_validated)
  return _internal_was_validated();
}
inline void CCredentials_ValidateEmailAddress_Response::_internal_set_was_validated(bool value) {
  _has_bits_[0] |= 0x00000001u;
  was_validated_ = value;
}
inline void CCredentials_ValidateEmailAddress_Response::set_was_validated(bool value) {
  _internal_set_was_validated(value);
  // @@protoc_insertion_point(field_set:CCredentials_ValidateEmailAddress_Response.was_validated)
}

// -------------------------------------------------------------------

// CCredentials_SteamGuardPhishingReport_Request

// optional string param_string = 1;
inline bool CCredentials_SteamGuardPhishingReport_Request::_internal_has_param_string() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCredentials_SteamGuardPhishingReport_Request::has_param_string() const {
  return _internal_has_param_string();
}
inline void CCredentials_SteamGuardPhishingReport_Request::clear_param_string() {
  param_string_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CCredentials_SteamGuardPhishingReport_Request::param_string() const {
  // @@protoc_insertion_point(field_get:CCredentials_SteamGuardPhishingReport_Request.param_string)
  return _internal_param_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCredentials_SteamGuardPhishingReport_Request::set_param_string(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 param_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCredentials_SteamGuardPhishingReport_Request.param_string)
}
inline std::string* CCredentials_SteamGuardPhishingReport_Request::mutable_param_string() {
  std::string* _s = _internal_mutable_param_string();
  // @@protoc_insertion_point(field_mutable:CCredentials_SteamGuardPhishingReport_Request.param_string)
  return _s;
}
inline const std::string& CCredentials_SteamGuardPhishingReport_Request::_internal_param_string() const {
  return param_string_.Get();
}
inline void CCredentials_SteamGuardPhishingReport_Request::_internal_set_param_string(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  param_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCredentials_SteamGuardPhishingReport_Request::_internal_mutable_param_string() {
  _has_bits_[0] |= 0x00000001u;
  return param_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCredentials_SteamGuardPhishingReport_Request::release_param_string() {
  // @@protoc_insertion_point(field_release:CCredentials_SteamGuardPhishingReport_Request.param_string)
  if (!_internal_has_param_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = param_string_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (param_string_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    param_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCredentials_SteamGuardPhishingReport_Request::set_allocated_param_string(std::string* param_string) {
  if (param_string != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  param_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), param_string,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (param_string_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    param_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCredentials_SteamGuardPhishingReport_Request.param_string)
}

// optional string ipaddress_actual = 2;
inline bool CCredentials_SteamGuardPhishingReport_Request::_internal_has_ipaddress_actual() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCredentials_SteamGuardPhishingReport_Request::has_ipaddress_actual() const {
  return _internal_has_ipaddress_actual();
}
inline void CCredentials_SteamGuardPhishingReport_Request::clear_ipaddress_actual() {
  ipaddress_actual_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CCredentials_SteamGuardPhishingReport_Request::ipaddress_actual() const {
  // @@protoc_insertion_point(field_get:CCredentials_SteamGuardPhishingReport_Request.ipaddress_actual)
  return _internal_ipaddress_actual();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCredentials_SteamGuardPhishingReport_Request::set_ipaddress_actual(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 ipaddress_actual_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCredentials_SteamGuardPhishingReport_Request.ipaddress_actual)
}
inline std::string* CCredentials_SteamGuardPhishingReport_Request::mutable_ipaddress_actual() {
  std::string* _s = _internal_mutable_ipaddress_actual();
  // @@protoc_insertion_point(field_mutable:CCredentials_SteamGuardPhishingReport_Request.ipaddress_actual)
  return _s;
}
inline const std::string& CCredentials_SteamGuardPhishingReport_Request::_internal_ipaddress_actual() const {
  return ipaddress_actual_.Get();
}
inline void CCredentials_SteamGuardPhishingReport_Request::_internal_set_ipaddress_actual(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  ipaddress_actual_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCredentials_SteamGuardPhishingReport_Request::_internal_mutable_ipaddress_actual() {
  _has_bits_[0] |= 0x00000002u;
  return ipaddress_actual_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCredentials_SteamGuardPhishingReport_Request::release_ipaddress_actual() {
  // @@protoc_insertion_point(field_release:CCredentials_SteamGuardPhishingReport_Request.ipaddress_actual)
  if (!_internal_has_ipaddress_actual()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = ipaddress_actual_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ipaddress_actual_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ipaddress_actual_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCredentials_SteamGuardPhishingReport_Request::set_allocated_ipaddress_actual(std::string* ipaddress_actual) {
  if (ipaddress_actual != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ipaddress_actual_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ipaddress_actual,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ipaddress_actual_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ipaddress_actual_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCredentials_SteamGuardPhishingReport_Request.ipaddress_actual)
}

// -------------------------------------------------------------------

// CCredentials_SteamGuardPhishingReport_Response

// optional string ipaddress_loginattempt = 1;
inline bool CCredentials_SteamGuardPhishingReport_Response::_internal_has_ipaddress_loginattempt() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCredentials_SteamGuardPhishingReport_Response::has_ipaddress_loginattempt() const {
  return _internal_has_ipaddress_loginattempt();
}
inline void CCredentials_SteamGuardPhishingReport_Response::clear_ipaddress_loginattempt() {
  ipaddress_loginattempt_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CCredentials_SteamGuardPhishingReport_Response::ipaddress_loginattempt() const {
  // @@protoc_insertion_point(field_get:CCredentials_SteamGuardPhishingReport_Response.ipaddress_loginattempt)
  return _internal_ipaddress_loginattempt();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCredentials_SteamGuardPhishingReport_Response::set_ipaddress_loginattempt(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 ipaddress_loginattempt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCredentials_SteamGuardPhishingReport_Response.ipaddress_loginattempt)
}
inline std::string* CCredentials_SteamGuardPhishingReport_Response::mutable_ipaddress_loginattempt() {
  std::string* _s = _internal_mutable_ipaddress_loginattempt();
  // @@protoc_insertion_point(field_mutable:CCredentials_SteamGuardPhishingReport_Response.ipaddress_loginattempt)
  return _s;
}
inline const std::string& CCredentials_SteamGuardPhishingReport_Response::_internal_ipaddress_loginattempt() const {
  return ipaddress_loginattempt_.Get();
}
inline void CCredentials_SteamGuardPhishingReport_Response::_internal_set_ipaddress_loginattempt(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ipaddress_loginattempt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCredentials_SteamGuardPhishingReport_Response::_internal_mutable_ipaddress_loginattempt() {
  _has_bits_[0] |= 0x00000001u;
  return ipaddress_loginattempt_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCredentials_SteamGuardPhishingReport_Response::release_ipaddress_loginattempt() {
  // @@protoc_insertion_point(field_release:CCredentials_SteamGuardPhishingReport_Response.ipaddress_loginattempt)
  if (!_internal_has_ipaddress_loginattempt()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = ipaddress_loginattempt_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ipaddress_loginattempt_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ipaddress_loginattempt_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCredentials_SteamGuardPhishingReport_Response::set_allocated_ipaddress_loginattempt(std::string* ipaddress_loginattempt) {
  if (ipaddress_loginattempt != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ipaddress_loginattempt_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ipaddress_loginattempt,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ipaddress_loginattempt_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ipaddress_loginattempt_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCredentials_SteamGuardPhishingReport_Response.ipaddress_loginattempt)
}

// optional string countryname_loginattempt = 2;
inline bool CCredentials_SteamGuardPhishingReport_Response::_internal_has_countryname_loginattempt() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCredentials_SteamGuardPhishingReport_Response::has_countryname_loginattempt() const {
  return _internal_has_countryname_loginattempt();
}
inline void CCredentials_SteamGuardPhishingReport_Response::clear_countryname_loginattempt() {
  countryname_loginattempt_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CCredentials_SteamGuardPhishingReport_Response::countryname_loginattempt() const {
  // @@protoc_insertion_point(field_get:CCredentials_SteamGuardPhishingReport_Response.countryname_loginattempt)
  return _internal_countryname_loginattempt();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCredentials_SteamGuardPhishingReport_Response::set_countryname_loginattempt(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 countryname_loginattempt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCredentials_SteamGuardPhishingReport_Response.countryname_loginattempt)
}
inline std::string* CCredentials_SteamGuardPhishingReport_Response::mutable_countryname_loginattempt() {
  std::string* _s = _internal_mutable_countryname_loginattempt();
  // @@protoc_insertion_point(field_mutable:CCredentials_SteamGuardPhishingReport_Response.countryname_loginattempt)
  return _s;
}
inline const std::string& CCredentials_SteamGuardPhishingReport_Response::_internal_countryname_loginattempt() const {
  return countryname_loginattempt_.Get();
}
inline void CCredentials_SteamGuardPhishingReport_Response::_internal_set_countryname_loginattempt(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  countryname_loginattempt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCredentials_SteamGuardPhishingReport_Response::_internal_mutable_countryname_loginattempt() {
  _has_bits_[0] |= 0x00000002u;
  return countryname_loginattempt_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCredentials_SteamGuardPhishingReport_Response::release_countryname_loginattempt() {
  // @@protoc_insertion_point(field_release:CCredentials_SteamGuardPhishingReport_Response.countryname_loginattempt)
  if (!_internal_has_countryname_loginattempt()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = countryname_loginattempt_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (countryname_loginattempt_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    countryname_loginattempt_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCredentials_SteamGuardPhishingReport_Response::set_allocated_countryname_loginattempt(std::string* countryname_loginattempt) {
  if (countryname_loginattempt != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  countryname_loginattempt_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), countryname_loginattempt,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (countryname_loginattempt_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    countryname_loginattempt_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCredentials_SteamGuardPhishingReport_Response.countryname_loginattempt)
}

// optional string statename_loginattempt = 3;
inline bool CCredentials_SteamGuardPhishingReport_Response::_internal_has_statename_loginattempt() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CCredentials_SteamGuardPhishingReport_Response::has_statename_loginattempt() const {
  return _internal_has_statename_loginattempt();
}
inline void CCredentials_SteamGuardPhishingReport_Response::clear_statename_loginattempt() {
  statename_loginattempt_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CCredentials_SteamGuardPhishingReport_Response::statename_loginattempt() const {
  // @@protoc_insertion_point(field_get:CCredentials_SteamGuardPhishingReport_Response.statename_loginattempt)
  return _internal_statename_loginattempt();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCredentials_SteamGuardPhishingReport_Response::set_statename_loginattempt(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 statename_loginattempt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCredentials_SteamGuardPhishingReport_Response.statename_loginattempt)
}
inline std::string* CCredentials_SteamGuardPhishingReport_Response::mutable_statename_loginattempt() {
  std::string* _s = _internal_mutable_statename_loginattempt();
  // @@protoc_insertion_point(field_mutable:CCredentials_SteamGuardPhishingReport_Response.statename_loginattempt)
  return _s;
}
inline const std::string& CCredentials_SteamGuardPhishingReport_Response::_internal_statename_loginattempt() const {
  return statename_loginattempt_.Get();
}
inline void CCredentials_SteamGuardPhishingReport_Response::_internal_set_statename_loginattempt(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  statename_loginattempt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCredentials_SteamGuardPhishingReport_Response::_internal_mutable_statename_loginattempt() {
  _has_bits_[0] |= 0x00000004u;
  return statename_loginattempt_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCredentials_SteamGuardPhishingReport_Response::release_statename_loginattempt() {
  // @@protoc_insertion_point(field_release:CCredentials_SteamGuardPhishingReport_Response.statename_loginattempt)
  if (!_internal_has_statename_loginattempt()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = statename_loginattempt_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (statename_loginattempt_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    statename_loginattempt_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCredentials_SteamGuardPhishingReport_Response::set_allocated_statename_loginattempt(std::string* statename_loginattempt) {
  if (statename_loginattempt != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  statename_loginattempt_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), statename_loginattempt,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (statename_loginattempt_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    statename_loginattempt_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCredentials_SteamGuardPhishingReport_Response.statename_loginattempt)
}

// optional string cityname_loginattempt = 4;
inline bool CCredentials_SteamGuardPhishingReport_Response::_internal_has_cityname_loginattempt() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CCredentials_SteamGuardPhishingReport_Response::has_cityname_loginattempt() const {
  return _internal_has_cityname_loginattempt();
}
inline void CCredentials_SteamGuardPhishingReport_Response::clear_cityname_loginattempt() {
  cityname_loginattempt_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CCredentials_SteamGuardPhishingReport_Response::cityname_loginattempt() const {
  // @@protoc_insertion_point(field_get:CCredentials_SteamGuardPhishingReport_Response.cityname_loginattempt)
  return _internal_cityname_loginattempt();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCredentials_SteamGuardPhishingReport_Response::set_cityname_loginattempt(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 cityname_loginattempt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCredentials_SteamGuardPhishingReport_Response.cityname_loginattempt)
}
inline std::string* CCredentials_SteamGuardPhishingReport_Response::mutable_cityname_loginattempt() {
  std::string* _s = _internal_mutable_cityname_loginattempt();
  // @@protoc_insertion_point(field_mutable:CCredentials_SteamGuardPhishingReport_Response.cityname_loginattempt)
  return _s;
}
inline const std::string& CCredentials_SteamGuardPhishingReport_Response::_internal_cityname_loginattempt() const {
  return cityname_loginattempt_.Get();
}
inline void CCredentials_SteamGuardPhishingReport_Response::_internal_set_cityname_loginattempt(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  cityname_loginattempt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCredentials_SteamGuardPhishingReport_Response::_internal_mutable_cityname_loginattempt() {
  _has_bits_[0] |= 0x00000008u;
  return cityname_loginattempt_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCredentials_SteamGuardPhishingReport_Response::release_cityname_loginattempt() {
  // @@protoc_insertion_point(field_release:CCredentials_SteamGuardPhishingReport_Response.cityname_loginattempt)
  if (!_internal_has_cityname_loginattempt()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = cityname_loginattempt_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cityname_loginattempt_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    cityname_loginattempt_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCredentials_SteamGuardPhishingReport_Response::set_allocated_cityname_loginattempt(std::string* cityname_loginattempt) {
  if (cityname_loginattempt != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  cityname_loginattempt_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cityname_loginattempt,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cityname_loginattempt_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    cityname_loginattempt_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCredentials_SteamGuardPhishingReport_Response.cityname_loginattempt)
}

// optional string ipaddress_actual = 5;
inline bool CCredentials_SteamGuardPhishingReport_Response::_internal_has_ipaddress_actual() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CCredentials_SteamGuardPhishingReport_Response::has_ipaddress_actual() const {
  return _internal_has_ipaddress_actual();
}
inline void CCredentials_SteamGuardPhishingReport_Response::clear_ipaddress_actual() {
  ipaddress_actual_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& CCredentials_SteamGuardPhishingReport_Response::ipaddress_actual() const {
  // @@protoc_insertion_point(field_get:CCredentials_SteamGuardPhishingReport_Response.ipaddress_actual)
  return _internal_ipaddress_actual();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCredentials_SteamGuardPhishingReport_Response::set_ipaddress_actual(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 ipaddress_actual_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCredentials_SteamGuardPhishingReport_Response.ipaddress_actual)
}
inline std::string* CCredentials_SteamGuardPhishingReport_Response::mutable_ipaddress_actual() {
  std::string* _s = _internal_mutable_ipaddress_actual();
  // @@protoc_insertion_point(field_mutable:CCredentials_SteamGuardPhishingReport_Response.ipaddress_actual)
  return _s;
}
inline const std::string& CCredentials_SteamGuardPhishingReport_Response::_internal_ipaddress_actual() const {
  return ipaddress_actual_.Get();
}
inline void CCredentials_SteamGuardPhishingReport_Response::_internal_set_ipaddress_actual(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  ipaddress_actual_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCredentials_SteamGuardPhishingReport_Response::_internal_mutable_ipaddress_actual() {
  _has_bits_[0] |= 0x00000010u;
  return ipaddress_actual_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCredentials_SteamGuardPhishingReport_Response::release_ipaddress_actual() {
  // @@protoc_insertion_point(field_release:CCredentials_SteamGuardPhishingReport_Response.ipaddress_actual)
  if (!_internal_has_ipaddress_actual()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  auto* p = ipaddress_actual_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ipaddress_actual_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ipaddress_actual_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCredentials_SteamGuardPhishingReport_Response::set_allocated_ipaddress_actual(std::string* ipaddress_actual) {
  if (ipaddress_actual != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  ipaddress_actual_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ipaddress_actual,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ipaddress_actual_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ipaddress_actual_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCredentials_SteamGuardPhishingReport_Response.ipaddress_actual)
}

// optional string countryname_actual = 6;
inline bool CCredentials_SteamGuardPhishingReport_Response::_internal_has_countryname_actual() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CCredentials_SteamGuardPhishingReport_Response::has_countryname_actual() const {
  return _internal_has_countryname_actual();
}
inline void CCredentials_SteamGuardPhishingReport_Response::clear_countryname_actual() {
  countryname_actual_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& CCredentials_SteamGuardPhishingReport_Response::countryname_actual() const {
  // @@protoc_insertion_point(field_get:CCredentials_SteamGuardPhishingReport_Response.countryname_actual)
  return _internal_countryname_actual();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCredentials_SteamGuardPhishingReport_Response::set_countryname_actual(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000020u;
 countryname_actual_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCredentials_SteamGuardPhishingReport_Response.countryname_actual)
}
inline std::string* CCredentials_SteamGuardPhishingReport_Response::mutable_countryname_actual() {
  std::string* _s = _internal_mutable_countryname_actual();
  // @@protoc_insertion_point(field_mutable:CCredentials_SteamGuardPhishingReport_Response.countryname_actual)
  return _s;
}
inline const std::string& CCredentials_SteamGuardPhishingReport_Response::_internal_countryname_actual() const {
  return countryname_actual_.Get();
}
inline void CCredentials_SteamGuardPhishingReport_Response::_internal_set_countryname_actual(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  countryname_actual_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCredentials_SteamGuardPhishingReport_Response::_internal_mutable_countryname_actual() {
  _has_bits_[0] |= 0x00000020u;
  return countryname_actual_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCredentials_SteamGuardPhishingReport_Response::release_countryname_actual() {
  // @@protoc_insertion_point(field_release:CCredentials_SteamGuardPhishingReport_Response.countryname_actual)
  if (!_internal_has_countryname_actual()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  auto* p = countryname_actual_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (countryname_actual_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    countryname_actual_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCredentials_SteamGuardPhishingReport_Response::set_allocated_countryname_actual(std::string* countryname_actual) {
  if (countryname_actual != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  countryname_actual_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), countryname_actual,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (countryname_actual_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    countryname_actual_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCredentials_SteamGuardPhishingReport_Response.countryname_actual)
}

// optional string statename_actual = 7;
inline bool CCredentials_SteamGuardPhishingReport_Response::_internal_has_statename_actual() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CCredentials_SteamGuardPhishingReport_Response::has_statename_actual() const {
  return _internal_has_statename_actual();
}
inline void CCredentials_SteamGuardPhishingReport_Response::clear_statename_actual() {
  statename_actual_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& CCredentials_SteamGuardPhishingReport_Response::statename_actual() const {
  // @@protoc_insertion_point(field_get:CCredentials_SteamGuardPhishingReport_Response.statename_actual)
  return _internal_statename_actual();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCredentials_SteamGuardPhishingReport_Response::set_statename_actual(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000040u;
 statename_actual_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCredentials_SteamGuardPhishingReport_Response.statename_actual)
}
inline std::string* CCredentials_SteamGuardPhishingReport_Response::mutable_statename_actual() {
  std::string* _s = _internal_mutable_statename_actual();
  // @@protoc_insertion_point(field_mutable:CCredentials_SteamGuardPhishingReport_Response.statename_actual)
  return _s;
}
inline const std::string& CCredentials_SteamGuardPhishingReport_Response::_internal_statename_actual() const {
  return statename_actual_.Get();
}
inline void CCredentials_SteamGuardPhishingReport_Response::_internal_set_statename_actual(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  statename_actual_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCredentials_SteamGuardPhishingReport_Response::_internal_mutable_statename_actual() {
  _has_bits_[0] |= 0x00000040u;
  return statename_actual_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCredentials_SteamGuardPhishingReport_Response::release_statename_actual() {
  // @@protoc_insertion_point(field_release:CCredentials_SteamGuardPhishingReport_Response.statename_actual)
  if (!_internal_has_statename_actual()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  auto* p = statename_actual_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (statename_actual_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    statename_actual_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCredentials_SteamGuardPhishingReport_Response::set_allocated_statename_actual(std::string* statename_actual) {
  if (statename_actual != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  statename_actual_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), statename_actual,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (statename_actual_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    statename_actual_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCredentials_SteamGuardPhishingReport_Response.statename_actual)
}

// optional string cityname_actual = 8;
inline bool CCredentials_SteamGuardPhishingReport_Response::_internal_has_cityname_actual() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CCredentials_SteamGuardPhishingReport_Response::has_cityname_actual() const {
  return _internal_has_cityname_actual();
}
inline void CCredentials_SteamGuardPhishingReport_Response::clear_cityname_actual() {
  cityname_actual_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& CCredentials_SteamGuardPhishingReport_Response::cityname_actual() const {
  // @@protoc_insertion_point(field_get:CCredentials_SteamGuardPhishingReport_Response.cityname_actual)
  return _internal_cityname_actual();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCredentials_SteamGuardPhishingReport_Response::set_cityname_actual(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000080u;
 cityname_actual_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCredentials_SteamGuardPhishingReport_Response.cityname_actual)
}
inline std::string* CCredentials_SteamGuardPhishingReport_Response::mutable_cityname_actual() {
  std::string* _s = _internal_mutable_cityname_actual();
  // @@protoc_insertion_point(field_mutable:CCredentials_SteamGuardPhishingReport_Response.cityname_actual)
  return _s;
}
inline const std::string& CCredentials_SteamGuardPhishingReport_Response::_internal_cityname_actual() const {
  return cityname_actual_.Get();
}
inline void CCredentials_SteamGuardPhishingReport_Response::_internal_set_cityname_actual(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  cityname_actual_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCredentials_SteamGuardPhishingReport_Response::_internal_mutable_cityname_actual() {
  _has_bits_[0] |= 0x00000080u;
  return cityname_actual_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCredentials_SteamGuardPhishingReport_Response::release_cityname_actual() {
  // @@protoc_insertion_point(field_release:CCredentials_SteamGuardPhishingReport_Response.cityname_actual)
  if (!_internal_has_cityname_actual()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  auto* p = cityname_actual_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cityname_actual_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    cityname_actual_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCredentials_SteamGuardPhishingReport_Response::set_allocated_cityname_actual(std::string* cityname_actual) {
  if (cityname_actual != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  cityname_actual_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cityname_actual,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cityname_actual_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    cityname_actual_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCredentials_SteamGuardPhishingReport_Response.cityname_actual)
}

// optional string steamguard_code = 9;
inline bool CCredentials_SteamGuardPhishingReport_Response::_internal_has_steamguard_code() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CCredentials_SteamGuardPhishingReport_Response::has_steamguard_code() const {
  return _internal_has_steamguard_code();
}
inline void CCredentials_SteamGuardPhishingReport_Response::clear_steamguard_code() {
  steamguard_code_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& CCredentials_SteamGuardPhishingReport_Response::steamguard_code() const {
  // @@protoc_insertion_point(field_get:CCredentials_SteamGuardPhishingReport_Response.steamguard_code)
  return _internal_steamguard_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCredentials_SteamGuardPhishingReport_Response::set_steamguard_code(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000100u;
 steamguard_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCredentials_SteamGuardPhishingReport_Response.steamguard_code)
}
inline std::string* CCredentials_SteamGuardPhishingReport_Response::mutable_steamguard_code() {
  std::string* _s = _internal_mutable_steamguard_code();
  // @@protoc_insertion_point(field_mutable:CCredentials_SteamGuardPhishingReport_Response.steamguard_code)
  return _s;
}
inline const std::string& CCredentials_SteamGuardPhishingReport_Response::_internal_steamguard_code() const {
  return steamguard_code_.Get();
}
inline void CCredentials_SteamGuardPhishingReport_Response::_internal_set_steamguard_code(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  steamguard_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCredentials_SteamGuardPhishingReport_Response::_internal_mutable_steamguard_code() {
  _has_bits_[0] |= 0x00000100u;
  return steamguard_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCredentials_SteamGuardPhishingReport_Response::release_steamguard_code() {
  // @@protoc_insertion_point(field_release:CCredentials_SteamGuardPhishingReport_Response.steamguard_code)
  if (!_internal_has_steamguard_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  auto* p = steamguard_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (steamguard_code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    steamguard_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCredentials_SteamGuardPhishingReport_Response::set_allocated_steamguard_code(std::string* steamguard_code) {
  if (steamguard_code != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  steamguard_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), steamguard_code,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (steamguard_code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    steamguard_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCredentials_SteamGuardPhishingReport_Response.steamguard_code)
}

// -------------------------------------------------------------------

// CCredentials_LastCredentialChangeTime_Request

// optional bool user_changes_only = 1;
inline bool CCredentials_LastCredentialChangeTime_Request::_internal_has_user_changes_only() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCredentials_LastCredentialChangeTime_Request::has_user_changes_only() const {
  return _internal_has_user_changes_only();
}
inline void CCredentials_LastCredentialChangeTime_Request::clear_user_changes_only() {
  user_changes_only_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CCredentials_LastCredentialChangeTime_Request::_internal_user_changes_only() const {
  return user_changes_only_;
}
inline bool CCredentials_LastCredentialChangeTime_Request::user_changes_only() const {
  // @@protoc_insertion_point(field_get:CCredentials_LastCredentialChangeTime_Request.user_changes_only)
  return _internal_user_changes_only();
}
inline void CCredentials_LastCredentialChangeTime_Request::_internal_set_user_changes_only(bool value) {
  _has_bits_[0] |= 0x00000001u;
  user_changes_only_ = value;
}
inline void CCredentials_LastCredentialChangeTime_Request::set_user_changes_only(bool value) {
  _internal_set_user_changes_only(value);
  // @@protoc_insertion_point(field_set:CCredentials_LastCredentialChangeTime_Request.user_changes_only)
}

// -------------------------------------------------------------------

// CCredentials_LastCredentialChangeTime_Response

// optional fixed32 timestamp_last_password_change = 1;
inline bool CCredentials_LastCredentialChangeTime_Response::_internal_has_timestamp_last_password_change() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCredentials_LastCredentialChangeTime_Response::has_timestamp_last_password_change() const {
  return _internal_has_timestamp_last_password_change();
}
inline void CCredentials_LastCredentialChangeTime_Response::clear_timestamp_last_password_change() {
  timestamp_last_password_change_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CCredentials_LastCredentialChangeTime_Response::_internal_timestamp_last_password_change() const {
  return timestamp_last_password_change_;
}
inline uint32_t CCredentials_LastCredentialChangeTime_Response::timestamp_last_password_change() const {
  // @@protoc_insertion_point(field_get:CCredentials_LastCredentialChangeTime_Response.timestamp_last_password_change)
  return _internal_timestamp_last_password_change();
}
inline void CCredentials_LastCredentialChangeTime_Response::_internal_set_timestamp_last_password_change(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_last_password_change_ = value;
}
inline void CCredentials_LastCredentialChangeTime_Response::set_timestamp_last_password_change(uint32_t value) {
  _internal_set_timestamp_last_password_change(value);
  // @@protoc_insertion_point(field_set:CCredentials_LastCredentialChangeTime_Response.timestamp_last_password_change)
}

// optional fixed32 timestamp_last_email_change = 2;
inline bool CCredentials_LastCredentialChangeTime_Response::_internal_has_timestamp_last_email_change() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCredentials_LastCredentialChangeTime_Response::has_timestamp_last_email_change() const {
  return _internal_has_timestamp_last_email_change();
}
inline void CCredentials_LastCredentialChangeTime_Response::clear_timestamp_last_email_change() {
  timestamp_last_email_change_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CCredentials_LastCredentialChangeTime_Response::_internal_timestamp_last_email_change() const {
  return timestamp_last_email_change_;
}
inline uint32_t CCredentials_LastCredentialChangeTime_Response::timestamp_last_email_change() const {
  // @@protoc_insertion_point(field_get:CCredentials_LastCredentialChangeTime_Response.timestamp_last_email_change)
  return _internal_timestamp_last_email_change();
}
inline void CCredentials_LastCredentialChangeTime_Response::_internal_set_timestamp_last_email_change(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  timestamp_last_email_change_ = value;
}
inline void CCredentials_LastCredentialChangeTime_Response::set_timestamp_last_email_change(uint32_t value) {
  _internal_set_timestamp_last_email_change(value);
  // @@protoc_insertion_point(field_set:CCredentials_LastCredentialChangeTime_Response.timestamp_last_email_change)
}

// optional fixed32 timestamp_last_password_reset = 3;
inline bool CCredentials_LastCredentialChangeTime_Response::_internal_has_timestamp_last_password_reset() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CCredentials_LastCredentialChangeTime_Response::has_timestamp_last_password_reset() const {
  return _internal_has_timestamp_last_password_reset();
}
inline void CCredentials_LastCredentialChangeTime_Response::clear_timestamp_last_password_reset() {
  timestamp_last_password_reset_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CCredentials_LastCredentialChangeTime_Response::_internal_timestamp_last_password_reset() const {
  return timestamp_last_password_reset_;
}
inline uint32_t CCredentials_LastCredentialChangeTime_Response::timestamp_last_password_reset() const {
  // @@protoc_insertion_point(field_get:CCredentials_LastCredentialChangeTime_Response.timestamp_last_password_reset)
  return _internal_timestamp_last_password_reset();
}
inline void CCredentials_LastCredentialChangeTime_Response::_internal_set_timestamp_last_password_reset(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  timestamp_last_password_reset_ = value;
}
inline void CCredentials_LastCredentialChangeTime_Response::set_timestamp_last_password_reset(uint32_t value) {
  _internal_set_timestamp_last_password_reset(value);
  // @@protoc_insertion_point(field_set:CCredentials_LastCredentialChangeTime_Response.timestamp_last_password_reset)
}

// -------------------------------------------------------------------

// CCredentials_GetAccountAuthSecret_Request

// -------------------------------------------------------------------

// CCredentials_GetAccountAuthSecret_Response

// optional int32 secret_id = 1;
inline bool CCredentials_GetAccountAuthSecret_Response::_internal_has_secret_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCredentials_GetAccountAuthSecret_Response::has_secret_id() const {
  return _internal_has_secret_id();
}
inline void CCredentials_GetAccountAuthSecret_Response::clear_secret_id() {
  secret_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t CCredentials_GetAccountAuthSecret_Response::_internal_secret_id() const {
  return secret_id_;
}
inline int32_t CCredentials_GetAccountAuthSecret_Response::secret_id() const {
  // @@protoc_insertion_point(field_get:CCredentials_GetAccountAuthSecret_Response.secret_id)
  return _internal_secret_id();
}
inline void CCredentials_GetAccountAuthSecret_Response::_internal_set_secret_id(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  secret_id_ = value;
}
inline void CCredentials_GetAccountAuthSecret_Response::set_secret_id(int32_t value) {
  _internal_set_secret_id(value);
  // @@protoc_insertion_point(field_set:CCredentials_GetAccountAuthSecret_Response.secret_id)
}

// optional bytes secret = 2;
inline bool CCredentials_GetAccountAuthSecret_Response::_internal_has_secret() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCredentials_GetAccountAuthSecret_Response::has_secret() const {
  return _internal_has_secret();
}
inline void CCredentials_GetAccountAuthSecret_Response::clear_secret() {
  secret_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CCredentials_GetAccountAuthSecret_Response::secret() const {
  // @@protoc_insertion_point(field_get:CCredentials_GetAccountAuthSecret_Response.secret)
  return _internal_secret();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCredentials_GetAccountAuthSecret_Response::set_secret(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 secret_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCredentials_GetAccountAuthSecret_Response.secret)
}
inline std::string* CCredentials_GetAccountAuthSecret_Response::mutable_secret() {
  std::string* _s = _internal_mutable_secret();
  // @@protoc_insertion_point(field_mutable:CCredentials_GetAccountAuthSecret_Response.secret)
  return _s;
}
inline const std::string& CCredentials_GetAccountAuthSecret_Response::_internal_secret() const {
  return secret_.Get();
}
inline void CCredentials_GetAccountAuthSecret_Response::_internal_set_secret(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  secret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCredentials_GetAccountAuthSecret_Response::_internal_mutable_secret() {
  _has_bits_[0] |= 0x00000001u;
  return secret_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCredentials_GetAccountAuthSecret_Response::release_secret() {
  // @@protoc_insertion_point(field_release:CCredentials_GetAccountAuthSecret_Response.secret)
  if (!_internal_has_secret()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = secret_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (secret_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    secret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCredentials_GetAccountAuthSecret_Response::set_allocated_secret(std::string* secret) {
  if (secret != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  secret_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), secret,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (secret_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    secret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCredentials_GetAccountAuthSecret_Response.secret)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_steammessages_5fcredentials_2esteamclient_2eproto
