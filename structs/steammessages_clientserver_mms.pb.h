// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_clientserver_mms.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_steammessages_5fclientserver_5fmms_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_steammessages_5fclientserver_5fmms_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "steammessages_base.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_5fclientserver_5fmms_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_5fclientserver_5fmms_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[29]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fclientserver_5fmms_2eproto;
class CMsgClientMMSCreateLobby;
struct CMsgClientMMSCreateLobbyDefaultTypeInternal;
extern CMsgClientMMSCreateLobbyDefaultTypeInternal _CMsgClientMMSCreateLobby_default_instance_;
class CMsgClientMMSCreateLobbyResponse;
struct CMsgClientMMSCreateLobbyResponseDefaultTypeInternal;
extern CMsgClientMMSCreateLobbyResponseDefaultTypeInternal _CMsgClientMMSCreateLobbyResponse_default_instance_;
class CMsgClientMMSGetLobbyData;
struct CMsgClientMMSGetLobbyDataDefaultTypeInternal;
extern CMsgClientMMSGetLobbyDataDefaultTypeInternal _CMsgClientMMSGetLobbyData_default_instance_;
class CMsgClientMMSGetLobbyList;
struct CMsgClientMMSGetLobbyListDefaultTypeInternal;
extern CMsgClientMMSGetLobbyListDefaultTypeInternal _CMsgClientMMSGetLobbyList_default_instance_;
class CMsgClientMMSGetLobbyListResponse;
struct CMsgClientMMSGetLobbyListResponseDefaultTypeInternal;
extern CMsgClientMMSGetLobbyListResponseDefaultTypeInternal _CMsgClientMMSGetLobbyListResponse_default_instance_;
class CMsgClientMMSGetLobbyListResponse_Lobby;
struct CMsgClientMMSGetLobbyListResponse_LobbyDefaultTypeInternal;
extern CMsgClientMMSGetLobbyListResponse_LobbyDefaultTypeInternal _CMsgClientMMSGetLobbyListResponse_Lobby_default_instance_;
class CMsgClientMMSGetLobbyList_Filter;
struct CMsgClientMMSGetLobbyList_FilterDefaultTypeInternal;
extern CMsgClientMMSGetLobbyList_FilterDefaultTypeInternal _CMsgClientMMSGetLobbyList_Filter_default_instance_;
class CMsgClientMMSGetLobbyStatus;
struct CMsgClientMMSGetLobbyStatusDefaultTypeInternal;
extern CMsgClientMMSGetLobbyStatusDefaultTypeInternal _CMsgClientMMSGetLobbyStatus_default_instance_;
class CMsgClientMMSGetLobbyStatusResponse;
struct CMsgClientMMSGetLobbyStatusResponseDefaultTypeInternal;
extern CMsgClientMMSGetLobbyStatusResponseDefaultTypeInternal _CMsgClientMMSGetLobbyStatusResponse_default_instance_;
class CMsgClientMMSInviteToLobby;
struct CMsgClientMMSInviteToLobbyDefaultTypeInternal;
extern CMsgClientMMSInviteToLobbyDefaultTypeInternal _CMsgClientMMSInviteToLobby_default_instance_;
class CMsgClientMMSJoinLobby;
struct CMsgClientMMSJoinLobbyDefaultTypeInternal;
extern CMsgClientMMSJoinLobbyDefaultTypeInternal _CMsgClientMMSJoinLobby_default_instance_;
class CMsgClientMMSJoinLobbyResponse;
struct CMsgClientMMSJoinLobbyResponseDefaultTypeInternal;
extern CMsgClientMMSJoinLobbyResponseDefaultTypeInternal _CMsgClientMMSJoinLobbyResponse_default_instance_;
class CMsgClientMMSJoinLobbyResponse_Member;
struct CMsgClientMMSJoinLobbyResponse_MemberDefaultTypeInternal;
extern CMsgClientMMSJoinLobbyResponse_MemberDefaultTypeInternal _CMsgClientMMSJoinLobbyResponse_Member_default_instance_;
class CMsgClientMMSLeaveLobby;
struct CMsgClientMMSLeaveLobbyDefaultTypeInternal;
extern CMsgClientMMSLeaveLobbyDefaultTypeInternal _CMsgClientMMSLeaveLobby_default_instance_;
class CMsgClientMMSLeaveLobbyResponse;
struct CMsgClientMMSLeaveLobbyResponseDefaultTypeInternal;
extern CMsgClientMMSLeaveLobbyResponseDefaultTypeInternal _CMsgClientMMSLeaveLobbyResponse_default_instance_;
class CMsgClientMMSLobbyChatMsg;
struct CMsgClientMMSLobbyChatMsgDefaultTypeInternal;
extern CMsgClientMMSLobbyChatMsgDefaultTypeInternal _CMsgClientMMSLobbyChatMsg_default_instance_;
class CMsgClientMMSLobbyData;
struct CMsgClientMMSLobbyDataDefaultTypeInternal;
extern CMsgClientMMSLobbyDataDefaultTypeInternal _CMsgClientMMSLobbyData_default_instance_;
class CMsgClientMMSLobbyData_Member;
struct CMsgClientMMSLobbyData_MemberDefaultTypeInternal;
extern CMsgClientMMSLobbyData_MemberDefaultTypeInternal _CMsgClientMMSLobbyData_Member_default_instance_;
class CMsgClientMMSLobbyGameServerSet;
struct CMsgClientMMSLobbyGameServerSetDefaultTypeInternal;
extern CMsgClientMMSLobbyGameServerSetDefaultTypeInternal _CMsgClientMMSLobbyGameServerSet_default_instance_;
class CMsgClientMMSSendLobbyChatMsg;
struct CMsgClientMMSSendLobbyChatMsgDefaultTypeInternal;
extern CMsgClientMMSSendLobbyChatMsgDefaultTypeInternal _CMsgClientMMSSendLobbyChatMsg_default_instance_;
class CMsgClientMMSSetLobbyData;
struct CMsgClientMMSSetLobbyDataDefaultTypeInternal;
extern CMsgClientMMSSetLobbyDataDefaultTypeInternal _CMsgClientMMSSetLobbyData_default_instance_;
class CMsgClientMMSSetLobbyDataResponse;
struct CMsgClientMMSSetLobbyDataResponseDefaultTypeInternal;
extern CMsgClientMMSSetLobbyDataResponseDefaultTypeInternal _CMsgClientMMSSetLobbyDataResponse_default_instance_;
class CMsgClientMMSSetLobbyGameServer;
struct CMsgClientMMSSetLobbyGameServerDefaultTypeInternal;
extern CMsgClientMMSSetLobbyGameServerDefaultTypeInternal _CMsgClientMMSSetLobbyGameServer_default_instance_;
class CMsgClientMMSSetLobbyLinked;
struct CMsgClientMMSSetLobbyLinkedDefaultTypeInternal;
extern CMsgClientMMSSetLobbyLinkedDefaultTypeInternal _CMsgClientMMSSetLobbyLinked_default_instance_;
class CMsgClientMMSSetLobbyOwner;
struct CMsgClientMMSSetLobbyOwnerDefaultTypeInternal;
extern CMsgClientMMSSetLobbyOwnerDefaultTypeInternal _CMsgClientMMSSetLobbyOwner_default_instance_;
class CMsgClientMMSSetLobbyOwnerResponse;
struct CMsgClientMMSSetLobbyOwnerResponseDefaultTypeInternal;
extern CMsgClientMMSSetLobbyOwnerResponseDefaultTypeInternal _CMsgClientMMSSetLobbyOwnerResponse_default_instance_;
class CMsgClientMMSSetRatelimitPolicyOnClient;
struct CMsgClientMMSSetRatelimitPolicyOnClientDefaultTypeInternal;
extern CMsgClientMMSSetRatelimitPolicyOnClientDefaultTypeInternal _CMsgClientMMSSetRatelimitPolicyOnClient_default_instance_;
class CMsgClientMMSUserJoinedLobby;
struct CMsgClientMMSUserJoinedLobbyDefaultTypeInternal;
extern CMsgClientMMSUserJoinedLobbyDefaultTypeInternal _CMsgClientMMSUserJoinedLobby_default_instance_;
class CMsgClientMMSUserLeftLobby;
struct CMsgClientMMSUserLeftLobbyDefaultTypeInternal;
extern CMsgClientMMSUserLeftLobbyDefaultTypeInternal _CMsgClientMMSUserLeftLobby_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CMsgClientMMSCreateLobby* Arena::CreateMaybeMessage<::CMsgClientMMSCreateLobby>(Arena*);
template<> ::CMsgClientMMSCreateLobbyResponse* Arena::CreateMaybeMessage<::CMsgClientMMSCreateLobbyResponse>(Arena*);
template<> ::CMsgClientMMSGetLobbyData* Arena::CreateMaybeMessage<::CMsgClientMMSGetLobbyData>(Arena*);
template<> ::CMsgClientMMSGetLobbyList* Arena::CreateMaybeMessage<::CMsgClientMMSGetLobbyList>(Arena*);
template<> ::CMsgClientMMSGetLobbyListResponse* Arena::CreateMaybeMessage<::CMsgClientMMSGetLobbyListResponse>(Arena*);
template<> ::CMsgClientMMSGetLobbyListResponse_Lobby* Arena::CreateMaybeMessage<::CMsgClientMMSGetLobbyListResponse_Lobby>(Arena*);
template<> ::CMsgClientMMSGetLobbyList_Filter* Arena::CreateMaybeMessage<::CMsgClientMMSGetLobbyList_Filter>(Arena*);
template<> ::CMsgClientMMSGetLobbyStatus* Arena::CreateMaybeMessage<::CMsgClientMMSGetLobbyStatus>(Arena*);
template<> ::CMsgClientMMSGetLobbyStatusResponse* Arena::CreateMaybeMessage<::CMsgClientMMSGetLobbyStatusResponse>(Arena*);
template<> ::CMsgClientMMSInviteToLobby* Arena::CreateMaybeMessage<::CMsgClientMMSInviteToLobby>(Arena*);
template<> ::CMsgClientMMSJoinLobby* Arena::CreateMaybeMessage<::CMsgClientMMSJoinLobby>(Arena*);
template<> ::CMsgClientMMSJoinLobbyResponse* Arena::CreateMaybeMessage<::CMsgClientMMSJoinLobbyResponse>(Arena*);
template<> ::CMsgClientMMSJoinLobbyResponse_Member* Arena::CreateMaybeMessage<::CMsgClientMMSJoinLobbyResponse_Member>(Arena*);
template<> ::CMsgClientMMSLeaveLobby* Arena::CreateMaybeMessage<::CMsgClientMMSLeaveLobby>(Arena*);
template<> ::CMsgClientMMSLeaveLobbyResponse* Arena::CreateMaybeMessage<::CMsgClientMMSLeaveLobbyResponse>(Arena*);
template<> ::CMsgClientMMSLobbyChatMsg* Arena::CreateMaybeMessage<::CMsgClientMMSLobbyChatMsg>(Arena*);
template<> ::CMsgClientMMSLobbyData* Arena::CreateMaybeMessage<::CMsgClientMMSLobbyData>(Arena*);
template<> ::CMsgClientMMSLobbyData_Member* Arena::CreateMaybeMessage<::CMsgClientMMSLobbyData_Member>(Arena*);
template<> ::CMsgClientMMSLobbyGameServerSet* Arena::CreateMaybeMessage<::CMsgClientMMSLobbyGameServerSet>(Arena*);
template<> ::CMsgClientMMSSendLobbyChatMsg* Arena::CreateMaybeMessage<::CMsgClientMMSSendLobbyChatMsg>(Arena*);
template<> ::CMsgClientMMSSetLobbyData* Arena::CreateMaybeMessage<::CMsgClientMMSSetLobbyData>(Arena*);
template<> ::CMsgClientMMSSetLobbyDataResponse* Arena::CreateMaybeMessage<::CMsgClientMMSSetLobbyDataResponse>(Arena*);
template<> ::CMsgClientMMSSetLobbyGameServer* Arena::CreateMaybeMessage<::CMsgClientMMSSetLobbyGameServer>(Arena*);
template<> ::CMsgClientMMSSetLobbyLinked* Arena::CreateMaybeMessage<::CMsgClientMMSSetLobbyLinked>(Arena*);
template<> ::CMsgClientMMSSetLobbyOwner* Arena::CreateMaybeMessage<::CMsgClientMMSSetLobbyOwner>(Arena*);
template<> ::CMsgClientMMSSetLobbyOwnerResponse* Arena::CreateMaybeMessage<::CMsgClientMMSSetLobbyOwnerResponse>(Arena*);
template<> ::CMsgClientMMSSetRatelimitPolicyOnClient* Arena::CreateMaybeMessage<::CMsgClientMMSSetRatelimitPolicyOnClient>(Arena*);
template<> ::CMsgClientMMSUserJoinedLobby* Arena::CreateMaybeMessage<::CMsgClientMMSUserJoinedLobby>(Arena*);
template<> ::CMsgClientMMSUserLeftLobby* Arena::CreateMaybeMessage<::CMsgClientMMSUserLeftLobby>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum EMMSLobbyStatus : int {
  k_EMMSLobbyStatusInvalid = 0,
  k_EMMSLobbyStatusExists = 1,
  k_EMMSLobbyStatusDoesNotExist = 2,
  k_EMMSLobbyStatusNotAMember = 3
};
bool EMMSLobbyStatus_IsValid(int value);
constexpr EMMSLobbyStatus EMMSLobbyStatus_MIN = k_EMMSLobbyStatusInvalid;
constexpr EMMSLobbyStatus EMMSLobbyStatus_MAX = k_EMMSLobbyStatusNotAMember;
constexpr int EMMSLobbyStatus_ARRAYSIZE = EMMSLobbyStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMMSLobbyStatus_descriptor();
template<typename T>
inline const std::string& EMMSLobbyStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EMMSLobbyStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EMMSLobbyStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EMMSLobbyStatus_descriptor(), enum_t_value);
}
inline bool EMMSLobbyStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EMMSLobbyStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EMMSLobbyStatus>(
    EMMSLobbyStatus_descriptor(), name, value);
}
// ===================================================================

class CMsgClientMMSSetRatelimitPolicyOnClient final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientMMSSetRatelimitPolicyOnClient) */ {
 public:
  inline CMsgClientMMSSetRatelimitPolicyOnClient() : CMsgClientMMSSetRatelimitPolicyOnClient(nullptr) {}
  ~CMsgClientMMSSetRatelimitPolicyOnClient() override;
  explicit constexpr CMsgClientMMSSetRatelimitPolicyOnClient(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientMMSSetRatelimitPolicyOnClient(const CMsgClientMMSSetRatelimitPolicyOnClient& from);
  CMsgClientMMSSetRatelimitPolicyOnClient(CMsgClientMMSSetRatelimitPolicyOnClient&& from) noexcept
    : CMsgClientMMSSetRatelimitPolicyOnClient() {
    *this = ::std::move(from);
  }

  inline CMsgClientMMSSetRatelimitPolicyOnClient& operator=(const CMsgClientMMSSetRatelimitPolicyOnClient& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientMMSSetRatelimitPolicyOnClient& operator=(CMsgClientMMSSetRatelimitPolicyOnClient&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientMMSSetRatelimitPolicyOnClient& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientMMSSetRatelimitPolicyOnClient* internal_default_instance() {
    return reinterpret_cast<const CMsgClientMMSSetRatelimitPolicyOnClient*>(
               &_CMsgClientMMSSetRatelimitPolicyOnClient_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CMsgClientMMSSetRatelimitPolicyOnClient& a, CMsgClientMMSSetRatelimitPolicyOnClient& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientMMSSetRatelimitPolicyOnClient* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientMMSSetRatelimitPolicyOnClient* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientMMSSetRatelimitPolicyOnClient* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientMMSSetRatelimitPolicyOnClient>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientMMSSetRatelimitPolicyOnClient& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientMMSSetRatelimitPolicyOnClient& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientMMSSetRatelimitPolicyOnClient* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientMMSSetRatelimitPolicyOnClient";
  }
  protected:
  explicit CMsgClientMMSSetRatelimitPolicyOnClient(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppIdFieldNumber = 1,
    kEnableRateLimitsFieldNumber = 2,
    kSecondsPerMessageFieldNumber = 3,
    kMillisecondsPerDataUpdateFieldNumber = 4,
  };
  // optional uint32 app_id = 1;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // optional bool enable_rate_limits = 2;
  bool has_enable_rate_limits() const;
  private:
  bool _internal_has_enable_rate_limits() const;
  public:
  void clear_enable_rate_limits();
  bool enable_rate_limits() const;
  void set_enable_rate_limits(bool value);
  private:
  bool _internal_enable_rate_limits() const;
  void _internal_set_enable_rate_limits(bool value);
  public:

  // optional int32 seconds_per_message = 3;
  bool has_seconds_per_message() const;
  private:
  bool _internal_has_seconds_per_message() const;
  public:
  void clear_seconds_per_message();
  int32_t seconds_per_message() const;
  void set_seconds_per_message(int32_t value);
  private:
  int32_t _internal_seconds_per_message() const;
  void _internal_set_seconds_per_message(int32_t value);
  public:

  // optional int32 milliseconds_per_data_update = 4;
  bool has_milliseconds_per_data_update() const;
  private:
  bool _internal_has_milliseconds_per_data_update() const;
  public:
  void clear_milliseconds_per_data_update();
  int32_t milliseconds_per_data_update() const;
  void set_milliseconds_per_data_update(int32_t value);
  private:
  int32_t _internal_milliseconds_per_data_update() const;
  void _internal_set_milliseconds_per_data_update(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientMMSSetRatelimitPolicyOnClient)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t app_id_;
  bool enable_rate_limits_;
  int32_t seconds_per_message_;
  int32_t milliseconds_per_data_update_;
  friend struct ::TableStruct_steammessages_5fclientserver_5fmms_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientMMSCreateLobby final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientMMSCreateLobby) */ {
 public:
  inline CMsgClientMMSCreateLobby() : CMsgClientMMSCreateLobby(nullptr) {}
  ~CMsgClientMMSCreateLobby() override;
  explicit constexpr CMsgClientMMSCreateLobby(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientMMSCreateLobby(const CMsgClientMMSCreateLobby& from);
  CMsgClientMMSCreateLobby(CMsgClientMMSCreateLobby&& from) noexcept
    : CMsgClientMMSCreateLobby() {
    *this = ::std::move(from);
  }

  inline CMsgClientMMSCreateLobby& operator=(const CMsgClientMMSCreateLobby& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientMMSCreateLobby& operator=(CMsgClientMMSCreateLobby&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientMMSCreateLobby& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientMMSCreateLobby* internal_default_instance() {
    return reinterpret_cast<const CMsgClientMMSCreateLobby*>(
               &_CMsgClientMMSCreateLobby_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CMsgClientMMSCreateLobby& a, CMsgClientMMSCreateLobby& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientMMSCreateLobby* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientMMSCreateLobby* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientMMSCreateLobby* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientMMSCreateLobby>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientMMSCreateLobby& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientMMSCreateLobby& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientMMSCreateLobby* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientMMSCreateLobby";
  }
  protected:
  explicit CMsgClientMMSCreateLobby(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 7,
    kPersonaNameOwnerFieldNumber = 8,
    kPublicIpFieldNumber = 9,
    kAppIdFieldNumber = 1,
    kMaxMembersFieldNumber = 2,
    kLobbyTypeFieldNumber = 3,
    kLobbyFlagsFieldNumber = 4,
    kCellIdFieldNumber = 5,
    kDeprecatedPublicIpFieldNumber = 6,
  };
  // optional bytes metadata = 7;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const std::string& metadata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_metadata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_metadata();
  PROTOBUF_NODISCARD std::string* release_metadata();
  void set_allocated_metadata(std::string* metadata);
  private:
  const std::string& _internal_metadata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metadata(const std::string& value);
  std::string* _internal_mutable_metadata();
  public:

  // optional string persona_name_owner = 8;
  bool has_persona_name_owner() const;
  private:
  bool _internal_has_persona_name_owner() const;
  public:
  void clear_persona_name_owner();
  const std::string& persona_name_owner() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_persona_name_owner(ArgT0&& arg0, ArgT... args);
  std::string* mutable_persona_name_owner();
  PROTOBUF_NODISCARD std::string* release_persona_name_owner();
  void set_allocated_persona_name_owner(std::string* persona_name_owner);
  private:
  const std::string& _internal_persona_name_owner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_persona_name_owner(const std::string& value);
  std::string* _internal_mutable_persona_name_owner();
  public:

  // optional .CMsgIPAddress public_ip = 9;
  bool has_public_ip() const;
  private:
  bool _internal_has_public_ip() const;
  public:
  void clear_public_ip();
  const ::CMsgIPAddress& public_ip() const;
  PROTOBUF_NODISCARD ::CMsgIPAddress* release_public_ip();
  ::CMsgIPAddress* mutable_public_ip();
  void set_allocated_public_ip(::CMsgIPAddress* public_ip);
  private:
  const ::CMsgIPAddress& _internal_public_ip() const;
  ::CMsgIPAddress* _internal_mutable_public_ip();
  public:
  void unsafe_arena_set_allocated_public_ip(
      ::CMsgIPAddress* public_ip);
  ::CMsgIPAddress* unsafe_arena_release_public_ip();

  // optional uint32 app_id = 1;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // optional int32 max_members = 2;
  bool has_max_members() const;
  private:
  bool _internal_has_max_members() const;
  public:
  void clear_max_members();
  int32_t max_members() const;
  void set_max_members(int32_t value);
  private:
  int32_t _internal_max_members() const;
  void _internal_set_max_members(int32_t value);
  public:

  // optional int32 lobby_type = 3;
  bool has_lobby_type() const;
  private:
  bool _internal_has_lobby_type() const;
  public:
  void clear_lobby_type();
  int32_t lobby_type() const;
  void set_lobby_type(int32_t value);
  private:
  int32_t _internal_lobby_type() const;
  void _internal_set_lobby_type(int32_t value);
  public:

  // optional int32 lobby_flags = 4;
  bool has_lobby_flags() const;
  private:
  bool _internal_has_lobby_flags() const;
  public:
  void clear_lobby_flags();
  int32_t lobby_flags() const;
  void set_lobby_flags(int32_t value);
  private:
  int32_t _internal_lobby_flags() const;
  void _internal_set_lobby_flags(int32_t value);
  public:

  // optional uint32 cell_id = 5;
  bool has_cell_id() const;
  private:
  bool _internal_has_cell_id() const;
  public:
  void clear_cell_id();
  uint32_t cell_id() const;
  void set_cell_id(uint32_t value);
  private:
  uint32_t _internal_cell_id() const;
  void _internal_set_cell_id(uint32_t value);
  public:

  // optional uint32 deprecated_public_ip = 6;
  bool has_deprecated_public_ip() const;
  private:
  bool _internal_has_deprecated_public_ip() const;
  public:
  void clear_deprecated_public_ip();
  uint32_t deprecated_public_ip() const;
  void set_deprecated_public_ip(uint32_t value);
  private:
  uint32_t _internal_deprecated_public_ip() const;
  void _internal_set_deprecated_public_ip(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientMMSCreateLobby)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr persona_name_owner_;
  ::CMsgIPAddress* public_ip_;
  uint32_t app_id_;
  int32_t max_members_;
  int32_t lobby_type_;
  int32_t lobby_flags_;
  uint32_t cell_id_;
  uint32_t deprecated_public_ip_;
  friend struct ::TableStruct_steammessages_5fclientserver_5fmms_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientMMSCreateLobbyResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientMMSCreateLobbyResponse) */ {
 public:
  inline CMsgClientMMSCreateLobbyResponse() : CMsgClientMMSCreateLobbyResponse(nullptr) {}
  ~CMsgClientMMSCreateLobbyResponse() override;
  explicit constexpr CMsgClientMMSCreateLobbyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientMMSCreateLobbyResponse(const CMsgClientMMSCreateLobbyResponse& from);
  CMsgClientMMSCreateLobbyResponse(CMsgClientMMSCreateLobbyResponse&& from) noexcept
    : CMsgClientMMSCreateLobbyResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientMMSCreateLobbyResponse& operator=(const CMsgClientMMSCreateLobbyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientMMSCreateLobbyResponse& operator=(CMsgClientMMSCreateLobbyResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientMMSCreateLobbyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientMMSCreateLobbyResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientMMSCreateLobbyResponse*>(
               &_CMsgClientMMSCreateLobbyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CMsgClientMMSCreateLobbyResponse& a, CMsgClientMMSCreateLobbyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientMMSCreateLobbyResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientMMSCreateLobbyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientMMSCreateLobbyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientMMSCreateLobbyResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientMMSCreateLobbyResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientMMSCreateLobbyResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientMMSCreateLobbyResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientMMSCreateLobbyResponse";
  }
  protected:
  explicit CMsgClientMMSCreateLobbyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamIdLobbyFieldNumber = 2,
    kAppIdFieldNumber = 1,
    kEresultFieldNumber = 3,
  };
  // optional fixed64 steam_id_lobby = 2;
  bool has_steam_id_lobby() const;
  private:
  bool _internal_has_steam_id_lobby() const;
  public:
  void clear_steam_id_lobby();
  uint64_t steam_id_lobby() const;
  void set_steam_id_lobby(uint64_t value);
  private:
  uint64_t _internal_steam_id_lobby() const;
  void _internal_set_steam_id_lobby(uint64_t value);
  public:

  // optional uint32 app_id = 1;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // optional int32 eresult = 3 [default = 2];
  bool has_eresult() const;
  private:
  bool _internal_has_eresult() const;
  public:
  void clear_eresult();
  int32_t eresult() const;
  void set_eresult(int32_t value);
  private:
  int32_t _internal_eresult() const;
  void _internal_set_eresult(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientMMSCreateLobbyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t steam_id_lobby_;
  uint32_t app_id_;
  int32_t eresult_;
  friend struct ::TableStruct_steammessages_5fclientserver_5fmms_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientMMSJoinLobby final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientMMSJoinLobby) */ {
 public:
  inline CMsgClientMMSJoinLobby() : CMsgClientMMSJoinLobby(nullptr) {}
  ~CMsgClientMMSJoinLobby() override;
  explicit constexpr CMsgClientMMSJoinLobby(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientMMSJoinLobby(const CMsgClientMMSJoinLobby& from);
  CMsgClientMMSJoinLobby(CMsgClientMMSJoinLobby&& from) noexcept
    : CMsgClientMMSJoinLobby() {
    *this = ::std::move(from);
  }

  inline CMsgClientMMSJoinLobby& operator=(const CMsgClientMMSJoinLobby& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientMMSJoinLobby& operator=(CMsgClientMMSJoinLobby&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientMMSJoinLobby& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientMMSJoinLobby* internal_default_instance() {
    return reinterpret_cast<const CMsgClientMMSJoinLobby*>(
               &_CMsgClientMMSJoinLobby_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CMsgClientMMSJoinLobby& a, CMsgClientMMSJoinLobby& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientMMSJoinLobby* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientMMSJoinLobby* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientMMSJoinLobby* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientMMSJoinLobby>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientMMSJoinLobby& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientMMSJoinLobby& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientMMSJoinLobby* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientMMSJoinLobby";
  }
  protected:
  explicit CMsgClientMMSJoinLobby(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPersonaNameFieldNumber = 3,
    kSteamIdLobbyFieldNumber = 2,
    kAppIdFieldNumber = 1,
  };
  // optional string persona_name = 3;
  bool has_persona_name() const;
  private:
  bool _internal_has_persona_name() const;
  public:
  void clear_persona_name();
  const std::string& persona_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_persona_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_persona_name();
  PROTOBUF_NODISCARD std::string* release_persona_name();
  void set_allocated_persona_name(std::string* persona_name);
  private:
  const std::string& _internal_persona_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_persona_name(const std::string& value);
  std::string* _internal_mutable_persona_name();
  public:

  // optional fixed64 steam_id_lobby = 2;
  bool has_steam_id_lobby() const;
  private:
  bool _internal_has_steam_id_lobby() const;
  public:
  void clear_steam_id_lobby();
  uint64_t steam_id_lobby() const;
  void set_steam_id_lobby(uint64_t value);
  private:
  uint64_t _internal_steam_id_lobby() const;
  void _internal_set_steam_id_lobby(uint64_t value);
  public:

  // optional uint32 app_id = 1;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientMMSJoinLobby)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr persona_name_;
  uint64_t steam_id_lobby_;
  uint32_t app_id_;
  friend struct ::TableStruct_steammessages_5fclientserver_5fmms_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientMMSJoinLobbyResponse_Member final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientMMSJoinLobbyResponse.Member) */ {
 public:
  inline CMsgClientMMSJoinLobbyResponse_Member() : CMsgClientMMSJoinLobbyResponse_Member(nullptr) {}
  ~CMsgClientMMSJoinLobbyResponse_Member() override;
  explicit constexpr CMsgClientMMSJoinLobbyResponse_Member(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientMMSJoinLobbyResponse_Member(const CMsgClientMMSJoinLobbyResponse_Member& from);
  CMsgClientMMSJoinLobbyResponse_Member(CMsgClientMMSJoinLobbyResponse_Member&& from) noexcept
    : CMsgClientMMSJoinLobbyResponse_Member() {
    *this = ::std::move(from);
  }

  inline CMsgClientMMSJoinLobbyResponse_Member& operator=(const CMsgClientMMSJoinLobbyResponse_Member& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientMMSJoinLobbyResponse_Member& operator=(CMsgClientMMSJoinLobbyResponse_Member&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientMMSJoinLobbyResponse_Member& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientMMSJoinLobbyResponse_Member* internal_default_instance() {
    return reinterpret_cast<const CMsgClientMMSJoinLobbyResponse_Member*>(
               &_CMsgClientMMSJoinLobbyResponse_Member_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CMsgClientMMSJoinLobbyResponse_Member& a, CMsgClientMMSJoinLobbyResponse_Member& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientMMSJoinLobbyResponse_Member* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientMMSJoinLobbyResponse_Member* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientMMSJoinLobbyResponse_Member* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientMMSJoinLobbyResponse_Member>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientMMSJoinLobbyResponse_Member& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientMMSJoinLobbyResponse_Member& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientMMSJoinLobbyResponse_Member* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientMMSJoinLobbyResponse.Member";
  }
  protected:
  explicit CMsgClientMMSJoinLobbyResponse_Member(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPersonaNameFieldNumber = 2,
    kMetadataFieldNumber = 3,
    kSteamIdFieldNumber = 1,
  };
  // optional string persona_name = 2;
  bool has_persona_name() const;
  private:
  bool _internal_has_persona_name() const;
  public:
  void clear_persona_name();
  const std::string& persona_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_persona_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_persona_name();
  PROTOBUF_NODISCARD std::string* release_persona_name();
  void set_allocated_persona_name(std::string* persona_name);
  private:
  const std::string& _internal_persona_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_persona_name(const std::string& value);
  std::string* _internal_mutable_persona_name();
  public:

  // optional bytes metadata = 3;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const std::string& metadata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_metadata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_metadata();
  PROTOBUF_NODISCARD std::string* release_metadata();
  void set_allocated_metadata(std::string* metadata);
  private:
  const std::string& _internal_metadata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metadata(const std::string& value);
  std::string* _internal_mutable_metadata();
  public:

  // optional fixed64 steam_id = 1;
  bool has_steam_id() const;
  private:
  bool _internal_has_steam_id() const;
  public:
  void clear_steam_id();
  uint64_t steam_id() const;
  void set_steam_id(uint64_t value);
  private:
  uint64_t _internal_steam_id() const;
  void _internal_set_steam_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientMMSJoinLobbyResponse.Member)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr persona_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
  uint64_t steam_id_;
  friend struct ::TableStruct_steammessages_5fclientserver_5fmms_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientMMSJoinLobbyResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientMMSJoinLobbyResponse) */ {
 public:
  inline CMsgClientMMSJoinLobbyResponse() : CMsgClientMMSJoinLobbyResponse(nullptr) {}
  ~CMsgClientMMSJoinLobbyResponse() override;
  explicit constexpr CMsgClientMMSJoinLobbyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientMMSJoinLobbyResponse(const CMsgClientMMSJoinLobbyResponse& from);
  CMsgClientMMSJoinLobbyResponse(CMsgClientMMSJoinLobbyResponse&& from) noexcept
    : CMsgClientMMSJoinLobbyResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientMMSJoinLobbyResponse& operator=(const CMsgClientMMSJoinLobbyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientMMSJoinLobbyResponse& operator=(CMsgClientMMSJoinLobbyResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientMMSJoinLobbyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientMMSJoinLobbyResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientMMSJoinLobbyResponse*>(
               &_CMsgClientMMSJoinLobbyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CMsgClientMMSJoinLobbyResponse& a, CMsgClientMMSJoinLobbyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientMMSJoinLobbyResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientMMSJoinLobbyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientMMSJoinLobbyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientMMSJoinLobbyResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientMMSJoinLobbyResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientMMSJoinLobbyResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientMMSJoinLobbyResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientMMSJoinLobbyResponse";
  }
  protected:
  explicit CMsgClientMMSJoinLobbyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgClientMMSJoinLobbyResponse_Member Member;

  // accessors -------------------------------------------------------

  enum : int {
    kMembersFieldNumber = 9,
    kMetadataFieldNumber = 8,
    kSteamIdLobbyFieldNumber = 2,
    kAppIdFieldNumber = 1,
    kChatRoomEnterResponseFieldNumber = 3,
    kMaxMembersFieldNumber = 4,
    kLobbyTypeFieldNumber = 5,
    kSteamIdOwnerFieldNumber = 7,
    kLobbyFlagsFieldNumber = 6,
  };
  // repeated .CMsgClientMMSJoinLobbyResponse.Member members = 9;
  int members_size() const;
  private:
  int _internal_members_size() const;
  public:
  void clear_members();
  ::CMsgClientMMSJoinLobbyResponse_Member* mutable_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientMMSJoinLobbyResponse_Member >*
      mutable_members();
  private:
  const ::CMsgClientMMSJoinLobbyResponse_Member& _internal_members(int index) const;
  ::CMsgClientMMSJoinLobbyResponse_Member* _internal_add_members();
  public:
  const ::CMsgClientMMSJoinLobbyResponse_Member& members(int index) const;
  ::CMsgClientMMSJoinLobbyResponse_Member* add_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientMMSJoinLobbyResponse_Member >&
      members() const;

  // optional bytes metadata = 8;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const std::string& metadata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_metadata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_metadata();
  PROTOBUF_NODISCARD std::string* release_metadata();
  void set_allocated_metadata(std::string* metadata);
  private:
  const std::string& _internal_metadata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metadata(const std::string& value);
  std::string* _internal_mutable_metadata();
  public:

  // optional fixed64 steam_id_lobby = 2;
  bool has_steam_id_lobby() const;
  private:
  bool _internal_has_steam_id_lobby() const;
  public:
  void clear_steam_id_lobby();
  uint64_t steam_id_lobby() const;
  void set_steam_id_lobby(uint64_t value);
  private:
  uint64_t _internal_steam_id_lobby() const;
  void _internal_set_steam_id_lobby(uint64_t value);
  public:

  // optional uint32 app_id = 1;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // optional int32 chat_room_enter_response = 3;
  bool has_chat_room_enter_response() const;
  private:
  bool _internal_has_chat_room_enter_response() const;
  public:
  void clear_chat_room_enter_response();
  int32_t chat_room_enter_response() const;
  void set_chat_room_enter_response(int32_t value);
  private:
  int32_t _internal_chat_room_enter_response() const;
  void _internal_set_chat_room_enter_response(int32_t value);
  public:

  // optional int32 max_members = 4;
  bool has_max_members() const;
  private:
  bool _internal_has_max_members() const;
  public:
  void clear_max_members();
  int32_t max_members() const;
  void set_max_members(int32_t value);
  private:
  int32_t _internal_max_members() const;
  void _internal_set_max_members(int32_t value);
  public:

  // optional int32 lobby_type = 5;
  bool has_lobby_type() const;
  private:
  bool _internal_has_lobby_type() const;
  public:
  void clear_lobby_type();
  int32_t lobby_type() const;
  void set_lobby_type(int32_t value);
  private:
  int32_t _internal_lobby_type() const;
  void _internal_set_lobby_type(int32_t value);
  public:

  // optional fixed64 steam_id_owner = 7;
  bool has_steam_id_owner() const;
  private:
  bool _internal_has_steam_id_owner() const;
  public:
  void clear_steam_id_owner();
  uint64_t steam_id_owner() const;
  void set_steam_id_owner(uint64_t value);
  private:
  uint64_t _internal_steam_id_owner() const;
  void _internal_set_steam_id_owner(uint64_t value);
  public:

  // optional int32 lobby_flags = 6;
  bool has_lobby_flags() const;
  private:
  bool _internal_has_lobby_flags() const;
  public:
  void clear_lobby_flags();
  int32_t lobby_flags() const;
  void set_lobby_flags(int32_t value);
  private:
  int32_t _internal_lobby_flags() const;
  void _internal_set_lobby_flags(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientMMSJoinLobbyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientMMSJoinLobbyResponse_Member > members_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
  uint64_t steam_id_lobby_;
  uint32_t app_id_;
  int32_t chat_room_enter_response_;
  int32_t max_members_;
  int32_t lobby_type_;
  uint64_t steam_id_owner_;
  int32_t lobby_flags_;
  friend struct ::TableStruct_steammessages_5fclientserver_5fmms_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientMMSLeaveLobby final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientMMSLeaveLobby) */ {
 public:
  inline CMsgClientMMSLeaveLobby() : CMsgClientMMSLeaveLobby(nullptr) {}
  ~CMsgClientMMSLeaveLobby() override;
  explicit constexpr CMsgClientMMSLeaveLobby(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientMMSLeaveLobby(const CMsgClientMMSLeaveLobby& from);
  CMsgClientMMSLeaveLobby(CMsgClientMMSLeaveLobby&& from) noexcept
    : CMsgClientMMSLeaveLobby() {
    *this = ::std::move(from);
  }

  inline CMsgClientMMSLeaveLobby& operator=(const CMsgClientMMSLeaveLobby& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientMMSLeaveLobby& operator=(CMsgClientMMSLeaveLobby&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientMMSLeaveLobby& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientMMSLeaveLobby* internal_default_instance() {
    return reinterpret_cast<const CMsgClientMMSLeaveLobby*>(
               &_CMsgClientMMSLeaveLobby_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CMsgClientMMSLeaveLobby& a, CMsgClientMMSLeaveLobby& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientMMSLeaveLobby* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientMMSLeaveLobby* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientMMSLeaveLobby* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientMMSLeaveLobby>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientMMSLeaveLobby& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientMMSLeaveLobby& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientMMSLeaveLobby* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientMMSLeaveLobby";
  }
  protected:
  explicit CMsgClientMMSLeaveLobby(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamIdLobbyFieldNumber = 2,
    kAppIdFieldNumber = 1,
  };
  // optional fixed64 steam_id_lobby = 2;
  bool has_steam_id_lobby() const;
  private:
  bool _internal_has_steam_id_lobby() const;
  public:
  void clear_steam_id_lobby();
  uint64_t steam_id_lobby() const;
  void set_steam_id_lobby(uint64_t value);
  private:
  uint64_t _internal_steam_id_lobby() const;
  void _internal_set_steam_id_lobby(uint64_t value);
  public:

  // optional uint32 app_id = 1;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientMMSLeaveLobby)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t steam_id_lobby_;
  uint32_t app_id_;
  friend struct ::TableStruct_steammessages_5fclientserver_5fmms_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientMMSLeaveLobbyResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientMMSLeaveLobbyResponse) */ {
 public:
  inline CMsgClientMMSLeaveLobbyResponse() : CMsgClientMMSLeaveLobbyResponse(nullptr) {}
  ~CMsgClientMMSLeaveLobbyResponse() override;
  explicit constexpr CMsgClientMMSLeaveLobbyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientMMSLeaveLobbyResponse(const CMsgClientMMSLeaveLobbyResponse& from);
  CMsgClientMMSLeaveLobbyResponse(CMsgClientMMSLeaveLobbyResponse&& from) noexcept
    : CMsgClientMMSLeaveLobbyResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientMMSLeaveLobbyResponse& operator=(const CMsgClientMMSLeaveLobbyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientMMSLeaveLobbyResponse& operator=(CMsgClientMMSLeaveLobbyResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientMMSLeaveLobbyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientMMSLeaveLobbyResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientMMSLeaveLobbyResponse*>(
               &_CMsgClientMMSLeaveLobbyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CMsgClientMMSLeaveLobbyResponse& a, CMsgClientMMSLeaveLobbyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientMMSLeaveLobbyResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientMMSLeaveLobbyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientMMSLeaveLobbyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientMMSLeaveLobbyResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientMMSLeaveLobbyResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientMMSLeaveLobbyResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientMMSLeaveLobbyResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientMMSLeaveLobbyResponse";
  }
  protected:
  explicit CMsgClientMMSLeaveLobbyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamIdLobbyFieldNumber = 2,
    kAppIdFieldNumber = 1,
    kEresultFieldNumber = 3,
  };
  // optional fixed64 steam_id_lobby = 2;
  bool has_steam_id_lobby() const;
  private:
  bool _internal_has_steam_id_lobby() const;
  public:
  void clear_steam_id_lobby();
  uint64_t steam_id_lobby() const;
  void set_steam_id_lobby(uint64_t value);
  private:
  uint64_t _internal_steam_id_lobby() const;
  void _internal_set_steam_id_lobby(uint64_t value);
  public:

  // optional uint32 app_id = 1;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // optional int32 eresult = 3 [default = 2];
  bool has_eresult() const;
  private:
  bool _internal_has_eresult() const;
  public:
  void clear_eresult();
  int32_t eresult() const;
  void set_eresult(int32_t value);
  private:
  int32_t _internal_eresult() const;
  void _internal_set_eresult(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientMMSLeaveLobbyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t steam_id_lobby_;
  uint32_t app_id_;
  int32_t eresult_;
  friend struct ::TableStruct_steammessages_5fclientserver_5fmms_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientMMSGetLobbyList_Filter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientMMSGetLobbyList.Filter) */ {
 public:
  inline CMsgClientMMSGetLobbyList_Filter() : CMsgClientMMSGetLobbyList_Filter(nullptr) {}
  ~CMsgClientMMSGetLobbyList_Filter() override;
  explicit constexpr CMsgClientMMSGetLobbyList_Filter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientMMSGetLobbyList_Filter(const CMsgClientMMSGetLobbyList_Filter& from);
  CMsgClientMMSGetLobbyList_Filter(CMsgClientMMSGetLobbyList_Filter&& from) noexcept
    : CMsgClientMMSGetLobbyList_Filter() {
    *this = ::std::move(from);
  }

  inline CMsgClientMMSGetLobbyList_Filter& operator=(const CMsgClientMMSGetLobbyList_Filter& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientMMSGetLobbyList_Filter& operator=(CMsgClientMMSGetLobbyList_Filter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientMMSGetLobbyList_Filter& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientMMSGetLobbyList_Filter* internal_default_instance() {
    return reinterpret_cast<const CMsgClientMMSGetLobbyList_Filter*>(
               &_CMsgClientMMSGetLobbyList_Filter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CMsgClientMMSGetLobbyList_Filter& a, CMsgClientMMSGetLobbyList_Filter& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientMMSGetLobbyList_Filter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientMMSGetLobbyList_Filter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientMMSGetLobbyList_Filter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientMMSGetLobbyList_Filter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientMMSGetLobbyList_Filter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientMMSGetLobbyList_Filter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientMMSGetLobbyList_Filter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientMMSGetLobbyList.Filter";
  }
  protected:
  explicit CMsgClientMMSGetLobbyList_Filter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
    kComparisionFieldNumber = 3,
    kFilterTypeFieldNumber = 4,
  };
  // optional string key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // optional string value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // optional int32 comparision = 3;
  bool has_comparision() const;
  private:
  bool _internal_has_comparision() const;
  public:
  void clear_comparision();
  int32_t comparision() const;
  void set_comparision(int32_t value);
  private:
  int32_t _internal_comparision() const;
  void _internal_set_comparision(int32_t value);
  public:

  // optional int32 filter_type = 4;
  bool has_filter_type() const;
  private:
  bool _internal_has_filter_type() const;
  public:
  void clear_filter_type();
  int32_t filter_type() const;
  void set_filter_type(int32_t value);
  private:
  int32_t _internal_filter_type() const;
  void _internal_set_filter_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientMMSGetLobbyList.Filter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  int32_t comparision_;
  int32_t filter_type_;
  friend struct ::TableStruct_steammessages_5fclientserver_5fmms_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientMMSGetLobbyList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientMMSGetLobbyList) */ {
 public:
  inline CMsgClientMMSGetLobbyList() : CMsgClientMMSGetLobbyList(nullptr) {}
  ~CMsgClientMMSGetLobbyList() override;
  explicit constexpr CMsgClientMMSGetLobbyList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientMMSGetLobbyList(const CMsgClientMMSGetLobbyList& from);
  CMsgClientMMSGetLobbyList(CMsgClientMMSGetLobbyList&& from) noexcept
    : CMsgClientMMSGetLobbyList() {
    *this = ::std::move(from);
  }

  inline CMsgClientMMSGetLobbyList& operator=(const CMsgClientMMSGetLobbyList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientMMSGetLobbyList& operator=(CMsgClientMMSGetLobbyList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientMMSGetLobbyList& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientMMSGetLobbyList* internal_default_instance() {
    return reinterpret_cast<const CMsgClientMMSGetLobbyList*>(
               &_CMsgClientMMSGetLobbyList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CMsgClientMMSGetLobbyList& a, CMsgClientMMSGetLobbyList& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientMMSGetLobbyList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientMMSGetLobbyList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientMMSGetLobbyList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientMMSGetLobbyList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientMMSGetLobbyList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientMMSGetLobbyList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientMMSGetLobbyList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientMMSGetLobbyList";
  }
  protected:
  explicit CMsgClientMMSGetLobbyList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgClientMMSGetLobbyList_Filter Filter;

  // accessors -------------------------------------------------------

  enum : int {
    kFiltersFieldNumber = 6,
    kPublicIpFieldNumber = 7,
    kAppIdFieldNumber = 1,
    kNumLobbiesRequestedFieldNumber = 3,
    kCellIdFieldNumber = 4,
    kDeprecatedPublicIpFieldNumber = 5,
  };
  // repeated .CMsgClientMMSGetLobbyList.Filter filters = 6;
  int filters_size() const;
  private:
  int _internal_filters_size() const;
  public:
  void clear_filters();
  ::CMsgClientMMSGetLobbyList_Filter* mutable_filters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientMMSGetLobbyList_Filter >*
      mutable_filters();
  private:
  const ::CMsgClientMMSGetLobbyList_Filter& _internal_filters(int index) const;
  ::CMsgClientMMSGetLobbyList_Filter* _internal_add_filters();
  public:
  const ::CMsgClientMMSGetLobbyList_Filter& filters(int index) const;
  ::CMsgClientMMSGetLobbyList_Filter* add_filters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientMMSGetLobbyList_Filter >&
      filters() const;

  // optional .CMsgIPAddress public_ip = 7;
  bool has_public_ip() const;
  private:
  bool _internal_has_public_ip() const;
  public:
  void clear_public_ip();
  const ::CMsgIPAddress& public_ip() const;
  PROTOBUF_NODISCARD ::CMsgIPAddress* release_public_ip();
  ::CMsgIPAddress* mutable_public_ip();
  void set_allocated_public_ip(::CMsgIPAddress* public_ip);
  private:
  const ::CMsgIPAddress& _internal_public_ip() const;
  ::CMsgIPAddress* _internal_mutable_public_ip();
  public:
  void unsafe_arena_set_allocated_public_ip(
      ::CMsgIPAddress* public_ip);
  ::CMsgIPAddress* unsafe_arena_release_public_ip();

  // optional uint32 app_id = 1;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // optional int32 num_lobbies_requested = 3;
  bool has_num_lobbies_requested() const;
  private:
  bool _internal_has_num_lobbies_requested() const;
  public:
  void clear_num_lobbies_requested();
  int32_t num_lobbies_requested() const;
  void set_num_lobbies_requested(int32_t value);
  private:
  int32_t _internal_num_lobbies_requested() const;
  void _internal_set_num_lobbies_requested(int32_t value);
  public:

  // optional uint32 cell_id = 4;
  bool has_cell_id() const;
  private:
  bool _internal_has_cell_id() const;
  public:
  void clear_cell_id();
  uint32_t cell_id() const;
  void set_cell_id(uint32_t value);
  private:
  uint32_t _internal_cell_id() const;
  void _internal_set_cell_id(uint32_t value);
  public:

  // optional uint32 deprecated_public_ip = 5;
  bool has_deprecated_public_ip() const;
  private:
  bool _internal_has_deprecated_public_ip() const;
  public:
  void clear_deprecated_public_ip();
  uint32_t deprecated_public_ip() const;
  void set_deprecated_public_ip(uint32_t value);
  private:
  uint32_t _internal_deprecated_public_ip() const;
  void _internal_set_deprecated_public_ip(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientMMSGetLobbyList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientMMSGetLobbyList_Filter > filters_;
  ::CMsgIPAddress* public_ip_;
  uint32_t app_id_;
  int32_t num_lobbies_requested_;
  uint32_t cell_id_;
  uint32_t deprecated_public_ip_;
  friend struct ::TableStruct_steammessages_5fclientserver_5fmms_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientMMSGetLobbyListResponse_Lobby final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientMMSGetLobbyListResponse.Lobby) */ {
 public:
  inline CMsgClientMMSGetLobbyListResponse_Lobby() : CMsgClientMMSGetLobbyListResponse_Lobby(nullptr) {}
  ~CMsgClientMMSGetLobbyListResponse_Lobby() override;
  explicit constexpr CMsgClientMMSGetLobbyListResponse_Lobby(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientMMSGetLobbyListResponse_Lobby(const CMsgClientMMSGetLobbyListResponse_Lobby& from);
  CMsgClientMMSGetLobbyListResponse_Lobby(CMsgClientMMSGetLobbyListResponse_Lobby&& from) noexcept
    : CMsgClientMMSGetLobbyListResponse_Lobby() {
    *this = ::std::move(from);
  }

  inline CMsgClientMMSGetLobbyListResponse_Lobby& operator=(const CMsgClientMMSGetLobbyListResponse_Lobby& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientMMSGetLobbyListResponse_Lobby& operator=(CMsgClientMMSGetLobbyListResponse_Lobby&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientMMSGetLobbyListResponse_Lobby& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientMMSGetLobbyListResponse_Lobby* internal_default_instance() {
    return reinterpret_cast<const CMsgClientMMSGetLobbyListResponse_Lobby*>(
               &_CMsgClientMMSGetLobbyListResponse_Lobby_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CMsgClientMMSGetLobbyListResponse_Lobby& a, CMsgClientMMSGetLobbyListResponse_Lobby& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientMMSGetLobbyListResponse_Lobby* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientMMSGetLobbyListResponse_Lobby* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientMMSGetLobbyListResponse_Lobby* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientMMSGetLobbyListResponse_Lobby>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientMMSGetLobbyListResponse_Lobby& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientMMSGetLobbyListResponse_Lobby& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientMMSGetLobbyListResponse_Lobby* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientMMSGetLobbyListResponse.Lobby";
  }
  protected:
  explicit CMsgClientMMSGetLobbyListResponse_Lobby(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 5,
    kSteamIdFieldNumber = 1,
    kMaxMembersFieldNumber = 2,
    kLobbyTypeFieldNumber = 3,
    kLobbyFlagsFieldNumber = 4,
    kNumMembersFieldNumber = 6,
    kWeightFieldNumber = 8,
    kDistanceFieldNumber = 7,
  };
  // optional bytes metadata = 5;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const std::string& metadata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_metadata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_metadata();
  PROTOBUF_NODISCARD std::string* release_metadata();
  void set_allocated_metadata(std::string* metadata);
  private:
  const std::string& _internal_metadata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metadata(const std::string& value);
  std::string* _internal_mutable_metadata();
  public:

  // optional fixed64 steam_id = 1;
  bool has_steam_id() const;
  private:
  bool _internal_has_steam_id() const;
  public:
  void clear_steam_id();
  uint64_t steam_id() const;
  void set_steam_id(uint64_t value);
  private:
  uint64_t _internal_steam_id() const;
  void _internal_set_steam_id(uint64_t value);
  public:

  // optional int32 max_members = 2;
  bool has_max_members() const;
  private:
  bool _internal_has_max_members() const;
  public:
  void clear_max_members();
  int32_t max_members() const;
  void set_max_members(int32_t value);
  private:
  int32_t _internal_max_members() const;
  void _internal_set_max_members(int32_t value);
  public:

  // optional int32 lobby_type = 3;
  bool has_lobby_type() const;
  private:
  bool _internal_has_lobby_type() const;
  public:
  void clear_lobby_type();
  int32_t lobby_type() const;
  void set_lobby_type(int32_t value);
  private:
  int32_t _internal_lobby_type() const;
  void _internal_set_lobby_type(int32_t value);
  public:

  // optional int32 lobby_flags = 4;
  bool has_lobby_flags() const;
  private:
  bool _internal_has_lobby_flags() const;
  public:
  void clear_lobby_flags();
  int32_t lobby_flags() const;
  void set_lobby_flags(int32_t value);
  private:
  int32_t _internal_lobby_flags() const;
  void _internal_set_lobby_flags(int32_t value);
  public:

  // optional int32 num_members = 6;
  bool has_num_members() const;
  private:
  bool _internal_has_num_members() const;
  public:
  void clear_num_members();
  int32_t num_members() const;
  void set_num_members(int32_t value);
  private:
  int32_t _internal_num_members() const;
  void _internal_set_num_members(int32_t value);
  public:

  // optional int64 weight = 8;
  bool has_weight() const;
  private:
  bool _internal_has_weight() const;
  public:
  void clear_weight();
  int64_t weight() const;
  void set_weight(int64_t value);
  private:
  int64_t _internal_weight() const;
  void _internal_set_weight(int64_t value);
  public:

  // optional float distance = 7;
  bool has_distance() const;
  private:
  bool _internal_has_distance() const;
  public:
  void clear_distance();
  float distance() const;
  void set_distance(float value);
  private:
  float _internal_distance() const;
  void _internal_set_distance(float value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientMMSGetLobbyListResponse.Lobby)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
  uint64_t steam_id_;
  int32_t max_members_;
  int32_t lobby_type_;
  int32_t lobby_flags_;
  int32_t num_members_;
  int64_t weight_;
  float distance_;
  friend struct ::TableStruct_steammessages_5fclientserver_5fmms_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientMMSGetLobbyListResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientMMSGetLobbyListResponse) */ {
 public:
  inline CMsgClientMMSGetLobbyListResponse() : CMsgClientMMSGetLobbyListResponse(nullptr) {}
  ~CMsgClientMMSGetLobbyListResponse() override;
  explicit constexpr CMsgClientMMSGetLobbyListResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientMMSGetLobbyListResponse(const CMsgClientMMSGetLobbyListResponse& from);
  CMsgClientMMSGetLobbyListResponse(CMsgClientMMSGetLobbyListResponse&& from) noexcept
    : CMsgClientMMSGetLobbyListResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientMMSGetLobbyListResponse& operator=(const CMsgClientMMSGetLobbyListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientMMSGetLobbyListResponse& operator=(CMsgClientMMSGetLobbyListResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientMMSGetLobbyListResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientMMSGetLobbyListResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientMMSGetLobbyListResponse*>(
               &_CMsgClientMMSGetLobbyListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CMsgClientMMSGetLobbyListResponse& a, CMsgClientMMSGetLobbyListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientMMSGetLobbyListResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientMMSGetLobbyListResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientMMSGetLobbyListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientMMSGetLobbyListResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientMMSGetLobbyListResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientMMSGetLobbyListResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientMMSGetLobbyListResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientMMSGetLobbyListResponse";
  }
  protected:
  explicit CMsgClientMMSGetLobbyListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgClientMMSGetLobbyListResponse_Lobby Lobby;

  // accessors -------------------------------------------------------

  enum : int {
    kLobbiesFieldNumber = 4,
    kAppIdFieldNumber = 1,
    kEresultFieldNumber = 3,
  };
  // repeated .CMsgClientMMSGetLobbyListResponse.Lobby lobbies = 4;
  int lobbies_size() const;
  private:
  int _internal_lobbies_size() const;
  public:
  void clear_lobbies();
  ::CMsgClientMMSGetLobbyListResponse_Lobby* mutable_lobbies(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientMMSGetLobbyListResponse_Lobby >*
      mutable_lobbies();
  private:
  const ::CMsgClientMMSGetLobbyListResponse_Lobby& _internal_lobbies(int index) const;
  ::CMsgClientMMSGetLobbyListResponse_Lobby* _internal_add_lobbies();
  public:
  const ::CMsgClientMMSGetLobbyListResponse_Lobby& lobbies(int index) const;
  ::CMsgClientMMSGetLobbyListResponse_Lobby* add_lobbies();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientMMSGetLobbyListResponse_Lobby >&
      lobbies() const;

  // optional uint32 app_id = 1;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // optional int32 eresult = 3 [default = 2];
  bool has_eresult() const;
  private:
  bool _internal_has_eresult() const;
  public:
  void clear_eresult();
  int32_t eresult() const;
  void set_eresult(int32_t value);
  private:
  int32_t _internal_eresult() const;
  void _internal_set_eresult(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientMMSGetLobbyListResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientMMSGetLobbyListResponse_Lobby > lobbies_;
  uint32_t app_id_;
  int32_t eresult_;
  friend struct ::TableStruct_steammessages_5fclientserver_5fmms_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientMMSSetLobbyData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientMMSSetLobbyData) */ {
 public:
  inline CMsgClientMMSSetLobbyData() : CMsgClientMMSSetLobbyData(nullptr) {}
  ~CMsgClientMMSSetLobbyData() override;
  explicit constexpr CMsgClientMMSSetLobbyData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientMMSSetLobbyData(const CMsgClientMMSSetLobbyData& from);
  CMsgClientMMSSetLobbyData(CMsgClientMMSSetLobbyData&& from) noexcept
    : CMsgClientMMSSetLobbyData() {
    *this = ::std::move(from);
  }

  inline CMsgClientMMSSetLobbyData& operator=(const CMsgClientMMSSetLobbyData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientMMSSetLobbyData& operator=(CMsgClientMMSSetLobbyData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientMMSSetLobbyData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientMMSSetLobbyData* internal_default_instance() {
    return reinterpret_cast<const CMsgClientMMSSetLobbyData*>(
               &_CMsgClientMMSSetLobbyData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CMsgClientMMSSetLobbyData& a, CMsgClientMMSSetLobbyData& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientMMSSetLobbyData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientMMSSetLobbyData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientMMSSetLobbyData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientMMSSetLobbyData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientMMSSetLobbyData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientMMSSetLobbyData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientMMSSetLobbyData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientMMSSetLobbyData";
  }
  protected:
  explicit CMsgClientMMSSetLobbyData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 7,
    kSteamIdLobbyFieldNumber = 2,
    kAppIdFieldNumber = 1,
    kMaxMembersFieldNumber = 4,
    kSteamIdMemberFieldNumber = 3,
    kLobbyTypeFieldNumber = 5,
    kLobbyFlagsFieldNumber = 6,
  };
  // optional bytes metadata = 7;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const std::string& metadata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_metadata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_metadata();
  PROTOBUF_NODISCARD std::string* release_metadata();
  void set_allocated_metadata(std::string* metadata);
  private:
  const std::string& _internal_metadata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metadata(const std::string& value);
  std::string* _internal_mutable_metadata();
  public:

  // optional fixed64 steam_id_lobby = 2;
  bool has_steam_id_lobby() const;
  private:
  bool _internal_has_steam_id_lobby() const;
  public:
  void clear_steam_id_lobby();
  uint64_t steam_id_lobby() const;
  void set_steam_id_lobby(uint64_t value);
  private:
  uint64_t _internal_steam_id_lobby() const;
  void _internal_set_steam_id_lobby(uint64_t value);
  public:

  // optional uint32 app_id = 1;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // optional int32 max_members = 4;
  bool has_max_members() const;
  private:
  bool _internal_has_max_members() const;
  public:
  void clear_max_members();
  int32_t max_members() const;
  void set_max_members(int32_t value);
  private:
  int32_t _internal_max_members() const;
  void _internal_set_max_members(int32_t value);
  public:

  // optional fixed64 steam_id_member = 3;
  bool has_steam_id_member() const;
  private:
  bool _internal_has_steam_id_member() const;
  public:
  void clear_steam_id_member();
  uint64_t steam_id_member() const;
  void set_steam_id_member(uint64_t value);
  private:
  uint64_t _internal_steam_id_member() const;
  void _internal_set_steam_id_member(uint64_t value);
  public:

  // optional int32 lobby_type = 5;
  bool has_lobby_type() const;
  private:
  bool _internal_has_lobby_type() const;
  public:
  void clear_lobby_type();
  int32_t lobby_type() const;
  void set_lobby_type(int32_t value);
  private:
  int32_t _internal_lobby_type() const;
  void _internal_set_lobby_type(int32_t value);
  public:

  // optional int32 lobby_flags = 6;
  bool has_lobby_flags() const;
  private:
  bool _internal_has_lobby_flags() const;
  public:
  void clear_lobby_flags();
  int32_t lobby_flags() const;
  void set_lobby_flags(int32_t value);
  private:
  int32_t _internal_lobby_flags() const;
  void _internal_set_lobby_flags(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientMMSSetLobbyData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
  uint64_t steam_id_lobby_;
  uint32_t app_id_;
  int32_t max_members_;
  uint64_t steam_id_member_;
  int32_t lobby_type_;
  int32_t lobby_flags_;
  friend struct ::TableStruct_steammessages_5fclientserver_5fmms_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientMMSSetLobbyDataResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientMMSSetLobbyDataResponse) */ {
 public:
  inline CMsgClientMMSSetLobbyDataResponse() : CMsgClientMMSSetLobbyDataResponse(nullptr) {}
  ~CMsgClientMMSSetLobbyDataResponse() override;
  explicit constexpr CMsgClientMMSSetLobbyDataResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientMMSSetLobbyDataResponse(const CMsgClientMMSSetLobbyDataResponse& from);
  CMsgClientMMSSetLobbyDataResponse(CMsgClientMMSSetLobbyDataResponse&& from) noexcept
    : CMsgClientMMSSetLobbyDataResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientMMSSetLobbyDataResponse& operator=(const CMsgClientMMSSetLobbyDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientMMSSetLobbyDataResponse& operator=(CMsgClientMMSSetLobbyDataResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientMMSSetLobbyDataResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientMMSSetLobbyDataResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientMMSSetLobbyDataResponse*>(
               &_CMsgClientMMSSetLobbyDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CMsgClientMMSSetLobbyDataResponse& a, CMsgClientMMSSetLobbyDataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientMMSSetLobbyDataResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientMMSSetLobbyDataResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientMMSSetLobbyDataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientMMSSetLobbyDataResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientMMSSetLobbyDataResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientMMSSetLobbyDataResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientMMSSetLobbyDataResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientMMSSetLobbyDataResponse";
  }
  protected:
  explicit CMsgClientMMSSetLobbyDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamIdLobbyFieldNumber = 2,
    kAppIdFieldNumber = 1,
    kEresultFieldNumber = 3,
  };
  // optional fixed64 steam_id_lobby = 2;
  bool has_steam_id_lobby() const;
  private:
  bool _internal_has_steam_id_lobby() const;
  public:
  void clear_steam_id_lobby();
  uint64_t steam_id_lobby() const;
  void set_steam_id_lobby(uint64_t value);
  private:
  uint64_t _internal_steam_id_lobby() const;
  void _internal_set_steam_id_lobby(uint64_t value);
  public:

  // optional uint32 app_id = 1;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // optional int32 eresult = 3 [default = 2];
  bool has_eresult() const;
  private:
  bool _internal_has_eresult() const;
  public:
  void clear_eresult();
  int32_t eresult() const;
  void set_eresult(int32_t value);
  private:
  int32_t _internal_eresult() const;
  void _internal_set_eresult(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientMMSSetLobbyDataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t steam_id_lobby_;
  uint32_t app_id_;
  int32_t eresult_;
  friend struct ::TableStruct_steammessages_5fclientserver_5fmms_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientMMSGetLobbyData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientMMSGetLobbyData) */ {
 public:
  inline CMsgClientMMSGetLobbyData() : CMsgClientMMSGetLobbyData(nullptr) {}
  ~CMsgClientMMSGetLobbyData() override;
  explicit constexpr CMsgClientMMSGetLobbyData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientMMSGetLobbyData(const CMsgClientMMSGetLobbyData& from);
  CMsgClientMMSGetLobbyData(CMsgClientMMSGetLobbyData&& from) noexcept
    : CMsgClientMMSGetLobbyData() {
    *this = ::std::move(from);
  }

  inline CMsgClientMMSGetLobbyData& operator=(const CMsgClientMMSGetLobbyData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientMMSGetLobbyData& operator=(CMsgClientMMSGetLobbyData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientMMSGetLobbyData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientMMSGetLobbyData* internal_default_instance() {
    return reinterpret_cast<const CMsgClientMMSGetLobbyData*>(
               &_CMsgClientMMSGetLobbyData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CMsgClientMMSGetLobbyData& a, CMsgClientMMSGetLobbyData& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientMMSGetLobbyData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientMMSGetLobbyData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientMMSGetLobbyData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientMMSGetLobbyData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientMMSGetLobbyData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientMMSGetLobbyData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientMMSGetLobbyData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientMMSGetLobbyData";
  }
  protected:
  explicit CMsgClientMMSGetLobbyData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamIdLobbyFieldNumber = 2,
    kAppIdFieldNumber = 1,
  };
  // optional fixed64 steam_id_lobby = 2;
  bool has_steam_id_lobby() const;
  private:
  bool _internal_has_steam_id_lobby() const;
  public:
  void clear_steam_id_lobby();
  uint64_t steam_id_lobby() const;
  void set_steam_id_lobby(uint64_t value);
  private:
  uint64_t _internal_steam_id_lobby() const;
  void _internal_set_steam_id_lobby(uint64_t value);
  public:

  // optional uint32 app_id = 1;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientMMSGetLobbyData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t steam_id_lobby_;
  uint32_t app_id_;
  friend struct ::TableStruct_steammessages_5fclientserver_5fmms_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientMMSLobbyData_Member final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientMMSLobbyData.Member) */ {
 public:
  inline CMsgClientMMSLobbyData_Member() : CMsgClientMMSLobbyData_Member(nullptr) {}
  ~CMsgClientMMSLobbyData_Member() override;
  explicit constexpr CMsgClientMMSLobbyData_Member(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientMMSLobbyData_Member(const CMsgClientMMSLobbyData_Member& from);
  CMsgClientMMSLobbyData_Member(CMsgClientMMSLobbyData_Member&& from) noexcept
    : CMsgClientMMSLobbyData_Member() {
    *this = ::std::move(from);
  }

  inline CMsgClientMMSLobbyData_Member& operator=(const CMsgClientMMSLobbyData_Member& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientMMSLobbyData_Member& operator=(CMsgClientMMSLobbyData_Member&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientMMSLobbyData_Member& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientMMSLobbyData_Member* internal_default_instance() {
    return reinterpret_cast<const CMsgClientMMSLobbyData_Member*>(
               &_CMsgClientMMSLobbyData_Member_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CMsgClientMMSLobbyData_Member& a, CMsgClientMMSLobbyData_Member& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientMMSLobbyData_Member* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientMMSLobbyData_Member* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientMMSLobbyData_Member* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientMMSLobbyData_Member>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientMMSLobbyData_Member& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientMMSLobbyData_Member& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientMMSLobbyData_Member* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientMMSLobbyData.Member";
  }
  protected:
  explicit CMsgClientMMSLobbyData_Member(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPersonaNameFieldNumber = 2,
    kMetadataFieldNumber = 3,
    kSteamIdFieldNumber = 1,
  };
  // optional string persona_name = 2;
  bool has_persona_name() const;
  private:
  bool _internal_has_persona_name() const;
  public:
  void clear_persona_name();
  const std::string& persona_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_persona_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_persona_name();
  PROTOBUF_NODISCARD std::string* release_persona_name();
  void set_allocated_persona_name(std::string* persona_name);
  private:
  const std::string& _internal_persona_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_persona_name(const std::string& value);
  std::string* _internal_mutable_persona_name();
  public:

  // optional bytes metadata = 3;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const std::string& metadata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_metadata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_metadata();
  PROTOBUF_NODISCARD std::string* release_metadata();
  void set_allocated_metadata(std::string* metadata);
  private:
  const std::string& _internal_metadata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metadata(const std::string& value);
  std::string* _internal_mutable_metadata();
  public:

  // optional fixed64 steam_id = 1;
  bool has_steam_id() const;
  private:
  bool _internal_has_steam_id() const;
  public:
  void clear_steam_id();
  uint64_t steam_id() const;
  void set_steam_id(uint64_t value);
  private:
  uint64_t _internal_steam_id() const;
  void _internal_set_steam_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientMMSLobbyData.Member)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr persona_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
  uint64_t steam_id_;
  friend struct ::TableStruct_steammessages_5fclientserver_5fmms_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientMMSLobbyData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientMMSLobbyData) */ {
 public:
  inline CMsgClientMMSLobbyData() : CMsgClientMMSLobbyData(nullptr) {}
  ~CMsgClientMMSLobbyData() override;
  explicit constexpr CMsgClientMMSLobbyData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientMMSLobbyData(const CMsgClientMMSLobbyData& from);
  CMsgClientMMSLobbyData(CMsgClientMMSLobbyData&& from) noexcept
    : CMsgClientMMSLobbyData() {
    *this = ::std::move(from);
  }

  inline CMsgClientMMSLobbyData& operator=(const CMsgClientMMSLobbyData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientMMSLobbyData& operator=(CMsgClientMMSLobbyData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientMMSLobbyData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientMMSLobbyData* internal_default_instance() {
    return reinterpret_cast<const CMsgClientMMSLobbyData*>(
               &_CMsgClientMMSLobbyData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CMsgClientMMSLobbyData& a, CMsgClientMMSLobbyData& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientMMSLobbyData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientMMSLobbyData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientMMSLobbyData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientMMSLobbyData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientMMSLobbyData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientMMSLobbyData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientMMSLobbyData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientMMSLobbyData";
  }
  protected:
  explicit CMsgClientMMSLobbyData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgClientMMSLobbyData_Member Member;

  // accessors -------------------------------------------------------

  enum : int {
    kMembersFieldNumber = 9,
    kMetadataFieldNumber = 8,
    kSteamIdLobbyFieldNumber = 2,
    kAppIdFieldNumber = 1,
    kNumMembersFieldNumber = 3,
    kMaxMembersFieldNumber = 4,
    kLobbyTypeFieldNumber = 5,
    kSteamIdOwnerFieldNumber = 7,
    kLobbyFlagsFieldNumber = 6,
    kLobbyCellidFieldNumber = 10,
    kOwnerShouldAcceptChangesFieldNumber = 11,
  };
  // repeated .CMsgClientMMSLobbyData.Member members = 9;
  int members_size() const;
  private:
  int _internal_members_size() const;
  public:
  void clear_members();
  ::CMsgClientMMSLobbyData_Member* mutable_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientMMSLobbyData_Member >*
      mutable_members();
  private:
  const ::CMsgClientMMSLobbyData_Member& _internal_members(int index) const;
  ::CMsgClientMMSLobbyData_Member* _internal_add_members();
  public:
  const ::CMsgClientMMSLobbyData_Member& members(int index) const;
  ::CMsgClientMMSLobbyData_Member* add_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientMMSLobbyData_Member >&
      members() const;

  // optional bytes metadata = 8;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const std::string& metadata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_metadata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_metadata();
  PROTOBUF_NODISCARD std::string* release_metadata();
  void set_allocated_metadata(std::string* metadata);
  private:
  const std::string& _internal_metadata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metadata(const std::string& value);
  std::string* _internal_mutable_metadata();
  public:

  // optional fixed64 steam_id_lobby = 2;
  bool has_steam_id_lobby() const;
  private:
  bool _internal_has_steam_id_lobby() const;
  public:
  void clear_steam_id_lobby();
  uint64_t steam_id_lobby() const;
  void set_steam_id_lobby(uint64_t value);
  private:
  uint64_t _internal_steam_id_lobby() const;
  void _internal_set_steam_id_lobby(uint64_t value);
  public:

  // optional uint32 app_id = 1;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // optional int32 num_members = 3;
  bool has_num_members() const;
  private:
  bool _internal_has_num_members() const;
  public:
  void clear_num_members();
  int32_t num_members() const;
  void set_num_members(int32_t value);
  private:
  int32_t _internal_num_members() const;
  void _internal_set_num_members(int32_t value);
  public:

  // optional int32 max_members = 4;
  bool has_max_members() const;
  private:
  bool _internal_has_max_members() const;
  public:
  void clear_max_members();
  int32_t max_members() const;
  void set_max_members(int32_t value);
  private:
  int32_t _internal_max_members() const;
  void _internal_set_max_members(int32_t value);
  public:

  // optional int32 lobby_type = 5;
  bool has_lobby_type() const;
  private:
  bool _internal_has_lobby_type() const;
  public:
  void clear_lobby_type();
  int32_t lobby_type() const;
  void set_lobby_type(int32_t value);
  private:
  int32_t _internal_lobby_type() const;
  void _internal_set_lobby_type(int32_t value);
  public:

  // optional fixed64 steam_id_owner = 7;
  bool has_steam_id_owner() const;
  private:
  bool _internal_has_steam_id_owner() const;
  public:
  void clear_steam_id_owner();
  uint64_t steam_id_owner() const;
  void set_steam_id_owner(uint64_t value);
  private:
  uint64_t _internal_steam_id_owner() const;
  void _internal_set_steam_id_owner(uint64_t value);
  public:

  // optional int32 lobby_flags = 6;
  bool has_lobby_flags() const;
  private:
  bool _internal_has_lobby_flags() const;
  public:
  void clear_lobby_flags();
  int32_t lobby_flags() const;
  void set_lobby_flags(int32_t value);
  private:
  int32_t _internal_lobby_flags() const;
  void _internal_set_lobby_flags(int32_t value);
  public:

  // optional uint32 lobby_cellid = 10;
  bool has_lobby_cellid() const;
  private:
  bool _internal_has_lobby_cellid() const;
  public:
  void clear_lobby_cellid();
  uint32_t lobby_cellid() const;
  void set_lobby_cellid(uint32_t value);
  private:
  uint32_t _internal_lobby_cellid() const;
  void _internal_set_lobby_cellid(uint32_t value);
  public:

  // optional bool owner_should_accept_changes = 11;
  bool has_owner_should_accept_changes() const;
  private:
  bool _internal_has_owner_should_accept_changes() const;
  public:
  void clear_owner_should_accept_changes();
  bool owner_should_accept_changes() const;
  void set_owner_should_accept_changes(bool value);
  private:
  bool _internal_owner_should_accept_changes() const;
  void _internal_set_owner_should_accept_changes(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientMMSLobbyData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientMMSLobbyData_Member > members_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
  uint64_t steam_id_lobby_;
  uint32_t app_id_;
  int32_t num_members_;
  int32_t max_members_;
  int32_t lobby_type_;
  uint64_t steam_id_owner_;
  int32_t lobby_flags_;
  uint32_t lobby_cellid_;
  bool owner_should_accept_changes_;
  friend struct ::TableStruct_steammessages_5fclientserver_5fmms_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientMMSSendLobbyChatMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientMMSSendLobbyChatMsg) */ {
 public:
  inline CMsgClientMMSSendLobbyChatMsg() : CMsgClientMMSSendLobbyChatMsg(nullptr) {}
  ~CMsgClientMMSSendLobbyChatMsg() override;
  explicit constexpr CMsgClientMMSSendLobbyChatMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientMMSSendLobbyChatMsg(const CMsgClientMMSSendLobbyChatMsg& from);
  CMsgClientMMSSendLobbyChatMsg(CMsgClientMMSSendLobbyChatMsg&& from) noexcept
    : CMsgClientMMSSendLobbyChatMsg() {
    *this = ::std::move(from);
  }

  inline CMsgClientMMSSendLobbyChatMsg& operator=(const CMsgClientMMSSendLobbyChatMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientMMSSendLobbyChatMsg& operator=(CMsgClientMMSSendLobbyChatMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientMMSSendLobbyChatMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientMMSSendLobbyChatMsg* internal_default_instance() {
    return reinterpret_cast<const CMsgClientMMSSendLobbyChatMsg*>(
               &_CMsgClientMMSSendLobbyChatMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CMsgClientMMSSendLobbyChatMsg& a, CMsgClientMMSSendLobbyChatMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientMMSSendLobbyChatMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientMMSSendLobbyChatMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientMMSSendLobbyChatMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientMMSSendLobbyChatMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientMMSSendLobbyChatMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientMMSSendLobbyChatMsg& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientMMSSendLobbyChatMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientMMSSendLobbyChatMsg";
  }
  protected:
  explicit CMsgClientMMSSendLobbyChatMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLobbyMessageFieldNumber = 4,
    kSteamIdLobbyFieldNumber = 2,
    kSteamIdTargetFieldNumber = 3,
    kAppIdFieldNumber = 1,
  };
  // optional bytes lobby_message = 4;
  bool has_lobby_message() const;
  private:
  bool _internal_has_lobby_message() const;
  public:
  void clear_lobby_message();
  const std::string& lobby_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lobby_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lobby_message();
  PROTOBUF_NODISCARD std::string* release_lobby_message();
  void set_allocated_lobby_message(std::string* lobby_message);
  private:
  const std::string& _internal_lobby_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lobby_message(const std::string& value);
  std::string* _internal_mutable_lobby_message();
  public:

  // optional fixed64 steam_id_lobby = 2;
  bool has_steam_id_lobby() const;
  private:
  bool _internal_has_steam_id_lobby() const;
  public:
  void clear_steam_id_lobby();
  uint64_t steam_id_lobby() const;
  void set_steam_id_lobby(uint64_t value);
  private:
  uint64_t _internal_steam_id_lobby() const;
  void _internal_set_steam_id_lobby(uint64_t value);
  public:

  // optional fixed64 steam_id_target = 3;
  bool has_steam_id_target() const;
  private:
  bool _internal_has_steam_id_target() const;
  public:
  void clear_steam_id_target();
  uint64_t steam_id_target() const;
  void set_steam_id_target(uint64_t value);
  private:
  uint64_t _internal_steam_id_target() const;
  void _internal_set_steam_id_target(uint64_t value);
  public:

  // optional uint32 app_id = 1;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientMMSSendLobbyChatMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lobby_message_;
  uint64_t steam_id_lobby_;
  uint64_t steam_id_target_;
  uint32_t app_id_;
  friend struct ::TableStruct_steammessages_5fclientserver_5fmms_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientMMSLobbyChatMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientMMSLobbyChatMsg) */ {
 public:
  inline CMsgClientMMSLobbyChatMsg() : CMsgClientMMSLobbyChatMsg(nullptr) {}
  ~CMsgClientMMSLobbyChatMsg() override;
  explicit constexpr CMsgClientMMSLobbyChatMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientMMSLobbyChatMsg(const CMsgClientMMSLobbyChatMsg& from);
  CMsgClientMMSLobbyChatMsg(CMsgClientMMSLobbyChatMsg&& from) noexcept
    : CMsgClientMMSLobbyChatMsg() {
    *this = ::std::move(from);
  }

  inline CMsgClientMMSLobbyChatMsg& operator=(const CMsgClientMMSLobbyChatMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientMMSLobbyChatMsg& operator=(CMsgClientMMSLobbyChatMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientMMSLobbyChatMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientMMSLobbyChatMsg* internal_default_instance() {
    return reinterpret_cast<const CMsgClientMMSLobbyChatMsg*>(
               &_CMsgClientMMSLobbyChatMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CMsgClientMMSLobbyChatMsg& a, CMsgClientMMSLobbyChatMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientMMSLobbyChatMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientMMSLobbyChatMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientMMSLobbyChatMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientMMSLobbyChatMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientMMSLobbyChatMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientMMSLobbyChatMsg& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientMMSLobbyChatMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientMMSLobbyChatMsg";
  }
  protected:
  explicit CMsgClientMMSLobbyChatMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLobbyMessageFieldNumber = 4,
    kSteamIdLobbyFieldNumber = 2,
    kSteamIdSenderFieldNumber = 3,
    kAppIdFieldNumber = 1,
  };
  // optional bytes lobby_message = 4;
  bool has_lobby_message() const;
  private:
  bool _internal_has_lobby_message() const;
  public:
  void clear_lobby_message();
  const std::string& lobby_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lobby_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lobby_message();
  PROTOBUF_NODISCARD std::string* release_lobby_message();
  void set_allocated_lobby_message(std::string* lobby_message);
  private:
  const std::string& _internal_lobby_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lobby_message(const std::string& value);
  std::string* _internal_mutable_lobby_message();
  public:

  // optional fixed64 steam_id_lobby = 2;
  bool has_steam_id_lobby() const;
  private:
  bool _internal_has_steam_id_lobby() const;
  public:
  void clear_steam_id_lobby();
  uint64_t steam_id_lobby() const;
  void set_steam_id_lobby(uint64_t value);
  private:
  uint64_t _internal_steam_id_lobby() const;
  void _internal_set_steam_id_lobby(uint64_t value);
  public:

  // optional fixed64 steam_id_sender = 3;
  bool has_steam_id_sender() const;
  private:
  bool _internal_has_steam_id_sender() const;
  public:
  void clear_steam_id_sender();
  uint64_t steam_id_sender() const;
  void set_steam_id_sender(uint64_t value);
  private:
  uint64_t _internal_steam_id_sender() const;
  void _internal_set_steam_id_sender(uint64_t value);
  public:

  // optional uint32 app_id = 1;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientMMSLobbyChatMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lobby_message_;
  uint64_t steam_id_lobby_;
  uint64_t steam_id_sender_;
  uint32_t app_id_;
  friend struct ::TableStruct_steammessages_5fclientserver_5fmms_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientMMSSetLobbyOwner final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientMMSSetLobbyOwner) */ {
 public:
  inline CMsgClientMMSSetLobbyOwner() : CMsgClientMMSSetLobbyOwner(nullptr) {}
  ~CMsgClientMMSSetLobbyOwner() override;
  explicit constexpr CMsgClientMMSSetLobbyOwner(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientMMSSetLobbyOwner(const CMsgClientMMSSetLobbyOwner& from);
  CMsgClientMMSSetLobbyOwner(CMsgClientMMSSetLobbyOwner&& from) noexcept
    : CMsgClientMMSSetLobbyOwner() {
    *this = ::std::move(from);
  }

  inline CMsgClientMMSSetLobbyOwner& operator=(const CMsgClientMMSSetLobbyOwner& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientMMSSetLobbyOwner& operator=(CMsgClientMMSSetLobbyOwner&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientMMSSetLobbyOwner& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientMMSSetLobbyOwner* internal_default_instance() {
    return reinterpret_cast<const CMsgClientMMSSetLobbyOwner*>(
               &_CMsgClientMMSSetLobbyOwner_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CMsgClientMMSSetLobbyOwner& a, CMsgClientMMSSetLobbyOwner& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientMMSSetLobbyOwner* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientMMSSetLobbyOwner* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientMMSSetLobbyOwner* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientMMSSetLobbyOwner>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientMMSSetLobbyOwner& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientMMSSetLobbyOwner& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientMMSSetLobbyOwner* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientMMSSetLobbyOwner";
  }
  protected:
  explicit CMsgClientMMSSetLobbyOwner(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamIdLobbyFieldNumber = 2,
    kSteamIdNewOwnerFieldNumber = 3,
    kAppIdFieldNumber = 1,
  };
  // optional fixed64 steam_id_lobby = 2;
  bool has_steam_id_lobby() const;
  private:
  bool _internal_has_steam_id_lobby() const;
  public:
  void clear_steam_id_lobby();
  uint64_t steam_id_lobby() const;
  void set_steam_id_lobby(uint64_t value);
  private:
  uint64_t _internal_steam_id_lobby() const;
  void _internal_set_steam_id_lobby(uint64_t value);
  public:

  // optional fixed64 steam_id_new_owner = 3;
  bool has_steam_id_new_owner() const;
  private:
  bool _internal_has_steam_id_new_owner() const;
  public:
  void clear_steam_id_new_owner();
  uint64_t steam_id_new_owner() const;
  void set_steam_id_new_owner(uint64_t value);
  private:
  uint64_t _internal_steam_id_new_owner() const;
  void _internal_set_steam_id_new_owner(uint64_t value);
  public:

  // optional uint32 app_id = 1;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientMMSSetLobbyOwner)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t steam_id_lobby_;
  uint64_t steam_id_new_owner_;
  uint32_t app_id_;
  friend struct ::TableStruct_steammessages_5fclientserver_5fmms_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientMMSSetLobbyOwnerResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientMMSSetLobbyOwnerResponse) */ {
 public:
  inline CMsgClientMMSSetLobbyOwnerResponse() : CMsgClientMMSSetLobbyOwnerResponse(nullptr) {}
  ~CMsgClientMMSSetLobbyOwnerResponse() override;
  explicit constexpr CMsgClientMMSSetLobbyOwnerResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientMMSSetLobbyOwnerResponse(const CMsgClientMMSSetLobbyOwnerResponse& from);
  CMsgClientMMSSetLobbyOwnerResponse(CMsgClientMMSSetLobbyOwnerResponse&& from) noexcept
    : CMsgClientMMSSetLobbyOwnerResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientMMSSetLobbyOwnerResponse& operator=(const CMsgClientMMSSetLobbyOwnerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientMMSSetLobbyOwnerResponse& operator=(CMsgClientMMSSetLobbyOwnerResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientMMSSetLobbyOwnerResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientMMSSetLobbyOwnerResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientMMSSetLobbyOwnerResponse*>(
               &_CMsgClientMMSSetLobbyOwnerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CMsgClientMMSSetLobbyOwnerResponse& a, CMsgClientMMSSetLobbyOwnerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientMMSSetLobbyOwnerResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientMMSSetLobbyOwnerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientMMSSetLobbyOwnerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientMMSSetLobbyOwnerResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientMMSSetLobbyOwnerResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientMMSSetLobbyOwnerResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientMMSSetLobbyOwnerResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientMMSSetLobbyOwnerResponse";
  }
  protected:
  explicit CMsgClientMMSSetLobbyOwnerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamIdLobbyFieldNumber = 2,
    kAppIdFieldNumber = 1,
    kEresultFieldNumber = 3,
  };
  // optional fixed64 steam_id_lobby = 2;
  bool has_steam_id_lobby() const;
  private:
  bool _internal_has_steam_id_lobby() const;
  public:
  void clear_steam_id_lobby();
  uint64_t steam_id_lobby() const;
  void set_steam_id_lobby(uint64_t value);
  private:
  uint64_t _internal_steam_id_lobby() const;
  void _internal_set_steam_id_lobby(uint64_t value);
  public:

  // optional uint32 app_id = 1;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // optional int32 eresult = 3 [default = 2];
  bool has_eresult() const;
  private:
  bool _internal_has_eresult() const;
  public:
  void clear_eresult();
  int32_t eresult() const;
  void set_eresult(int32_t value);
  private:
  int32_t _internal_eresult() const;
  void _internal_set_eresult(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientMMSSetLobbyOwnerResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t steam_id_lobby_;
  uint32_t app_id_;
  int32_t eresult_;
  friend struct ::TableStruct_steammessages_5fclientserver_5fmms_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientMMSSetLobbyLinked final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientMMSSetLobbyLinked) */ {
 public:
  inline CMsgClientMMSSetLobbyLinked() : CMsgClientMMSSetLobbyLinked(nullptr) {}
  ~CMsgClientMMSSetLobbyLinked() override;
  explicit constexpr CMsgClientMMSSetLobbyLinked(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientMMSSetLobbyLinked(const CMsgClientMMSSetLobbyLinked& from);
  CMsgClientMMSSetLobbyLinked(CMsgClientMMSSetLobbyLinked&& from) noexcept
    : CMsgClientMMSSetLobbyLinked() {
    *this = ::std::move(from);
  }

  inline CMsgClientMMSSetLobbyLinked& operator=(const CMsgClientMMSSetLobbyLinked& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientMMSSetLobbyLinked& operator=(CMsgClientMMSSetLobbyLinked&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientMMSSetLobbyLinked& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientMMSSetLobbyLinked* internal_default_instance() {
    return reinterpret_cast<const CMsgClientMMSSetLobbyLinked*>(
               &_CMsgClientMMSSetLobbyLinked_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CMsgClientMMSSetLobbyLinked& a, CMsgClientMMSSetLobbyLinked& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientMMSSetLobbyLinked* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientMMSSetLobbyLinked* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientMMSSetLobbyLinked* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientMMSSetLobbyLinked>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientMMSSetLobbyLinked& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientMMSSetLobbyLinked& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientMMSSetLobbyLinked* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientMMSSetLobbyLinked";
  }
  protected:
  explicit CMsgClientMMSSetLobbyLinked(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamIdLobbyFieldNumber = 2,
    kSteamIdLobby2FieldNumber = 3,
    kAppIdFieldNumber = 1,
  };
  // optional fixed64 steam_id_lobby = 2;
  bool has_steam_id_lobby() const;
  private:
  bool _internal_has_steam_id_lobby() const;
  public:
  void clear_steam_id_lobby();
  uint64_t steam_id_lobby() const;
  void set_steam_id_lobby(uint64_t value);
  private:
  uint64_t _internal_steam_id_lobby() const;
  void _internal_set_steam_id_lobby(uint64_t value);
  public:

  // optional fixed64 steam_id_lobby2 = 3;
  bool has_steam_id_lobby2() const;
  private:
  bool _internal_has_steam_id_lobby2() const;
  public:
  void clear_steam_id_lobby2();
  uint64_t steam_id_lobby2() const;
  void set_steam_id_lobby2(uint64_t value);
  private:
  uint64_t _internal_steam_id_lobby2() const;
  void _internal_set_steam_id_lobby2(uint64_t value);
  public:

  // optional uint32 app_id = 1;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientMMSSetLobbyLinked)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t steam_id_lobby_;
  uint64_t steam_id_lobby2_;
  uint32_t app_id_;
  friend struct ::TableStruct_steammessages_5fclientserver_5fmms_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientMMSSetLobbyGameServer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientMMSSetLobbyGameServer) */ {
 public:
  inline CMsgClientMMSSetLobbyGameServer() : CMsgClientMMSSetLobbyGameServer(nullptr) {}
  ~CMsgClientMMSSetLobbyGameServer() override;
  explicit constexpr CMsgClientMMSSetLobbyGameServer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientMMSSetLobbyGameServer(const CMsgClientMMSSetLobbyGameServer& from);
  CMsgClientMMSSetLobbyGameServer(CMsgClientMMSSetLobbyGameServer&& from) noexcept
    : CMsgClientMMSSetLobbyGameServer() {
    *this = ::std::move(from);
  }

  inline CMsgClientMMSSetLobbyGameServer& operator=(const CMsgClientMMSSetLobbyGameServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientMMSSetLobbyGameServer& operator=(CMsgClientMMSSetLobbyGameServer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientMMSSetLobbyGameServer& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientMMSSetLobbyGameServer* internal_default_instance() {
    return reinterpret_cast<const CMsgClientMMSSetLobbyGameServer*>(
               &_CMsgClientMMSSetLobbyGameServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CMsgClientMMSSetLobbyGameServer& a, CMsgClientMMSSetLobbyGameServer& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientMMSSetLobbyGameServer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientMMSSetLobbyGameServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientMMSSetLobbyGameServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientMMSSetLobbyGameServer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientMMSSetLobbyGameServer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientMMSSetLobbyGameServer& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientMMSSetLobbyGameServer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientMMSSetLobbyGameServer";
  }
  protected:
  explicit CMsgClientMMSSetLobbyGameServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameServerIpFieldNumber = 6,
    kSteamIdLobbyFieldNumber = 2,
    kAppIdFieldNumber = 1,
    kDeprecatedGameServerIpFieldNumber = 3,
    kGameServerSteamIdFieldNumber = 5,
    kGameServerPortFieldNumber = 4,
  };
  // optional .CMsgIPAddress game_server_ip = 6;
  bool has_game_server_ip() const;
  private:
  bool _internal_has_game_server_ip() const;
  public:
  void clear_game_server_ip();
  const ::CMsgIPAddress& game_server_ip() const;
  PROTOBUF_NODISCARD ::CMsgIPAddress* release_game_server_ip();
  ::CMsgIPAddress* mutable_game_server_ip();
  void set_allocated_game_server_ip(::CMsgIPAddress* game_server_ip);
  private:
  const ::CMsgIPAddress& _internal_game_server_ip() const;
  ::CMsgIPAddress* _internal_mutable_game_server_ip();
  public:
  void unsafe_arena_set_allocated_game_server_ip(
      ::CMsgIPAddress* game_server_ip);
  ::CMsgIPAddress* unsafe_arena_release_game_server_ip();

  // optional fixed64 steam_id_lobby = 2;
  bool has_steam_id_lobby() const;
  private:
  bool _internal_has_steam_id_lobby() const;
  public:
  void clear_steam_id_lobby();
  uint64_t steam_id_lobby() const;
  void set_steam_id_lobby(uint64_t value);
  private:
  uint64_t _internal_steam_id_lobby() const;
  void _internal_set_steam_id_lobby(uint64_t value);
  public:

  // optional uint32 app_id = 1;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // optional uint32 deprecated_game_server_ip = 3;
  bool has_deprecated_game_server_ip() const;
  private:
  bool _internal_has_deprecated_game_server_ip() const;
  public:
  void clear_deprecated_game_server_ip();
  uint32_t deprecated_game_server_ip() const;
  void set_deprecated_game_server_ip(uint32_t value);
  private:
  uint32_t _internal_deprecated_game_server_ip() const;
  void _internal_set_deprecated_game_server_ip(uint32_t value);
  public:

  // optional fixed64 game_server_steam_id = 5;
  bool has_game_server_steam_id() const;
  private:
  bool _internal_has_game_server_steam_id() const;
  public:
  void clear_game_server_steam_id();
  uint64_t game_server_steam_id() const;
  void set_game_server_steam_id(uint64_t value);
  private:
  uint64_t _internal_game_server_steam_id() const;
  void _internal_set_game_server_steam_id(uint64_t value);
  public:

  // optional uint32 game_server_port = 4;
  bool has_game_server_port() const;
  private:
  bool _internal_has_game_server_port() const;
  public:
  void clear_game_server_port();
  uint32_t game_server_port() const;
  void set_game_server_port(uint32_t value);
  private:
  uint32_t _internal_game_server_port() const;
  void _internal_set_game_server_port(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientMMSSetLobbyGameServer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CMsgIPAddress* game_server_ip_;
  uint64_t steam_id_lobby_;
  uint32_t app_id_;
  uint32_t deprecated_game_server_ip_;
  uint64_t game_server_steam_id_;
  uint32_t game_server_port_;
  friend struct ::TableStruct_steammessages_5fclientserver_5fmms_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientMMSLobbyGameServerSet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientMMSLobbyGameServerSet) */ {
 public:
  inline CMsgClientMMSLobbyGameServerSet() : CMsgClientMMSLobbyGameServerSet(nullptr) {}
  ~CMsgClientMMSLobbyGameServerSet() override;
  explicit constexpr CMsgClientMMSLobbyGameServerSet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientMMSLobbyGameServerSet(const CMsgClientMMSLobbyGameServerSet& from);
  CMsgClientMMSLobbyGameServerSet(CMsgClientMMSLobbyGameServerSet&& from) noexcept
    : CMsgClientMMSLobbyGameServerSet() {
    *this = ::std::move(from);
  }

  inline CMsgClientMMSLobbyGameServerSet& operator=(const CMsgClientMMSLobbyGameServerSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientMMSLobbyGameServerSet& operator=(CMsgClientMMSLobbyGameServerSet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientMMSLobbyGameServerSet& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientMMSLobbyGameServerSet* internal_default_instance() {
    return reinterpret_cast<const CMsgClientMMSLobbyGameServerSet*>(
               &_CMsgClientMMSLobbyGameServerSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(CMsgClientMMSLobbyGameServerSet& a, CMsgClientMMSLobbyGameServerSet& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientMMSLobbyGameServerSet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientMMSLobbyGameServerSet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientMMSLobbyGameServerSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientMMSLobbyGameServerSet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientMMSLobbyGameServerSet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientMMSLobbyGameServerSet& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientMMSLobbyGameServerSet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientMMSLobbyGameServerSet";
  }
  protected:
  explicit CMsgClientMMSLobbyGameServerSet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameServerIpFieldNumber = 6,
    kSteamIdLobbyFieldNumber = 2,
    kAppIdFieldNumber = 1,
    kDeprecatedGameServerIpFieldNumber = 3,
    kGameServerSteamIdFieldNumber = 5,
    kGameServerPortFieldNumber = 4,
  };
  // optional .CMsgIPAddress game_server_ip = 6;
  bool has_game_server_ip() const;
  private:
  bool _internal_has_game_server_ip() const;
  public:
  void clear_game_server_ip();
  const ::CMsgIPAddress& game_server_ip() const;
  PROTOBUF_NODISCARD ::CMsgIPAddress* release_game_server_ip();
  ::CMsgIPAddress* mutable_game_server_ip();
  void set_allocated_game_server_ip(::CMsgIPAddress* game_server_ip);
  private:
  const ::CMsgIPAddress& _internal_game_server_ip() const;
  ::CMsgIPAddress* _internal_mutable_game_server_ip();
  public:
  void unsafe_arena_set_allocated_game_server_ip(
      ::CMsgIPAddress* game_server_ip);
  ::CMsgIPAddress* unsafe_arena_release_game_server_ip();

  // optional fixed64 steam_id_lobby = 2;
  bool has_steam_id_lobby() const;
  private:
  bool _internal_has_steam_id_lobby() const;
  public:
  void clear_steam_id_lobby();
  uint64_t steam_id_lobby() const;
  void set_steam_id_lobby(uint64_t value);
  private:
  uint64_t _internal_steam_id_lobby() const;
  void _internal_set_steam_id_lobby(uint64_t value);
  public:

  // optional uint32 app_id = 1;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // optional uint32 deprecated_game_server_ip = 3;
  bool has_deprecated_game_server_ip() const;
  private:
  bool _internal_has_deprecated_game_server_ip() const;
  public:
  void clear_deprecated_game_server_ip();
  uint32_t deprecated_game_server_ip() const;
  void set_deprecated_game_server_ip(uint32_t value);
  private:
  uint32_t _internal_deprecated_game_server_ip() const;
  void _internal_set_deprecated_game_server_ip(uint32_t value);
  public:

  // optional fixed64 game_server_steam_id = 5;
  bool has_game_server_steam_id() const;
  private:
  bool _internal_has_game_server_steam_id() const;
  public:
  void clear_game_server_steam_id();
  uint64_t game_server_steam_id() const;
  void set_game_server_steam_id(uint64_t value);
  private:
  uint64_t _internal_game_server_steam_id() const;
  void _internal_set_game_server_steam_id(uint64_t value);
  public:

  // optional uint32 game_server_port = 4;
  bool has_game_server_port() const;
  private:
  bool _internal_has_game_server_port() const;
  public:
  void clear_game_server_port();
  uint32_t game_server_port() const;
  void set_game_server_port(uint32_t value);
  private:
  uint32_t _internal_game_server_port() const;
  void _internal_set_game_server_port(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientMMSLobbyGameServerSet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CMsgIPAddress* game_server_ip_;
  uint64_t steam_id_lobby_;
  uint32_t app_id_;
  uint32_t deprecated_game_server_ip_;
  uint64_t game_server_steam_id_;
  uint32_t game_server_port_;
  friend struct ::TableStruct_steammessages_5fclientserver_5fmms_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientMMSUserJoinedLobby final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientMMSUserJoinedLobby) */ {
 public:
  inline CMsgClientMMSUserJoinedLobby() : CMsgClientMMSUserJoinedLobby(nullptr) {}
  ~CMsgClientMMSUserJoinedLobby() override;
  explicit constexpr CMsgClientMMSUserJoinedLobby(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientMMSUserJoinedLobby(const CMsgClientMMSUserJoinedLobby& from);
  CMsgClientMMSUserJoinedLobby(CMsgClientMMSUserJoinedLobby&& from) noexcept
    : CMsgClientMMSUserJoinedLobby() {
    *this = ::std::move(from);
  }

  inline CMsgClientMMSUserJoinedLobby& operator=(const CMsgClientMMSUserJoinedLobby& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientMMSUserJoinedLobby& operator=(CMsgClientMMSUserJoinedLobby&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientMMSUserJoinedLobby& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientMMSUserJoinedLobby* internal_default_instance() {
    return reinterpret_cast<const CMsgClientMMSUserJoinedLobby*>(
               &_CMsgClientMMSUserJoinedLobby_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(CMsgClientMMSUserJoinedLobby& a, CMsgClientMMSUserJoinedLobby& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientMMSUserJoinedLobby* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientMMSUserJoinedLobby* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientMMSUserJoinedLobby* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientMMSUserJoinedLobby>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientMMSUserJoinedLobby& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientMMSUserJoinedLobby& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientMMSUserJoinedLobby* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientMMSUserJoinedLobby";
  }
  protected:
  explicit CMsgClientMMSUserJoinedLobby(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPersonaNameFieldNumber = 4,
    kSteamIdLobbyFieldNumber = 2,
    kSteamIdUserFieldNumber = 3,
    kAppIdFieldNumber = 1,
  };
  // optional string persona_name = 4;
  bool has_persona_name() const;
  private:
  bool _internal_has_persona_name() const;
  public:
  void clear_persona_name();
  const std::string& persona_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_persona_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_persona_name();
  PROTOBUF_NODISCARD std::string* release_persona_name();
  void set_allocated_persona_name(std::string* persona_name);
  private:
  const std::string& _internal_persona_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_persona_name(const std::string& value);
  std::string* _internal_mutable_persona_name();
  public:

  // optional fixed64 steam_id_lobby = 2;
  bool has_steam_id_lobby() const;
  private:
  bool _internal_has_steam_id_lobby() const;
  public:
  void clear_steam_id_lobby();
  uint64_t steam_id_lobby() const;
  void set_steam_id_lobby(uint64_t value);
  private:
  uint64_t _internal_steam_id_lobby() const;
  void _internal_set_steam_id_lobby(uint64_t value);
  public:

  // optional fixed64 steam_id_user = 3;
  bool has_steam_id_user() const;
  private:
  bool _internal_has_steam_id_user() const;
  public:
  void clear_steam_id_user();
  uint64_t steam_id_user() const;
  void set_steam_id_user(uint64_t value);
  private:
  uint64_t _internal_steam_id_user() const;
  void _internal_set_steam_id_user(uint64_t value);
  public:

  // optional uint32 app_id = 1;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientMMSUserJoinedLobby)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr persona_name_;
  uint64_t steam_id_lobby_;
  uint64_t steam_id_user_;
  uint32_t app_id_;
  friend struct ::TableStruct_steammessages_5fclientserver_5fmms_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientMMSUserLeftLobby final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientMMSUserLeftLobby) */ {
 public:
  inline CMsgClientMMSUserLeftLobby() : CMsgClientMMSUserLeftLobby(nullptr) {}
  ~CMsgClientMMSUserLeftLobby() override;
  explicit constexpr CMsgClientMMSUserLeftLobby(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientMMSUserLeftLobby(const CMsgClientMMSUserLeftLobby& from);
  CMsgClientMMSUserLeftLobby(CMsgClientMMSUserLeftLobby&& from) noexcept
    : CMsgClientMMSUserLeftLobby() {
    *this = ::std::move(from);
  }

  inline CMsgClientMMSUserLeftLobby& operator=(const CMsgClientMMSUserLeftLobby& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientMMSUserLeftLobby& operator=(CMsgClientMMSUserLeftLobby&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientMMSUserLeftLobby& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientMMSUserLeftLobby* internal_default_instance() {
    return reinterpret_cast<const CMsgClientMMSUserLeftLobby*>(
               &_CMsgClientMMSUserLeftLobby_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(CMsgClientMMSUserLeftLobby& a, CMsgClientMMSUserLeftLobby& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientMMSUserLeftLobby* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientMMSUserLeftLobby* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientMMSUserLeftLobby* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientMMSUserLeftLobby>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientMMSUserLeftLobby& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientMMSUserLeftLobby& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientMMSUserLeftLobby* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientMMSUserLeftLobby";
  }
  protected:
  explicit CMsgClientMMSUserLeftLobby(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPersonaNameFieldNumber = 4,
    kSteamIdLobbyFieldNumber = 2,
    kSteamIdUserFieldNumber = 3,
    kAppIdFieldNumber = 1,
  };
  // optional string persona_name = 4;
  bool has_persona_name() const;
  private:
  bool _internal_has_persona_name() const;
  public:
  void clear_persona_name();
  const std::string& persona_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_persona_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_persona_name();
  PROTOBUF_NODISCARD std::string* release_persona_name();
  void set_allocated_persona_name(std::string* persona_name);
  private:
  const std::string& _internal_persona_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_persona_name(const std::string& value);
  std::string* _internal_mutable_persona_name();
  public:

  // optional fixed64 steam_id_lobby = 2;
  bool has_steam_id_lobby() const;
  private:
  bool _internal_has_steam_id_lobby() const;
  public:
  void clear_steam_id_lobby();
  uint64_t steam_id_lobby() const;
  void set_steam_id_lobby(uint64_t value);
  private:
  uint64_t _internal_steam_id_lobby() const;
  void _internal_set_steam_id_lobby(uint64_t value);
  public:

  // optional fixed64 steam_id_user = 3;
  bool has_steam_id_user() const;
  private:
  bool _internal_has_steam_id_user() const;
  public:
  void clear_steam_id_user();
  uint64_t steam_id_user() const;
  void set_steam_id_user(uint64_t value);
  private:
  uint64_t _internal_steam_id_user() const;
  void _internal_set_steam_id_user(uint64_t value);
  public:

  // optional uint32 app_id = 1;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientMMSUserLeftLobby)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr persona_name_;
  uint64_t steam_id_lobby_;
  uint64_t steam_id_user_;
  uint32_t app_id_;
  friend struct ::TableStruct_steammessages_5fclientserver_5fmms_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientMMSInviteToLobby final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientMMSInviteToLobby) */ {
 public:
  inline CMsgClientMMSInviteToLobby() : CMsgClientMMSInviteToLobby(nullptr) {}
  ~CMsgClientMMSInviteToLobby() override;
  explicit constexpr CMsgClientMMSInviteToLobby(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientMMSInviteToLobby(const CMsgClientMMSInviteToLobby& from);
  CMsgClientMMSInviteToLobby(CMsgClientMMSInviteToLobby&& from) noexcept
    : CMsgClientMMSInviteToLobby() {
    *this = ::std::move(from);
  }

  inline CMsgClientMMSInviteToLobby& operator=(const CMsgClientMMSInviteToLobby& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientMMSInviteToLobby& operator=(CMsgClientMMSInviteToLobby&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientMMSInviteToLobby& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientMMSInviteToLobby* internal_default_instance() {
    return reinterpret_cast<const CMsgClientMMSInviteToLobby*>(
               &_CMsgClientMMSInviteToLobby_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(CMsgClientMMSInviteToLobby& a, CMsgClientMMSInviteToLobby& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientMMSInviteToLobby* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientMMSInviteToLobby* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientMMSInviteToLobby* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientMMSInviteToLobby>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientMMSInviteToLobby& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientMMSInviteToLobby& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientMMSInviteToLobby* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientMMSInviteToLobby";
  }
  protected:
  explicit CMsgClientMMSInviteToLobby(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamIdLobbyFieldNumber = 2,
    kSteamIdUserInvitedFieldNumber = 3,
    kAppIdFieldNumber = 1,
  };
  // optional fixed64 steam_id_lobby = 2;
  bool has_steam_id_lobby() const;
  private:
  bool _internal_has_steam_id_lobby() const;
  public:
  void clear_steam_id_lobby();
  uint64_t steam_id_lobby() const;
  void set_steam_id_lobby(uint64_t value);
  private:
  uint64_t _internal_steam_id_lobby() const;
  void _internal_set_steam_id_lobby(uint64_t value);
  public:

  // optional fixed64 steam_id_user_invited = 3;
  bool has_steam_id_user_invited() const;
  private:
  bool _internal_has_steam_id_user_invited() const;
  public:
  void clear_steam_id_user_invited();
  uint64_t steam_id_user_invited() const;
  void set_steam_id_user_invited(uint64_t value);
  private:
  uint64_t _internal_steam_id_user_invited() const;
  void _internal_set_steam_id_user_invited(uint64_t value);
  public:

  // optional uint32 app_id = 1;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientMMSInviteToLobby)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t steam_id_lobby_;
  uint64_t steam_id_user_invited_;
  uint32_t app_id_;
  friend struct ::TableStruct_steammessages_5fclientserver_5fmms_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientMMSGetLobbyStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientMMSGetLobbyStatus) */ {
 public:
  inline CMsgClientMMSGetLobbyStatus() : CMsgClientMMSGetLobbyStatus(nullptr) {}
  ~CMsgClientMMSGetLobbyStatus() override;
  explicit constexpr CMsgClientMMSGetLobbyStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientMMSGetLobbyStatus(const CMsgClientMMSGetLobbyStatus& from);
  CMsgClientMMSGetLobbyStatus(CMsgClientMMSGetLobbyStatus&& from) noexcept
    : CMsgClientMMSGetLobbyStatus() {
    *this = ::std::move(from);
  }

  inline CMsgClientMMSGetLobbyStatus& operator=(const CMsgClientMMSGetLobbyStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientMMSGetLobbyStatus& operator=(CMsgClientMMSGetLobbyStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientMMSGetLobbyStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientMMSGetLobbyStatus* internal_default_instance() {
    return reinterpret_cast<const CMsgClientMMSGetLobbyStatus*>(
               &_CMsgClientMMSGetLobbyStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(CMsgClientMMSGetLobbyStatus& a, CMsgClientMMSGetLobbyStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientMMSGetLobbyStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientMMSGetLobbyStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientMMSGetLobbyStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientMMSGetLobbyStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientMMSGetLobbyStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientMMSGetLobbyStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientMMSGetLobbyStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientMMSGetLobbyStatus";
  }
  protected:
  explicit CMsgClientMMSGetLobbyStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamIdLobbyFieldNumber = 2,
    kAppIdFieldNumber = 1,
    kClaimMembershipFieldNumber = 3,
    kClaimOwnershipFieldNumber = 4,
  };
  // optional fixed64 steam_id_lobby = 2;
  bool has_steam_id_lobby() const;
  private:
  bool _internal_has_steam_id_lobby() const;
  public:
  void clear_steam_id_lobby();
  uint64_t steam_id_lobby() const;
  void set_steam_id_lobby(uint64_t value);
  private:
  uint64_t _internal_steam_id_lobby() const;
  void _internal_set_steam_id_lobby(uint64_t value);
  public:

  // optional uint32 app_id = 1;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // optional bool claim_membership = 3;
  bool has_claim_membership() const;
  private:
  bool _internal_has_claim_membership() const;
  public:
  void clear_claim_membership();
  bool claim_membership() const;
  void set_claim_membership(bool value);
  private:
  bool _internal_claim_membership() const;
  void _internal_set_claim_membership(bool value);
  public:

  // optional bool claim_ownership = 4;
  bool has_claim_ownership() const;
  private:
  bool _internal_has_claim_ownership() const;
  public:
  void clear_claim_ownership();
  bool claim_ownership() const;
  void set_claim_ownership(bool value);
  private:
  bool _internal_claim_ownership() const;
  void _internal_set_claim_ownership(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientMMSGetLobbyStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t steam_id_lobby_;
  uint32_t app_id_;
  bool claim_membership_;
  bool claim_ownership_;
  friend struct ::TableStruct_steammessages_5fclientserver_5fmms_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientMMSGetLobbyStatusResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientMMSGetLobbyStatusResponse) */ {
 public:
  inline CMsgClientMMSGetLobbyStatusResponse() : CMsgClientMMSGetLobbyStatusResponse(nullptr) {}
  ~CMsgClientMMSGetLobbyStatusResponse() override;
  explicit constexpr CMsgClientMMSGetLobbyStatusResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientMMSGetLobbyStatusResponse(const CMsgClientMMSGetLobbyStatusResponse& from);
  CMsgClientMMSGetLobbyStatusResponse(CMsgClientMMSGetLobbyStatusResponse&& from) noexcept
    : CMsgClientMMSGetLobbyStatusResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientMMSGetLobbyStatusResponse& operator=(const CMsgClientMMSGetLobbyStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientMMSGetLobbyStatusResponse& operator=(CMsgClientMMSGetLobbyStatusResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientMMSGetLobbyStatusResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientMMSGetLobbyStatusResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientMMSGetLobbyStatusResponse*>(
               &_CMsgClientMMSGetLobbyStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(CMsgClientMMSGetLobbyStatusResponse& a, CMsgClientMMSGetLobbyStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientMMSGetLobbyStatusResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientMMSGetLobbyStatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientMMSGetLobbyStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientMMSGetLobbyStatusResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientMMSGetLobbyStatusResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientMMSGetLobbyStatusResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientMMSGetLobbyStatusResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientMMSGetLobbyStatusResponse";
  }
  protected:
  explicit CMsgClientMMSGetLobbyStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamIdLobbyFieldNumber = 2,
    kAppIdFieldNumber = 1,
    kLobbyStatusFieldNumber = 3,
  };
  // optional fixed64 steam_id_lobby = 2;
  bool has_steam_id_lobby() const;
  private:
  bool _internal_has_steam_id_lobby() const;
  public:
  void clear_steam_id_lobby();
  uint64_t steam_id_lobby() const;
  void set_steam_id_lobby(uint64_t value);
  private:
  uint64_t _internal_steam_id_lobby() const;
  void _internal_set_steam_id_lobby(uint64_t value);
  public:

  // optional uint32 app_id = 1;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // optional .EMMSLobbyStatus lobby_status = 3 [default = k_EMMSLobbyStatusInvalid];
  bool has_lobby_status() const;
  private:
  bool _internal_has_lobby_status() const;
  public:
  void clear_lobby_status();
  ::EMMSLobbyStatus lobby_status() const;
  void set_lobby_status(::EMMSLobbyStatus value);
  private:
  ::EMMSLobbyStatus _internal_lobby_status() const;
  void _internal_set_lobby_status(::EMMSLobbyStatus value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientMMSGetLobbyStatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t steam_id_lobby_;
  uint32_t app_id_;
  int lobby_status_;
  friend struct ::TableStruct_steammessages_5fclientserver_5fmms_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CMsgClientMMSSetRatelimitPolicyOnClient

// optional uint32 app_id = 1;
inline bool CMsgClientMMSSetRatelimitPolicyOnClient::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientMMSSetRatelimitPolicyOnClient::has_app_id() const {
  return _internal_has_app_id();
}
inline void CMsgClientMMSSetRatelimitPolicyOnClient::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgClientMMSSetRatelimitPolicyOnClient::_internal_app_id() const {
  return app_id_;
}
inline uint32_t CMsgClientMMSSetRatelimitPolicyOnClient::app_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSSetRatelimitPolicyOnClient.app_id)
  return _internal_app_id();
}
inline void CMsgClientMMSSetRatelimitPolicyOnClient::_internal_set_app_id(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  app_id_ = value;
}
inline void CMsgClientMMSSetRatelimitPolicyOnClient::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSSetRatelimitPolicyOnClient.app_id)
}

// optional bool enable_rate_limits = 2;
inline bool CMsgClientMMSSetRatelimitPolicyOnClient::_internal_has_enable_rate_limits() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientMMSSetRatelimitPolicyOnClient::has_enable_rate_limits() const {
  return _internal_has_enable_rate_limits();
}
inline void CMsgClientMMSSetRatelimitPolicyOnClient::clear_enable_rate_limits() {
  enable_rate_limits_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CMsgClientMMSSetRatelimitPolicyOnClient::_internal_enable_rate_limits() const {
  return enable_rate_limits_;
}
inline bool CMsgClientMMSSetRatelimitPolicyOnClient::enable_rate_limits() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSSetRatelimitPolicyOnClient.enable_rate_limits)
  return _internal_enable_rate_limits();
}
inline void CMsgClientMMSSetRatelimitPolicyOnClient::_internal_set_enable_rate_limits(bool value) {
  _has_bits_[0] |= 0x00000002u;
  enable_rate_limits_ = value;
}
inline void CMsgClientMMSSetRatelimitPolicyOnClient::set_enable_rate_limits(bool value) {
  _internal_set_enable_rate_limits(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSSetRatelimitPolicyOnClient.enable_rate_limits)
}

// optional int32 seconds_per_message = 3;
inline bool CMsgClientMMSSetRatelimitPolicyOnClient::_internal_has_seconds_per_message() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientMMSSetRatelimitPolicyOnClient::has_seconds_per_message() const {
  return _internal_has_seconds_per_message();
}
inline void CMsgClientMMSSetRatelimitPolicyOnClient::clear_seconds_per_message() {
  seconds_per_message_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t CMsgClientMMSSetRatelimitPolicyOnClient::_internal_seconds_per_message() const {
  return seconds_per_message_;
}
inline int32_t CMsgClientMMSSetRatelimitPolicyOnClient::seconds_per_message() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSSetRatelimitPolicyOnClient.seconds_per_message)
  return _internal_seconds_per_message();
}
inline void CMsgClientMMSSetRatelimitPolicyOnClient::_internal_set_seconds_per_message(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  seconds_per_message_ = value;
}
inline void CMsgClientMMSSetRatelimitPolicyOnClient::set_seconds_per_message(int32_t value) {
  _internal_set_seconds_per_message(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSSetRatelimitPolicyOnClient.seconds_per_message)
}

// optional int32 milliseconds_per_data_update = 4;
inline bool CMsgClientMMSSetRatelimitPolicyOnClient::_internal_has_milliseconds_per_data_update() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientMMSSetRatelimitPolicyOnClient::has_milliseconds_per_data_update() const {
  return _internal_has_milliseconds_per_data_update();
}
inline void CMsgClientMMSSetRatelimitPolicyOnClient::clear_milliseconds_per_data_update() {
  milliseconds_per_data_update_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t CMsgClientMMSSetRatelimitPolicyOnClient::_internal_milliseconds_per_data_update() const {
  return milliseconds_per_data_update_;
}
inline int32_t CMsgClientMMSSetRatelimitPolicyOnClient::milliseconds_per_data_update() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSSetRatelimitPolicyOnClient.milliseconds_per_data_update)
  return _internal_milliseconds_per_data_update();
}
inline void CMsgClientMMSSetRatelimitPolicyOnClient::_internal_set_milliseconds_per_data_update(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  milliseconds_per_data_update_ = value;
}
inline void CMsgClientMMSSetRatelimitPolicyOnClient::set_milliseconds_per_data_update(int32_t value) {
  _internal_set_milliseconds_per_data_update(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSSetRatelimitPolicyOnClient.milliseconds_per_data_update)
}

// -------------------------------------------------------------------

// CMsgClientMMSCreateLobby

// optional uint32 app_id = 1;
inline bool CMsgClientMMSCreateLobby::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientMMSCreateLobby::has_app_id() const {
  return _internal_has_app_id();
}
inline void CMsgClientMMSCreateLobby::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgClientMMSCreateLobby::_internal_app_id() const {
  return app_id_;
}
inline uint32_t CMsgClientMMSCreateLobby::app_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSCreateLobby.app_id)
  return _internal_app_id();
}
inline void CMsgClientMMSCreateLobby::_internal_set_app_id(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  app_id_ = value;
}
inline void CMsgClientMMSCreateLobby::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSCreateLobby.app_id)
}

// optional int32 max_members = 2;
inline bool CMsgClientMMSCreateLobby::_internal_has_max_members() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgClientMMSCreateLobby::has_max_members() const {
  return _internal_has_max_members();
}
inline void CMsgClientMMSCreateLobby::clear_max_members() {
  max_members_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline int32_t CMsgClientMMSCreateLobby::_internal_max_members() const {
  return max_members_;
}
inline int32_t CMsgClientMMSCreateLobby::max_members() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSCreateLobby.max_members)
  return _internal_max_members();
}
inline void CMsgClientMMSCreateLobby::_internal_set_max_members(int32_t value) {
  _has_bits_[0] |= 0x00000010u;
  max_members_ = value;
}
inline void CMsgClientMMSCreateLobby::set_max_members(int32_t value) {
  _internal_set_max_members(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSCreateLobby.max_members)
}

// optional int32 lobby_type = 3;
inline bool CMsgClientMMSCreateLobby::_internal_has_lobby_type() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgClientMMSCreateLobby::has_lobby_type() const {
  return _internal_has_lobby_type();
}
inline void CMsgClientMMSCreateLobby::clear_lobby_type() {
  lobby_type_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline int32_t CMsgClientMMSCreateLobby::_internal_lobby_type() const {
  return lobby_type_;
}
inline int32_t CMsgClientMMSCreateLobby::lobby_type() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSCreateLobby.lobby_type)
  return _internal_lobby_type();
}
inline void CMsgClientMMSCreateLobby::_internal_set_lobby_type(int32_t value) {
  _has_bits_[0] |= 0x00000020u;
  lobby_type_ = value;
}
inline void CMsgClientMMSCreateLobby::set_lobby_type(int32_t value) {
  _internal_set_lobby_type(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSCreateLobby.lobby_type)
}

// optional int32 lobby_flags = 4;
inline bool CMsgClientMMSCreateLobby::_internal_has_lobby_flags() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgClientMMSCreateLobby::has_lobby_flags() const {
  return _internal_has_lobby_flags();
}
inline void CMsgClientMMSCreateLobby::clear_lobby_flags() {
  lobby_flags_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline int32_t CMsgClientMMSCreateLobby::_internal_lobby_flags() const {
  return lobby_flags_;
}
inline int32_t CMsgClientMMSCreateLobby::lobby_flags() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSCreateLobby.lobby_flags)
  return _internal_lobby_flags();
}
inline void CMsgClientMMSCreateLobby::_internal_set_lobby_flags(int32_t value) {
  _has_bits_[0] |= 0x00000040u;
  lobby_flags_ = value;
}
inline void CMsgClientMMSCreateLobby::set_lobby_flags(int32_t value) {
  _internal_set_lobby_flags(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSCreateLobby.lobby_flags)
}

// optional uint32 cell_id = 5;
inline bool CMsgClientMMSCreateLobby::_internal_has_cell_id() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgClientMMSCreateLobby::has_cell_id() const {
  return _internal_has_cell_id();
}
inline void CMsgClientMMSCreateLobby::clear_cell_id() {
  cell_id_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CMsgClientMMSCreateLobby::_internal_cell_id() const {
  return cell_id_;
}
inline uint32_t CMsgClientMMSCreateLobby::cell_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSCreateLobby.cell_id)
  return _internal_cell_id();
}
inline void CMsgClientMMSCreateLobby::_internal_set_cell_id(uint32_t value) {
  _has_bits_[0] |= 0x00000080u;
  cell_id_ = value;
}
inline void CMsgClientMMSCreateLobby::set_cell_id(uint32_t value) {
  _internal_set_cell_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSCreateLobby.cell_id)
}

// optional uint32 deprecated_public_ip = 6;
inline bool CMsgClientMMSCreateLobby::_internal_has_deprecated_public_ip() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgClientMMSCreateLobby::has_deprecated_public_ip() const {
  return _internal_has_deprecated_public_ip();
}
inline void CMsgClientMMSCreateLobby::clear_deprecated_public_ip() {
  deprecated_public_ip_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CMsgClientMMSCreateLobby::_internal_deprecated_public_ip() const {
  return deprecated_public_ip_;
}
inline uint32_t CMsgClientMMSCreateLobby::deprecated_public_ip() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSCreateLobby.deprecated_public_ip)
  return _internal_deprecated_public_ip();
}
inline void CMsgClientMMSCreateLobby::_internal_set_deprecated_public_ip(uint32_t value) {
  _has_bits_[0] |= 0x00000100u;
  deprecated_public_ip_ = value;
}
inline void CMsgClientMMSCreateLobby::set_deprecated_public_ip(uint32_t value) {
  _internal_set_deprecated_public_ip(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSCreateLobby.deprecated_public_ip)
}

// optional bytes metadata = 7;
inline bool CMsgClientMMSCreateLobby::_internal_has_metadata() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientMMSCreateLobby::has_metadata() const {
  return _internal_has_metadata();
}
inline void CMsgClientMMSCreateLobby::clear_metadata() {
  metadata_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientMMSCreateLobby::metadata() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSCreateLobby.metadata)
  return _internal_metadata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientMMSCreateLobby::set_metadata(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 metadata_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientMMSCreateLobby.metadata)
}
inline std::string* CMsgClientMMSCreateLobby::mutable_metadata() {
  std::string* _s = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:CMsgClientMMSCreateLobby.metadata)
  return _s;
}
inline const std::string& CMsgClientMMSCreateLobby::_internal_metadata() const {
  return metadata_.Get();
}
inline void CMsgClientMMSCreateLobby::_internal_set_metadata(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientMMSCreateLobby::_internal_mutable_metadata() {
  _has_bits_[0] |= 0x00000001u;
  return metadata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientMMSCreateLobby::release_metadata() {
  // @@protoc_insertion_point(field_release:CMsgClientMMSCreateLobby.metadata)
  if (!_internal_has_metadata()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = metadata_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (metadata_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientMMSCreateLobby::set_allocated_metadata(std::string* metadata) {
  if (metadata != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  metadata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metadata,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (metadata_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientMMSCreateLobby.metadata)
}

// optional string persona_name_owner = 8;
inline bool CMsgClientMMSCreateLobby::_internal_has_persona_name_owner() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientMMSCreateLobby::has_persona_name_owner() const {
  return _internal_has_persona_name_owner();
}
inline void CMsgClientMMSCreateLobby::clear_persona_name_owner() {
  persona_name_owner_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgClientMMSCreateLobby::persona_name_owner() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSCreateLobby.persona_name_owner)
  return _internal_persona_name_owner();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientMMSCreateLobby::set_persona_name_owner(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 persona_name_owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientMMSCreateLobby.persona_name_owner)
}
inline std::string* CMsgClientMMSCreateLobby::mutable_persona_name_owner() {
  std::string* _s = _internal_mutable_persona_name_owner();
  // @@protoc_insertion_point(field_mutable:CMsgClientMMSCreateLobby.persona_name_owner)
  return _s;
}
inline const std::string& CMsgClientMMSCreateLobby::_internal_persona_name_owner() const {
  return persona_name_owner_.Get();
}
inline void CMsgClientMMSCreateLobby::_internal_set_persona_name_owner(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  persona_name_owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientMMSCreateLobby::_internal_mutable_persona_name_owner() {
  _has_bits_[0] |= 0x00000002u;
  return persona_name_owner_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientMMSCreateLobby::release_persona_name_owner() {
  // @@protoc_insertion_point(field_release:CMsgClientMMSCreateLobby.persona_name_owner)
  if (!_internal_has_persona_name_owner()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = persona_name_owner_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (persona_name_owner_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    persona_name_owner_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientMMSCreateLobby::set_allocated_persona_name_owner(std::string* persona_name_owner) {
  if (persona_name_owner != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  persona_name_owner_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), persona_name_owner,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (persona_name_owner_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    persona_name_owner_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientMMSCreateLobby.persona_name_owner)
}

// optional .CMsgIPAddress public_ip = 9;
inline bool CMsgClientMMSCreateLobby::_internal_has_public_ip() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || public_ip_ != nullptr);
  return value;
}
inline bool CMsgClientMMSCreateLobby::has_public_ip() const {
  return _internal_has_public_ip();
}
inline const ::CMsgIPAddress& CMsgClientMMSCreateLobby::_internal_public_ip() const {
  const ::CMsgIPAddress* p = public_ip_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgIPAddress&>(
      ::_CMsgIPAddress_default_instance_);
}
inline const ::CMsgIPAddress& CMsgClientMMSCreateLobby::public_ip() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSCreateLobby.public_ip)
  return _internal_public_ip();
}
inline void CMsgClientMMSCreateLobby::unsafe_arena_set_allocated_public_ip(
    ::CMsgIPAddress* public_ip) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(public_ip_);
  }
  public_ip_ = public_ip;
  if (public_ip) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgClientMMSCreateLobby.public_ip)
}
inline ::CMsgIPAddress* CMsgClientMMSCreateLobby::release_public_ip() {
  _has_bits_[0] &= ~0x00000004u;
  ::CMsgIPAddress* temp = public_ip_;
  public_ip_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgIPAddress* CMsgClientMMSCreateLobby::unsafe_arena_release_public_ip() {
  // @@protoc_insertion_point(field_release:CMsgClientMMSCreateLobby.public_ip)
  _has_bits_[0] &= ~0x00000004u;
  ::CMsgIPAddress* temp = public_ip_;
  public_ip_ = nullptr;
  return temp;
}
inline ::CMsgIPAddress* CMsgClientMMSCreateLobby::_internal_mutable_public_ip() {
  _has_bits_[0] |= 0x00000004u;
  if (public_ip_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgIPAddress>(GetArenaForAllocation());
    public_ip_ = p;
  }
  return public_ip_;
}
inline ::CMsgIPAddress* CMsgClientMMSCreateLobby::mutable_public_ip() {
  ::CMsgIPAddress* _msg = _internal_mutable_public_ip();
  // @@protoc_insertion_point(field_mutable:CMsgClientMMSCreateLobby.public_ip)
  return _msg;
}
inline void CMsgClientMMSCreateLobby::set_allocated_public_ip(::CMsgIPAddress* public_ip) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(public_ip_);
  }
  if (public_ip) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(public_ip));
    if (message_arena != submessage_arena) {
      public_ip = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, public_ip, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  public_ip_ = public_ip;
  // @@protoc_insertion_point(field_set_allocated:CMsgClientMMSCreateLobby.public_ip)
}

// -------------------------------------------------------------------

// CMsgClientMMSCreateLobbyResponse

// optional uint32 app_id = 1;
inline bool CMsgClientMMSCreateLobbyResponse::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientMMSCreateLobbyResponse::has_app_id() const {
  return _internal_has_app_id();
}
inline void CMsgClientMMSCreateLobbyResponse::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgClientMMSCreateLobbyResponse::_internal_app_id() const {
  return app_id_;
}
inline uint32_t CMsgClientMMSCreateLobbyResponse::app_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSCreateLobbyResponse.app_id)
  return _internal_app_id();
}
inline void CMsgClientMMSCreateLobbyResponse::_internal_set_app_id(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  app_id_ = value;
}
inline void CMsgClientMMSCreateLobbyResponse::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSCreateLobbyResponse.app_id)
}

// optional fixed64 steam_id_lobby = 2;
inline bool CMsgClientMMSCreateLobbyResponse::_internal_has_steam_id_lobby() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientMMSCreateLobbyResponse::has_steam_id_lobby() const {
  return _internal_has_steam_id_lobby();
}
inline void CMsgClientMMSCreateLobbyResponse::clear_steam_id_lobby() {
  steam_id_lobby_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgClientMMSCreateLobbyResponse::_internal_steam_id_lobby() const {
  return steam_id_lobby_;
}
inline uint64_t CMsgClientMMSCreateLobbyResponse::steam_id_lobby() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSCreateLobbyResponse.steam_id_lobby)
  return _internal_steam_id_lobby();
}
inline void CMsgClientMMSCreateLobbyResponse::_internal_set_steam_id_lobby(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steam_id_lobby_ = value;
}
inline void CMsgClientMMSCreateLobbyResponse::set_steam_id_lobby(uint64_t value) {
  _internal_set_steam_id_lobby(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSCreateLobbyResponse.steam_id_lobby)
}

// optional int32 eresult = 3 [default = 2];
inline bool CMsgClientMMSCreateLobbyResponse::_internal_has_eresult() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientMMSCreateLobbyResponse::has_eresult() const {
  return _internal_has_eresult();
}
inline void CMsgClientMMSCreateLobbyResponse::clear_eresult() {
  eresult_ = 2;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t CMsgClientMMSCreateLobbyResponse::_internal_eresult() const {
  return eresult_;
}
inline int32_t CMsgClientMMSCreateLobbyResponse::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSCreateLobbyResponse.eresult)
  return _internal_eresult();
}
inline void CMsgClientMMSCreateLobbyResponse::_internal_set_eresult(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  eresult_ = value;
}
inline void CMsgClientMMSCreateLobbyResponse::set_eresult(int32_t value) {
  _internal_set_eresult(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSCreateLobbyResponse.eresult)
}

// -------------------------------------------------------------------

// CMsgClientMMSJoinLobby

// optional uint32 app_id = 1;
inline bool CMsgClientMMSJoinLobby::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientMMSJoinLobby::has_app_id() const {
  return _internal_has_app_id();
}
inline void CMsgClientMMSJoinLobby::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgClientMMSJoinLobby::_internal_app_id() const {
  return app_id_;
}
inline uint32_t CMsgClientMMSJoinLobby::app_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSJoinLobby.app_id)
  return _internal_app_id();
}
inline void CMsgClientMMSJoinLobby::_internal_set_app_id(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  app_id_ = value;
}
inline void CMsgClientMMSJoinLobby::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSJoinLobby.app_id)
}

// optional fixed64 steam_id_lobby = 2;
inline bool CMsgClientMMSJoinLobby::_internal_has_steam_id_lobby() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientMMSJoinLobby::has_steam_id_lobby() const {
  return _internal_has_steam_id_lobby();
}
inline void CMsgClientMMSJoinLobby::clear_steam_id_lobby() {
  steam_id_lobby_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CMsgClientMMSJoinLobby::_internal_steam_id_lobby() const {
  return steam_id_lobby_;
}
inline uint64_t CMsgClientMMSJoinLobby::steam_id_lobby() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSJoinLobby.steam_id_lobby)
  return _internal_steam_id_lobby();
}
inline void CMsgClientMMSJoinLobby::_internal_set_steam_id_lobby(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  steam_id_lobby_ = value;
}
inline void CMsgClientMMSJoinLobby::set_steam_id_lobby(uint64_t value) {
  _internal_set_steam_id_lobby(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSJoinLobby.steam_id_lobby)
}

// optional string persona_name = 3;
inline bool CMsgClientMMSJoinLobby::_internal_has_persona_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientMMSJoinLobby::has_persona_name() const {
  return _internal_has_persona_name();
}
inline void CMsgClientMMSJoinLobby::clear_persona_name() {
  persona_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientMMSJoinLobby::persona_name() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSJoinLobby.persona_name)
  return _internal_persona_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientMMSJoinLobby::set_persona_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 persona_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientMMSJoinLobby.persona_name)
}
inline std::string* CMsgClientMMSJoinLobby::mutable_persona_name() {
  std::string* _s = _internal_mutable_persona_name();
  // @@protoc_insertion_point(field_mutable:CMsgClientMMSJoinLobby.persona_name)
  return _s;
}
inline const std::string& CMsgClientMMSJoinLobby::_internal_persona_name() const {
  return persona_name_.Get();
}
inline void CMsgClientMMSJoinLobby::_internal_set_persona_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  persona_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientMMSJoinLobby::_internal_mutable_persona_name() {
  _has_bits_[0] |= 0x00000001u;
  return persona_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientMMSJoinLobby::release_persona_name() {
  // @@protoc_insertion_point(field_release:CMsgClientMMSJoinLobby.persona_name)
  if (!_internal_has_persona_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = persona_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (persona_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    persona_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientMMSJoinLobby::set_allocated_persona_name(std::string* persona_name) {
  if (persona_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  persona_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), persona_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (persona_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    persona_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientMMSJoinLobby.persona_name)
}

// -------------------------------------------------------------------

// CMsgClientMMSJoinLobbyResponse_Member

// optional fixed64 steam_id = 1;
inline bool CMsgClientMMSJoinLobbyResponse_Member::_internal_has_steam_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientMMSJoinLobbyResponse_Member::has_steam_id() const {
  return _internal_has_steam_id();
}
inline void CMsgClientMMSJoinLobbyResponse_Member::clear_steam_id() {
  steam_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CMsgClientMMSJoinLobbyResponse_Member::_internal_steam_id() const {
  return steam_id_;
}
inline uint64_t CMsgClientMMSJoinLobbyResponse_Member::steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSJoinLobbyResponse.Member.steam_id)
  return _internal_steam_id();
}
inline void CMsgClientMMSJoinLobbyResponse_Member::_internal_set_steam_id(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  steam_id_ = value;
}
inline void CMsgClientMMSJoinLobbyResponse_Member::set_steam_id(uint64_t value) {
  _internal_set_steam_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSJoinLobbyResponse.Member.steam_id)
}

// optional string persona_name = 2;
inline bool CMsgClientMMSJoinLobbyResponse_Member::_internal_has_persona_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientMMSJoinLobbyResponse_Member::has_persona_name() const {
  return _internal_has_persona_name();
}
inline void CMsgClientMMSJoinLobbyResponse_Member::clear_persona_name() {
  persona_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientMMSJoinLobbyResponse_Member::persona_name() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSJoinLobbyResponse.Member.persona_name)
  return _internal_persona_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientMMSJoinLobbyResponse_Member::set_persona_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 persona_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientMMSJoinLobbyResponse.Member.persona_name)
}
inline std::string* CMsgClientMMSJoinLobbyResponse_Member::mutable_persona_name() {
  std::string* _s = _internal_mutable_persona_name();
  // @@protoc_insertion_point(field_mutable:CMsgClientMMSJoinLobbyResponse.Member.persona_name)
  return _s;
}
inline const std::string& CMsgClientMMSJoinLobbyResponse_Member::_internal_persona_name() const {
  return persona_name_.Get();
}
inline void CMsgClientMMSJoinLobbyResponse_Member::_internal_set_persona_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  persona_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientMMSJoinLobbyResponse_Member::_internal_mutable_persona_name() {
  _has_bits_[0] |= 0x00000001u;
  return persona_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientMMSJoinLobbyResponse_Member::release_persona_name() {
  // @@protoc_insertion_point(field_release:CMsgClientMMSJoinLobbyResponse.Member.persona_name)
  if (!_internal_has_persona_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = persona_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (persona_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    persona_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientMMSJoinLobbyResponse_Member::set_allocated_persona_name(std::string* persona_name) {
  if (persona_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  persona_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), persona_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (persona_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    persona_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientMMSJoinLobbyResponse.Member.persona_name)
}

// optional bytes metadata = 3;
inline bool CMsgClientMMSJoinLobbyResponse_Member::_internal_has_metadata() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientMMSJoinLobbyResponse_Member::has_metadata() const {
  return _internal_has_metadata();
}
inline void CMsgClientMMSJoinLobbyResponse_Member::clear_metadata() {
  metadata_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgClientMMSJoinLobbyResponse_Member::metadata() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSJoinLobbyResponse.Member.metadata)
  return _internal_metadata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientMMSJoinLobbyResponse_Member::set_metadata(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 metadata_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientMMSJoinLobbyResponse.Member.metadata)
}
inline std::string* CMsgClientMMSJoinLobbyResponse_Member::mutable_metadata() {
  std::string* _s = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:CMsgClientMMSJoinLobbyResponse.Member.metadata)
  return _s;
}
inline const std::string& CMsgClientMMSJoinLobbyResponse_Member::_internal_metadata() const {
  return metadata_.Get();
}
inline void CMsgClientMMSJoinLobbyResponse_Member::_internal_set_metadata(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientMMSJoinLobbyResponse_Member::_internal_mutable_metadata() {
  _has_bits_[0] |= 0x00000002u;
  return metadata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientMMSJoinLobbyResponse_Member::release_metadata() {
  // @@protoc_insertion_point(field_release:CMsgClientMMSJoinLobbyResponse.Member.metadata)
  if (!_internal_has_metadata()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = metadata_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (metadata_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientMMSJoinLobbyResponse_Member::set_allocated_metadata(std::string* metadata) {
  if (metadata != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  metadata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metadata,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (metadata_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientMMSJoinLobbyResponse.Member.metadata)
}

// -------------------------------------------------------------------

// CMsgClientMMSJoinLobbyResponse

// optional uint32 app_id = 1;
inline bool CMsgClientMMSJoinLobbyResponse::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientMMSJoinLobbyResponse::has_app_id() const {
  return _internal_has_app_id();
}
inline void CMsgClientMMSJoinLobbyResponse::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgClientMMSJoinLobbyResponse::_internal_app_id() const {
  return app_id_;
}
inline uint32_t CMsgClientMMSJoinLobbyResponse::app_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSJoinLobbyResponse.app_id)
  return _internal_app_id();
}
inline void CMsgClientMMSJoinLobbyResponse::_internal_set_app_id(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  app_id_ = value;
}
inline void CMsgClientMMSJoinLobbyResponse::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSJoinLobbyResponse.app_id)
}

// optional fixed64 steam_id_lobby = 2;
inline bool CMsgClientMMSJoinLobbyResponse::_internal_has_steam_id_lobby() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientMMSJoinLobbyResponse::has_steam_id_lobby() const {
  return _internal_has_steam_id_lobby();
}
inline void CMsgClientMMSJoinLobbyResponse::clear_steam_id_lobby() {
  steam_id_lobby_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CMsgClientMMSJoinLobbyResponse::_internal_steam_id_lobby() const {
  return steam_id_lobby_;
}
inline uint64_t CMsgClientMMSJoinLobbyResponse::steam_id_lobby() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSJoinLobbyResponse.steam_id_lobby)
  return _internal_steam_id_lobby();
}
inline void CMsgClientMMSJoinLobbyResponse::_internal_set_steam_id_lobby(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  steam_id_lobby_ = value;
}
inline void CMsgClientMMSJoinLobbyResponse::set_steam_id_lobby(uint64_t value) {
  _internal_set_steam_id_lobby(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSJoinLobbyResponse.steam_id_lobby)
}

// optional int32 chat_room_enter_response = 3;
inline bool CMsgClientMMSJoinLobbyResponse::_internal_has_chat_room_enter_response() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientMMSJoinLobbyResponse::has_chat_room_enter_response() const {
  return _internal_has_chat_room_enter_response();
}
inline void CMsgClientMMSJoinLobbyResponse::clear_chat_room_enter_response() {
  chat_room_enter_response_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t CMsgClientMMSJoinLobbyResponse::_internal_chat_room_enter_response() const {
  return chat_room_enter_response_;
}
inline int32_t CMsgClientMMSJoinLobbyResponse::chat_room_enter_response() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSJoinLobbyResponse.chat_room_enter_response)
  return _internal_chat_room_enter_response();
}
inline void CMsgClientMMSJoinLobbyResponse::_internal_set_chat_room_enter_response(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  chat_room_enter_response_ = value;
}
inline void CMsgClientMMSJoinLobbyResponse::set_chat_room_enter_response(int32_t value) {
  _internal_set_chat_room_enter_response(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSJoinLobbyResponse.chat_room_enter_response)
}

// optional int32 max_members = 4;
inline bool CMsgClientMMSJoinLobbyResponse::_internal_has_max_members() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgClientMMSJoinLobbyResponse::has_max_members() const {
  return _internal_has_max_members();
}
inline void CMsgClientMMSJoinLobbyResponse::clear_max_members() {
  max_members_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline int32_t CMsgClientMMSJoinLobbyResponse::_internal_max_members() const {
  return max_members_;
}
inline int32_t CMsgClientMMSJoinLobbyResponse::max_members() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSJoinLobbyResponse.max_members)
  return _internal_max_members();
}
inline void CMsgClientMMSJoinLobbyResponse::_internal_set_max_members(int32_t value) {
  _has_bits_[0] |= 0x00000010u;
  max_members_ = value;
}
inline void CMsgClientMMSJoinLobbyResponse::set_max_members(int32_t value) {
  _internal_set_max_members(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSJoinLobbyResponse.max_members)
}

// optional int32 lobby_type = 5;
inline bool CMsgClientMMSJoinLobbyResponse::_internal_has_lobby_type() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgClientMMSJoinLobbyResponse::has_lobby_type() const {
  return _internal_has_lobby_type();
}
inline void CMsgClientMMSJoinLobbyResponse::clear_lobby_type() {
  lobby_type_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline int32_t CMsgClientMMSJoinLobbyResponse::_internal_lobby_type() const {
  return lobby_type_;
}
inline int32_t CMsgClientMMSJoinLobbyResponse::lobby_type() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSJoinLobbyResponse.lobby_type)
  return _internal_lobby_type();
}
inline void CMsgClientMMSJoinLobbyResponse::_internal_set_lobby_type(int32_t value) {
  _has_bits_[0] |= 0x00000020u;
  lobby_type_ = value;
}
inline void CMsgClientMMSJoinLobbyResponse::set_lobby_type(int32_t value) {
  _internal_set_lobby_type(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSJoinLobbyResponse.lobby_type)
}

// optional int32 lobby_flags = 6;
inline bool CMsgClientMMSJoinLobbyResponse::_internal_has_lobby_flags() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgClientMMSJoinLobbyResponse::has_lobby_flags() const {
  return _internal_has_lobby_flags();
}
inline void CMsgClientMMSJoinLobbyResponse::clear_lobby_flags() {
  lobby_flags_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline int32_t CMsgClientMMSJoinLobbyResponse::_internal_lobby_flags() const {
  return lobby_flags_;
}
inline int32_t CMsgClientMMSJoinLobbyResponse::lobby_flags() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSJoinLobbyResponse.lobby_flags)
  return _internal_lobby_flags();
}
inline void CMsgClientMMSJoinLobbyResponse::_internal_set_lobby_flags(int32_t value) {
  _has_bits_[0] |= 0x00000080u;
  lobby_flags_ = value;
}
inline void CMsgClientMMSJoinLobbyResponse::set_lobby_flags(int32_t value) {
  _internal_set_lobby_flags(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSJoinLobbyResponse.lobby_flags)
}

// optional fixed64 steam_id_owner = 7;
inline bool CMsgClientMMSJoinLobbyResponse::_internal_has_steam_id_owner() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgClientMMSJoinLobbyResponse::has_steam_id_owner() const {
  return _internal_has_steam_id_owner();
}
inline void CMsgClientMMSJoinLobbyResponse::clear_steam_id_owner() {
  steam_id_owner_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000040u;
}
inline uint64_t CMsgClientMMSJoinLobbyResponse::_internal_steam_id_owner() const {
  return steam_id_owner_;
}
inline uint64_t CMsgClientMMSJoinLobbyResponse::steam_id_owner() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSJoinLobbyResponse.steam_id_owner)
  return _internal_steam_id_owner();
}
inline void CMsgClientMMSJoinLobbyResponse::_internal_set_steam_id_owner(uint64_t value) {
  _has_bits_[0] |= 0x00000040u;
  steam_id_owner_ = value;
}
inline void CMsgClientMMSJoinLobbyResponse::set_steam_id_owner(uint64_t value) {
  _internal_set_steam_id_owner(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSJoinLobbyResponse.steam_id_owner)
}

// optional bytes metadata = 8;
inline bool CMsgClientMMSJoinLobbyResponse::_internal_has_metadata() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientMMSJoinLobbyResponse::has_metadata() const {
  return _internal_has_metadata();
}
inline void CMsgClientMMSJoinLobbyResponse::clear_metadata() {
  metadata_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientMMSJoinLobbyResponse::metadata() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSJoinLobbyResponse.metadata)
  return _internal_metadata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientMMSJoinLobbyResponse::set_metadata(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 metadata_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientMMSJoinLobbyResponse.metadata)
}
inline std::string* CMsgClientMMSJoinLobbyResponse::mutable_metadata() {
  std::string* _s = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:CMsgClientMMSJoinLobbyResponse.metadata)
  return _s;
}
inline const std::string& CMsgClientMMSJoinLobbyResponse::_internal_metadata() const {
  return metadata_.Get();
}
inline void CMsgClientMMSJoinLobbyResponse::_internal_set_metadata(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientMMSJoinLobbyResponse::_internal_mutable_metadata() {
  _has_bits_[0] |= 0x00000001u;
  return metadata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientMMSJoinLobbyResponse::release_metadata() {
  // @@protoc_insertion_point(field_release:CMsgClientMMSJoinLobbyResponse.metadata)
  if (!_internal_has_metadata()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = metadata_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (metadata_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientMMSJoinLobbyResponse::set_allocated_metadata(std::string* metadata) {
  if (metadata != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  metadata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metadata,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (metadata_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientMMSJoinLobbyResponse.metadata)
}

// repeated .CMsgClientMMSJoinLobbyResponse.Member members = 9;
inline int CMsgClientMMSJoinLobbyResponse::_internal_members_size() const {
  return members_.size();
}
inline int CMsgClientMMSJoinLobbyResponse::members_size() const {
  return _internal_members_size();
}
inline void CMsgClientMMSJoinLobbyResponse::clear_members() {
  members_.Clear();
}
inline ::CMsgClientMMSJoinLobbyResponse_Member* CMsgClientMMSJoinLobbyResponse::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgClientMMSJoinLobbyResponse.members)
  return members_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientMMSJoinLobbyResponse_Member >*
CMsgClientMMSJoinLobbyResponse::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:CMsgClientMMSJoinLobbyResponse.members)
  return &members_;
}
inline const ::CMsgClientMMSJoinLobbyResponse_Member& CMsgClientMMSJoinLobbyResponse::_internal_members(int index) const {
  return members_.Get(index);
}
inline const ::CMsgClientMMSJoinLobbyResponse_Member& CMsgClientMMSJoinLobbyResponse::members(int index) const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSJoinLobbyResponse.members)
  return _internal_members(index);
}
inline ::CMsgClientMMSJoinLobbyResponse_Member* CMsgClientMMSJoinLobbyResponse::_internal_add_members() {
  return members_.Add();
}
inline ::CMsgClientMMSJoinLobbyResponse_Member* CMsgClientMMSJoinLobbyResponse::add_members() {
  ::CMsgClientMMSJoinLobbyResponse_Member* _add = _internal_add_members();
  // @@protoc_insertion_point(field_add:CMsgClientMMSJoinLobbyResponse.members)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientMMSJoinLobbyResponse_Member >&
CMsgClientMMSJoinLobbyResponse::members() const {
  // @@protoc_insertion_point(field_list:CMsgClientMMSJoinLobbyResponse.members)
  return members_;
}

// -------------------------------------------------------------------

// CMsgClientMMSLeaveLobby

// optional uint32 app_id = 1;
inline bool CMsgClientMMSLeaveLobby::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientMMSLeaveLobby::has_app_id() const {
  return _internal_has_app_id();
}
inline void CMsgClientMMSLeaveLobby::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgClientMMSLeaveLobby::_internal_app_id() const {
  return app_id_;
}
inline uint32_t CMsgClientMMSLeaveLobby::app_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSLeaveLobby.app_id)
  return _internal_app_id();
}
inline void CMsgClientMMSLeaveLobby::_internal_set_app_id(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  app_id_ = value;
}
inline void CMsgClientMMSLeaveLobby::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSLeaveLobby.app_id)
}

// optional fixed64 steam_id_lobby = 2;
inline bool CMsgClientMMSLeaveLobby::_internal_has_steam_id_lobby() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientMMSLeaveLobby::has_steam_id_lobby() const {
  return _internal_has_steam_id_lobby();
}
inline void CMsgClientMMSLeaveLobby::clear_steam_id_lobby() {
  steam_id_lobby_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgClientMMSLeaveLobby::_internal_steam_id_lobby() const {
  return steam_id_lobby_;
}
inline uint64_t CMsgClientMMSLeaveLobby::steam_id_lobby() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSLeaveLobby.steam_id_lobby)
  return _internal_steam_id_lobby();
}
inline void CMsgClientMMSLeaveLobby::_internal_set_steam_id_lobby(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steam_id_lobby_ = value;
}
inline void CMsgClientMMSLeaveLobby::set_steam_id_lobby(uint64_t value) {
  _internal_set_steam_id_lobby(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSLeaveLobby.steam_id_lobby)
}

// -------------------------------------------------------------------

// CMsgClientMMSLeaveLobbyResponse

// optional uint32 app_id = 1;
inline bool CMsgClientMMSLeaveLobbyResponse::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientMMSLeaveLobbyResponse::has_app_id() const {
  return _internal_has_app_id();
}
inline void CMsgClientMMSLeaveLobbyResponse::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgClientMMSLeaveLobbyResponse::_internal_app_id() const {
  return app_id_;
}
inline uint32_t CMsgClientMMSLeaveLobbyResponse::app_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSLeaveLobbyResponse.app_id)
  return _internal_app_id();
}
inline void CMsgClientMMSLeaveLobbyResponse::_internal_set_app_id(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  app_id_ = value;
}
inline void CMsgClientMMSLeaveLobbyResponse::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSLeaveLobbyResponse.app_id)
}

// optional fixed64 steam_id_lobby = 2;
inline bool CMsgClientMMSLeaveLobbyResponse::_internal_has_steam_id_lobby() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientMMSLeaveLobbyResponse::has_steam_id_lobby() const {
  return _internal_has_steam_id_lobby();
}
inline void CMsgClientMMSLeaveLobbyResponse::clear_steam_id_lobby() {
  steam_id_lobby_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgClientMMSLeaveLobbyResponse::_internal_steam_id_lobby() const {
  return steam_id_lobby_;
}
inline uint64_t CMsgClientMMSLeaveLobbyResponse::steam_id_lobby() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSLeaveLobbyResponse.steam_id_lobby)
  return _internal_steam_id_lobby();
}
inline void CMsgClientMMSLeaveLobbyResponse::_internal_set_steam_id_lobby(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steam_id_lobby_ = value;
}
inline void CMsgClientMMSLeaveLobbyResponse::set_steam_id_lobby(uint64_t value) {
  _internal_set_steam_id_lobby(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSLeaveLobbyResponse.steam_id_lobby)
}

// optional int32 eresult = 3 [default = 2];
inline bool CMsgClientMMSLeaveLobbyResponse::_internal_has_eresult() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientMMSLeaveLobbyResponse::has_eresult() const {
  return _internal_has_eresult();
}
inline void CMsgClientMMSLeaveLobbyResponse::clear_eresult() {
  eresult_ = 2;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t CMsgClientMMSLeaveLobbyResponse::_internal_eresult() const {
  return eresult_;
}
inline int32_t CMsgClientMMSLeaveLobbyResponse::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSLeaveLobbyResponse.eresult)
  return _internal_eresult();
}
inline void CMsgClientMMSLeaveLobbyResponse::_internal_set_eresult(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  eresult_ = value;
}
inline void CMsgClientMMSLeaveLobbyResponse::set_eresult(int32_t value) {
  _internal_set_eresult(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSLeaveLobbyResponse.eresult)
}

// -------------------------------------------------------------------

// CMsgClientMMSGetLobbyList_Filter

// optional string key = 1;
inline bool CMsgClientMMSGetLobbyList_Filter::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientMMSGetLobbyList_Filter::has_key() const {
  return _internal_has_key();
}
inline void CMsgClientMMSGetLobbyList_Filter::clear_key() {
  key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientMMSGetLobbyList_Filter::key() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSGetLobbyList.Filter.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientMMSGetLobbyList_Filter::set_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientMMSGetLobbyList.Filter.key)
}
inline std::string* CMsgClientMMSGetLobbyList_Filter::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:CMsgClientMMSGetLobbyList.Filter.key)
  return _s;
}
inline const std::string& CMsgClientMMSGetLobbyList_Filter::_internal_key() const {
  return key_.Get();
}
inline void CMsgClientMMSGetLobbyList_Filter::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientMMSGetLobbyList_Filter::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientMMSGetLobbyList_Filter::release_key() {
  // @@protoc_insertion_point(field_release:CMsgClientMMSGetLobbyList.Filter.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientMMSGetLobbyList_Filter::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientMMSGetLobbyList.Filter.key)
}

// optional string value = 2;
inline bool CMsgClientMMSGetLobbyList_Filter::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientMMSGetLobbyList_Filter::has_value() const {
  return _internal_has_value();
}
inline void CMsgClientMMSGetLobbyList_Filter::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgClientMMSGetLobbyList_Filter::value() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSGetLobbyList.Filter.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientMMSGetLobbyList_Filter::set_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientMMSGetLobbyList.Filter.value)
}
inline std::string* CMsgClientMMSGetLobbyList_Filter::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:CMsgClientMMSGetLobbyList.Filter.value)
  return _s;
}
inline const std::string& CMsgClientMMSGetLobbyList_Filter::_internal_value() const {
  return value_.Get();
}
inline void CMsgClientMMSGetLobbyList_Filter::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientMMSGetLobbyList_Filter::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientMMSGetLobbyList_Filter::release_value() {
  // @@protoc_insertion_point(field_release:CMsgClientMMSGetLobbyList.Filter.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientMMSGetLobbyList_Filter::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientMMSGetLobbyList.Filter.value)
}

// optional int32 comparision = 3;
inline bool CMsgClientMMSGetLobbyList_Filter::_internal_has_comparision() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientMMSGetLobbyList_Filter::has_comparision() const {
  return _internal_has_comparision();
}
inline void CMsgClientMMSGetLobbyList_Filter::clear_comparision() {
  comparision_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t CMsgClientMMSGetLobbyList_Filter::_internal_comparision() const {
  return comparision_;
}
inline int32_t CMsgClientMMSGetLobbyList_Filter::comparision() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSGetLobbyList.Filter.comparision)
  return _internal_comparision();
}
inline void CMsgClientMMSGetLobbyList_Filter::_internal_set_comparision(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  comparision_ = value;
}
inline void CMsgClientMMSGetLobbyList_Filter::set_comparision(int32_t value) {
  _internal_set_comparision(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSGetLobbyList.Filter.comparision)
}

// optional int32 filter_type = 4;
inline bool CMsgClientMMSGetLobbyList_Filter::_internal_has_filter_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientMMSGetLobbyList_Filter::has_filter_type() const {
  return _internal_has_filter_type();
}
inline void CMsgClientMMSGetLobbyList_Filter::clear_filter_type() {
  filter_type_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t CMsgClientMMSGetLobbyList_Filter::_internal_filter_type() const {
  return filter_type_;
}
inline int32_t CMsgClientMMSGetLobbyList_Filter::filter_type() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSGetLobbyList.Filter.filter_type)
  return _internal_filter_type();
}
inline void CMsgClientMMSGetLobbyList_Filter::_internal_set_filter_type(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  filter_type_ = value;
}
inline void CMsgClientMMSGetLobbyList_Filter::set_filter_type(int32_t value) {
  _internal_set_filter_type(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSGetLobbyList.Filter.filter_type)
}

// -------------------------------------------------------------------

// CMsgClientMMSGetLobbyList

// optional uint32 app_id = 1;
inline bool CMsgClientMMSGetLobbyList::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientMMSGetLobbyList::has_app_id() const {
  return _internal_has_app_id();
}
inline void CMsgClientMMSGetLobbyList::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgClientMMSGetLobbyList::_internal_app_id() const {
  return app_id_;
}
inline uint32_t CMsgClientMMSGetLobbyList::app_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSGetLobbyList.app_id)
  return _internal_app_id();
}
inline void CMsgClientMMSGetLobbyList::_internal_set_app_id(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  app_id_ = value;
}
inline void CMsgClientMMSGetLobbyList::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSGetLobbyList.app_id)
}

// optional int32 num_lobbies_requested = 3;
inline bool CMsgClientMMSGetLobbyList::_internal_has_num_lobbies_requested() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientMMSGetLobbyList::has_num_lobbies_requested() const {
  return _internal_has_num_lobbies_requested();
}
inline void CMsgClientMMSGetLobbyList::clear_num_lobbies_requested() {
  num_lobbies_requested_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t CMsgClientMMSGetLobbyList::_internal_num_lobbies_requested() const {
  return num_lobbies_requested_;
}
inline int32_t CMsgClientMMSGetLobbyList::num_lobbies_requested() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSGetLobbyList.num_lobbies_requested)
  return _internal_num_lobbies_requested();
}
inline void CMsgClientMMSGetLobbyList::_internal_set_num_lobbies_requested(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  num_lobbies_requested_ = value;
}
inline void CMsgClientMMSGetLobbyList::set_num_lobbies_requested(int32_t value) {
  _internal_set_num_lobbies_requested(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSGetLobbyList.num_lobbies_requested)
}

// optional uint32 cell_id = 4;
inline bool CMsgClientMMSGetLobbyList::_internal_has_cell_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientMMSGetLobbyList::has_cell_id() const {
  return _internal_has_cell_id();
}
inline void CMsgClientMMSGetLobbyList::clear_cell_id() {
  cell_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgClientMMSGetLobbyList::_internal_cell_id() const {
  return cell_id_;
}
inline uint32_t CMsgClientMMSGetLobbyList::cell_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSGetLobbyList.cell_id)
  return _internal_cell_id();
}
inline void CMsgClientMMSGetLobbyList::_internal_set_cell_id(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  cell_id_ = value;
}
inline void CMsgClientMMSGetLobbyList::set_cell_id(uint32_t value) {
  _internal_set_cell_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSGetLobbyList.cell_id)
}

// optional uint32 deprecated_public_ip = 5;
inline bool CMsgClientMMSGetLobbyList::_internal_has_deprecated_public_ip() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgClientMMSGetLobbyList::has_deprecated_public_ip() const {
  return _internal_has_deprecated_public_ip();
}
inline void CMsgClientMMSGetLobbyList::clear_deprecated_public_ip() {
  deprecated_public_ip_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgClientMMSGetLobbyList::_internal_deprecated_public_ip() const {
  return deprecated_public_ip_;
}
inline uint32_t CMsgClientMMSGetLobbyList::deprecated_public_ip() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSGetLobbyList.deprecated_public_ip)
  return _internal_deprecated_public_ip();
}
inline void CMsgClientMMSGetLobbyList::_internal_set_deprecated_public_ip(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  deprecated_public_ip_ = value;
}
inline void CMsgClientMMSGetLobbyList::set_deprecated_public_ip(uint32_t value) {
  _internal_set_deprecated_public_ip(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSGetLobbyList.deprecated_public_ip)
}

// repeated .CMsgClientMMSGetLobbyList.Filter filters = 6;
inline int CMsgClientMMSGetLobbyList::_internal_filters_size() const {
  return filters_.size();
}
inline int CMsgClientMMSGetLobbyList::filters_size() const {
  return _internal_filters_size();
}
inline void CMsgClientMMSGetLobbyList::clear_filters() {
  filters_.Clear();
}
inline ::CMsgClientMMSGetLobbyList_Filter* CMsgClientMMSGetLobbyList::mutable_filters(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgClientMMSGetLobbyList.filters)
  return filters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientMMSGetLobbyList_Filter >*
CMsgClientMMSGetLobbyList::mutable_filters() {
  // @@protoc_insertion_point(field_mutable_list:CMsgClientMMSGetLobbyList.filters)
  return &filters_;
}
inline const ::CMsgClientMMSGetLobbyList_Filter& CMsgClientMMSGetLobbyList::_internal_filters(int index) const {
  return filters_.Get(index);
}
inline const ::CMsgClientMMSGetLobbyList_Filter& CMsgClientMMSGetLobbyList::filters(int index) const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSGetLobbyList.filters)
  return _internal_filters(index);
}
inline ::CMsgClientMMSGetLobbyList_Filter* CMsgClientMMSGetLobbyList::_internal_add_filters() {
  return filters_.Add();
}
inline ::CMsgClientMMSGetLobbyList_Filter* CMsgClientMMSGetLobbyList::add_filters() {
  ::CMsgClientMMSGetLobbyList_Filter* _add = _internal_add_filters();
  // @@protoc_insertion_point(field_add:CMsgClientMMSGetLobbyList.filters)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientMMSGetLobbyList_Filter >&
CMsgClientMMSGetLobbyList::filters() const {
  // @@protoc_insertion_point(field_list:CMsgClientMMSGetLobbyList.filters)
  return filters_;
}

// optional .CMsgIPAddress public_ip = 7;
inline bool CMsgClientMMSGetLobbyList::_internal_has_public_ip() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || public_ip_ != nullptr);
  return value;
}
inline bool CMsgClientMMSGetLobbyList::has_public_ip() const {
  return _internal_has_public_ip();
}
inline const ::CMsgIPAddress& CMsgClientMMSGetLobbyList::_internal_public_ip() const {
  const ::CMsgIPAddress* p = public_ip_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgIPAddress&>(
      ::_CMsgIPAddress_default_instance_);
}
inline const ::CMsgIPAddress& CMsgClientMMSGetLobbyList::public_ip() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSGetLobbyList.public_ip)
  return _internal_public_ip();
}
inline void CMsgClientMMSGetLobbyList::unsafe_arena_set_allocated_public_ip(
    ::CMsgIPAddress* public_ip) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(public_ip_);
  }
  public_ip_ = public_ip;
  if (public_ip) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgClientMMSGetLobbyList.public_ip)
}
inline ::CMsgIPAddress* CMsgClientMMSGetLobbyList::release_public_ip() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgIPAddress* temp = public_ip_;
  public_ip_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgIPAddress* CMsgClientMMSGetLobbyList::unsafe_arena_release_public_ip() {
  // @@protoc_insertion_point(field_release:CMsgClientMMSGetLobbyList.public_ip)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgIPAddress* temp = public_ip_;
  public_ip_ = nullptr;
  return temp;
}
inline ::CMsgIPAddress* CMsgClientMMSGetLobbyList::_internal_mutable_public_ip() {
  _has_bits_[0] |= 0x00000001u;
  if (public_ip_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgIPAddress>(GetArenaForAllocation());
    public_ip_ = p;
  }
  return public_ip_;
}
inline ::CMsgIPAddress* CMsgClientMMSGetLobbyList::mutable_public_ip() {
  ::CMsgIPAddress* _msg = _internal_mutable_public_ip();
  // @@protoc_insertion_point(field_mutable:CMsgClientMMSGetLobbyList.public_ip)
  return _msg;
}
inline void CMsgClientMMSGetLobbyList::set_allocated_public_ip(::CMsgIPAddress* public_ip) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(public_ip_);
  }
  if (public_ip) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(public_ip));
    if (message_arena != submessage_arena) {
      public_ip = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, public_ip, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  public_ip_ = public_ip;
  // @@protoc_insertion_point(field_set_allocated:CMsgClientMMSGetLobbyList.public_ip)
}

// -------------------------------------------------------------------

// CMsgClientMMSGetLobbyListResponse_Lobby

// optional fixed64 steam_id = 1;
inline bool CMsgClientMMSGetLobbyListResponse_Lobby::_internal_has_steam_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientMMSGetLobbyListResponse_Lobby::has_steam_id() const {
  return _internal_has_steam_id();
}
inline void CMsgClientMMSGetLobbyListResponse_Lobby::clear_steam_id() {
  steam_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CMsgClientMMSGetLobbyListResponse_Lobby::_internal_steam_id() const {
  return steam_id_;
}
inline uint64_t CMsgClientMMSGetLobbyListResponse_Lobby::steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSGetLobbyListResponse.Lobby.steam_id)
  return _internal_steam_id();
}
inline void CMsgClientMMSGetLobbyListResponse_Lobby::_internal_set_steam_id(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  steam_id_ = value;
}
inline void CMsgClientMMSGetLobbyListResponse_Lobby::set_steam_id(uint64_t value) {
  _internal_set_steam_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSGetLobbyListResponse.Lobby.steam_id)
}

// optional int32 max_members = 2;
inline bool CMsgClientMMSGetLobbyListResponse_Lobby::_internal_has_max_members() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientMMSGetLobbyListResponse_Lobby::has_max_members() const {
  return _internal_has_max_members();
}
inline void CMsgClientMMSGetLobbyListResponse_Lobby::clear_max_members() {
  max_members_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t CMsgClientMMSGetLobbyListResponse_Lobby::_internal_max_members() const {
  return max_members_;
}
inline int32_t CMsgClientMMSGetLobbyListResponse_Lobby::max_members() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSGetLobbyListResponse.Lobby.max_members)
  return _internal_max_members();
}
inline void CMsgClientMMSGetLobbyListResponse_Lobby::_internal_set_max_members(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  max_members_ = value;
}
inline void CMsgClientMMSGetLobbyListResponse_Lobby::set_max_members(int32_t value) {
  _internal_set_max_members(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSGetLobbyListResponse.Lobby.max_members)
}

// optional int32 lobby_type = 3;
inline bool CMsgClientMMSGetLobbyListResponse_Lobby::_internal_has_lobby_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientMMSGetLobbyListResponse_Lobby::has_lobby_type() const {
  return _internal_has_lobby_type();
}
inline void CMsgClientMMSGetLobbyListResponse_Lobby::clear_lobby_type() {
  lobby_type_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t CMsgClientMMSGetLobbyListResponse_Lobby::_internal_lobby_type() const {
  return lobby_type_;
}
inline int32_t CMsgClientMMSGetLobbyListResponse_Lobby::lobby_type() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSGetLobbyListResponse.Lobby.lobby_type)
  return _internal_lobby_type();
}
inline void CMsgClientMMSGetLobbyListResponse_Lobby::_internal_set_lobby_type(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  lobby_type_ = value;
}
inline void CMsgClientMMSGetLobbyListResponse_Lobby::set_lobby_type(int32_t value) {
  _internal_set_lobby_type(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSGetLobbyListResponse.Lobby.lobby_type)
}

// optional int32 lobby_flags = 4;
inline bool CMsgClientMMSGetLobbyListResponse_Lobby::_internal_has_lobby_flags() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgClientMMSGetLobbyListResponse_Lobby::has_lobby_flags() const {
  return _internal_has_lobby_flags();
}
inline void CMsgClientMMSGetLobbyListResponse_Lobby::clear_lobby_flags() {
  lobby_flags_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline int32_t CMsgClientMMSGetLobbyListResponse_Lobby::_internal_lobby_flags() const {
  return lobby_flags_;
}
inline int32_t CMsgClientMMSGetLobbyListResponse_Lobby::lobby_flags() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSGetLobbyListResponse.Lobby.lobby_flags)
  return _internal_lobby_flags();
}
inline void CMsgClientMMSGetLobbyListResponse_Lobby::_internal_set_lobby_flags(int32_t value) {
  _has_bits_[0] |= 0x00000010u;
  lobby_flags_ = value;
}
inline void CMsgClientMMSGetLobbyListResponse_Lobby::set_lobby_flags(int32_t value) {
  _internal_set_lobby_flags(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSGetLobbyListResponse.Lobby.lobby_flags)
}

// optional bytes metadata = 5;
inline bool CMsgClientMMSGetLobbyListResponse_Lobby::_internal_has_metadata() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientMMSGetLobbyListResponse_Lobby::has_metadata() const {
  return _internal_has_metadata();
}
inline void CMsgClientMMSGetLobbyListResponse_Lobby::clear_metadata() {
  metadata_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientMMSGetLobbyListResponse_Lobby::metadata() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSGetLobbyListResponse.Lobby.metadata)
  return _internal_metadata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientMMSGetLobbyListResponse_Lobby::set_metadata(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 metadata_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientMMSGetLobbyListResponse.Lobby.metadata)
}
inline std::string* CMsgClientMMSGetLobbyListResponse_Lobby::mutable_metadata() {
  std::string* _s = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:CMsgClientMMSGetLobbyListResponse.Lobby.metadata)
  return _s;
}
inline const std::string& CMsgClientMMSGetLobbyListResponse_Lobby::_internal_metadata() const {
  return metadata_.Get();
}
inline void CMsgClientMMSGetLobbyListResponse_Lobby::_internal_set_metadata(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientMMSGetLobbyListResponse_Lobby::_internal_mutable_metadata() {
  _has_bits_[0] |= 0x00000001u;
  return metadata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientMMSGetLobbyListResponse_Lobby::release_metadata() {
  // @@protoc_insertion_point(field_release:CMsgClientMMSGetLobbyListResponse.Lobby.metadata)
  if (!_internal_has_metadata()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = metadata_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (metadata_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientMMSGetLobbyListResponse_Lobby::set_allocated_metadata(std::string* metadata) {
  if (metadata != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  metadata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metadata,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (metadata_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientMMSGetLobbyListResponse.Lobby.metadata)
}

// optional int32 num_members = 6;
inline bool CMsgClientMMSGetLobbyListResponse_Lobby::_internal_has_num_members() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgClientMMSGetLobbyListResponse_Lobby::has_num_members() const {
  return _internal_has_num_members();
}
inline void CMsgClientMMSGetLobbyListResponse_Lobby::clear_num_members() {
  num_members_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline int32_t CMsgClientMMSGetLobbyListResponse_Lobby::_internal_num_members() const {
  return num_members_;
}
inline int32_t CMsgClientMMSGetLobbyListResponse_Lobby::num_members() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSGetLobbyListResponse.Lobby.num_members)
  return _internal_num_members();
}
inline void CMsgClientMMSGetLobbyListResponse_Lobby::_internal_set_num_members(int32_t value) {
  _has_bits_[0] |= 0x00000020u;
  num_members_ = value;
}
inline void CMsgClientMMSGetLobbyListResponse_Lobby::set_num_members(int32_t value) {
  _internal_set_num_members(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSGetLobbyListResponse.Lobby.num_members)
}

// optional float distance = 7;
inline bool CMsgClientMMSGetLobbyListResponse_Lobby::_internal_has_distance() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgClientMMSGetLobbyListResponse_Lobby::has_distance() const {
  return _internal_has_distance();
}
inline void CMsgClientMMSGetLobbyListResponse_Lobby::clear_distance() {
  distance_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float CMsgClientMMSGetLobbyListResponse_Lobby::_internal_distance() const {
  return distance_;
}
inline float CMsgClientMMSGetLobbyListResponse_Lobby::distance() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSGetLobbyListResponse.Lobby.distance)
  return _internal_distance();
}
inline void CMsgClientMMSGetLobbyListResponse_Lobby::_internal_set_distance(float value) {
  _has_bits_[0] |= 0x00000080u;
  distance_ = value;
}
inline void CMsgClientMMSGetLobbyListResponse_Lobby::set_distance(float value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSGetLobbyListResponse.Lobby.distance)
}

// optional int64 weight = 8;
inline bool CMsgClientMMSGetLobbyListResponse_Lobby::_internal_has_weight() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgClientMMSGetLobbyListResponse_Lobby::has_weight() const {
  return _internal_has_weight();
}
inline void CMsgClientMMSGetLobbyListResponse_Lobby::clear_weight() {
  weight_ = int64_t{0};
  _has_bits_[0] &= ~0x00000040u;
}
inline int64_t CMsgClientMMSGetLobbyListResponse_Lobby::_internal_weight() const {
  return weight_;
}
inline int64_t CMsgClientMMSGetLobbyListResponse_Lobby::weight() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSGetLobbyListResponse.Lobby.weight)
  return _internal_weight();
}
inline void CMsgClientMMSGetLobbyListResponse_Lobby::_internal_set_weight(int64_t value) {
  _has_bits_[0] |= 0x00000040u;
  weight_ = value;
}
inline void CMsgClientMMSGetLobbyListResponse_Lobby::set_weight(int64_t value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSGetLobbyListResponse.Lobby.weight)
}

// -------------------------------------------------------------------

// CMsgClientMMSGetLobbyListResponse

// optional uint32 app_id = 1;
inline bool CMsgClientMMSGetLobbyListResponse::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientMMSGetLobbyListResponse::has_app_id() const {
  return _internal_has_app_id();
}
inline void CMsgClientMMSGetLobbyListResponse::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgClientMMSGetLobbyListResponse::_internal_app_id() const {
  return app_id_;
}
inline uint32_t CMsgClientMMSGetLobbyListResponse::app_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSGetLobbyListResponse.app_id)
  return _internal_app_id();
}
inline void CMsgClientMMSGetLobbyListResponse::_internal_set_app_id(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  app_id_ = value;
}
inline void CMsgClientMMSGetLobbyListResponse::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSGetLobbyListResponse.app_id)
}

// optional int32 eresult = 3 [default = 2];
inline bool CMsgClientMMSGetLobbyListResponse::_internal_has_eresult() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientMMSGetLobbyListResponse::has_eresult() const {
  return _internal_has_eresult();
}
inline void CMsgClientMMSGetLobbyListResponse::clear_eresult() {
  eresult_ = 2;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t CMsgClientMMSGetLobbyListResponse::_internal_eresult() const {
  return eresult_;
}
inline int32_t CMsgClientMMSGetLobbyListResponse::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSGetLobbyListResponse.eresult)
  return _internal_eresult();
}
inline void CMsgClientMMSGetLobbyListResponse::_internal_set_eresult(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  eresult_ = value;
}
inline void CMsgClientMMSGetLobbyListResponse::set_eresult(int32_t value) {
  _internal_set_eresult(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSGetLobbyListResponse.eresult)
}

// repeated .CMsgClientMMSGetLobbyListResponse.Lobby lobbies = 4;
inline int CMsgClientMMSGetLobbyListResponse::_internal_lobbies_size() const {
  return lobbies_.size();
}
inline int CMsgClientMMSGetLobbyListResponse::lobbies_size() const {
  return _internal_lobbies_size();
}
inline void CMsgClientMMSGetLobbyListResponse::clear_lobbies() {
  lobbies_.Clear();
}
inline ::CMsgClientMMSGetLobbyListResponse_Lobby* CMsgClientMMSGetLobbyListResponse::mutable_lobbies(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgClientMMSGetLobbyListResponse.lobbies)
  return lobbies_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientMMSGetLobbyListResponse_Lobby >*
CMsgClientMMSGetLobbyListResponse::mutable_lobbies() {
  // @@protoc_insertion_point(field_mutable_list:CMsgClientMMSGetLobbyListResponse.lobbies)
  return &lobbies_;
}
inline const ::CMsgClientMMSGetLobbyListResponse_Lobby& CMsgClientMMSGetLobbyListResponse::_internal_lobbies(int index) const {
  return lobbies_.Get(index);
}
inline const ::CMsgClientMMSGetLobbyListResponse_Lobby& CMsgClientMMSGetLobbyListResponse::lobbies(int index) const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSGetLobbyListResponse.lobbies)
  return _internal_lobbies(index);
}
inline ::CMsgClientMMSGetLobbyListResponse_Lobby* CMsgClientMMSGetLobbyListResponse::_internal_add_lobbies() {
  return lobbies_.Add();
}
inline ::CMsgClientMMSGetLobbyListResponse_Lobby* CMsgClientMMSGetLobbyListResponse::add_lobbies() {
  ::CMsgClientMMSGetLobbyListResponse_Lobby* _add = _internal_add_lobbies();
  // @@protoc_insertion_point(field_add:CMsgClientMMSGetLobbyListResponse.lobbies)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientMMSGetLobbyListResponse_Lobby >&
CMsgClientMMSGetLobbyListResponse::lobbies() const {
  // @@protoc_insertion_point(field_list:CMsgClientMMSGetLobbyListResponse.lobbies)
  return lobbies_;
}

// -------------------------------------------------------------------

// CMsgClientMMSSetLobbyData

// optional uint32 app_id = 1;
inline bool CMsgClientMMSSetLobbyData::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientMMSSetLobbyData::has_app_id() const {
  return _internal_has_app_id();
}
inline void CMsgClientMMSSetLobbyData::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgClientMMSSetLobbyData::_internal_app_id() const {
  return app_id_;
}
inline uint32_t CMsgClientMMSSetLobbyData::app_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSSetLobbyData.app_id)
  return _internal_app_id();
}
inline void CMsgClientMMSSetLobbyData::_internal_set_app_id(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  app_id_ = value;
}
inline void CMsgClientMMSSetLobbyData::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSSetLobbyData.app_id)
}

// optional fixed64 steam_id_lobby = 2;
inline bool CMsgClientMMSSetLobbyData::_internal_has_steam_id_lobby() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientMMSSetLobbyData::has_steam_id_lobby() const {
  return _internal_has_steam_id_lobby();
}
inline void CMsgClientMMSSetLobbyData::clear_steam_id_lobby() {
  steam_id_lobby_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CMsgClientMMSSetLobbyData::_internal_steam_id_lobby() const {
  return steam_id_lobby_;
}
inline uint64_t CMsgClientMMSSetLobbyData::steam_id_lobby() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSSetLobbyData.steam_id_lobby)
  return _internal_steam_id_lobby();
}
inline void CMsgClientMMSSetLobbyData::_internal_set_steam_id_lobby(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  steam_id_lobby_ = value;
}
inline void CMsgClientMMSSetLobbyData::set_steam_id_lobby(uint64_t value) {
  _internal_set_steam_id_lobby(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSSetLobbyData.steam_id_lobby)
}

// optional fixed64 steam_id_member = 3;
inline bool CMsgClientMMSSetLobbyData::_internal_has_steam_id_member() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgClientMMSSetLobbyData::has_steam_id_member() const {
  return _internal_has_steam_id_member();
}
inline void CMsgClientMMSSetLobbyData::clear_steam_id_member() {
  steam_id_member_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000010u;
}
inline uint64_t CMsgClientMMSSetLobbyData::_internal_steam_id_member() const {
  return steam_id_member_;
}
inline uint64_t CMsgClientMMSSetLobbyData::steam_id_member() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSSetLobbyData.steam_id_member)
  return _internal_steam_id_member();
}
inline void CMsgClientMMSSetLobbyData::_internal_set_steam_id_member(uint64_t value) {
  _has_bits_[0] |= 0x00000010u;
  steam_id_member_ = value;
}
inline void CMsgClientMMSSetLobbyData::set_steam_id_member(uint64_t value) {
  _internal_set_steam_id_member(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSSetLobbyData.steam_id_member)
}

// optional int32 max_members = 4;
inline bool CMsgClientMMSSetLobbyData::_internal_has_max_members() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientMMSSetLobbyData::has_max_members() const {
  return _internal_has_max_members();
}
inline void CMsgClientMMSSetLobbyData::clear_max_members() {
  max_members_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t CMsgClientMMSSetLobbyData::_internal_max_members() const {
  return max_members_;
}
inline int32_t CMsgClientMMSSetLobbyData::max_members() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSSetLobbyData.max_members)
  return _internal_max_members();
}
inline void CMsgClientMMSSetLobbyData::_internal_set_max_members(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  max_members_ = value;
}
inline void CMsgClientMMSSetLobbyData::set_max_members(int32_t value) {
  _internal_set_max_members(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSSetLobbyData.max_members)
}

// optional int32 lobby_type = 5;
inline bool CMsgClientMMSSetLobbyData::_internal_has_lobby_type() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgClientMMSSetLobbyData::has_lobby_type() const {
  return _internal_has_lobby_type();
}
inline void CMsgClientMMSSetLobbyData::clear_lobby_type() {
  lobby_type_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline int32_t CMsgClientMMSSetLobbyData::_internal_lobby_type() const {
  return lobby_type_;
}
inline int32_t CMsgClientMMSSetLobbyData::lobby_type() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSSetLobbyData.lobby_type)
  return _internal_lobby_type();
}
inline void CMsgClientMMSSetLobbyData::_internal_set_lobby_type(int32_t value) {
  _has_bits_[0] |= 0x00000020u;
  lobby_type_ = value;
}
inline void CMsgClientMMSSetLobbyData::set_lobby_type(int32_t value) {
  _internal_set_lobby_type(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSSetLobbyData.lobby_type)
}

// optional int32 lobby_flags = 6;
inline bool CMsgClientMMSSetLobbyData::_internal_has_lobby_flags() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgClientMMSSetLobbyData::has_lobby_flags() const {
  return _internal_has_lobby_flags();
}
inline void CMsgClientMMSSetLobbyData::clear_lobby_flags() {
  lobby_flags_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline int32_t CMsgClientMMSSetLobbyData::_internal_lobby_flags() const {
  return lobby_flags_;
}
inline int32_t CMsgClientMMSSetLobbyData::lobby_flags() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSSetLobbyData.lobby_flags)
  return _internal_lobby_flags();
}
inline void CMsgClientMMSSetLobbyData::_internal_set_lobby_flags(int32_t value) {
  _has_bits_[0] |= 0x00000040u;
  lobby_flags_ = value;
}
inline void CMsgClientMMSSetLobbyData::set_lobby_flags(int32_t value) {
  _internal_set_lobby_flags(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSSetLobbyData.lobby_flags)
}

// optional bytes metadata = 7;
inline bool CMsgClientMMSSetLobbyData::_internal_has_metadata() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientMMSSetLobbyData::has_metadata() const {
  return _internal_has_metadata();
}
inline void CMsgClientMMSSetLobbyData::clear_metadata() {
  metadata_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientMMSSetLobbyData::metadata() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSSetLobbyData.metadata)
  return _internal_metadata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientMMSSetLobbyData::set_metadata(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 metadata_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientMMSSetLobbyData.metadata)
}
inline std::string* CMsgClientMMSSetLobbyData::mutable_metadata() {
  std::string* _s = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:CMsgClientMMSSetLobbyData.metadata)
  return _s;
}
inline const std::string& CMsgClientMMSSetLobbyData::_internal_metadata() const {
  return metadata_.Get();
}
inline void CMsgClientMMSSetLobbyData::_internal_set_metadata(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientMMSSetLobbyData::_internal_mutable_metadata() {
  _has_bits_[0] |= 0x00000001u;
  return metadata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientMMSSetLobbyData::release_metadata() {
  // @@protoc_insertion_point(field_release:CMsgClientMMSSetLobbyData.metadata)
  if (!_internal_has_metadata()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = metadata_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (metadata_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientMMSSetLobbyData::set_allocated_metadata(std::string* metadata) {
  if (metadata != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  metadata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metadata,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (metadata_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientMMSSetLobbyData.metadata)
}

// -------------------------------------------------------------------

// CMsgClientMMSSetLobbyDataResponse

// optional uint32 app_id = 1;
inline bool CMsgClientMMSSetLobbyDataResponse::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientMMSSetLobbyDataResponse::has_app_id() const {
  return _internal_has_app_id();
}
inline void CMsgClientMMSSetLobbyDataResponse::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgClientMMSSetLobbyDataResponse::_internal_app_id() const {
  return app_id_;
}
inline uint32_t CMsgClientMMSSetLobbyDataResponse::app_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSSetLobbyDataResponse.app_id)
  return _internal_app_id();
}
inline void CMsgClientMMSSetLobbyDataResponse::_internal_set_app_id(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  app_id_ = value;
}
inline void CMsgClientMMSSetLobbyDataResponse::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSSetLobbyDataResponse.app_id)
}

// optional fixed64 steam_id_lobby = 2;
inline bool CMsgClientMMSSetLobbyDataResponse::_internal_has_steam_id_lobby() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientMMSSetLobbyDataResponse::has_steam_id_lobby() const {
  return _internal_has_steam_id_lobby();
}
inline void CMsgClientMMSSetLobbyDataResponse::clear_steam_id_lobby() {
  steam_id_lobby_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgClientMMSSetLobbyDataResponse::_internal_steam_id_lobby() const {
  return steam_id_lobby_;
}
inline uint64_t CMsgClientMMSSetLobbyDataResponse::steam_id_lobby() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSSetLobbyDataResponse.steam_id_lobby)
  return _internal_steam_id_lobby();
}
inline void CMsgClientMMSSetLobbyDataResponse::_internal_set_steam_id_lobby(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steam_id_lobby_ = value;
}
inline void CMsgClientMMSSetLobbyDataResponse::set_steam_id_lobby(uint64_t value) {
  _internal_set_steam_id_lobby(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSSetLobbyDataResponse.steam_id_lobby)
}

// optional int32 eresult = 3 [default = 2];
inline bool CMsgClientMMSSetLobbyDataResponse::_internal_has_eresult() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientMMSSetLobbyDataResponse::has_eresult() const {
  return _internal_has_eresult();
}
inline void CMsgClientMMSSetLobbyDataResponse::clear_eresult() {
  eresult_ = 2;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t CMsgClientMMSSetLobbyDataResponse::_internal_eresult() const {
  return eresult_;
}
inline int32_t CMsgClientMMSSetLobbyDataResponse::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSSetLobbyDataResponse.eresult)
  return _internal_eresult();
}
inline void CMsgClientMMSSetLobbyDataResponse::_internal_set_eresult(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  eresult_ = value;
}
inline void CMsgClientMMSSetLobbyDataResponse::set_eresult(int32_t value) {
  _internal_set_eresult(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSSetLobbyDataResponse.eresult)
}

// -------------------------------------------------------------------

// CMsgClientMMSGetLobbyData

// optional uint32 app_id = 1;
inline bool CMsgClientMMSGetLobbyData::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientMMSGetLobbyData::has_app_id() const {
  return _internal_has_app_id();
}
inline void CMsgClientMMSGetLobbyData::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgClientMMSGetLobbyData::_internal_app_id() const {
  return app_id_;
}
inline uint32_t CMsgClientMMSGetLobbyData::app_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSGetLobbyData.app_id)
  return _internal_app_id();
}
inline void CMsgClientMMSGetLobbyData::_internal_set_app_id(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  app_id_ = value;
}
inline void CMsgClientMMSGetLobbyData::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSGetLobbyData.app_id)
}

// optional fixed64 steam_id_lobby = 2;
inline bool CMsgClientMMSGetLobbyData::_internal_has_steam_id_lobby() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientMMSGetLobbyData::has_steam_id_lobby() const {
  return _internal_has_steam_id_lobby();
}
inline void CMsgClientMMSGetLobbyData::clear_steam_id_lobby() {
  steam_id_lobby_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgClientMMSGetLobbyData::_internal_steam_id_lobby() const {
  return steam_id_lobby_;
}
inline uint64_t CMsgClientMMSGetLobbyData::steam_id_lobby() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSGetLobbyData.steam_id_lobby)
  return _internal_steam_id_lobby();
}
inline void CMsgClientMMSGetLobbyData::_internal_set_steam_id_lobby(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steam_id_lobby_ = value;
}
inline void CMsgClientMMSGetLobbyData::set_steam_id_lobby(uint64_t value) {
  _internal_set_steam_id_lobby(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSGetLobbyData.steam_id_lobby)
}

// -------------------------------------------------------------------

// CMsgClientMMSLobbyData_Member

// optional fixed64 steam_id = 1;
inline bool CMsgClientMMSLobbyData_Member::_internal_has_steam_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientMMSLobbyData_Member::has_steam_id() const {
  return _internal_has_steam_id();
}
inline void CMsgClientMMSLobbyData_Member::clear_steam_id() {
  steam_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CMsgClientMMSLobbyData_Member::_internal_steam_id() const {
  return steam_id_;
}
inline uint64_t CMsgClientMMSLobbyData_Member::steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSLobbyData.Member.steam_id)
  return _internal_steam_id();
}
inline void CMsgClientMMSLobbyData_Member::_internal_set_steam_id(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  steam_id_ = value;
}
inline void CMsgClientMMSLobbyData_Member::set_steam_id(uint64_t value) {
  _internal_set_steam_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSLobbyData.Member.steam_id)
}

// optional string persona_name = 2;
inline bool CMsgClientMMSLobbyData_Member::_internal_has_persona_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientMMSLobbyData_Member::has_persona_name() const {
  return _internal_has_persona_name();
}
inline void CMsgClientMMSLobbyData_Member::clear_persona_name() {
  persona_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientMMSLobbyData_Member::persona_name() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSLobbyData.Member.persona_name)
  return _internal_persona_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientMMSLobbyData_Member::set_persona_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 persona_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientMMSLobbyData.Member.persona_name)
}
inline std::string* CMsgClientMMSLobbyData_Member::mutable_persona_name() {
  std::string* _s = _internal_mutable_persona_name();
  // @@protoc_insertion_point(field_mutable:CMsgClientMMSLobbyData.Member.persona_name)
  return _s;
}
inline const std::string& CMsgClientMMSLobbyData_Member::_internal_persona_name() const {
  return persona_name_.Get();
}
inline void CMsgClientMMSLobbyData_Member::_internal_set_persona_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  persona_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientMMSLobbyData_Member::_internal_mutable_persona_name() {
  _has_bits_[0] |= 0x00000001u;
  return persona_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientMMSLobbyData_Member::release_persona_name() {
  // @@protoc_insertion_point(field_release:CMsgClientMMSLobbyData.Member.persona_name)
  if (!_internal_has_persona_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = persona_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (persona_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    persona_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientMMSLobbyData_Member::set_allocated_persona_name(std::string* persona_name) {
  if (persona_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  persona_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), persona_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (persona_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    persona_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientMMSLobbyData.Member.persona_name)
}

// optional bytes metadata = 3;
inline bool CMsgClientMMSLobbyData_Member::_internal_has_metadata() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientMMSLobbyData_Member::has_metadata() const {
  return _internal_has_metadata();
}
inline void CMsgClientMMSLobbyData_Member::clear_metadata() {
  metadata_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgClientMMSLobbyData_Member::metadata() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSLobbyData.Member.metadata)
  return _internal_metadata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientMMSLobbyData_Member::set_metadata(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 metadata_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientMMSLobbyData.Member.metadata)
}
inline std::string* CMsgClientMMSLobbyData_Member::mutable_metadata() {
  std::string* _s = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:CMsgClientMMSLobbyData.Member.metadata)
  return _s;
}
inline const std::string& CMsgClientMMSLobbyData_Member::_internal_metadata() const {
  return metadata_.Get();
}
inline void CMsgClientMMSLobbyData_Member::_internal_set_metadata(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientMMSLobbyData_Member::_internal_mutable_metadata() {
  _has_bits_[0] |= 0x00000002u;
  return metadata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientMMSLobbyData_Member::release_metadata() {
  // @@protoc_insertion_point(field_release:CMsgClientMMSLobbyData.Member.metadata)
  if (!_internal_has_metadata()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = metadata_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (metadata_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientMMSLobbyData_Member::set_allocated_metadata(std::string* metadata) {
  if (metadata != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  metadata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metadata,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (metadata_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientMMSLobbyData.Member.metadata)
}

// -------------------------------------------------------------------

// CMsgClientMMSLobbyData

// optional uint32 app_id = 1;
inline bool CMsgClientMMSLobbyData::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientMMSLobbyData::has_app_id() const {
  return _internal_has_app_id();
}
inline void CMsgClientMMSLobbyData::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgClientMMSLobbyData::_internal_app_id() const {
  return app_id_;
}
inline uint32_t CMsgClientMMSLobbyData::app_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSLobbyData.app_id)
  return _internal_app_id();
}
inline void CMsgClientMMSLobbyData::_internal_set_app_id(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  app_id_ = value;
}
inline void CMsgClientMMSLobbyData::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSLobbyData.app_id)
}

// optional fixed64 steam_id_lobby = 2;
inline bool CMsgClientMMSLobbyData::_internal_has_steam_id_lobby() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientMMSLobbyData::has_steam_id_lobby() const {
  return _internal_has_steam_id_lobby();
}
inline void CMsgClientMMSLobbyData::clear_steam_id_lobby() {
  steam_id_lobby_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CMsgClientMMSLobbyData::_internal_steam_id_lobby() const {
  return steam_id_lobby_;
}
inline uint64_t CMsgClientMMSLobbyData::steam_id_lobby() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSLobbyData.steam_id_lobby)
  return _internal_steam_id_lobby();
}
inline void CMsgClientMMSLobbyData::_internal_set_steam_id_lobby(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  steam_id_lobby_ = value;
}
inline void CMsgClientMMSLobbyData::set_steam_id_lobby(uint64_t value) {
  _internal_set_steam_id_lobby(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSLobbyData.steam_id_lobby)
}

// optional int32 num_members = 3;
inline bool CMsgClientMMSLobbyData::_internal_has_num_members() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientMMSLobbyData::has_num_members() const {
  return _internal_has_num_members();
}
inline void CMsgClientMMSLobbyData::clear_num_members() {
  num_members_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t CMsgClientMMSLobbyData::_internal_num_members() const {
  return num_members_;
}
inline int32_t CMsgClientMMSLobbyData::num_members() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSLobbyData.num_members)
  return _internal_num_members();
}
inline void CMsgClientMMSLobbyData::_internal_set_num_members(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  num_members_ = value;
}
inline void CMsgClientMMSLobbyData::set_num_members(int32_t value) {
  _internal_set_num_members(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSLobbyData.num_members)
}

// optional int32 max_members = 4;
inline bool CMsgClientMMSLobbyData::_internal_has_max_members() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgClientMMSLobbyData::has_max_members() const {
  return _internal_has_max_members();
}
inline void CMsgClientMMSLobbyData::clear_max_members() {
  max_members_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline int32_t CMsgClientMMSLobbyData::_internal_max_members() const {
  return max_members_;
}
inline int32_t CMsgClientMMSLobbyData::max_members() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSLobbyData.max_members)
  return _internal_max_members();
}
inline void CMsgClientMMSLobbyData::_internal_set_max_members(int32_t value) {
  _has_bits_[0] |= 0x00000010u;
  max_members_ = value;
}
inline void CMsgClientMMSLobbyData::set_max_members(int32_t value) {
  _internal_set_max_members(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSLobbyData.max_members)
}

// optional int32 lobby_type = 5;
inline bool CMsgClientMMSLobbyData::_internal_has_lobby_type() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgClientMMSLobbyData::has_lobby_type() const {
  return _internal_has_lobby_type();
}
inline void CMsgClientMMSLobbyData::clear_lobby_type() {
  lobby_type_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline int32_t CMsgClientMMSLobbyData::_internal_lobby_type() const {
  return lobby_type_;
}
inline int32_t CMsgClientMMSLobbyData::lobby_type() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSLobbyData.lobby_type)
  return _internal_lobby_type();
}
inline void CMsgClientMMSLobbyData::_internal_set_lobby_type(int32_t value) {
  _has_bits_[0] |= 0x00000020u;
  lobby_type_ = value;
}
inline void CMsgClientMMSLobbyData::set_lobby_type(int32_t value) {
  _internal_set_lobby_type(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSLobbyData.lobby_type)
}

// optional int32 lobby_flags = 6;
inline bool CMsgClientMMSLobbyData::_internal_has_lobby_flags() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgClientMMSLobbyData::has_lobby_flags() const {
  return _internal_has_lobby_flags();
}
inline void CMsgClientMMSLobbyData::clear_lobby_flags() {
  lobby_flags_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline int32_t CMsgClientMMSLobbyData::_internal_lobby_flags() const {
  return lobby_flags_;
}
inline int32_t CMsgClientMMSLobbyData::lobby_flags() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSLobbyData.lobby_flags)
  return _internal_lobby_flags();
}
inline void CMsgClientMMSLobbyData::_internal_set_lobby_flags(int32_t value) {
  _has_bits_[0] |= 0x00000080u;
  lobby_flags_ = value;
}
inline void CMsgClientMMSLobbyData::set_lobby_flags(int32_t value) {
  _internal_set_lobby_flags(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSLobbyData.lobby_flags)
}

// optional fixed64 steam_id_owner = 7;
inline bool CMsgClientMMSLobbyData::_internal_has_steam_id_owner() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgClientMMSLobbyData::has_steam_id_owner() const {
  return _internal_has_steam_id_owner();
}
inline void CMsgClientMMSLobbyData::clear_steam_id_owner() {
  steam_id_owner_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000040u;
}
inline uint64_t CMsgClientMMSLobbyData::_internal_steam_id_owner() const {
  return steam_id_owner_;
}
inline uint64_t CMsgClientMMSLobbyData::steam_id_owner() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSLobbyData.steam_id_owner)
  return _internal_steam_id_owner();
}
inline void CMsgClientMMSLobbyData::_internal_set_steam_id_owner(uint64_t value) {
  _has_bits_[0] |= 0x00000040u;
  steam_id_owner_ = value;
}
inline void CMsgClientMMSLobbyData::set_steam_id_owner(uint64_t value) {
  _internal_set_steam_id_owner(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSLobbyData.steam_id_owner)
}

// optional bytes metadata = 8;
inline bool CMsgClientMMSLobbyData::_internal_has_metadata() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientMMSLobbyData::has_metadata() const {
  return _internal_has_metadata();
}
inline void CMsgClientMMSLobbyData::clear_metadata() {
  metadata_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientMMSLobbyData::metadata() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSLobbyData.metadata)
  return _internal_metadata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientMMSLobbyData::set_metadata(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 metadata_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientMMSLobbyData.metadata)
}
inline std::string* CMsgClientMMSLobbyData::mutable_metadata() {
  std::string* _s = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:CMsgClientMMSLobbyData.metadata)
  return _s;
}
inline const std::string& CMsgClientMMSLobbyData::_internal_metadata() const {
  return metadata_.Get();
}
inline void CMsgClientMMSLobbyData::_internal_set_metadata(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientMMSLobbyData::_internal_mutable_metadata() {
  _has_bits_[0] |= 0x00000001u;
  return metadata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientMMSLobbyData::release_metadata() {
  // @@protoc_insertion_point(field_release:CMsgClientMMSLobbyData.metadata)
  if (!_internal_has_metadata()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = metadata_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (metadata_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientMMSLobbyData::set_allocated_metadata(std::string* metadata) {
  if (metadata != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  metadata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metadata,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (metadata_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientMMSLobbyData.metadata)
}

// repeated .CMsgClientMMSLobbyData.Member members = 9;
inline int CMsgClientMMSLobbyData::_internal_members_size() const {
  return members_.size();
}
inline int CMsgClientMMSLobbyData::members_size() const {
  return _internal_members_size();
}
inline void CMsgClientMMSLobbyData::clear_members() {
  members_.Clear();
}
inline ::CMsgClientMMSLobbyData_Member* CMsgClientMMSLobbyData::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgClientMMSLobbyData.members)
  return members_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientMMSLobbyData_Member >*
CMsgClientMMSLobbyData::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:CMsgClientMMSLobbyData.members)
  return &members_;
}
inline const ::CMsgClientMMSLobbyData_Member& CMsgClientMMSLobbyData::_internal_members(int index) const {
  return members_.Get(index);
}
inline const ::CMsgClientMMSLobbyData_Member& CMsgClientMMSLobbyData::members(int index) const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSLobbyData.members)
  return _internal_members(index);
}
inline ::CMsgClientMMSLobbyData_Member* CMsgClientMMSLobbyData::_internal_add_members() {
  return members_.Add();
}
inline ::CMsgClientMMSLobbyData_Member* CMsgClientMMSLobbyData::add_members() {
  ::CMsgClientMMSLobbyData_Member* _add = _internal_add_members();
  // @@protoc_insertion_point(field_add:CMsgClientMMSLobbyData.members)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientMMSLobbyData_Member >&
CMsgClientMMSLobbyData::members() const {
  // @@protoc_insertion_point(field_list:CMsgClientMMSLobbyData.members)
  return members_;
}

// optional uint32 lobby_cellid = 10;
inline bool CMsgClientMMSLobbyData::_internal_has_lobby_cellid() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgClientMMSLobbyData::has_lobby_cellid() const {
  return _internal_has_lobby_cellid();
}
inline void CMsgClientMMSLobbyData::clear_lobby_cellid() {
  lobby_cellid_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CMsgClientMMSLobbyData::_internal_lobby_cellid() const {
  return lobby_cellid_;
}
inline uint32_t CMsgClientMMSLobbyData::lobby_cellid() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSLobbyData.lobby_cellid)
  return _internal_lobby_cellid();
}
inline void CMsgClientMMSLobbyData::_internal_set_lobby_cellid(uint32_t value) {
  _has_bits_[0] |= 0x00000100u;
  lobby_cellid_ = value;
}
inline void CMsgClientMMSLobbyData::set_lobby_cellid(uint32_t value) {
  _internal_set_lobby_cellid(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSLobbyData.lobby_cellid)
}

// optional bool owner_should_accept_changes = 11;
inline bool CMsgClientMMSLobbyData::_internal_has_owner_should_accept_changes() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgClientMMSLobbyData::has_owner_should_accept_changes() const {
  return _internal_has_owner_should_accept_changes();
}
inline void CMsgClientMMSLobbyData::clear_owner_should_accept_changes() {
  owner_should_accept_changes_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool CMsgClientMMSLobbyData::_internal_owner_should_accept_changes() const {
  return owner_should_accept_changes_;
}
inline bool CMsgClientMMSLobbyData::owner_should_accept_changes() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSLobbyData.owner_should_accept_changes)
  return _internal_owner_should_accept_changes();
}
inline void CMsgClientMMSLobbyData::_internal_set_owner_should_accept_changes(bool value) {
  _has_bits_[0] |= 0x00000200u;
  owner_should_accept_changes_ = value;
}
inline void CMsgClientMMSLobbyData::set_owner_should_accept_changes(bool value) {
  _internal_set_owner_should_accept_changes(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSLobbyData.owner_should_accept_changes)
}

// -------------------------------------------------------------------

// CMsgClientMMSSendLobbyChatMsg

// optional uint32 app_id = 1;
inline bool CMsgClientMMSSendLobbyChatMsg::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientMMSSendLobbyChatMsg::has_app_id() const {
  return _internal_has_app_id();
}
inline void CMsgClientMMSSendLobbyChatMsg::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgClientMMSSendLobbyChatMsg::_internal_app_id() const {
  return app_id_;
}
inline uint32_t CMsgClientMMSSendLobbyChatMsg::app_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSSendLobbyChatMsg.app_id)
  return _internal_app_id();
}
inline void CMsgClientMMSSendLobbyChatMsg::_internal_set_app_id(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  app_id_ = value;
}
inline void CMsgClientMMSSendLobbyChatMsg::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSSendLobbyChatMsg.app_id)
}

// optional fixed64 steam_id_lobby = 2;
inline bool CMsgClientMMSSendLobbyChatMsg::_internal_has_steam_id_lobby() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientMMSSendLobbyChatMsg::has_steam_id_lobby() const {
  return _internal_has_steam_id_lobby();
}
inline void CMsgClientMMSSendLobbyChatMsg::clear_steam_id_lobby() {
  steam_id_lobby_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CMsgClientMMSSendLobbyChatMsg::_internal_steam_id_lobby() const {
  return steam_id_lobby_;
}
inline uint64_t CMsgClientMMSSendLobbyChatMsg::steam_id_lobby() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSSendLobbyChatMsg.steam_id_lobby)
  return _internal_steam_id_lobby();
}
inline void CMsgClientMMSSendLobbyChatMsg::_internal_set_steam_id_lobby(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  steam_id_lobby_ = value;
}
inline void CMsgClientMMSSendLobbyChatMsg::set_steam_id_lobby(uint64_t value) {
  _internal_set_steam_id_lobby(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSSendLobbyChatMsg.steam_id_lobby)
}

// optional fixed64 steam_id_target = 3;
inline bool CMsgClientMMSSendLobbyChatMsg::_internal_has_steam_id_target() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientMMSSendLobbyChatMsg::has_steam_id_target() const {
  return _internal_has_steam_id_target();
}
inline void CMsgClientMMSSendLobbyChatMsg::clear_steam_id_target() {
  steam_id_target_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CMsgClientMMSSendLobbyChatMsg::_internal_steam_id_target() const {
  return steam_id_target_;
}
inline uint64_t CMsgClientMMSSendLobbyChatMsg::steam_id_target() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSSendLobbyChatMsg.steam_id_target)
  return _internal_steam_id_target();
}
inline void CMsgClientMMSSendLobbyChatMsg::_internal_set_steam_id_target(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  steam_id_target_ = value;
}
inline void CMsgClientMMSSendLobbyChatMsg::set_steam_id_target(uint64_t value) {
  _internal_set_steam_id_target(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSSendLobbyChatMsg.steam_id_target)
}

// optional bytes lobby_message = 4;
inline bool CMsgClientMMSSendLobbyChatMsg::_internal_has_lobby_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientMMSSendLobbyChatMsg::has_lobby_message() const {
  return _internal_has_lobby_message();
}
inline void CMsgClientMMSSendLobbyChatMsg::clear_lobby_message() {
  lobby_message_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientMMSSendLobbyChatMsg::lobby_message() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSSendLobbyChatMsg.lobby_message)
  return _internal_lobby_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientMMSSendLobbyChatMsg::set_lobby_message(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 lobby_message_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientMMSSendLobbyChatMsg.lobby_message)
}
inline std::string* CMsgClientMMSSendLobbyChatMsg::mutable_lobby_message() {
  std::string* _s = _internal_mutable_lobby_message();
  // @@protoc_insertion_point(field_mutable:CMsgClientMMSSendLobbyChatMsg.lobby_message)
  return _s;
}
inline const std::string& CMsgClientMMSSendLobbyChatMsg::_internal_lobby_message() const {
  return lobby_message_.Get();
}
inline void CMsgClientMMSSendLobbyChatMsg::_internal_set_lobby_message(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  lobby_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientMMSSendLobbyChatMsg::_internal_mutable_lobby_message() {
  _has_bits_[0] |= 0x00000001u;
  return lobby_message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientMMSSendLobbyChatMsg::release_lobby_message() {
  // @@protoc_insertion_point(field_release:CMsgClientMMSSendLobbyChatMsg.lobby_message)
  if (!_internal_has_lobby_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = lobby_message_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (lobby_message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    lobby_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientMMSSendLobbyChatMsg::set_allocated_lobby_message(std::string* lobby_message) {
  if (lobby_message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  lobby_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lobby_message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (lobby_message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    lobby_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientMMSSendLobbyChatMsg.lobby_message)
}

// -------------------------------------------------------------------

// CMsgClientMMSLobbyChatMsg

// optional uint32 app_id = 1;
inline bool CMsgClientMMSLobbyChatMsg::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientMMSLobbyChatMsg::has_app_id() const {
  return _internal_has_app_id();
}
inline void CMsgClientMMSLobbyChatMsg::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgClientMMSLobbyChatMsg::_internal_app_id() const {
  return app_id_;
}
inline uint32_t CMsgClientMMSLobbyChatMsg::app_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSLobbyChatMsg.app_id)
  return _internal_app_id();
}
inline void CMsgClientMMSLobbyChatMsg::_internal_set_app_id(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  app_id_ = value;
}
inline void CMsgClientMMSLobbyChatMsg::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSLobbyChatMsg.app_id)
}

// optional fixed64 steam_id_lobby = 2;
inline bool CMsgClientMMSLobbyChatMsg::_internal_has_steam_id_lobby() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientMMSLobbyChatMsg::has_steam_id_lobby() const {
  return _internal_has_steam_id_lobby();
}
inline void CMsgClientMMSLobbyChatMsg::clear_steam_id_lobby() {
  steam_id_lobby_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CMsgClientMMSLobbyChatMsg::_internal_steam_id_lobby() const {
  return steam_id_lobby_;
}
inline uint64_t CMsgClientMMSLobbyChatMsg::steam_id_lobby() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSLobbyChatMsg.steam_id_lobby)
  return _internal_steam_id_lobby();
}
inline void CMsgClientMMSLobbyChatMsg::_internal_set_steam_id_lobby(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  steam_id_lobby_ = value;
}
inline void CMsgClientMMSLobbyChatMsg::set_steam_id_lobby(uint64_t value) {
  _internal_set_steam_id_lobby(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSLobbyChatMsg.steam_id_lobby)
}

// optional fixed64 steam_id_sender = 3;
inline bool CMsgClientMMSLobbyChatMsg::_internal_has_steam_id_sender() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientMMSLobbyChatMsg::has_steam_id_sender() const {
  return _internal_has_steam_id_sender();
}
inline void CMsgClientMMSLobbyChatMsg::clear_steam_id_sender() {
  steam_id_sender_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CMsgClientMMSLobbyChatMsg::_internal_steam_id_sender() const {
  return steam_id_sender_;
}
inline uint64_t CMsgClientMMSLobbyChatMsg::steam_id_sender() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSLobbyChatMsg.steam_id_sender)
  return _internal_steam_id_sender();
}
inline void CMsgClientMMSLobbyChatMsg::_internal_set_steam_id_sender(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  steam_id_sender_ = value;
}
inline void CMsgClientMMSLobbyChatMsg::set_steam_id_sender(uint64_t value) {
  _internal_set_steam_id_sender(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSLobbyChatMsg.steam_id_sender)
}

// optional bytes lobby_message = 4;
inline bool CMsgClientMMSLobbyChatMsg::_internal_has_lobby_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientMMSLobbyChatMsg::has_lobby_message() const {
  return _internal_has_lobby_message();
}
inline void CMsgClientMMSLobbyChatMsg::clear_lobby_message() {
  lobby_message_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientMMSLobbyChatMsg::lobby_message() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSLobbyChatMsg.lobby_message)
  return _internal_lobby_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientMMSLobbyChatMsg::set_lobby_message(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 lobby_message_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientMMSLobbyChatMsg.lobby_message)
}
inline std::string* CMsgClientMMSLobbyChatMsg::mutable_lobby_message() {
  std::string* _s = _internal_mutable_lobby_message();
  // @@protoc_insertion_point(field_mutable:CMsgClientMMSLobbyChatMsg.lobby_message)
  return _s;
}
inline const std::string& CMsgClientMMSLobbyChatMsg::_internal_lobby_message() const {
  return lobby_message_.Get();
}
inline void CMsgClientMMSLobbyChatMsg::_internal_set_lobby_message(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  lobby_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientMMSLobbyChatMsg::_internal_mutable_lobby_message() {
  _has_bits_[0] |= 0x00000001u;
  return lobby_message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientMMSLobbyChatMsg::release_lobby_message() {
  // @@protoc_insertion_point(field_release:CMsgClientMMSLobbyChatMsg.lobby_message)
  if (!_internal_has_lobby_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = lobby_message_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (lobby_message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    lobby_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientMMSLobbyChatMsg::set_allocated_lobby_message(std::string* lobby_message) {
  if (lobby_message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  lobby_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lobby_message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (lobby_message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    lobby_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientMMSLobbyChatMsg.lobby_message)
}

// -------------------------------------------------------------------

// CMsgClientMMSSetLobbyOwner

// optional uint32 app_id = 1;
inline bool CMsgClientMMSSetLobbyOwner::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientMMSSetLobbyOwner::has_app_id() const {
  return _internal_has_app_id();
}
inline void CMsgClientMMSSetLobbyOwner::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgClientMMSSetLobbyOwner::_internal_app_id() const {
  return app_id_;
}
inline uint32_t CMsgClientMMSSetLobbyOwner::app_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSSetLobbyOwner.app_id)
  return _internal_app_id();
}
inline void CMsgClientMMSSetLobbyOwner::_internal_set_app_id(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  app_id_ = value;
}
inline void CMsgClientMMSSetLobbyOwner::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSSetLobbyOwner.app_id)
}

// optional fixed64 steam_id_lobby = 2;
inline bool CMsgClientMMSSetLobbyOwner::_internal_has_steam_id_lobby() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientMMSSetLobbyOwner::has_steam_id_lobby() const {
  return _internal_has_steam_id_lobby();
}
inline void CMsgClientMMSSetLobbyOwner::clear_steam_id_lobby() {
  steam_id_lobby_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgClientMMSSetLobbyOwner::_internal_steam_id_lobby() const {
  return steam_id_lobby_;
}
inline uint64_t CMsgClientMMSSetLobbyOwner::steam_id_lobby() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSSetLobbyOwner.steam_id_lobby)
  return _internal_steam_id_lobby();
}
inline void CMsgClientMMSSetLobbyOwner::_internal_set_steam_id_lobby(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steam_id_lobby_ = value;
}
inline void CMsgClientMMSSetLobbyOwner::set_steam_id_lobby(uint64_t value) {
  _internal_set_steam_id_lobby(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSSetLobbyOwner.steam_id_lobby)
}

// optional fixed64 steam_id_new_owner = 3;
inline bool CMsgClientMMSSetLobbyOwner::_internal_has_steam_id_new_owner() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientMMSSetLobbyOwner::has_steam_id_new_owner() const {
  return _internal_has_steam_id_new_owner();
}
inline void CMsgClientMMSSetLobbyOwner::clear_steam_id_new_owner() {
  steam_id_new_owner_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CMsgClientMMSSetLobbyOwner::_internal_steam_id_new_owner() const {
  return steam_id_new_owner_;
}
inline uint64_t CMsgClientMMSSetLobbyOwner::steam_id_new_owner() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSSetLobbyOwner.steam_id_new_owner)
  return _internal_steam_id_new_owner();
}
inline void CMsgClientMMSSetLobbyOwner::_internal_set_steam_id_new_owner(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  steam_id_new_owner_ = value;
}
inline void CMsgClientMMSSetLobbyOwner::set_steam_id_new_owner(uint64_t value) {
  _internal_set_steam_id_new_owner(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSSetLobbyOwner.steam_id_new_owner)
}

// -------------------------------------------------------------------

// CMsgClientMMSSetLobbyOwnerResponse

// optional uint32 app_id = 1;
inline bool CMsgClientMMSSetLobbyOwnerResponse::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientMMSSetLobbyOwnerResponse::has_app_id() const {
  return _internal_has_app_id();
}
inline void CMsgClientMMSSetLobbyOwnerResponse::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgClientMMSSetLobbyOwnerResponse::_internal_app_id() const {
  return app_id_;
}
inline uint32_t CMsgClientMMSSetLobbyOwnerResponse::app_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSSetLobbyOwnerResponse.app_id)
  return _internal_app_id();
}
inline void CMsgClientMMSSetLobbyOwnerResponse::_internal_set_app_id(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  app_id_ = value;
}
inline void CMsgClientMMSSetLobbyOwnerResponse::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSSetLobbyOwnerResponse.app_id)
}

// optional fixed64 steam_id_lobby = 2;
inline bool CMsgClientMMSSetLobbyOwnerResponse::_internal_has_steam_id_lobby() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientMMSSetLobbyOwnerResponse::has_steam_id_lobby() const {
  return _internal_has_steam_id_lobby();
}
inline void CMsgClientMMSSetLobbyOwnerResponse::clear_steam_id_lobby() {
  steam_id_lobby_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgClientMMSSetLobbyOwnerResponse::_internal_steam_id_lobby() const {
  return steam_id_lobby_;
}
inline uint64_t CMsgClientMMSSetLobbyOwnerResponse::steam_id_lobby() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSSetLobbyOwnerResponse.steam_id_lobby)
  return _internal_steam_id_lobby();
}
inline void CMsgClientMMSSetLobbyOwnerResponse::_internal_set_steam_id_lobby(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steam_id_lobby_ = value;
}
inline void CMsgClientMMSSetLobbyOwnerResponse::set_steam_id_lobby(uint64_t value) {
  _internal_set_steam_id_lobby(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSSetLobbyOwnerResponse.steam_id_lobby)
}

// optional int32 eresult = 3 [default = 2];
inline bool CMsgClientMMSSetLobbyOwnerResponse::_internal_has_eresult() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientMMSSetLobbyOwnerResponse::has_eresult() const {
  return _internal_has_eresult();
}
inline void CMsgClientMMSSetLobbyOwnerResponse::clear_eresult() {
  eresult_ = 2;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t CMsgClientMMSSetLobbyOwnerResponse::_internal_eresult() const {
  return eresult_;
}
inline int32_t CMsgClientMMSSetLobbyOwnerResponse::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSSetLobbyOwnerResponse.eresult)
  return _internal_eresult();
}
inline void CMsgClientMMSSetLobbyOwnerResponse::_internal_set_eresult(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  eresult_ = value;
}
inline void CMsgClientMMSSetLobbyOwnerResponse::set_eresult(int32_t value) {
  _internal_set_eresult(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSSetLobbyOwnerResponse.eresult)
}

// -------------------------------------------------------------------

// CMsgClientMMSSetLobbyLinked

// optional uint32 app_id = 1;
inline bool CMsgClientMMSSetLobbyLinked::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientMMSSetLobbyLinked::has_app_id() const {
  return _internal_has_app_id();
}
inline void CMsgClientMMSSetLobbyLinked::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgClientMMSSetLobbyLinked::_internal_app_id() const {
  return app_id_;
}
inline uint32_t CMsgClientMMSSetLobbyLinked::app_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSSetLobbyLinked.app_id)
  return _internal_app_id();
}
inline void CMsgClientMMSSetLobbyLinked::_internal_set_app_id(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  app_id_ = value;
}
inline void CMsgClientMMSSetLobbyLinked::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSSetLobbyLinked.app_id)
}

// optional fixed64 steam_id_lobby = 2;
inline bool CMsgClientMMSSetLobbyLinked::_internal_has_steam_id_lobby() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientMMSSetLobbyLinked::has_steam_id_lobby() const {
  return _internal_has_steam_id_lobby();
}
inline void CMsgClientMMSSetLobbyLinked::clear_steam_id_lobby() {
  steam_id_lobby_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgClientMMSSetLobbyLinked::_internal_steam_id_lobby() const {
  return steam_id_lobby_;
}
inline uint64_t CMsgClientMMSSetLobbyLinked::steam_id_lobby() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSSetLobbyLinked.steam_id_lobby)
  return _internal_steam_id_lobby();
}
inline void CMsgClientMMSSetLobbyLinked::_internal_set_steam_id_lobby(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steam_id_lobby_ = value;
}
inline void CMsgClientMMSSetLobbyLinked::set_steam_id_lobby(uint64_t value) {
  _internal_set_steam_id_lobby(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSSetLobbyLinked.steam_id_lobby)
}

// optional fixed64 steam_id_lobby2 = 3;
inline bool CMsgClientMMSSetLobbyLinked::_internal_has_steam_id_lobby2() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientMMSSetLobbyLinked::has_steam_id_lobby2() const {
  return _internal_has_steam_id_lobby2();
}
inline void CMsgClientMMSSetLobbyLinked::clear_steam_id_lobby2() {
  steam_id_lobby2_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CMsgClientMMSSetLobbyLinked::_internal_steam_id_lobby2() const {
  return steam_id_lobby2_;
}
inline uint64_t CMsgClientMMSSetLobbyLinked::steam_id_lobby2() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSSetLobbyLinked.steam_id_lobby2)
  return _internal_steam_id_lobby2();
}
inline void CMsgClientMMSSetLobbyLinked::_internal_set_steam_id_lobby2(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  steam_id_lobby2_ = value;
}
inline void CMsgClientMMSSetLobbyLinked::set_steam_id_lobby2(uint64_t value) {
  _internal_set_steam_id_lobby2(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSSetLobbyLinked.steam_id_lobby2)
}

// -------------------------------------------------------------------

// CMsgClientMMSSetLobbyGameServer

// optional uint32 app_id = 1;
inline bool CMsgClientMMSSetLobbyGameServer::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientMMSSetLobbyGameServer::has_app_id() const {
  return _internal_has_app_id();
}
inline void CMsgClientMMSSetLobbyGameServer::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgClientMMSSetLobbyGameServer::_internal_app_id() const {
  return app_id_;
}
inline uint32_t CMsgClientMMSSetLobbyGameServer::app_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSSetLobbyGameServer.app_id)
  return _internal_app_id();
}
inline void CMsgClientMMSSetLobbyGameServer::_internal_set_app_id(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  app_id_ = value;
}
inline void CMsgClientMMSSetLobbyGameServer::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSSetLobbyGameServer.app_id)
}

// optional fixed64 steam_id_lobby = 2;
inline bool CMsgClientMMSSetLobbyGameServer::_internal_has_steam_id_lobby() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientMMSSetLobbyGameServer::has_steam_id_lobby() const {
  return _internal_has_steam_id_lobby();
}
inline void CMsgClientMMSSetLobbyGameServer::clear_steam_id_lobby() {
  steam_id_lobby_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CMsgClientMMSSetLobbyGameServer::_internal_steam_id_lobby() const {
  return steam_id_lobby_;
}
inline uint64_t CMsgClientMMSSetLobbyGameServer::steam_id_lobby() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSSetLobbyGameServer.steam_id_lobby)
  return _internal_steam_id_lobby();
}
inline void CMsgClientMMSSetLobbyGameServer::_internal_set_steam_id_lobby(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  steam_id_lobby_ = value;
}
inline void CMsgClientMMSSetLobbyGameServer::set_steam_id_lobby(uint64_t value) {
  _internal_set_steam_id_lobby(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSSetLobbyGameServer.steam_id_lobby)
}

// optional uint32 deprecated_game_server_ip = 3;
inline bool CMsgClientMMSSetLobbyGameServer::_internal_has_deprecated_game_server_ip() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientMMSSetLobbyGameServer::has_deprecated_game_server_ip() const {
  return _internal_has_deprecated_game_server_ip();
}
inline void CMsgClientMMSSetLobbyGameServer::clear_deprecated_game_server_ip() {
  deprecated_game_server_ip_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgClientMMSSetLobbyGameServer::_internal_deprecated_game_server_ip() const {
  return deprecated_game_server_ip_;
}
inline uint32_t CMsgClientMMSSetLobbyGameServer::deprecated_game_server_ip() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSSetLobbyGameServer.deprecated_game_server_ip)
  return _internal_deprecated_game_server_ip();
}
inline void CMsgClientMMSSetLobbyGameServer::_internal_set_deprecated_game_server_ip(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  deprecated_game_server_ip_ = value;
}
inline void CMsgClientMMSSetLobbyGameServer::set_deprecated_game_server_ip(uint32_t value) {
  _internal_set_deprecated_game_server_ip(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSSetLobbyGameServer.deprecated_game_server_ip)
}

// optional uint32 game_server_port = 4;
inline bool CMsgClientMMSSetLobbyGameServer::_internal_has_game_server_port() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgClientMMSSetLobbyGameServer::has_game_server_port() const {
  return _internal_has_game_server_port();
}
inline void CMsgClientMMSSetLobbyGameServer::clear_game_server_port() {
  game_server_port_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgClientMMSSetLobbyGameServer::_internal_game_server_port() const {
  return game_server_port_;
}
inline uint32_t CMsgClientMMSSetLobbyGameServer::game_server_port() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSSetLobbyGameServer.game_server_port)
  return _internal_game_server_port();
}
inline void CMsgClientMMSSetLobbyGameServer::_internal_set_game_server_port(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  game_server_port_ = value;
}
inline void CMsgClientMMSSetLobbyGameServer::set_game_server_port(uint32_t value) {
  _internal_set_game_server_port(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSSetLobbyGameServer.game_server_port)
}

// optional fixed64 game_server_steam_id = 5;
inline bool CMsgClientMMSSetLobbyGameServer::_internal_has_game_server_steam_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgClientMMSSetLobbyGameServer::has_game_server_steam_id() const {
  return _internal_has_game_server_steam_id();
}
inline void CMsgClientMMSSetLobbyGameServer::clear_game_server_steam_id() {
  game_server_steam_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000010u;
}
inline uint64_t CMsgClientMMSSetLobbyGameServer::_internal_game_server_steam_id() const {
  return game_server_steam_id_;
}
inline uint64_t CMsgClientMMSSetLobbyGameServer::game_server_steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSSetLobbyGameServer.game_server_steam_id)
  return _internal_game_server_steam_id();
}
inline void CMsgClientMMSSetLobbyGameServer::_internal_set_game_server_steam_id(uint64_t value) {
  _has_bits_[0] |= 0x00000010u;
  game_server_steam_id_ = value;
}
inline void CMsgClientMMSSetLobbyGameServer::set_game_server_steam_id(uint64_t value) {
  _internal_set_game_server_steam_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSSetLobbyGameServer.game_server_steam_id)
}

// optional .CMsgIPAddress game_server_ip = 6;
inline bool CMsgClientMMSSetLobbyGameServer::_internal_has_game_server_ip() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || game_server_ip_ != nullptr);
  return value;
}
inline bool CMsgClientMMSSetLobbyGameServer::has_game_server_ip() const {
  return _internal_has_game_server_ip();
}
inline const ::CMsgIPAddress& CMsgClientMMSSetLobbyGameServer::_internal_game_server_ip() const {
  const ::CMsgIPAddress* p = game_server_ip_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgIPAddress&>(
      ::_CMsgIPAddress_default_instance_);
}
inline const ::CMsgIPAddress& CMsgClientMMSSetLobbyGameServer::game_server_ip() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSSetLobbyGameServer.game_server_ip)
  return _internal_game_server_ip();
}
inline void CMsgClientMMSSetLobbyGameServer::unsafe_arena_set_allocated_game_server_ip(
    ::CMsgIPAddress* game_server_ip) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(game_server_ip_);
  }
  game_server_ip_ = game_server_ip;
  if (game_server_ip) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgClientMMSSetLobbyGameServer.game_server_ip)
}
inline ::CMsgIPAddress* CMsgClientMMSSetLobbyGameServer::release_game_server_ip() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgIPAddress* temp = game_server_ip_;
  game_server_ip_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgIPAddress* CMsgClientMMSSetLobbyGameServer::unsafe_arena_release_game_server_ip() {
  // @@protoc_insertion_point(field_release:CMsgClientMMSSetLobbyGameServer.game_server_ip)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgIPAddress* temp = game_server_ip_;
  game_server_ip_ = nullptr;
  return temp;
}
inline ::CMsgIPAddress* CMsgClientMMSSetLobbyGameServer::_internal_mutable_game_server_ip() {
  _has_bits_[0] |= 0x00000001u;
  if (game_server_ip_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgIPAddress>(GetArenaForAllocation());
    game_server_ip_ = p;
  }
  return game_server_ip_;
}
inline ::CMsgIPAddress* CMsgClientMMSSetLobbyGameServer::mutable_game_server_ip() {
  ::CMsgIPAddress* _msg = _internal_mutable_game_server_ip();
  // @@protoc_insertion_point(field_mutable:CMsgClientMMSSetLobbyGameServer.game_server_ip)
  return _msg;
}
inline void CMsgClientMMSSetLobbyGameServer::set_allocated_game_server_ip(::CMsgIPAddress* game_server_ip) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(game_server_ip_);
  }
  if (game_server_ip) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(game_server_ip));
    if (message_arena != submessage_arena) {
      game_server_ip = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, game_server_ip, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  game_server_ip_ = game_server_ip;
  // @@protoc_insertion_point(field_set_allocated:CMsgClientMMSSetLobbyGameServer.game_server_ip)
}

// -------------------------------------------------------------------

// CMsgClientMMSLobbyGameServerSet

// optional uint32 app_id = 1;
inline bool CMsgClientMMSLobbyGameServerSet::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientMMSLobbyGameServerSet::has_app_id() const {
  return _internal_has_app_id();
}
inline void CMsgClientMMSLobbyGameServerSet::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgClientMMSLobbyGameServerSet::_internal_app_id() const {
  return app_id_;
}
inline uint32_t CMsgClientMMSLobbyGameServerSet::app_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSLobbyGameServerSet.app_id)
  return _internal_app_id();
}
inline void CMsgClientMMSLobbyGameServerSet::_internal_set_app_id(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  app_id_ = value;
}
inline void CMsgClientMMSLobbyGameServerSet::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSLobbyGameServerSet.app_id)
}

// optional fixed64 steam_id_lobby = 2;
inline bool CMsgClientMMSLobbyGameServerSet::_internal_has_steam_id_lobby() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientMMSLobbyGameServerSet::has_steam_id_lobby() const {
  return _internal_has_steam_id_lobby();
}
inline void CMsgClientMMSLobbyGameServerSet::clear_steam_id_lobby() {
  steam_id_lobby_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CMsgClientMMSLobbyGameServerSet::_internal_steam_id_lobby() const {
  return steam_id_lobby_;
}
inline uint64_t CMsgClientMMSLobbyGameServerSet::steam_id_lobby() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSLobbyGameServerSet.steam_id_lobby)
  return _internal_steam_id_lobby();
}
inline void CMsgClientMMSLobbyGameServerSet::_internal_set_steam_id_lobby(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  steam_id_lobby_ = value;
}
inline void CMsgClientMMSLobbyGameServerSet::set_steam_id_lobby(uint64_t value) {
  _internal_set_steam_id_lobby(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSLobbyGameServerSet.steam_id_lobby)
}

// optional uint32 deprecated_game_server_ip = 3;
inline bool CMsgClientMMSLobbyGameServerSet::_internal_has_deprecated_game_server_ip() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientMMSLobbyGameServerSet::has_deprecated_game_server_ip() const {
  return _internal_has_deprecated_game_server_ip();
}
inline void CMsgClientMMSLobbyGameServerSet::clear_deprecated_game_server_ip() {
  deprecated_game_server_ip_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgClientMMSLobbyGameServerSet::_internal_deprecated_game_server_ip() const {
  return deprecated_game_server_ip_;
}
inline uint32_t CMsgClientMMSLobbyGameServerSet::deprecated_game_server_ip() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSLobbyGameServerSet.deprecated_game_server_ip)
  return _internal_deprecated_game_server_ip();
}
inline void CMsgClientMMSLobbyGameServerSet::_internal_set_deprecated_game_server_ip(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  deprecated_game_server_ip_ = value;
}
inline void CMsgClientMMSLobbyGameServerSet::set_deprecated_game_server_ip(uint32_t value) {
  _internal_set_deprecated_game_server_ip(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSLobbyGameServerSet.deprecated_game_server_ip)
}

// optional uint32 game_server_port = 4;
inline bool CMsgClientMMSLobbyGameServerSet::_internal_has_game_server_port() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgClientMMSLobbyGameServerSet::has_game_server_port() const {
  return _internal_has_game_server_port();
}
inline void CMsgClientMMSLobbyGameServerSet::clear_game_server_port() {
  game_server_port_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgClientMMSLobbyGameServerSet::_internal_game_server_port() const {
  return game_server_port_;
}
inline uint32_t CMsgClientMMSLobbyGameServerSet::game_server_port() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSLobbyGameServerSet.game_server_port)
  return _internal_game_server_port();
}
inline void CMsgClientMMSLobbyGameServerSet::_internal_set_game_server_port(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  game_server_port_ = value;
}
inline void CMsgClientMMSLobbyGameServerSet::set_game_server_port(uint32_t value) {
  _internal_set_game_server_port(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSLobbyGameServerSet.game_server_port)
}

// optional fixed64 game_server_steam_id = 5;
inline bool CMsgClientMMSLobbyGameServerSet::_internal_has_game_server_steam_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgClientMMSLobbyGameServerSet::has_game_server_steam_id() const {
  return _internal_has_game_server_steam_id();
}
inline void CMsgClientMMSLobbyGameServerSet::clear_game_server_steam_id() {
  game_server_steam_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000010u;
}
inline uint64_t CMsgClientMMSLobbyGameServerSet::_internal_game_server_steam_id() const {
  return game_server_steam_id_;
}
inline uint64_t CMsgClientMMSLobbyGameServerSet::game_server_steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSLobbyGameServerSet.game_server_steam_id)
  return _internal_game_server_steam_id();
}
inline void CMsgClientMMSLobbyGameServerSet::_internal_set_game_server_steam_id(uint64_t value) {
  _has_bits_[0] |= 0x00000010u;
  game_server_steam_id_ = value;
}
inline void CMsgClientMMSLobbyGameServerSet::set_game_server_steam_id(uint64_t value) {
  _internal_set_game_server_steam_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSLobbyGameServerSet.game_server_steam_id)
}

// optional .CMsgIPAddress game_server_ip = 6;
inline bool CMsgClientMMSLobbyGameServerSet::_internal_has_game_server_ip() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || game_server_ip_ != nullptr);
  return value;
}
inline bool CMsgClientMMSLobbyGameServerSet::has_game_server_ip() const {
  return _internal_has_game_server_ip();
}
inline const ::CMsgIPAddress& CMsgClientMMSLobbyGameServerSet::_internal_game_server_ip() const {
  const ::CMsgIPAddress* p = game_server_ip_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgIPAddress&>(
      ::_CMsgIPAddress_default_instance_);
}
inline const ::CMsgIPAddress& CMsgClientMMSLobbyGameServerSet::game_server_ip() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSLobbyGameServerSet.game_server_ip)
  return _internal_game_server_ip();
}
inline void CMsgClientMMSLobbyGameServerSet::unsafe_arena_set_allocated_game_server_ip(
    ::CMsgIPAddress* game_server_ip) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(game_server_ip_);
  }
  game_server_ip_ = game_server_ip;
  if (game_server_ip) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgClientMMSLobbyGameServerSet.game_server_ip)
}
inline ::CMsgIPAddress* CMsgClientMMSLobbyGameServerSet::release_game_server_ip() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgIPAddress* temp = game_server_ip_;
  game_server_ip_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgIPAddress* CMsgClientMMSLobbyGameServerSet::unsafe_arena_release_game_server_ip() {
  // @@protoc_insertion_point(field_release:CMsgClientMMSLobbyGameServerSet.game_server_ip)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgIPAddress* temp = game_server_ip_;
  game_server_ip_ = nullptr;
  return temp;
}
inline ::CMsgIPAddress* CMsgClientMMSLobbyGameServerSet::_internal_mutable_game_server_ip() {
  _has_bits_[0] |= 0x00000001u;
  if (game_server_ip_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgIPAddress>(GetArenaForAllocation());
    game_server_ip_ = p;
  }
  return game_server_ip_;
}
inline ::CMsgIPAddress* CMsgClientMMSLobbyGameServerSet::mutable_game_server_ip() {
  ::CMsgIPAddress* _msg = _internal_mutable_game_server_ip();
  // @@protoc_insertion_point(field_mutable:CMsgClientMMSLobbyGameServerSet.game_server_ip)
  return _msg;
}
inline void CMsgClientMMSLobbyGameServerSet::set_allocated_game_server_ip(::CMsgIPAddress* game_server_ip) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(game_server_ip_);
  }
  if (game_server_ip) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(game_server_ip));
    if (message_arena != submessage_arena) {
      game_server_ip = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, game_server_ip, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  game_server_ip_ = game_server_ip;
  // @@protoc_insertion_point(field_set_allocated:CMsgClientMMSLobbyGameServerSet.game_server_ip)
}

// -------------------------------------------------------------------

// CMsgClientMMSUserJoinedLobby

// optional uint32 app_id = 1;
inline bool CMsgClientMMSUserJoinedLobby::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientMMSUserJoinedLobby::has_app_id() const {
  return _internal_has_app_id();
}
inline void CMsgClientMMSUserJoinedLobby::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgClientMMSUserJoinedLobby::_internal_app_id() const {
  return app_id_;
}
inline uint32_t CMsgClientMMSUserJoinedLobby::app_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSUserJoinedLobby.app_id)
  return _internal_app_id();
}
inline void CMsgClientMMSUserJoinedLobby::_internal_set_app_id(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  app_id_ = value;
}
inline void CMsgClientMMSUserJoinedLobby::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSUserJoinedLobby.app_id)
}

// optional fixed64 steam_id_lobby = 2;
inline bool CMsgClientMMSUserJoinedLobby::_internal_has_steam_id_lobby() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientMMSUserJoinedLobby::has_steam_id_lobby() const {
  return _internal_has_steam_id_lobby();
}
inline void CMsgClientMMSUserJoinedLobby::clear_steam_id_lobby() {
  steam_id_lobby_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CMsgClientMMSUserJoinedLobby::_internal_steam_id_lobby() const {
  return steam_id_lobby_;
}
inline uint64_t CMsgClientMMSUserJoinedLobby::steam_id_lobby() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSUserJoinedLobby.steam_id_lobby)
  return _internal_steam_id_lobby();
}
inline void CMsgClientMMSUserJoinedLobby::_internal_set_steam_id_lobby(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  steam_id_lobby_ = value;
}
inline void CMsgClientMMSUserJoinedLobby::set_steam_id_lobby(uint64_t value) {
  _internal_set_steam_id_lobby(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSUserJoinedLobby.steam_id_lobby)
}

// optional fixed64 steam_id_user = 3;
inline bool CMsgClientMMSUserJoinedLobby::_internal_has_steam_id_user() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientMMSUserJoinedLobby::has_steam_id_user() const {
  return _internal_has_steam_id_user();
}
inline void CMsgClientMMSUserJoinedLobby::clear_steam_id_user() {
  steam_id_user_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CMsgClientMMSUserJoinedLobby::_internal_steam_id_user() const {
  return steam_id_user_;
}
inline uint64_t CMsgClientMMSUserJoinedLobby::steam_id_user() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSUserJoinedLobby.steam_id_user)
  return _internal_steam_id_user();
}
inline void CMsgClientMMSUserJoinedLobby::_internal_set_steam_id_user(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  steam_id_user_ = value;
}
inline void CMsgClientMMSUserJoinedLobby::set_steam_id_user(uint64_t value) {
  _internal_set_steam_id_user(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSUserJoinedLobby.steam_id_user)
}

// optional string persona_name = 4;
inline bool CMsgClientMMSUserJoinedLobby::_internal_has_persona_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientMMSUserJoinedLobby::has_persona_name() const {
  return _internal_has_persona_name();
}
inline void CMsgClientMMSUserJoinedLobby::clear_persona_name() {
  persona_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientMMSUserJoinedLobby::persona_name() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSUserJoinedLobby.persona_name)
  return _internal_persona_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientMMSUserJoinedLobby::set_persona_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 persona_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientMMSUserJoinedLobby.persona_name)
}
inline std::string* CMsgClientMMSUserJoinedLobby::mutable_persona_name() {
  std::string* _s = _internal_mutable_persona_name();
  // @@protoc_insertion_point(field_mutable:CMsgClientMMSUserJoinedLobby.persona_name)
  return _s;
}
inline const std::string& CMsgClientMMSUserJoinedLobby::_internal_persona_name() const {
  return persona_name_.Get();
}
inline void CMsgClientMMSUserJoinedLobby::_internal_set_persona_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  persona_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientMMSUserJoinedLobby::_internal_mutable_persona_name() {
  _has_bits_[0] |= 0x00000001u;
  return persona_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientMMSUserJoinedLobby::release_persona_name() {
  // @@protoc_insertion_point(field_release:CMsgClientMMSUserJoinedLobby.persona_name)
  if (!_internal_has_persona_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = persona_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (persona_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    persona_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientMMSUserJoinedLobby::set_allocated_persona_name(std::string* persona_name) {
  if (persona_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  persona_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), persona_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (persona_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    persona_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientMMSUserJoinedLobby.persona_name)
}

// -------------------------------------------------------------------

// CMsgClientMMSUserLeftLobby

// optional uint32 app_id = 1;
inline bool CMsgClientMMSUserLeftLobby::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientMMSUserLeftLobby::has_app_id() const {
  return _internal_has_app_id();
}
inline void CMsgClientMMSUserLeftLobby::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgClientMMSUserLeftLobby::_internal_app_id() const {
  return app_id_;
}
inline uint32_t CMsgClientMMSUserLeftLobby::app_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSUserLeftLobby.app_id)
  return _internal_app_id();
}
inline void CMsgClientMMSUserLeftLobby::_internal_set_app_id(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  app_id_ = value;
}
inline void CMsgClientMMSUserLeftLobby::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSUserLeftLobby.app_id)
}

// optional fixed64 steam_id_lobby = 2;
inline bool CMsgClientMMSUserLeftLobby::_internal_has_steam_id_lobby() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientMMSUserLeftLobby::has_steam_id_lobby() const {
  return _internal_has_steam_id_lobby();
}
inline void CMsgClientMMSUserLeftLobby::clear_steam_id_lobby() {
  steam_id_lobby_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CMsgClientMMSUserLeftLobby::_internal_steam_id_lobby() const {
  return steam_id_lobby_;
}
inline uint64_t CMsgClientMMSUserLeftLobby::steam_id_lobby() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSUserLeftLobby.steam_id_lobby)
  return _internal_steam_id_lobby();
}
inline void CMsgClientMMSUserLeftLobby::_internal_set_steam_id_lobby(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  steam_id_lobby_ = value;
}
inline void CMsgClientMMSUserLeftLobby::set_steam_id_lobby(uint64_t value) {
  _internal_set_steam_id_lobby(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSUserLeftLobby.steam_id_lobby)
}

// optional fixed64 steam_id_user = 3;
inline bool CMsgClientMMSUserLeftLobby::_internal_has_steam_id_user() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientMMSUserLeftLobby::has_steam_id_user() const {
  return _internal_has_steam_id_user();
}
inline void CMsgClientMMSUserLeftLobby::clear_steam_id_user() {
  steam_id_user_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CMsgClientMMSUserLeftLobby::_internal_steam_id_user() const {
  return steam_id_user_;
}
inline uint64_t CMsgClientMMSUserLeftLobby::steam_id_user() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSUserLeftLobby.steam_id_user)
  return _internal_steam_id_user();
}
inline void CMsgClientMMSUserLeftLobby::_internal_set_steam_id_user(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  steam_id_user_ = value;
}
inline void CMsgClientMMSUserLeftLobby::set_steam_id_user(uint64_t value) {
  _internal_set_steam_id_user(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSUserLeftLobby.steam_id_user)
}

// optional string persona_name = 4;
inline bool CMsgClientMMSUserLeftLobby::_internal_has_persona_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientMMSUserLeftLobby::has_persona_name() const {
  return _internal_has_persona_name();
}
inline void CMsgClientMMSUserLeftLobby::clear_persona_name() {
  persona_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientMMSUserLeftLobby::persona_name() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSUserLeftLobby.persona_name)
  return _internal_persona_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientMMSUserLeftLobby::set_persona_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 persona_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientMMSUserLeftLobby.persona_name)
}
inline std::string* CMsgClientMMSUserLeftLobby::mutable_persona_name() {
  std::string* _s = _internal_mutable_persona_name();
  // @@protoc_insertion_point(field_mutable:CMsgClientMMSUserLeftLobby.persona_name)
  return _s;
}
inline const std::string& CMsgClientMMSUserLeftLobby::_internal_persona_name() const {
  return persona_name_.Get();
}
inline void CMsgClientMMSUserLeftLobby::_internal_set_persona_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  persona_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientMMSUserLeftLobby::_internal_mutable_persona_name() {
  _has_bits_[0] |= 0x00000001u;
  return persona_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientMMSUserLeftLobby::release_persona_name() {
  // @@protoc_insertion_point(field_release:CMsgClientMMSUserLeftLobby.persona_name)
  if (!_internal_has_persona_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = persona_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (persona_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    persona_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientMMSUserLeftLobby::set_allocated_persona_name(std::string* persona_name) {
  if (persona_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  persona_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), persona_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (persona_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    persona_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientMMSUserLeftLobby.persona_name)
}

// -------------------------------------------------------------------

// CMsgClientMMSInviteToLobby

// optional uint32 app_id = 1;
inline bool CMsgClientMMSInviteToLobby::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientMMSInviteToLobby::has_app_id() const {
  return _internal_has_app_id();
}
inline void CMsgClientMMSInviteToLobby::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgClientMMSInviteToLobby::_internal_app_id() const {
  return app_id_;
}
inline uint32_t CMsgClientMMSInviteToLobby::app_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSInviteToLobby.app_id)
  return _internal_app_id();
}
inline void CMsgClientMMSInviteToLobby::_internal_set_app_id(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  app_id_ = value;
}
inline void CMsgClientMMSInviteToLobby::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSInviteToLobby.app_id)
}

// optional fixed64 steam_id_lobby = 2;
inline bool CMsgClientMMSInviteToLobby::_internal_has_steam_id_lobby() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientMMSInviteToLobby::has_steam_id_lobby() const {
  return _internal_has_steam_id_lobby();
}
inline void CMsgClientMMSInviteToLobby::clear_steam_id_lobby() {
  steam_id_lobby_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgClientMMSInviteToLobby::_internal_steam_id_lobby() const {
  return steam_id_lobby_;
}
inline uint64_t CMsgClientMMSInviteToLobby::steam_id_lobby() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSInviteToLobby.steam_id_lobby)
  return _internal_steam_id_lobby();
}
inline void CMsgClientMMSInviteToLobby::_internal_set_steam_id_lobby(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steam_id_lobby_ = value;
}
inline void CMsgClientMMSInviteToLobby::set_steam_id_lobby(uint64_t value) {
  _internal_set_steam_id_lobby(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSInviteToLobby.steam_id_lobby)
}

// optional fixed64 steam_id_user_invited = 3;
inline bool CMsgClientMMSInviteToLobby::_internal_has_steam_id_user_invited() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientMMSInviteToLobby::has_steam_id_user_invited() const {
  return _internal_has_steam_id_user_invited();
}
inline void CMsgClientMMSInviteToLobby::clear_steam_id_user_invited() {
  steam_id_user_invited_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CMsgClientMMSInviteToLobby::_internal_steam_id_user_invited() const {
  return steam_id_user_invited_;
}
inline uint64_t CMsgClientMMSInviteToLobby::steam_id_user_invited() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSInviteToLobby.steam_id_user_invited)
  return _internal_steam_id_user_invited();
}
inline void CMsgClientMMSInviteToLobby::_internal_set_steam_id_user_invited(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  steam_id_user_invited_ = value;
}
inline void CMsgClientMMSInviteToLobby::set_steam_id_user_invited(uint64_t value) {
  _internal_set_steam_id_user_invited(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSInviteToLobby.steam_id_user_invited)
}

// -------------------------------------------------------------------

// CMsgClientMMSGetLobbyStatus

// optional uint32 app_id = 1;
inline bool CMsgClientMMSGetLobbyStatus::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientMMSGetLobbyStatus::has_app_id() const {
  return _internal_has_app_id();
}
inline void CMsgClientMMSGetLobbyStatus::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgClientMMSGetLobbyStatus::_internal_app_id() const {
  return app_id_;
}
inline uint32_t CMsgClientMMSGetLobbyStatus::app_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSGetLobbyStatus.app_id)
  return _internal_app_id();
}
inline void CMsgClientMMSGetLobbyStatus::_internal_set_app_id(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  app_id_ = value;
}
inline void CMsgClientMMSGetLobbyStatus::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSGetLobbyStatus.app_id)
}

// optional fixed64 steam_id_lobby = 2;
inline bool CMsgClientMMSGetLobbyStatus::_internal_has_steam_id_lobby() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientMMSGetLobbyStatus::has_steam_id_lobby() const {
  return _internal_has_steam_id_lobby();
}
inline void CMsgClientMMSGetLobbyStatus::clear_steam_id_lobby() {
  steam_id_lobby_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgClientMMSGetLobbyStatus::_internal_steam_id_lobby() const {
  return steam_id_lobby_;
}
inline uint64_t CMsgClientMMSGetLobbyStatus::steam_id_lobby() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSGetLobbyStatus.steam_id_lobby)
  return _internal_steam_id_lobby();
}
inline void CMsgClientMMSGetLobbyStatus::_internal_set_steam_id_lobby(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steam_id_lobby_ = value;
}
inline void CMsgClientMMSGetLobbyStatus::set_steam_id_lobby(uint64_t value) {
  _internal_set_steam_id_lobby(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSGetLobbyStatus.steam_id_lobby)
}

// optional bool claim_membership = 3;
inline bool CMsgClientMMSGetLobbyStatus::_internal_has_claim_membership() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientMMSGetLobbyStatus::has_claim_membership() const {
  return _internal_has_claim_membership();
}
inline void CMsgClientMMSGetLobbyStatus::clear_claim_membership() {
  claim_membership_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CMsgClientMMSGetLobbyStatus::_internal_claim_membership() const {
  return claim_membership_;
}
inline bool CMsgClientMMSGetLobbyStatus::claim_membership() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSGetLobbyStatus.claim_membership)
  return _internal_claim_membership();
}
inline void CMsgClientMMSGetLobbyStatus::_internal_set_claim_membership(bool value) {
  _has_bits_[0] |= 0x00000004u;
  claim_membership_ = value;
}
inline void CMsgClientMMSGetLobbyStatus::set_claim_membership(bool value) {
  _internal_set_claim_membership(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSGetLobbyStatus.claim_membership)
}

// optional bool claim_ownership = 4;
inline bool CMsgClientMMSGetLobbyStatus::_internal_has_claim_ownership() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientMMSGetLobbyStatus::has_claim_ownership() const {
  return _internal_has_claim_ownership();
}
inline void CMsgClientMMSGetLobbyStatus::clear_claim_ownership() {
  claim_ownership_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CMsgClientMMSGetLobbyStatus::_internal_claim_ownership() const {
  return claim_ownership_;
}
inline bool CMsgClientMMSGetLobbyStatus::claim_ownership() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSGetLobbyStatus.claim_ownership)
  return _internal_claim_ownership();
}
inline void CMsgClientMMSGetLobbyStatus::_internal_set_claim_ownership(bool value) {
  _has_bits_[0] |= 0x00000008u;
  claim_ownership_ = value;
}
inline void CMsgClientMMSGetLobbyStatus::set_claim_ownership(bool value) {
  _internal_set_claim_ownership(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSGetLobbyStatus.claim_ownership)
}

// -------------------------------------------------------------------

// CMsgClientMMSGetLobbyStatusResponse

// optional uint32 app_id = 1;
inline bool CMsgClientMMSGetLobbyStatusResponse::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientMMSGetLobbyStatusResponse::has_app_id() const {
  return _internal_has_app_id();
}
inline void CMsgClientMMSGetLobbyStatusResponse::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgClientMMSGetLobbyStatusResponse::_internal_app_id() const {
  return app_id_;
}
inline uint32_t CMsgClientMMSGetLobbyStatusResponse::app_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSGetLobbyStatusResponse.app_id)
  return _internal_app_id();
}
inline void CMsgClientMMSGetLobbyStatusResponse::_internal_set_app_id(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  app_id_ = value;
}
inline void CMsgClientMMSGetLobbyStatusResponse::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSGetLobbyStatusResponse.app_id)
}

// optional fixed64 steam_id_lobby = 2;
inline bool CMsgClientMMSGetLobbyStatusResponse::_internal_has_steam_id_lobby() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientMMSGetLobbyStatusResponse::has_steam_id_lobby() const {
  return _internal_has_steam_id_lobby();
}
inline void CMsgClientMMSGetLobbyStatusResponse::clear_steam_id_lobby() {
  steam_id_lobby_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgClientMMSGetLobbyStatusResponse::_internal_steam_id_lobby() const {
  return steam_id_lobby_;
}
inline uint64_t CMsgClientMMSGetLobbyStatusResponse::steam_id_lobby() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSGetLobbyStatusResponse.steam_id_lobby)
  return _internal_steam_id_lobby();
}
inline void CMsgClientMMSGetLobbyStatusResponse::_internal_set_steam_id_lobby(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steam_id_lobby_ = value;
}
inline void CMsgClientMMSGetLobbyStatusResponse::set_steam_id_lobby(uint64_t value) {
  _internal_set_steam_id_lobby(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSGetLobbyStatusResponse.steam_id_lobby)
}

// optional .EMMSLobbyStatus lobby_status = 3 [default = k_EMMSLobbyStatusInvalid];
inline bool CMsgClientMMSGetLobbyStatusResponse::_internal_has_lobby_status() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientMMSGetLobbyStatusResponse::has_lobby_status() const {
  return _internal_has_lobby_status();
}
inline void CMsgClientMMSGetLobbyStatusResponse::clear_lobby_status() {
  lobby_status_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::EMMSLobbyStatus CMsgClientMMSGetLobbyStatusResponse::_internal_lobby_status() const {
  return static_cast< ::EMMSLobbyStatus >(lobby_status_);
}
inline ::EMMSLobbyStatus CMsgClientMMSGetLobbyStatusResponse::lobby_status() const {
  // @@protoc_insertion_point(field_get:CMsgClientMMSGetLobbyStatusResponse.lobby_status)
  return _internal_lobby_status();
}
inline void CMsgClientMMSGetLobbyStatusResponse::_internal_set_lobby_status(::EMMSLobbyStatus value) {
  assert(::EMMSLobbyStatus_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  lobby_status_ = value;
}
inline void CMsgClientMMSGetLobbyStatusResponse::set_lobby_status(::EMMSLobbyStatus value) {
  _internal_set_lobby_status(value);
  // @@protoc_insertion_point(field_set:CMsgClientMMSGetLobbyStatusResponse.lobby_status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::EMMSLobbyStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EMMSLobbyStatus>() {
  return ::EMMSLobbyStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_steammessages_5fclientserver_5fmms_2eproto
