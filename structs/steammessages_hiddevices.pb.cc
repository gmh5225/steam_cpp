// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_hiddevices.proto

#include "steammessages_hiddevices.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CHIDDeviceInfo::CHIDDeviceInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , serial_number_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , manufacturer_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , product_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , location_(0)

  , vendor_id_(0u)
  , product_id_(0u)
  , release_number_(0u)
  , usage_page_(0u)
  , usage_(0u)
  , caps_bits_(0u)
  , session_id_(0u)
  , is_generic_gamepad_(false)
  , is_generic_joystick_(false)
  , is_xinput_device_obsolete_(false)
  , is_steamvr_device_(false)
  , econtrollertype_obsolete_(0u)
  , session_remote_play_together_appid_(0u)
  , interface_number_(-1)
  , ostype_(-1){}
struct CHIDDeviceInfoDefaultTypeInternal {
  constexpr CHIDDeviceInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CHIDDeviceInfoDefaultTypeInternal() {}
  union {
    CHIDDeviceInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CHIDDeviceInfoDefaultTypeInternal _CHIDDeviceInfo_default_instance_;
constexpr CHIDDeviceInputReport::CHIDDeviceInputReport(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : full_report_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , delta_report_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , delta_report_size_(0u)
  , delta_report_crc_(0u){}
struct CHIDDeviceInputReportDefaultTypeInternal {
  constexpr CHIDDeviceInputReportDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CHIDDeviceInputReportDefaultTypeInternal() {}
  union {
    CHIDDeviceInputReport _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CHIDDeviceInputReportDefaultTypeInternal _CHIDDeviceInputReport_default_instance_;
constexpr CHIDMessageToRemote_DeviceOpen::CHIDMessageToRemote_DeviceOpen(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : info_(nullptr){}
struct CHIDMessageToRemote_DeviceOpenDefaultTypeInternal {
  constexpr CHIDMessageToRemote_DeviceOpenDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CHIDMessageToRemote_DeviceOpenDefaultTypeInternal() {}
  union {
    CHIDMessageToRemote_DeviceOpen _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CHIDMessageToRemote_DeviceOpenDefaultTypeInternal _CHIDMessageToRemote_DeviceOpen_default_instance_;
constexpr CHIDMessageToRemote_DeviceClose::CHIDMessageToRemote_DeviceClose(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_(0u){}
struct CHIDMessageToRemote_DeviceCloseDefaultTypeInternal {
  constexpr CHIDMessageToRemote_DeviceCloseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CHIDMessageToRemote_DeviceCloseDefaultTypeInternal() {}
  union {
    CHIDMessageToRemote_DeviceClose _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CHIDMessageToRemote_DeviceCloseDefaultTypeInternal _CHIDMessageToRemote_DeviceClose_default_instance_;
constexpr CHIDMessageToRemote_DeviceWrite::CHIDMessageToRemote_DeviceWrite(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , device_(0u){}
struct CHIDMessageToRemote_DeviceWriteDefaultTypeInternal {
  constexpr CHIDMessageToRemote_DeviceWriteDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CHIDMessageToRemote_DeviceWriteDefaultTypeInternal() {}
  union {
    CHIDMessageToRemote_DeviceWrite _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CHIDMessageToRemote_DeviceWriteDefaultTypeInternal _CHIDMessageToRemote_DeviceWrite_default_instance_;
constexpr CHIDMessageToRemote_DeviceRead::CHIDMessageToRemote_DeviceRead(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_(0u)
  , length_(0u)
  , timeout_ms_(0){}
struct CHIDMessageToRemote_DeviceReadDefaultTypeInternal {
  constexpr CHIDMessageToRemote_DeviceReadDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CHIDMessageToRemote_DeviceReadDefaultTypeInternal() {}
  union {
    CHIDMessageToRemote_DeviceRead _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CHIDMessageToRemote_DeviceReadDefaultTypeInternal _CHIDMessageToRemote_DeviceRead_default_instance_;
constexpr CHIDMessageToRemote_DeviceSendFeatureReport::CHIDMessageToRemote_DeviceSendFeatureReport(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , device_(0u){}
struct CHIDMessageToRemote_DeviceSendFeatureReportDefaultTypeInternal {
  constexpr CHIDMessageToRemote_DeviceSendFeatureReportDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CHIDMessageToRemote_DeviceSendFeatureReportDefaultTypeInternal() {}
  union {
    CHIDMessageToRemote_DeviceSendFeatureReport _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CHIDMessageToRemote_DeviceSendFeatureReportDefaultTypeInternal _CHIDMessageToRemote_DeviceSendFeatureReport_default_instance_;
constexpr CHIDMessageToRemote_DeviceGetFeatureReport::CHIDMessageToRemote_DeviceGetFeatureReport(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : report_number_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , device_(0u)
  , length_(0u){}
struct CHIDMessageToRemote_DeviceGetFeatureReportDefaultTypeInternal {
  constexpr CHIDMessageToRemote_DeviceGetFeatureReportDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CHIDMessageToRemote_DeviceGetFeatureReportDefaultTypeInternal() {}
  union {
    CHIDMessageToRemote_DeviceGetFeatureReport _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CHIDMessageToRemote_DeviceGetFeatureReportDefaultTypeInternal _CHIDMessageToRemote_DeviceGetFeatureReport_default_instance_;
constexpr CHIDMessageToRemote_DeviceGetVendorString::CHIDMessageToRemote_DeviceGetVendorString(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_(0u){}
struct CHIDMessageToRemote_DeviceGetVendorStringDefaultTypeInternal {
  constexpr CHIDMessageToRemote_DeviceGetVendorStringDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CHIDMessageToRemote_DeviceGetVendorStringDefaultTypeInternal() {}
  union {
    CHIDMessageToRemote_DeviceGetVendorString _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CHIDMessageToRemote_DeviceGetVendorStringDefaultTypeInternal _CHIDMessageToRemote_DeviceGetVendorString_default_instance_;
constexpr CHIDMessageToRemote_DeviceGetProductString::CHIDMessageToRemote_DeviceGetProductString(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_(0u){}
struct CHIDMessageToRemote_DeviceGetProductStringDefaultTypeInternal {
  constexpr CHIDMessageToRemote_DeviceGetProductStringDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CHIDMessageToRemote_DeviceGetProductStringDefaultTypeInternal() {}
  union {
    CHIDMessageToRemote_DeviceGetProductString _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CHIDMessageToRemote_DeviceGetProductStringDefaultTypeInternal _CHIDMessageToRemote_DeviceGetProductString_default_instance_;
constexpr CHIDMessageToRemote_DeviceGetSerialNumberString::CHIDMessageToRemote_DeviceGetSerialNumberString(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_(0u){}
struct CHIDMessageToRemote_DeviceGetSerialNumberStringDefaultTypeInternal {
  constexpr CHIDMessageToRemote_DeviceGetSerialNumberStringDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CHIDMessageToRemote_DeviceGetSerialNumberStringDefaultTypeInternal() {}
  union {
    CHIDMessageToRemote_DeviceGetSerialNumberString _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CHIDMessageToRemote_DeviceGetSerialNumberStringDefaultTypeInternal _CHIDMessageToRemote_DeviceGetSerialNumberString_default_instance_;
constexpr CHIDMessageToRemote_DeviceStartInputReports::CHIDMessageToRemote_DeviceStartInputReports(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_(0u)
  , length_(0u){}
struct CHIDMessageToRemote_DeviceStartInputReportsDefaultTypeInternal {
  constexpr CHIDMessageToRemote_DeviceStartInputReportsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CHIDMessageToRemote_DeviceStartInputReportsDefaultTypeInternal() {}
  union {
    CHIDMessageToRemote_DeviceStartInputReports _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CHIDMessageToRemote_DeviceStartInputReportsDefaultTypeInternal _CHIDMessageToRemote_DeviceStartInputReports_default_instance_;
constexpr CHIDMessageToRemote_DeviceRequestFullReport::CHIDMessageToRemote_DeviceRequestFullReport(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_(0u){}
struct CHIDMessageToRemote_DeviceRequestFullReportDefaultTypeInternal {
  constexpr CHIDMessageToRemote_DeviceRequestFullReportDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CHIDMessageToRemote_DeviceRequestFullReportDefaultTypeInternal() {}
  union {
    CHIDMessageToRemote_DeviceRequestFullReport _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CHIDMessageToRemote_DeviceRequestFullReportDefaultTypeInternal _CHIDMessageToRemote_DeviceRequestFullReport_default_instance_;
constexpr CHIDMessageToRemote_DeviceDisconnect::CHIDMessageToRemote_DeviceDisconnect(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , device_(0u)
  , disconnectmethod_(0)
{}
struct CHIDMessageToRemote_DeviceDisconnectDefaultTypeInternal {
  constexpr CHIDMessageToRemote_DeviceDisconnectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CHIDMessageToRemote_DeviceDisconnectDefaultTypeInternal() {}
  union {
    CHIDMessageToRemote_DeviceDisconnect _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CHIDMessageToRemote_DeviceDisconnectDefaultTypeInternal _CHIDMessageToRemote_DeviceDisconnect_default_instance_;
constexpr CHIDMessageToRemote::CHIDMessageToRemote(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : request_id_(0u)
  , _oneof_case_{}{}
struct CHIDMessageToRemoteDefaultTypeInternal {
  constexpr CHIDMessageToRemoteDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CHIDMessageToRemoteDefaultTypeInternal() {}
  union {
    CHIDMessageToRemote _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CHIDMessageToRemoteDefaultTypeInternal _CHIDMessageToRemote_default_instance_;
constexpr CHIDMessageFromRemote_UpdateDeviceList::CHIDMessageFromRemote_UpdateDeviceList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : devices_(){}
struct CHIDMessageFromRemote_UpdateDeviceListDefaultTypeInternal {
  constexpr CHIDMessageFromRemote_UpdateDeviceListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CHIDMessageFromRemote_UpdateDeviceListDefaultTypeInternal() {}
  union {
    CHIDMessageFromRemote_UpdateDeviceList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CHIDMessageFromRemote_UpdateDeviceListDefaultTypeInternal _CHIDMessageFromRemote_UpdateDeviceList_default_instance_;
constexpr CHIDMessageFromRemote_RequestResponse::CHIDMessageFromRemote_RequestResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , request_id_(0u)
  , result_(0){}
struct CHIDMessageFromRemote_RequestResponseDefaultTypeInternal {
  constexpr CHIDMessageFromRemote_RequestResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CHIDMessageFromRemote_RequestResponseDefaultTypeInternal() {}
  union {
    CHIDMessageFromRemote_RequestResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CHIDMessageFromRemote_RequestResponseDefaultTypeInternal _CHIDMessageFromRemote_RequestResponse_default_instance_;
constexpr CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reports_()
  , device_(0u){}
struct CHIDMessageFromRemote_DeviceInputReports_DeviceInputReportDefaultTypeInternal {
  constexpr CHIDMessageFromRemote_DeviceInputReports_DeviceInputReportDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CHIDMessageFromRemote_DeviceInputReports_DeviceInputReportDefaultTypeInternal() {}
  union {
    CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CHIDMessageFromRemote_DeviceInputReports_DeviceInputReportDefaultTypeInternal _CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport_default_instance_;
constexpr CHIDMessageFromRemote_DeviceInputReports::CHIDMessageFromRemote_DeviceInputReports(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_reports_(){}
struct CHIDMessageFromRemote_DeviceInputReportsDefaultTypeInternal {
  constexpr CHIDMessageFromRemote_DeviceInputReportsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CHIDMessageFromRemote_DeviceInputReportsDefaultTypeInternal() {}
  union {
    CHIDMessageFromRemote_DeviceInputReports _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CHIDMessageFromRemote_DeviceInputReportsDefaultTypeInternal _CHIDMessageFromRemote_DeviceInputReports_default_instance_;
constexpr CHIDMessageFromRemote_CloseDevice::CHIDMessageFromRemote_CloseDevice(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_(0u){}
struct CHIDMessageFromRemote_CloseDeviceDefaultTypeInternal {
  constexpr CHIDMessageFromRemote_CloseDeviceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CHIDMessageFromRemote_CloseDeviceDefaultTypeInternal() {}
  union {
    CHIDMessageFromRemote_CloseDevice _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CHIDMessageFromRemote_CloseDeviceDefaultTypeInternal _CHIDMessageFromRemote_CloseDevice_default_instance_;
constexpr CHIDMessageFromRemote_CloseAllDevices::CHIDMessageFromRemote_CloseAllDevices(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CHIDMessageFromRemote_CloseAllDevicesDefaultTypeInternal {
  constexpr CHIDMessageFromRemote_CloseAllDevicesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CHIDMessageFromRemote_CloseAllDevicesDefaultTypeInternal() {}
  union {
    CHIDMessageFromRemote_CloseAllDevices _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CHIDMessageFromRemote_CloseAllDevicesDefaultTypeInternal _CHIDMessageFromRemote_CloseAllDevices_default_instance_;
constexpr CHIDMessageFromRemote::CHIDMessageFromRemote(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct CHIDMessageFromRemoteDefaultTypeInternal {
  constexpr CHIDMessageFromRemoteDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CHIDMessageFromRemoteDefaultTypeInternal() {}
  union {
    CHIDMessageFromRemote _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CHIDMessageFromRemoteDefaultTypeInternal _CHIDMessageFromRemote_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steammessages_5fhiddevices_2eproto[22];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_steammessages_5fhiddevices_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_steammessages_5fhiddevices_2eproto = nullptr;

const uint32_t TableStruct_steammessages_5fhiddevices_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CHIDDeviceInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CHIDDeviceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CHIDDeviceInfo, location_),
  PROTOBUF_FIELD_OFFSET(::CHIDDeviceInfo, path_),
  PROTOBUF_FIELD_OFFSET(::CHIDDeviceInfo, vendor_id_),
  PROTOBUF_FIELD_OFFSET(::CHIDDeviceInfo, product_id_),
  PROTOBUF_FIELD_OFFSET(::CHIDDeviceInfo, serial_number_),
  PROTOBUF_FIELD_OFFSET(::CHIDDeviceInfo, release_number_),
  PROTOBUF_FIELD_OFFSET(::CHIDDeviceInfo, manufacturer_string_),
  PROTOBUF_FIELD_OFFSET(::CHIDDeviceInfo, product_string_),
  PROTOBUF_FIELD_OFFSET(::CHIDDeviceInfo, usage_page_),
  PROTOBUF_FIELD_OFFSET(::CHIDDeviceInfo, usage_),
  PROTOBUF_FIELD_OFFSET(::CHIDDeviceInfo, interface_number_),
  PROTOBUF_FIELD_OFFSET(::CHIDDeviceInfo, ostype_),
  PROTOBUF_FIELD_OFFSET(::CHIDDeviceInfo, is_generic_gamepad_),
  PROTOBUF_FIELD_OFFSET(::CHIDDeviceInfo, is_generic_joystick_),
  PROTOBUF_FIELD_OFFSET(::CHIDDeviceInfo, caps_bits_),
  PROTOBUF_FIELD_OFFSET(::CHIDDeviceInfo, session_id_),
  PROTOBUF_FIELD_OFFSET(::CHIDDeviceInfo, econtrollertype_obsolete_),
  PROTOBUF_FIELD_OFFSET(::CHIDDeviceInfo, is_xinput_device_obsolete_),
  PROTOBUF_FIELD_OFFSET(::CHIDDeviceInfo, session_remote_play_together_appid_),
  PROTOBUF_FIELD_OFFSET(::CHIDDeviceInfo, is_steamvr_device_),
  4,
  0,
  5,
  6,
  1,
  7,
  2,
  3,
  8,
  9,
  18,
  19,
  12,
  13,
  10,
  11,
  16,
  14,
  17,
  15,
  PROTOBUF_FIELD_OFFSET(::CHIDDeviceInputReport, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CHIDDeviceInputReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CHIDDeviceInputReport, full_report_),
  PROTOBUF_FIELD_OFFSET(::CHIDDeviceInputReport, delta_report_),
  PROTOBUF_FIELD_OFFSET(::CHIDDeviceInputReport, delta_report_size_),
  PROTOBUF_FIELD_OFFSET(::CHIDDeviceInputReport, delta_report_crc_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CHIDMessageToRemote_DeviceOpen, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CHIDMessageToRemote_DeviceOpen, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CHIDMessageToRemote_DeviceOpen, info_),
  0,
  PROTOBUF_FIELD_OFFSET(::CHIDMessageToRemote_DeviceClose, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CHIDMessageToRemote_DeviceClose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CHIDMessageToRemote_DeviceClose, device_),
  0,
  PROTOBUF_FIELD_OFFSET(::CHIDMessageToRemote_DeviceWrite, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CHIDMessageToRemote_DeviceWrite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CHIDMessageToRemote_DeviceWrite, device_),
  PROTOBUF_FIELD_OFFSET(::CHIDMessageToRemote_DeviceWrite, data_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CHIDMessageToRemote_DeviceRead, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CHIDMessageToRemote_DeviceRead, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CHIDMessageToRemote_DeviceRead, device_),
  PROTOBUF_FIELD_OFFSET(::CHIDMessageToRemote_DeviceRead, length_),
  PROTOBUF_FIELD_OFFSET(::CHIDMessageToRemote_DeviceRead, timeout_ms_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CHIDMessageToRemote_DeviceSendFeatureReport, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CHIDMessageToRemote_DeviceSendFeatureReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CHIDMessageToRemote_DeviceSendFeatureReport, device_),
  PROTOBUF_FIELD_OFFSET(::CHIDMessageToRemote_DeviceSendFeatureReport, data_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CHIDMessageToRemote_DeviceGetFeatureReport, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CHIDMessageToRemote_DeviceGetFeatureReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CHIDMessageToRemote_DeviceGetFeatureReport, device_),
  PROTOBUF_FIELD_OFFSET(::CHIDMessageToRemote_DeviceGetFeatureReport, report_number_),
  PROTOBUF_FIELD_OFFSET(::CHIDMessageToRemote_DeviceGetFeatureReport, length_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CHIDMessageToRemote_DeviceGetVendorString, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CHIDMessageToRemote_DeviceGetVendorString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CHIDMessageToRemote_DeviceGetVendorString, device_),
  0,
  PROTOBUF_FIELD_OFFSET(::CHIDMessageToRemote_DeviceGetProductString, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CHIDMessageToRemote_DeviceGetProductString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CHIDMessageToRemote_DeviceGetProductString, device_),
  0,
  PROTOBUF_FIELD_OFFSET(::CHIDMessageToRemote_DeviceGetSerialNumberString, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CHIDMessageToRemote_DeviceGetSerialNumberString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CHIDMessageToRemote_DeviceGetSerialNumberString, device_),
  0,
  PROTOBUF_FIELD_OFFSET(::CHIDMessageToRemote_DeviceStartInputReports, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CHIDMessageToRemote_DeviceStartInputReports, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CHIDMessageToRemote_DeviceStartInputReports, device_),
  PROTOBUF_FIELD_OFFSET(::CHIDMessageToRemote_DeviceStartInputReports, length_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CHIDMessageToRemote_DeviceRequestFullReport, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CHIDMessageToRemote_DeviceRequestFullReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CHIDMessageToRemote_DeviceRequestFullReport, device_),
  0,
  PROTOBUF_FIELD_OFFSET(::CHIDMessageToRemote_DeviceDisconnect, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CHIDMessageToRemote_DeviceDisconnect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CHIDMessageToRemote_DeviceDisconnect, device_),
  PROTOBUF_FIELD_OFFSET(::CHIDMessageToRemote_DeviceDisconnect, disconnectmethod_),
  PROTOBUF_FIELD_OFFSET(::CHIDMessageToRemote_DeviceDisconnect, data_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CHIDMessageToRemote, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CHIDMessageToRemote, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::CHIDMessageToRemote, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CHIDMessageToRemote, request_id_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::CHIDMessageToRemote, command_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CHIDMessageFromRemote_UpdateDeviceList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CHIDMessageFromRemote_UpdateDeviceList, devices_),
  PROTOBUF_FIELD_OFFSET(::CHIDMessageFromRemote_RequestResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CHIDMessageFromRemote_RequestResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CHIDMessageFromRemote_RequestResponse, request_id_),
  PROTOBUF_FIELD_OFFSET(::CHIDMessageFromRemote_RequestResponse, result_),
  PROTOBUF_FIELD_OFFSET(::CHIDMessageFromRemote_RequestResponse, data_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport, device_),
  PROTOBUF_FIELD_OFFSET(::CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport, reports_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CHIDMessageFromRemote_DeviceInputReports, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CHIDMessageFromRemote_DeviceInputReports, device_reports_),
  PROTOBUF_FIELD_OFFSET(::CHIDMessageFromRemote_CloseDevice, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CHIDMessageFromRemote_CloseDevice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CHIDMessageFromRemote_CloseDevice, device_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CHIDMessageFromRemote_CloseAllDevices, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CHIDMessageFromRemote, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::CHIDMessageFromRemote, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::CHIDMessageFromRemote, command_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 26, -1, sizeof(::CHIDDeviceInfo)},
  { 46, 56, -1, sizeof(::CHIDDeviceInputReport)},
  { 60, 67, -1, sizeof(::CHIDMessageToRemote_DeviceOpen)},
  { 68, 75, -1, sizeof(::CHIDMessageToRemote_DeviceClose)},
  { 76, 84, -1, sizeof(::CHIDMessageToRemote_DeviceWrite)},
  { 86, 95, -1, sizeof(::CHIDMessageToRemote_DeviceRead)},
  { 98, 106, -1, sizeof(::CHIDMessageToRemote_DeviceSendFeatureReport)},
  { 108, 117, -1, sizeof(::CHIDMessageToRemote_DeviceGetFeatureReport)},
  { 120, 127, -1, sizeof(::CHIDMessageToRemote_DeviceGetVendorString)},
  { 128, 135, -1, sizeof(::CHIDMessageToRemote_DeviceGetProductString)},
  { 136, 143, -1, sizeof(::CHIDMessageToRemote_DeviceGetSerialNumberString)},
  { 144, 152, -1, sizeof(::CHIDMessageToRemote_DeviceStartInputReports)},
  { 154, 161, -1, sizeof(::CHIDMessageToRemote_DeviceRequestFullReport)},
  { 162, 171, -1, sizeof(::CHIDMessageToRemote_DeviceDisconnect)},
  { 174, 194, -1, sizeof(::CHIDMessageToRemote)},
  { 207, -1, -1, sizeof(::CHIDMessageFromRemote_UpdateDeviceList)},
  { 214, 223, -1, sizeof(::CHIDMessageFromRemote_RequestResponse)},
  { 226, 234, -1, sizeof(::CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport)},
  { 236, -1, -1, sizeof(::CHIDMessageFromRemote_DeviceInputReports)},
  { 243, 250, -1, sizeof(::CHIDMessageFromRemote_CloseDevice)},
  { 251, -1, -1, sizeof(::CHIDMessageFromRemote_CloseAllDevices)},
  { 257, -1, -1, sizeof(::CHIDMessageFromRemote)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CHIDDeviceInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CHIDDeviceInputReport_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CHIDMessageToRemote_DeviceOpen_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CHIDMessageToRemote_DeviceClose_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CHIDMessageToRemote_DeviceWrite_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CHIDMessageToRemote_DeviceRead_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CHIDMessageToRemote_DeviceSendFeatureReport_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CHIDMessageToRemote_DeviceGetFeatureReport_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CHIDMessageToRemote_DeviceGetVendorString_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CHIDMessageToRemote_DeviceGetProductString_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CHIDMessageToRemote_DeviceGetSerialNumberString_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CHIDMessageToRemote_DeviceStartInputReports_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CHIDMessageToRemote_DeviceRequestFullReport_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CHIDMessageToRemote_DeviceDisconnect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CHIDMessageToRemote_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CHIDMessageFromRemote_UpdateDeviceList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CHIDMessageFromRemote_RequestResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CHIDMessageFromRemote_DeviceInputReports_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CHIDMessageFromRemote_CloseDevice_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CHIDMessageFromRemote_CloseAllDevices_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CHIDMessageFromRemote_default_instance_),
};

const char descriptor_table_protodef_steammessages_5fhiddevices_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036steammessages_hiddevices.proto\"\272\004\n\016CHI"
  "DDeviceInfo\022=\n\010location\030\001 \001(\0162\023.EHIDDevi"
  "ceLocation:\026k_EDeviceLocationLocal\022\014\n\004pa"
  "th\030\002 \001(\t\022\021\n\tvendor_id\030\003 \001(\r\022\022\n\nproduct_i"
  "d\030\004 \001(\r\022\025\n\rserial_number\030\005 \001(\t\022\026\n\016releas"
  "e_number\030\006 \001(\r\022\033\n\023manufacturer_string\030\007 "
  "\001(\t\022\026\n\016product_string\030\010 \001(\t\022\022\n\nusage_pag"
  "e\030\t \001(\r\022\r\n\005usage\030\n \001(\r\022\034\n\020interface_numb"
  "er\030\013 \001(\005:\002-1\022\022\n\006ostype\030\014 \001(\005:\002-1\022\032\n\022is_g"
  "eneric_gamepad\030\r \001(\010\022\033\n\023is_generic_joyst"
  "ick\030\016 \001(\010\022\021\n\tcaps_bits\030\017 \001(\r\022\022\n\nsession_"
  "id\030\020 \001(\r\022#\n\030eControllerType_OBSOLETE\030\021 \001"
  "(\r:\0010\022(\n\031is_xinput_device_OBSOLETE\030\022 \001(\010"
  ":\005false\022*\n\"session_remote_play_together_"
  "appid\030\023 \001(\r\022 \n\021is_steamvr_device\030\024 \001(\010:\005"
  "false\"w\n\025CHIDDeviceInputReport\022\023\n\013full_r"
  "eport\030\001 \001(\014\022\024\n\014delta_report\030\002 \001(\014\022\031\n\021del"
  "ta_report_size\030\003 \001(\r\022\030\n\020delta_report_crc"
  "\030\004 \001(\r\"\342\014\n\023CHIDMessageToRemote\022\022\n\nreques"
  "t_id\030\001 \001(\r\0226\n\013device_open\030\002 \001(\0132\037.CHIDMe"
  "ssageToRemote.DeviceOpenH\000\0228\n\014device_clo"
  "se\030\003 \001(\0132 .CHIDMessageToRemote.DeviceClo"
  "seH\000\0228\n\014device_write\030\004 \001(\0132 .CHIDMessage"
  "ToRemote.DeviceWriteH\000\0226\n\013device_read\030\005 "
  "\001(\0132\037.CHIDMessageToRemote.DeviceReadH\000\022R"
  "\n\032device_send_feature_report\030\006 \001(\0132,.CHI"
  "DMessageToRemote.DeviceSendFeatureReport"
  "H\000\022P\n\031device_get_feature_report\030\007 \001(\0132+."
  "CHIDMessageToRemote.DeviceGetFeatureRepo"
  "rtH\000\022N\n\030device_get_vendor_string\030\010 \001(\0132*"
  ".CHIDMessageToRemote.DeviceGetVendorStri"
  "ngH\000\022P\n\031device_get_product_string\030\t \001(\0132"
  "+.CHIDMessageToRemote.DeviceGetProductSt"
  "ringH\000\022[\n\037device_get_serial_number_strin"
  "g\030\n \001(\01320.CHIDMessageToRemote.DeviceGetS"
  "erialNumberStringH\000\022R\n\032device_start_inpu"
  "t_reports\030\013 \001(\0132,.CHIDMessageToRemote.De"
  "viceStartInputReportsH\000\022R\n\032device_reques"
  "t_full_report\030\014 \001(\0132,.CHIDMessageToRemot"
  "e.DeviceRequestFullReportH\000\022B\n\021device_di"
  "sconnect\030\r \001(\0132%.CHIDMessageToRemote.Dev"
  "iceDisconnectH\000\032+\n\nDeviceOpen\022\035\n\004info\030\001 "
  "\001(\0132\017.CHIDDeviceInfo\032\035\n\013DeviceClose\022\016\n\006d"
  "evice\030\001 \001(\r\032+\n\013DeviceWrite\022\016\n\006device\030\001 \001"
  "(\r\022\014\n\004data\030\002 \001(\014\032@\n\nDeviceRead\022\016\n\006device"
  "\030\001 \001(\r\022\016\n\006length\030\002 \001(\r\022\022\n\ntimeout_ms\030\003 \001"
  "(\005\0327\n\027DeviceSendFeatureReport\022\016\n\006device\030"
  "\001 \001(\r\022\014\n\004data\030\002 \001(\014\032O\n\026DeviceGetFeatureR"
  "eport\022\016\n\006device\030\001 \001(\r\022\025\n\rreport_number\030\002"
  " \001(\014\022\016\n\006length\030\003 \001(\r\032\'\n\025DeviceGetVendorS"
  "tring\022\016\n\006device\030\001 \001(\r\032(\n\026DeviceGetProduc"
  "tString\022\016\n\006device\030\001 \001(\r\032-\n\033DeviceGetSeri"
  "alNumberString\022\016\n\006device\030\001 \001(\r\0329\n\027Device"
  "StartInputReports\022\016\n\006device\030\001 \001(\r\022\016\n\006len"
  "gth\030\002 \001(\r\032)\n\027DeviceRequestFullReport\022\016\n\006"
  "device\030\001 \001(\r\032\211\001\n\020DeviceDisconnect\022\016\n\006dev"
  "ice\030\001 \001(\r\022W\n\020disconnectMethod\030\002 \001(\0162\033.EH"
  "IDDeviceDisconnectMethod: k_EDeviceDisco"
  "nnectMethodUnknown\022\014\n\004data\030\003 \001(\014B\t\n\007comm"
  "and\"\313\005\n\025CHIDMessageFromRemote\022E\n\022update_"
  "device_list\030\001 \001(\0132\'.CHIDMessageFromRemot"
  "e.UpdateDeviceListH\000\022:\n\010response\030\002 \001(\0132&"
  ".CHIDMessageFromRemote.RequestResponseH\000"
  "\022<\n\007reports\030\003 \001(\0132).CHIDMessageFromRemot"
  "e.DeviceInputReportsH\000\022:\n\014close_device\030\004"
  " \001(\0132\".CHIDMessageFromRemote.CloseDevice"
  "H\000\022C\n\021close_all_devices\030\005 \001(\0132&.CHIDMess"
  "ageFromRemote.CloseAllDevicesH\000\0324\n\020Updat"
  "eDeviceList\022 \n\007devices\030\001 \003(\0132\017.CHIDDevic"
  "eInfo\032C\n\017RequestResponse\022\022\n\nrequest_id\030\001"
  " \001(\r\022\016\n\006result\030\002 \001(\005\022\014\n\004data\030\003 \001(\014\032\267\001\n\022D"
  "eviceInputReports\022S\n\016device_reports\030\001 \003("
  "\0132;.CHIDMessageFromRemote.DeviceInputRep"
  "orts.DeviceInputReport\032L\n\021DeviceInputRep"
  "ort\022\016\n\006device\030\001 \001(\r\022\'\n\007reports\030\002 \003(\0132\026.C"
  "HIDDeviceInputReport\032\035\n\013CloseDevice\022\016\n\006d"
  "evice\030\001 \001(\r\032\021\n\017CloseAllDevicesB\t\n\007comman"
  "d*g\n\022EHIDDeviceLocation\022\032\n\026k_EDeviceLoca"
  "tionLocal\020\000\022\033\n\027k_EDeviceLocationRemote\020\002"
  "\022\030\n\024k_EDeviceLocationAny\020\003*\301\001\n\032EHIDDevic"
  "eDisconnectMethod\022$\n k_EDeviceDisconnect"
  "MethodUnknown\020\000\022&\n\"k_EDeviceDisconnectMe"
  "thodBluetooth\020\001\022*\n&k_EDeviceDisconnectMe"
  "thodFeatureReport\020\002\022)\n%k_EDeviceDisconne"
  "ctMethodOutputReport\020\003B\005H\001\200\001\000"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steammessages_5fhiddevices_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fhiddevices_2eproto = {
  false, false, 3389, descriptor_table_protodef_steammessages_5fhiddevices_2eproto, "steammessages_hiddevices.proto", 
  &descriptor_table_steammessages_5fhiddevices_2eproto_once, nullptr, 0, 22,
  schemas, file_default_instances, TableStruct_steammessages_5fhiddevices_2eproto::offsets,
  file_level_metadata_steammessages_5fhiddevices_2eproto, file_level_enum_descriptors_steammessages_5fhiddevices_2eproto, file_level_service_descriptors_steammessages_5fhiddevices_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_steammessages_5fhiddevices_2eproto_getter() {
  return &descriptor_table_steammessages_5fhiddevices_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_steammessages_5fhiddevices_2eproto(&descriptor_table_steammessages_5fhiddevices_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EHIDDeviceLocation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fhiddevices_2eproto);
  return file_level_enum_descriptors_steammessages_5fhiddevices_2eproto[0];
}
bool EHIDDeviceLocation_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EHIDDeviceDisconnectMethod_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fhiddevices_2eproto);
  return file_level_enum_descriptors_steammessages_5fhiddevices_2eproto[1];
}
bool EHIDDeviceDisconnectMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CHIDDeviceInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CHIDDeviceInfo>()._has_bits_);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_vendor_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_product_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_serial_number(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_release_number(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_manufacturer_string(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_product_string(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_usage_page(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_usage(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_interface_number(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_ostype(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_is_generic_gamepad(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_is_generic_joystick(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_caps_bits(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_econtrollertype_obsolete(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_is_xinput_device_obsolete(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_session_remote_play_together_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_is_steamvr_device(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
};

CHIDDeviceInfo::CHIDDeviceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CHIDDeviceInfo)
}
CHIDDeviceInfo::CHIDDeviceInfo(const CHIDDeviceInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_path()) {
    path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path(), 
      GetArenaForAllocation());
  }
  serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_serial_number()) {
    serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_serial_number(), 
      GetArenaForAllocation());
  }
  manufacturer_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    manufacturer_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_manufacturer_string()) {
    manufacturer_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_manufacturer_string(), 
      GetArenaForAllocation());
  }
  product_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    product_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_product_string()) {
    product_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_product_string(), 
      GetArenaForAllocation());
  }
  ::memcpy(&location_, &from.location_,
    static_cast<size_t>(reinterpret_cast<char*>(&ostype_) -
    reinterpret_cast<char*>(&location_)) + sizeof(ostype_));
  // @@protoc_insertion_point(copy_constructor:CHIDDeviceInfo)
}

inline void CHIDDeviceInfo::SharedCtor() {
path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
manufacturer_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  manufacturer_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
product_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  product_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&location_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&session_remote_play_together_appid_) -
    reinterpret_cast<char*>(&location_)) + sizeof(session_remote_play_together_appid_));
interface_number_ = -1;
ostype_ = -1;
}

CHIDDeviceInfo::~CHIDDeviceInfo() {
  // @@protoc_insertion_point(destructor:CHIDDeviceInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CHIDDeviceInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serial_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  manufacturer_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  product_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CHIDDeviceInfo::ArenaDtor(void* object) {
  CHIDDeviceInfo* _this = reinterpret_cast< CHIDDeviceInfo* >(object);
  (void)_this;
}
void CHIDDeviceInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CHIDDeviceInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CHIDDeviceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CHIDDeviceInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      path_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      serial_number_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      manufacturer_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      product_string_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&location_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&release_number_) -
        reinterpret_cast<char*>(&location_)) + sizeof(release_number_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&usage_page_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_steamvr_device_) -
        reinterpret_cast<char*>(&usage_page_)) + sizeof(is_steamvr_device_));
  }
  if (cached_has_bits & 0x000f0000u) {
    ::memset(&econtrollertype_obsolete_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&session_remote_play_together_appid_) -
        reinterpret_cast<char*>(&econtrollertype_obsolete_)) + sizeof(session_remote_play_together_appid_));
    interface_number_ = -1;
    ostype_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CHIDDeviceInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .EHIDDeviceLocation location = 1 [default = k_EDeviceLocationLocal];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EHIDDeviceLocation_IsValid(val))) {
            _internal_set_location(static_cast<::EHIDDeviceLocation>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CHIDDeviceInfo.path");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 vendor_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_vendor_id(&has_bits);
          vendor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 product_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_product_id(&has_bits);
          product_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string serial_number = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_serial_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CHIDDeviceInfo.serial_number");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 release_number = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_release_number(&has_bits);
          release_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string manufacturer_string = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_manufacturer_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CHIDDeviceInfo.manufacturer_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string product_string = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_product_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CHIDDeviceInfo.product_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 usage_page = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_usage_page(&has_bits);
          usage_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 usage = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_usage(&has_bits);
          usage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 interface_number = 11 [default = -1];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_interface_number(&has_bits);
          interface_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 ostype = 12 [default = -1];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_ostype(&has_bits);
          ostype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_generic_gamepad = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_is_generic_gamepad(&has_bits);
          is_generic_gamepad_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_generic_joystick = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_is_generic_joystick(&has_bits);
          is_generic_joystick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 caps_bits = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_caps_bits(&has_bits);
          caps_bits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 session_id = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_session_id(&has_bits);
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 eControllerType_OBSOLETE = 17 [default = 0];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_econtrollertype_obsolete(&has_bits);
          econtrollertype_obsolete_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_xinput_device_OBSOLETE = 18 [default = false];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_is_xinput_device_obsolete(&has_bits);
          is_xinput_device_obsolete_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 session_remote_play_together_appid = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_session_remote_play_together_appid(&has_bits);
          session_remote_play_together_appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_steamvr_device = 20 [default = false];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_is_steamvr_device(&has_bits);
          is_steamvr_device_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CHIDDeviceInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CHIDDeviceInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .EHIDDeviceLocation location = 1 [default = k_EDeviceLocationLocal];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_location(), target);
  }

  // optional string path = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CHIDDeviceInfo.path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_path(), target);
  }

  // optional uint32 vendor_id = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_vendor_id(), target);
  }

  // optional uint32 product_id = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_product_id(), target);
  }

  // optional string serial_number = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_serial_number().data(), static_cast<int>(this->_internal_serial_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CHIDDeviceInfo.serial_number");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_serial_number(), target);
  }

  // optional uint32 release_number = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_release_number(), target);
  }

  // optional string manufacturer_string = 7;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_manufacturer_string().data(), static_cast<int>(this->_internal_manufacturer_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CHIDDeviceInfo.manufacturer_string");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_manufacturer_string(), target);
  }

  // optional string product_string = 8;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_product_string().data(), static_cast<int>(this->_internal_product_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CHIDDeviceInfo.product_string");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_product_string(), target);
  }

  // optional uint32 usage_page = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_usage_page(), target);
  }

  // optional uint32 usage = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_usage(), target);
  }

  // optional int32 interface_number = 11 [default = -1];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_interface_number(), target);
  }

  // optional int32 ostype = 12 [default = -1];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_ostype(), target);
  }

  // optional bool is_generic_gamepad = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_is_generic_gamepad(), target);
  }

  // optional bool is_generic_joystick = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_is_generic_joystick(), target);
  }

  // optional uint32 caps_bits = 15;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_caps_bits(), target);
  }

  // optional uint32 session_id = 16;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_session_id(), target);
  }

  // optional uint32 eControllerType_OBSOLETE = 17 [default = 0];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_econtrollertype_obsolete(), target);
  }

  // optional bool is_xinput_device_OBSOLETE = 18 [default = false];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_is_xinput_device_obsolete(), target);
  }

  // optional uint32 session_remote_play_together_appid = 19;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_session_remote_play_together_appid(), target);
  }

  // optional bool is_steamvr_device = 20 [default = false];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_is_steamvr_device(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CHIDDeviceInfo)
  return target;
}

size_t CHIDDeviceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CHIDDeviceInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string path = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_path());
    }

    // optional string serial_number = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_serial_number());
    }

    // optional string manufacturer_string = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_manufacturer_string());
    }

    // optional string product_string = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_product_string());
    }

    // optional .EHIDDeviceLocation location = 1 [default = k_EDeviceLocationLocal];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_location());
    }

    // optional uint32 vendor_id = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_vendor_id());
    }

    // optional uint32 product_id = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_product_id());
    }

    // optional uint32 release_number = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_release_number());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 usage_page = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_usage_page());
    }

    // optional uint32 usage = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_usage());
    }

    // optional uint32 caps_bits = 15;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_caps_bits());
    }

    // optional uint32 session_id = 16;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_session_id());
    }

    // optional bool is_generic_gamepad = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool is_generic_joystick = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool is_xinput_device_OBSOLETE = 18 [default = false];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional bool is_steamvr_device = 20 [default = false];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x000f0000u) {
    // optional uint32 eControllerType_OBSOLETE = 17 [default = 0];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_econtrollertype_obsolete());
    }

    // optional uint32 session_remote_play_together_appid = 19;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_session_remote_play_together_appid());
    }

    // optional int32 interface_number = 11 [default = -1];
    if (cached_has_bits & 0x00040000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_interface_number());
    }

    // optional int32 ostype = 12 [default = -1];
    if (cached_has_bits & 0x00080000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_ostype());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CHIDDeviceInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CHIDDeviceInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CHIDDeviceInfo::GetClassData() const { return &_class_data_; }

void CHIDDeviceInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CHIDDeviceInfo *>(to)->MergeFrom(
      static_cast<const CHIDDeviceInfo &>(from));
}


void CHIDDeviceInfo::MergeFrom(const CHIDDeviceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CHIDDeviceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_path(from._internal_path());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_serial_number(from._internal_serial_number());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_manufacturer_string(from._internal_manufacturer_string());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_product_string(from._internal_product_string());
    }
    if (cached_has_bits & 0x00000010u) {
      location_ = from.location_;
    }
    if (cached_has_bits & 0x00000020u) {
      vendor_id_ = from.vendor_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      product_id_ = from.product_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      release_number_ = from.release_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      usage_page_ = from.usage_page_;
    }
    if (cached_has_bits & 0x00000200u) {
      usage_ = from.usage_;
    }
    if (cached_has_bits & 0x00000400u) {
      caps_bits_ = from.caps_bits_;
    }
    if (cached_has_bits & 0x00000800u) {
      session_id_ = from.session_id_;
    }
    if (cached_has_bits & 0x00001000u) {
      is_generic_gamepad_ = from.is_generic_gamepad_;
    }
    if (cached_has_bits & 0x00002000u) {
      is_generic_joystick_ = from.is_generic_joystick_;
    }
    if (cached_has_bits & 0x00004000u) {
      is_xinput_device_obsolete_ = from.is_xinput_device_obsolete_;
    }
    if (cached_has_bits & 0x00008000u) {
      is_steamvr_device_ = from.is_steamvr_device_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      econtrollertype_obsolete_ = from.econtrollertype_obsolete_;
    }
    if (cached_has_bits & 0x00020000u) {
      session_remote_play_together_appid_ = from.session_remote_play_together_appid_;
    }
    if (cached_has_bits & 0x00040000u) {
      interface_number_ = from.interface_number_;
    }
    if (cached_has_bits & 0x00080000u) {
      ostype_ = from.ostype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CHIDDeviceInfo::CopyFrom(const CHIDDeviceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CHIDDeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHIDDeviceInfo::IsInitialized() const {
  return true;
}

void CHIDDeviceInfo::InternalSwap(CHIDDeviceInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &path_, lhs_arena,
      &other->path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &serial_number_, lhs_arena,
      &other->serial_number_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &manufacturer_string_, lhs_arena,
      &other->manufacturer_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &product_string_, lhs_arena,
      &other->product_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CHIDDeviceInfo, session_remote_play_together_appid_)
      + sizeof(CHIDDeviceInfo::session_remote_play_together_appid_)
      - PROTOBUF_FIELD_OFFSET(CHIDDeviceInfo, location_)>(
          reinterpret_cast<char*>(&location_),
          reinterpret_cast<char*>(&other->location_));
  swap(interface_number_, other->interface_number_);
  swap(ostype_, other->ostype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CHIDDeviceInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fhiddevices_2eproto_getter, &descriptor_table_steammessages_5fhiddevices_2eproto_once,
      file_level_metadata_steammessages_5fhiddevices_2eproto[0]);
}

// ===================================================================

class CHIDDeviceInputReport::_Internal {
 public:
  using HasBits = decltype(std::declval<CHIDDeviceInputReport>()._has_bits_);
  static void set_has_full_report(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_delta_report(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_delta_report_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_delta_report_crc(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CHIDDeviceInputReport::CHIDDeviceInputReport(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CHIDDeviceInputReport)
}
CHIDDeviceInputReport::CHIDDeviceInputReport(const CHIDDeviceInputReport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  full_report_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    full_report_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_full_report()) {
    full_report_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_full_report(), 
      GetArenaForAllocation());
  }
  delta_report_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    delta_report_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_delta_report()) {
    delta_report_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_delta_report(), 
      GetArenaForAllocation());
  }
  ::memcpy(&delta_report_size_, &from.delta_report_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&delta_report_crc_) -
    reinterpret_cast<char*>(&delta_report_size_)) + sizeof(delta_report_crc_));
  // @@protoc_insertion_point(copy_constructor:CHIDDeviceInputReport)
}

inline void CHIDDeviceInputReport::SharedCtor() {
full_report_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  full_report_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
delta_report_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  delta_report_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&delta_report_size_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&delta_report_crc_) -
    reinterpret_cast<char*>(&delta_report_size_)) + sizeof(delta_report_crc_));
}

CHIDDeviceInputReport::~CHIDDeviceInputReport() {
  // @@protoc_insertion_point(destructor:CHIDDeviceInputReport)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CHIDDeviceInputReport::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  full_report_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  delta_report_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CHIDDeviceInputReport::ArenaDtor(void* object) {
  CHIDDeviceInputReport* _this = reinterpret_cast< CHIDDeviceInputReport* >(object);
  (void)_this;
}
void CHIDDeviceInputReport::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CHIDDeviceInputReport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CHIDDeviceInputReport::Clear() {
// @@protoc_insertion_point(message_clear_start:CHIDDeviceInputReport)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      full_report_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      delta_report_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&delta_report_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&delta_report_crc_) -
        reinterpret_cast<char*>(&delta_report_size_)) + sizeof(delta_report_crc_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CHIDDeviceInputReport::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes full_report = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_full_report();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes delta_report = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_delta_report();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 delta_report_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_delta_report_size(&has_bits);
          delta_report_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 delta_report_crc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_delta_report_crc(&has_bits);
          delta_report_crc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CHIDDeviceInputReport::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CHIDDeviceInputReport)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes full_report = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_full_report(), target);
  }

  // optional bytes delta_report = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_delta_report(), target);
  }

  // optional uint32 delta_report_size = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_delta_report_size(), target);
  }

  // optional uint32 delta_report_crc = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_delta_report_crc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CHIDDeviceInputReport)
  return target;
}

size_t CHIDDeviceInputReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CHIDDeviceInputReport)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes full_report = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_full_report());
    }

    // optional bytes delta_report = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_delta_report());
    }

    // optional uint32 delta_report_size = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_delta_report_size());
    }

    // optional uint32 delta_report_crc = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_delta_report_crc());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CHIDDeviceInputReport::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CHIDDeviceInputReport::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CHIDDeviceInputReport::GetClassData() const { return &_class_data_; }

void CHIDDeviceInputReport::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CHIDDeviceInputReport *>(to)->MergeFrom(
      static_cast<const CHIDDeviceInputReport &>(from));
}


void CHIDDeviceInputReport::MergeFrom(const CHIDDeviceInputReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CHIDDeviceInputReport)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_full_report(from._internal_full_report());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_delta_report(from._internal_delta_report());
    }
    if (cached_has_bits & 0x00000004u) {
      delta_report_size_ = from.delta_report_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      delta_report_crc_ = from.delta_report_crc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CHIDDeviceInputReport::CopyFrom(const CHIDDeviceInputReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CHIDDeviceInputReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHIDDeviceInputReport::IsInitialized() const {
  return true;
}

void CHIDDeviceInputReport::InternalSwap(CHIDDeviceInputReport* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &full_report_, lhs_arena,
      &other->full_report_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &delta_report_, lhs_arena,
      &other->delta_report_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CHIDDeviceInputReport, delta_report_crc_)
      + sizeof(CHIDDeviceInputReport::delta_report_crc_)
      - PROTOBUF_FIELD_OFFSET(CHIDDeviceInputReport, delta_report_size_)>(
          reinterpret_cast<char*>(&delta_report_size_),
          reinterpret_cast<char*>(&other->delta_report_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CHIDDeviceInputReport::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fhiddevices_2eproto_getter, &descriptor_table_steammessages_5fhiddevices_2eproto_once,
      file_level_metadata_steammessages_5fhiddevices_2eproto[1]);
}

// ===================================================================

class CHIDMessageToRemote_DeviceOpen::_Internal {
 public:
  using HasBits = decltype(std::declval<CHIDMessageToRemote_DeviceOpen>()._has_bits_);
  static const ::CHIDDeviceInfo& info(const CHIDMessageToRemote_DeviceOpen* msg);
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CHIDDeviceInfo&
CHIDMessageToRemote_DeviceOpen::_Internal::info(const CHIDMessageToRemote_DeviceOpen* msg) {
  return *msg->info_;
}
CHIDMessageToRemote_DeviceOpen::CHIDMessageToRemote_DeviceOpen(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CHIDMessageToRemote.DeviceOpen)
}
CHIDMessageToRemote_DeviceOpen::CHIDMessageToRemote_DeviceOpen(const CHIDMessageToRemote_DeviceOpen& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info()) {
    info_ = new ::CHIDDeviceInfo(*from.info_);
  } else {
    info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CHIDMessageToRemote.DeviceOpen)
}

inline void CHIDMessageToRemote_DeviceOpen::SharedCtor() {
info_ = nullptr;
}

CHIDMessageToRemote_DeviceOpen::~CHIDMessageToRemote_DeviceOpen() {
  // @@protoc_insertion_point(destructor:CHIDMessageToRemote.DeviceOpen)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CHIDMessageToRemote_DeviceOpen::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete info_;
}

void CHIDMessageToRemote_DeviceOpen::ArenaDtor(void* object) {
  CHIDMessageToRemote_DeviceOpen* _this = reinterpret_cast< CHIDMessageToRemote_DeviceOpen* >(object);
  (void)_this;
}
void CHIDMessageToRemote_DeviceOpen::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CHIDMessageToRemote_DeviceOpen::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CHIDMessageToRemote_DeviceOpen::Clear() {
// @@protoc_insertion_point(message_clear_start:CHIDMessageToRemote.DeviceOpen)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(info_ != nullptr);
    info_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CHIDMessageToRemote_DeviceOpen::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CHIDDeviceInfo info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CHIDMessageToRemote_DeviceOpen::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CHIDMessageToRemote.DeviceOpen)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CHIDDeviceInfo info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CHIDMessageToRemote.DeviceOpen)
  return target;
}

size_t CHIDMessageToRemote_DeviceOpen::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CHIDMessageToRemote.DeviceOpen)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CHIDDeviceInfo info = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CHIDMessageToRemote_DeviceOpen::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CHIDMessageToRemote_DeviceOpen::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CHIDMessageToRemote_DeviceOpen::GetClassData() const { return &_class_data_; }

void CHIDMessageToRemote_DeviceOpen::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CHIDMessageToRemote_DeviceOpen *>(to)->MergeFrom(
      static_cast<const CHIDMessageToRemote_DeviceOpen &>(from));
}


void CHIDMessageToRemote_DeviceOpen::MergeFrom(const CHIDMessageToRemote_DeviceOpen& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CHIDMessageToRemote.DeviceOpen)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_info()) {
    _internal_mutable_info()->::CHIDDeviceInfo::MergeFrom(from._internal_info());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CHIDMessageToRemote_DeviceOpen::CopyFrom(const CHIDMessageToRemote_DeviceOpen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CHIDMessageToRemote.DeviceOpen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHIDMessageToRemote_DeviceOpen::IsInitialized() const {
  return true;
}

void CHIDMessageToRemote_DeviceOpen::InternalSwap(CHIDMessageToRemote_DeviceOpen* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(info_, other->info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CHIDMessageToRemote_DeviceOpen::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fhiddevices_2eproto_getter, &descriptor_table_steammessages_5fhiddevices_2eproto_once,
      file_level_metadata_steammessages_5fhiddevices_2eproto[2]);
}

// ===================================================================

class CHIDMessageToRemote_DeviceClose::_Internal {
 public:
  using HasBits = decltype(std::declval<CHIDMessageToRemote_DeviceClose>()._has_bits_);
  static void set_has_device(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CHIDMessageToRemote_DeviceClose::CHIDMessageToRemote_DeviceClose(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CHIDMessageToRemote.DeviceClose)
}
CHIDMessageToRemote_DeviceClose::CHIDMessageToRemote_DeviceClose(const CHIDMessageToRemote_DeviceClose& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_ = from.device_;
  // @@protoc_insertion_point(copy_constructor:CHIDMessageToRemote.DeviceClose)
}

inline void CHIDMessageToRemote_DeviceClose::SharedCtor() {
device_ = 0u;
}

CHIDMessageToRemote_DeviceClose::~CHIDMessageToRemote_DeviceClose() {
  // @@protoc_insertion_point(destructor:CHIDMessageToRemote.DeviceClose)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CHIDMessageToRemote_DeviceClose::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CHIDMessageToRemote_DeviceClose::ArenaDtor(void* object) {
  CHIDMessageToRemote_DeviceClose* _this = reinterpret_cast< CHIDMessageToRemote_DeviceClose* >(object);
  (void)_this;
}
void CHIDMessageToRemote_DeviceClose::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CHIDMessageToRemote_DeviceClose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CHIDMessageToRemote_DeviceClose::Clear() {
// @@protoc_insertion_point(message_clear_start:CHIDMessageToRemote.DeviceClose)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CHIDMessageToRemote_DeviceClose::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 device = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_device(&has_bits);
          device_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CHIDMessageToRemote_DeviceClose::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CHIDMessageToRemote.DeviceClose)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 device = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_device(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CHIDMessageToRemote.DeviceClose)
  return target;
}

size_t CHIDMessageToRemote_DeviceClose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CHIDMessageToRemote.DeviceClose)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 device = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_device());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CHIDMessageToRemote_DeviceClose::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CHIDMessageToRemote_DeviceClose::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CHIDMessageToRemote_DeviceClose::GetClassData() const { return &_class_data_; }

void CHIDMessageToRemote_DeviceClose::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CHIDMessageToRemote_DeviceClose *>(to)->MergeFrom(
      static_cast<const CHIDMessageToRemote_DeviceClose &>(from));
}


void CHIDMessageToRemote_DeviceClose::MergeFrom(const CHIDMessageToRemote_DeviceClose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CHIDMessageToRemote.DeviceClose)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_device()) {
    _internal_set_device(from._internal_device());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CHIDMessageToRemote_DeviceClose::CopyFrom(const CHIDMessageToRemote_DeviceClose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CHIDMessageToRemote.DeviceClose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHIDMessageToRemote_DeviceClose::IsInitialized() const {
  return true;
}

void CHIDMessageToRemote_DeviceClose::InternalSwap(CHIDMessageToRemote_DeviceClose* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(device_, other->device_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CHIDMessageToRemote_DeviceClose::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fhiddevices_2eproto_getter, &descriptor_table_steammessages_5fhiddevices_2eproto_once,
      file_level_metadata_steammessages_5fhiddevices_2eproto[3]);
}

// ===================================================================

class CHIDMessageToRemote_DeviceWrite::_Internal {
 public:
  using HasBits = decltype(std::declval<CHIDMessageToRemote_DeviceWrite>()._has_bits_);
  static void set_has_device(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CHIDMessageToRemote_DeviceWrite::CHIDMessageToRemote_DeviceWrite(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CHIDMessageToRemote.DeviceWrite)
}
CHIDMessageToRemote_DeviceWrite::CHIDMessageToRemote_DeviceWrite(const CHIDMessageToRemote_DeviceWrite& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_data()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  device_ = from.device_;
  // @@protoc_insertion_point(copy_constructor:CHIDMessageToRemote.DeviceWrite)
}

inline void CHIDMessageToRemote_DeviceWrite::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
device_ = 0u;
}

CHIDMessageToRemote_DeviceWrite::~CHIDMessageToRemote_DeviceWrite() {
  // @@protoc_insertion_point(destructor:CHIDMessageToRemote.DeviceWrite)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CHIDMessageToRemote_DeviceWrite::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CHIDMessageToRemote_DeviceWrite::ArenaDtor(void* object) {
  CHIDMessageToRemote_DeviceWrite* _this = reinterpret_cast< CHIDMessageToRemote_DeviceWrite* >(object);
  (void)_this;
}
void CHIDMessageToRemote_DeviceWrite::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CHIDMessageToRemote_DeviceWrite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CHIDMessageToRemote_DeviceWrite::Clear() {
// @@protoc_insertion_point(message_clear_start:CHIDMessageToRemote.DeviceWrite)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmpty();
  }
  device_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CHIDMessageToRemote_DeviceWrite::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 device = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_device(&has_bits);
          device_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CHIDMessageToRemote_DeviceWrite::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CHIDMessageToRemote.DeviceWrite)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 device = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_device(), target);
  }

  // optional bytes data = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CHIDMessageToRemote.DeviceWrite)
  return target;
}

size_t CHIDMessageToRemote_DeviceWrite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CHIDMessageToRemote.DeviceWrite)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes data = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_data());
    }

    // optional uint32 device = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_device());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CHIDMessageToRemote_DeviceWrite::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CHIDMessageToRemote_DeviceWrite::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CHIDMessageToRemote_DeviceWrite::GetClassData() const { return &_class_data_; }

void CHIDMessageToRemote_DeviceWrite::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CHIDMessageToRemote_DeviceWrite *>(to)->MergeFrom(
      static_cast<const CHIDMessageToRemote_DeviceWrite &>(from));
}


void CHIDMessageToRemote_DeviceWrite::MergeFrom(const CHIDMessageToRemote_DeviceWrite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CHIDMessageToRemote.DeviceWrite)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_data(from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      device_ = from.device_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CHIDMessageToRemote_DeviceWrite::CopyFrom(const CHIDMessageToRemote_DeviceWrite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CHIDMessageToRemote.DeviceWrite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHIDMessageToRemote_DeviceWrite::IsInitialized() const {
  return true;
}

void CHIDMessageToRemote_DeviceWrite::InternalSwap(CHIDMessageToRemote_DeviceWrite* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
  swap(device_, other->device_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CHIDMessageToRemote_DeviceWrite::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fhiddevices_2eproto_getter, &descriptor_table_steammessages_5fhiddevices_2eproto_once,
      file_level_metadata_steammessages_5fhiddevices_2eproto[4]);
}

// ===================================================================

class CHIDMessageToRemote_DeviceRead::_Internal {
 public:
  using HasBits = decltype(std::declval<CHIDMessageToRemote_DeviceRead>()._has_bits_);
  static void set_has_device(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_timeout_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CHIDMessageToRemote_DeviceRead::CHIDMessageToRemote_DeviceRead(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CHIDMessageToRemote.DeviceRead)
}
CHIDMessageToRemote_DeviceRead::CHIDMessageToRemote_DeviceRead(const CHIDMessageToRemote_DeviceRead& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&device_, &from.device_,
    static_cast<size_t>(reinterpret_cast<char*>(&timeout_ms_) -
    reinterpret_cast<char*>(&device_)) + sizeof(timeout_ms_));
  // @@protoc_insertion_point(copy_constructor:CHIDMessageToRemote.DeviceRead)
}

inline void CHIDMessageToRemote_DeviceRead::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&device_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timeout_ms_) -
    reinterpret_cast<char*>(&device_)) + sizeof(timeout_ms_));
}

CHIDMessageToRemote_DeviceRead::~CHIDMessageToRemote_DeviceRead() {
  // @@protoc_insertion_point(destructor:CHIDMessageToRemote.DeviceRead)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CHIDMessageToRemote_DeviceRead::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CHIDMessageToRemote_DeviceRead::ArenaDtor(void* object) {
  CHIDMessageToRemote_DeviceRead* _this = reinterpret_cast< CHIDMessageToRemote_DeviceRead* >(object);
  (void)_this;
}
void CHIDMessageToRemote_DeviceRead::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CHIDMessageToRemote_DeviceRead::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CHIDMessageToRemote_DeviceRead::Clear() {
// @@protoc_insertion_point(message_clear_start:CHIDMessageToRemote.DeviceRead)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&device_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timeout_ms_) -
        reinterpret_cast<char*>(&device_)) + sizeof(timeout_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CHIDMessageToRemote_DeviceRead::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 device = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_device(&has_bits);
          device_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_length(&has_bits);
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 timeout_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_timeout_ms(&has_bits);
          timeout_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CHIDMessageToRemote_DeviceRead::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CHIDMessageToRemote.DeviceRead)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 device = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_device(), target);
  }

  // optional uint32 length = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_length(), target);
  }

  // optional int32 timeout_ms = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_timeout_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CHIDMessageToRemote.DeviceRead)
  return target;
}

size_t CHIDMessageToRemote_DeviceRead::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CHIDMessageToRemote.DeviceRead)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 device = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_device());
    }

    // optional uint32 length = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_length());
    }

    // optional int32 timeout_ms = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_timeout_ms());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CHIDMessageToRemote_DeviceRead::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CHIDMessageToRemote_DeviceRead::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CHIDMessageToRemote_DeviceRead::GetClassData() const { return &_class_data_; }

void CHIDMessageToRemote_DeviceRead::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CHIDMessageToRemote_DeviceRead *>(to)->MergeFrom(
      static_cast<const CHIDMessageToRemote_DeviceRead &>(from));
}


void CHIDMessageToRemote_DeviceRead::MergeFrom(const CHIDMessageToRemote_DeviceRead& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CHIDMessageToRemote.DeviceRead)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      device_ = from.device_;
    }
    if (cached_has_bits & 0x00000002u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00000004u) {
      timeout_ms_ = from.timeout_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CHIDMessageToRemote_DeviceRead::CopyFrom(const CHIDMessageToRemote_DeviceRead& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CHIDMessageToRemote.DeviceRead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHIDMessageToRemote_DeviceRead::IsInitialized() const {
  return true;
}

void CHIDMessageToRemote_DeviceRead::InternalSwap(CHIDMessageToRemote_DeviceRead* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CHIDMessageToRemote_DeviceRead, timeout_ms_)
      + sizeof(CHIDMessageToRemote_DeviceRead::timeout_ms_)
      - PROTOBUF_FIELD_OFFSET(CHIDMessageToRemote_DeviceRead, device_)>(
          reinterpret_cast<char*>(&device_),
          reinterpret_cast<char*>(&other->device_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CHIDMessageToRemote_DeviceRead::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fhiddevices_2eproto_getter, &descriptor_table_steammessages_5fhiddevices_2eproto_once,
      file_level_metadata_steammessages_5fhiddevices_2eproto[5]);
}

// ===================================================================

class CHIDMessageToRemote_DeviceSendFeatureReport::_Internal {
 public:
  using HasBits = decltype(std::declval<CHIDMessageToRemote_DeviceSendFeatureReport>()._has_bits_);
  static void set_has_device(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CHIDMessageToRemote_DeviceSendFeatureReport::CHIDMessageToRemote_DeviceSendFeatureReport(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CHIDMessageToRemote.DeviceSendFeatureReport)
}
CHIDMessageToRemote_DeviceSendFeatureReport::CHIDMessageToRemote_DeviceSendFeatureReport(const CHIDMessageToRemote_DeviceSendFeatureReport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_data()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  device_ = from.device_;
  // @@protoc_insertion_point(copy_constructor:CHIDMessageToRemote.DeviceSendFeatureReport)
}

inline void CHIDMessageToRemote_DeviceSendFeatureReport::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
device_ = 0u;
}

CHIDMessageToRemote_DeviceSendFeatureReport::~CHIDMessageToRemote_DeviceSendFeatureReport() {
  // @@protoc_insertion_point(destructor:CHIDMessageToRemote.DeviceSendFeatureReport)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CHIDMessageToRemote_DeviceSendFeatureReport::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CHIDMessageToRemote_DeviceSendFeatureReport::ArenaDtor(void* object) {
  CHIDMessageToRemote_DeviceSendFeatureReport* _this = reinterpret_cast< CHIDMessageToRemote_DeviceSendFeatureReport* >(object);
  (void)_this;
}
void CHIDMessageToRemote_DeviceSendFeatureReport::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CHIDMessageToRemote_DeviceSendFeatureReport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CHIDMessageToRemote_DeviceSendFeatureReport::Clear() {
// @@protoc_insertion_point(message_clear_start:CHIDMessageToRemote.DeviceSendFeatureReport)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmpty();
  }
  device_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CHIDMessageToRemote_DeviceSendFeatureReport::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 device = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_device(&has_bits);
          device_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CHIDMessageToRemote_DeviceSendFeatureReport::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CHIDMessageToRemote.DeviceSendFeatureReport)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 device = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_device(), target);
  }

  // optional bytes data = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CHIDMessageToRemote.DeviceSendFeatureReport)
  return target;
}

size_t CHIDMessageToRemote_DeviceSendFeatureReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CHIDMessageToRemote.DeviceSendFeatureReport)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes data = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_data());
    }

    // optional uint32 device = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_device());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CHIDMessageToRemote_DeviceSendFeatureReport::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CHIDMessageToRemote_DeviceSendFeatureReport::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CHIDMessageToRemote_DeviceSendFeatureReport::GetClassData() const { return &_class_data_; }

void CHIDMessageToRemote_DeviceSendFeatureReport::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CHIDMessageToRemote_DeviceSendFeatureReport *>(to)->MergeFrom(
      static_cast<const CHIDMessageToRemote_DeviceSendFeatureReport &>(from));
}


void CHIDMessageToRemote_DeviceSendFeatureReport::MergeFrom(const CHIDMessageToRemote_DeviceSendFeatureReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CHIDMessageToRemote.DeviceSendFeatureReport)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_data(from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      device_ = from.device_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CHIDMessageToRemote_DeviceSendFeatureReport::CopyFrom(const CHIDMessageToRemote_DeviceSendFeatureReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CHIDMessageToRemote.DeviceSendFeatureReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHIDMessageToRemote_DeviceSendFeatureReport::IsInitialized() const {
  return true;
}

void CHIDMessageToRemote_DeviceSendFeatureReport::InternalSwap(CHIDMessageToRemote_DeviceSendFeatureReport* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
  swap(device_, other->device_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CHIDMessageToRemote_DeviceSendFeatureReport::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fhiddevices_2eproto_getter, &descriptor_table_steammessages_5fhiddevices_2eproto_once,
      file_level_metadata_steammessages_5fhiddevices_2eproto[6]);
}

// ===================================================================

class CHIDMessageToRemote_DeviceGetFeatureReport::_Internal {
 public:
  using HasBits = decltype(std::declval<CHIDMessageToRemote_DeviceGetFeatureReport>()._has_bits_);
  static void set_has_device(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_report_number(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CHIDMessageToRemote_DeviceGetFeatureReport::CHIDMessageToRemote_DeviceGetFeatureReport(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CHIDMessageToRemote.DeviceGetFeatureReport)
}
CHIDMessageToRemote_DeviceGetFeatureReport::CHIDMessageToRemote_DeviceGetFeatureReport(const CHIDMessageToRemote_DeviceGetFeatureReport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  report_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    report_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_report_number()) {
    report_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_report_number(), 
      GetArenaForAllocation());
  }
  ::memcpy(&device_, &from.device_,
    static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&device_)) + sizeof(length_));
  // @@protoc_insertion_point(copy_constructor:CHIDMessageToRemote.DeviceGetFeatureReport)
}

inline void CHIDMessageToRemote_DeviceGetFeatureReport::SharedCtor() {
report_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  report_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&device_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&device_)) + sizeof(length_));
}

CHIDMessageToRemote_DeviceGetFeatureReport::~CHIDMessageToRemote_DeviceGetFeatureReport() {
  // @@protoc_insertion_point(destructor:CHIDMessageToRemote.DeviceGetFeatureReport)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CHIDMessageToRemote_DeviceGetFeatureReport::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  report_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CHIDMessageToRemote_DeviceGetFeatureReport::ArenaDtor(void* object) {
  CHIDMessageToRemote_DeviceGetFeatureReport* _this = reinterpret_cast< CHIDMessageToRemote_DeviceGetFeatureReport* >(object);
  (void)_this;
}
void CHIDMessageToRemote_DeviceGetFeatureReport::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CHIDMessageToRemote_DeviceGetFeatureReport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CHIDMessageToRemote_DeviceGetFeatureReport::Clear() {
// @@protoc_insertion_point(message_clear_start:CHIDMessageToRemote.DeviceGetFeatureReport)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    report_number_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&device_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&length_) -
        reinterpret_cast<char*>(&device_)) + sizeof(length_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CHIDMessageToRemote_DeviceGetFeatureReport::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 device = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_device(&has_bits);
          device_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes report_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_report_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_length(&has_bits);
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CHIDMessageToRemote_DeviceGetFeatureReport::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CHIDMessageToRemote.DeviceGetFeatureReport)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 device = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_device(), target);
  }

  // optional bytes report_number = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_report_number(), target);
  }

  // optional uint32 length = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CHIDMessageToRemote.DeviceGetFeatureReport)
  return target;
}

size_t CHIDMessageToRemote_DeviceGetFeatureReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CHIDMessageToRemote.DeviceGetFeatureReport)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes report_number = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_report_number());
    }

    // optional uint32 device = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_device());
    }

    // optional uint32 length = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_length());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CHIDMessageToRemote_DeviceGetFeatureReport::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CHIDMessageToRemote_DeviceGetFeatureReport::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CHIDMessageToRemote_DeviceGetFeatureReport::GetClassData() const { return &_class_data_; }

void CHIDMessageToRemote_DeviceGetFeatureReport::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CHIDMessageToRemote_DeviceGetFeatureReport *>(to)->MergeFrom(
      static_cast<const CHIDMessageToRemote_DeviceGetFeatureReport &>(from));
}


void CHIDMessageToRemote_DeviceGetFeatureReport::MergeFrom(const CHIDMessageToRemote_DeviceGetFeatureReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CHIDMessageToRemote.DeviceGetFeatureReport)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_report_number(from._internal_report_number());
    }
    if (cached_has_bits & 0x00000002u) {
      device_ = from.device_;
    }
    if (cached_has_bits & 0x00000004u) {
      length_ = from.length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CHIDMessageToRemote_DeviceGetFeatureReport::CopyFrom(const CHIDMessageToRemote_DeviceGetFeatureReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CHIDMessageToRemote.DeviceGetFeatureReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHIDMessageToRemote_DeviceGetFeatureReport::IsInitialized() const {
  return true;
}

void CHIDMessageToRemote_DeviceGetFeatureReport::InternalSwap(CHIDMessageToRemote_DeviceGetFeatureReport* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &report_number_, lhs_arena,
      &other->report_number_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CHIDMessageToRemote_DeviceGetFeatureReport, length_)
      + sizeof(CHIDMessageToRemote_DeviceGetFeatureReport::length_)
      - PROTOBUF_FIELD_OFFSET(CHIDMessageToRemote_DeviceGetFeatureReport, device_)>(
          reinterpret_cast<char*>(&device_),
          reinterpret_cast<char*>(&other->device_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CHIDMessageToRemote_DeviceGetFeatureReport::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fhiddevices_2eproto_getter, &descriptor_table_steammessages_5fhiddevices_2eproto_once,
      file_level_metadata_steammessages_5fhiddevices_2eproto[7]);
}

// ===================================================================

class CHIDMessageToRemote_DeviceGetVendorString::_Internal {
 public:
  using HasBits = decltype(std::declval<CHIDMessageToRemote_DeviceGetVendorString>()._has_bits_);
  static void set_has_device(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CHIDMessageToRemote_DeviceGetVendorString::CHIDMessageToRemote_DeviceGetVendorString(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CHIDMessageToRemote.DeviceGetVendorString)
}
CHIDMessageToRemote_DeviceGetVendorString::CHIDMessageToRemote_DeviceGetVendorString(const CHIDMessageToRemote_DeviceGetVendorString& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_ = from.device_;
  // @@protoc_insertion_point(copy_constructor:CHIDMessageToRemote.DeviceGetVendorString)
}

inline void CHIDMessageToRemote_DeviceGetVendorString::SharedCtor() {
device_ = 0u;
}

CHIDMessageToRemote_DeviceGetVendorString::~CHIDMessageToRemote_DeviceGetVendorString() {
  // @@protoc_insertion_point(destructor:CHIDMessageToRemote.DeviceGetVendorString)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CHIDMessageToRemote_DeviceGetVendorString::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CHIDMessageToRemote_DeviceGetVendorString::ArenaDtor(void* object) {
  CHIDMessageToRemote_DeviceGetVendorString* _this = reinterpret_cast< CHIDMessageToRemote_DeviceGetVendorString* >(object);
  (void)_this;
}
void CHIDMessageToRemote_DeviceGetVendorString::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CHIDMessageToRemote_DeviceGetVendorString::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CHIDMessageToRemote_DeviceGetVendorString::Clear() {
// @@protoc_insertion_point(message_clear_start:CHIDMessageToRemote.DeviceGetVendorString)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CHIDMessageToRemote_DeviceGetVendorString::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 device = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_device(&has_bits);
          device_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CHIDMessageToRemote_DeviceGetVendorString::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CHIDMessageToRemote.DeviceGetVendorString)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 device = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_device(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CHIDMessageToRemote.DeviceGetVendorString)
  return target;
}

size_t CHIDMessageToRemote_DeviceGetVendorString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CHIDMessageToRemote.DeviceGetVendorString)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 device = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_device());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CHIDMessageToRemote_DeviceGetVendorString::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CHIDMessageToRemote_DeviceGetVendorString::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CHIDMessageToRemote_DeviceGetVendorString::GetClassData() const { return &_class_data_; }

void CHIDMessageToRemote_DeviceGetVendorString::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CHIDMessageToRemote_DeviceGetVendorString *>(to)->MergeFrom(
      static_cast<const CHIDMessageToRemote_DeviceGetVendorString &>(from));
}


void CHIDMessageToRemote_DeviceGetVendorString::MergeFrom(const CHIDMessageToRemote_DeviceGetVendorString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CHIDMessageToRemote.DeviceGetVendorString)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_device()) {
    _internal_set_device(from._internal_device());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CHIDMessageToRemote_DeviceGetVendorString::CopyFrom(const CHIDMessageToRemote_DeviceGetVendorString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CHIDMessageToRemote.DeviceGetVendorString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHIDMessageToRemote_DeviceGetVendorString::IsInitialized() const {
  return true;
}

void CHIDMessageToRemote_DeviceGetVendorString::InternalSwap(CHIDMessageToRemote_DeviceGetVendorString* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(device_, other->device_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CHIDMessageToRemote_DeviceGetVendorString::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fhiddevices_2eproto_getter, &descriptor_table_steammessages_5fhiddevices_2eproto_once,
      file_level_metadata_steammessages_5fhiddevices_2eproto[8]);
}

// ===================================================================

class CHIDMessageToRemote_DeviceGetProductString::_Internal {
 public:
  using HasBits = decltype(std::declval<CHIDMessageToRemote_DeviceGetProductString>()._has_bits_);
  static void set_has_device(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CHIDMessageToRemote_DeviceGetProductString::CHIDMessageToRemote_DeviceGetProductString(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CHIDMessageToRemote.DeviceGetProductString)
}
CHIDMessageToRemote_DeviceGetProductString::CHIDMessageToRemote_DeviceGetProductString(const CHIDMessageToRemote_DeviceGetProductString& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_ = from.device_;
  // @@protoc_insertion_point(copy_constructor:CHIDMessageToRemote.DeviceGetProductString)
}

inline void CHIDMessageToRemote_DeviceGetProductString::SharedCtor() {
device_ = 0u;
}

CHIDMessageToRemote_DeviceGetProductString::~CHIDMessageToRemote_DeviceGetProductString() {
  // @@protoc_insertion_point(destructor:CHIDMessageToRemote.DeviceGetProductString)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CHIDMessageToRemote_DeviceGetProductString::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CHIDMessageToRemote_DeviceGetProductString::ArenaDtor(void* object) {
  CHIDMessageToRemote_DeviceGetProductString* _this = reinterpret_cast< CHIDMessageToRemote_DeviceGetProductString* >(object);
  (void)_this;
}
void CHIDMessageToRemote_DeviceGetProductString::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CHIDMessageToRemote_DeviceGetProductString::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CHIDMessageToRemote_DeviceGetProductString::Clear() {
// @@protoc_insertion_point(message_clear_start:CHIDMessageToRemote.DeviceGetProductString)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CHIDMessageToRemote_DeviceGetProductString::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 device = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_device(&has_bits);
          device_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CHIDMessageToRemote_DeviceGetProductString::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CHIDMessageToRemote.DeviceGetProductString)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 device = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_device(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CHIDMessageToRemote.DeviceGetProductString)
  return target;
}

size_t CHIDMessageToRemote_DeviceGetProductString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CHIDMessageToRemote.DeviceGetProductString)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 device = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_device());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CHIDMessageToRemote_DeviceGetProductString::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CHIDMessageToRemote_DeviceGetProductString::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CHIDMessageToRemote_DeviceGetProductString::GetClassData() const { return &_class_data_; }

void CHIDMessageToRemote_DeviceGetProductString::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CHIDMessageToRemote_DeviceGetProductString *>(to)->MergeFrom(
      static_cast<const CHIDMessageToRemote_DeviceGetProductString &>(from));
}


void CHIDMessageToRemote_DeviceGetProductString::MergeFrom(const CHIDMessageToRemote_DeviceGetProductString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CHIDMessageToRemote.DeviceGetProductString)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_device()) {
    _internal_set_device(from._internal_device());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CHIDMessageToRemote_DeviceGetProductString::CopyFrom(const CHIDMessageToRemote_DeviceGetProductString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CHIDMessageToRemote.DeviceGetProductString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHIDMessageToRemote_DeviceGetProductString::IsInitialized() const {
  return true;
}

void CHIDMessageToRemote_DeviceGetProductString::InternalSwap(CHIDMessageToRemote_DeviceGetProductString* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(device_, other->device_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CHIDMessageToRemote_DeviceGetProductString::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fhiddevices_2eproto_getter, &descriptor_table_steammessages_5fhiddevices_2eproto_once,
      file_level_metadata_steammessages_5fhiddevices_2eproto[9]);
}

// ===================================================================

class CHIDMessageToRemote_DeviceGetSerialNumberString::_Internal {
 public:
  using HasBits = decltype(std::declval<CHIDMessageToRemote_DeviceGetSerialNumberString>()._has_bits_);
  static void set_has_device(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CHIDMessageToRemote_DeviceGetSerialNumberString::CHIDMessageToRemote_DeviceGetSerialNumberString(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CHIDMessageToRemote.DeviceGetSerialNumberString)
}
CHIDMessageToRemote_DeviceGetSerialNumberString::CHIDMessageToRemote_DeviceGetSerialNumberString(const CHIDMessageToRemote_DeviceGetSerialNumberString& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_ = from.device_;
  // @@protoc_insertion_point(copy_constructor:CHIDMessageToRemote.DeviceGetSerialNumberString)
}

inline void CHIDMessageToRemote_DeviceGetSerialNumberString::SharedCtor() {
device_ = 0u;
}

CHIDMessageToRemote_DeviceGetSerialNumberString::~CHIDMessageToRemote_DeviceGetSerialNumberString() {
  // @@protoc_insertion_point(destructor:CHIDMessageToRemote.DeviceGetSerialNumberString)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CHIDMessageToRemote_DeviceGetSerialNumberString::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CHIDMessageToRemote_DeviceGetSerialNumberString::ArenaDtor(void* object) {
  CHIDMessageToRemote_DeviceGetSerialNumberString* _this = reinterpret_cast< CHIDMessageToRemote_DeviceGetSerialNumberString* >(object);
  (void)_this;
}
void CHIDMessageToRemote_DeviceGetSerialNumberString::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CHIDMessageToRemote_DeviceGetSerialNumberString::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CHIDMessageToRemote_DeviceGetSerialNumberString::Clear() {
// @@protoc_insertion_point(message_clear_start:CHIDMessageToRemote.DeviceGetSerialNumberString)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CHIDMessageToRemote_DeviceGetSerialNumberString::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 device = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_device(&has_bits);
          device_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CHIDMessageToRemote_DeviceGetSerialNumberString::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CHIDMessageToRemote.DeviceGetSerialNumberString)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 device = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_device(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CHIDMessageToRemote.DeviceGetSerialNumberString)
  return target;
}

size_t CHIDMessageToRemote_DeviceGetSerialNumberString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CHIDMessageToRemote.DeviceGetSerialNumberString)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 device = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_device());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CHIDMessageToRemote_DeviceGetSerialNumberString::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CHIDMessageToRemote_DeviceGetSerialNumberString::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CHIDMessageToRemote_DeviceGetSerialNumberString::GetClassData() const { return &_class_data_; }

void CHIDMessageToRemote_DeviceGetSerialNumberString::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CHIDMessageToRemote_DeviceGetSerialNumberString *>(to)->MergeFrom(
      static_cast<const CHIDMessageToRemote_DeviceGetSerialNumberString &>(from));
}


void CHIDMessageToRemote_DeviceGetSerialNumberString::MergeFrom(const CHIDMessageToRemote_DeviceGetSerialNumberString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CHIDMessageToRemote.DeviceGetSerialNumberString)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_device()) {
    _internal_set_device(from._internal_device());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CHIDMessageToRemote_DeviceGetSerialNumberString::CopyFrom(const CHIDMessageToRemote_DeviceGetSerialNumberString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CHIDMessageToRemote.DeviceGetSerialNumberString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHIDMessageToRemote_DeviceGetSerialNumberString::IsInitialized() const {
  return true;
}

void CHIDMessageToRemote_DeviceGetSerialNumberString::InternalSwap(CHIDMessageToRemote_DeviceGetSerialNumberString* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(device_, other->device_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CHIDMessageToRemote_DeviceGetSerialNumberString::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fhiddevices_2eproto_getter, &descriptor_table_steammessages_5fhiddevices_2eproto_once,
      file_level_metadata_steammessages_5fhiddevices_2eproto[10]);
}

// ===================================================================

class CHIDMessageToRemote_DeviceStartInputReports::_Internal {
 public:
  using HasBits = decltype(std::declval<CHIDMessageToRemote_DeviceStartInputReports>()._has_bits_);
  static void set_has_device(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CHIDMessageToRemote_DeviceStartInputReports::CHIDMessageToRemote_DeviceStartInputReports(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CHIDMessageToRemote.DeviceStartInputReports)
}
CHIDMessageToRemote_DeviceStartInputReports::CHIDMessageToRemote_DeviceStartInputReports(const CHIDMessageToRemote_DeviceStartInputReports& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&device_, &from.device_,
    static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&device_)) + sizeof(length_));
  // @@protoc_insertion_point(copy_constructor:CHIDMessageToRemote.DeviceStartInputReports)
}

inline void CHIDMessageToRemote_DeviceStartInputReports::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&device_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&device_)) + sizeof(length_));
}

CHIDMessageToRemote_DeviceStartInputReports::~CHIDMessageToRemote_DeviceStartInputReports() {
  // @@protoc_insertion_point(destructor:CHIDMessageToRemote.DeviceStartInputReports)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CHIDMessageToRemote_DeviceStartInputReports::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CHIDMessageToRemote_DeviceStartInputReports::ArenaDtor(void* object) {
  CHIDMessageToRemote_DeviceStartInputReports* _this = reinterpret_cast< CHIDMessageToRemote_DeviceStartInputReports* >(object);
  (void)_this;
}
void CHIDMessageToRemote_DeviceStartInputReports::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CHIDMessageToRemote_DeviceStartInputReports::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CHIDMessageToRemote_DeviceStartInputReports::Clear() {
// @@protoc_insertion_point(message_clear_start:CHIDMessageToRemote.DeviceStartInputReports)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&device_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&length_) -
        reinterpret_cast<char*>(&device_)) + sizeof(length_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CHIDMessageToRemote_DeviceStartInputReports::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 device = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_device(&has_bits);
          device_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_length(&has_bits);
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CHIDMessageToRemote_DeviceStartInputReports::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CHIDMessageToRemote.DeviceStartInputReports)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 device = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_device(), target);
  }

  // optional uint32 length = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CHIDMessageToRemote.DeviceStartInputReports)
  return target;
}

size_t CHIDMessageToRemote_DeviceStartInputReports::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CHIDMessageToRemote.DeviceStartInputReports)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 device = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_device());
    }

    // optional uint32 length = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_length());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CHIDMessageToRemote_DeviceStartInputReports::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CHIDMessageToRemote_DeviceStartInputReports::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CHIDMessageToRemote_DeviceStartInputReports::GetClassData() const { return &_class_data_; }

void CHIDMessageToRemote_DeviceStartInputReports::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CHIDMessageToRemote_DeviceStartInputReports *>(to)->MergeFrom(
      static_cast<const CHIDMessageToRemote_DeviceStartInputReports &>(from));
}


void CHIDMessageToRemote_DeviceStartInputReports::MergeFrom(const CHIDMessageToRemote_DeviceStartInputReports& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CHIDMessageToRemote.DeviceStartInputReports)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      device_ = from.device_;
    }
    if (cached_has_bits & 0x00000002u) {
      length_ = from.length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CHIDMessageToRemote_DeviceStartInputReports::CopyFrom(const CHIDMessageToRemote_DeviceStartInputReports& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CHIDMessageToRemote.DeviceStartInputReports)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHIDMessageToRemote_DeviceStartInputReports::IsInitialized() const {
  return true;
}

void CHIDMessageToRemote_DeviceStartInputReports::InternalSwap(CHIDMessageToRemote_DeviceStartInputReports* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CHIDMessageToRemote_DeviceStartInputReports, length_)
      + sizeof(CHIDMessageToRemote_DeviceStartInputReports::length_)
      - PROTOBUF_FIELD_OFFSET(CHIDMessageToRemote_DeviceStartInputReports, device_)>(
          reinterpret_cast<char*>(&device_),
          reinterpret_cast<char*>(&other->device_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CHIDMessageToRemote_DeviceStartInputReports::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fhiddevices_2eproto_getter, &descriptor_table_steammessages_5fhiddevices_2eproto_once,
      file_level_metadata_steammessages_5fhiddevices_2eproto[11]);
}

// ===================================================================

class CHIDMessageToRemote_DeviceRequestFullReport::_Internal {
 public:
  using HasBits = decltype(std::declval<CHIDMessageToRemote_DeviceRequestFullReport>()._has_bits_);
  static void set_has_device(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CHIDMessageToRemote_DeviceRequestFullReport::CHIDMessageToRemote_DeviceRequestFullReport(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CHIDMessageToRemote.DeviceRequestFullReport)
}
CHIDMessageToRemote_DeviceRequestFullReport::CHIDMessageToRemote_DeviceRequestFullReport(const CHIDMessageToRemote_DeviceRequestFullReport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_ = from.device_;
  // @@protoc_insertion_point(copy_constructor:CHIDMessageToRemote.DeviceRequestFullReport)
}

inline void CHIDMessageToRemote_DeviceRequestFullReport::SharedCtor() {
device_ = 0u;
}

CHIDMessageToRemote_DeviceRequestFullReport::~CHIDMessageToRemote_DeviceRequestFullReport() {
  // @@protoc_insertion_point(destructor:CHIDMessageToRemote.DeviceRequestFullReport)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CHIDMessageToRemote_DeviceRequestFullReport::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CHIDMessageToRemote_DeviceRequestFullReport::ArenaDtor(void* object) {
  CHIDMessageToRemote_DeviceRequestFullReport* _this = reinterpret_cast< CHIDMessageToRemote_DeviceRequestFullReport* >(object);
  (void)_this;
}
void CHIDMessageToRemote_DeviceRequestFullReport::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CHIDMessageToRemote_DeviceRequestFullReport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CHIDMessageToRemote_DeviceRequestFullReport::Clear() {
// @@protoc_insertion_point(message_clear_start:CHIDMessageToRemote.DeviceRequestFullReport)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CHIDMessageToRemote_DeviceRequestFullReport::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 device = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_device(&has_bits);
          device_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CHIDMessageToRemote_DeviceRequestFullReport::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CHIDMessageToRemote.DeviceRequestFullReport)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 device = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_device(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CHIDMessageToRemote.DeviceRequestFullReport)
  return target;
}

size_t CHIDMessageToRemote_DeviceRequestFullReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CHIDMessageToRemote.DeviceRequestFullReport)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 device = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_device());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CHIDMessageToRemote_DeviceRequestFullReport::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CHIDMessageToRemote_DeviceRequestFullReport::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CHIDMessageToRemote_DeviceRequestFullReport::GetClassData() const { return &_class_data_; }

void CHIDMessageToRemote_DeviceRequestFullReport::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CHIDMessageToRemote_DeviceRequestFullReport *>(to)->MergeFrom(
      static_cast<const CHIDMessageToRemote_DeviceRequestFullReport &>(from));
}


void CHIDMessageToRemote_DeviceRequestFullReport::MergeFrom(const CHIDMessageToRemote_DeviceRequestFullReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CHIDMessageToRemote.DeviceRequestFullReport)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_device()) {
    _internal_set_device(from._internal_device());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CHIDMessageToRemote_DeviceRequestFullReport::CopyFrom(const CHIDMessageToRemote_DeviceRequestFullReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CHIDMessageToRemote.DeviceRequestFullReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHIDMessageToRemote_DeviceRequestFullReport::IsInitialized() const {
  return true;
}

void CHIDMessageToRemote_DeviceRequestFullReport::InternalSwap(CHIDMessageToRemote_DeviceRequestFullReport* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(device_, other->device_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CHIDMessageToRemote_DeviceRequestFullReport::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fhiddevices_2eproto_getter, &descriptor_table_steammessages_5fhiddevices_2eproto_once,
      file_level_metadata_steammessages_5fhiddevices_2eproto[12]);
}

// ===================================================================

class CHIDMessageToRemote_DeviceDisconnect::_Internal {
 public:
  using HasBits = decltype(std::declval<CHIDMessageToRemote_DeviceDisconnect>()._has_bits_);
  static void set_has_device(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_disconnectmethod(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CHIDMessageToRemote_DeviceDisconnect::CHIDMessageToRemote_DeviceDisconnect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CHIDMessageToRemote.DeviceDisconnect)
}
CHIDMessageToRemote_DeviceDisconnect::CHIDMessageToRemote_DeviceDisconnect(const CHIDMessageToRemote_DeviceDisconnect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_data()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  ::memcpy(&device_, &from.device_,
    static_cast<size_t>(reinterpret_cast<char*>(&disconnectmethod_) -
    reinterpret_cast<char*>(&device_)) + sizeof(disconnectmethod_));
  // @@protoc_insertion_point(copy_constructor:CHIDMessageToRemote.DeviceDisconnect)
}

inline void CHIDMessageToRemote_DeviceDisconnect::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&device_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&disconnectmethod_) -
    reinterpret_cast<char*>(&device_)) + sizeof(disconnectmethod_));
}

CHIDMessageToRemote_DeviceDisconnect::~CHIDMessageToRemote_DeviceDisconnect() {
  // @@protoc_insertion_point(destructor:CHIDMessageToRemote.DeviceDisconnect)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CHIDMessageToRemote_DeviceDisconnect::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CHIDMessageToRemote_DeviceDisconnect::ArenaDtor(void* object) {
  CHIDMessageToRemote_DeviceDisconnect* _this = reinterpret_cast< CHIDMessageToRemote_DeviceDisconnect* >(object);
  (void)_this;
}
void CHIDMessageToRemote_DeviceDisconnect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CHIDMessageToRemote_DeviceDisconnect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CHIDMessageToRemote_DeviceDisconnect::Clear() {
// @@protoc_insertion_point(message_clear_start:CHIDMessageToRemote.DeviceDisconnect)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&device_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&disconnectmethod_) -
        reinterpret_cast<char*>(&device_)) + sizeof(disconnectmethod_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CHIDMessageToRemote_DeviceDisconnect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 device = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_device(&has_bits);
          device_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EHIDDeviceDisconnectMethod disconnectMethod = 2 [default = k_EDeviceDisconnectMethodUnknown];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EHIDDeviceDisconnectMethod_IsValid(val))) {
            _internal_set_disconnectmethod(static_cast<::EHIDDeviceDisconnectMethod>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bytes data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CHIDMessageToRemote_DeviceDisconnect::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CHIDMessageToRemote.DeviceDisconnect)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 device = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_device(), target);
  }

  // optional .EHIDDeviceDisconnectMethod disconnectMethod = 2 [default = k_EDeviceDisconnectMethodUnknown];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_disconnectmethod(), target);
  }

  // optional bytes data = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CHIDMessageToRemote.DeviceDisconnect)
  return target;
}

size_t CHIDMessageToRemote_DeviceDisconnect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CHIDMessageToRemote.DeviceDisconnect)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes data = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_data());
    }

    // optional uint32 device = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_device());
    }

    // optional .EHIDDeviceDisconnectMethod disconnectMethod = 2 [default = k_EDeviceDisconnectMethodUnknown];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_disconnectmethod());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CHIDMessageToRemote_DeviceDisconnect::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CHIDMessageToRemote_DeviceDisconnect::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CHIDMessageToRemote_DeviceDisconnect::GetClassData() const { return &_class_data_; }

void CHIDMessageToRemote_DeviceDisconnect::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CHIDMessageToRemote_DeviceDisconnect *>(to)->MergeFrom(
      static_cast<const CHIDMessageToRemote_DeviceDisconnect &>(from));
}


void CHIDMessageToRemote_DeviceDisconnect::MergeFrom(const CHIDMessageToRemote_DeviceDisconnect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CHIDMessageToRemote.DeviceDisconnect)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_data(from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      device_ = from.device_;
    }
    if (cached_has_bits & 0x00000004u) {
      disconnectmethod_ = from.disconnectmethod_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CHIDMessageToRemote_DeviceDisconnect::CopyFrom(const CHIDMessageToRemote_DeviceDisconnect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CHIDMessageToRemote.DeviceDisconnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHIDMessageToRemote_DeviceDisconnect::IsInitialized() const {
  return true;
}

void CHIDMessageToRemote_DeviceDisconnect::InternalSwap(CHIDMessageToRemote_DeviceDisconnect* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CHIDMessageToRemote_DeviceDisconnect, disconnectmethod_)
      + sizeof(CHIDMessageToRemote_DeviceDisconnect::disconnectmethod_)
      - PROTOBUF_FIELD_OFFSET(CHIDMessageToRemote_DeviceDisconnect, device_)>(
          reinterpret_cast<char*>(&device_),
          reinterpret_cast<char*>(&other->device_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CHIDMessageToRemote_DeviceDisconnect::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fhiddevices_2eproto_getter, &descriptor_table_steammessages_5fhiddevices_2eproto_once,
      file_level_metadata_steammessages_5fhiddevices_2eproto[13]);
}

// ===================================================================

class CHIDMessageToRemote::_Internal {
 public:
  using HasBits = decltype(std::declval<CHIDMessageToRemote>()._has_bits_);
  static void set_has_request_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CHIDMessageToRemote_DeviceOpen& device_open(const CHIDMessageToRemote* msg);
  static const ::CHIDMessageToRemote_DeviceClose& device_close(const CHIDMessageToRemote* msg);
  static const ::CHIDMessageToRemote_DeviceWrite& device_write(const CHIDMessageToRemote* msg);
  static const ::CHIDMessageToRemote_DeviceRead& device_read(const CHIDMessageToRemote* msg);
  static const ::CHIDMessageToRemote_DeviceSendFeatureReport& device_send_feature_report(const CHIDMessageToRemote* msg);
  static const ::CHIDMessageToRemote_DeviceGetFeatureReport& device_get_feature_report(const CHIDMessageToRemote* msg);
  static const ::CHIDMessageToRemote_DeviceGetVendorString& device_get_vendor_string(const CHIDMessageToRemote* msg);
  static const ::CHIDMessageToRemote_DeviceGetProductString& device_get_product_string(const CHIDMessageToRemote* msg);
  static const ::CHIDMessageToRemote_DeviceGetSerialNumberString& device_get_serial_number_string(const CHIDMessageToRemote* msg);
  static const ::CHIDMessageToRemote_DeviceStartInputReports& device_start_input_reports(const CHIDMessageToRemote* msg);
  static const ::CHIDMessageToRemote_DeviceRequestFullReport& device_request_full_report(const CHIDMessageToRemote* msg);
  static const ::CHIDMessageToRemote_DeviceDisconnect& device_disconnect(const CHIDMessageToRemote* msg);
};

const ::CHIDMessageToRemote_DeviceOpen&
CHIDMessageToRemote::_Internal::device_open(const CHIDMessageToRemote* msg) {
  return *msg->command_.device_open_;
}
const ::CHIDMessageToRemote_DeviceClose&
CHIDMessageToRemote::_Internal::device_close(const CHIDMessageToRemote* msg) {
  return *msg->command_.device_close_;
}
const ::CHIDMessageToRemote_DeviceWrite&
CHIDMessageToRemote::_Internal::device_write(const CHIDMessageToRemote* msg) {
  return *msg->command_.device_write_;
}
const ::CHIDMessageToRemote_DeviceRead&
CHIDMessageToRemote::_Internal::device_read(const CHIDMessageToRemote* msg) {
  return *msg->command_.device_read_;
}
const ::CHIDMessageToRemote_DeviceSendFeatureReport&
CHIDMessageToRemote::_Internal::device_send_feature_report(const CHIDMessageToRemote* msg) {
  return *msg->command_.device_send_feature_report_;
}
const ::CHIDMessageToRemote_DeviceGetFeatureReport&
CHIDMessageToRemote::_Internal::device_get_feature_report(const CHIDMessageToRemote* msg) {
  return *msg->command_.device_get_feature_report_;
}
const ::CHIDMessageToRemote_DeviceGetVendorString&
CHIDMessageToRemote::_Internal::device_get_vendor_string(const CHIDMessageToRemote* msg) {
  return *msg->command_.device_get_vendor_string_;
}
const ::CHIDMessageToRemote_DeviceGetProductString&
CHIDMessageToRemote::_Internal::device_get_product_string(const CHIDMessageToRemote* msg) {
  return *msg->command_.device_get_product_string_;
}
const ::CHIDMessageToRemote_DeviceGetSerialNumberString&
CHIDMessageToRemote::_Internal::device_get_serial_number_string(const CHIDMessageToRemote* msg) {
  return *msg->command_.device_get_serial_number_string_;
}
const ::CHIDMessageToRemote_DeviceStartInputReports&
CHIDMessageToRemote::_Internal::device_start_input_reports(const CHIDMessageToRemote* msg) {
  return *msg->command_.device_start_input_reports_;
}
const ::CHIDMessageToRemote_DeviceRequestFullReport&
CHIDMessageToRemote::_Internal::device_request_full_report(const CHIDMessageToRemote* msg) {
  return *msg->command_.device_request_full_report_;
}
const ::CHIDMessageToRemote_DeviceDisconnect&
CHIDMessageToRemote::_Internal::device_disconnect(const CHIDMessageToRemote* msg) {
  return *msg->command_.device_disconnect_;
}
void CHIDMessageToRemote::set_allocated_device_open(::CHIDMessageToRemote_DeviceOpen* device_open) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_command();
  if (device_open) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CHIDMessageToRemote_DeviceOpen>::GetOwningArena(device_open);
    if (message_arena != submessage_arena) {
      device_open = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_open, submessage_arena);
    }
    set_has_device_open();
    command_.device_open_ = device_open;
  }
  // @@protoc_insertion_point(field_set_allocated:CHIDMessageToRemote.device_open)
}
void CHIDMessageToRemote::set_allocated_device_close(::CHIDMessageToRemote_DeviceClose* device_close) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_command();
  if (device_close) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CHIDMessageToRemote_DeviceClose>::GetOwningArena(device_close);
    if (message_arena != submessage_arena) {
      device_close = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_close, submessage_arena);
    }
    set_has_device_close();
    command_.device_close_ = device_close;
  }
  // @@protoc_insertion_point(field_set_allocated:CHIDMessageToRemote.device_close)
}
void CHIDMessageToRemote::set_allocated_device_write(::CHIDMessageToRemote_DeviceWrite* device_write) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_command();
  if (device_write) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CHIDMessageToRemote_DeviceWrite>::GetOwningArena(device_write);
    if (message_arena != submessage_arena) {
      device_write = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_write, submessage_arena);
    }
    set_has_device_write();
    command_.device_write_ = device_write;
  }
  // @@protoc_insertion_point(field_set_allocated:CHIDMessageToRemote.device_write)
}
void CHIDMessageToRemote::set_allocated_device_read(::CHIDMessageToRemote_DeviceRead* device_read) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_command();
  if (device_read) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CHIDMessageToRemote_DeviceRead>::GetOwningArena(device_read);
    if (message_arena != submessage_arena) {
      device_read = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_read, submessage_arena);
    }
    set_has_device_read();
    command_.device_read_ = device_read;
  }
  // @@protoc_insertion_point(field_set_allocated:CHIDMessageToRemote.device_read)
}
void CHIDMessageToRemote::set_allocated_device_send_feature_report(::CHIDMessageToRemote_DeviceSendFeatureReport* device_send_feature_report) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_command();
  if (device_send_feature_report) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CHIDMessageToRemote_DeviceSendFeatureReport>::GetOwningArena(device_send_feature_report);
    if (message_arena != submessage_arena) {
      device_send_feature_report = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_send_feature_report, submessage_arena);
    }
    set_has_device_send_feature_report();
    command_.device_send_feature_report_ = device_send_feature_report;
  }
  // @@protoc_insertion_point(field_set_allocated:CHIDMessageToRemote.device_send_feature_report)
}
void CHIDMessageToRemote::set_allocated_device_get_feature_report(::CHIDMessageToRemote_DeviceGetFeatureReport* device_get_feature_report) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_command();
  if (device_get_feature_report) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CHIDMessageToRemote_DeviceGetFeatureReport>::GetOwningArena(device_get_feature_report);
    if (message_arena != submessage_arena) {
      device_get_feature_report = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_get_feature_report, submessage_arena);
    }
    set_has_device_get_feature_report();
    command_.device_get_feature_report_ = device_get_feature_report;
  }
  // @@protoc_insertion_point(field_set_allocated:CHIDMessageToRemote.device_get_feature_report)
}
void CHIDMessageToRemote::set_allocated_device_get_vendor_string(::CHIDMessageToRemote_DeviceGetVendorString* device_get_vendor_string) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_command();
  if (device_get_vendor_string) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CHIDMessageToRemote_DeviceGetVendorString>::GetOwningArena(device_get_vendor_string);
    if (message_arena != submessage_arena) {
      device_get_vendor_string = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_get_vendor_string, submessage_arena);
    }
    set_has_device_get_vendor_string();
    command_.device_get_vendor_string_ = device_get_vendor_string;
  }
  // @@protoc_insertion_point(field_set_allocated:CHIDMessageToRemote.device_get_vendor_string)
}
void CHIDMessageToRemote::set_allocated_device_get_product_string(::CHIDMessageToRemote_DeviceGetProductString* device_get_product_string) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_command();
  if (device_get_product_string) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CHIDMessageToRemote_DeviceGetProductString>::GetOwningArena(device_get_product_string);
    if (message_arena != submessage_arena) {
      device_get_product_string = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_get_product_string, submessage_arena);
    }
    set_has_device_get_product_string();
    command_.device_get_product_string_ = device_get_product_string;
  }
  // @@protoc_insertion_point(field_set_allocated:CHIDMessageToRemote.device_get_product_string)
}
void CHIDMessageToRemote::set_allocated_device_get_serial_number_string(::CHIDMessageToRemote_DeviceGetSerialNumberString* device_get_serial_number_string) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_command();
  if (device_get_serial_number_string) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CHIDMessageToRemote_DeviceGetSerialNumberString>::GetOwningArena(device_get_serial_number_string);
    if (message_arena != submessage_arena) {
      device_get_serial_number_string = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_get_serial_number_string, submessage_arena);
    }
    set_has_device_get_serial_number_string();
    command_.device_get_serial_number_string_ = device_get_serial_number_string;
  }
  // @@protoc_insertion_point(field_set_allocated:CHIDMessageToRemote.device_get_serial_number_string)
}
void CHIDMessageToRemote::set_allocated_device_start_input_reports(::CHIDMessageToRemote_DeviceStartInputReports* device_start_input_reports) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_command();
  if (device_start_input_reports) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CHIDMessageToRemote_DeviceStartInputReports>::GetOwningArena(device_start_input_reports);
    if (message_arena != submessage_arena) {
      device_start_input_reports = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_start_input_reports, submessage_arena);
    }
    set_has_device_start_input_reports();
    command_.device_start_input_reports_ = device_start_input_reports;
  }
  // @@protoc_insertion_point(field_set_allocated:CHIDMessageToRemote.device_start_input_reports)
}
void CHIDMessageToRemote::set_allocated_device_request_full_report(::CHIDMessageToRemote_DeviceRequestFullReport* device_request_full_report) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_command();
  if (device_request_full_report) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CHIDMessageToRemote_DeviceRequestFullReport>::GetOwningArena(device_request_full_report);
    if (message_arena != submessage_arena) {
      device_request_full_report = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_request_full_report, submessage_arena);
    }
    set_has_device_request_full_report();
    command_.device_request_full_report_ = device_request_full_report;
  }
  // @@protoc_insertion_point(field_set_allocated:CHIDMessageToRemote.device_request_full_report)
}
void CHIDMessageToRemote::set_allocated_device_disconnect(::CHIDMessageToRemote_DeviceDisconnect* device_disconnect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_command();
  if (device_disconnect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CHIDMessageToRemote_DeviceDisconnect>::GetOwningArena(device_disconnect);
    if (message_arena != submessage_arena) {
      device_disconnect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_disconnect, submessage_arena);
    }
    set_has_device_disconnect();
    command_.device_disconnect_ = device_disconnect;
  }
  // @@protoc_insertion_point(field_set_allocated:CHIDMessageToRemote.device_disconnect)
}
CHIDMessageToRemote::CHIDMessageToRemote(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CHIDMessageToRemote)
}
CHIDMessageToRemote::CHIDMessageToRemote(const CHIDMessageToRemote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  request_id_ = from.request_id_;
  clear_has_command();
  switch (from.command_case()) {
    case kDeviceOpen: {
      _internal_mutable_device_open()->::CHIDMessageToRemote_DeviceOpen::MergeFrom(from._internal_device_open());
      break;
    }
    case kDeviceClose: {
      _internal_mutable_device_close()->::CHIDMessageToRemote_DeviceClose::MergeFrom(from._internal_device_close());
      break;
    }
    case kDeviceWrite: {
      _internal_mutable_device_write()->::CHIDMessageToRemote_DeviceWrite::MergeFrom(from._internal_device_write());
      break;
    }
    case kDeviceRead: {
      _internal_mutable_device_read()->::CHIDMessageToRemote_DeviceRead::MergeFrom(from._internal_device_read());
      break;
    }
    case kDeviceSendFeatureReport: {
      _internal_mutable_device_send_feature_report()->::CHIDMessageToRemote_DeviceSendFeatureReport::MergeFrom(from._internal_device_send_feature_report());
      break;
    }
    case kDeviceGetFeatureReport: {
      _internal_mutable_device_get_feature_report()->::CHIDMessageToRemote_DeviceGetFeatureReport::MergeFrom(from._internal_device_get_feature_report());
      break;
    }
    case kDeviceGetVendorString: {
      _internal_mutable_device_get_vendor_string()->::CHIDMessageToRemote_DeviceGetVendorString::MergeFrom(from._internal_device_get_vendor_string());
      break;
    }
    case kDeviceGetProductString: {
      _internal_mutable_device_get_product_string()->::CHIDMessageToRemote_DeviceGetProductString::MergeFrom(from._internal_device_get_product_string());
      break;
    }
    case kDeviceGetSerialNumberString: {
      _internal_mutable_device_get_serial_number_string()->::CHIDMessageToRemote_DeviceGetSerialNumberString::MergeFrom(from._internal_device_get_serial_number_string());
      break;
    }
    case kDeviceStartInputReports: {
      _internal_mutable_device_start_input_reports()->::CHIDMessageToRemote_DeviceStartInputReports::MergeFrom(from._internal_device_start_input_reports());
      break;
    }
    case kDeviceRequestFullReport: {
      _internal_mutable_device_request_full_report()->::CHIDMessageToRemote_DeviceRequestFullReport::MergeFrom(from._internal_device_request_full_report());
      break;
    }
    case kDeviceDisconnect: {
      _internal_mutable_device_disconnect()->::CHIDMessageToRemote_DeviceDisconnect::MergeFrom(from._internal_device_disconnect());
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:CHIDMessageToRemote)
}

inline void CHIDMessageToRemote::SharedCtor() {
request_id_ = 0u;
clear_has_command();
}

CHIDMessageToRemote::~CHIDMessageToRemote() {
  // @@protoc_insertion_point(destructor:CHIDMessageToRemote)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CHIDMessageToRemote::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_command()) {
    clear_command();
  }
}

void CHIDMessageToRemote::ArenaDtor(void* object) {
  CHIDMessageToRemote* _this = reinterpret_cast< CHIDMessageToRemote* >(object);
  (void)_this;
}
void CHIDMessageToRemote::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CHIDMessageToRemote::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CHIDMessageToRemote::clear_command() {
// @@protoc_insertion_point(one_of_clear_start:CHIDMessageToRemote)
  switch (command_case()) {
    case kDeviceOpen: {
      if (GetArenaForAllocation() == nullptr) {
        delete command_.device_open_;
      }
      break;
    }
    case kDeviceClose: {
      if (GetArenaForAllocation() == nullptr) {
        delete command_.device_close_;
      }
      break;
    }
    case kDeviceWrite: {
      if (GetArenaForAllocation() == nullptr) {
        delete command_.device_write_;
      }
      break;
    }
    case kDeviceRead: {
      if (GetArenaForAllocation() == nullptr) {
        delete command_.device_read_;
      }
      break;
    }
    case kDeviceSendFeatureReport: {
      if (GetArenaForAllocation() == nullptr) {
        delete command_.device_send_feature_report_;
      }
      break;
    }
    case kDeviceGetFeatureReport: {
      if (GetArenaForAllocation() == nullptr) {
        delete command_.device_get_feature_report_;
      }
      break;
    }
    case kDeviceGetVendorString: {
      if (GetArenaForAllocation() == nullptr) {
        delete command_.device_get_vendor_string_;
      }
      break;
    }
    case kDeviceGetProductString: {
      if (GetArenaForAllocation() == nullptr) {
        delete command_.device_get_product_string_;
      }
      break;
    }
    case kDeviceGetSerialNumberString: {
      if (GetArenaForAllocation() == nullptr) {
        delete command_.device_get_serial_number_string_;
      }
      break;
    }
    case kDeviceStartInputReports: {
      if (GetArenaForAllocation() == nullptr) {
        delete command_.device_start_input_reports_;
      }
      break;
    }
    case kDeviceRequestFullReport: {
      if (GetArenaForAllocation() == nullptr) {
        delete command_.device_request_full_report_;
      }
      break;
    }
    case kDeviceDisconnect: {
      if (GetArenaForAllocation() == nullptr) {
        delete command_.device_disconnect_;
      }
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = COMMAND_NOT_SET;
}


void CHIDMessageToRemote::Clear() {
// @@protoc_insertion_point(message_clear_start:CHIDMessageToRemote)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_ = 0u;
  clear_command();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CHIDMessageToRemote::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_request_id(&has_bits);
          request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .CHIDMessageToRemote.DeviceOpen device_open = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_open(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .CHIDMessageToRemote.DeviceClose device_close = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_close(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .CHIDMessageToRemote.DeviceWrite device_write = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_write(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .CHIDMessageToRemote.DeviceRead device_read = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_read(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .CHIDMessageToRemote.DeviceSendFeatureReport device_send_feature_report = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_send_feature_report(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .CHIDMessageToRemote.DeviceGetFeatureReport device_get_feature_report = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_get_feature_report(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .CHIDMessageToRemote.DeviceGetVendorString device_get_vendor_string = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_get_vendor_string(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .CHIDMessageToRemote.DeviceGetProductString device_get_product_string = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_get_product_string(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .CHIDMessageToRemote.DeviceGetSerialNumberString device_get_serial_number_string = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_get_serial_number_string(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .CHIDMessageToRemote.DeviceStartInputReports device_start_input_reports = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_start_input_reports(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .CHIDMessageToRemote.DeviceRequestFullReport device_request_full_report = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_request_full_report(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .CHIDMessageToRemote.DeviceDisconnect device_disconnect = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_disconnect(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CHIDMessageToRemote::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CHIDMessageToRemote)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 request_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_request_id(), target);
  }

  switch (command_case()) {
    case kDeviceOpen: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::device_open(this), target, stream);
      break;
    }
    case kDeviceClose: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          3, _Internal::device_close(this), target, stream);
      break;
    }
    case kDeviceWrite: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          4, _Internal::device_write(this), target, stream);
      break;
    }
    case kDeviceRead: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          5, _Internal::device_read(this), target, stream);
      break;
    }
    case kDeviceSendFeatureReport: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          6, _Internal::device_send_feature_report(this), target, stream);
      break;
    }
    case kDeviceGetFeatureReport: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          7, _Internal::device_get_feature_report(this), target, stream);
      break;
    }
    case kDeviceGetVendorString: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          8, _Internal::device_get_vendor_string(this), target, stream);
      break;
    }
    case kDeviceGetProductString: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          9, _Internal::device_get_product_string(this), target, stream);
      break;
    }
    case kDeviceGetSerialNumberString: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          10, _Internal::device_get_serial_number_string(this), target, stream);
      break;
    }
    case kDeviceStartInputReports: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          11, _Internal::device_start_input_reports(this), target, stream);
      break;
    }
    case kDeviceRequestFullReport: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          12, _Internal::device_request_full_report(this), target, stream);
      break;
    }
    case kDeviceDisconnect: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          13, _Internal::device_disconnect(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CHIDMessageToRemote)
  return target;
}

size_t CHIDMessageToRemote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CHIDMessageToRemote)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 request_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_request_id());
  }

  switch (command_case()) {
    // .CHIDMessageToRemote.DeviceOpen device_open = 2;
    case kDeviceOpen: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.device_open_);
      break;
    }
    // .CHIDMessageToRemote.DeviceClose device_close = 3;
    case kDeviceClose: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.device_close_);
      break;
    }
    // .CHIDMessageToRemote.DeviceWrite device_write = 4;
    case kDeviceWrite: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.device_write_);
      break;
    }
    // .CHIDMessageToRemote.DeviceRead device_read = 5;
    case kDeviceRead: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.device_read_);
      break;
    }
    // .CHIDMessageToRemote.DeviceSendFeatureReport device_send_feature_report = 6;
    case kDeviceSendFeatureReport: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.device_send_feature_report_);
      break;
    }
    // .CHIDMessageToRemote.DeviceGetFeatureReport device_get_feature_report = 7;
    case kDeviceGetFeatureReport: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.device_get_feature_report_);
      break;
    }
    // .CHIDMessageToRemote.DeviceGetVendorString device_get_vendor_string = 8;
    case kDeviceGetVendorString: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.device_get_vendor_string_);
      break;
    }
    // .CHIDMessageToRemote.DeviceGetProductString device_get_product_string = 9;
    case kDeviceGetProductString: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.device_get_product_string_);
      break;
    }
    // .CHIDMessageToRemote.DeviceGetSerialNumberString device_get_serial_number_string = 10;
    case kDeviceGetSerialNumberString: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.device_get_serial_number_string_);
      break;
    }
    // .CHIDMessageToRemote.DeviceStartInputReports device_start_input_reports = 11;
    case kDeviceStartInputReports: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.device_start_input_reports_);
      break;
    }
    // .CHIDMessageToRemote.DeviceRequestFullReport device_request_full_report = 12;
    case kDeviceRequestFullReport: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.device_request_full_report_);
      break;
    }
    // .CHIDMessageToRemote.DeviceDisconnect device_disconnect = 13;
    case kDeviceDisconnect: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.device_disconnect_);
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CHIDMessageToRemote::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CHIDMessageToRemote::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CHIDMessageToRemote::GetClassData() const { return &_class_data_; }

void CHIDMessageToRemote::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CHIDMessageToRemote *>(to)->MergeFrom(
      static_cast<const CHIDMessageToRemote &>(from));
}


void CHIDMessageToRemote::MergeFrom(const CHIDMessageToRemote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CHIDMessageToRemote)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_request_id()) {
    _internal_set_request_id(from._internal_request_id());
  }
  switch (from.command_case()) {
    case kDeviceOpen: {
      _internal_mutable_device_open()->::CHIDMessageToRemote_DeviceOpen::MergeFrom(from._internal_device_open());
      break;
    }
    case kDeviceClose: {
      _internal_mutable_device_close()->::CHIDMessageToRemote_DeviceClose::MergeFrom(from._internal_device_close());
      break;
    }
    case kDeviceWrite: {
      _internal_mutable_device_write()->::CHIDMessageToRemote_DeviceWrite::MergeFrom(from._internal_device_write());
      break;
    }
    case kDeviceRead: {
      _internal_mutable_device_read()->::CHIDMessageToRemote_DeviceRead::MergeFrom(from._internal_device_read());
      break;
    }
    case kDeviceSendFeatureReport: {
      _internal_mutable_device_send_feature_report()->::CHIDMessageToRemote_DeviceSendFeatureReport::MergeFrom(from._internal_device_send_feature_report());
      break;
    }
    case kDeviceGetFeatureReport: {
      _internal_mutable_device_get_feature_report()->::CHIDMessageToRemote_DeviceGetFeatureReport::MergeFrom(from._internal_device_get_feature_report());
      break;
    }
    case kDeviceGetVendorString: {
      _internal_mutable_device_get_vendor_string()->::CHIDMessageToRemote_DeviceGetVendorString::MergeFrom(from._internal_device_get_vendor_string());
      break;
    }
    case kDeviceGetProductString: {
      _internal_mutable_device_get_product_string()->::CHIDMessageToRemote_DeviceGetProductString::MergeFrom(from._internal_device_get_product_string());
      break;
    }
    case kDeviceGetSerialNumberString: {
      _internal_mutable_device_get_serial_number_string()->::CHIDMessageToRemote_DeviceGetSerialNumberString::MergeFrom(from._internal_device_get_serial_number_string());
      break;
    }
    case kDeviceStartInputReports: {
      _internal_mutable_device_start_input_reports()->::CHIDMessageToRemote_DeviceStartInputReports::MergeFrom(from._internal_device_start_input_reports());
      break;
    }
    case kDeviceRequestFullReport: {
      _internal_mutable_device_request_full_report()->::CHIDMessageToRemote_DeviceRequestFullReport::MergeFrom(from._internal_device_request_full_report());
      break;
    }
    case kDeviceDisconnect: {
      _internal_mutable_device_disconnect()->::CHIDMessageToRemote_DeviceDisconnect::MergeFrom(from._internal_device_disconnect());
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CHIDMessageToRemote::CopyFrom(const CHIDMessageToRemote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CHIDMessageToRemote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHIDMessageToRemote::IsInitialized() const {
  return true;
}

void CHIDMessageToRemote::InternalSwap(CHIDMessageToRemote* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(request_id_, other->request_id_);
  swap(command_, other->command_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CHIDMessageToRemote::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fhiddevices_2eproto_getter, &descriptor_table_steammessages_5fhiddevices_2eproto_once,
      file_level_metadata_steammessages_5fhiddevices_2eproto[14]);
}

// ===================================================================

class CHIDMessageFromRemote_UpdateDeviceList::_Internal {
 public:
};

CHIDMessageFromRemote_UpdateDeviceList::CHIDMessageFromRemote_UpdateDeviceList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  devices_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CHIDMessageFromRemote.UpdateDeviceList)
}
CHIDMessageFromRemote_UpdateDeviceList::CHIDMessageFromRemote_UpdateDeviceList(const CHIDMessageFromRemote_UpdateDeviceList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      devices_(from.devices_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CHIDMessageFromRemote.UpdateDeviceList)
}

inline void CHIDMessageFromRemote_UpdateDeviceList::SharedCtor() {
}

CHIDMessageFromRemote_UpdateDeviceList::~CHIDMessageFromRemote_UpdateDeviceList() {
  // @@protoc_insertion_point(destructor:CHIDMessageFromRemote.UpdateDeviceList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CHIDMessageFromRemote_UpdateDeviceList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CHIDMessageFromRemote_UpdateDeviceList::ArenaDtor(void* object) {
  CHIDMessageFromRemote_UpdateDeviceList* _this = reinterpret_cast< CHIDMessageFromRemote_UpdateDeviceList* >(object);
  (void)_this;
}
void CHIDMessageFromRemote_UpdateDeviceList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CHIDMessageFromRemote_UpdateDeviceList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CHIDMessageFromRemote_UpdateDeviceList::Clear() {
// @@protoc_insertion_point(message_clear_start:CHIDMessageFromRemote.UpdateDeviceList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devices_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CHIDMessageFromRemote_UpdateDeviceList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CHIDDeviceInfo devices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_devices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CHIDMessageFromRemote_UpdateDeviceList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CHIDMessageFromRemote.UpdateDeviceList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CHIDDeviceInfo devices = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_devices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_devices(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CHIDMessageFromRemote.UpdateDeviceList)
  return target;
}

size_t CHIDMessageFromRemote_UpdateDeviceList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CHIDMessageFromRemote.UpdateDeviceList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CHIDDeviceInfo devices = 1;
  total_size += 1UL * this->_internal_devices_size();
  for (const auto& msg : this->devices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CHIDMessageFromRemote_UpdateDeviceList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CHIDMessageFromRemote_UpdateDeviceList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CHIDMessageFromRemote_UpdateDeviceList::GetClassData() const { return &_class_data_; }

void CHIDMessageFromRemote_UpdateDeviceList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CHIDMessageFromRemote_UpdateDeviceList *>(to)->MergeFrom(
      static_cast<const CHIDMessageFromRemote_UpdateDeviceList &>(from));
}


void CHIDMessageFromRemote_UpdateDeviceList::MergeFrom(const CHIDMessageFromRemote_UpdateDeviceList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CHIDMessageFromRemote.UpdateDeviceList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  devices_.MergeFrom(from.devices_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CHIDMessageFromRemote_UpdateDeviceList::CopyFrom(const CHIDMessageFromRemote_UpdateDeviceList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CHIDMessageFromRemote.UpdateDeviceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHIDMessageFromRemote_UpdateDeviceList::IsInitialized() const {
  return true;
}

void CHIDMessageFromRemote_UpdateDeviceList::InternalSwap(CHIDMessageFromRemote_UpdateDeviceList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  devices_.InternalSwap(&other->devices_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CHIDMessageFromRemote_UpdateDeviceList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fhiddevices_2eproto_getter, &descriptor_table_steammessages_5fhiddevices_2eproto_once,
      file_level_metadata_steammessages_5fhiddevices_2eproto[15]);
}

// ===================================================================

class CHIDMessageFromRemote_RequestResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CHIDMessageFromRemote_RequestResponse>()._has_bits_);
  static void set_has_request_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CHIDMessageFromRemote_RequestResponse::CHIDMessageFromRemote_RequestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CHIDMessageFromRemote.RequestResponse)
}
CHIDMessageFromRemote_RequestResponse::CHIDMessageFromRemote_RequestResponse(const CHIDMessageFromRemote_RequestResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_data()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  ::memcpy(&request_id_, &from.request_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&request_id_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:CHIDMessageFromRemote.RequestResponse)
}

inline void CHIDMessageFromRemote_RequestResponse::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&request_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&request_id_)) + sizeof(result_));
}

CHIDMessageFromRemote_RequestResponse::~CHIDMessageFromRemote_RequestResponse() {
  // @@protoc_insertion_point(destructor:CHIDMessageFromRemote.RequestResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CHIDMessageFromRemote_RequestResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CHIDMessageFromRemote_RequestResponse::ArenaDtor(void* object) {
  CHIDMessageFromRemote_RequestResponse* _this = reinterpret_cast< CHIDMessageFromRemote_RequestResponse* >(object);
  (void)_this;
}
void CHIDMessageFromRemote_RequestResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CHIDMessageFromRemote_RequestResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CHIDMessageFromRemote_RequestResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CHIDMessageFromRemote.RequestResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&request_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&result_) -
        reinterpret_cast<char*>(&request_id_)) + sizeof(result_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CHIDMessageFromRemote_RequestResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_request_id(&has_bits);
          request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CHIDMessageFromRemote_RequestResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CHIDMessageFromRemote.RequestResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 request_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_request_id(), target);
  }

  // optional int32 result = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_result(), target);
  }

  // optional bytes data = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CHIDMessageFromRemote.RequestResponse)
  return target;
}

size_t CHIDMessageFromRemote_RequestResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CHIDMessageFromRemote.RequestResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes data = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_data());
    }

    // optional uint32 request_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_request_id());
    }

    // optional int32 result = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_result());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CHIDMessageFromRemote_RequestResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CHIDMessageFromRemote_RequestResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CHIDMessageFromRemote_RequestResponse::GetClassData() const { return &_class_data_; }

void CHIDMessageFromRemote_RequestResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CHIDMessageFromRemote_RequestResponse *>(to)->MergeFrom(
      static_cast<const CHIDMessageFromRemote_RequestResponse &>(from));
}


void CHIDMessageFromRemote_RequestResponse::MergeFrom(const CHIDMessageFromRemote_RequestResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CHIDMessageFromRemote.RequestResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_data(from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      request_id_ = from.request_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CHIDMessageFromRemote_RequestResponse::CopyFrom(const CHIDMessageFromRemote_RequestResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CHIDMessageFromRemote.RequestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHIDMessageFromRemote_RequestResponse::IsInitialized() const {
  return true;
}

void CHIDMessageFromRemote_RequestResponse::InternalSwap(CHIDMessageFromRemote_RequestResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CHIDMessageFromRemote_RequestResponse, result_)
      + sizeof(CHIDMessageFromRemote_RequestResponse::result_)
      - PROTOBUF_FIELD_OFFSET(CHIDMessageFromRemote_RequestResponse, request_id_)>(
          reinterpret_cast<char*>(&request_id_),
          reinterpret_cast<char*>(&other->request_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CHIDMessageFromRemote_RequestResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fhiddevices_2eproto_getter, &descriptor_table_steammessages_5fhiddevices_2eproto_once,
      file_level_metadata_steammessages_5fhiddevices_2eproto[16]);
}

// ===================================================================

class CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::_Internal {
 public:
  using HasBits = decltype(std::declval<CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport>()._has_bits_);
  static void set_has_device(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  reports_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport)
}
CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport(const CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      reports_(from.reports_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_ = from.device_;
  // @@protoc_insertion_point(copy_constructor:CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport)
}

inline void CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::SharedCtor() {
device_ = 0u;
}

CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::~CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport() {
  // @@protoc_insertion_point(destructor:CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::ArenaDtor(void* object) {
  CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport* _this = reinterpret_cast< CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport* >(object);
  (void)_this;
}
void CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::Clear() {
// @@protoc_insertion_point(message_clear_start:CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reports_.Clear();
  device_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 device = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_device(&has_bits);
          device_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CHIDDeviceInputReport reports = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reports(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 device = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_device(), target);
  }

  // repeated .CHIDDeviceInputReport reports = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_reports_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_reports(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport)
  return target;
}

size_t CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CHIDDeviceInputReport reports = 2;
  total_size += 1UL * this->_internal_reports_size();
  for (const auto& msg : this->reports_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 device = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_device());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::GetClassData() const { return &_class_data_; }

void CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport *>(to)->MergeFrom(
      static_cast<const CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport &>(from));
}


void CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::MergeFrom(const CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  reports_.MergeFrom(from.reports_);
  if (from._internal_has_device()) {
    _internal_set_device(from._internal_device());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::CopyFrom(const CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::IsInitialized() const {
  return true;
}

void CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::InternalSwap(CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  reports_.InternalSwap(&other->reports_);
  swap(device_, other->device_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fhiddevices_2eproto_getter, &descriptor_table_steammessages_5fhiddevices_2eproto_once,
      file_level_metadata_steammessages_5fhiddevices_2eproto[17]);
}

// ===================================================================

class CHIDMessageFromRemote_DeviceInputReports::_Internal {
 public:
};

CHIDMessageFromRemote_DeviceInputReports::CHIDMessageFromRemote_DeviceInputReports(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  device_reports_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CHIDMessageFromRemote.DeviceInputReports)
}
CHIDMessageFromRemote_DeviceInputReports::CHIDMessageFromRemote_DeviceInputReports(const CHIDMessageFromRemote_DeviceInputReports& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      device_reports_(from.device_reports_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CHIDMessageFromRemote.DeviceInputReports)
}

inline void CHIDMessageFromRemote_DeviceInputReports::SharedCtor() {
}

CHIDMessageFromRemote_DeviceInputReports::~CHIDMessageFromRemote_DeviceInputReports() {
  // @@protoc_insertion_point(destructor:CHIDMessageFromRemote.DeviceInputReports)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CHIDMessageFromRemote_DeviceInputReports::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CHIDMessageFromRemote_DeviceInputReports::ArenaDtor(void* object) {
  CHIDMessageFromRemote_DeviceInputReports* _this = reinterpret_cast< CHIDMessageFromRemote_DeviceInputReports* >(object);
  (void)_this;
}
void CHIDMessageFromRemote_DeviceInputReports::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CHIDMessageFromRemote_DeviceInputReports::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CHIDMessageFromRemote_DeviceInputReports::Clear() {
// @@protoc_insertion_point(message_clear_start:CHIDMessageFromRemote.DeviceInputReports)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_reports_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CHIDMessageFromRemote_DeviceInputReports::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport device_reports = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_device_reports(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CHIDMessageFromRemote_DeviceInputReports::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CHIDMessageFromRemote.DeviceInputReports)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport device_reports = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_device_reports_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_device_reports(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CHIDMessageFromRemote.DeviceInputReports)
  return target;
}

size_t CHIDMessageFromRemote_DeviceInputReports::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CHIDMessageFromRemote.DeviceInputReports)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport device_reports = 1;
  total_size += 1UL * this->_internal_device_reports_size();
  for (const auto& msg : this->device_reports_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CHIDMessageFromRemote_DeviceInputReports::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CHIDMessageFromRemote_DeviceInputReports::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CHIDMessageFromRemote_DeviceInputReports::GetClassData() const { return &_class_data_; }

void CHIDMessageFromRemote_DeviceInputReports::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CHIDMessageFromRemote_DeviceInputReports *>(to)->MergeFrom(
      static_cast<const CHIDMessageFromRemote_DeviceInputReports &>(from));
}


void CHIDMessageFromRemote_DeviceInputReports::MergeFrom(const CHIDMessageFromRemote_DeviceInputReports& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CHIDMessageFromRemote.DeviceInputReports)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  device_reports_.MergeFrom(from.device_reports_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CHIDMessageFromRemote_DeviceInputReports::CopyFrom(const CHIDMessageFromRemote_DeviceInputReports& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CHIDMessageFromRemote.DeviceInputReports)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHIDMessageFromRemote_DeviceInputReports::IsInitialized() const {
  return true;
}

void CHIDMessageFromRemote_DeviceInputReports::InternalSwap(CHIDMessageFromRemote_DeviceInputReports* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  device_reports_.InternalSwap(&other->device_reports_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CHIDMessageFromRemote_DeviceInputReports::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fhiddevices_2eproto_getter, &descriptor_table_steammessages_5fhiddevices_2eproto_once,
      file_level_metadata_steammessages_5fhiddevices_2eproto[18]);
}

// ===================================================================

class CHIDMessageFromRemote_CloseDevice::_Internal {
 public:
  using HasBits = decltype(std::declval<CHIDMessageFromRemote_CloseDevice>()._has_bits_);
  static void set_has_device(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CHIDMessageFromRemote_CloseDevice::CHIDMessageFromRemote_CloseDevice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CHIDMessageFromRemote.CloseDevice)
}
CHIDMessageFromRemote_CloseDevice::CHIDMessageFromRemote_CloseDevice(const CHIDMessageFromRemote_CloseDevice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_ = from.device_;
  // @@protoc_insertion_point(copy_constructor:CHIDMessageFromRemote.CloseDevice)
}

inline void CHIDMessageFromRemote_CloseDevice::SharedCtor() {
device_ = 0u;
}

CHIDMessageFromRemote_CloseDevice::~CHIDMessageFromRemote_CloseDevice() {
  // @@protoc_insertion_point(destructor:CHIDMessageFromRemote.CloseDevice)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CHIDMessageFromRemote_CloseDevice::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CHIDMessageFromRemote_CloseDevice::ArenaDtor(void* object) {
  CHIDMessageFromRemote_CloseDevice* _this = reinterpret_cast< CHIDMessageFromRemote_CloseDevice* >(object);
  (void)_this;
}
void CHIDMessageFromRemote_CloseDevice::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CHIDMessageFromRemote_CloseDevice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CHIDMessageFromRemote_CloseDevice::Clear() {
// @@protoc_insertion_point(message_clear_start:CHIDMessageFromRemote.CloseDevice)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CHIDMessageFromRemote_CloseDevice::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 device = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_device(&has_bits);
          device_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CHIDMessageFromRemote_CloseDevice::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CHIDMessageFromRemote.CloseDevice)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 device = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_device(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CHIDMessageFromRemote.CloseDevice)
  return target;
}

size_t CHIDMessageFromRemote_CloseDevice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CHIDMessageFromRemote.CloseDevice)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 device = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_device());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CHIDMessageFromRemote_CloseDevice::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CHIDMessageFromRemote_CloseDevice::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CHIDMessageFromRemote_CloseDevice::GetClassData() const { return &_class_data_; }

void CHIDMessageFromRemote_CloseDevice::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CHIDMessageFromRemote_CloseDevice *>(to)->MergeFrom(
      static_cast<const CHIDMessageFromRemote_CloseDevice &>(from));
}


void CHIDMessageFromRemote_CloseDevice::MergeFrom(const CHIDMessageFromRemote_CloseDevice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CHIDMessageFromRemote.CloseDevice)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_device()) {
    _internal_set_device(from._internal_device());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CHIDMessageFromRemote_CloseDevice::CopyFrom(const CHIDMessageFromRemote_CloseDevice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CHIDMessageFromRemote.CloseDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHIDMessageFromRemote_CloseDevice::IsInitialized() const {
  return true;
}

void CHIDMessageFromRemote_CloseDevice::InternalSwap(CHIDMessageFromRemote_CloseDevice* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(device_, other->device_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CHIDMessageFromRemote_CloseDevice::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fhiddevices_2eproto_getter, &descriptor_table_steammessages_5fhiddevices_2eproto_once,
      file_level_metadata_steammessages_5fhiddevices_2eproto[19]);
}

// ===================================================================

class CHIDMessageFromRemote_CloseAllDevices::_Internal {
 public:
};

CHIDMessageFromRemote_CloseAllDevices::CHIDMessageFromRemote_CloseAllDevices(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CHIDMessageFromRemote.CloseAllDevices)
}
CHIDMessageFromRemote_CloseAllDevices::CHIDMessageFromRemote_CloseAllDevices(const CHIDMessageFromRemote_CloseAllDevices& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CHIDMessageFromRemote.CloseAllDevices)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CHIDMessageFromRemote_CloseAllDevices::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CHIDMessageFromRemote_CloseAllDevices::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CHIDMessageFromRemote_CloseAllDevices::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fhiddevices_2eproto_getter, &descriptor_table_steammessages_5fhiddevices_2eproto_once,
      file_level_metadata_steammessages_5fhiddevices_2eproto[20]);
}

// ===================================================================

class CHIDMessageFromRemote::_Internal {
 public:
  static const ::CHIDMessageFromRemote_UpdateDeviceList& update_device_list(const CHIDMessageFromRemote* msg);
  static const ::CHIDMessageFromRemote_RequestResponse& response(const CHIDMessageFromRemote* msg);
  static const ::CHIDMessageFromRemote_DeviceInputReports& reports(const CHIDMessageFromRemote* msg);
  static const ::CHIDMessageFromRemote_CloseDevice& close_device(const CHIDMessageFromRemote* msg);
  static const ::CHIDMessageFromRemote_CloseAllDevices& close_all_devices(const CHIDMessageFromRemote* msg);
};

const ::CHIDMessageFromRemote_UpdateDeviceList&
CHIDMessageFromRemote::_Internal::update_device_list(const CHIDMessageFromRemote* msg) {
  return *msg->command_.update_device_list_;
}
const ::CHIDMessageFromRemote_RequestResponse&
CHIDMessageFromRemote::_Internal::response(const CHIDMessageFromRemote* msg) {
  return *msg->command_.response_;
}
const ::CHIDMessageFromRemote_DeviceInputReports&
CHIDMessageFromRemote::_Internal::reports(const CHIDMessageFromRemote* msg) {
  return *msg->command_.reports_;
}
const ::CHIDMessageFromRemote_CloseDevice&
CHIDMessageFromRemote::_Internal::close_device(const CHIDMessageFromRemote* msg) {
  return *msg->command_.close_device_;
}
const ::CHIDMessageFromRemote_CloseAllDevices&
CHIDMessageFromRemote::_Internal::close_all_devices(const CHIDMessageFromRemote* msg) {
  return *msg->command_.close_all_devices_;
}
void CHIDMessageFromRemote::set_allocated_update_device_list(::CHIDMessageFromRemote_UpdateDeviceList* update_device_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_command();
  if (update_device_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CHIDMessageFromRemote_UpdateDeviceList>::GetOwningArena(update_device_list);
    if (message_arena != submessage_arena) {
      update_device_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_device_list, submessage_arena);
    }
    set_has_update_device_list();
    command_.update_device_list_ = update_device_list;
  }
  // @@protoc_insertion_point(field_set_allocated:CHIDMessageFromRemote.update_device_list)
}
void CHIDMessageFromRemote::set_allocated_response(::CHIDMessageFromRemote_RequestResponse* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_command();
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CHIDMessageFromRemote_RequestResponse>::GetOwningArena(response);
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    set_has_response();
    command_.response_ = response;
  }
  // @@protoc_insertion_point(field_set_allocated:CHIDMessageFromRemote.response)
}
void CHIDMessageFromRemote::set_allocated_reports(::CHIDMessageFromRemote_DeviceInputReports* reports) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_command();
  if (reports) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CHIDMessageFromRemote_DeviceInputReports>::GetOwningArena(reports);
    if (message_arena != submessage_arena) {
      reports = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reports, submessage_arena);
    }
    set_has_reports();
    command_.reports_ = reports;
  }
  // @@protoc_insertion_point(field_set_allocated:CHIDMessageFromRemote.reports)
}
void CHIDMessageFromRemote::set_allocated_close_device(::CHIDMessageFromRemote_CloseDevice* close_device) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_command();
  if (close_device) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CHIDMessageFromRemote_CloseDevice>::GetOwningArena(close_device);
    if (message_arena != submessage_arena) {
      close_device = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, close_device, submessage_arena);
    }
    set_has_close_device();
    command_.close_device_ = close_device;
  }
  // @@protoc_insertion_point(field_set_allocated:CHIDMessageFromRemote.close_device)
}
void CHIDMessageFromRemote::set_allocated_close_all_devices(::CHIDMessageFromRemote_CloseAllDevices* close_all_devices) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_command();
  if (close_all_devices) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CHIDMessageFromRemote_CloseAllDevices>::GetOwningArena(close_all_devices);
    if (message_arena != submessage_arena) {
      close_all_devices = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, close_all_devices, submessage_arena);
    }
    set_has_close_all_devices();
    command_.close_all_devices_ = close_all_devices;
  }
  // @@protoc_insertion_point(field_set_allocated:CHIDMessageFromRemote.close_all_devices)
}
CHIDMessageFromRemote::CHIDMessageFromRemote(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CHIDMessageFromRemote)
}
CHIDMessageFromRemote::CHIDMessageFromRemote(const CHIDMessageFromRemote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_command();
  switch (from.command_case()) {
    case kUpdateDeviceList: {
      _internal_mutable_update_device_list()->::CHIDMessageFromRemote_UpdateDeviceList::MergeFrom(from._internal_update_device_list());
      break;
    }
    case kResponse: {
      _internal_mutable_response()->::CHIDMessageFromRemote_RequestResponse::MergeFrom(from._internal_response());
      break;
    }
    case kReports: {
      _internal_mutable_reports()->::CHIDMessageFromRemote_DeviceInputReports::MergeFrom(from._internal_reports());
      break;
    }
    case kCloseDevice: {
      _internal_mutable_close_device()->::CHIDMessageFromRemote_CloseDevice::MergeFrom(from._internal_close_device());
      break;
    }
    case kCloseAllDevices: {
      _internal_mutable_close_all_devices()->::CHIDMessageFromRemote_CloseAllDevices::MergeFrom(from._internal_close_all_devices());
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:CHIDMessageFromRemote)
}

inline void CHIDMessageFromRemote::SharedCtor() {
clear_has_command();
}

CHIDMessageFromRemote::~CHIDMessageFromRemote() {
  // @@protoc_insertion_point(destructor:CHIDMessageFromRemote)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CHIDMessageFromRemote::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_command()) {
    clear_command();
  }
}

void CHIDMessageFromRemote::ArenaDtor(void* object) {
  CHIDMessageFromRemote* _this = reinterpret_cast< CHIDMessageFromRemote* >(object);
  (void)_this;
}
void CHIDMessageFromRemote::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CHIDMessageFromRemote::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CHIDMessageFromRemote::clear_command() {
// @@protoc_insertion_point(one_of_clear_start:CHIDMessageFromRemote)
  switch (command_case()) {
    case kUpdateDeviceList: {
      if (GetArenaForAllocation() == nullptr) {
        delete command_.update_device_list_;
      }
      break;
    }
    case kResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete command_.response_;
      }
      break;
    }
    case kReports: {
      if (GetArenaForAllocation() == nullptr) {
        delete command_.reports_;
      }
      break;
    }
    case kCloseDevice: {
      if (GetArenaForAllocation() == nullptr) {
        delete command_.close_device_;
      }
      break;
    }
    case kCloseAllDevices: {
      if (GetArenaForAllocation() == nullptr) {
        delete command_.close_all_devices_;
      }
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = COMMAND_NOT_SET;
}


void CHIDMessageFromRemote::Clear() {
// @@protoc_insertion_point(message_clear_start:CHIDMessageFromRemote)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_command();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CHIDMessageFromRemote::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .CHIDMessageFromRemote.UpdateDeviceList update_device_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_device_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .CHIDMessageFromRemote.RequestResponse response = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .CHIDMessageFromRemote.DeviceInputReports reports = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_reports(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .CHIDMessageFromRemote.CloseDevice close_device = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_close_device(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .CHIDMessageFromRemote.CloseAllDevices close_all_devices = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_close_all_devices(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CHIDMessageFromRemote::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CHIDMessageFromRemote)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (command_case()) {
    case kUpdateDeviceList: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          1, _Internal::update_device_list(this), target, stream);
      break;
    }
    case kResponse: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::response(this), target, stream);
      break;
    }
    case kReports: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          3, _Internal::reports(this), target, stream);
      break;
    }
    case kCloseDevice: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          4, _Internal::close_device(this), target, stream);
      break;
    }
    case kCloseAllDevices: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          5, _Internal::close_all_devices(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CHIDMessageFromRemote)
  return target;
}

size_t CHIDMessageFromRemote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CHIDMessageFromRemote)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (command_case()) {
    // .CHIDMessageFromRemote.UpdateDeviceList update_device_list = 1;
    case kUpdateDeviceList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.update_device_list_);
      break;
    }
    // .CHIDMessageFromRemote.RequestResponse response = 2;
    case kResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.response_);
      break;
    }
    // .CHIDMessageFromRemote.DeviceInputReports reports = 3;
    case kReports: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.reports_);
      break;
    }
    // .CHIDMessageFromRemote.CloseDevice close_device = 4;
    case kCloseDevice: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.close_device_);
      break;
    }
    // .CHIDMessageFromRemote.CloseAllDevices close_all_devices = 5;
    case kCloseAllDevices: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.close_all_devices_);
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CHIDMessageFromRemote::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CHIDMessageFromRemote::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CHIDMessageFromRemote::GetClassData() const { return &_class_data_; }

void CHIDMessageFromRemote::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CHIDMessageFromRemote *>(to)->MergeFrom(
      static_cast<const CHIDMessageFromRemote &>(from));
}


void CHIDMessageFromRemote::MergeFrom(const CHIDMessageFromRemote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CHIDMessageFromRemote)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.command_case()) {
    case kUpdateDeviceList: {
      _internal_mutable_update_device_list()->::CHIDMessageFromRemote_UpdateDeviceList::MergeFrom(from._internal_update_device_list());
      break;
    }
    case kResponse: {
      _internal_mutable_response()->::CHIDMessageFromRemote_RequestResponse::MergeFrom(from._internal_response());
      break;
    }
    case kReports: {
      _internal_mutable_reports()->::CHIDMessageFromRemote_DeviceInputReports::MergeFrom(from._internal_reports());
      break;
    }
    case kCloseDevice: {
      _internal_mutable_close_device()->::CHIDMessageFromRemote_CloseDevice::MergeFrom(from._internal_close_device());
      break;
    }
    case kCloseAllDevices: {
      _internal_mutable_close_all_devices()->::CHIDMessageFromRemote_CloseAllDevices::MergeFrom(from._internal_close_all_devices());
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CHIDMessageFromRemote::CopyFrom(const CHIDMessageFromRemote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CHIDMessageFromRemote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHIDMessageFromRemote::IsInitialized() const {
  return true;
}

void CHIDMessageFromRemote::InternalSwap(CHIDMessageFromRemote* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(command_, other->command_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CHIDMessageFromRemote::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fhiddevices_2eproto_getter, &descriptor_table_steammessages_5fhiddevices_2eproto_once,
      file_level_metadata_steammessages_5fhiddevices_2eproto[21]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CHIDDeviceInfo* Arena::CreateMaybeMessage< ::CHIDDeviceInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CHIDDeviceInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CHIDDeviceInputReport* Arena::CreateMaybeMessage< ::CHIDDeviceInputReport >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CHIDDeviceInputReport >(arena);
}
template<> PROTOBUF_NOINLINE ::CHIDMessageToRemote_DeviceOpen* Arena::CreateMaybeMessage< ::CHIDMessageToRemote_DeviceOpen >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CHIDMessageToRemote_DeviceOpen >(arena);
}
template<> PROTOBUF_NOINLINE ::CHIDMessageToRemote_DeviceClose* Arena::CreateMaybeMessage< ::CHIDMessageToRemote_DeviceClose >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CHIDMessageToRemote_DeviceClose >(arena);
}
template<> PROTOBUF_NOINLINE ::CHIDMessageToRemote_DeviceWrite* Arena::CreateMaybeMessage< ::CHIDMessageToRemote_DeviceWrite >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CHIDMessageToRemote_DeviceWrite >(arena);
}
template<> PROTOBUF_NOINLINE ::CHIDMessageToRemote_DeviceRead* Arena::CreateMaybeMessage< ::CHIDMessageToRemote_DeviceRead >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CHIDMessageToRemote_DeviceRead >(arena);
}
template<> PROTOBUF_NOINLINE ::CHIDMessageToRemote_DeviceSendFeatureReport* Arena::CreateMaybeMessage< ::CHIDMessageToRemote_DeviceSendFeatureReport >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CHIDMessageToRemote_DeviceSendFeatureReport >(arena);
}
template<> PROTOBUF_NOINLINE ::CHIDMessageToRemote_DeviceGetFeatureReport* Arena::CreateMaybeMessage< ::CHIDMessageToRemote_DeviceGetFeatureReport >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CHIDMessageToRemote_DeviceGetFeatureReport >(arena);
}
template<> PROTOBUF_NOINLINE ::CHIDMessageToRemote_DeviceGetVendorString* Arena::CreateMaybeMessage< ::CHIDMessageToRemote_DeviceGetVendorString >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CHIDMessageToRemote_DeviceGetVendorString >(arena);
}
template<> PROTOBUF_NOINLINE ::CHIDMessageToRemote_DeviceGetProductString* Arena::CreateMaybeMessage< ::CHIDMessageToRemote_DeviceGetProductString >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CHIDMessageToRemote_DeviceGetProductString >(arena);
}
template<> PROTOBUF_NOINLINE ::CHIDMessageToRemote_DeviceGetSerialNumberString* Arena::CreateMaybeMessage< ::CHIDMessageToRemote_DeviceGetSerialNumberString >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CHIDMessageToRemote_DeviceGetSerialNumberString >(arena);
}
template<> PROTOBUF_NOINLINE ::CHIDMessageToRemote_DeviceStartInputReports* Arena::CreateMaybeMessage< ::CHIDMessageToRemote_DeviceStartInputReports >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CHIDMessageToRemote_DeviceStartInputReports >(arena);
}
template<> PROTOBUF_NOINLINE ::CHIDMessageToRemote_DeviceRequestFullReport* Arena::CreateMaybeMessage< ::CHIDMessageToRemote_DeviceRequestFullReport >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CHIDMessageToRemote_DeviceRequestFullReport >(arena);
}
template<> PROTOBUF_NOINLINE ::CHIDMessageToRemote_DeviceDisconnect* Arena::CreateMaybeMessage< ::CHIDMessageToRemote_DeviceDisconnect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CHIDMessageToRemote_DeviceDisconnect >(arena);
}
template<> PROTOBUF_NOINLINE ::CHIDMessageToRemote* Arena::CreateMaybeMessage< ::CHIDMessageToRemote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CHIDMessageToRemote >(arena);
}
template<> PROTOBUF_NOINLINE ::CHIDMessageFromRemote_UpdateDeviceList* Arena::CreateMaybeMessage< ::CHIDMessageFromRemote_UpdateDeviceList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CHIDMessageFromRemote_UpdateDeviceList >(arena);
}
template<> PROTOBUF_NOINLINE ::CHIDMessageFromRemote_RequestResponse* Arena::CreateMaybeMessage< ::CHIDMessageFromRemote_RequestResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CHIDMessageFromRemote_RequestResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport* Arena::CreateMaybeMessage< ::CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport >(arena);
}
template<> PROTOBUF_NOINLINE ::CHIDMessageFromRemote_DeviceInputReports* Arena::CreateMaybeMessage< ::CHIDMessageFromRemote_DeviceInputReports >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CHIDMessageFromRemote_DeviceInputReports >(arena);
}
template<> PROTOBUF_NOINLINE ::CHIDMessageFromRemote_CloseDevice* Arena::CreateMaybeMessage< ::CHIDMessageFromRemote_CloseDevice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CHIDMessageFromRemote_CloseDevice >(arena);
}
template<> PROTOBUF_NOINLINE ::CHIDMessageFromRemote_CloseAllDevices* Arena::CreateMaybeMessage< ::CHIDMessageFromRemote_CloseAllDevices >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CHIDMessageFromRemote_CloseAllDevices >(arena);
}
template<> PROTOBUF_NOINLINE ::CHIDMessageFromRemote* Arena::CreateMaybeMessage< ::CHIDMessageFromRemote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CHIDMessageFromRemote >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
