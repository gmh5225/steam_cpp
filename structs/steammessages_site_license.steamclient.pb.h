// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_site_license.steamclient.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_steammessages_5fsite_5flicense_2esteamclient_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_steammessages_5fsite_5flicense_2esteamclient_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "steammessages_base.pb.h"
#include "steammessages_unified_base.steamclient.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_5fsite_5flicense_2esteamclient_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_5fsite_5flicense_2esteamclient_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fsite_5flicense_2esteamclient_2eproto;
class CSiteLicense_ClientGetAvailableSeats_Request;
struct CSiteLicense_ClientGetAvailableSeats_RequestDefaultTypeInternal;
extern CSiteLicense_ClientGetAvailableSeats_RequestDefaultTypeInternal _CSiteLicense_ClientGetAvailableSeats_Request_default_instance_;
class CSiteLicense_ClientGetAvailableSeats_Response;
struct CSiteLicense_ClientGetAvailableSeats_ResponseDefaultTypeInternal;
extern CSiteLicense_ClientGetAvailableSeats_ResponseDefaultTypeInternal _CSiteLicense_ClientGetAvailableSeats_Response_default_instance_;
class CSiteLicense_ClientSeatCheckout_Notification;
struct CSiteLicense_ClientSeatCheckout_NotificationDefaultTypeInternal;
extern CSiteLicense_ClientSeatCheckout_NotificationDefaultTypeInternal _CSiteLicense_ClientSeatCheckout_Notification_default_instance_;
class CSiteLicense_ClientSeatCheckout_Request;
struct CSiteLicense_ClientSeatCheckout_RequestDefaultTypeInternal;
extern CSiteLicense_ClientSeatCheckout_RequestDefaultTypeInternal _CSiteLicense_ClientSeatCheckout_Request_default_instance_;
class CSiteLicense_ClientSeatCheckout_Response;
struct CSiteLicense_ClientSeatCheckout_ResponseDefaultTypeInternal;
extern CSiteLicense_ClientSeatCheckout_ResponseDefaultTypeInternal _CSiteLicense_ClientSeatCheckout_Response_default_instance_;
class CSiteLicense_InitiateAssociation_Request;
struct CSiteLicense_InitiateAssociation_RequestDefaultTypeInternal;
extern CSiteLicense_InitiateAssociation_RequestDefaultTypeInternal _CSiteLicense_InitiateAssociation_Request_default_instance_;
class CSiteLicense_InitiateAssociation_Response;
struct CSiteLicense_InitiateAssociation_ResponseDefaultTypeInternal;
extern CSiteLicense_InitiateAssociation_ResponseDefaultTypeInternal _CSiteLicense_InitiateAssociation_Response_default_instance_;
class CSiteLicense_LCSAssociateUser_Request;
struct CSiteLicense_LCSAssociateUser_RequestDefaultTypeInternal;
extern CSiteLicense_LCSAssociateUser_RequestDefaultTypeInternal _CSiteLicense_LCSAssociateUser_Request_default_instance_;
class CSiteLicense_LCSAssociateUser_Response;
struct CSiteLicense_LCSAssociateUser_ResponseDefaultTypeInternal;
extern CSiteLicense_LCSAssociateUser_ResponseDefaultTypeInternal _CSiteLicense_LCSAssociateUser_Response_default_instance_;
class CSiteLicense_LCSAuthenticate_Request;
struct CSiteLicense_LCSAuthenticate_RequestDefaultTypeInternal;
extern CSiteLicense_LCSAuthenticate_RequestDefaultTypeInternal _CSiteLicense_LCSAuthenticate_Request_default_instance_;
class CSiteLicense_LCSAuthenticate_Response;
struct CSiteLicense_LCSAuthenticate_ResponseDefaultTypeInternal;
extern CSiteLicense_LCSAuthenticate_ResponseDefaultTypeInternal _CSiteLicense_LCSAuthenticate_Response_default_instance_;
class CSiteManagerClient_IncomingClient_Request;
struct CSiteManagerClient_IncomingClient_RequestDefaultTypeInternal;
extern CSiteManagerClient_IncomingClient_RequestDefaultTypeInternal _CSiteManagerClient_IncomingClient_Request_default_instance_;
class CSiteManagerClient_IncomingClient_Response;
struct CSiteManagerClient_IncomingClient_ResponseDefaultTypeInternal;
extern CSiteManagerClient_IncomingClient_ResponseDefaultTypeInternal _CSiteManagerClient_IncomingClient_Response_default_instance_;
class CSiteManagerClient_TrackedPayments_Notification;
struct CSiteManagerClient_TrackedPayments_NotificationDefaultTypeInternal;
extern CSiteManagerClient_TrackedPayments_NotificationDefaultTypeInternal _CSiteManagerClient_TrackedPayments_Notification_default_instance_;
class CSiteManagerClient_TrackedPayments_Notification_Payment;
struct CSiteManagerClient_TrackedPayments_Notification_PaymentDefaultTypeInternal;
extern CSiteManagerClient_TrackedPayments_Notification_PaymentDefaultTypeInternal _CSiteManagerClient_TrackedPayments_Notification_Payment_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CSiteLicense_ClientGetAvailableSeats_Request* Arena::CreateMaybeMessage<::CSiteLicense_ClientGetAvailableSeats_Request>(Arena*);
template<> ::CSiteLicense_ClientGetAvailableSeats_Response* Arena::CreateMaybeMessage<::CSiteLicense_ClientGetAvailableSeats_Response>(Arena*);
template<> ::CSiteLicense_ClientSeatCheckout_Notification* Arena::CreateMaybeMessage<::CSiteLicense_ClientSeatCheckout_Notification>(Arena*);
template<> ::CSiteLicense_ClientSeatCheckout_Request* Arena::CreateMaybeMessage<::CSiteLicense_ClientSeatCheckout_Request>(Arena*);
template<> ::CSiteLicense_ClientSeatCheckout_Response* Arena::CreateMaybeMessage<::CSiteLicense_ClientSeatCheckout_Response>(Arena*);
template<> ::CSiteLicense_InitiateAssociation_Request* Arena::CreateMaybeMessage<::CSiteLicense_InitiateAssociation_Request>(Arena*);
template<> ::CSiteLicense_InitiateAssociation_Response* Arena::CreateMaybeMessage<::CSiteLicense_InitiateAssociation_Response>(Arena*);
template<> ::CSiteLicense_LCSAssociateUser_Request* Arena::CreateMaybeMessage<::CSiteLicense_LCSAssociateUser_Request>(Arena*);
template<> ::CSiteLicense_LCSAssociateUser_Response* Arena::CreateMaybeMessage<::CSiteLicense_LCSAssociateUser_Response>(Arena*);
template<> ::CSiteLicense_LCSAuthenticate_Request* Arena::CreateMaybeMessage<::CSiteLicense_LCSAuthenticate_Request>(Arena*);
template<> ::CSiteLicense_LCSAuthenticate_Response* Arena::CreateMaybeMessage<::CSiteLicense_LCSAuthenticate_Response>(Arena*);
template<> ::CSiteManagerClient_IncomingClient_Request* Arena::CreateMaybeMessage<::CSiteManagerClient_IncomingClient_Request>(Arena*);
template<> ::CSiteManagerClient_IncomingClient_Response* Arena::CreateMaybeMessage<::CSiteManagerClient_IncomingClient_Response>(Arena*);
template<> ::CSiteManagerClient_TrackedPayments_Notification* Arena::CreateMaybeMessage<::CSiteManagerClient_TrackedPayments_Notification>(Arena*);
template<> ::CSiteManagerClient_TrackedPayments_Notification_Payment* Arena::CreateMaybeMessage<::CSiteManagerClient_TrackedPayments_Notification_Payment>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class CSiteManagerClient_IncomingClient_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSiteManagerClient_IncomingClient_Request) */ {
 public:
  inline CSiteManagerClient_IncomingClient_Request() : CSiteManagerClient_IncomingClient_Request(nullptr) {}
  ~CSiteManagerClient_IncomingClient_Request() override;
  explicit constexpr CSiteManagerClient_IncomingClient_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSiteManagerClient_IncomingClient_Request(const CSiteManagerClient_IncomingClient_Request& from);
  CSiteManagerClient_IncomingClient_Request(CSiteManagerClient_IncomingClient_Request&& from) noexcept
    : CSiteManagerClient_IncomingClient_Request() {
    *this = ::std::move(from);
  }

  inline CSiteManagerClient_IncomingClient_Request& operator=(const CSiteManagerClient_IncomingClient_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSiteManagerClient_IncomingClient_Request& operator=(CSiteManagerClient_IncomingClient_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSiteManagerClient_IncomingClient_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSiteManagerClient_IncomingClient_Request* internal_default_instance() {
    return reinterpret_cast<const CSiteManagerClient_IncomingClient_Request*>(
               &_CSiteManagerClient_IncomingClient_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CSiteManagerClient_IncomingClient_Request& a, CSiteManagerClient_IncomingClient_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CSiteManagerClient_IncomingClient_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSiteManagerClient_IncomingClient_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSiteManagerClient_IncomingClient_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSiteManagerClient_IncomingClient_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSiteManagerClient_IncomingClient_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CSiteManagerClient_IncomingClient_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSiteManagerClient_IncomingClient_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSiteManagerClient_IncomingClient_Request";
  }
  protected:
  explicit CSiteManagerClient_IncomingClient_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectionKeyFieldNumber = 4,
    kSiteInstanceidFieldNumber = 1,
    kClientSteamidFieldNumber = 2,
    kClientLocalIpFieldNumber = 3,
  };
  // optional bytes connection_key = 4;
  bool has_connection_key() const;
  private:
  bool _internal_has_connection_key() const;
  public:
  void clear_connection_key();
  const std::string& connection_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_connection_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_connection_key();
  PROTOBUF_NODISCARD std::string* release_connection_key();
  void set_allocated_connection_key(std::string* connection_key);
  private:
  const std::string& _internal_connection_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_connection_key(const std::string& value);
  std::string* _internal_mutable_connection_key();
  public:

  // optional fixed64 site_instanceid = 1;
  bool has_site_instanceid() const;
  private:
  bool _internal_has_site_instanceid() const;
  public:
  void clear_site_instanceid();
  uint64_t site_instanceid() const;
  void set_site_instanceid(uint64_t value);
  private:
  uint64_t _internal_site_instanceid() const;
  void _internal_set_site_instanceid(uint64_t value);
  public:

  // optional fixed64 client_steamid = 2;
  bool has_client_steamid() const;
  private:
  bool _internal_has_client_steamid() const;
  public:
  void clear_client_steamid();
  uint64_t client_steamid() const;
  void set_client_steamid(uint64_t value);
  private:
  uint64_t _internal_client_steamid() const;
  void _internal_set_client_steamid(uint64_t value);
  public:

  // optional fixed32 client_local_ip = 3;
  bool has_client_local_ip() const;
  private:
  bool _internal_has_client_local_ip() const;
  public:
  void clear_client_local_ip();
  uint32_t client_local_ip() const;
  void set_client_local_ip(uint32_t value);
  private:
  uint32_t _internal_client_local_ip() const;
  void _internal_set_client_local_ip(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CSiteManagerClient_IncomingClient_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr connection_key_;
  uint64_t site_instanceid_;
  uint64_t client_steamid_;
  uint32_t client_local_ip_;
  friend struct ::TableStruct_steammessages_5fsite_5flicense_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CSiteManagerClient_IncomingClient_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CSiteManagerClient_IncomingClient_Response) */ {
 public:
  inline CSiteManagerClient_IncomingClient_Response() : CSiteManagerClient_IncomingClient_Response(nullptr) {}
  explicit constexpr CSiteManagerClient_IncomingClient_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSiteManagerClient_IncomingClient_Response(const CSiteManagerClient_IncomingClient_Response& from);
  CSiteManagerClient_IncomingClient_Response(CSiteManagerClient_IncomingClient_Response&& from) noexcept
    : CSiteManagerClient_IncomingClient_Response() {
    *this = ::std::move(from);
  }

  inline CSiteManagerClient_IncomingClient_Response& operator=(const CSiteManagerClient_IncomingClient_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSiteManagerClient_IncomingClient_Response& operator=(CSiteManagerClient_IncomingClient_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSiteManagerClient_IncomingClient_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSiteManagerClient_IncomingClient_Response* internal_default_instance() {
    return reinterpret_cast<const CSiteManagerClient_IncomingClient_Response*>(
               &_CSiteManagerClient_IncomingClient_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CSiteManagerClient_IncomingClient_Response& a, CSiteManagerClient_IncomingClient_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CSiteManagerClient_IncomingClient_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSiteManagerClient_IncomingClient_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSiteManagerClient_IncomingClient_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSiteManagerClient_IncomingClient_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CSiteManagerClient_IncomingClient_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CSiteManagerClient_IncomingClient_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSiteManagerClient_IncomingClient_Response";
  }
  protected:
  explicit CSiteManagerClient_IncomingClient_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CSiteManagerClient_IncomingClient_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fsite_5flicense_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CSiteLicense_ClientSeatCheckout_Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSiteLicense_ClientSeatCheckout_Notification) */ {
 public:
  inline CSiteLicense_ClientSeatCheckout_Notification() : CSiteLicense_ClientSeatCheckout_Notification(nullptr) {}
  ~CSiteLicense_ClientSeatCheckout_Notification() override;
  explicit constexpr CSiteLicense_ClientSeatCheckout_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSiteLicense_ClientSeatCheckout_Notification(const CSiteLicense_ClientSeatCheckout_Notification& from);
  CSiteLicense_ClientSeatCheckout_Notification(CSiteLicense_ClientSeatCheckout_Notification&& from) noexcept
    : CSiteLicense_ClientSeatCheckout_Notification() {
    *this = ::std::move(from);
  }

  inline CSiteLicense_ClientSeatCheckout_Notification& operator=(const CSiteLicense_ClientSeatCheckout_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSiteLicense_ClientSeatCheckout_Notification& operator=(CSiteLicense_ClientSeatCheckout_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSiteLicense_ClientSeatCheckout_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSiteLicense_ClientSeatCheckout_Notification* internal_default_instance() {
    return reinterpret_cast<const CSiteLicense_ClientSeatCheckout_Notification*>(
               &_CSiteLicense_ClientSeatCheckout_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CSiteLicense_ClientSeatCheckout_Notification& a, CSiteLicense_ClientSeatCheckout_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CSiteLicense_ClientSeatCheckout_Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSiteLicense_ClientSeatCheckout_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSiteLicense_ClientSeatCheckout_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSiteLicense_ClientSeatCheckout_Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSiteLicense_ClientSeatCheckout_Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CSiteLicense_ClientSeatCheckout_Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSiteLicense_ClientSeatCheckout_Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSiteLicense_ClientSeatCheckout_Notification";
  }
  protected:
  explicit CSiteLicense_ClientSeatCheckout_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppidFieldNumber = 1,
    kEresultFieldNumber = 2,
  };
  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional uint32 eresult = 2;
  bool has_eresult() const;
  private:
  bool _internal_has_eresult() const;
  public:
  void clear_eresult();
  uint32_t eresult() const;
  void set_eresult(uint32_t value);
  private:
  uint32_t _internal_eresult() const;
  void _internal_set_eresult(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CSiteLicense_ClientSeatCheckout_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t appid_;
  uint32_t eresult_;
  friend struct ::TableStruct_steammessages_5fsite_5flicense_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CSiteManagerClient_TrackedPayments_Notification_Payment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSiteManagerClient_TrackedPayments_Notification.Payment) */ {
 public:
  inline CSiteManagerClient_TrackedPayments_Notification_Payment() : CSiteManagerClient_TrackedPayments_Notification_Payment(nullptr) {}
  ~CSiteManagerClient_TrackedPayments_Notification_Payment() override;
  explicit constexpr CSiteManagerClient_TrackedPayments_Notification_Payment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSiteManagerClient_TrackedPayments_Notification_Payment(const CSiteManagerClient_TrackedPayments_Notification_Payment& from);
  CSiteManagerClient_TrackedPayments_Notification_Payment(CSiteManagerClient_TrackedPayments_Notification_Payment&& from) noexcept
    : CSiteManagerClient_TrackedPayments_Notification_Payment() {
    *this = ::std::move(from);
  }

  inline CSiteManagerClient_TrackedPayments_Notification_Payment& operator=(const CSiteManagerClient_TrackedPayments_Notification_Payment& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSiteManagerClient_TrackedPayments_Notification_Payment& operator=(CSiteManagerClient_TrackedPayments_Notification_Payment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSiteManagerClient_TrackedPayments_Notification_Payment& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSiteManagerClient_TrackedPayments_Notification_Payment* internal_default_instance() {
    return reinterpret_cast<const CSiteManagerClient_TrackedPayments_Notification_Payment*>(
               &_CSiteManagerClient_TrackedPayments_Notification_Payment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CSiteManagerClient_TrackedPayments_Notification_Payment& a, CSiteManagerClient_TrackedPayments_Notification_Payment& b) {
    a.Swap(&b);
  }
  inline void Swap(CSiteManagerClient_TrackedPayments_Notification_Payment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSiteManagerClient_TrackedPayments_Notification_Payment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSiteManagerClient_TrackedPayments_Notification_Payment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSiteManagerClient_TrackedPayments_Notification_Payment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSiteManagerClient_TrackedPayments_Notification_Payment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CSiteManagerClient_TrackedPayments_Notification_Payment& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSiteManagerClient_TrackedPayments_Notification_Payment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSiteManagerClient_TrackedPayments_Notification.Payment";
  }
  protected:
  explicit CSiteManagerClient_TrackedPayments_Notification_Payment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMachineNameFieldNumber = 7,
    kPersonaNameFieldNumber = 8,
    kProfileUrlFieldNumber = 9,
    kAvatarUrlFieldNumber = 10,
    kTransidFieldNumber = 1,
    kSteamidFieldNumber = 2,
    kAmountFieldNumber = 3,
    kEcurrencyFieldNumber = 4,
    kTimeCreatedFieldNumber = 5,
    kPurchaseStatusFieldNumber = 6,
  };
  // optional string machine_name = 7;
  bool has_machine_name() const;
  private:
  bool _internal_has_machine_name() const;
  public:
  void clear_machine_name();
  const std::string& machine_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_machine_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_machine_name();
  PROTOBUF_NODISCARD std::string* release_machine_name();
  void set_allocated_machine_name(std::string* machine_name);
  private:
  const std::string& _internal_machine_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_machine_name(const std::string& value);
  std::string* _internal_mutable_machine_name();
  public:

  // optional string persona_name = 8;
  bool has_persona_name() const;
  private:
  bool _internal_has_persona_name() const;
  public:
  void clear_persona_name();
  const std::string& persona_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_persona_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_persona_name();
  PROTOBUF_NODISCARD std::string* release_persona_name();
  void set_allocated_persona_name(std::string* persona_name);
  private:
  const std::string& _internal_persona_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_persona_name(const std::string& value);
  std::string* _internal_mutable_persona_name();
  public:

  // optional string profile_url = 9;
  bool has_profile_url() const;
  private:
  bool _internal_has_profile_url() const;
  public:
  void clear_profile_url();
  const std::string& profile_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_profile_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_profile_url();
  PROTOBUF_NODISCARD std::string* release_profile_url();
  void set_allocated_profile_url(std::string* profile_url);
  private:
  const std::string& _internal_profile_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_profile_url(const std::string& value);
  std::string* _internal_mutable_profile_url();
  public:

  // optional string avatar_url = 10;
  bool has_avatar_url() const;
  private:
  bool _internal_has_avatar_url() const;
  public:
  void clear_avatar_url();
  const std::string& avatar_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_avatar_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_avatar_url();
  PROTOBUF_NODISCARD std::string* release_avatar_url();
  void set_allocated_avatar_url(std::string* avatar_url);
  private:
  const std::string& _internal_avatar_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_avatar_url(const std::string& value);
  std::string* _internal_mutable_avatar_url();
  public:

  // optional uint64 transid = 1;
  bool has_transid() const;
  private:
  bool _internal_has_transid() const;
  public:
  void clear_transid();
  uint64_t transid() const;
  void set_transid(uint64_t value);
  private:
  uint64_t _internal_transid() const;
  void _internal_set_transid(uint64_t value);
  public:

  // optional uint64 steamid = 2;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional int64 amount = 3;
  bool has_amount() const;
  private:
  bool _internal_has_amount() const;
  public:
  void clear_amount();
  int64_t amount() const;
  void set_amount(int64_t value);
  private:
  int64_t _internal_amount() const;
  void _internal_set_amount(int64_t value);
  public:

  // optional uint32 ecurrency = 4;
  bool has_ecurrency() const;
  private:
  bool _internal_has_ecurrency() const;
  public:
  void clear_ecurrency();
  uint32_t ecurrency() const;
  void set_ecurrency(uint32_t value);
  private:
  uint32_t _internal_ecurrency() const;
  void _internal_set_ecurrency(uint32_t value);
  public:

  // optional int32 time_created = 5;
  bool has_time_created() const;
  private:
  bool _internal_has_time_created() const;
  public:
  void clear_time_created();
  int32_t time_created() const;
  void set_time_created(int32_t value);
  private:
  int32_t _internal_time_created() const;
  void _internal_set_time_created(int32_t value);
  public:

  // optional int32 purchase_status = 6;
  bool has_purchase_status() const;
  private:
  bool _internal_has_purchase_status() const;
  public:
  void clear_purchase_status();
  int32_t purchase_status() const;
  void set_purchase_status(int32_t value);
  private:
  int32_t _internal_purchase_status() const;
  void _internal_set_purchase_status(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CSiteManagerClient_TrackedPayments_Notification.Payment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr machine_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr persona_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr profile_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_url_;
  uint64_t transid_;
  uint64_t steamid_;
  int64_t amount_;
  uint32_t ecurrency_;
  int32_t time_created_;
  int32_t purchase_status_;
  friend struct ::TableStruct_steammessages_5fsite_5flicense_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CSiteManagerClient_TrackedPayments_Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSiteManagerClient_TrackedPayments_Notification) */ {
 public:
  inline CSiteManagerClient_TrackedPayments_Notification() : CSiteManagerClient_TrackedPayments_Notification(nullptr) {}
  ~CSiteManagerClient_TrackedPayments_Notification() override;
  explicit constexpr CSiteManagerClient_TrackedPayments_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSiteManagerClient_TrackedPayments_Notification(const CSiteManagerClient_TrackedPayments_Notification& from);
  CSiteManagerClient_TrackedPayments_Notification(CSiteManagerClient_TrackedPayments_Notification&& from) noexcept
    : CSiteManagerClient_TrackedPayments_Notification() {
    *this = ::std::move(from);
  }

  inline CSiteManagerClient_TrackedPayments_Notification& operator=(const CSiteManagerClient_TrackedPayments_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSiteManagerClient_TrackedPayments_Notification& operator=(CSiteManagerClient_TrackedPayments_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSiteManagerClient_TrackedPayments_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSiteManagerClient_TrackedPayments_Notification* internal_default_instance() {
    return reinterpret_cast<const CSiteManagerClient_TrackedPayments_Notification*>(
               &_CSiteManagerClient_TrackedPayments_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CSiteManagerClient_TrackedPayments_Notification& a, CSiteManagerClient_TrackedPayments_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CSiteManagerClient_TrackedPayments_Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSiteManagerClient_TrackedPayments_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSiteManagerClient_TrackedPayments_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSiteManagerClient_TrackedPayments_Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSiteManagerClient_TrackedPayments_Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CSiteManagerClient_TrackedPayments_Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSiteManagerClient_TrackedPayments_Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSiteManagerClient_TrackedPayments_Notification";
  }
  protected:
  explicit CSiteManagerClient_TrackedPayments_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CSiteManagerClient_TrackedPayments_Notification_Payment Payment;

  // accessors -------------------------------------------------------

  enum : int {
    kPaymentsFieldNumber = 2,
    kSiteIdFieldNumber = 1,
  };
  // repeated .CSiteManagerClient_TrackedPayments_Notification.Payment payments = 2;
  int payments_size() const;
  private:
  int _internal_payments_size() const;
  public:
  void clear_payments();
  ::CSiteManagerClient_TrackedPayments_Notification_Payment* mutable_payments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSiteManagerClient_TrackedPayments_Notification_Payment >*
      mutable_payments();
  private:
  const ::CSiteManagerClient_TrackedPayments_Notification_Payment& _internal_payments(int index) const;
  ::CSiteManagerClient_TrackedPayments_Notification_Payment* _internal_add_payments();
  public:
  const ::CSiteManagerClient_TrackedPayments_Notification_Payment& payments(int index) const;
  ::CSiteManagerClient_TrackedPayments_Notification_Payment* add_payments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSiteManagerClient_TrackedPayments_Notification_Payment >&
      payments() const;

  // optional fixed64 site_id = 1;
  bool has_site_id() const;
  private:
  bool _internal_has_site_id() const;
  public:
  void clear_site_id();
  uint64_t site_id() const;
  void set_site_id(uint64_t value);
  private:
  uint64_t _internal_site_id() const;
  void _internal_set_site_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CSiteManagerClient_TrackedPayments_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSiteManagerClient_TrackedPayments_Notification_Payment > payments_;
  uint64_t site_id_;
  friend struct ::TableStruct_steammessages_5fsite_5flicense_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CSiteLicense_InitiateAssociation_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSiteLicense_InitiateAssociation_Request) */ {
 public:
  inline CSiteLicense_InitiateAssociation_Request() : CSiteLicense_InitiateAssociation_Request(nullptr) {}
  ~CSiteLicense_InitiateAssociation_Request() override;
  explicit constexpr CSiteLicense_InitiateAssociation_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSiteLicense_InitiateAssociation_Request(const CSiteLicense_InitiateAssociation_Request& from);
  CSiteLicense_InitiateAssociation_Request(CSiteLicense_InitiateAssociation_Request&& from) noexcept
    : CSiteLicense_InitiateAssociation_Request() {
    *this = ::std::move(from);
  }

  inline CSiteLicense_InitiateAssociation_Request& operator=(const CSiteLicense_InitiateAssociation_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSiteLicense_InitiateAssociation_Request& operator=(CSiteLicense_InitiateAssociation_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSiteLicense_InitiateAssociation_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSiteLicense_InitiateAssociation_Request* internal_default_instance() {
    return reinterpret_cast<const CSiteLicense_InitiateAssociation_Request*>(
               &_CSiteLicense_InitiateAssociation_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CSiteLicense_InitiateAssociation_Request& a, CSiteLicense_InitiateAssociation_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CSiteLicense_InitiateAssociation_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSiteLicense_InitiateAssociation_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSiteLicense_InitiateAssociation_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSiteLicense_InitiateAssociation_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSiteLicense_InitiateAssociation_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CSiteLicense_InitiateAssociation_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSiteLicense_InitiateAssociation_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSiteLicense_InitiateAssociation_Request";
  }
  protected:
  explicit CSiteLicense_InitiateAssociation_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSiteSteamidFieldNumber = 1,
    kSiteInstanceidFieldNumber = 2,
    kClientLocalIpFieldNumber = 3,
  };
  // optional fixed64 site_steamid = 1;
  bool has_site_steamid() const;
  private:
  bool _internal_has_site_steamid() const;
  public:
  void clear_site_steamid();
  uint64_t site_steamid() const;
  void set_site_steamid(uint64_t value);
  private:
  uint64_t _internal_site_steamid() const;
  void _internal_set_site_steamid(uint64_t value);
  public:

  // optional fixed64 site_instanceid = 2;
  bool has_site_instanceid() const;
  private:
  bool _internal_has_site_instanceid() const;
  public:
  void clear_site_instanceid();
  uint64_t site_instanceid() const;
  void set_site_instanceid(uint64_t value);
  private:
  uint64_t _internal_site_instanceid() const;
  void _internal_set_site_instanceid(uint64_t value);
  public:

  // optional fixed32 client_local_ip = 3;
  bool has_client_local_ip() const;
  private:
  bool _internal_has_client_local_ip() const;
  public:
  void clear_client_local_ip();
  uint32_t client_local_ip() const;
  void set_client_local_ip(uint32_t value);
  private:
  uint32_t _internal_client_local_ip() const;
  void _internal_set_client_local_ip(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CSiteLicense_InitiateAssociation_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t site_steamid_;
  uint64_t site_instanceid_;
  uint32_t client_local_ip_;
  friend struct ::TableStruct_steammessages_5fsite_5flicense_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CSiteLicense_InitiateAssociation_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSiteLicense_InitiateAssociation_Response) */ {
 public:
  inline CSiteLicense_InitiateAssociation_Response() : CSiteLicense_InitiateAssociation_Response(nullptr) {}
  ~CSiteLicense_InitiateAssociation_Response() override;
  explicit constexpr CSiteLicense_InitiateAssociation_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSiteLicense_InitiateAssociation_Response(const CSiteLicense_InitiateAssociation_Response& from);
  CSiteLicense_InitiateAssociation_Response(CSiteLicense_InitiateAssociation_Response&& from) noexcept
    : CSiteLicense_InitiateAssociation_Response() {
    *this = ::std::move(from);
  }

  inline CSiteLicense_InitiateAssociation_Response& operator=(const CSiteLicense_InitiateAssociation_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSiteLicense_InitiateAssociation_Response& operator=(CSiteLicense_InitiateAssociation_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSiteLicense_InitiateAssociation_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSiteLicense_InitiateAssociation_Response* internal_default_instance() {
    return reinterpret_cast<const CSiteLicense_InitiateAssociation_Response*>(
               &_CSiteLicense_InitiateAssociation_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CSiteLicense_InitiateAssociation_Response& a, CSiteLicense_InitiateAssociation_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CSiteLicense_InitiateAssociation_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSiteLicense_InitiateAssociation_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSiteLicense_InitiateAssociation_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSiteLicense_InitiateAssociation_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSiteLicense_InitiateAssociation_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CSiteLicense_InitiateAssociation_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSiteLicense_InitiateAssociation_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSiteLicense_InitiateAssociation_Response";
  }
  protected:
  explicit CSiteLicense_InitiateAssociation_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectionKeyFieldNumber = 1,
  };
  // optional bytes connection_key = 1;
  bool has_connection_key() const;
  private:
  bool _internal_has_connection_key() const;
  public:
  void clear_connection_key();
  const std::string& connection_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_connection_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_connection_key();
  PROTOBUF_NODISCARD std::string* release_connection_key();
  void set_allocated_connection_key(std::string* connection_key);
  private:
  const std::string& _internal_connection_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_connection_key(const std::string& value);
  std::string* _internal_mutable_connection_key();
  public:

  // @@protoc_insertion_point(class_scope:CSiteLicense_InitiateAssociation_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr connection_key_;
  friend struct ::TableStruct_steammessages_5fsite_5flicense_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CSiteLicense_LCSAuthenticate_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSiteLicense_LCSAuthenticate_Request) */ {
 public:
  inline CSiteLicense_LCSAuthenticate_Request() : CSiteLicense_LCSAuthenticate_Request(nullptr) {}
  ~CSiteLicense_LCSAuthenticate_Request() override;
  explicit constexpr CSiteLicense_LCSAuthenticate_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSiteLicense_LCSAuthenticate_Request(const CSiteLicense_LCSAuthenticate_Request& from);
  CSiteLicense_LCSAuthenticate_Request(CSiteLicense_LCSAuthenticate_Request&& from) noexcept
    : CSiteLicense_LCSAuthenticate_Request() {
    *this = ::std::move(from);
  }

  inline CSiteLicense_LCSAuthenticate_Request& operator=(const CSiteLicense_LCSAuthenticate_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSiteLicense_LCSAuthenticate_Request& operator=(CSiteLicense_LCSAuthenticate_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSiteLicense_LCSAuthenticate_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSiteLicense_LCSAuthenticate_Request* internal_default_instance() {
    return reinterpret_cast<const CSiteLicense_LCSAuthenticate_Request*>(
               &_CSiteLicense_LCSAuthenticate_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CSiteLicense_LCSAuthenticate_Request& a, CSiteLicense_LCSAuthenticate_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CSiteLicense_LCSAuthenticate_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSiteLicense_LCSAuthenticate_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSiteLicense_LCSAuthenticate_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSiteLicense_LCSAuthenticate_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSiteLicense_LCSAuthenticate_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CSiteLicense_LCSAuthenticate_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSiteLicense_LCSAuthenticate_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSiteLicense_LCSAuthenticate_Request";
  }
  protected:
  explicit CSiteLicense_LCSAuthenticate_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstanceidFieldNumber = 1,
  };
  // optional fixed64 instanceid = 1;
  bool has_instanceid() const;
  private:
  bool _internal_has_instanceid() const;
  public:
  void clear_instanceid();
  uint64_t instanceid() const;
  void set_instanceid(uint64_t value);
  private:
  uint64_t _internal_instanceid() const;
  void _internal_set_instanceid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CSiteLicense_LCSAuthenticate_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t instanceid_;
  friend struct ::TableStruct_steammessages_5fsite_5flicense_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CSiteLicense_LCSAuthenticate_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSiteLicense_LCSAuthenticate_Response) */ {
 public:
  inline CSiteLicense_LCSAuthenticate_Response() : CSiteLicense_LCSAuthenticate_Response(nullptr) {}
  ~CSiteLicense_LCSAuthenticate_Response() override;
  explicit constexpr CSiteLicense_LCSAuthenticate_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSiteLicense_LCSAuthenticate_Response(const CSiteLicense_LCSAuthenticate_Response& from);
  CSiteLicense_LCSAuthenticate_Response(CSiteLicense_LCSAuthenticate_Response&& from) noexcept
    : CSiteLicense_LCSAuthenticate_Response() {
    *this = ::std::move(from);
  }

  inline CSiteLicense_LCSAuthenticate_Response& operator=(const CSiteLicense_LCSAuthenticate_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSiteLicense_LCSAuthenticate_Response& operator=(CSiteLicense_LCSAuthenticate_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSiteLicense_LCSAuthenticate_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSiteLicense_LCSAuthenticate_Response* internal_default_instance() {
    return reinterpret_cast<const CSiteLicense_LCSAuthenticate_Response*>(
               &_CSiteLicense_LCSAuthenticate_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CSiteLicense_LCSAuthenticate_Response& a, CSiteLicense_LCSAuthenticate_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CSiteLicense_LCSAuthenticate_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSiteLicense_LCSAuthenticate_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSiteLicense_LCSAuthenticate_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSiteLicense_LCSAuthenticate_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSiteLicense_LCSAuthenticate_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CSiteLicense_LCSAuthenticate_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSiteLicense_LCSAuthenticate_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSiteLicense_LCSAuthenticate_Response";
  }
  protected:
  explicit CSiteLicense_LCSAuthenticate_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSiteNameFieldNumber = 2,
    kSiteIdFieldNumber = 1,
    kNewSessionFieldNumber = 3,
    kNoSiteLicensesFieldNumber = 4,
  };
  // optional string site_name = 2;
  bool has_site_name() const;
  private:
  bool _internal_has_site_name() const;
  public:
  void clear_site_name();
  const std::string& site_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_site_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_site_name();
  PROTOBUF_NODISCARD std::string* release_site_name();
  void set_allocated_site_name(std::string* site_name);
  private:
  const std::string& _internal_site_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_site_name(const std::string& value);
  std::string* _internal_mutable_site_name();
  public:

  // optional uint64 site_id = 1;
  bool has_site_id() const;
  private:
  bool _internal_has_site_id() const;
  public:
  void clear_site_id();
  uint64_t site_id() const;
  void set_site_id(uint64_t value);
  private:
  uint64_t _internal_site_id() const;
  void _internal_set_site_id(uint64_t value);
  public:

  // optional bool new_session = 3;
  bool has_new_session() const;
  private:
  bool _internal_has_new_session() const;
  public:
  void clear_new_session();
  bool new_session() const;
  void set_new_session(bool value);
  private:
  bool _internal_new_session() const;
  void _internal_set_new_session(bool value);
  public:

  // optional bool no_site_licenses = 4;
  bool has_no_site_licenses() const;
  private:
  bool _internal_has_no_site_licenses() const;
  public:
  void clear_no_site_licenses();
  bool no_site_licenses() const;
  void set_no_site_licenses(bool value);
  private:
  bool _internal_no_site_licenses() const;
  void _internal_set_no_site_licenses(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CSiteLicense_LCSAuthenticate_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr site_name_;
  uint64_t site_id_;
  bool new_session_;
  bool no_site_licenses_;
  friend struct ::TableStruct_steammessages_5fsite_5flicense_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CSiteLicense_LCSAssociateUser_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSiteLicense_LCSAssociateUser_Request) */ {
 public:
  inline CSiteLicense_LCSAssociateUser_Request() : CSiteLicense_LCSAssociateUser_Request(nullptr) {}
  ~CSiteLicense_LCSAssociateUser_Request() override;
  explicit constexpr CSiteLicense_LCSAssociateUser_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSiteLicense_LCSAssociateUser_Request(const CSiteLicense_LCSAssociateUser_Request& from);
  CSiteLicense_LCSAssociateUser_Request(CSiteLicense_LCSAssociateUser_Request&& from) noexcept
    : CSiteLicense_LCSAssociateUser_Request() {
    *this = ::std::move(from);
  }

  inline CSiteLicense_LCSAssociateUser_Request& operator=(const CSiteLicense_LCSAssociateUser_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSiteLicense_LCSAssociateUser_Request& operator=(CSiteLicense_LCSAssociateUser_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSiteLicense_LCSAssociateUser_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSiteLicense_LCSAssociateUser_Request* internal_default_instance() {
    return reinterpret_cast<const CSiteLicense_LCSAssociateUser_Request*>(
               &_CSiteLicense_LCSAssociateUser_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CSiteLicense_LCSAssociateUser_Request& a, CSiteLicense_LCSAssociateUser_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CSiteLicense_LCSAssociateUser_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSiteLicense_LCSAssociateUser_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSiteLicense_LCSAssociateUser_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSiteLicense_LCSAssociateUser_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSiteLicense_LCSAssociateUser_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CSiteLicense_LCSAssociateUser_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSiteLicense_LCSAssociateUser_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSiteLicense_LCSAssociateUser_Request";
  }
  protected:
  explicit CSiteLicense_LCSAssociateUser_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMachineNameFieldNumber = 4,
    kSteamidFieldNumber = 1,
    kInstanceidFieldNumber = 3,
    kLocalIpFieldNumber = 2,
  };
  // optional string machine_name = 4;
  bool has_machine_name() const;
  private:
  bool _internal_has_machine_name() const;
  public:
  void clear_machine_name();
  const std::string& machine_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_machine_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_machine_name();
  PROTOBUF_NODISCARD std::string* release_machine_name();
  void set_allocated_machine_name(std::string* machine_name);
  private:
  const std::string& _internal_machine_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_machine_name(const std::string& value);
  std::string* _internal_mutable_machine_name();
  public:

  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional fixed64 instanceid = 3;
  bool has_instanceid() const;
  private:
  bool _internal_has_instanceid() const;
  public:
  void clear_instanceid();
  uint64_t instanceid() const;
  void set_instanceid(uint64_t value);
  private:
  uint64_t _internal_instanceid() const;
  void _internal_set_instanceid(uint64_t value);
  public:

  // optional fixed32 local_ip = 2;
  bool has_local_ip() const;
  private:
  bool _internal_has_local_ip() const;
  public:
  void clear_local_ip();
  uint32_t local_ip() const;
  void set_local_ip(uint32_t value);
  private:
  uint32_t _internal_local_ip() const;
  void _internal_set_local_ip(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CSiteLicense_LCSAssociateUser_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr machine_name_;
  uint64_t steamid_;
  uint64_t instanceid_;
  uint32_t local_ip_;
  friend struct ::TableStruct_steammessages_5fsite_5flicense_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CSiteLicense_LCSAssociateUser_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CSiteLicense_LCSAssociateUser_Response) */ {
 public:
  inline CSiteLicense_LCSAssociateUser_Response() : CSiteLicense_LCSAssociateUser_Response(nullptr) {}
  explicit constexpr CSiteLicense_LCSAssociateUser_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSiteLicense_LCSAssociateUser_Response(const CSiteLicense_LCSAssociateUser_Response& from);
  CSiteLicense_LCSAssociateUser_Response(CSiteLicense_LCSAssociateUser_Response&& from) noexcept
    : CSiteLicense_LCSAssociateUser_Response() {
    *this = ::std::move(from);
  }

  inline CSiteLicense_LCSAssociateUser_Response& operator=(const CSiteLicense_LCSAssociateUser_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSiteLicense_LCSAssociateUser_Response& operator=(CSiteLicense_LCSAssociateUser_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSiteLicense_LCSAssociateUser_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSiteLicense_LCSAssociateUser_Response* internal_default_instance() {
    return reinterpret_cast<const CSiteLicense_LCSAssociateUser_Response*>(
               &_CSiteLicense_LCSAssociateUser_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CSiteLicense_LCSAssociateUser_Response& a, CSiteLicense_LCSAssociateUser_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CSiteLicense_LCSAssociateUser_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSiteLicense_LCSAssociateUser_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSiteLicense_LCSAssociateUser_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSiteLicense_LCSAssociateUser_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CSiteLicense_LCSAssociateUser_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CSiteLicense_LCSAssociateUser_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSiteLicense_LCSAssociateUser_Response";
  }
  protected:
  explicit CSiteLicense_LCSAssociateUser_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CSiteLicense_LCSAssociateUser_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fsite_5flicense_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CSiteLicense_ClientSeatCheckout_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSiteLicense_ClientSeatCheckout_Request) */ {
 public:
  inline CSiteLicense_ClientSeatCheckout_Request() : CSiteLicense_ClientSeatCheckout_Request(nullptr) {}
  ~CSiteLicense_ClientSeatCheckout_Request() override;
  explicit constexpr CSiteLicense_ClientSeatCheckout_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSiteLicense_ClientSeatCheckout_Request(const CSiteLicense_ClientSeatCheckout_Request& from);
  CSiteLicense_ClientSeatCheckout_Request(CSiteLicense_ClientSeatCheckout_Request&& from) noexcept
    : CSiteLicense_ClientSeatCheckout_Request() {
    *this = ::std::move(from);
  }

  inline CSiteLicense_ClientSeatCheckout_Request& operator=(const CSiteLicense_ClientSeatCheckout_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSiteLicense_ClientSeatCheckout_Request& operator=(CSiteLicense_ClientSeatCheckout_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSiteLicense_ClientSeatCheckout_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSiteLicense_ClientSeatCheckout_Request* internal_default_instance() {
    return reinterpret_cast<const CSiteLicense_ClientSeatCheckout_Request*>(
               &_CSiteLicense_ClientSeatCheckout_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CSiteLicense_ClientSeatCheckout_Request& a, CSiteLicense_ClientSeatCheckout_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CSiteLicense_ClientSeatCheckout_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSiteLicense_ClientSeatCheckout_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSiteLicense_ClientSeatCheckout_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSiteLicense_ClientSeatCheckout_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSiteLicense_ClientSeatCheckout_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CSiteLicense_ClientSeatCheckout_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSiteLicense_ClientSeatCheckout_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSiteLicense_ClientSeatCheckout_Request";
  }
  protected:
  explicit CSiteLicense_ClientSeatCheckout_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidFieldNumber = 1,
    kInstanceidFieldNumber = 2,
    kAppidFieldNumber = 3,
  };
  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional fixed64 instanceid = 2;
  bool has_instanceid() const;
  private:
  bool _internal_has_instanceid() const;
  public:
  void clear_instanceid();
  uint64_t instanceid() const;
  void set_instanceid(uint64_t value);
  private:
  uint64_t _internal_instanceid() const;
  void _internal_set_instanceid(uint64_t value);
  public:

  // optional uint32 appid = 3;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CSiteLicense_ClientSeatCheckout_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t steamid_;
  uint64_t instanceid_;
  uint32_t appid_;
  friend struct ::TableStruct_steammessages_5fsite_5flicense_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CSiteLicense_ClientSeatCheckout_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CSiteLicense_ClientSeatCheckout_Response) */ {
 public:
  inline CSiteLicense_ClientSeatCheckout_Response() : CSiteLicense_ClientSeatCheckout_Response(nullptr) {}
  explicit constexpr CSiteLicense_ClientSeatCheckout_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSiteLicense_ClientSeatCheckout_Response(const CSiteLicense_ClientSeatCheckout_Response& from);
  CSiteLicense_ClientSeatCheckout_Response(CSiteLicense_ClientSeatCheckout_Response&& from) noexcept
    : CSiteLicense_ClientSeatCheckout_Response() {
    *this = ::std::move(from);
  }

  inline CSiteLicense_ClientSeatCheckout_Response& operator=(const CSiteLicense_ClientSeatCheckout_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSiteLicense_ClientSeatCheckout_Response& operator=(CSiteLicense_ClientSeatCheckout_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSiteLicense_ClientSeatCheckout_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSiteLicense_ClientSeatCheckout_Response* internal_default_instance() {
    return reinterpret_cast<const CSiteLicense_ClientSeatCheckout_Response*>(
               &_CSiteLicense_ClientSeatCheckout_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CSiteLicense_ClientSeatCheckout_Response& a, CSiteLicense_ClientSeatCheckout_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CSiteLicense_ClientSeatCheckout_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSiteLicense_ClientSeatCheckout_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSiteLicense_ClientSeatCheckout_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSiteLicense_ClientSeatCheckout_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CSiteLicense_ClientSeatCheckout_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CSiteLicense_ClientSeatCheckout_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSiteLicense_ClientSeatCheckout_Response";
  }
  protected:
  explicit CSiteLicense_ClientSeatCheckout_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CSiteLicense_ClientSeatCheckout_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fsite_5flicense_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CSiteLicense_ClientGetAvailableSeats_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSiteLicense_ClientGetAvailableSeats_Request) */ {
 public:
  inline CSiteLicense_ClientGetAvailableSeats_Request() : CSiteLicense_ClientGetAvailableSeats_Request(nullptr) {}
  ~CSiteLicense_ClientGetAvailableSeats_Request() override;
  explicit constexpr CSiteLicense_ClientGetAvailableSeats_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSiteLicense_ClientGetAvailableSeats_Request(const CSiteLicense_ClientGetAvailableSeats_Request& from);
  CSiteLicense_ClientGetAvailableSeats_Request(CSiteLicense_ClientGetAvailableSeats_Request&& from) noexcept
    : CSiteLicense_ClientGetAvailableSeats_Request() {
    *this = ::std::move(from);
  }

  inline CSiteLicense_ClientGetAvailableSeats_Request& operator=(const CSiteLicense_ClientGetAvailableSeats_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSiteLicense_ClientGetAvailableSeats_Request& operator=(CSiteLicense_ClientGetAvailableSeats_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSiteLicense_ClientGetAvailableSeats_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSiteLicense_ClientGetAvailableSeats_Request* internal_default_instance() {
    return reinterpret_cast<const CSiteLicense_ClientGetAvailableSeats_Request*>(
               &_CSiteLicense_ClientGetAvailableSeats_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CSiteLicense_ClientGetAvailableSeats_Request& a, CSiteLicense_ClientGetAvailableSeats_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CSiteLicense_ClientGetAvailableSeats_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSiteLicense_ClientGetAvailableSeats_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSiteLicense_ClientGetAvailableSeats_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSiteLicense_ClientGetAvailableSeats_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSiteLicense_ClientGetAvailableSeats_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CSiteLicense_ClientGetAvailableSeats_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSiteLicense_ClientGetAvailableSeats_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSiteLicense_ClientGetAvailableSeats_Request";
  }
  protected:
  explicit CSiteLicense_ClientGetAvailableSeats_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidFieldNumber = 1,
    kInstanceidFieldNumber = 2,
    kAppidFieldNumber = 3,
  };
  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional fixed64 instanceid = 2;
  bool has_instanceid() const;
  private:
  bool _internal_has_instanceid() const;
  public:
  void clear_instanceid();
  uint64_t instanceid() const;
  void set_instanceid(uint64_t value);
  private:
  uint64_t _internal_instanceid() const;
  void _internal_set_instanceid(uint64_t value);
  public:

  // optional uint32 appid = 3;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CSiteLicense_ClientGetAvailableSeats_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t steamid_;
  uint64_t instanceid_;
  uint32_t appid_;
  friend struct ::TableStruct_steammessages_5fsite_5flicense_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CSiteLicense_ClientGetAvailableSeats_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSiteLicense_ClientGetAvailableSeats_Response) */ {
 public:
  inline CSiteLicense_ClientGetAvailableSeats_Response() : CSiteLicense_ClientGetAvailableSeats_Response(nullptr) {}
  ~CSiteLicense_ClientGetAvailableSeats_Response() override;
  explicit constexpr CSiteLicense_ClientGetAvailableSeats_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSiteLicense_ClientGetAvailableSeats_Response(const CSiteLicense_ClientGetAvailableSeats_Response& from);
  CSiteLicense_ClientGetAvailableSeats_Response(CSiteLicense_ClientGetAvailableSeats_Response&& from) noexcept
    : CSiteLicense_ClientGetAvailableSeats_Response() {
    *this = ::std::move(from);
  }

  inline CSiteLicense_ClientGetAvailableSeats_Response& operator=(const CSiteLicense_ClientGetAvailableSeats_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSiteLicense_ClientGetAvailableSeats_Response& operator=(CSiteLicense_ClientGetAvailableSeats_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSiteLicense_ClientGetAvailableSeats_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSiteLicense_ClientGetAvailableSeats_Response* internal_default_instance() {
    return reinterpret_cast<const CSiteLicense_ClientGetAvailableSeats_Response*>(
               &_CSiteLicense_ClientGetAvailableSeats_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CSiteLicense_ClientGetAvailableSeats_Response& a, CSiteLicense_ClientGetAvailableSeats_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CSiteLicense_ClientGetAvailableSeats_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSiteLicense_ClientGetAvailableSeats_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSiteLicense_ClientGetAvailableSeats_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSiteLicense_ClientGetAvailableSeats_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSiteLicense_ClientGetAvailableSeats_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CSiteLicense_ClientGetAvailableSeats_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSiteLicense_ClientGetAvailableSeats_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSiteLicense_ClientGetAvailableSeats_Response";
  }
  protected:
  explicit CSiteLicense_ClientGetAvailableSeats_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAvailableSeatsFieldNumber = 1,
  };
  // optional uint32 available_seats = 1;
  bool has_available_seats() const;
  private:
  bool _internal_has_available_seats() const;
  public:
  void clear_available_seats();
  uint32_t available_seats() const;
  void set_available_seats(uint32_t value);
  private:
  uint32_t _internal_available_seats() const;
  void _internal_set_available_seats(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CSiteLicense_ClientGetAvailableSeats_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t available_seats_;
  friend struct ::TableStruct_steammessages_5fsite_5flicense_2esteamclient_2eproto;
};
// ===================================================================

class SiteManagerClient_Stub;

class SiteManagerClient : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline SiteManagerClient() {};
 public:
  virtual ~SiteManagerClient();

  typedef SiteManagerClient_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void IncomingClient(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CSiteManagerClient_IncomingClient_Request* request,
                       ::CSiteManagerClient_IncomingClient_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void ClientSeatCheckoutNotification(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CSiteLicense_ClientSeatCheckout_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void TrackedPaymentsNotification(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CSiteManagerClient_TrackedPayments_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(SiteManagerClient);
};

class SiteManagerClient_Stub : public SiteManagerClient {
 public:
  SiteManagerClient_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  SiteManagerClient_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~SiteManagerClient_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements SiteManagerClient ------------------------------------------

  void IncomingClient(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CSiteManagerClient_IncomingClient_Request* request,
                       ::CSiteManagerClient_IncomingClient_Response* response,
                       ::google::protobuf::Closure* done);
  void ClientSeatCheckoutNotification(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CSiteLicense_ClientSeatCheckout_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void TrackedPaymentsNotification(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CSiteManagerClient_TrackedPayments_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(SiteManagerClient_Stub);
};


// -------------------------------------------------------------------

class SiteLicense_Stub;

class SiteLicense : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline SiteLicense() {};
 public:
  virtual ~SiteLicense();

  typedef SiteLicense_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void InitiateAssociation(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CSiteLicense_InitiateAssociation_Request* request,
                       ::CSiteLicense_InitiateAssociation_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void LCSAuthenticate(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CSiteLicense_LCSAuthenticate_Request* request,
                       ::CSiteLicense_LCSAuthenticate_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void LCSAssociateUser(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CSiteLicense_LCSAssociateUser_Request* request,
                       ::CSiteLicense_LCSAssociateUser_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void ClientSeatCheckout(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CSiteLicense_ClientSeatCheckout_Request* request,
                       ::CSiteLicense_ClientSeatCheckout_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void ClientGetAvailableSeats(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CSiteLicense_ClientGetAvailableSeats_Request* request,
                       ::CSiteLicense_ClientGetAvailableSeats_Response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(SiteLicense);
};

class SiteLicense_Stub : public SiteLicense {
 public:
  SiteLicense_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  SiteLicense_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~SiteLicense_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements SiteLicense ------------------------------------------

  void InitiateAssociation(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CSiteLicense_InitiateAssociation_Request* request,
                       ::CSiteLicense_InitiateAssociation_Response* response,
                       ::google::protobuf::Closure* done);
  void LCSAuthenticate(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CSiteLicense_LCSAuthenticate_Request* request,
                       ::CSiteLicense_LCSAuthenticate_Response* response,
                       ::google::protobuf::Closure* done);
  void LCSAssociateUser(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CSiteLicense_LCSAssociateUser_Request* request,
                       ::CSiteLicense_LCSAssociateUser_Response* response,
                       ::google::protobuf::Closure* done);
  void ClientSeatCheckout(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CSiteLicense_ClientSeatCheckout_Request* request,
                       ::CSiteLicense_ClientSeatCheckout_Response* response,
                       ::google::protobuf::Closure* done);
  void ClientGetAvailableSeats(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CSiteLicense_ClientGetAvailableSeats_Request* request,
                       ::CSiteLicense_ClientGetAvailableSeats_Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(SiteLicense_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CSiteManagerClient_IncomingClient_Request

// optional fixed64 site_instanceid = 1;
inline bool CSiteManagerClient_IncomingClient_Request::_internal_has_site_instanceid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSiteManagerClient_IncomingClient_Request::has_site_instanceid() const {
  return _internal_has_site_instanceid();
}
inline void CSiteManagerClient_IncomingClient_Request::clear_site_instanceid() {
  site_instanceid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CSiteManagerClient_IncomingClient_Request::_internal_site_instanceid() const {
  return site_instanceid_;
}
inline uint64_t CSiteManagerClient_IncomingClient_Request::site_instanceid() const {
  // @@protoc_insertion_point(field_get:CSiteManagerClient_IncomingClient_Request.site_instanceid)
  return _internal_site_instanceid();
}
inline void CSiteManagerClient_IncomingClient_Request::_internal_set_site_instanceid(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  site_instanceid_ = value;
}
inline void CSiteManagerClient_IncomingClient_Request::set_site_instanceid(uint64_t value) {
  _internal_set_site_instanceid(value);
  // @@protoc_insertion_point(field_set:CSiteManagerClient_IncomingClient_Request.site_instanceid)
}

// optional fixed64 client_steamid = 2;
inline bool CSiteManagerClient_IncomingClient_Request::_internal_has_client_steamid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSiteManagerClient_IncomingClient_Request::has_client_steamid() const {
  return _internal_has_client_steamid();
}
inline void CSiteManagerClient_IncomingClient_Request::clear_client_steamid() {
  client_steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CSiteManagerClient_IncomingClient_Request::_internal_client_steamid() const {
  return client_steamid_;
}
inline uint64_t CSiteManagerClient_IncomingClient_Request::client_steamid() const {
  // @@protoc_insertion_point(field_get:CSiteManagerClient_IncomingClient_Request.client_steamid)
  return _internal_client_steamid();
}
inline void CSiteManagerClient_IncomingClient_Request::_internal_set_client_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  client_steamid_ = value;
}
inline void CSiteManagerClient_IncomingClient_Request::set_client_steamid(uint64_t value) {
  _internal_set_client_steamid(value);
  // @@protoc_insertion_point(field_set:CSiteManagerClient_IncomingClient_Request.client_steamid)
}

// optional fixed32 client_local_ip = 3;
inline bool CSiteManagerClient_IncomingClient_Request::_internal_has_client_local_ip() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CSiteManagerClient_IncomingClient_Request::has_client_local_ip() const {
  return _internal_has_client_local_ip();
}
inline void CSiteManagerClient_IncomingClient_Request::clear_client_local_ip() {
  client_local_ip_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CSiteManagerClient_IncomingClient_Request::_internal_client_local_ip() const {
  return client_local_ip_;
}
inline uint32_t CSiteManagerClient_IncomingClient_Request::client_local_ip() const {
  // @@protoc_insertion_point(field_get:CSiteManagerClient_IncomingClient_Request.client_local_ip)
  return _internal_client_local_ip();
}
inline void CSiteManagerClient_IncomingClient_Request::_internal_set_client_local_ip(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  client_local_ip_ = value;
}
inline void CSiteManagerClient_IncomingClient_Request::set_client_local_ip(uint32_t value) {
  _internal_set_client_local_ip(value);
  // @@protoc_insertion_point(field_set:CSiteManagerClient_IncomingClient_Request.client_local_ip)
}

// optional bytes connection_key = 4;
inline bool CSiteManagerClient_IncomingClient_Request::_internal_has_connection_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSiteManagerClient_IncomingClient_Request::has_connection_key() const {
  return _internal_has_connection_key();
}
inline void CSiteManagerClient_IncomingClient_Request::clear_connection_key() {
  connection_key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSiteManagerClient_IncomingClient_Request::connection_key() const {
  // @@protoc_insertion_point(field_get:CSiteManagerClient_IncomingClient_Request.connection_key)
  return _internal_connection_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSiteManagerClient_IncomingClient_Request::set_connection_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 connection_key_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CSiteManagerClient_IncomingClient_Request.connection_key)
}
inline std::string* CSiteManagerClient_IncomingClient_Request::mutable_connection_key() {
  std::string* _s = _internal_mutable_connection_key();
  // @@protoc_insertion_point(field_mutable:CSiteManagerClient_IncomingClient_Request.connection_key)
  return _s;
}
inline const std::string& CSiteManagerClient_IncomingClient_Request::_internal_connection_key() const {
  return connection_key_.Get();
}
inline void CSiteManagerClient_IncomingClient_Request::_internal_set_connection_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  connection_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CSiteManagerClient_IncomingClient_Request::_internal_mutable_connection_key() {
  _has_bits_[0] |= 0x00000001u;
  return connection_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CSiteManagerClient_IncomingClient_Request::release_connection_key() {
  // @@protoc_insertion_point(field_release:CSiteManagerClient_IncomingClient_Request.connection_key)
  if (!_internal_has_connection_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = connection_key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (connection_key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    connection_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CSiteManagerClient_IncomingClient_Request::set_allocated_connection_key(std::string* connection_key) {
  if (connection_key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  connection_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), connection_key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (connection_key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    connection_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CSiteManagerClient_IncomingClient_Request.connection_key)
}

// -------------------------------------------------------------------

// CSiteManagerClient_IncomingClient_Response

// -------------------------------------------------------------------

// CSiteLicense_ClientSeatCheckout_Notification

// optional uint32 appid = 1;
inline bool CSiteLicense_ClientSeatCheckout_Notification::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSiteLicense_ClientSeatCheckout_Notification::has_appid() const {
  return _internal_has_appid();
}
inline void CSiteLicense_ClientSeatCheckout_Notification::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CSiteLicense_ClientSeatCheckout_Notification::_internal_appid() const {
  return appid_;
}
inline uint32_t CSiteLicense_ClientSeatCheckout_Notification::appid() const {
  // @@protoc_insertion_point(field_get:CSiteLicense_ClientSeatCheckout_Notification.appid)
  return _internal_appid();
}
inline void CSiteLicense_ClientSeatCheckout_Notification::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  appid_ = value;
}
inline void CSiteLicense_ClientSeatCheckout_Notification::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CSiteLicense_ClientSeatCheckout_Notification.appid)
}

// optional uint32 eresult = 2;
inline bool CSiteLicense_ClientSeatCheckout_Notification::_internal_has_eresult() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSiteLicense_ClientSeatCheckout_Notification::has_eresult() const {
  return _internal_has_eresult();
}
inline void CSiteLicense_ClientSeatCheckout_Notification::clear_eresult() {
  eresult_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CSiteLicense_ClientSeatCheckout_Notification::_internal_eresult() const {
  return eresult_;
}
inline uint32_t CSiteLicense_ClientSeatCheckout_Notification::eresult() const {
  // @@protoc_insertion_point(field_get:CSiteLicense_ClientSeatCheckout_Notification.eresult)
  return _internal_eresult();
}
inline void CSiteLicense_ClientSeatCheckout_Notification::_internal_set_eresult(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  eresult_ = value;
}
inline void CSiteLicense_ClientSeatCheckout_Notification::set_eresult(uint32_t value) {
  _internal_set_eresult(value);
  // @@protoc_insertion_point(field_set:CSiteLicense_ClientSeatCheckout_Notification.eresult)
}

// -------------------------------------------------------------------

// CSiteManagerClient_TrackedPayments_Notification_Payment

// optional uint64 transid = 1;
inline bool CSiteManagerClient_TrackedPayments_Notification_Payment::_internal_has_transid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CSiteManagerClient_TrackedPayments_Notification_Payment::has_transid() const {
  return _internal_has_transid();
}
inline void CSiteManagerClient_TrackedPayments_Notification_Payment::clear_transid() {
  transid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000010u;
}
inline uint64_t CSiteManagerClient_TrackedPayments_Notification_Payment::_internal_transid() const {
  return transid_;
}
inline uint64_t CSiteManagerClient_TrackedPayments_Notification_Payment::transid() const {
  // @@protoc_insertion_point(field_get:CSiteManagerClient_TrackedPayments_Notification.Payment.transid)
  return _internal_transid();
}
inline void CSiteManagerClient_TrackedPayments_Notification_Payment::_internal_set_transid(uint64_t value) {
  _has_bits_[0] |= 0x00000010u;
  transid_ = value;
}
inline void CSiteManagerClient_TrackedPayments_Notification_Payment::set_transid(uint64_t value) {
  _internal_set_transid(value);
  // @@protoc_insertion_point(field_set:CSiteManagerClient_TrackedPayments_Notification.Payment.transid)
}

// optional uint64 steamid = 2;
inline bool CSiteManagerClient_TrackedPayments_Notification_Payment::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CSiteManagerClient_TrackedPayments_Notification_Payment::has_steamid() const {
  return _internal_has_steamid();
}
inline void CSiteManagerClient_TrackedPayments_Notification_Payment::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000020u;
}
inline uint64_t CSiteManagerClient_TrackedPayments_Notification_Payment::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CSiteManagerClient_TrackedPayments_Notification_Payment::steamid() const {
  // @@protoc_insertion_point(field_get:CSiteManagerClient_TrackedPayments_Notification.Payment.steamid)
  return _internal_steamid();
}
inline void CSiteManagerClient_TrackedPayments_Notification_Payment::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000020u;
  steamid_ = value;
}
inline void CSiteManagerClient_TrackedPayments_Notification_Payment::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CSiteManagerClient_TrackedPayments_Notification.Payment.steamid)
}

// optional int64 amount = 3;
inline bool CSiteManagerClient_TrackedPayments_Notification_Payment::_internal_has_amount() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CSiteManagerClient_TrackedPayments_Notification_Payment::has_amount() const {
  return _internal_has_amount();
}
inline void CSiteManagerClient_TrackedPayments_Notification_Payment::clear_amount() {
  amount_ = int64_t{0};
  _has_bits_[0] &= ~0x00000040u;
}
inline int64_t CSiteManagerClient_TrackedPayments_Notification_Payment::_internal_amount() const {
  return amount_;
}
inline int64_t CSiteManagerClient_TrackedPayments_Notification_Payment::amount() const {
  // @@protoc_insertion_point(field_get:CSiteManagerClient_TrackedPayments_Notification.Payment.amount)
  return _internal_amount();
}
inline void CSiteManagerClient_TrackedPayments_Notification_Payment::_internal_set_amount(int64_t value) {
  _has_bits_[0] |= 0x00000040u;
  amount_ = value;
}
inline void CSiteManagerClient_TrackedPayments_Notification_Payment::set_amount(int64_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:CSiteManagerClient_TrackedPayments_Notification.Payment.amount)
}

// optional uint32 ecurrency = 4;
inline bool CSiteManagerClient_TrackedPayments_Notification_Payment::_internal_has_ecurrency() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CSiteManagerClient_TrackedPayments_Notification_Payment::has_ecurrency() const {
  return _internal_has_ecurrency();
}
inline void CSiteManagerClient_TrackedPayments_Notification_Payment::clear_ecurrency() {
  ecurrency_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CSiteManagerClient_TrackedPayments_Notification_Payment::_internal_ecurrency() const {
  return ecurrency_;
}
inline uint32_t CSiteManagerClient_TrackedPayments_Notification_Payment::ecurrency() const {
  // @@protoc_insertion_point(field_get:CSiteManagerClient_TrackedPayments_Notification.Payment.ecurrency)
  return _internal_ecurrency();
}
inline void CSiteManagerClient_TrackedPayments_Notification_Payment::_internal_set_ecurrency(uint32_t value) {
  _has_bits_[0] |= 0x00000080u;
  ecurrency_ = value;
}
inline void CSiteManagerClient_TrackedPayments_Notification_Payment::set_ecurrency(uint32_t value) {
  _internal_set_ecurrency(value);
  // @@protoc_insertion_point(field_set:CSiteManagerClient_TrackedPayments_Notification.Payment.ecurrency)
}

// optional int32 time_created = 5;
inline bool CSiteManagerClient_TrackedPayments_Notification_Payment::_internal_has_time_created() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CSiteManagerClient_TrackedPayments_Notification_Payment::has_time_created() const {
  return _internal_has_time_created();
}
inline void CSiteManagerClient_TrackedPayments_Notification_Payment::clear_time_created() {
  time_created_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline int32_t CSiteManagerClient_TrackedPayments_Notification_Payment::_internal_time_created() const {
  return time_created_;
}
inline int32_t CSiteManagerClient_TrackedPayments_Notification_Payment::time_created() const {
  // @@protoc_insertion_point(field_get:CSiteManagerClient_TrackedPayments_Notification.Payment.time_created)
  return _internal_time_created();
}
inline void CSiteManagerClient_TrackedPayments_Notification_Payment::_internal_set_time_created(int32_t value) {
  _has_bits_[0] |= 0x00000100u;
  time_created_ = value;
}
inline void CSiteManagerClient_TrackedPayments_Notification_Payment::set_time_created(int32_t value) {
  _internal_set_time_created(value);
  // @@protoc_insertion_point(field_set:CSiteManagerClient_TrackedPayments_Notification.Payment.time_created)
}

// optional int32 purchase_status = 6;
inline bool CSiteManagerClient_TrackedPayments_Notification_Payment::_internal_has_purchase_status() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CSiteManagerClient_TrackedPayments_Notification_Payment::has_purchase_status() const {
  return _internal_has_purchase_status();
}
inline void CSiteManagerClient_TrackedPayments_Notification_Payment::clear_purchase_status() {
  purchase_status_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline int32_t CSiteManagerClient_TrackedPayments_Notification_Payment::_internal_purchase_status() const {
  return purchase_status_;
}
inline int32_t CSiteManagerClient_TrackedPayments_Notification_Payment::purchase_status() const {
  // @@protoc_insertion_point(field_get:CSiteManagerClient_TrackedPayments_Notification.Payment.purchase_status)
  return _internal_purchase_status();
}
inline void CSiteManagerClient_TrackedPayments_Notification_Payment::_internal_set_purchase_status(int32_t value) {
  _has_bits_[0] |= 0x00000200u;
  purchase_status_ = value;
}
inline void CSiteManagerClient_TrackedPayments_Notification_Payment::set_purchase_status(int32_t value) {
  _internal_set_purchase_status(value);
  // @@protoc_insertion_point(field_set:CSiteManagerClient_TrackedPayments_Notification.Payment.purchase_status)
}

// optional string machine_name = 7;
inline bool CSiteManagerClient_TrackedPayments_Notification_Payment::_internal_has_machine_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSiteManagerClient_TrackedPayments_Notification_Payment::has_machine_name() const {
  return _internal_has_machine_name();
}
inline void CSiteManagerClient_TrackedPayments_Notification_Payment::clear_machine_name() {
  machine_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSiteManagerClient_TrackedPayments_Notification_Payment::machine_name() const {
  // @@protoc_insertion_point(field_get:CSiteManagerClient_TrackedPayments_Notification.Payment.machine_name)
  return _internal_machine_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSiteManagerClient_TrackedPayments_Notification_Payment::set_machine_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 machine_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CSiteManagerClient_TrackedPayments_Notification.Payment.machine_name)
}
inline std::string* CSiteManagerClient_TrackedPayments_Notification_Payment::mutable_machine_name() {
  std::string* _s = _internal_mutable_machine_name();
  // @@protoc_insertion_point(field_mutable:CSiteManagerClient_TrackedPayments_Notification.Payment.machine_name)
  return _s;
}
inline const std::string& CSiteManagerClient_TrackedPayments_Notification_Payment::_internal_machine_name() const {
  return machine_name_.Get();
}
inline void CSiteManagerClient_TrackedPayments_Notification_Payment::_internal_set_machine_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  machine_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CSiteManagerClient_TrackedPayments_Notification_Payment::_internal_mutable_machine_name() {
  _has_bits_[0] |= 0x00000001u;
  return machine_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CSiteManagerClient_TrackedPayments_Notification_Payment::release_machine_name() {
  // @@protoc_insertion_point(field_release:CSiteManagerClient_TrackedPayments_Notification.Payment.machine_name)
  if (!_internal_has_machine_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = machine_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (machine_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    machine_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CSiteManagerClient_TrackedPayments_Notification_Payment::set_allocated_machine_name(std::string* machine_name) {
  if (machine_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  machine_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), machine_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (machine_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    machine_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CSiteManagerClient_TrackedPayments_Notification.Payment.machine_name)
}

// optional string persona_name = 8;
inline bool CSiteManagerClient_TrackedPayments_Notification_Payment::_internal_has_persona_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSiteManagerClient_TrackedPayments_Notification_Payment::has_persona_name() const {
  return _internal_has_persona_name();
}
inline void CSiteManagerClient_TrackedPayments_Notification_Payment::clear_persona_name() {
  persona_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CSiteManagerClient_TrackedPayments_Notification_Payment::persona_name() const {
  // @@protoc_insertion_point(field_get:CSiteManagerClient_TrackedPayments_Notification.Payment.persona_name)
  return _internal_persona_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSiteManagerClient_TrackedPayments_Notification_Payment::set_persona_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 persona_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CSiteManagerClient_TrackedPayments_Notification.Payment.persona_name)
}
inline std::string* CSiteManagerClient_TrackedPayments_Notification_Payment::mutable_persona_name() {
  std::string* _s = _internal_mutable_persona_name();
  // @@protoc_insertion_point(field_mutable:CSiteManagerClient_TrackedPayments_Notification.Payment.persona_name)
  return _s;
}
inline const std::string& CSiteManagerClient_TrackedPayments_Notification_Payment::_internal_persona_name() const {
  return persona_name_.Get();
}
inline void CSiteManagerClient_TrackedPayments_Notification_Payment::_internal_set_persona_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  persona_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CSiteManagerClient_TrackedPayments_Notification_Payment::_internal_mutable_persona_name() {
  _has_bits_[0] |= 0x00000002u;
  return persona_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CSiteManagerClient_TrackedPayments_Notification_Payment::release_persona_name() {
  // @@protoc_insertion_point(field_release:CSiteManagerClient_TrackedPayments_Notification.Payment.persona_name)
  if (!_internal_has_persona_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = persona_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (persona_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    persona_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CSiteManagerClient_TrackedPayments_Notification_Payment::set_allocated_persona_name(std::string* persona_name) {
  if (persona_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  persona_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), persona_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (persona_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    persona_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CSiteManagerClient_TrackedPayments_Notification.Payment.persona_name)
}

// optional string profile_url = 9;
inline bool CSiteManagerClient_TrackedPayments_Notification_Payment::_internal_has_profile_url() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSiteManagerClient_TrackedPayments_Notification_Payment::has_profile_url() const {
  return _internal_has_profile_url();
}
inline void CSiteManagerClient_TrackedPayments_Notification_Payment::clear_profile_url() {
  profile_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CSiteManagerClient_TrackedPayments_Notification_Payment::profile_url() const {
  // @@protoc_insertion_point(field_get:CSiteManagerClient_TrackedPayments_Notification.Payment.profile_url)
  return _internal_profile_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSiteManagerClient_TrackedPayments_Notification_Payment::set_profile_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 profile_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CSiteManagerClient_TrackedPayments_Notification.Payment.profile_url)
}
inline std::string* CSiteManagerClient_TrackedPayments_Notification_Payment::mutable_profile_url() {
  std::string* _s = _internal_mutable_profile_url();
  // @@protoc_insertion_point(field_mutable:CSiteManagerClient_TrackedPayments_Notification.Payment.profile_url)
  return _s;
}
inline const std::string& CSiteManagerClient_TrackedPayments_Notification_Payment::_internal_profile_url() const {
  return profile_url_.Get();
}
inline void CSiteManagerClient_TrackedPayments_Notification_Payment::_internal_set_profile_url(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  profile_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CSiteManagerClient_TrackedPayments_Notification_Payment::_internal_mutable_profile_url() {
  _has_bits_[0] |= 0x00000004u;
  return profile_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CSiteManagerClient_TrackedPayments_Notification_Payment::release_profile_url() {
  // @@protoc_insertion_point(field_release:CSiteManagerClient_TrackedPayments_Notification.Payment.profile_url)
  if (!_internal_has_profile_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = profile_url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (profile_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    profile_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CSiteManagerClient_TrackedPayments_Notification_Payment::set_allocated_profile_url(std::string* profile_url) {
  if (profile_url != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  profile_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), profile_url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (profile_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    profile_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CSiteManagerClient_TrackedPayments_Notification.Payment.profile_url)
}

// optional string avatar_url = 10;
inline bool CSiteManagerClient_TrackedPayments_Notification_Payment::_internal_has_avatar_url() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CSiteManagerClient_TrackedPayments_Notification_Payment::has_avatar_url() const {
  return _internal_has_avatar_url();
}
inline void CSiteManagerClient_TrackedPayments_Notification_Payment::clear_avatar_url() {
  avatar_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CSiteManagerClient_TrackedPayments_Notification_Payment::avatar_url() const {
  // @@protoc_insertion_point(field_get:CSiteManagerClient_TrackedPayments_Notification.Payment.avatar_url)
  return _internal_avatar_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSiteManagerClient_TrackedPayments_Notification_Payment::set_avatar_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 avatar_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CSiteManagerClient_TrackedPayments_Notification.Payment.avatar_url)
}
inline std::string* CSiteManagerClient_TrackedPayments_Notification_Payment::mutable_avatar_url() {
  std::string* _s = _internal_mutable_avatar_url();
  // @@protoc_insertion_point(field_mutable:CSiteManagerClient_TrackedPayments_Notification.Payment.avatar_url)
  return _s;
}
inline const std::string& CSiteManagerClient_TrackedPayments_Notification_Payment::_internal_avatar_url() const {
  return avatar_url_.Get();
}
inline void CSiteManagerClient_TrackedPayments_Notification_Payment::_internal_set_avatar_url(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  avatar_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CSiteManagerClient_TrackedPayments_Notification_Payment::_internal_mutable_avatar_url() {
  _has_bits_[0] |= 0x00000008u;
  return avatar_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CSiteManagerClient_TrackedPayments_Notification_Payment::release_avatar_url() {
  // @@protoc_insertion_point(field_release:CSiteManagerClient_TrackedPayments_Notification.Payment.avatar_url)
  if (!_internal_has_avatar_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = avatar_url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (avatar_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    avatar_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CSiteManagerClient_TrackedPayments_Notification_Payment::set_allocated_avatar_url(std::string* avatar_url) {
  if (avatar_url != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  avatar_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avatar_url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (avatar_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    avatar_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CSiteManagerClient_TrackedPayments_Notification.Payment.avatar_url)
}

// -------------------------------------------------------------------

// CSiteManagerClient_TrackedPayments_Notification

// optional fixed64 site_id = 1;
inline bool CSiteManagerClient_TrackedPayments_Notification::_internal_has_site_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSiteManagerClient_TrackedPayments_Notification::has_site_id() const {
  return _internal_has_site_id();
}
inline void CSiteManagerClient_TrackedPayments_Notification::clear_site_id() {
  site_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CSiteManagerClient_TrackedPayments_Notification::_internal_site_id() const {
  return site_id_;
}
inline uint64_t CSiteManagerClient_TrackedPayments_Notification::site_id() const {
  // @@protoc_insertion_point(field_get:CSiteManagerClient_TrackedPayments_Notification.site_id)
  return _internal_site_id();
}
inline void CSiteManagerClient_TrackedPayments_Notification::_internal_set_site_id(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  site_id_ = value;
}
inline void CSiteManagerClient_TrackedPayments_Notification::set_site_id(uint64_t value) {
  _internal_set_site_id(value);
  // @@protoc_insertion_point(field_set:CSiteManagerClient_TrackedPayments_Notification.site_id)
}

// repeated .CSiteManagerClient_TrackedPayments_Notification.Payment payments = 2;
inline int CSiteManagerClient_TrackedPayments_Notification::_internal_payments_size() const {
  return payments_.size();
}
inline int CSiteManagerClient_TrackedPayments_Notification::payments_size() const {
  return _internal_payments_size();
}
inline void CSiteManagerClient_TrackedPayments_Notification::clear_payments() {
  payments_.Clear();
}
inline ::CSiteManagerClient_TrackedPayments_Notification_Payment* CSiteManagerClient_TrackedPayments_Notification::mutable_payments(int index) {
  // @@protoc_insertion_point(field_mutable:CSiteManagerClient_TrackedPayments_Notification.payments)
  return payments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSiteManagerClient_TrackedPayments_Notification_Payment >*
CSiteManagerClient_TrackedPayments_Notification::mutable_payments() {
  // @@protoc_insertion_point(field_mutable_list:CSiteManagerClient_TrackedPayments_Notification.payments)
  return &payments_;
}
inline const ::CSiteManagerClient_TrackedPayments_Notification_Payment& CSiteManagerClient_TrackedPayments_Notification::_internal_payments(int index) const {
  return payments_.Get(index);
}
inline const ::CSiteManagerClient_TrackedPayments_Notification_Payment& CSiteManagerClient_TrackedPayments_Notification::payments(int index) const {
  // @@protoc_insertion_point(field_get:CSiteManagerClient_TrackedPayments_Notification.payments)
  return _internal_payments(index);
}
inline ::CSiteManagerClient_TrackedPayments_Notification_Payment* CSiteManagerClient_TrackedPayments_Notification::_internal_add_payments() {
  return payments_.Add();
}
inline ::CSiteManagerClient_TrackedPayments_Notification_Payment* CSiteManagerClient_TrackedPayments_Notification::add_payments() {
  ::CSiteManagerClient_TrackedPayments_Notification_Payment* _add = _internal_add_payments();
  // @@protoc_insertion_point(field_add:CSiteManagerClient_TrackedPayments_Notification.payments)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSiteManagerClient_TrackedPayments_Notification_Payment >&
CSiteManagerClient_TrackedPayments_Notification::payments() const {
  // @@protoc_insertion_point(field_list:CSiteManagerClient_TrackedPayments_Notification.payments)
  return payments_;
}

// -------------------------------------------------------------------

// CSiteLicense_InitiateAssociation_Request

// optional fixed64 site_steamid = 1;
inline bool CSiteLicense_InitiateAssociation_Request::_internal_has_site_steamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSiteLicense_InitiateAssociation_Request::has_site_steamid() const {
  return _internal_has_site_steamid();
}
inline void CSiteLicense_InitiateAssociation_Request::clear_site_steamid() {
  site_steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CSiteLicense_InitiateAssociation_Request::_internal_site_steamid() const {
  return site_steamid_;
}
inline uint64_t CSiteLicense_InitiateAssociation_Request::site_steamid() const {
  // @@protoc_insertion_point(field_get:CSiteLicense_InitiateAssociation_Request.site_steamid)
  return _internal_site_steamid();
}
inline void CSiteLicense_InitiateAssociation_Request::_internal_set_site_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  site_steamid_ = value;
}
inline void CSiteLicense_InitiateAssociation_Request::set_site_steamid(uint64_t value) {
  _internal_set_site_steamid(value);
  // @@protoc_insertion_point(field_set:CSiteLicense_InitiateAssociation_Request.site_steamid)
}

// optional fixed64 site_instanceid = 2;
inline bool CSiteLicense_InitiateAssociation_Request::_internal_has_site_instanceid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSiteLicense_InitiateAssociation_Request::has_site_instanceid() const {
  return _internal_has_site_instanceid();
}
inline void CSiteLicense_InitiateAssociation_Request::clear_site_instanceid() {
  site_instanceid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CSiteLicense_InitiateAssociation_Request::_internal_site_instanceid() const {
  return site_instanceid_;
}
inline uint64_t CSiteLicense_InitiateAssociation_Request::site_instanceid() const {
  // @@protoc_insertion_point(field_get:CSiteLicense_InitiateAssociation_Request.site_instanceid)
  return _internal_site_instanceid();
}
inline void CSiteLicense_InitiateAssociation_Request::_internal_set_site_instanceid(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  site_instanceid_ = value;
}
inline void CSiteLicense_InitiateAssociation_Request::set_site_instanceid(uint64_t value) {
  _internal_set_site_instanceid(value);
  // @@protoc_insertion_point(field_set:CSiteLicense_InitiateAssociation_Request.site_instanceid)
}

// optional fixed32 client_local_ip = 3;
inline bool CSiteLicense_InitiateAssociation_Request::_internal_has_client_local_ip() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSiteLicense_InitiateAssociation_Request::has_client_local_ip() const {
  return _internal_has_client_local_ip();
}
inline void CSiteLicense_InitiateAssociation_Request::clear_client_local_ip() {
  client_local_ip_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CSiteLicense_InitiateAssociation_Request::_internal_client_local_ip() const {
  return client_local_ip_;
}
inline uint32_t CSiteLicense_InitiateAssociation_Request::client_local_ip() const {
  // @@protoc_insertion_point(field_get:CSiteLicense_InitiateAssociation_Request.client_local_ip)
  return _internal_client_local_ip();
}
inline void CSiteLicense_InitiateAssociation_Request::_internal_set_client_local_ip(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  client_local_ip_ = value;
}
inline void CSiteLicense_InitiateAssociation_Request::set_client_local_ip(uint32_t value) {
  _internal_set_client_local_ip(value);
  // @@protoc_insertion_point(field_set:CSiteLicense_InitiateAssociation_Request.client_local_ip)
}

// -------------------------------------------------------------------

// CSiteLicense_InitiateAssociation_Response

// optional bytes connection_key = 1;
inline bool CSiteLicense_InitiateAssociation_Response::_internal_has_connection_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSiteLicense_InitiateAssociation_Response::has_connection_key() const {
  return _internal_has_connection_key();
}
inline void CSiteLicense_InitiateAssociation_Response::clear_connection_key() {
  connection_key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSiteLicense_InitiateAssociation_Response::connection_key() const {
  // @@protoc_insertion_point(field_get:CSiteLicense_InitiateAssociation_Response.connection_key)
  return _internal_connection_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSiteLicense_InitiateAssociation_Response::set_connection_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 connection_key_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CSiteLicense_InitiateAssociation_Response.connection_key)
}
inline std::string* CSiteLicense_InitiateAssociation_Response::mutable_connection_key() {
  std::string* _s = _internal_mutable_connection_key();
  // @@protoc_insertion_point(field_mutable:CSiteLicense_InitiateAssociation_Response.connection_key)
  return _s;
}
inline const std::string& CSiteLicense_InitiateAssociation_Response::_internal_connection_key() const {
  return connection_key_.Get();
}
inline void CSiteLicense_InitiateAssociation_Response::_internal_set_connection_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  connection_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CSiteLicense_InitiateAssociation_Response::_internal_mutable_connection_key() {
  _has_bits_[0] |= 0x00000001u;
  return connection_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CSiteLicense_InitiateAssociation_Response::release_connection_key() {
  // @@protoc_insertion_point(field_release:CSiteLicense_InitiateAssociation_Response.connection_key)
  if (!_internal_has_connection_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = connection_key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (connection_key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    connection_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CSiteLicense_InitiateAssociation_Response::set_allocated_connection_key(std::string* connection_key) {
  if (connection_key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  connection_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), connection_key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (connection_key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    connection_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CSiteLicense_InitiateAssociation_Response.connection_key)
}

// -------------------------------------------------------------------

// CSiteLicense_LCSAuthenticate_Request

// optional fixed64 instanceid = 1;
inline bool CSiteLicense_LCSAuthenticate_Request::_internal_has_instanceid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSiteLicense_LCSAuthenticate_Request::has_instanceid() const {
  return _internal_has_instanceid();
}
inline void CSiteLicense_LCSAuthenticate_Request::clear_instanceid() {
  instanceid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CSiteLicense_LCSAuthenticate_Request::_internal_instanceid() const {
  return instanceid_;
}
inline uint64_t CSiteLicense_LCSAuthenticate_Request::instanceid() const {
  // @@protoc_insertion_point(field_get:CSiteLicense_LCSAuthenticate_Request.instanceid)
  return _internal_instanceid();
}
inline void CSiteLicense_LCSAuthenticate_Request::_internal_set_instanceid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  instanceid_ = value;
}
inline void CSiteLicense_LCSAuthenticate_Request::set_instanceid(uint64_t value) {
  _internal_set_instanceid(value);
  // @@protoc_insertion_point(field_set:CSiteLicense_LCSAuthenticate_Request.instanceid)
}

// -------------------------------------------------------------------

// CSiteLicense_LCSAuthenticate_Response

// optional uint64 site_id = 1;
inline bool CSiteLicense_LCSAuthenticate_Response::_internal_has_site_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSiteLicense_LCSAuthenticate_Response::has_site_id() const {
  return _internal_has_site_id();
}
inline void CSiteLicense_LCSAuthenticate_Response::clear_site_id() {
  site_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CSiteLicense_LCSAuthenticate_Response::_internal_site_id() const {
  return site_id_;
}
inline uint64_t CSiteLicense_LCSAuthenticate_Response::site_id() const {
  // @@protoc_insertion_point(field_get:CSiteLicense_LCSAuthenticate_Response.site_id)
  return _internal_site_id();
}
inline void CSiteLicense_LCSAuthenticate_Response::_internal_set_site_id(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  site_id_ = value;
}
inline void CSiteLicense_LCSAuthenticate_Response::set_site_id(uint64_t value) {
  _internal_set_site_id(value);
  // @@protoc_insertion_point(field_set:CSiteLicense_LCSAuthenticate_Response.site_id)
}

// optional string site_name = 2;
inline bool CSiteLicense_LCSAuthenticate_Response::_internal_has_site_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSiteLicense_LCSAuthenticate_Response::has_site_name() const {
  return _internal_has_site_name();
}
inline void CSiteLicense_LCSAuthenticate_Response::clear_site_name() {
  site_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSiteLicense_LCSAuthenticate_Response::site_name() const {
  // @@protoc_insertion_point(field_get:CSiteLicense_LCSAuthenticate_Response.site_name)
  return _internal_site_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSiteLicense_LCSAuthenticate_Response::set_site_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 site_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CSiteLicense_LCSAuthenticate_Response.site_name)
}
inline std::string* CSiteLicense_LCSAuthenticate_Response::mutable_site_name() {
  std::string* _s = _internal_mutable_site_name();
  // @@protoc_insertion_point(field_mutable:CSiteLicense_LCSAuthenticate_Response.site_name)
  return _s;
}
inline const std::string& CSiteLicense_LCSAuthenticate_Response::_internal_site_name() const {
  return site_name_.Get();
}
inline void CSiteLicense_LCSAuthenticate_Response::_internal_set_site_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  site_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CSiteLicense_LCSAuthenticate_Response::_internal_mutable_site_name() {
  _has_bits_[0] |= 0x00000001u;
  return site_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CSiteLicense_LCSAuthenticate_Response::release_site_name() {
  // @@protoc_insertion_point(field_release:CSiteLicense_LCSAuthenticate_Response.site_name)
  if (!_internal_has_site_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = site_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (site_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    site_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CSiteLicense_LCSAuthenticate_Response::set_allocated_site_name(std::string* site_name) {
  if (site_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  site_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), site_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (site_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    site_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CSiteLicense_LCSAuthenticate_Response.site_name)
}

// optional bool new_session = 3;
inline bool CSiteLicense_LCSAuthenticate_Response::_internal_has_new_session() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSiteLicense_LCSAuthenticate_Response::has_new_session() const {
  return _internal_has_new_session();
}
inline void CSiteLicense_LCSAuthenticate_Response::clear_new_session() {
  new_session_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CSiteLicense_LCSAuthenticate_Response::_internal_new_session() const {
  return new_session_;
}
inline bool CSiteLicense_LCSAuthenticate_Response::new_session() const {
  // @@protoc_insertion_point(field_get:CSiteLicense_LCSAuthenticate_Response.new_session)
  return _internal_new_session();
}
inline void CSiteLicense_LCSAuthenticate_Response::_internal_set_new_session(bool value) {
  _has_bits_[0] |= 0x00000004u;
  new_session_ = value;
}
inline void CSiteLicense_LCSAuthenticate_Response::set_new_session(bool value) {
  _internal_set_new_session(value);
  // @@protoc_insertion_point(field_set:CSiteLicense_LCSAuthenticate_Response.new_session)
}

// optional bool no_site_licenses = 4;
inline bool CSiteLicense_LCSAuthenticate_Response::_internal_has_no_site_licenses() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CSiteLicense_LCSAuthenticate_Response::has_no_site_licenses() const {
  return _internal_has_no_site_licenses();
}
inline void CSiteLicense_LCSAuthenticate_Response::clear_no_site_licenses() {
  no_site_licenses_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CSiteLicense_LCSAuthenticate_Response::_internal_no_site_licenses() const {
  return no_site_licenses_;
}
inline bool CSiteLicense_LCSAuthenticate_Response::no_site_licenses() const {
  // @@protoc_insertion_point(field_get:CSiteLicense_LCSAuthenticate_Response.no_site_licenses)
  return _internal_no_site_licenses();
}
inline void CSiteLicense_LCSAuthenticate_Response::_internal_set_no_site_licenses(bool value) {
  _has_bits_[0] |= 0x00000008u;
  no_site_licenses_ = value;
}
inline void CSiteLicense_LCSAuthenticate_Response::set_no_site_licenses(bool value) {
  _internal_set_no_site_licenses(value);
  // @@protoc_insertion_point(field_set:CSiteLicense_LCSAuthenticate_Response.no_site_licenses)
}

// -------------------------------------------------------------------

// CSiteLicense_LCSAssociateUser_Request

// optional fixed64 steamid = 1;
inline bool CSiteLicense_LCSAssociateUser_Request::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSiteLicense_LCSAssociateUser_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CSiteLicense_LCSAssociateUser_Request::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CSiteLicense_LCSAssociateUser_Request::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CSiteLicense_LCSAssociateUser_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CSiteLicense_LCSAssociateUser_Request.steamid)
  return _internal_steamid();
}
inline void CSiteLicense_LCSAssociateUser_Request::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  steamid_ = value;
}
inline void CSiteLicense_LCSAssociateUser_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CSiteLicense_LCSAssociateUser_Request.steamid)
}

// optional fixed32 local_ip = 2;
inline bool CSiteLicense_LCSAssociateUser_Request::_internal_has_local_ip() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CSiteLicense_LCSAssociateUser_Request::has_local_ip() const {
  return _internal_has_local_ip();
}
inline void CSiteLicense_LCSAssociateUser_Request::clear_local_ip() {
  local_ip_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CSiteLicense_LCSAssociateUser_Request::_internal_local_ip() const {
  return local_ip_;
}
inline uint32_t CSiteLicense_LCSAssociateUser_Request::local_ip() const {
  // @@protoc_insertion_point(field_get:CSiteLicense_LCSAssociateUser_Request.local_ip)
  return _internal_local_ip();
}
inline void CSiteLicense_LCSAssociateUser_Request::_internal_set_local_ip(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  local_ip_ = value;
}
inline void CSiteLicense_LCSAssociateUser_Request::set_local_ip(uint32_t value) {
  _internal_set_local_ip(value);
  // @@protoc_insertion_point(field_set:CSiteLicense_LCSAssociateUser_Request.local_ip)
}

// optional fixed64 instanceid = 3;
inline bool CSiteLicense_LCSAssociateUser_Request::_internal_has_instanceid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSiteLicense_LCSAssociateUser_Request::has_instanceid() const {
  return _internal_has_instanceid();
}
inline void CSiteLicense_LCSAssociateUser_Request::clear_instanceid() {
  instanceid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CSiteLicense_LCSAssociateUser_Request::_internal_instanceid() const {
  return instanceid_;
}
inline uint64_t CSiteLicense_LCSAssociateUser_Request::instanceid() const {
  // @@protoc_insertion_point(field_get:CSiteLicense_LCSAssociateUser_Request.instanceid)
  return _internal_instanceid();
}
inline void CSiteLicense_LCSAssociateUser_Request::_internal_set_instanceid(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  instanceid_ = value;
}
inline void CSiteLicense_LCSAssociateUser_Request::set_instanceid(uint64_t value) {
  _internal_set_instanceid(value);
  // @@protoc_insertion_point(field_set:CSiteLicense_LCSAssociateUser_Request.instanceid)
}

// optional string machine_name = 4;
inline bool CSiteLicense_LCSAssociateUser_Request::_internal_has_machine_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSiteLicense_LCSAssociateUser_Request::has_machine_name() const {
  return _internal_has_machine_name();
}
inline void CSiteLicense_LCSAssociateUser_Request::clear_machine_name() {
  machine_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSiteLicense_LCSAssociateUser_Request::machine_name() const {
  // @@protoc_insertion_point(field_get:CSiteLicense_LCSAssociateUser_Request.machine_name)
  return _internal_machine_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSiteLicense_LCSAssociateUser_Request::set_machine_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 machine_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CSiteLicense_LCSAssociateUser_Request.machine_name)
}
inline std::string* CSiteLicense_LCSAssociateUser_Request::mutable_machine_name() {
  std::string* _s = _internal_mutable_machine_name();
  // @@protoc_insertion_point(field_mutable:CSiteLicense_LCSAssociateUser_Request.machine_name)
  return _s;
}
inline const std::string& CSiteLicense_LCSAssociateUser_Request::_internal_machine_name() const {
  return machine_name_.Get();
}
inline void CSiteLicense_LCSAssociateUser_Request::_internal_set_machine_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  machine_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CSiteLicense_LCSAssociateUser_Request::_internal_mutable_machine_name() {
  _has_bits_[0] |= 0x00000001u;
  return machine_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CSiteLicense_LCSAssociateUser_Request::release_machine_name() {
  // @@protoc_insertion_point(field_release:CSiteLicense_LCSAssociateUser_Request.machine_name)
  if (!_internal_has_machine_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = machine_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (machine_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    machine_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CSiteLicense_LCSAssociateUser_Request::set_allocated_machine_name(std::string* machine_name) {
  if (machine_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  machine_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), machine_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (machine_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    machine_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CSiteLicense_LCSAssociateUser_Request.machine_name)
}

// -------------------------------------------------------------------

// CSiteLicense_LCSAssociateUser_Response

// -------------------------------------------------------------------

// CSiteLicense_ClientSeatCheckout_Request

// optional fixed64 steamid = 1;
inline bool CSiteLicense_ClientSeatCheckout_Request::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSiteLicense_ClientSeatCheckout_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CSiteLicense_ClientSeatCheckout_Request::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CSiteLicense_ClientSeatCheckout_Request::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CSiteLicense_ClientSeatCheckout_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CSiteLicense_ClientSeatCheckout_Request.steamid)
  return _internal_steamid();
}
inline void CSiteLicense_ClientSeatCheckout_Request::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
}
inline void CSiteLicense_ClientSeatCheckout_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CSiteLicense_ClientSeatCheckout_Request.steamid)
}

// optional fixed64 instanceid = 2;
inline bool CSiteLicense_ClientSeatCheckout_Request::_internal_has_instanceid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSiteLicense_ClientSeatCheckout_Request::has_instanceid() const {
  return _internal_has_instanceid();
}
inline void CSiteLicense_ClientSeatCheckout_Request::clear_instanceid() {
  instanceid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CSiteLicense_ClientSeatCheckout_Request::_internal_instanceid() const {
  return instanceid_;
}
inline uint64_t CSiteLicense_ClientSeatCheckout_Request::instanceid() const {
  // @@protoc_insertion_point(field_get:CSiteLicense_ClientSeatCheckout_Request.instanceid)
  return _internal_instanceid();
}
inline void CSiteLicense_ClientSeatCheckout_Request::_internal_set_instanceid(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  instanceid_ = value;
}
inline void CSiteLicense_ClientSeatCheckout_Request::set_instanceid(uint64_t value) {
  _internal_set_instanceid(value);
  // @@protoc_insertion_point(field_set:CSiteLicense_ClientSeatCheckout_Request.instanceid)
}

// optional uint32 appid = 3;
inline bool CSiteLicense_ClientSeatCheckout_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSiteLicense_ClientSeatCheckout_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CSiteLicense_ClientSeatCheckout_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CSiteLicense_ClientSeatCheckout_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CSiteLicense_ClientSeatCheckout_Request::appid() const {
  // @@protoc_insertion_point(field_get:CSiteLicense_ClientSeatCheckout_Request.appid)
  return _internal_appid();
}
inline void CSiteLicense_ClientSeatCheckout_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  appid_ = value;
}
inline void CSiteLicense_ClientSeatCheckout_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CSiteLicense_ClientSeatCheckout_Request.appid)
}

// -------------------------------------------------------------------

// CSiteLicense_ClientSeatCheckout_Response

// -------------------------------------------------------------------

// CSiteLicense_ClientGetAvailableSeats_Request

// optional fixed64 steamid = 1;
inline bool CSiteLicense_ClientGetAvailableSeats_Request::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSiteLicense_ClientGetAvailableSeats_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CSiteLicense_ClientGetAvailableSeats_Request::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CSiteLicense_ClientGetAvailableSeats_Request::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CSiteLicense_ClientGetAvailableSeats_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CSiteLicense_ClientGetAvailableSeats_Request.steamid)
  return _internal_steamid();
}
inline void CSiteLicense_ClientGetAvailableSeats_Request::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
}
inline void CSiteLicense_ClientGetAvailableSeats_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CSiteLicense_ClientGetAvailableSeats_Request.steamid)
}

// optional fixed64 instanceid = 2;
inline bool CSiteLicense_ClientGetAvailableSeats_Request::_internal_has_instanceid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSiteLicense_ClientGetAvailableSeats_Request::has_instanceid() const {
  return _internal_has_instanceid();
}
inline void CSiteLicense_ClientGetAvailableSeats_Request::clear_instanceid() {
  instanceid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CSiteLicense_ClientGetAvailableSeats_Request::_internal_instanceid() const {
  return instanceid_;
}
inline uint64_t CSiteLicense_ClientGetAvailableSeats_Request::instanceid() const {
  // @@protoc_insertion_point(field_get:CSiteLicense_ClientGetAvailableSeats_Request.instanceid)
  return _internal_instanceid();
}
inline void CSiteLicense_ClientGetAvailableSeats_Request::_internal_set_instanceid(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  instanceid_ = value;
}
inline void CSiteLicense_ClientGetAvailableSeats_Request::set_instanceid(uint64_t value) {
  _internal_set_instanceid(value);
  // @@protoc_insertion_point(field_set:CSiteLicense_ClientGetAvailableSeats_Request.instanceid)
}

// optional uint32 appid = 3;
inline bool CSiteLicense_ClientGetAvailableSeats_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSiteLicense_ClientGetAvailableSeats_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CSiteLicense_ClientGetAvailableSeats_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CSiteLicense_ClientGetAvailableSeats_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CSiteLicense_ClientGetAvailableSeats_Request::appid() const {
  // @@protoc_insertion_point(field_get:CSiteLicense_ClientGetAvailableSeats_Request.appid)
  return _internal_appid();
}
inline void CSiteLicense_ClientGetAvailableSeats_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  appid_ = value;
}
inline void CSiteLicense_ClientGetAvailableSeats_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CSiteLicense_ClientGetAvailableSeats_Request.appid)
}

// -------------------------------------------------------------------

// CSiteLicense_ClientGetAvailableSeats_Response

// optional uint32 available_seats = 1;
inline bool CSiteLicense_ClientGetAvailableSeats_Response::_internal_has_available_seats() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSiteLicense_ClientGetAvailableSeats_Response::has_available_seats() const {
  return _internal_has_available_seats();
}
inline void CSiteLicense_ClientGetAvailableSeats_Response::clear_available_seats() {
  available_seats_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CSiteLicense_ClientGetAvailableSeats_Response::_internal_available_seats() const {
  return available_seats_;
}
inline uint32_t CSiteLicense_ClientGetAvailableSeats_Response::available_seats() const {
  // @@protoc_insertion_point(field_get:CSiteLicense_ClientGetAvailableSeats_Response.available_seats)
  return _internal_available_seats();
}
inline void CSiteLicense_ClientGetAvailableSeats_Response::_internal_set_available_seats(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  available_seats_ = value;
}
inline void CSiteLicense_ClientGetAvailableSeats_Response::set_available_seats(uint32_t value) {
  _internal_set_available_seats(value);
  // @@protoc_insertion_point(field_set:CSiteLicense_ClientGetAvailableSeats_Response.available_seats)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_steammessages_5fsite_5flicense_2esteamclient_2eproto
