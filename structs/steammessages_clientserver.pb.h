// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_clientserver.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_steammessages_5fclientserver_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_steammessages_5fclientserver_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "steammessages_base.pb.h"
#include "encrypted_app_ticket.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_5fclientserver_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_5fclientserver_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[52]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fclientserver_2eproto;
class CMsgClientAMGetClanOfficers;
struct CMsgClientAMGetClanOfficersDefaultTypeInternal;
extern CMsgClientAMGetClanOfficersDefaultTypeInternal _CMsgClientAMGetClanOfficers_default_instance_;
class CMsgClientAMGetClanOfficersResponse;
struct CMsgClientAMGetClanOfficersResponseDefaultTypeInternal;
extern CMsgClientAMGetClanOfficersResponseDefaultTypeInternal _CMsgClientAMGetClanOfficersResponse_default_instance_;
class CMsgClientAMGetPersonaNameHistory;
struct CMsgClientAMGetPersonaNameHistoryDefaultTypeInternal;
extern CMsgClientAMGetPersonaNameHistoryDefaultTypeInternal _CMsgClientAMGetPersonaNameHistory_default_instance_;
class CMsgClientAMGetPersonaNameHistoryResponse;
struct CMsgClientAMGetPersonaNameHistoryResponseDefaultTypeInternal;
extern CMsgClientAMGetPersonaNameHistoryResponseDefaultTypeInternal _CMsgClientAMGetPersonaNameHistoryResponse_default_instance_;
class CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance;
struct CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstanceDefaultTypeInternal;
extern CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstanceDefaultTypeInternal _CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_default_instance_;
class CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance;
struct CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstanceDefaultTypeInternal;
extern CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstanceDefaultTypeInternal _CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance_default_instance_;
class CMsgClientAMGetPersonaNameHistory_IdInstance;
struct CMsgClientAMGetPersonaNameHistory_IdInstanceDefaultTypeInternal;
extern CMsgClientAMGetPersonaNameHistory_IdInstanceDefaultTypeInternal _CMsgClientAMGetPersonaNameHistory_IdInstance_default_instance_;
class CMsgClientAuthList;
struct CMsgClientAuthListDefaultTypeInternal;
extern CMsgClientAuthListDefaultTypeInternal _CMsgClientAuthList_default_instance_;
class CMsgClientAuthListAck;
struct CMsgClientAuthListAckDefaultTypeInternal;
extern CMsgClientAuthListAckDefaultTypeInternal _CMsgClientAuthListAck_default_instance_;
class CMsgClientCMList;
struct CMsgClientCMListDefaultTypeInternal;
extern CMsgClientCMListDefaultTypeInternal _CMsgClientCMList_default_instance_;
class CMsgClientChatInvite;
struct CMsgClientChatInviteDefaultTypeInternal;
extern CMsgClientChatInviteDefaultTypeInternal _CMsgClientChatInvite_default_instance_;
class CMsgClientClanState;
struct CMsgClientClanStateDefaultTypeInternal;
extern CMsgClientClanStateDefaultTypeInternal _CMsgClientClanState_default_instance_;
class CMsgClientClanState_Event;
struct CMsgClientClanState_EventDefaultTypeInternal;
extern CMsgClientClanState_EventDefaultTypeInternal _CMsgClientClanState_Event_default_instance_;
class CMsgClientClanState_NameInfo;
struct CMsgClientClanState_NameInfoDefaultTypeInternal;
extern CMsgClientClanState_NameInfoDefaultTypeInternal _CMsgClientClanState_NameInfo_default_instance_;
class CMsgClientClanState_UserCounts;
struct CMsgClientClanState_UserCountsDefaultTypeInternal;
extern CMsgClientClanState_UserCountsDefaultTypeInternal _CMsgClientClanState_UserCounts_default_instance_;
class CMsgClientConnectionStats;
struct CMsgClientConnectionStatsDefaultTypeInternal;
extern CMsgClientConnectionStatsDefaultTypeInternal _CMsgClientConnectionStats_default_instance_;
class CMsgClientConnectionStats_Stats_Logon;
struct CMsgClientConnectionStats_Stats_LogonDefaultTypeInternal;
extern CMsgClientConnectionStats_Stats_LogonDefaultTypeInternal _CMsgClientConnectionStats_Stats_Logon_default_instance_;
class CMsgClientConnectionStats_Stats_UDP;
struct CMsgClientConnectionStats_Stats_UDPDefaultTypeInternal;
extern CMsgClientConnectionStats_Stats_UDPDefaultTypeInternal _CMsgClientConnectionStats_Stats_UDP_default_instance_;
class CMsgClientConnectionStats_Stats_VConn;
struct CMsgClientConnectionStats_Stats_VConnDefaultTypeInternal;
extern CMsgClientConnectionStats_Stats_VConnDefaultTypeInternal _CMsgClientConnectionStats_Stats_VConn_default_instance_;
class CMsgClientDeregisterWithServer;
struct CMsgClientDeregisterWithServerDefaultTypeInternal;
extern CMsgClientDeregisterWithServerDefaultTypeInternal _CMsgClientDeregisterWithServer_default_instance_;
class CMsgClientGameConnectTokens;
struct CMsgClientGameConnectTokensDefaultTypeInternal;
extern CMsgClientGameConnectTokensDefaultTypeInternal _CMsgClientGameConnectTokens_default_instance_;
class CMsgClientGamesPlayed;
struct CMsgClientGamesPlayedDefaultTypeInternal;
extern CMsgClientGamesPlayedDefaultTypeInternal _CMsgClientGamesPlayed_default_instance_;
class CMsgClientGamesPlayed_GamePlayed;
struct CMsgClientGamesPlayed_GamePlayedDefaultTypeInternal;
extern CMsgClientGamesPlayed_GamePlayedDefaultTypeInternal _CMsgClientGamesPlayed_GamePlayed_default_instance_;
class CMsgClientGamesPlayed_ProcessInfo;
struct CMsgClientGamesPlayed_ProcessInfoDefaultTypeInternal;
extern CMsgClientGamesPlayed_ProcessInfoDefaultTypeInternal _CMsgClientGamesPlayed_ProcessInfo_default_instance_;
class CMsgClientGetAppOwnershipTicket;
struct CMsgClientGetAppOwnershipTicketDefaultTypeInternal;
extern CMsgClientGetAppOwnershipTicketDefaultTypeInternal _CMsgClientGetAppOwnershipTicket_default_instance_;
class CMsgClientGetAppOwnershipTicketResponse;
struct CMsgClientGetAppOwnershipTicketResponseDefaultTypeInternal;
extern CMsgClientGetAppOwnershipTicketResponseDefaultTypeInternal _CMsgClientGetAppOwnershipTicketResponse_default_instance_;
class CMsgClientInviteToGame;
struct CMsgClientInviteToGameDefaultTypeInternal;
extern CMsgClientInviteToGameDefaultTypeInternal _CMsgClientInviteToGame_default_instance_;
class CMsgClientIsLimitedAccount;
struct CMsgClientIsLimitedAccountDefaultTypeInternal;
extern CMsgClientIsLimitedAccountDefaultTypeInternal _CMsgClientIsLimitedAccount_default_instance_;
class CMsgClientLicenseList;
struct CMsgClientLicenseListDefaultTypeInternal;
extern CMsgClientLicenseListDefaultTypeInternal _CMsgClientLicenseList_default_instance_;
class CMsgClientLicenseList_License;
struct CMsgClientLicenseList_LicenseDefaultTypeInternal;
extern CMsgClientLicenseList_LicenseDefaultTypeInternal _CMsgClientLicenseList_License_default_instance_;
class CMsgClientNetworkingCertReply;
struct CMsgClientNetworkingCertReplyDefaultTypeInternal;
extern CMsgClientNetworkingCertReplyDefaultTypeInternal _CMsgClientNetworkingCertReply_default_instance_;
class CMsgClientNetworkingCertRequest;
struct CMsgClientNetworkingCertRequestDefaultTypeInternal;
extern CMsgClientNetworkingCertRequestDefaultTypeInternal _CMsgClientNetworkingCertRequest_default_instance_;
class CMsgClientNetworkingMobileCertReply;
struct CMsgClientNetworkingMobileCertReplyDefaultTypeInternal;
extern CMsgClientNetworkingMobileCertReplyDefaultTypeInternal _CMsgClientNetworkingMobileCertReply_default_instance_;
class CMsgClientNetworkingMobileCertRequest;
struct CMsgClientNetworkingMobileCertRequestDefaultTypeInternal;
extern CMsgClientNetworkingMobileCertRequestDefaultTypeInternal _CMsgClientNetworkingMobileCertRequest_default_instance_;
class CMsgClientP2PConnectionFailInfo;
struct CMsgClientP2PConnectionFailInfoDefaultTypeInternal;
extern CMsgClientP2PConnectionFailInfoDefaultTypeInternal _CMsgClientP2PConnectionFailInfo_default_instance_;
class CMsgClientP2PConnectionInfo;
struct CMsgClientP2PConnectionInfoDefaultTypeInternal;
extern CMsgClientP2PConnectionInfoDefaultTypeInternal _CMsgClientP2PConnectionInfo_default_instance_;
class CMsgClientRegisterAuthTicketWithCM;
struct CMsgClientRegisterAuthTicketWithCMDefaultTypeInternal;
extern CMsgClientRegisterAuthTicketWithCMDefaultTypeInternal _CMsgClientRegisterAuthTicketWithCM_default_instance_;
class CMsgClientReportOverlayDetourFailure;
struct CMsgClientReportOverlayDetourFailureDefaultTypeInternal;
extern CMsgClientReportOverlayDetourFailureDefaultTypeInternal _CMsgClientReportOverlayDetourFailure_default_instance_;
class CMsgClientRequestEncryptedAppTicket;
struct CMsgClientRequestEncryptedAppTicketDefaultTypeInternal;
extern CMsgClientRequestEncryptedAppTicketDefaultTypeInternal _CMsgClientRequestEncryptedAppTicket_default_instance_;
class CMsgClientRequestEncryptedAppTicketResponse;
struct CMsgClientRequestEncryptedAppTicketResponseDefaultTypeInternal;
extern CMsgClientRequestEncryptedAppTicketResponseDefaultTypeInternal _CMsgClientRequestEncryptedAppTicketResponse_default_instance_;
class CMsgClientRequestedClientStats;
struct CMsgClientRequestedClientStatsDefaultTypeInternal;
extern CMsgClientRequestedClientStatsDefaultTypeInternal _CMsgClientRequestedClientStats_default_instance_;
class CMsgClientRequestedClientStats_StatsToSend;
struct CMsgClientRequestedClientStats_StatsToSendDefaultTypeInternal;
extern CMsgClientRequestedClientStats_StatsToSendDefaultTypeInternal _CMsgClientRequestedClientStats_StatsToSend_default_instance_;
class CMsgClientServersAvailable;
struct CMsgClientServersAvailableDefaultTypeInternal;
extern CMsgClientServersAvailableDefaultTypeInternal _CMsgClientServersAvailable_default_instance_;
class CMsgClientServersAvailable_Server_Types_Available;
struct CMsgClientServersAvailable_Server_Types_AvailableDefaultTypeInternal;
extern CMsgClientServersAvailable_Server_Types_AvailableDefaultTypeInternal _CMsgClientServersAvailable_Server_Types_Available_default_instance_;
class CMsgClientSessionToken;
struct CMsgClientSessionTokenDefaultTypeInternal;
extern CMsgClientSessionTokenDefaultTypeInternal _CMsgClientSessionToken_default_instance_;
class CMsgClientStat2;
struct CMsgClientStat2DefaultTypeInternal;
extern CMsgClientStat2DefaultTypeInternal _CMsgClientStat2_default_instance_;
class CMsgClientStat2_StatDetail;
struct CMsgClientStat2_StatDetailDefaultTypeInternal;
extern CMsgClientStat2_StatDetailDefaultTypeInternal _CMsgClientStat2_StatDetail_default_instance_;
class CMsgClientTicketAuthComplete;
struct CMsgClientTicketAuthCompleteDefaultTypeInternal;
extern CMsgClientTicketAuthCompleteDefaultTypeInternal _CMsgClientTicketAuthComplete_default_instance_;
class CMsgClientWalletInfoUpdate;
struct CMsgClientWalletInfoUpdateDefaultTypeInternal;
extern CMsgClientWalletInfoUpdateDefaultTypeInternal _CMsgClientWalletInfoUpdate_default_instance_;
class CMsgGSApprove;
struct CMsgGSApproveDefaultTypeInternal;
extern CMsgGSApproveDefaultTypeInternal _CMsgGSApprove_default_instance_;
class CMsgGSDeny;
struct CMsgGSDenyDefaultTypeInternal;
extern CMsgGSDenyDefaultTypeInternal _CMsgGSDeny_default_instance_;
class CMsgGSKick;
struct CMsgGSKickDefaultTypeInternal;
extern CMsgGSKickDefaultTypeInternal _CMsgGSKick_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CMsgClientAMGetClanOfficers* Arena::CreateMaybeMessage<::CMsgClientAMGetClanOfficers>(Arena*);
template<> ::CMsgClientAMGetClanOfficersResponse* Arena::CreateMaybeMessage<::CMsgClientAMGetClanOfficersResponse>(Arena*);
template<> ::CMsgClientAMGetPersonaNameHistory* Arena::CreateMaybeMessage<::CMsgClientAMGetPersonaNameHistory>(Arena*);
template<> ::CMsgClientAMGetPersonaNameHistoryResponse* Arena::CreateMaybeMessage<::CMsgClientAMGetPersonaNameHistoryResponse>(Arena*);
template<> ::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance* Arena::CreateMaybeMessage<::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance>(Arena*);
template<> ::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance* Arena::CreateMaybeMessage<::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance>(Arena*);
template<> ::CMsgClientAMGetPersonaNameHistory_IdInstance* Arena::CreateMaybeMessage<::CMsgClientAMGetPersonaNameHistory_IdInstance>(Arena*);
template<> ::CMsgClientAuthList* Arena::CreateMaybeMessage<::CMsgClientAuthList>(Arena*);
template<> ::CMsgClientAuthListAck* Arena::CreateMaybeMessage<::CMsgClientAuthListAck>(Arena*);
template<> ::CMsgClientCMList* Arena::CreateMaybeMessage<::CMsgClientCMList>(Arena*);
template<> ::CMsgClientChatInvite* Arena::CreateMaybeMessage<::CMsgClientChatInvite>(Arena*);
template<> ::CMsgClientClanState* Arena::CreateMaybeMessage<::CMsgClientClanState>(Arena*);
template<> ::CMsgClientClanState_Event* Arena::CreateMaybeMessage<::CMsgClientClanState_Event>(Arena*);
template<> ::CMsgClientClanState_NameInfo* Arena::CreateMaybeMessage<::CMsgClientClanState_NameInfo>(Arena*);
template<> ::CMsgClientClanState_UserCounts* Arena::CreateMaybeMessage<::CMsgClientClanState_UserCounts>(Arena*);
template<> ::CMsgClientConnectionStats* Arena::CreateMaybeMessage<::CMsgClientConnectionStats>(Arena*);
template<> ::CMsgClientConnectionStats_Stats_Logon* Arena::CreateMaybeMessage<::CMsgClientConnectionStats_Stats_Logon>(Arena*);
template<> ::CMsgClientConnectionStats_Stats_UDP* Arena::CreateMaybeMessage<::CMsgClientConnectionStats_Stats_UDP>(Arena*);
template<> ::CMsgClientConnectionStats_Stats_VConn* Arena::CreateMaybeMessage<::CMsgClientConnectionStats_Stats_VConn>(Arena*);
template<> ::CMsgClientDeregisterWithServer* Arena::CreateMaybeMessage<::CMsgClientDeregisterWithServer>(Arena*);
template<> ::CMsgClientGameConnectTokens* Arena::CreateMaybeMessage<::CMsgClientGameConnectTokens>(Arena*);
template<> ::CMsgClientGamesPlayed* Arena::CreateMaybeMessage<::CMsgClientGamesPlayed>(Arena*);
template<> ::CMsgClientGamesPlayed_GamePlayed* Arena::CreateMaybeMessage<::CMsgClientGamesPlayed_GamePlayed>(Arena*);
template<> ::CMsgClientGamesPlayed_ProcessInfo* Arena::CreateMaybeMessage<::CMsgClientGamesPlayed_ProcessInfo>(Arena*);
template<> ::CMsgClientGetAppOwnershipTicket* Arena::CreateMaybeMessage<::CMsgClientGetAppOwnershipTicket>(Arena*);
template<> ::CMsgClientGetAppOwnershipTicketResponse* Arena::CreateMaybeMessage<::CMsgClientGetAppOwnershipTicketResponse>(Arena*);
template<> ::CMsgClientInviteToGame* Arena::CreateMaybeMessage<::CMsgClientInviteToGame>(Arena*);
template<> ::CMsgClientIsLimitedAccount* Arena::CreateMaybeMessage<::CMsgClientIsLimitedAccount>(Arena*);
template<> ::CMsgClientLicenseList* Arena::CreateMaybeMessage<::CMsgClientLicenseList>(Arena*);
template<> ::CMsgClientLicenseList_License* Arena::CreateMaybeMessage<::CMsgClientLicenseList_License>(Arena*);
template<> ::CMsgClientNetworkingCertReply* Arena::CreateMaybeMessage<::CMsgClientNetworkingCertReply>(Arena*);
template<> ::CMsgClientNetworkingCertRequest* Arena::CreateMaybeMessage<::CMsgClientNetworkingCertRequest>(Arena*);
template<> ::CMsgClientNetworkingMobileCertReply* Arena::CreateMaybeMessage<::CMsgClientNetworkingMobileCertReply>(Arena*);
template<> ::CMsgClientNetworkingMobileCertRequest* Arena::CreateMaybeMessage<::CMsgClientNetworkingMobileCertRequest>(Arena*);
template<> ::CMsgClientP2PConnectionFailInfo* Arena::CreateMaybeMessage<::CMsgClientP2PConnectionFailInfo>(Arena*);
template<> ::CMsgClientP2PConnectionInfo* Arena::CreateMaybeMessage<::CMsgClientP2PConnectionInfo>(Arena*);
template<> ::CMsgClientRegisterAuthTicketWithCM* Arena::CreateMaybeMessage<::CMsgClientRegisterAuthTicketWithCM>(Arena*);
template<> ::CMsgClientReportOverlayDetourFailure* Arena::CreateMaybeMessage<::CMsgClientReportOverlayDetourFailure>(Arena*);
template<> ::CMsgClientRequestEncryptedAppTicket* Arena::CreateMaybeMessage<::CMsgClientRequestEncryptedAppTicket>(Arena*);
template<> ::CMsgClientRequestEncryptedAppTicketResponse* Arena::CreateMaybeMessage<::CMsgClientRequestEncryptedAppTicketResponse>(Arena*);
template<> ::CMsgClientRequestedClientStats* Arena::CreateMaybeMessage<::CMsgClientRequestedClientStats>(Arena*);
template<> ::CMsgClientRequestedClientStats_StatsToSend* Arena::CreateMaybeMessage<::CMsgClientRequestedClientStats_StatsToSend>(Arena*);
template<> ::CMsgClientServersAvailable* Arena::CreateMaybeMessage<::CMsgClientServersAvailable>(Arena*);
template<> ::CMsgClientServersAvailable_Server_Types_Available* Arena::CreateMaybeMessage<::CMsgClientServersAvailable_Server_Types_Available>(Arena*);
template<> ::CMsgClientSessionToken* Arena::CreateMaybeMessage<::CMsgClientSessionToken>(Arena*);
template<> ::CMsgClientStat2* Arena::CreateMaybeMessage<::CMsgClientStat2>(Arena*);
template<> ::CMsgClientStat2_StatDetail* Arena::CreateMaybeMessage<::CMsgClientStat2_StatDetail>(Arena*);
template<> ::CMsgClientTicketAuthComplete* Arena::CreateMaybeMessage<::CMsgClientTicketAuthComplete>(Arena*);
template<> ::CMsgClientWalletInfoUpdate* Arena::CreateMaybeMessage<::CMsgClientWalletInfoUpdate>(Arena*);
template<> ::CMsgGSApprove* Arena::CreateMaybeMessage<::CMsgGSApprove>(Arena*);
template<> ::CMsgGSDeny* Arena::CreateMaybeMessage<::CMsgGSDeny>(Arena*);
template<> ::CMsgGSKick* Arena::CreateMaybeMessage<::CMsgGSKick>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class CMsgClientRegisterAuthTicketWithCM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientRegisterAuthTicketWithCM) */ {
 public:
  inline CMsgClientRegisterAuthTicketWithCM() : CMsgClientRegisterAuthTicketWithCM(nullptr) {}
  ~CMsgClientRegisterAuthTicketWithCM() override;
  explicit constexpr CMsgClientRegisterAuthTicketWithCM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientRegisterAuthTicketWithCM(const CMsgClientRegisterAuthTicketWithCM& from);
  CMsgClientRegisterAuthTicketWithCM(CMsgClientRegisterAuthTicketWithCM&& from) noexcept
    : CMsgClientRegisterAuthTicketWithCM() {
    *this = ::std::move(from);
  }

  inline CMsgClientRegisterAuthTicketWithCM& operator=(const CMsgClientRegisterAuthTicketWithCM& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientRegisterAuthTicketWithCM& operator=(CMsgClientRegisterAuthTicketWithCM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientRegisterAuthTicketWithCM& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientRegisterAuthTicketWithCM* internal_default_instance() {
    return reinterpret_cast<const CMsgClientRegisterAuthTicketWithCM*>(
               &_CMsgClientRegisterAuthTicketWithCM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CMsgClientRegisterAuthTicketWithCM& a, CMsgClientRegisterAuthTicketWithCM& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientRegisterAuthTicketWithCM* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientRegisterAuthTicketWithCM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientRegisterAuthTicketWithCM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientRegisterAuthTicketWithCM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientRegisterAuthTicketWithCM& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientRegisterAuthTicketWithCM& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientRegisterAuthTicketWithCM* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientRegisterAuthTicketWithCM";
  }
  protected:
  explicit CMsgClientRegisterAuthTicketWithCM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTicketFieldNumber = 3,
    kClientInstanceIdFieldNumber = 4,
    kProtocolVersionFieldNumber = 1,
  };
  // optional bytes ticket = 3;
  bool has_ticket() const;
  private:
  bool _internal_has_ticket() const;
  public:
  void clear_ticket();
  const std::string& ticket() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ticket(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ticket();
  PROTOBUF_NODISCARD std::string* release_ticket();
  void set_allocated_ticket(std::string* ticket);
  private:
  const std::string& _internal_ticket() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ticket(const std::string& value);
  std::string* _internal_mutable_ticket();
  public:

  // optional uint64 client_instance_id = 4;
  bool has_client_instance_id() const;
  private:
  bool _internal_has_client_instance_id() const;
  public:
  void clear_client_instance_id();
  uint64_t client_instance_id() const;
  void set_client_instance_id(uint64_t value);
  private:
  uint64_t _internal_client_instance_id() const;
  void _internal_set_client_instance_id(uint64_t value);
  public:

  // optional uint32 protocol_version = 1;
  bool has_protocol_version() const;
  private:
  bool _internal_has_protocol_version() const;
  public:
  void clear_protocol_version();
  uint32_t protocol_version() const;
  void set_protocol_version(uint32_t value);
  private:
  uint32_t _internal_protocol_version() const;
  void _internal_set_protocol_version(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientRegisterAuthTicketWithCM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ticket_;
  uint64_t client_instance_id_;
  uint32_t protocol_version_;
  friend struct ::TableStruct_steammessages_5fclientserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientTicketAuthComplete final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientTicketAuthComplete) */ {
 public:
  inline CMsgClientTicketAuthComplete() : CMsgClientTicketAuthComplete(nullptr) {}
  ~CMsgClientTicketAuthComplete() override;
  explicit constexpr CMsgClientTicketAuthComplete(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientTicketAuthComplete(const CMsgClientTicketAuthComplete& from);
  CMsgClientTicketAuthComplete(CMsgClientTicketAuthComplete&& from) noexcept
    : CMsgClientTicketAuthComplete() {
    *this = ::std::move(from);
  }

  inline CMsgClientTicketAuthComplete& operator=(const CMsgClientTicketAuthComplete& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientTicketAuthComplete& operator=(CMsgClientTicketAuthComplete&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientTicketAuthComplete& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientTicketAuthComplete* internal_default_instance() {
    return reinterpret_cast<const CMsgClientTicketAuthComplete*>(
               &_CMsgClientTicketAuthComplete_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CMsgClientTicketAuthComplete& a, CMsgClientTicketAuthComplete& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientTicketAuthComplete* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientTicketAuthComplete* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientTicketAuthComplete* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientTicketAuthComplete>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientTicketAuthComplete& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientTicketAuthComplete& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientTicketAuthComplete* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientTicketAuthComplete";
  }
  protected:
  explicit CMsgClientTicketAuthComplete(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDEPRECATEDTicketFieldNumber = 5,
    kSteamIdFieldNumber = 1,
    kGameIdFieldNumber = 2,
    kEstateFieldNumber = 3,
    kEauthSessionResponseFieldNumber = 4,
    kTicketCrcFieldNumber = 6,
    kTicketSequenceFieldNumber = 7,
    kOwnerSteamIdFieldNumber = 8,
  };
  // optional bytes DEPRECATED_ticket = 5;
  bool has_deprecated_ticket() const;
  private:
  bool _internal_has_deprecated_ticket() const;
  public:
  void clear_deprecated_ticket();
  const std::string& deprecated_ticket() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_deprecated_ticket(ArgT0&& arg0, ArgT... args);
  std::string* mutable_deprecated_ticket();
  PROTOBUF_NODISCARD std::string* release_deprecated_ticket();
  void set_allocated_deprecated_ticket(std::string* deprecated_ticket);
  private:
  const std::string& _internal_deprecated_ticket() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_deprecated_ticket(const std::string& value);
  std::string* _internal_mutable_deprecated_ticket();
  public:

  // optional fixed64 steam_id = 1;
  bool has_steam_id() const;
  private:
  bool _internal_has_steam_id() const;
  public:
  void clear_steam_id();
  uint64_t steam_id() const;
  void set_steam_id(uint64_t value);
  private:
  uint64_t _internal_steam_id() const;
  void _internal_set_steam_id(uint64_t value);
  public:

  // optional fixed64 game_id = 2;
  bool has_game_id() const;
  private:
  bool _internal_has_game_id() const;
  public:
  void clear_game_id();
  uint64_t game_id() const;
  void set_game_id(uint64_t value);
  private:
  uint64_t _internal_game_id() const;
  void _internal_set_game_id(uint64_t value);
  public:

  // optional uint32 estate = 3;
  bool has_estate() const;
  private:
  bool _internal_has_estate() const;
  public:
  void clear_estate();
  uint32_t estate() const;
  void set_estate(uint32_t value);
  private:
  uint32_t _internal_estate() const;
  void _internal_set_estate(uint32_t value);
  public:

  // optional uint32 eauth_session_response = 4;
  bool has_eauth_session_response() const;
  private:
  bool _internal_has_eauth_session_response() const;
  public:
  void clear_eauth_session_response();
  uint32_t eauth_session_response() const;
  void set_eauth_session_response(uint32_t value);
  private:
  uint32_t _internal_eauth_session_response() const;
  void _internal_set_eauth_session_response(uint32_t value);
  public:

  // optional uint32 ticket_crc = 6;
  bool has_ticket_crc() const;
  private:
  bool _internal_has_ticket_crc() const;
  public:
  void clear_ticket_crc();
  uint32_t ticket_crc() const;
  void set_ticket_crc(uint32_t value);
  private:
  uint32_t _internal_ticket_crc() const;
  void _internal_set_ticket_crc(uint32_t value);
  public:

  // optional uint32 ticket_sequence = 7;
  bool has_ticket_sequence() const;
  private:
  bool _internal_has_ticket_sequence() const;
  public:
  void clear_ticket_sequence();
  uint32_t ticket_sequence() const;
  void set_ticket_sequence(uint32_t value);
  private:
  uint32_t _internal_ticket_sequence() const;
  void _internal_set_ticket_sequence(uint32_t value);
  public:

  // optional fixed64 owner_steam_id = 8;
  bool has_owner_steam_id() const;
  private:
  bool _internal_has_owner_steam_id() const;
  public:
  void clear_owner_steam_id();
  uint64_t owner_steam_id() const;
  void set_owner_steam_id(uint64_t value);
  private:
  uint64_t _internal_owner_steam_id() const;
  void _internal_set_owner_steam_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientTicketAuthComplete)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deprecated_ticket_;
  uint64_t steam_id_;
  uint64_t game_id_;
  uint32_t estate_;
  uint32_t eauth_session_response_;
  uint32_t ticket_crc_;
  uint32_t ticket_sequence_;
  uint64_t owner_steam_id_;
  friend struct ::TableStruct_steammessages_5fclientserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientCMList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientCMList) */ {
 public:
  inline CMsgClientCMList() : CMsgClientCMList(nullptr) {}
  ~CMsgClientCMList() override;
  explicit constexpr CMsgClientCMList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientCMList(const CMsgClientCMList& from);
  CMsgClientCMList(CMsgClientCMList&& from) noexcept
    : CMsgClientCMList() {
    *this = ::std::move(from);
  }

  inline CMsgClientCMList& operator=(const CMsgClientCMList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientCMList& operator=(CMsgClientCMList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientCMList& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientCMList* internal_default_instance() {
    return reinterpret_cast<const CMsgClientCMList*>(
               &_CMsgClientCMList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CMsgClientCMList& a, CMsgClientCMList& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientCMList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientCMList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientCMList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientCMList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientCMList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientCMList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientCMList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientCMList";
  }
  protected:
  explicit CMsgClientCMList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCmAddressesFieldNumber = 1,
    kCmPortsFieldNumber = 2,
    kCmWebsocketAddressesFieldNumber = 3,
    kPercentDefaultToWebsocketFieldNumber = 4,
  };
  // repeated uint32 cm_addresses = 1;
  int cm_addresses_size() const;
  private:
  int _internal_cm_addresses_size() const;
  public:
  void clear_cm_addresses();
  private:
  uint32_t _internal_cm_addresses(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_cm_addresses() const;
  void _internal_add_cm_addresses(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_cm_addresses();
  public:
  uint32_t cm_addresses(int index) const;
  void set_cm_addresses(int index, uint32_t value);
  void add_cm_addresses(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      cm_addresses() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_cm_addresses();

  // repeated uint32 cm_ports = 2;
  int cm_ports_size() const;
  private:
  int _internal_cm_ports_size() const;
  public:
  void clear_cm_ports();
  private:
  uint32_t _internal_cm_ports(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_cm_ports() const;
  void _internal_add_cm_ports(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_cm_ports();
  public:
  uint32_t cm_ports(int index) const;
  void set_cm_ports(int index, uint32_t value);
  void add_cm_ports(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      cm_ports() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_cm_ports();

  // repeated string cm_websocket_addresses = 3;
  int cm_websocket_addresses_size() const;
  private:
  int _internal_cm_websocket_addresses_size() const;
  public:
  void clear_cm_websocket_addresses();
  const std::string& cm_websocket_addresses(int index) const;
  std::string* mutable_cm_websocket_addresses(int index);
  void set_cm_websocket_addresses(int index, const std::string& value);
  void set_cm_websocket_addresses(int index, std::string&& value);
  void set_cm_websocket_addresses(int index, const char* value);
  void set_cm_websocket_addresses(int index, const char* value, size_t size);
  std::string* add_cm_websocket_addresses();
  void add_cm_websocket_addresses(const std::string& value);
  void add_cm_websocket_addresses(std::string&& value);
  void add_cm_websocket_addresses(const char* value);
  void add_cm_websocket_addresses(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& cm_websocket_addresses() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_cm_websocket_addresses();
  private:
  const std::string& _internal_cm_websocket_addresses(int index) const;
  std::string* _internal_add_cm_websocket_addresses();
  public:

  // optional uint32 percent_default_to_websocket = 4;
  bool has_percent_default_to_websocket() const;
  private:
  bool _internal_has_percent_default_to_websocket() const;
  public:
  void clear_percent_default_to_websocket();
  uint32_t percent_default_to_websocket() const;
  void set_percent_default_to_websocket(uint32_t value);
  private:
  uint32_t _internal_percent_default_to_websocket() const;
  void _internal_set_percent_default_to_websocket(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientCMList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > cm_addresses_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > cm_ports_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> cm_websocket_addresses_;
  uint32_t percent_default_to_websocket_;
  friend struct ::TableStruct_steammessages_5fclientserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientP2PConnectionInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientP2PConnectionInfo) */ {
 public:
  inline CMsgClientP2PConnectionInfo() : CMsgClientP2PConnectionInfo(nullptr) {}
  ~CMsgClientP2PConnectionInfo() override;
  explicit constexpr CMsgClientP2PConnectionInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientP2PConnectionInfo(const CMsgClientP2PConnectionInfo& from);
  CMsgClientP2PConnectionInfo(CMsgClientP2PConnectionInfo&& from) noexcept
    : CMsgClientP2PConnectionInfo() {
    *this = ::std::move(from);
  }

  inline CMsgClientP2PConnectionInfo& operator=(const CMsgClientP2PConnectionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientP2PConnectionInfo& operator=(CMsgClientP2PConnectionInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientP2PConnectionInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientP2PConnectionInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgClientP2PConnectionInfo*>(
               &_CMsgClientP2PConnectionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CMsgClientP2PConnectionInfo& a, CMsgClientP2PConnectionInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientP2PConnectionInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientP2PConnectionInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientP2PConnectionInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientP2PConnectionInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientP2PConnectionInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientP2PConnectionInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientP2PConnectionInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientP2PConnectionInfo";
  }
  protected:
  explicit CMsgClientP2PConnectionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCandidateFieldNumber = 4,
    kRendezvousFieldNumber = 6,
    kSteamIdDestFieldNumber = 1,
    kSteamIdSrcFieldNumber = 2,
    kLegacyConnectionIdSrcFieldNumber = 5,
    kAppIdFieldNumber = 3,
  };
  // optional bytes candidate = 4;
  bool has_candidate() const;
  private:
  bool _internal_has_candidate() const;
  public:
  void clear_candidate();
  const std::string& candidate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_candidate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_candidate();
  PROTOBUF_NODISCARD std::string* release_candidate();
  void set_allocated_candidate(std::string* candidate);
  private:
  const std::string& _internal_candidate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_candidate(const std::string& value);
  std::string* _internal_mutable_candidate();
  public:

  // optional bytes rendezvous = 6;
  bool has_rendezvous() const;
  private:
  bool _internal_has_rendezvous() const;
  public:
  void clear_rendezvous();
  const std::string& rendezvous() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rendezvous(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rendezvous();
  PROTOBUF_NODISCARD std::string* release_rendezvous();
  void set_allocated_rendezvous(std::string* rendezvous);
  private:
  const std::string& _internal_rendezvous() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rendezvous(const std::string& value);
  std::string* _internal_mutable_rendezvous();
  public:

  // optional fixed64 steam_id_dest = 1;
  bool has_steam_id_dest() const;
  private:
  bool _internal_has_steam_id_dest() const;
  public:
  void clear_steam_id_dest();
  uint64_t steam_id_dest() const;
  void set_steam_id_dest(uint64_t value);
  private:
  uint64_t _internal_steam_id_dest() const;
  void _internal_set_steam_id_dest(uint64_t value);
  public:

  // optional fixed64 steam_id_src = 2;
  bool has_steam_id_src() const;
  private:
  bool _internal_has_steam_id_src() const;
  public:
  void clear_steam_id_src();
  uint64_t steam_id_src() const;
  void set_steam_id_src(uint64_t value);
  private:
  uint64_t _internal_steam_id_src() const;
  void _internal_set_steam_id_src(uint64_t value);
  public:

  // optional fixed64 legacy_connection_id_src = 5;
  bool has_legacy_connection_id_src() const;
  private:
  bool _internal_has_legacy_connection_id_src() const;
  public:
  void clear_legacy_connection_id_src();
  uint64_t legacy_connection_id_src() const;
  void set_legacy_connection_id_src(uint64_t value);
  private:
  uint64_t _internal_legacy_connection_id_src() const;
  void _internal_set_legacy_connection_id_src(uint64_t value);
  public:

  // optional uint32 app_id = 3;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientP2PConnectionInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr candidate_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rendezvous_;
  uint64_t steam_id_dest_;
  uint64_t steam_id_src_;
  uint64_t legacy_connection_id_src_;
  uint32_t app_id_;
  friend struct ::TableStruct_steammessages_5fclientserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientP2PConnectionFailInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientP2PConnectionFailInfo) */ {
 public:
  inline CMsgClientP2PConnectionFailInfo() : CMsgClientP2PConnectionFailInfo(nullptr) {}
  ~CMsgClientP2PConnectionFailInfo() override;
  explicit constexpr CMsgClientP2PConnectionFailInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientP2PConnectionFailInfo(const CMsgClientP2PConnectionFailInfo& from);
  CMsgClientP2PConnectionFailInfo(CMsgClientP2PConnectionFailInfo&& from) noexcept
    : CMsgClientP2PConnectionFailInfo() {
    *this = ::std::move(from);
  }

  inline CMsgClientP2PConnectionFailInfo& operator=(const CMsgClientP2PConnectionFailInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientP2PConnectionFailInfo& operator=(CMsgClientP2PConnectionFailInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientP2PConnectionFailInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientP2PConnectionFailInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgClientP2PConnectionFailInfo*>(
               &_CMsgClientP2PConnectionFailInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CMsgClientP2PConnectionFailInfo& a, CMsgClientP2PConnectionFailInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientP2PConnectionFailInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientP2PConnectionFailInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientP2PConnectionFailInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientP2PConnectionFailInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientP2PConnectionFailInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientP2PConnectionFailInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientP2PConnectionFailInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientP2PConnectionFailInfo";
  }
  protected:
  explicit CMsgClientP2PConnectionFailInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCloseMessageFieldNumber = 8,
    kSteamIdDestFieldNumber = 1,
    kSteamIdSrcFieldNumber = 2,
    kAppIdFieldNumber = 3,
    kEp2PSessionErrorFieldNumber = 4,
    kConnectionIdDestFieldNumber = 5,
    kCloseReasonFieldNumber = 7,
  };
  // optional string close_message = 8;
  bool has_close_message() const;
  private:
  bool _internal_has_close_message() const;
  public:
  void clear_close_message();
  const std::string& close_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_close_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_close_message();
  PROTOBUF_NODISCARD std::string* release_close_message();
  void set_allocated_close_message(std::string* close_message);
  private:
  const std::string& _internal_close_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_close_message(const std::string& value);
  std::string* _internal_mutable_close_message();
  public:

  // optional fixed64 steam_id_dest = 1;
  bool has_steam_id_dest() const;
  private:
  bool _internal_has_steam_id_dest() const;
  public:
  void clear_steam_id_dest();
  uint64_t steam_id_dest() const;
  void set_steam_id_dest(uint64_t value);
  private:
  uint64_t _internal_steam_id_dest() const;
  void _internal_set_steam_id_dest(uint64_t value);
  public:

  // optional fixed64 steam_id_src = 2;
  bool has_steam_id_src() const;
  private:
  bool _internal_has_steam_id_src() const;
  public:
  void clear_steam_id_src();
  uint64_t steam_id_src() const;
  void set_steam_id_src(uint64_t value);
  private:
  uint64_t _internal_steam_id_src() const;
  void _internal_set_steam_id_src(uint64_t value);
  public:

  // optional uint32 app_id = 3;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // optional uint32 ep2p_session_error = 4;
  bool has_ep2p_session_error() const;
  private:
  bool _internal_has_ep2p_session_error() const;
  public:
  void clear_ep2p_session_error();
  uint32_t ep2p_session_error() const;
  void set_ep2p_session_error(uint32_t value);
  private:
  uint32_t _internal_ep2p_session_error() const;
  void _internal_set_ep2p_session_error(uint32_t value);
  public:

  // optional fixed64 connection_id_dest = 5;
  bool has_connection_id_dest() const;
  private:
  bool _internal_has_connection_id_dest() const;
  public:
  void clear_connection_id_dest();
  uint64_t connection_id_dest() const;
  void set_connection_id_dest(uint64_t value);
  private:
  uint64_t _internal_connection_id_dest() const;
  void _internal_set_connection_id_dest(uint64_t value);
  public:

  // optional uint32 close_reason = 7;
  bool has_close_reason() const;
  private:
  bool _internal_has_close_reason() const;
  public:
  void clear_close_reason();
  uint32_t close_reason() const;
  void set_close_reason(uint32_t value);
  private:
  uint32_t _internal_close_reason() const;
  void _internal_set_close_reason(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientP2PConnectionFailInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr close_message_;
  uint64_t steam_id_dest_;
  uint64_t steam_id_src_;
  uint32_t app_id_;
  uint32_t ep2p_session_error_;
  uint64_t connection_id_dest_;
  uint32_t close_reason_;
  friend struct ::TableStruct_steammessages_5fclientserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientNetworkingCertRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientNetworkingCertRequest) */ {
 public:
  inline CMsgClientNetworkingCertRequest() : CMsgClientNetworkingCertRequest(nullptr) {}
  ~CMsgClientNetworkingCertRequest() override;
  explicit constexpr CMsgClientNetworkingCertRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientNetworkingCertRequest(const CMsgClientNetworkingCertRequest& from);
  CMsgClientNetworkingCertRequest(CMsgClientNetworkingCertRequest&& from) noexcept
    : CMsgClientNetworkingCertRequest() {
    *this = ::std::move(from);
  }

  inline CMsgClientNetworkingCertRequest& operator=(const CMsgClientNetworkingCertRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientNetworkingCertRequest& operator=(CMsgClientNetworkingCertRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientNetworkingCertRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientNetworkingCertRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgClientNetworkingCertRequest*>(
               &_CMsgClientNetworkingCertRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CMsgClientNetworkingCertRequest& a, CMsgClientNetworkingCertRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientNetworkingCertRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientNetworkingCertRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientNetworkingCertRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientNetworkingCertRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientNetworkingCertRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientNetworkingCertRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientNetworkingCertRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientNetworkingCertRequest";
  }
  protected:
  explicit CMsgClientNetworkingCertRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyDataFieldNumber = 2,
    kAppIdFieldNumber = 3,
  };
  // optional bytes key_data = 2;
  bool has_key_data() const;
  private:
  bool _internal_has_key_data() const;
  public:
  void clear_key_data();
  const std::string& key_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key_data();
  PROTOBUF_NODISCARD std::string* release_key_data();
  void set_allocated_key_data(std::string* key_data);
  private:
  const std::string& _internal_key_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key_data(const std::string& value);
  std::string* _internal_mutable_key_data();
  public:

  // optional uint32 app_id = 3;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientNetworkingCertRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_data_;
  uint32_t app_id_;
  friend struct ::TableStruct_steammessages_5fclientserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientNetworkingCertReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientNetworkingCertReply) */ {
 public:
  inline CMsgClientNetworkingCertReply() : CMsgClientNetworkingCertReply(nullptr) {}
  ~CMsgClientNetworkingCertReply() override;
  explicit constexpr CMsgClientNetworkingCertReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientNetworkingCertReply(const CMsgClientNetworkingCertReply& from);
  CMsgClientNetworkingCertReply(CMsgClientNetworkingCertReply&& from) noexcept
    : CMsgClientNetworkingCertReply() {
    *this = ::std::move(from);
  }

  inline CMsgClientNetworkingCertReply& operator=(const CMsgClientNetworkingCertReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientNetworkingCertReply& operator=(CMsgClientNetworkingCertReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientNetworkingCertReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientNetworkingCertReply* internal_default_instance() {
    return reinterpret_cast<const CMsgClientNetworkingCertReply*>(
               &_CMsgClientNetworkingCertReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CMsgClientNetworkingCertReply& a, CMsgClientNetworkingCertReply& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientNetworkingCertReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientNetworkingCertReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientNetworkingCertReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientNetworkingCertReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientNetworkingCertReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientNetworkingCertReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientNetworkingCertReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientNetworkingCertReply";
  }
  protected:
  explicit CMsgClientNetworkingCertReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCertFieldNumber = 4,
    kCaSignatureFieldNumber = 6,
    kCaKeyIdFieldNumber = 5,
  };
  // optional bytes cert = 4;
  bool has_cert() const;
  private:
  bool _internal_has_cert() const;
  public:
  void clear_cert();
  const std::string& cert() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cert(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cert();
  PROTOBUF_NODISCARD std::string* release_cert();
  void set_allocated_cert(std::string* cert);
  private:
  const std::string& _internal_cert() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cert(const std::string& value);
  std::string* _internal_mutable_cert();
  public:

  // optional bytes ca_signature = 6;
  bool has_ca_signature() const;
  private:
  bool _internal_has_ca_signature() const;
  public:
  void clear_ca_signature();
  const std::string& ca_signature() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ca_signature(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ca_signature();
  PROTOBUF_NODISCARD std::string* release_ca_signature();
  void set_allocated_ca_signature(std::string* ca_signature);
  private:
  const std::string& _internal_ca_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ca_signature(const std::string& value);
  std::string* _internal_mutable_ca_signature();
  public:

  // optional fixed64 ca_key_id = 5;
  bool has_ca_key_id() const;
  private:
  bool _internal_has_ca_key_id() const;
  public:
  void clear_ca_key_id();
  uint64_t ca_key_id() const;
  void set_ca_key_id(uint64_t value);
  private:
  uint64_t _internal_ca_key_id() const;
  void _internal_set_ca_key_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientNetworkingCertReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cert_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ca_signature_;
  uint64_t ca_key_id_;
  friend struct ::TableStruct_steammessages_5fclientserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientNetworkingMobileCertRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientNetworkingMobileCertRequest) */ {
 public:
  inline CMsgClientNetworkingMobileCertRequest() : CMsgClientNetworkingMobileCertRequest(nullptr) {}
  ~CMsgClientNetworkingMobileCertRequest() override;
  explicit constexpr CMsgClientNetworkingMobileCertRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientNetworkingMobileCertRequest(const CMsgClientNetworkingMobileCertRequest& from);
  CMsgClientNetworkingMobileCertRequest(CMsgClientNetworkingMobileCertRequest&& from) noexcept
    : CMsgClientNetworkingMobileCertRequest() {
    *this = ::std::move(from);
  }

  inline CMsgClientNetworkingMobileCertRequest& operator=(const CMsgClientNetworkingMobileCertRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientNetworkingMobileCertRequest& operator=(CMsgClientNetworkingMobileCertRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientNetworkingMobileCertRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientNetworkingMobileCertRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgClientNetworkingMobileCertRequest*>(
               &_CMsgClientNetworkingMobileCertRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CMsgClientNetworkingMobileCertRequest& a, CMsgClientNetworkingMobileCertRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientNetworkingMobileCertRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientNetworkingMobileCertRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientNetworkingMobileCertRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientNetworkingMobileCertRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientNetworkingMobileCertRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientNetworkingMobileCertRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientNetworkingMobileCertRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientNetworkingMobileCertRequest";
  }
  protected:
  explicit CMsgClientNetworkingMobileCertRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppIdFieldNumber = 1,
  };
  // optional uint32 app_id = 1;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientNetworkingMobileCertRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t app_id_;
  friend struct ::TableStruct_steammessages_5fclientserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientNetworkingMobileCertReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientNetworkingMobileCertReply) */ {
 public:
  inline CMsgClientNetworkingMobileCertReply() : CMsgClientNetworkingMobileCertReply(nullptr) {}
  ~CMsgClientNetworkingMobileCertReply() override;
  explicit constexpr CMsgClientNetworkingMobileCertReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientNetworkingMobileCertReply(const CMsgClientNetworkingMobileCertReply& from);
  CMsgClientNetworkingMobileCertReply(CMsgClientNetworkingMobileCertReply&& from) noexcept
    : CMsgClientNetworkingMobileCertReply() {
    *this = ::std::move(from);
  }

  inline CMsgClientNetworkingMobileCertReply& operator=(const CMsgClientNetworkingMobileCertReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientNetworkingMobileCertReply& operator=(CMsgClientNetworkingMobileCertReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientNetworkingMobileCertReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientNetworkingMobileCertReply* internal_default_instance() {
    return reinterpret_cast<const CMsgClientNetworkingMobileCertReply*>(
               &_CMsgClientNetworkingMobileCertReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CMsgClientNetworkingMobileCertReply& a, CMsgClientNetworkingMobileCertReply& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientNetworkingMobileCertReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientNetworkingMobileCertReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientNetworkingMobileCertReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientNetworkingMobileCertReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientNetworkingMobileCertReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientNetworkingMobileCertReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientNetworkingMobileCertReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientNetworkingMobileCertReply";
  }
  protected:
  explicit CMsgClientNetworkingMobileCertReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncodedCertFieldNumber = 1,
  };
  // optional string encoded_cert = 1;
  bool has_encoded_cert() const;
  private:
  bool _internal_has_encoded_cert() const;
  public:
  void clear_encoded_cert();
  const std::string& encoded_cert() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_encoded_cert(ArgT0&& arg0, ArgT... args);
  std::string* mutable_encoded_cert();
  PROTOBUF_NODISCARD std::string* release_encoded_cert();
  void set_allocated_encoded_cert(std::string* encoded_cert);
  private:
  const std::string& _internal_encoded_cert() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encoded_cert(const std::string& value);
  std::string* _internal_mutable_encoded_cert();
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientNetworkingMobileCertReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encoded_cert_;
  friend struct ::TableStruct_steammessages_5fclientserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientGetAppOwnershipTicket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientGetAppOwnershipTicket) */ {
 public:
  inline CMsgClientGetAppOwnershipTicket() : CMsgClientGetAppOwnershipTicket(nullptr) {}
  ~CMsgClientGetAppOwnershipTicket() override;
  explicit constexpr CMsgClientGetAppOwnershipTicket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientGetAppOwnershipTicket(const CMsgClientGetAppOwnershipTicket& from);
  CMsgClientGetAppOwnershipTicket(CMsgClientGetAppOwnershipTicket&& from) noexcept
    : CMsgClientGetAppOwnershipTicket() {
    *this = ::std::move(from);
  }

  inline CMsgClientGetAppOwnershipTicket& operator=(const CMsgClientGetAppOwnershipTicket& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientGetAppOwnershipTicket& operator=(CMsgClientGetAppOwnershipTicket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientGetAppOwnershipTicket& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientGetAppOwnershipTicket* internal_default_instance() {
    return reinterpret_cast<const CMsgClientGetAppOwnershipTicket*>(
               &_CMsgClientGetAppOwnershipTicket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CMsgClientGetAppOwnershipTicket& a, CMsgClientGetAppOwnershipTicket& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientGetAppOwnershipTicket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientGetAppOwnershipTicket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientGetAppOwnershipTicket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientGetAppOwnershipTicket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientGetAppOwnershipTicket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientGetAppOwnershipTicket& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientGetAppOwnershipTicket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientGetAppOwnershipTicket";
  }
  protected:
  explicit CMsgClientGetAppOwnershipTicket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppIdFieldNumber = 1,
  };
  // optional uint32 app_id = 1;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientGetAppOwnershipTicket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t app_id_;
  friend struct ::TableStruct_steammessages_5fclientserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientGetAppOwnershipTicketResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientGetAppOwnershipTicketResponse) */ {
 public:
  inline CMsgClientGetAppOwnershipTicketResponse() : CMsgClientGetAppOwnershipTicketResponse(nullptr) {}
  ~CMsgClientGetAppOwnershipTicketResponse() override;
  explicit constexpr CMsgClientGetAppOwnershipTicketResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientGetAppOwnershipTicketResponse(const CMsgClientGetAppOwnershipTicketResponse& from);
  CMsgClientGetAppOwnershipTicketResponse(CMsgClientGetAppOwnershipTicketResponse&& from) noexcept
    : CMsgClientGetAppOwnershipTicketResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientGetAppOwnershipTicketResponse& operator=(const CMsgClientGetAppOwnershipTicketResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientGetAppOwnershipTicketResponse& operator=(CMsgClientGetAppOwnershipTicketResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientGetAppOwnershipTicketResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientGetAppOwnershipTicketResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientGetAppOwnershipTicketResponse*>(
               &_CMsgClientGetAppOwnershipTicketResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CMsgClientGetAppOwnershipTicketResponse& a, CMsgClientGetAppOwnershipTicketResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientGetAppOwnershipTicketResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientGetAppOwnershipTicketResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientGetAppOwnershipTicketResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientGetAppOwnershipTicketResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientGetAppOwnershipTicketResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientGetAppOwnershipTicketResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientGetAppOwnershipTicketResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientGetAppOwnershipTicketResponse";
  }
  protected:
  explicit CMsgClientGetAppOwnershipTicketResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTicketFieldNumber = 3,
    kAppIdFieldNumber = 2,
    kEresultFieldNumber = 1,
  };
  // optional bytes ticket = 3;
  bool has_ticket() const;
  private:
  bool _internal_has_ticket() const;
  public:
  void clear_ticket();
  const std::string& ticket() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ticket(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ticket();
  PROTOBUF_NODISCARD std::string* release_ticket();
  void set_allocated_ticket(std::string* ticket);
  private:
  const std::string& _internal_ticket() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ticket(const std::string& value);
  std::string* _internal_mutable_ticket();
  public:

  // optional uint32 app_id = 2;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // optional uint32 eresult = 1 [default = 2];
  bool has_eresult() const;
  private:
  bool _internal_has_eresult() const;
  public:
  void clear_eresult();
  uint32_t eresult() const;
  void set_eresult(uint32_t value);
  private:
  uint32_t _internal_eresult() const;
  void _internal_set_eresult(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientGetAppOwnershipTicketResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ticket_;
  uint32_t app_id_;
  uint32_t eresult_;
  friend struct ::TableStruct_steammessages_5fclientserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientSessionToken final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientSessionToken) */ {
 public:
  inline CMsgClientSessionToken() : CMsgClientSessionToken(nullptr) {}
  ~CMsgClientSessionToken() override;
  explicit constexpr CMsgClientSessionToken(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientSessionToken(const CMsgClientSessionToken& from);
  CMsgClientSessionToken(CMsgClientSessionToken&& from) noexcept
    : CMsgClientSessionToken() {
    *this = ::std::move(from);
  }

  inline CMsgClientSessionToken& operator=(const CMsgClientSessionToken& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientSessionToken& operator=(CMsgClientSessionToken&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientSessionToken& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientSessionToken* internal_default_instance() {
    return reinterpret_cast<const CMsgClientSessionToken*>(
               &_CMsgClientSessionToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CMsgClientSessionToken& a, CMsgClientSessionToken& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientSessionToken* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientSessionToken* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientSessionToken* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientSessionToken>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientSessionToken& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientSessionToken& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientSessionToken* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientSessionToken";
  }
  protected:
  explicit CMsgClientSessionToken(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
  };
  // optional uint64 token = 1;
  bool has_token() const;
  private:
  bool _internal_has_token() const;
  public:
  void clear_token();
  uint64_t token() const;
  void set_token(uint64_t value);
  private:
  uint64_t _internal_token() const;
  void _internal_set_token(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientSessionToken)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t token_;
  friend struct ::TableStruct_steammessages_5fclientserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientGameConnectTokens final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientGameConnectTokens) */ {
 public:
  inline CMsgClientGameConnectTokens() : CMsgClientGameConnectTokens(nullptr) {}
  ~CMsgClientGameConnectTokens() override;
  explicit constexpr CMsgClientGameConnectTokens(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientGameConnectTokens(const CMsgClientGameConnectTokens& from);
  CMsgClientGameConnectTokens(CMsgClientGameConnectTokens&& from) noexcept
    : CMsgClientGameConnectTokens() {
    *this = ::std::move(from);
  }

  inline CMsgClientGameConnectTokens& operator=(const CMsgClientGameConnectTokens& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientGameConnectTokens& operator=(CMsgClientGameConnectTokens&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientGameConnectTokens& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientGameConnectTokens* internal_default_instance() {
    return reinterpret_cast<const CMsgClientGameConnectTokens*>(
               &_CMsgClientGameConnectTokens_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CMsgClientGameConnectTokens& a, CMsgClientGameConnectTokens& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientGameConnectTokens* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientGameConnectTokens* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientGameConnectTokens* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientGameConnectTokens>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientGameConnectTokens& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientGameConnectTokens& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientGameConnectTokens* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientGameConnectTokens";
  }
  protected:
  explicit CMsgClientGameConnectTokens(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokensFieldNumber = 2,
    kMaxTokensToKeepFieldNumber = 1,
  };
  // repeated bytes tokens = 2;
  int tokens_size() const;
  private:
  int _internal_tokens_size() const;
  public:
  void clear_tokens();
  const std::string& tokens(int index) const;
  std::string* mutable_tokens(int index);
  void set_tokens(int index, const std::string& value);
  void set_tokens(int index, std::string&& value);
  void set_tokens(int index, const char* value);
  void set_tokens(int index, const void* value, size_t size);
  std::string* add_tokens();
  void add_tokens(const std::string& value);
  void add_tokens(std::string&& value);
  void add_tokens(const char* value);
  void add_tokens(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tokens() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tokens();
  private:
  const std::string& _internal_tokens(int index) const;
  std::string* _internal_add_tokens();
  public:

  // optional uint32 max_tokens_to_keep = 1 [default = 10];
  bool has_max_tokens_to_keep() const;
  private:
  bool _internal_has_max_tokens_to_keep() const;
  public:
  void clear_max_tokens_to_keep();
  uint32_t max_tokens_to_keep() const;
  void set_max_tokens_to_keep(uint32_t value);
  private:
  uint32_t _internal_max_tokens_to_keep() const;
  void _internal_set_max_tokens_to_keep(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientGameConnectTokens)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tokens_;
  uint32_t max_tokens_to_keep_;
  friend struct ::TableStruct_steammessages_5fclientserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientGamesPlayed_ProcessInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientGamesPlayed.ProcessInfo) */ {
 public:
  inline CMsgClientGamesPlayed_ProcessInfo() : CMsgClientGamesPlayed_ProcessInfo(nullptr) {}
  ~CMsgClientGamesPlayed_ProcessInfo() override;
  explicit constexpr CMsgClientGamesPlayed_ProcessInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientGamesPlayed_ProcessInfo(const CMsgClientGamesPlayed_ProcessInfo& from);
  CMsgClientGamesPlayed_ProcessInfo(CMsgClientGamesPlayed_ProcessInfo&& from) noexcept
    : CMsgClientGamesPlayed_ProcessInfo() {
    *this = ::std::move(from);
  }

  inline CMsgClientGamesPlayed_ProcessInfo& operator=(const CMsgClientGamesPlayed_ProcessInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientGamesPlayed_ProcessInfo& operator=(CMsgClientGamesPlayed_ProcessInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientGamesPlayed_ProcessInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientGamesPlayed_ProcessInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgClientGamesPlayed_ProcessInfo*>(
               &_CMsgClientGamesPlayed_ProcessInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CMsgClientGamesPlayed_ProcessInfo& a, CMsgClientGamesPlayed_ProcessInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientGamesPlayed_ProcessInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientGamesPlayed_ProcessInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientGamesPlayed_ProcessInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientGamesPlayed_ProcessInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientGamesPlayed_ProcessInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientGamesPlayed_ProcessInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientGamesPlayed_ProcessInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientGamesPlayed.ProcessInfo";
  }
  protected:
  explicit CMsgClientGamesPlayed_ProcessInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProcessIdFieldNumber = 1,
    kProcessIdParentFieldNumber = 2,
    kParentIsSteamFieldNumber = 3,
  };
  // optional uint32 process_id = 1;
  bool has_process_id() const;
  private:
  bool _internal_has_process_id() const;
  public:
  void clear_process_id();
  uint32_t process_id() const;
  void set_process_id(uint32_t value);
  private:
  uint32_t _internal_process_id() const;
  void _internal_set_process_id(uint32_t value);
  public:

  // optional uint32 process_id_parent = 2;
  bool has_process_id_parent() const;
  private:
  bool _internal_has_process_id_parent() const;
  public:
  void clear_process_id_parent();
  uint32_t process_id_parent() const;
  void set_process_id_parent(uint32_t value);
  private:
  uint32_t _internal_process_id_parent() const;
  void _internal_set_process_id_parent(uint32_t value);
  public:

  // optional bool parent_is_steam = 3;
  bool has_parent_is_steam() const;
  private:
  bool _internal_has_parent_is_steam() const;
  public:
  void clear_parent_is_steam();
  bool parent_is_steam() const;
  void set_parent_is_steam(bool value);
  private:
  bool _internal_parent_is_steam() const;
  void _internal_set_parent_is_steam(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientGamesPlayed.ProcessInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t process_id_;
  uint32_t process_id_parent_;
  bool parent_is_steam_;
  friend struct ::TableStruct_steammessages_5fclientserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientGamesPlayed_GamePlayed final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientGamesPlayed.GamePlayed) */ {
 public:
  inline CMsgClientGamesPlayed_GamePlayed() : CMsgClientGamesPlayed_GamePlayed(nullptr) {}
  ~CMsgClientGamesPlayed_GamePlayed() override;
  explicit constexpr CMsgClientGamesPlayed_GamePlayed(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientGamesPlayed_GamePlayed(const CMsgClientGamesPlayed_GamePlayed& from);
  CMsgClientGamesPlayed_GamePlayed(CMsgClientGamesPlayed_GamePlayed&& from) noexcept
    : CMsgClientGamesPlayed_GamePlayed() {
    *this = ::std::move(from);
  }

  inline CMsgClientGamesPlayed_GamePlayed& operator=(const CMsgClientGamesPlayed_GamePlayed& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientGamesPlayed_GamePlayed& operator=(CMsgClientGamesPlayed_GamePlayed&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientGamesPlayed_GamePlayed& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientGamesPlayed_GamePlayed* internal_default_instance() {
    return reinterpret_cast<const CMsgClientGamesPlayed_GamePlayed*>(
               &_CMsgClientGamesPlayed_GamePlayed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CMsgClientGamesPlayed_GamePlayed& a, CMsgClientGamesPlayed_GamePlayed& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientGamesPlayed_GamePlayed* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientGamesPlayed_GamePlayed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientGamesPlayed_GamePlayed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientGamesPlayed_GamePlayed>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientGamesPlayed_GamePlayed& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientGamesPlayed_GamePlayed& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientGamesPlayed_GamePlayed* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientGamesPlayed.GamePlayed";
  }
  protected:
  explicit CMsgClientGamesPlayed_GamePlayed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProcessIdListFieldNumber = 32,
    kTokenFieldNumber = 6,
    kGameExtraInfoFieldNumber = 7,
    kGameDataBlobFieldNumber = 8,
    kVrHmdVendorFieldNumber = 13,
    kVrHmdModelFieldNumber = 14,
    kPrimarySteamControllerSerialFieldNumber = 17,
    kCompatToolCmdFieldNumber = 28,
    kBetaNameFieldNumber = 30,
    kGameIpAddressFieldNumber = 23,
    kSteamIdGsFieldNumber = 1,
    kGameIdFieldNumber = 2,
    kDeprecatedGameIpAddressFieldNumber = 3,
    kGamePortFieldNumber = 4,
    kIsSecureFieldNumber = 5,
    kProcessIdFieldNumber = 9,
    kStreamingProviderIdFieldNumber = 10,
    kGameFlagsFieldNumber = 11,
    kOwnerIdFieldNumber = 12,
    kLaunchOptionTypeFieldNumber = 15,
    kTotalSteamControllerCountFieldNumber = 18,
    kTotalNonSteamControllerCountFieldNumber = 19,
    kControllerWorkshopFileIdFieldNumber = 20,
    kLaunchSourceFieldNumber = 21,
    kVrHmdRuntimeFieldNumber = 22,
    kControllerConnectionTypeFieldNumber = 24,
    kGameOsPlatformFieldNumber = 25,
    kGameBuildIdFieldNumber = 26,
    kCompatToolIdFieldNumber = 27,
    kCompatToolBuildIdFieldNumber = 29,
    kDlcContextFieldNumber = 31,
    kPrimaryControllerTypeFieldNumber = 16,
  };
  // repeated .CMsgClientGamesPlayed.ProcessInfo process_id_list = 32;
  int process_id_list_size() const;
  private:
  int _internal_process_id_list_size() const;
  public:
  void clear_process_id_list();
  ::CMsgClientGamesPlayed_ProcessInfo* mutable_process_id_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientGamesPlayed_ProcessInfo >*
      mutable_process_id_list();
  private:
  const ::CMsgClientGamesPlayed_ProcessInfo& _internal_process_id_list(int index) const;
  ::CMsgClientGamesPlayed_ProcessInfo* _internal_add_process_id_list();
  public:
  const ::CMsgClientGamesPlayed_ProcessInfo& process_id_list(int index) const;
  ::CMsgClientGamesPlayed_ProcessInfo* add_process_id_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientGamesPlayed_ProcessInfo >&
      process_id_list() const;

  // optional bytes token = 6;
  bool has_token() const;
  private:
  bool _internal_has_token() const;
  public:
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // optional string game_extra_info = 7;
  bool has_game_extra_info() const;
  private:
  bool _internal_has_game_extra_info() const;
  public:
  void clear_game_extra_info();
  const std::string& game_extra_info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_game_extra_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_game_extra_info();
  PROTOBUF_NODISCARD std::string* release_game_extra_info();
  void set_allocated_game_extra_info(std::string* game_extra_info);
  private:
  const std::string& _internal_game_extra_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_game_extra_info(const std::string& value);
  std::string* _internal_mutable_game_extra_info();
  public:

  // optional bytes game_data_blob = 8;
  bool has_game_data_blob() const;
  private:
  bool _internal_has_game_data_blob() const;
  public:
  void clear_game_data_blob();
  const std::string& game_data_blob() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_game_data_blob(ArgT0&& arg0, ArgT... args);
  std::string* mutable_game_data_blob();
  PROTOBUF_NODISCARD std::string* release_game_data_blob();
  void set_allocated_game_data_blob(std::string* game_data_blob);
  private:
  const std::string& _internal_game_data_blob() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_game_data_blob(const std::string& value);
  std::string* _internal_mutable_game_data_blob();
  public:

  // optional string vr_hmd_vendor = 13;
  bool has_vr_hmd_vendor() const;
  private:
  bool _internal_has_vr_hmd_vendor() const;
  public:
  void clear_vr_hmd_vendor();
  const std::string& vr_hmd_vendor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vr_hmd_vendor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vr_hmd_vendor();
  PROTOBUF_NODISCARD std::string* release_vr_hmd_vendor();
  void set_allocated_vr_hmd_vendor(std::string* vr_hmd_vendor);
  private:
  const std::string& _internal_vr_hmd_vendor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vr_hmd_vendor(const std::string& value);
  std::string* _internal_mutable_vr_hmd_vendor();
  public:

  // optional string vr_hmd_model = 14;
  bool has_vr_hmd_model() const;
  private:
  bool _internal_has_vr_hmd_model() const;
  public:
  void clear_vr_hmd_model();
  const std::string& vr_hmd_model() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vr_hmd_model(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vr_hmd_model();
  PROTOBUF_NODISCARD std::string* release_vr_hmd_model();
  void set_allocated_vr_hmd_model(std::string* vr_hmd_model);
  private:
  const std::string& _internal_vr_hmd_model() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vr_hmd_model(const std::string& value);
  std::string* _internal_mutable_vr_hmd_model();
  public:

  // optional string primary_steam_controller_serial = 17;
  bool has_primary_steam_controller_serial() const;
  private:
  bool _internal_has_primary_steam_controller_serial() const;
  public:
  void clear_primary_steam_controller_serial();
  const std::string& primary_steam_controller_serial() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_primary_steam_controller_serial(ArgT0&& arg0, ArgT... args);
  std::string* mutable_primary_steam_controller_serial();
  PROTOBUF_NODISCARD std::string* release_primary_steam_controller_serial();
  void set_allocated_primary_steam_controller_serial(std::string* primary_steam_controller_serial);
  private:
  const std::string& _internal_primary_steam_controller_serial() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_primary_steam_controller_serial(const std::string& value);
  std::string* _internal_mutable_primary_steam_controller_serial();
  public:

  // optional string compat_tool_cmd = 28;
  bool has_compat_tool_cmd() const;
  private:
  bool _internal_has_compat_tool_cmd() const;
  public:
  void clear_compat_tool_cmd();
  const std::string& compat_tool_cmd() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_compat_tool_cmd(ArgT0&& arg0, ArgT... args);
  std::string* mutable_compat_tool_cmd();
  PROTOBUF_NODISCARD std::string* release_compat_tool_cmd();
  void set_allocated_compat_tool_cmd(std::string* compat_tool_cmd);
  private:
  const std::string& _internal_compat_tool_cmd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_compat_tool_cmd(const std::string& value);
  std::string* _internal_mutable_compat_tool_cmd();
  public:

  // optional string beta_name = 30;
  bool has_beta_name() const;
  private:
  bool _internal_has_beta_name() const;
  public:
  void clear_beta_name();
  const std::string& beta_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_beta_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_beta_name();
  PROTOBUF_NODISCARD std::string* release_beta_name();
  void set_allocated_beta_name(std::string* beta_name);
  private:
  const std::string& _internal_beta_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_beta_name(const std::string& value);
  std::string* _internal_mutable_beta_name();
  public:

  // optional .CMsgIPAddress game_ip_address = 23;
  bool has_game_ip_address() const;
  private:
  bool _internal_has_game_ip_address() const;
  public:
  void clear_game_ip_address();
  const ::CMsgIPAddress& game_ip_address() const;
  PROTOBUF_NODISCARD ::CMsgIPAddress* release_game_ip_address();
  ::CMsgIPAddress* mutable_game_ip_address();
  void set_allocated_game_ip_address(::CMsgIPAddress* game_ip_address);
  private:
  const ::CMsgIPAddress& _internal_game_ip_address() const;
  ::CMsgIPAddress* _internal_mutable_game_ip_address();
  public:
  void unsafe_arena_set_allocated_game_ip_address(
      ::CMsgIPAddress* game_ip_address);
  ::CMsgIPAddress* unsafe_arena_release_game_ip_address();

  // optional uint64 steam_id_gs = 1;
  bool has_steam_id_gs() const;
  private:
  bool _internal_has_steam_id_gs() const;
  public:
  void clear_steam_id_gs();
  uint64_t steam_id_gs() const;
  void set_steam_id_gs(uint64_t value);
  private:
  uint64_t _internal_steam_id_gs() const;
  void _internal_set_steam_id_gs(uint64_t value);
  public:

  // optional fixed64 game_id = 2;
  bool has_game_id() const;
  private:
  bool _internal_has_game_id() const;
  public:
  void clear_game_id();
  uint64_t game_id() const;
  void set_game_id(uint64_t value);
  private:
  uint64_t _internal_game_id() const;
  void _internal_set_game_id(uint64_t value);
  public:

  // optional uint32 deprecated_game_ip_address = 3;
  bool has_deprecated_game_ip_address() const;
  private:
  bool _internal_has_deprecated_game_ip_address() const;
  public:
  void clear_deprecated_game_ip_address();
  uint32_t deprecated_game_ip_address() const;
  void set_deprecated_game_ip_address(uint32_t value);
  private:
  uint32_t _internal_deprecated_game_ip_address() const;
  void _internal_set_deprecated_game_ip_address(uint32_t value);
  public:

  // optional uint32 game_port = 4;
  bool has_game_port() const;
  private:
  bool _internal_has_game_port() const;
  public:
  void clear_game_port();
  uint32_t game_port() const;
  void set_game_port(uint32_t value);
  private:
  uint32_t _internal_game_port() const;
  void _internal_set_game_port(uint32_t value);
  public:

  // optional bool is_secure = 5;
  bool has_is_secure() const;
  private:
  bool _internal_has_is_secure() const;
  public:
  void clear_is_secure();
  bool is_secure() const;
  void set_is_secure(bool value);
  private:
  bool _internal_is_secure() const;
  void _internal_set_is_secure(bool value);
  public:

  // optional uint32 process_id = 9;
  bool has_process_id() const;
  private:
  bool _internal_has_process_id() const;
  public:
  void clear_process_id();
  uint32_t process_id() const;
  void set_process_id(uint32_t value);
  private:
  uint32_t _internal_process_id() const;
  void _internal_set_process_id(uint32_t value);
  public:

  // optional uint32 streaming_provider_id = 10;
  bool has_streaming_provider_id() const;
  private:
  bool _internal_has_streaming_provider_id() const;
  public:
  void clear_streaming_provider_id();
  uint32_t streaming_provider_id() const;
  void set_streaming_provider_id(uint32_t value);
  private:
  uint32_t _internal_streaming_provider_id() const;
  void _internal_set_streaming_provider_id(uint32_t value);
  public:

  // optional uint32 game_flags = 11;
  bool has_game_flags() const;
  private:
  bool _internal_has_game_flags() const;
  public:
  void clear_game_flags();
  uint32_t game_flags() const;
  void set_game_flags(uint32_t value);
  private:
  uint32_t _internal_game_flags() const;
  void _internal_set_game_flags(uint32_t value);
  public:

  // optional uint32 owner_id = 12;
  bool has_owner_id() const;
  private:
  bool _internal_has_owner_id() const;
  public:
  void clear_owner_id();
  uint32_t owner_id() const;
  void set_owner_id(uint32_t value);
  private:
  uint32_t _internal_owner_id() const;
  void _internal_set_owner_id(uint32_t value);
  public:

  // optional uint32 launch_option_type = 15 [default = 0];
  bool has_launch_option_type() const;
  private:
  bool _internal_has_launch_option_type() const;
  public:
  void clear_launch_option_type();
  uint32_t launch_option_type() const;
  void set_launch_option_type(uint32_t value);
  private:
  uint32_t _internal_launch_option_type() const;
  void _internal_set_launch_option_type(uint32_t value);
  public:

  // optional uint32 total_steam_controller_count = 18 [default = 0];
  bool has_total_steam_controller_count() const;
  private:
  bool _internal_has_total_steam_controller_count() const;
  public:
  void clear_total_steam_controller_count();
  uint32_t total_steam_controller_count() const;
  void set_total_steam_controller_count(uint32_t value);
  private:
  uint32_t _internal_total_steam_controller_count() const;
  void _internal_set_total_steam_controller_count(uint32_t value);
  public:

  // optional uint32 total_non_steam_controller_count = 19 [default = 0];
  bool has_total_non_steam_controller_count() const;
  private:
  bool _internal_has_total_non_steam_controller_count() const;
  public:
  void clear_total_non_steam_controller_count();
  uint32_t total_non_steam_controller_count() const;
  void set_total_non_steam_controller_count(uint32_t value);
  private:
  uint32_t _internal_total_non_steam_controller_count() const;
  void _internal_set_total_non_steam_controller_count(uint32_t value);
  public:

  // optional uint64 controller_workshop_file_id = 20 [default = 0];
  bool has_controller_workshop_file_id() const;
  private:
  bool _internal_has_controller_workshop_file_id() const;
  public:
  void clear_controller_workshop_file_id();
  uint64_t controller_workshop_file_id() const;
  void set_controller_workshop_file_id(uint64_t value);
  private:
  uint64_t _internal_controller_workshop_file_id() const;
  void _internal_set_controller_workshop_file_id(uint64_t value);
  public:

  // optional uint32 launch_source = 21 [default = 0];
  bool has_launch_source() const;
  private:
  bool _internal_has_launch_source() const;
  public:
  void clear_launch_source();
  uint32_t launch_source() const;
  void set_launch_source(uint32_t value);
  private:
  uint32_t _internal_launch_source() const;
  void _internal_set_launch_source(uint32_t value);
  public:

  // optional uint32 vr_hmd_runtime = 22;
  bool has_vr_hmd_runtime() const;
  private:
  bool _internal_has_vr_hmd_runtime() const;
  public:
  void clear_vr_hmd_runtime();
  uint32_t vr_hmd_runtime() const;
  void set_vr_hmd_runtime(uint32_t value);
  private:
  uint32_t _internal_vr_hmd_runtime() const;
  void _internal_set_vr_hmd_runtime(uint32_t value);
  public:

  // optional uint32 controller_connection_type = 24 [default = 0];
  bool has_controller_connection_type() const;
  private:
  bool _internal_has_controller_connection_type() const;
  public:
  void clear_controller_connection_type();
  uint32_t controller_connection_type() const;
  void set_controller_connection_type(uint32_t value);
  private:
  uint32_t _internal_controller_connection_type() const;
  void _internal_set_controller_connection_type(uint32_t value);
  public:

  // optional int32 game_os_platform = 25;
  bool has_game_os_platform() const;
  private:
  bool _internal_has_game_os_platform() const;
  public:
  void clear_game_os_platform();
  int32_t game_os_platform() const;
  void set_game_os_platform(int32_t value);
  private:
  int32_t _internal_game_os_platform() const;
  void _internal_set_game_os_platform(int32_t value);
  public:

  // optional uint32 game_build_id = 26;
  bool has_game_build_id() const;
  private:
  bool _internal_has_game_build_id() const;
  public:
  void clear_game_build_id();
  uint32_t game_build_id() const;
  void set_game_build_id(uint32_t value);
  private:
  uint32_t _internal_game_build_id() const;
  void _internal_set_game_build_id(uint32_t value);
  public:

  // optional uint32 compat_tool_id = 27 [default = 0];
  bool has_compat_tool_id() const;
  private:
  bool _internal_has_compat_tool_id() const;
  public:
  void clear_compat_tool_id();
  uint32_t compat_tool_id() const;
  void set_compat_tool_id(uint32_t value);
  private:
  uint32_t _internal_compat_tool_id() const;
  void _internal_set_compat_tool_id(uint32_t value);
  public:

  // optional uint32 compat_tool_build_id = 29;
  bool has_compat_tool_build_id() const;
  private:
  bool _internal_has_compat_tool_build_id() const;
  public:
  void clear_compat_tool_build_id();
  uint32_t compat_tool_build_id() const;
  void set_compat_tool_build_id(uint32_t value);
  private:
  uint32_t _internal_compat_tool_build_id() const;
  void _internal_set_compat_tool_build_id(uint32_t value);
  public:

  // optional uint32 dlc_context = 31;
  bool has_dlc_context() const;
  private:
  bool _internal_has_dlc_context() const;
  public:
  void clear_dlc_context();
  uint32_t dlc_context() const;
  void set_dlc_context(uint32_t value);
  private:
  uint32_t _internal_dlc_context() const;
  void _internal_set_dlc_context(uint32_t value);
  public:

  // optional int32 primary_controller_type = 16 [default = -1];
  bool has_primary_controller_type() const;
  private:
  bool _internal_has_primary_controller_type() const;
  public:
  void clear_primary_controller_type();
  int32_t primary_controller_type() const;
  void set_primary_controller_type(int32_t value);
  private:
  int32_t _internal_primary_controller_type() const;
  void _internal_set_primary_controller_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientGamesPlayed.GamePlayed)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientGamesPlayed_ProcessInfo > process_id_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr game_extra_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr game_data_blob_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vr_hmd_vendor_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vr_hmd_model_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr primary_steam_controller_serial_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr compat_tool_cmd_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr beta_name_;
  ::CMsgIPAddress* game_ip_address_;
  uint64_t steam_id_gs_;
  uint64_t game_id_;
  uint32_t deprecated_game_ip_address_;
  uint32_t game_port_;
  bool is_secure_;
  uint32_t process_id_;
  uint32_t streaming_provider_id_;
  uint32_t game_flags_;
  uint32_t owner_id_;
  uint32_t launch_option_type_;
  uint32_t total_steam_controller_count_;
  uint32_t total_non_steam_controller_count_;
  uint64_t controller_workshop_file_id_;
  uint32_t launch_source_;
  uint32_t vr_hmd_runtime_;
  uint32_t controller_connection_type_;
  int32_t game_os_platform_;
  uint32_t game_build_id_;
  uint32_t compat_tool_id_;
  uint32_t compat_tool_build_id_;
  uint32_t dlc_context_;
  int32_t primary_controller_type_;
  friend struct ::TableStruct_steammessages_5fclientserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientGamesPlayed final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientGamesPlayed) */ {
 public:
  inline CMsgClientGamesPlayed() : CMsgClientGamesPlayed(nullptr) {}
  ~CMsgClientGamesPlayed() override;
  explicit constexpr CMsgClientGamesPlayed(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientGamesPlayed(const CMsgClientGamesPlayed& from);
  CMsgClientGamesPlayed(CMsgClientGamesPlayed&& from) noexcept
    : CMsgClientGamesPlayed() {
    *this = ::std::move(from);
  }

  inline CMsgClientGamesPlayed& operator=(const CMsgClientGamesPlayed& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientGamesPlayed& operator=(CMsgClientGamesPlayed&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientGamesPlayed& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientGamesPlayed* internal_default_instance() {
    return reinterpret_cast<const CMsgClientGamesPlayed*>(
               &_CMsgClientGamesPlayed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CMsgClientGamesPlayed& a, CMsgClientGamesPlayed& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientGamesPlayed* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientGamesPlayed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientGamesPlayed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientGamesPlayed>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientGamesPlayed& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientGamesPlayed& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientGamesPlayed* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientGamesPlayed";
  }
  protected:
  explicit CMsgClientGamesPlayed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgClientGamesPlayed_ProcessInfo ProcessInfo;
  typedef CMsgClientGamesPlayed_GamePlayed GamePlayed;

  // accessors -------------------------------------------------------

  enum : int {
    kGamesPlayedFieldNumber = 1,
    kClientOsTypeFieldNumber = 2,
    kCloudGamingPlatformFieldNumber = 3,
    kRecentReauthenticationFieldNumber = 4,
  };
  // repeated .CMsgClientGamesPlayed.GamePlayed games_played = 1;
  int games_played_size() const;
  private:
  int _internal_games_played_size() const;
  public:
  void clear_games_played();
  ::CMsgClientGamesPlayed_GamePlayed* mutable_games_played(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientGamesPlayed_GamePlayed >*
      mutable_games_played();
  private:
  const ::CMsgClientGamesPlayed_GamePlayed& _internal_games_played(int index) const;
  ::CMsgClientGamesPlayed_GamePlayed* _internal_add_games_played();
  public:
  const ::CMsgClientGamesPlayed_GamePlayed& games_played(int index) const;
  ::CMsgClientGamesPlayed_GamePlayed* add_games_played();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientGamesPlayed_GamePlayed >&
      games_played() const;

  // optional uint32 client_os_type = 2;
  bool has_client_os_type() const;
  private:
  bool _internal_has_client_os_type() const;
  public:
  void clear_client_os_type();
  uint32_t client_os_type() const;
  void set_client_os_type(uint32_t value);
  private:
  uint32_t _internal_client_os_type() const;
  void _internal_set_client_os_type(uint32_t value);
  public:

  // optional uint32 cloud_gaming_platform = 3;
  bool has_cloud_gaming_platform() const;
  private:
  bool _internal_has_cloud_gaming_platform() const;
  public:
  void clear_cloud_gaming_platform();
  uint32_t cloud_gaming_platform() const;
  void set_cloud_gaming_platform(uint32_t value);
  private:
  uint32_t _internal_cloud_gaming_platform() const;
  void _internal_set_cloud_gaming_platform(uint32_t value);
  public:

  // optional bool recent_reauthentication = 4;
  bool has_recent_reauthentication() const;
  private:
  bool _internal_has_recent_reauthentication() const;
  public:
  void clear_recent_reauthentication();
  bool recent_reauthentication() const;
  void set_recent_reauthentication(bool value);
  private:
  bool _internal_recent_reauthentication() const;
  void _internal_set_recent_reauthentication(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientGamesPlayed)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientGamesPlayed_GamePlayed > games_played_;
  uint32_t client_os_type_;
  uint32_t cloud_gaming_platform_;
  bool recent_reauthentication_;
  friend struct ::TableStruct_steammessages_5fclientserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgGSApprove final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGSApprove) */ {
 public:
  inline CMsgGSApprove() : CMsgGSApprove(nullptr) {}
  ~CMsgGSApprove() override;
  explicit constexpr CMsgGSApprove(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGSApprove(const CMsgGSApprove& from);
  CMsgGSApprove(CMsgGSApprove&& from) noexcept
    : CMsgGSApprove() {
    *this = ::std::move(from);
  }

  inline CMsgGSApprove& operator=(const CMsgGSApprove& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGSApprove& operator=(CMsgGSApprove&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGSApprove& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGSApprove* internal_default_instance() {
    return reinterpret_cast<const CMsgGSApprove*>(
               &_CMsgGSApprove_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CMsgGSApprove& a, CMsgGSApprove& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGSApprove* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGSApprove* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGSApprove* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGSApprove>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGSApprove& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGSApprove& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGSApprove* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGSApprove";
  }
  protected:
  explicit CMsgGSApprove(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamIdFieldNumber = 1,
    kOwnerSteamIdFieldNumber = 2,
  };
  // optional fixed64 steam_id = 1;
  bool has_steam_id() const;
  private:
  bool _internal_has_steam_id() const;
  public:
  void clear_steam_id();
  uint64_t steam_id() const;
  void set_steam_id(uint64_t value);
  private:
  uint64_t _internal_steam_id() const;
  void _internal_set_steam_id(uint64_t value);
  public:

  // optional fixed64 owner_steam_id = 2;
  bool has_owner_steam_id() const;
  private:
  bool _internal_has_owner_steam_id() const;
  public:
  void clear_owner_steam_id();
  uint64_t owner_steam_id() const;
  void set_owner_steam_id(uint64_t value);
  private:
  uint64_t _internal_owner_steam_id() const;
  void _internal_set_owner_steam_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGSApprove)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t steam_id_;
  uint64_t owner_steam_id_;
  friend struct ::TableStruct_steammessages_5fclientserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgGSDeny final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGSDeny) */ {
 public:
  inline CMsgGSDeny() : CMsgGSDeny(nullptr) {}
  ~CMsgGSDeny() override;
  explicit constexpr CMsgGSDeny(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGSDeny(const CMsgGSDeny& from);
  CMsgGSDeny(CMsgGSDeny&& from) noexcept
    : CMsgGSDeny() {
    *this = ::std::move(from);
  }

  inline CMsgGSDeny& operator=(const CMsgGSDeny& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGSDeny& operator=(CMsgGSDeny&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGSDeny& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGSDeny* internal_default_instance() {
    return reinterpret_cast<const CMsgGSDeny*>(
               &_CMsgGSDeny_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CMsgGSDeny& a, CMsgGSDeny& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGSDeny* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGSDeny* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGSDeny* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGSDeny>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGSDeny& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGSDeny& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGSDeny* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGSDeny";
  }
  protected:
  explicit CMsgGSDeny(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDenyStringFieldNumber = 3,
    kSteamIdFieldNumber = 1,
    kEdenyReasonFieldNumber = 2,
  };
  // optional string deny_string = 3;
  bool has_deny_string() const;
  private:
  bool _internal_has_deny_string() const;
  public:
  void clear_deny_string();
  const std::string& deny_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_deny_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_deny_string();
  PROTOBUF_NODISCARD std::string* release_deny_string();
  void set_allocated_deny_string(std::string* deny_string);
  private:
  const std::string& _internal_deny_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_deny_string(const std::string& value);
  std::string* _internal_mutable_deny_string();
  public:

  // optional fixed64 steam_id = 1;
  bool has_steam_id() const;
  private:
  bool _internal_has_steam_id() const;
  public:
  void clear_steam_id();
  uint64_t steam_id() const;
  void set_steam_id(uint64_t value);
  private:
  uint64_t _internal_steam_id() const;
  void _internal_set_steam_id(uint64_t value);
  public:

  // optional int32 edeny_reason = 2;
  bool has_edeny_reason() const;
  private:
  bool _internal_has_edeny_reason() const;
  public:
  void clear_edeny_reason();
  int32_t edeny_reason() const;
  void set_edeny_reason(int32_t value);
  private:
  int32_t _internal_edeny_reason() const;
  void _internal_set_edeny_reason(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGSDeny)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deny_string_;
  uint64_t steam_id_;
  int32_t edeny_reason_;
  friend struct ::TableStruct_steammessages_5fclientserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgGSKick final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGSKick) */ {
 public:
  inline CMsgGSKick() : CMsgGSKick(nullptr) {}
  ~CMsgGSKick() override;
  explicit constexpr CMsgGSKick(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGSKick(const CMsgGSKick& from);
  CMsgGSKick(CMsgGSKick&& from) noexcept
    : CMsgGSKick() {
    *this = ::std::move(from);
  }

  inline CMsgGSKick& operator=(const CMsgGSKick& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGSKick& operator=(CMsgGSKick&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGSKick& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGSKick* internal_default_instance() {
    return reinterpret_cast<const CMsgGSKick*>(
               &_CMsgGSKick_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CMsgGSKick& a, CMsgGSKick& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGSKick* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGSKick* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGSKick* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGSKick>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGSKick& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGSKick& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGSKick* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGSKick";
  }
  protected:
  explicit CMsgGSKick(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamIdFieldNumber = 1,
    kEdenyReasonFieldNumber = 2,
  };
  // optional fixed64 steam_id = 1;
  bool has_steam_id() const;
  private:
  bool _internal_has_steam_id() const;
  public:
  void clear_steam_id();
  uint64_t steam_id() const;
  void set_steam_id(uint64_t value);
  private:
  uint64_t _internal_steam_id() const;
  void _internal_set_steam_id(uint64_t value);
  public:

  // optional int32 edeny_reason = 2;
  bool has_edeny_reason() const;
  private:
  bool _internal_has_edeny_reason() const;
  public:
  void clear_edeny_reason();
  int32_t edeny_reason() const;
  void set_edeny_reason(int32_t value);
  private:
  int32_t _internal_edeny_reason() const;
  void _internal_set_edeny_reason(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGSKick)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t steam_id_;
  int32_t edeny_reason_;
  friend struct ::TableStruct_steammessages_5fclientserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientAuthList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientAuthList) */ {
 public:
  inline CMsgClientAuthList() : CMsgClientAuthList(nullptr) {}
  ~CMsgClientAuthList() override;
  explicit constexpr CMsgClientAuthList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientAuthList(const CMsgClientAuthList& from);
  CMsgClientAuthList(CMsgClientAuthList&& from) noexcept
    : CMsgClientAuthList() {
    *this = ::std::move(from);
  }

  inline CMsgClientAuthList& operator=(const CMsgClientAuthList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientAuthList& operator=(CMsgClientAuthList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientAuthList& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientAuthList* internal_default_instance() {
    return reinterpret_cast<const CMsgClientAuthList*>(
               &_CMsgClientAuthList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CMsgClientAuthList& a, CMsgClientAuthList& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientAuthList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientAuthList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientAuthList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientAuthList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientAuthList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientAuthList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientAuthList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientAuthList";
  }
  protected:
  explicit CMsgClientAuthList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTicketsFieldNumber = 4,
    kAppIdsFieldNumber = 5,
    kTokensLeftFieldNumber = 1,
    kLastRequestSeqFieldNumber = 2,
    kLastRequestSeqFromServerFieldNumber = 3,
    kMessageSequenceFieldNumber = 6,
    kFilteredFieldNumber = 7,
  };
  // repeated .CMsgAuthTicket tickets = 4;
  int tickets_size() const;
  private:
  int _internal_tickets_size() const;
  public:
  void clear_tickets();
  ::CMsgAuthTicket* mutable_tickets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgAuthTicket >*
      mutable_tickets();
  private:
  const ::CMsgAuthTicket& _internal_tickets(int index) const;
  ::CMsgAuthTicket* _internal_add_tickets();
  public:
  const ::CMsgAuthTicket& tickets(int index) const;
  ::CMsgAuthTicket* add_tickets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgAuthTicket >&
      tickets() const;

  // repeated uint32 app_ids = 5;
  int app_ids_size() const;
  private:
  int _internal_app_ids_size() const;
  public:
  void clear_app_ids();
  private:
  uint32_t _internal_app_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_app_ids() const;
  void _internal_add_app_ids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_app_ids();
  public:
  uint32_t app_ids(int index) const;
  void set_app_ids(int index, uint32_t value);
  void add_app_ids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      app_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_app_ids();

  // optional uint32 tokens_left = 1;
  bool has_tokens_left() const;
  private:
  bool _internal_has_tokens_left() const;
  public:
  void clear_tokens_left();
  uint32_t tokens_left() const;
  void set_tokens_left(uint32_t value);
  private:
  uint32_t _internal_tokens_left() const;
  void _internal_set_tokens_left(uint32_t value);
  public:

  // optional uint32 last_request_seq = 2;
  bool has_last_request_seq() const;
  private:
  bool _internal_has_last_request_seq() const;
  public:
  void clear_last_request_seq();
  uint32_t last_request_seq() const;
  void set_last_request_seq(uint32_t value);
  private:
  uint32_t _internal_last_request_seq() const;
  void _internal_set_last_request_seq(uint32_t value);
  public:

  // optional uint32 last_request_seq_from_server = 3;
  bool has_last_request_seq_from_server() const;
  private:
  bool _internal_has_last_request_seq_from_server() const;
  public:
  void clear_last_request_seq_from_server();
  uint32_t last_request_seq_from_server() const;
  void set_last_request_seq_from_server(uint32_t value);
  private:
  uint32_t _internal_last_request_seq_from_server() const;
  void _internal_set_last_request_seq_from_server(uint32_t value);
  public:

  // optional uint32 message_sequence = 6;
  bool has_message_sequence() const;
  private:
  bool _internal_has_message_sequence() const;
  public:
  void clear_message_sequence();
  uint32_t message_sequence() const;
  void set_message_sequence(uint32_t value);
  private:
  uint32_t _internal_message_sequence() const;
  void _internal_set_message_sequence(uint32_t value);
  public:

  // optional bool filtered = 7;
  bool has_filtered() const;
  private:
  bool _internal_has_filtered() const;
  public:
  void clear_filtered();
  bool filtered() const;
  void set_filtered(bool value);
  private:
  bool _internal_filtered() const;
  void _internal_set_filtered(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientAuthList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgAuthTicket > tickets_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > app_ids_;
  uint32_t tokens_left_;
  uint32_t last_request_seq_;
  uint32_t last_request_seq_from_server_;
  uint32_t message_sequence_;
  bool filtered_;
  friend struct ::TableStruct_steammessages_5fclientserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientAuthListAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientAuthListAck) */ {
 public:
  inline CMsgClientAuthListAck() : CMsgClientAuthListAck(nullptr) {}
  ~CMsgClientAuthListAck() override;
  explicit constexpr CMsgClientAuthListAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientAuthListAck(const CMsgClientAuthListAck& from);
  CMsgClientAuthListAck(CMsgClientAuthListAck&& from) noexcept
    : CMsgClientAuthListAck() {
    *this = ::std::move(from);
  }

  inline CMsgClientAuthListAck& operator=(const CMsgClientAuthListAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientAuthListAck& operator=(CMsgClientAuthListAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientAuthListAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientAuthListAck* internal_default_instance() {
    return reinterpret_cast<const CMsgClientAuthListAck*>(
               &_CMsgClientAuthListAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CMsgClientAuthListAck& a, CMsgClientAuthListAck& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientAuthListAck* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientAuthListAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientAuthListAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientAuthListAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientAuthListAck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientAuthListAck& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientAuthListAck* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientAuthListAck";
  }
  protected:
  explicit CMsgClientAuthListAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTicketCrcFieldNumber = 1,
    kAppIdsFieldNumber = 2,
    kMessageSequenceFieldNumber = 3,
  };
  // repeated uint32 ticket_crc = 1;
  int ticket_crc_size() const;
  private:
  int _internal_ticket_crc_size() const;
  public:
  void clear_ticket_crc();
  private:
  uint32_t _internal_ticket_crc(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_ticket_crc() const;
  void _internal_add_ticket_crc(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_ticket_crc();
  public:
  uint32_t ticket_crc(int index) const;
  void set_ticket_crc(int index, uint32_t value);
  void add_ticket_crc(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      ticket_crc() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_ticket_crc();

  // repeated uint32 app_ids = 2;
  int app_ids_size() const;
  private:
  int _internal_app_ids_size() const;
  public:
  void clear_app_ids();
  private:
  uint32_t _internal_app_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_app_ids() const;
  void _internal_add_app_ids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_app_ids();
  public:
  uint32_t app_ids(int index) const;
  void set_app_ids(int index, uint32_t value);
  void add_app_ids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      app_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_app_ids();

  // optional uint32 message_sequence = 3;
  bool has_message_sequence() const;
  private:
  bool _internal_has_message_sequence() const;
  public:
  void clear_message_sequence();
  uint32_t message_sequence() const;
  void set_message_sequence(uint32_t value);
  private:
  uint32_t _internal_message_sequence() const;
  void _internal_set_message_sequence(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientAuthListAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > ticket_crc_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > app_ids_;
  uint32_t message_sequence_;
  friend struct ::TableStruct_steammessages_5fclientserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientLicenseList_License final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientLicenseList.License) */ {
 public:
  inline CMsgClientLicenseList_License() : CMsgClientLicenseList_License(nullptr) {}
  ~CMsgClientLicenseList_License() override;
  explicit constexpr CMsgClientLicenseList_License(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientLicenseList_License(const CMsgClientLicenseList_License& from);
  CMsgClientLicenseList_License(CMsgClientLicenseList_License&& from) noexcept
    : CMsgClientLicenseList_License() {
    *this = ::std::move(from);
  }

  inline CMsgClientLicenseList_License& operator=(const CMsgClientLicenseList_License& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientLicenseList_License& operator=(CMsgClientLicenseList_License&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientLicenseList_License& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientLicenseList_License* internal_default_instance() {
    return reinterpret_cast<const CMsgClientLicenseList_License*>(
               &_CMsgClientLicenseList_License_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CMsgClientLicenseList_License& a, CMsgClientLicenseList_License& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientLicenseList_License* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientLicenseList_License* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientLicenseList_License* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientLicenseList_License>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientLicenseList_License& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientLicenseList_License& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientLicenseList_License* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientLicenseList.License";
  }
  protected:
  explicit CMsgClientLicenseList_License(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPurchaseCountryCodeFieldNumber = 8,
    kPackageIdFieldNumber = 1,
    kTimeCreatedFieldNumber = 2,
    kTimeNextProcessFieldNumber = 3,
    kMinuteLimitFieldNumber = 4,
    kMinutesUsedFieldNumber = 5,
    kPaymentMethodFieldNumber = 6,
    kFlagsFieldNumber = 7,
    kLicenseTypeFieldNumber = 9,
    kTerritoryCodeFieldNumber = 10,
    kChangeNumberFieldNumber = 11,
    kOwnerIdFieldNumber = 12,
    kInitialPeriodFieldNumber = 13,
    kInitialTimeUnitFieldNumber = 14,
    kRenewalPeriodFieldNumber = 15,
    kAccessTokenFieldNumber = 17,
    kRenewalTimeUnitFieldNumber = 16,
    kMasterPackageIdFieldNumber = 18,
  };
  // optional string purchase_country_code = 8;
  bool has_purchase_country_code() const;
  private:
  bool _internal_has_purchase_country_code() const;
  public:
  void clear_purchase_country_code();
  const std::string& purchase_country_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_purchase_country_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_purchase_country_code();
  PROTOBUF_NODISCARD std::string* release_purchase_country_code();
  void set_allocated_purchase_country_code(std::string* purchase_country_code);
  private:
  const std::string& _internal_purchase_country_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_purchase_country_code(const std::string& value);
  std::string* _internal_mutable_purchase_country_code();
  public:

  // optional uint32 package_id = 1;
  bool has_package_id() const;
  private:
  bool _internal_has_package_id() const;
  public:
  void clear_package_id();
  uint32_t package_id() const;
  void set_package_id(uint32_t value);
  private:
  uint32_t _internal_package_id() const;
  void _internal_set_package_id(uint32_t value);
  public:

  // optional fixed32 time_created = 2;
  bool has_time_created() const;
  private:
  bool _internal_has_time_created() const;
  public:
  void clear_time_created();
  uint32_t time_created() const;
  void set_time_created(uint32_t value);
  private:
  uint32_t _internal_time_created() const;
  void _internal_set_time_created(uint32_t value);
  public:

  // optional fixed32 time_next_process = 3;
  bool has_time_next_process() const;
  private:
  bool _internal_has_time_next_process() const;
  public:
  void clear_time_next_process();
  uint32_t time_next_process() const;
  void set_time_next_process(uint32_t value);
  private:
  uint32_t _internal_time_next_process() const;
  void _internal_set_time_next_process(uint32_t value);
  public:

  // optional int32 minute_limit = 4;
  bool has_minute_limit() const;
  private:
  bool _internal_has_minute_limit() const;
  public:
  void clear_minute_limit();
  int32_t minute_limit() const;
  void set_minute_limit(int32_t value);
  private:
  int32_t _internal_minute_limit() const;
  void _internal_set_minute_limit(int32_t value);
  public:

  // optional int32 minutes_used = 5;
  bool has_minutes_used() const;
  private:
  bool _internal_has_minutes_used() const;
  public:
  void clear_minutes_used();
  int32_t minutes_used() const;
  void set_minutes_used(int32_t value);
  private:
  int32_t _internal_minutes_used() const;
  void _internal_set_minutes_used(int32_t value);
  public:

  // optional uint32 payment_method = 6;
  bool has_payment_method() const;
  private:
  bool _internal_has_payment_method() const;
  public:
  void clear_payment_method();
  uint32_t payment_method() const;
  void set_payment_method(uint32_t value);
  private:
  uint32_t _internal_payment_method() const;
  void _internal_set_payment_method(uint32_t value);
  public:

  // optional uint32 flags = 7;
  bool has_flags() const;
  private:
  bool _internal_has_flags() const;
  public:
  void clear_flags();
  uint32_t flags() const;
  void set_flags(uint32_t value);
  private:
  uint32_t _internal_flags() const;
  void _internal_set_flags(uint32_t value);
  public:

  // optional uint32 license_type = 9;
  bool has_license_type() const;
  private:
  bool _internal_has_license_type() const;
  public:
  void clear_license_type();
  uint32_t license_type() const;
  void set_license_type(uint32_t value);
  private:
  uint32_t _internal_license_type() const;
  void _internal_set_license_type(uint32_t value);
  public:

  // optional int32 territory_code = 10;
  bool has_territory_code() const;
  private:
  bool _internal_has_territory_code() const;
  public:
  void clear_territory_code();
  int32_t territory_code() const;
  void set_territory_code(int32_t value);
  private:
  int32_t _internal_territory_code() const;
  void _internal_set_territory_code(int32_t value);
  public:

  // optional int32 change_number = 11;
  bool has_change_number() const;
  private:
  bool _internal_has_change_number() const;
  public:
  void clear_change_number();
  int32_t change_number() const;
  void set_change_number(int32_t value);
  private:
  int32_t _internal_change_number() const;
  void _internal_set_change_number(int32_t value);
  public:

  // optional uint32 owner_id = 12;
  bool has_owner_id() const;
  private:
  bool _internal_has_owner_id() const;
  public:
  void clear_owner_id();
  uint32_t owner_id() const;
  void set_owner_id(uint32_t value);
  private:
  uint32_t _internal_owner_id() const;
  void _internal_set_owner_id(uint32_t value);
  public:

  // optional uint32 initial_period = 13;
  bool has_initial_period() const;
  private:
  bool _internal_has_initial_period() const;
  public:
  void clear_initial_period();
  uint32_t initial_period() const;
  void set_initial_period(uint32_t value);
  private:
  uint32_t _internal_initial_period() const;
  void _internal_set_initial_period(uint32_t value);
  public:

  // optional uint32 initial_time_unit = 14;
  bool has_initial_time_unit() const;
  private:
  bool _internal_has_initial_time_unit() const;
  public:
  void clear_initial_time_unit();
  uint32_t initial_time_unit() const;
  void set_initial_time_unit(uint32_t value);
  private:
  uint32_t _internal_initial_time_unit() const;
  void _internal_set_initial_time_unit(uint32_t value);
  public:

  // optional uint32 renewal_period = 15;
  bool has_renewal_period() const;
  private:
  bool _internal_has_renewal_period() const;
  public:
  void clear_renewal_period();
  uint32_t renewal_period() const;
  void set_renewal_period(uint32_t value);
  private:
  uint32_t _internal_renewal_period() const;
  void _internal_set_renewal_period(uint32_t value);
  public:

  // optional uint64 access_token = 17;
  bool has_access_token() const;
  private:
  bool _internal_has_access_token() const;
  public:
  void clear_access_token();
  uint64_t access_token() const;
  void set_access_token(uint64_t value);
  private:
  uint64_t _internal_access_token() const;
  void _internal_set_access_token(uint64_t value);
  public:

  // optional uint32 renewal_time_unit = 16;
  bool has_renewal_time_unit() const;
  private:
  bool _internal_has_renewal_time_unit() const;
  public:
  void clear_renewal_time_unit();
  uint32_t renewal_time_unit() const;
  void set_renewal_time_unit(uint32_t value);
  private:
  uint32_t _internal_renewal_time_unit() const;
  void _internal_set_renewal_time_unit(uint32_t value);
  public:

  // optional uint32 master_package_id = 18;
  bool has_master_package_id() const;
  private:
  bool _internal_has_master_package_id() const;
  public:
  void clear_master_package_id();
  uint32_t master_package_id() const;
  void set_master_package_id(uint32_t value);
  private:
  uint32_t _internal_master_package_id() const;
  void _internal_set_master_package_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientLicenseList.License)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr purchase_country_code_;
  uint32_t package_id_;
  uint32_t time_created_;
  uint32_t time_next_process_;
  int32_t minute_limit_;
  int32_t minutes_used_;
  uint32_t payment_method_;
  uint32_t flags_;
  uint32_t license_type_;
  int32_t territory_code_;
  int32_t change_number_;
  uint32_t owner_id_;
  uint32_t initial_period_;
  uint32_t initial_time_unit_;
  uint32_t renewal_period_;
  uint64_t access_token_;
  uint32_t renewal_time_unit_;
  uint32_t master_package_id_;
  friend struct ::TableStruct_steammessages_5fclientserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientLicenseList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientLicenseList) */ {
 public:
  inline CMsgClientLicenseList() : CMsgClientLicenseList(nullptr) {}
  ~CMsgClientLicenseList() override;
  explicit constexpr CMsgClientLicenseList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientLicenseList(const CMsgClientLicenseList& from);
  CMsgClientLicenseList(CMsgClientLicenseList&& from) noexcept
    : CMsgClientLicenseList() {
    *this = ::std::move(from);
  }

  inline CMsgClientLicenseList& operator=(const CMsgClientLicenseList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientLicenseList& operator=(CMsgClientLicenseList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientLicenseList& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientLicenseList* internal_default_instance() {
    return reinterpret_cast<const CMsgClientLicenseList*>(
               &_CMsgClientLicenseList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CMsgClientLicenseList& a, CMsgClientLicenseList& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientLicenseList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientLicenseList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientLicenseList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientLicenseList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientLicenseList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientLicenseList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientLicenseList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientLicenseList";
  }
  protected:
  explicit CMsgClientLicenseList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgClientLicenseList_License License;

  // accessors -------------------------------------------------------

  enum : int {
    kLicensesFieldNumber = 2,
    kEresultFieldNumber = 1,
  };
  // repeated .CMsgClientLicenseList.License licenses = 2;
  int licenses_size() const;
  private:
  int _internal_licenses_size() const;
  public:
  void clear_licenses();
  ::CMsgClientLicenseList_License* mutable_licenses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientLicenseList_License >*
      mutable_licenses();
  private:
  const ::CMsgClientLicenseList_License& _internal_licenses(int index) const;
  ::CMsgClientLicenseList_License* _internal_add_licenses();
  public:
  const ::CMsgClientLicenseList_License& licenses(int index) const;
  ::CMsgClientLicenseList_License* add_licenses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientLicenseList_License >&
      licenses() const;

  // optional int32 eresult = 1 [default = 2];
  bool has_eresult() const;
  private:
  bool _internal_has_eresult() const;
  public:
  void clear_eresult();
  int32_t eresult() const;
  void set_eresult(int32_t value);
  private:
  int32_t _internal_eresult() const;
  void _internal_set_eresult(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientLicenseList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientLicenseList_License > licenses_;
  int32_t eresult_;
  friend struct ::TableStruct_steammessages_5fclientserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientIsLimitedAccount final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientIsLimitedAccount) */ {
 public:
  inline CMsgClientIsLimitedAccount() : CMsgClientIsLimitedAccount(nullptr) {}
  ~CMsgClientIsLimitedAccount() override;
  explicit constexpr CMsgClientIsLimitedAccount(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientIsLimitedAccount(const CMsgClientIsLimitedAccount& from);
  CMsgClientIsLimitedAccount(CMsgClientIsLimitedAccount&& from) noexcept
    : CMsgClientIsLimitedAccount() {
    *this = ::std::move(from);
  }

  inline CMsgClientIsLimitedAccount& operator=(const CMsgClientIsLimitedAccount& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientIsLimitedAccount& operator=(CMsgClientIsLimitedAccount&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientIsLimitedAccount& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientIsLimitedAccount* internal_default_instance() {
    return reinterpret_cast<const CMsgClientIsLimitedAccount*>(
               &_CMsgClientIsLimitedAccount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(CMsgClientIsLimitedAccount& a, CMsgClientIsLimitedAccount& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientIsLimitedAccount* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientIsLimitedAccount* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientIsLimitedAccount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientIsLimitedAccount>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientIsLimitedAccount& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientIsLimitedAccount& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientIsLimitedAccount* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientIsLimitedAccount";
  }
  protected:
  explicit CMsgClientIsLimitedAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBisLimitedAccountFieldNumber = 1,
    kBisCommunityBannedFieldNumber = 2,
    kBisLockedAccountFieldNumber = 3,
    kBisLimitedAccountAllowedToInviteFriendsFieldNumber = 4,
  };
  // optional bool bis_limited_account = 1;
  bool has_bis_limited_account() const;
  private:
  bool _internal_has_bis_limited_account() const;
  public:
  void clear_bis_limited_account();
  bool bis_limited_account() const;
  void set_bis_limited_account(bool value);
  private:
  bool _internal_bis_limited_account() const;
  void _internal_set_bis_limited_account(bool value);
  public:

  // optional bool bis_community_banned = 2;
  bool has_bis_community_banned() const;
  private:
  bool _internal_has_bis_community_banned() const;
  public:
  void clear_bis_community_banned();
  bool bis_community_banned() const;
  void set_bis_community_banned(bool value);
  private:
  bool _internal_bis_community_banned() const;
  void _internal_set_bis_community_banned(bool value);
  public:

  // optional bool bis_locked_account = 3;
  bool has_bis_locked_account() const;
  private:
  bool _internal_has_bis_locked_account() const;
  public:
  void clear_bis_locked_account();
  bool bis_locked_account() const;
  void set_bis_locked_account(bool value);
  private:
  bool _internal_bis_locked_account() const;
  void _internal_set_bis_locked_account(bool value);
  public:

  // optional bool bis_limited_account_allowed_to_invite_friends = 4;
  bool has_bis_limited_account_allowed_to_invite_friends() const;
  private:
  bool _internal_has_bis_limited_account_allowed_to_invite_friends() const;
  public:
  void clear_bis_limited_account_allowed_to_invite_friends();
  bool bis_limited_account_allowed_to_invite_friends() const;
  void set_bis_limited_account_allowed_to_invite_friends(bool value);
  private:
  bool _internal_bis_limited_account_allowed_to_invite_friends() const;
  void _internal_set_bis_limited_account_allowed_to_invite_friends(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientIsLimitedAccount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool bis_limited_account_;
  bool bis_community_banned_;
  bool bis_locked_account_;
  bool bis_limited_account_allowed_to_invite_friends_;
  friend struct ::TableStruct_steammessages_5fclientserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientRequestedClientStats_StatsToSend final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientRequestedClientStats.StatsToSend) */ {
 public:
  inline CMsgClientRequestedClientStats_StatsToSend() : CMsgClientRequestedClientStats_StatsToSend(nullptr) {}
  ~CMsgClientRequestedClientStats_StatsToSend() override;
  explicit constexpr CMsgClientRequestedClientStats_StatsToSend(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientRequestedClientStats_StatsToSend(const CMsgClientRequestedClientStats_StatsToSend& from);
  CMsgClientRequestedClientStats_StatsToSend(CMsgClientRequestedClientStats_StatsToSend&& from) noexcept
    : CMsgClientRequestedClientStats_StatsToSend() {
    *this = ::std::move(from);
  }

  inline CMsgClientRequestedClientStats_StatsToSend& operator=(const CMsgClientRequestedClientStats_StatsToSend& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientRequestedClientStats_StatsToSend& operator=(CMsgClientRequestedClientStats_StatsToSend&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientRequestedClientStats_StatsToSend& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientRequestedClientStats_StatsToSend* internal_default_instance() {
    return reinterpret_cast<const CMsgClientRequestedClientStats_StatsToSend*>(
               &_CMsgClientRequestedClientStats_StatsToSend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(CMsgClientRequestedClientStats_StatsToSend& a, CMsgClientRequestedClientStats_StatsToSend& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientRequestedClientStats_StatsToSend* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientRequestedClientStats_StatsToSend* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientRequestedClientStats_StatsToSend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientRequestedClientStats_StatsToSend>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientRequestedClientStats_StatsToSend& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientRequestedClientStats_StatsToSend& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientRequestedClientStats_StatsToSend* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientRequestedClientStats.StatsToSend";
  }
  protected:
  explicit CMsgClientRequestedClientStats_StatsToSend(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientStatFieldNumber = 1,
    kStatAggregateMethodFieldNumber = 2,
  };
  // optional uint32 client_stat = 1;
  bool has_client_stat() const;
  private:
  bool _internal_has_client_stat() const;
  public:
  void clear_client_stat();
  uint32_t client_stat() const;
  void set_client_stat(uint32_t value);
  private:
  uint32_t _internal_client_stat() const;
  void _internal_set_client_stat(uint32_t value);
  public:

  // optional uint32 stat_aggregate_method = 2;
  bool has_stat_aggregate_method() const;
  private:
  bool _internal_has_stat_aggregate_method() const;
  public:
  void clear_stat_aggregate_method();
  uint32_t stat_aggregate_method() const;
  void set_stat_aggregate_method(uint32_t value);
  private:
  uint32_t _internal_stat_aggregate_method() const;
  void _internal_set_stat_aggregate_method(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientRequestedClientStats.StatsToSend)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t client_stat_;
  uint32_t stat_aggregate_method_;
  friend struct ::TableStruct_steammessages_5fclientserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientRequestedClientStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientRequestedClientStats) */ {
 public:
  inline CMsgClientRequestedClientStats() : CMsgClientRequestedClientStats(nullptr) {}
  ~CMsgClientRequestedClientStats() override;
  explicit constexpr CMsgClientRequestedClientStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientRequestedClientStats(const CMsgClientRequestedClientStats& from);
  CMsgClientRequestedClientStats(CMsgClientRequestedClientStats&& from) noexcept
    : CMsgClientRequestedClientStats() {
    *this = ::std::move(from);
  }

  inline CMsgClientRequestedClientStats& operator=(const CMsgClientRequestedClientStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientRequestedClientStats& operator=(CMsgClientRequestedClientStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientRequestedClientStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientRequestedClientStats* internal_default_instance() {
    return reinterpret_cast<const CMsgClientRequestedClientStats*>(
               &_CMsgClientRequestedClientStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(CMsgClientRequestedClientStats& a, CMsgClientRequestedClientStats& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientRequestedClientStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientRequestedClientStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientRequestedClientStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientRequestedClientStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientRequestedClientStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientRequestedClientStats& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientRequestedClientStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientRequestedClientStats";
  }
  protected:
  explicit CMsgClientRequestedClientStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgClientRequestedClientStats_StatsToSend StatsToSend;

  // accessors -------------------------------------------------------

  enum : int {
    kStatsToSendFieldNumber = 1,
  };
  // repeated .CMsgClientRequestedClientStats.StatsToSend stats_to_send = 1;
  int stats_to_send_size() const;
  private:
  int _internal_stats_to_send_size() const;
  public:
  void clear_stats_to_send();
  ::CMsgClientRequestedClientStats_StatsToSend* mutable_stats_to_send(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientRequestedClientStats_StatsToSend >*
      mutable_stats_to_send();
  private:
  const ::CMsgClientRequestedClientStats_StatsToSend& _internal_stats_to_send(int index) const;
  ::CMsgClientRequestedClientStats_StatsToSend* _internal_add_stats_to_send();
  public:
  const ::CMsgClientRequestedClientStats_StatsToSend& stats_to_send(int index) const;
  ::CMsgClientRequestedClientStats_StatsToSend* add_stats_to_send();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientRequestedClientStats_StatsToSend >&
      stats_to_send() const;

  // @@protoc_insertion_point(class_scope:CMsgClientRequestedClientStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientRequestedClientStats_StatsToSend > stats_to_send_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fclientserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientStat2_StatDetail final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientStat2.StatDetail) */ {
 public:
  inline CMsgClientStat2_StatDetail() : CMsgClientStat2_StatDetail(nullptr) {}
  ~CMsgClientStat2_StatDetail() override;
  explicit constexpr CMsgClientStat2_StatDetail(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientStat2_StatDetail(const CMsgClientStat2_StatDetail& from);
  CMsgClientStat2_StatDetail(CMsgClientStat2_StatDetail&& from) noexcept
    : CMsgClientStat2_StatDetail() {
    *this = ::std::move(from);
  }

  inline CMsgClientStat2_StatDetail& operator=(const CMsgClientStat2_StatDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientStat2_StatDetail& operator=(CMsgClientStat2_StatDetail&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientStat2_StatDetail& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientStat2_StatDetail* internal_default_instance() {
    return reinterpret_cast<const CMsgClientStat2_StatDetail*>(
               &_CMsgClientStat2_StatDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(CMsgClientStat2_StatDetail& a, CMsgClientStat2_StatDetail& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientStat2_StatDetail* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientStat2_StatDetail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientStat2_StatDetail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientStat2_StatDetail>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientStat2_StatDetail& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientStat2_StatDetail& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientStat2_StatDetail* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientStat2.StatDetail";
  }
  protected:
  explicit CMsgClientStat2_StatDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLlValueFieldNumber = 2,
    kClientStatFieldNumber = 1,
    kTimeOfDayFieldNumber = 3,
    kCellIdFieldNumber = 4,
    kDepotIdFieldNumber = 5,
    kAppIdFieldNumber = 6,
  };
  // optional int64 ll_value = 2;
  bool has_ll_value() const;
  private:
  bool _internal_has_ll_value() const;
  public:
  void clear_ll_value();
  int64_t ll_value() const;
  void set_ll_value(int64_t value);
  private:
  int64_t _internal_ll_value() const;
  void _internal_set_ll_value(int64_t value);
  public:

  // optional uint32 client_stat = 1;
  bool has_client_stat() const;
  private:
  bool _internal_has_client_stat() const;
  public:
  void clear_client_stat();
  uint32_t client_stat() const;
  void set_client_stat(uint32_t value);
  private:
  uint32_t _internal_client_stat() const;
  void _internal_set_client_stat(uint32_t value);
  public:

  // optional uint32 time_of_day = 3;
  bool has_time_of_day() const;
  private:
  bool _internal_has_time_of_day() const;
  public:
  void clear_time_of_day();
  uint32_t time_of_day() const;
  void set_time_of_day(uint32_t value);
  private:
  uint32_t _internal_time_of_day() const;
  void _internal_set_time_of_day(uint32_t value);
  public:

  // optional uint32 cell_id = 4;
  bool has_cell_id() const;
  private:
  bool _internal_has_cell_id() const;
  public:
  void clear_cell_id();
  uint32_t cell_id() const;
  void set_cell_id(uint32_t value);
  private:
  uint32_t _internal_cell_id() const;
  void _internal_set_cell_id(uint32_t value);
  public:

  // optional uint32 depot_id = 5;
  bool has_depot_id() const;
  private:
  bool _internal_has_depot_id() const;
  public:
  void clear_depot_id();
  uint32_t depot_id() const;
  void set_depot_id(uint32_t value);
  private:
  uint32_t _internal_depot_id() const;
  void _internal_set_depot_id(uint32_t value);
  public:

  // optional uint32 app_id = 6;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientStat2.StatDetail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t ll_value_;
  uint32_t client_stat_;
  uint32_t time_of_day_;
  uint32_t cell_id_;
  uint32_t depot_id_;
  uint32_t app_id_;
  friend struct ::TableStruct_steammessages_5fclientserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientStat2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientStat2) */ {
 public:
  inline CMsgClientStat2() : CMsgClientStat2(nullptr) {}
  ~CMsgClientStat2() override;
  explicit constexpr CMsgClientStat2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientStat2(const CMsgClientStat2& from);
  CMsgClientStat2(CMsgClientStat2&& from) noexcept
    : CMsgClientStat2() {
    *this = ::std::move(from);
  }

  inline CMsgClientStat2& operator=(const CMsgClientStat2& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientStat2& operator=(CMsgClientStat2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientStat2& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientStat2* internal_default_instance() {
    return reinterpret_cast<const CMsgClientStat2*>(
               &_CMsgClientStat2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(CMsgClientStat2& a, CMsgClientStat2& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientStat2* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientStat2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientStat2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientStat2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientStat2& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientStat2& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientStat2* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientStat2";
  }
  protected:
  explicit CMsgClientStat2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgClientStat2_StatDetail StatDetail;

  // accessors -------------------------------------------------------

  enum : int {
    kStatDetailFieldNumber = 1,
  };
  // repeated .CMsgClientStat2.StatDetail stat_detail = 1;
  int stat_detail_size() const;
  private:
  int _internal_stat_detail_size() const;
  public:
  void clear_stat_detail();
  ::CMsgClientStat2_StatDetail* mutable_stat_detail(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientStat2_StatDetail >*
      mutable_stat_detail();
  private:
  const ::CMsgClientStat2_StatDetail& _internal_stat_detail(int index) const;
  ::CMsgClientStat2_StatDetail* _internal_add_stat_detail();
  public:
  const ::CMsgClientStat2_StatDetail& stat_detail(int index) const;
  ::CMsgClientStat2_StatDetail* add_stat_detail();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientStat2_StatDetail >&
      stat_detail() const;

  // @@protoc_insertion_point(class_scope:CMsgClientStat2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientStat2_StatDetail > stat_detail_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fclientserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientInviteToGame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientInviteToGame) */ {
 public:
  inline CMsgClientInviteToGame() : CMsgClientInviteToGame(nullptr) {}
  ~CMsgClientInviteToGame() override;
  explicit constexpr CMsgClientInviteToGame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientInviteToGame(const CMsgClientInviteToGame& from);
  CMsgClientInviteToGame(CMsgClientInviteToGame&& from) noexcept
    : CMsgClientInviteToGame() {
    *this = ::std::move(from);
  }

  inline CMsgClientInviteToGame& operator=(const CMsgClientInviteToGame& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientInviteToGame& operator=(CMsgClientInviteToGame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientInviteToGame& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientInviteToGame* internal_default_instance() {
    return reinterpret_cast<const CMsgClientInviteToGame*>(
               &_CMsgClientInviteToGame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(CMsgClientInviteToGame& a, CMsgClientInviteToGame& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientInviteToGame* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientInviteToGame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientInviteToGame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientInviteToGame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientInviteToGame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientInviteToGame& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientInviteToGame* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientInviteToGame";
  }
  protected:
  explicit CMsgClientInviteToGame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectStringFieldNumber = 3,
    kRemotePlayFieldNumber = 4,
    kSteamIdDestFieldNumber = 1,
    kSteamIdSrcFieldNumber = 2,
  };
  // optional string connect_string = 3;
  bool has_connect_string() const;
  private:
  bool _internal_has_connect_string() const;
  public:
  void clear_connect_string();
  const std::string& connect_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_connect_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_connect_string();
  PROTOBUF_NODISCARD std::string* release_connect_string();
  void set_allocated_connect_string(std::string* connect_string);
  private:
  const std::string& _internal_connect_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_connect_string(const std::string& value);
  std::string* _internal_mutable_connect_string();
  public:

  // optional string remote_play = 4;
  bool has_remote_play() const;
  private:
  bool _internal_has_remote_play() const;
  public:
  void clear_remote_play();
  const std::string& remote_play() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_remote_play(ArgT0&& arg0, ArgT... args);
  std::string* mutable_remote_play();
  PROTOBUF_NODISCARD std::string* release_remote_play();
  void set_allocated_remote_play(std::string* remote_play);
  private:
  const std::string& _internal_remote_play() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_remote_play(const std::string& value);
  std::string* _internal_mutable_remote_play();
  public:

  // optional fixed64 steam_id_dest = 1;
  bool has_steam_id_dest() const;
  private:
  bool _internal_has_steam_id_dest() const;
  public:
  void clear_steam_id_dest();
  uint64_t steam_id_dest() const;
  void set_steam_id_dest(uint64_t value);
  private:
  uint64_t _internal_steam_id_dest() const;
  void _internal_set_steam_id_dest(uint64_t value);
  public:

  // optional fixed64 steam_id_src = 2;
  bool has_steam_id_src() const;
  private:
  bool _internal_has_steam_id_src() const;
  public:
  void clear_steam_id_src();
  uint64_t steam_id_src() const;
  void set_steam_id_src(uint64_t value);
  private:
  uint64_t _internal_steam_id_src() const;
  void _internal_set_steam_id_src(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientInviteToGame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr connect_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remote_play_;
  uint64_t steam_id_dest_;
  uint64_t steam_id_src_;
  friend struct ::TableStruct_steammessages_5fclientserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientChatInvite final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientChatInvite) */ {
 public:
  inline CMsgClientChatInvite() : CMsgClientChatInvite(nullptr) {}
  ~CMsgClientChatInvite() override;
  explicit constexpr CMsgClientChatInvite(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientChatInvite(const CMsgClientChatInvite& from);
  CMsgClientChatInvite(CMsgClientChatInvite&& from) noexcept
    : CMsgClientChatInvite() {
    *this = ::std::move(from);
  }

  inline CMsgClientChatInvite& operator=(const CMsgClientChatInvite& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientChatInvite& operator=(CMsgClientChatInvite&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientChatInvite& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientChatInvite* internal_default_instance() {
    return reinterpret_cast<const CMsgClientChatInvite*>(
               &_CMsgClientChatInvite_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(CMsgClientChatInvite& a, CMsgClientChatInvite& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientChatInvite* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientChatInvite* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientChatInvite* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientChatInvite>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientChatInvite& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientChatInvite& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientChatInvite* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientChatInvite";
  }
  protected:
  explicit CMsgClientChatInvite(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatNameFieldNumber = 6,
    kSteamIdInvitedFieldNumber = 1,
    kSteamIdChatFieldNumber = 2,
    kSteamIdPatronFieldNumber = 3,
    kSteamIdFriendChatFieldNumber = 5,
    kGameIdFieldNumber = 7,
    kChatroomTypeFieldNumber = 4,
  };
  // optional string chat_name = 6;
  bool has_chat_name() const;
  private:
  bool _internal_has_chat_name() const;
  public:
  void clear_chat_name();
  const std::string& chat_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chat_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chat_name();
  PROTOBUF_NODISCARD std::string* release_chat_name();
  void set_allocated_chat_name(std::string* chat_name);
  private:
  const std::string& _internal_chat_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chat_name(const std::string& value);
  std::string* _internal_mutable_chat_name();
  public:

  // optional fixed64 steam_id_invited = 1;
  bool has_steam_id_invited() const;
  private:
  bool _internal_has_steam_id_invited() const;
  public:
  void clear_steam_id_invited();
  uint64_t steam_id_invited() const;
  void set_steam_id_invited(uint64_t value);
  private:
  uint64_t _internal_steam_id_invited() const;
  void _internal_set_steam_id_invited(uint64_t value);
  public:

  // optional fixed64 steam_id_chat = 2;
  bool has_steam_id_chat() const;
  private:
  bool _internal_has_steam_id_chat() const;
  public:
  void clear_steam_id_chat();
  uint64_t steam_id_chat() const;
  void set_steam_id_chat(uint64_t value);
  private:
  uint64_t _internal_steam_id_chat() const;
  void _internal_set_steam_id_chat(uint64_t value);
  public:

  // optional fixed64 steam_id_patron = 3;
  bool has_steam_id_patron() const;
  private:
  bool _internal_has_steam_id_patron() const;
  public:
  void clear_steam_id_patron();
  uint64_t steam_id_patron() const;
  void set_steam_id_patron(uint64_t value);
  private:
  uint64_t _internal_steam_id_patron() const;
  void _internal_set_steam_id_patron(uint64_t value);
  public:

  // optional fixed64 steam_id_friend_chat = 5;
  bool has_steam_id_friend_chat() const;
  private:
  bool _internal_has_steam_id_friend_chat() const;
  public:
  void clear_steam_id_friend_chat();
  uint64_t steam_id_friend_chat() const;
  void set_steam_id_friend_chat(uint64_t value);
  private:
  uint64_t _internal_steam_id_friend_chat() const;
  void _internal_set_steam_id_friend_chat(uint64_t value);
  public:

  // optional fixed64 game_id = 7;
  bool has_game_id() const;
  private:
  bool _internal_has_game_id() const;
  public:
  void clear_game_id();
  uint64_t game_id() const;
  void set_game_id(uint64_t value);
  private:
  uint64_t _internal_game_id() const;
  void _internal_set_game_id(uint64_t value);
  public:

  // optional int32 chatroom_type = 4;
  bool has_chatroom_type() const;
  private:
  bool _internal_has_chatroom_type() const;
  public:
  void clear_chatroom_type();
  int32_t chatroom_type() const;
  void set_chatroom_type(int32_t value);
  private:
  int32_t _internal_chatroom_type() const;
  void _internal_set_chatroom_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientChatInvite)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chat_name_;
  uint64_t steam_id_invited_;
  uint64_t steam_id_chat_;
  uint64_t steam_id_patron_;
  uint64_t steam_id_friend_chat_;
  uint64_t game_id_;
  int32_t chatroom_type_;
  friend struct ::TableStruct_steammessages_5fclientserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientConnectionStats_Stats_Logon final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientConnectionStats.Stats_Logon) */ {
 public:
  inline CMsgClientConnectionStats_Stats_Logon() : CMsgClientConnectionStats_Stats_Logon(nullptr) {}
  ~CMsgClientConnectionStats_Stats_Logon() override;
  explicit constexpr CMsgClientConnectionStats_Stats_Logon(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientConnectionStats_Stats_Logon(const CMsgClientConnectionStats_Stats_Logon& from);
  CMsgClientConnectionStats_Stats_Logon(CMsgClientConnectionStats_Stats_Logon&& from) noexcept
    : CMsgClientConnectionStats_Stats_Logon() {
    *this = ::std::move(from);
  }

  inline CMsgClientConnectionStats_Stats_Logon& operator=(const CMsgClientConnectionStats_Stats_Logon& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientConnectionStats_Stats_Logon& operator=(CMsgClientConnectionStats_Stats_Logon&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientConnectionStats_Stats_Logon& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientConnectionStats_Stats_Logon* internal_default_instance() {
    return reinterpret_cast<const CMsgClientConnectionStats_Stats_Logon*>(
               &_CMsgClientConnectionStats_Stats_Logon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(CMsgClientConnectionStats_Stats_Logon& a, CMsgClientConnectionStats_Stats_Logon& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientConnectionStats_Stats_Logon* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientConnectionStats_Stats_Logon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientConnectionStats_Stats_Logon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientConnectionStats_Stats_Logon>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientConnectionStats_Stats_Logon& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientConnectionStats_Stats_Logon& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientConnectionStats_Stats_Logon* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientConnectionStats.Stats_Logon";
  }
  protected:
  explicit CMsgClientConnectionStats_Stats_Logon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectAttemptsFieldNumber = 1,
    kConnectSuccessesFieldNumber = 2,
    kConnectFailuresFieldNumber = 3,
    kConnectionsDroppedFieldNumber = 4,
    kSecondsRunningFieldNumber = 5,
    kMsecTologonthistimeFieldNumber = 6,
    kCountBadCmsFieldNumber = 7,
    kNoUdpConnectivityFieldNumber = 8,
    kNoTcpConnectivityFieldNumber = 9,
    kNoWebsocket443ConnectivityFieldNumber = 10,
    kNoWebsocketNon443ConnectivityFieldNumber = 11,
  };
  // optional int32 connect_attempts = 1;
  bool has_connect_attempts() const;
  private:
  bool _internal_has_connect_attempts() const;
  public:
  void clear_connect_attempts();
  int32_t connect_attempts() const;
  void set_connect_attempts(int32_t value);
  private:
  int32_t _internal_connect_attempts() const;
  void _internal_set_connect_attempts(int32_t value);
  public:

  // optional int32 connect_successes = 2;
  bool has_connect_successes() const;
  private:
  bool _internal_has_connect_successes() const;
  public:
  void clear_connect_successes();
  int32_t connect_successes() const;
  void set_connect_successes(int32_t value);
  private:
  int32_t _internal_connect_successes() const;
  void _internal_set_connect_successes(int32_t value);
  public:

  // optional int32 connect_failures = 3;
  bool has_connect_failures() const;
  private:
  bool _internal_has_connect_failures() const;
  public:
  void clear_connect_failures();
  int32_t connect_failures() const;
  void set_connect_failures(int32_t value);
  private:
  int32_t _internal_connect_failures() const;
  void _internal_set_connect_failures(int32_t value);
  public:

  // optional int32 connections_dropped = 4;
  bool has_connections_dropped() const;
  private:
  bool _internal_has_connections_dropped() const;
  public:
  void clear_connections_dropped();
  int32_t connections_dropped() const;
  void set_connections_dropped(int32_t value);
  private:
  int32_t _internal_connections_dropped() const;
  void _internal_set_connections_dropped(int32_t value);
  public:

  // optional uint32 seconds_running = 5;
  bool has_seconds_running() const;
  private:
  bool _internal_has_seconds_running() const;
  public:
  void clear_seconds_running();
  uint32_t seconds_running() const;
  void set_seconds_running(uint32_t value);
  private:
  uint32_t _internal_seconds_running() const;
  void _internal_set_seconds_running(uint32_t value);
  public:

  // optional uint32 msec_tologonthistime = 6;
  bool has_msec_tologonthistime() const;
  private:
  bool _internal_has_msec_tologonthistime() const;
  public:
  void clear_msec_tologonthistime();
  uint32_t msec_tologonthistime() const;
  void set_msec_tologonthistime(uint32_t value);
  private:
  uint32_t _internal_msec_tologonthistime() const;
  void _internal_set_msec_tologonthistime(uint32_t value);
  public:

  // optional uint32 count_bad_cms = 7;
  bool has_count_bad_cms() const;
  private:
  bool _internal_has_count_bad_cms() const;
  public:
  void clear_count_bad_cms();
  uint32_t count_bad_cms() const;
  void set_count_bad_cms(uint32_t value);
  private:
  uint32_t _internal_count_bad_cms() const;
  void _internal_set_count_bad_cms(uint32_t value);
  public:

  // optional bool no_udp_connectivity = 8;
  bool has_no_udp_connectivity() const;
  private:
  bool _internal_has_no_udp_connectivity() const;
  public:
  void clear_no_udp_connectivity();
  bool no_udp_connectivity() const;
  void set_no_udp_connectivity(bool value);
  private:
  bool _internal_no_udp_connectivity() const;
  void _internal_set_no_udp_connectivity(bool value);
  public:

  // optional bool no_tcp_connectivity = 9;
  bool has_no_tcp_connectivity() const;
  private:
  bool _internal_has_no_tcp_connectivity() const;
  public:
  void clear_no_tcp_connectivity();
  bool no_tcp_connectivity() const;
  void set_no_tcp_connectivity(bool value);
  private:
  bool _internal_no_tcp_connectivity() const;
  void _internal_set_no_tcp_connectivity(bool value);
  public:

  // optional bool no_websocket_443_connectivity = 10;
  bool has_no_websocket_443_connectivity() const;
  private:
  bool _internal_has_no_websocket_443_connectivity() const;
  public:
  void clear_no_websocket_443_connectivity();
  bool no_websocket_443_connectivity() const;
  void set_no_websocket_443_connectivity(bool value);
  private:
  bool _internal_no_websocket_443_connectivity() const;
  void _internal_set_no_websocket_443_connectivity(bool value);
  public:

  // optional bool no_websocket_non_443_connectivity = 11;
  bool has_no_websocket_non_443_connectivity() const;
  private:
  bool _internal_has_no_websocket_non_443_connectivity() const;
  public:
  void clear_no_websocket_non_443_connectivity();
  bool no_websocket_non_443_connectivity() const;
  void set_no_websocket_non_443_connectivity(bool value);
  private:
  bool _internal_no_websocket_non_443_connectivity() const;
  void _internal_set_no_websocket_non_443_connectivity(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientConnectionStats.Stats_Logon)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t connect_attempts_;
  int32_t connect_successes_;
  int32_t connect_failures_;
  int32_t connections_dropped_;
  uint32_t seconds_running_;
  uint32_t msec_tologonthistime_;
  uint32_t count_bad_cms_;
  bool no_udp_connectivity_;
  bool no_tcp_connectivity_;
  bool no_websocket_443_connectivity_;
  bool no_websocket_non_443_connectivity_;
  friend struct ::TableStruct_steammessages_5fclientserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientConnectionStats_Stats_UDP final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientConnectionStats.Stats_UDP) */ {
 public:
  inline CMsgClientConnectionStats_Stats_UDP() : CMsgClientConnectionStats_Stats_UDP(nullptr) {}
  ~CMsgClientConnectionStats_Stats_UDP() override;
  explicit constexpr CMsgClientConnectionStats_Stats_UDP(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientConnectionStats_Stats_UDP(const CMsgClientConnectionStats_Stats_UDP& from);
  CMsgClientConnectionStats_Stats_UDP(CMsgClientConnectionStats_Stats_UDP&& from) noexcept
    : CMsgClientConnectionStats_Stats_UDP() {
    *this = ::std::move(from);
  }

  inline CMsgClientConnectionStats_Stats_UDP& operator=(const CMsgClientConnectionStats_Stats_UDP& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientConnectionStats_Stats_UDP& operator=(CMsgClientConnectionStats_Stats_UDP&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientConnectionStats_Stats_UDP& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientConnectionStats_Stats_UDP* internal_default_instance() {
    return reinterpret_cast<const CMsgClientConnectionStats_Stats_UDP*>(
               &_CMsgClientConnectionStats_Stats_UDP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(CMsgClientConnectionStats_Stats_UDP& a, CMsgClientConnectionStats_Stats_UDP& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientConnectionStats_Stats_UDP* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientConnectionStats_Stats_UDP* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientConnectionStats_Stats_UDP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientConnectionStats_Stats_UDP>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientConnectionStats_Stats_UDP& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientConnectionStats_Stats_UDP& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientConnectionStats_Stats_UDP* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientConnectionStats.Stats_UDP";
  }
  protected:
  explicit CMsgClientConnectionStats_Stats_UDP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPktsSentFieldNumber = 1,
    kBytesSentFieldNumber = 2,
    kPktsRecvFieldNumber = 3,
    kPktsProcessedFieldNumber = 4,
    kBytesRecvFieldNumber = 5,
  };
  // optional uint64 pkts_sent = 1;
  bool has_pkts_sent() const;
  private:
  bool _internal_has_pkts_sent() const;
  public:
  void clear_pkts_sent();
  uint64_t pkts_sent() const;
  void set_pkts_sent(uint64_t value);
  private:
  uint64_t _internal_pkts_sent() const;
  void _internal_set_pkts_sent(uint64_t value);
  public:

  // optional uint64 bytes_sent = 2;
  bool has_bytes_sent() const;
  private:
  bool _internal_has_bytes_sent() const;
  public:
  void clear_bytes_sent();
  uint64_t bytes_sent() const;
  void set_bytes_sent(uint64_t value);
  private:
  uint64_t _internal_bytes_sent() const;
  void _internal_set_bytes_sent(uint64_t value);
  public:

  // optional uint64 pkts_recv = 3;
  bool has_pkts_recv() const;
  private:
  bool _internal_has_pkts_recv() const;
  public:
  void clear_pkts_recv();
  uint64_t pkts_recv() const;
  void set_pkts_recv(uint64_t value);
  private:
  uint64_t _internal_pkts_recv() const;
  void _internal_set_pkts_recv(uint64_t value);
  public:

  // optional uint64 pkts_processed = 4;
  bool has_pkts_processed() const;
  private:
  bool _internal_has_pkts_processed() const;
  public:
  void clear_pkts_processed();
  uint64_t pkts_processed() const;
  void set_pkts_processed(uint64_t value);
  private:
  uint64_t _internal_pkts_processed() const;
  void _internal_set_pkts_processed(uint64_t value);
  public:

  // optional uint64 bytes_recv = 5;
  bool has_bytes_recv() const;
  private:
  bool _internal_has_bytes_recv() const;
  public:
  void clear_bytes_recv();
  uint64_t bytes_recv() const;
  void set_bytes_recv(uint64_t value);
  private:
  uint64_t _internal_bytes_recv() const;
  void _internal_set_bytes_recv(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientConnectionStats.Stats_UDP)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t pkts_sent_;
  uint64_t bytes_sent_;
  uint64_t pkts_recv_;
  uint64_t pkts_processed_;
  uint64_t bytes_recv_;
  friend struct ::TableStruct_steammessages_5fclientserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientConnectionStats_Stats_VConn final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientConnectionStats.Stats_VConn) */ {
 public:
  inline CMsgClientConnectionStats_Stats_VConn() : CMsgClientConnectionStats_Stats_VConn(nullptr) {}
  ~CMsgClientConnectionStats_Stats_VConn() override;
  explicit constexpr CMsgClientConnectionStats_Stats_VConn(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientConnectionStats_Stats_VConn(const CMsgClientConnectionStats_Stats_VConn& from);
  CMsgClientConnectionStats_Stats_VConn(CMsgClientConnectionStats_Stats_VConn&& from) noexcept
    : CMsgClientConnectionStats_Stats_VConn() {
    *this = ::std::move(from);
  }

  inline CMsgClientConnectionStats_Stats_VConn& operator=(const CMsgClientConnectionStats_Stats_VConn& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientConnectionStats_Stats_VConn& operator=(CMsgClientConnectionStats_Stats_VConn&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientConnectionStats_Stats_VConn& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientConnectionStats_Stats_VConn* internal_default_instance() {
    return reinterpret_cast<const CMsgClientConnectionStats_Stats_VConn*>(
               &_CMsgClientConnectionStats_Stats_VConn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(CMsgClientConnectionStats_Stats_VConn& a, CMsgClientConnectionStats_Stats_VConn& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientConnectionStats_Stats_VConn* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientConnectionStats_Stats_VConn* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientConnectionStats_Stats_VConn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientConnectionStats_Stats_VConn>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientConnectionStats_Stats_VConn& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientConnectionStats_Stats_VConn& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientConnectionStats_Stats_VConn* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientConnectionStats.Stats_VConn";
  }
  protected:
  explicit CMsgClientConnectionStats_Stats_VConn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatsUdpFieldNumber = 3,
    kConnectionsUdpFieldNumber = 1,
    kConnectionsTcpFieldNumber = 2,
    kPktsAbandonedFieldNumber = 4,
    kConnReqReceivedFieldNumber = 5,
    kPktsResentFieldNumber = 6,
    kMsgsSentFieldNumber = 7,
    kMsgsSentFailedFieldNumber = 8,
    kMsgsRecvFieldNumber = 9,
    kDatagramsSentFieldNumber = 10,
    kDatagramsRecvFieldNumber = 11,
    kBadPktsRecvFieldNumber = 12,
    kUnknownConnPktsRecvFieldNumber = 13,
    kMissedPktsRecvFieldNumber = 14,
    kDupPktsRecvFieldNumber = 15,
    kFailedConnectChallengesFieldNumber = 16,
    kMicroSecAvgLatencyFieldNumber = 17,
    kMicroSecMinLatencyFieldNumber = 18,
    kMicroSecMaxLatencyFieldNumber = 19,
  };
  // optional .CMsgClientConnectionStats.Stats_UDP stats_udp = 3;
  bool has_stats_udp() const;
  private:
  bool _internal_has_stats_udp() const;
  public:
  void clear_stats_udp();
  const ::CMsgClientConnectionStats_Stats_UDP& stats_udp() const;
  PROTOBUF_NODISCARD ::CMsgClientConnectionStats_Stats_UDP* release_stats_udp();
  ::CMsgClientConnectionStats_Stats_UDP* mutable_stats_udp();
  void set_allocated_stats_udp(::CMsgClientConnectionStats_Stats_UDP* stats_udp);
  private:
  const ::CMsgClientConnectionStats_Stats_UDP& _internal_stats_udp() const;
  ::CMsgClientConnectionStats_Stats_UDP* _internal_mutable_stats_udp();
  public:
  void unsafe_arena_set_allocated_stats_udp(
      ::CMsgClientConnectionStats_Stats_UDP* stats_udp);
  ::CMsgClientConnectionStats_Stats_UDP* unsafe_arena_release_stats_udp();

  // optional uint32 connections_udp = 1;
  bool has_connections_udp() const;
  private:
  bool _internal_has_connections_udp() const;
  public:
  void clear_connections_udp();
  uint32_t connections_udp() const;
  void set_connections_udp(uint32_t value);
  private:
  uint32_t _internal_connections_udp() const;
  void _internal_set_connections_udp(uint32_t value);
  public:

  // optional uint32 connections_tcp = 2;
  bool has_connections_tcp() const;
  private:
  bool _internal_has_connections_tcp() const;
  public:
  void clear_connections_tcp();
  uint32_t connections_tcp() const;
  void set_connections_tcp(uint32_t value);
  private:
  uint32_t _internal_connections_tcp() const;
  void _internal_set_connections_tcp(uint32_t value);
  public:

  // optional uint64 pkts_abandoned = 4;
  bool has_pkts_abandoned() const;
  private:
  bool _internal_has_pkts_abandoned() const;
  public:
  void clear_pkts_abandoned();
  uint64_t pkts_abandoned() const;
  void set_pkts_abandoned(uint64_t value);
  private:
  uint64_t _internal_pkts_abandoned() const;
  void _internal_set_pkts_abandoned(uint64_t value);
  public:

  // optional uint64 conn_req_received = 5;
  bool has_conn_req_received() const;
  private:
  bool _internal_has_conn_req_received() const;
  public:
  void clear_conn_req_received();
  uint64_t conn_req_received() const;
  void set_conn_req_received(uint64_t value);
  private:
  uint64_t _internal_conn_req_received() const;
  void _internal_set_conn_req_received(uint64_t value);
  public:

  // optional uint64 pkts_resent = 6;
  bool has_pkts_resent() const;
  private:
  bool _internal_has_pkts_resent() const;
  public:
  void clear_pkts_resent();
  uint64_t pkts_resent() const;
  void set_pkts_resent(uint64_t value);
  private:
  uint64_t _internal_pkts_resent() const;
  void _internal_set_pkts_resent(uint64_t value);
  public:

  // optional uint64 msgs_sent = 7;
  bool has_msgs_sent() const;
  private:
  bool _internal_has_msgs_sent() const;
  public:
  void clear_msgs_sent();
  uint64_t msgs_sent() const;
  void set_msgs_sent(uint64_t value);
  private:
  uint64_t _internal_msgs_sent() const;
  void _internal_set_msgs_sent(uint64_t value);
  public:

  // optional uint64 msgs_sent_failed = 8;
  bool has_msgs_sent_failed() const;
  private:
  bool _internal_has_msgs_sent_failed() const;
  public:
  void clear_msgs_sent_failed();
  uint64_t msgs_sent_failed() const;
  void set_msgs_sent_failed(uint64_t value);
  private:
  uint64_t _internal_msgs_sent_failed() const;
  void _internal_set_msgs_sent_failed(uint64_t value);
  public:

  // optional uint64 msgs_recv = 9;
  bool has_msgs_recv() const;
  private:
  bool _internal_has_msgs_recv() const;
  public:
  void clear_msgs_recv();
  uint64_t msgs_recv() const;
  void set_msgs_recv(uint64_t value);
  private:
  uint64_t _internal_msgs_recv() const;
  void _internal_set_msgs_recv(uint64_t value);
  public:

  // optional uint64 datagrams_sent = 10;
  bool has_datagrams_sent() const;
  private:
  bool _internal_has_datagrams_sent() const;
  public:
  void clear_datagrams_sent();
  uint64_t datagrams_sent() const;
  void set_datagrams_sent(uint64_t value);
  private:
  uint64_t _internal_datagrams_sent() const;
  void _internal_set_datagrams_sent(uint64_t value);
  public:

  // optional uint64 datagrams_recv = 11;
  bool has_datagrams_recv() const;
  private:
  bool _internal_has_datagrams_recv() const;
  public:
  void clear_datagrams_recv();
  uint64_t datagrams_recv() const;
  void set_datagrams_recv(uint64_t value);
  private:
  uint64_t _internal_datagrams_recv() const;
  void _internal_set_datagrams_recv(uint64_t value);
  public:

  // optional uint64 bad_pkts_recv = 12;
  bool has_bad_pkts_recv() const;
  private:
  bool _internal_has_bad_pkts_recv() const;
  public:
  void clear_bad_pkts_recv();
  uint64_t bad_pkts_recv() const;
  void set_bad_pkts_recv(uint64_t value);
  private:
  uint64_t _internal_bad_pkts_recv() const;
  void _internal_set_bad_pkts_recv(uint64_t value);
  public:

  // optional uint64 unknown_conn_pkts_recv = 13;
  bool has_unknown_conn_pkts_recv() const;
  private:
  bool _internal_has_unknown_conn_pkts_recv() const;
  public:
  void clear_unknown_conn_pkts_recv();
  uint64_t unknown_conn_pkts_recv() const;
  void set_unknown_conn_pkts_recv(uint64_t value);
  private:
  uint64_t _internal_unknown_conn_pkts_recv() const;
  void _internal_set_unknown_conn_pkts_recv(uint64_t value);
  public:

  // optional uint64 missed_pkts_recv = 14;
  bool has_missed_pkts_recv() const;
  private:
  bool _internal_has_missed_pkts_recv() const;
  public:
  void clear_missed_pkts_recv();
  uint64_t missed_pkts_recv() const;
  void set_missed_pkts_recv(uint64_t value);
  private:
  uint64_t _internal_missed_pkts_recv() const;
  void _internal_set_missed_pkts_recv(uint64_t value);
  public:

  // optional uint64 dup_pkts_recv = 15;
  bool has_dup_pkts_recv() const;
  private:
  bool _internal_has_dup_pkts_recv() const;
  public:
  void clear_dup_pkts_recv();
  uint64_t dup_pkts_recv() const;
  void set_dup_pkts_recv(uint64_t value);
  private:
  uint64_t _internal_dup_pkts_recv() const;
  void _internal_set_dup_pkts_recv(uint64_t value);
  public:

  // optional uint64 failed_connect_challenges = 16;
  bool has_failed_connect_challenges() const;
  private:
  bool _internal_has_failed_connect_challenges() const;
  public:
  void clear_failed_connect_challenges();
  uint64_t failed_connect_challenges() const;
  void set_failed_connect_challenges(uint64_t value);
  private:
  uint64_t _internal_failed_connect_challenges() const;
  void _internal_set_failed_connect_challenges(uint64_t value);
  public:

  // optional uint32 micro_sec_avg_latency = 17;
  bool has_micro_sec_avg_latency() const;
  private:
  bool _internal_has_micro_sec_avg_latency() const;
  public:
  void clear_micro_sec_avg_latency();
  uint32_t micro_sec_avg_latency() const;
  void set_micro_sec_avg_latency(uint32_t value);
  private:
  uint32_t _internal_micro_sec_avg_latency() const;
  void _internal_set_micro_sec_avg_latency(uint32_t value);
  public:

  // optional uint32 micro_sec_min_latency = 18;
  bool has_micro_sec_min_latency() const;
  private:
  bool _internal_has_micro_sec_min_latency() const;
  public:
  void clear_micro_sec_min_latency();
  uint32_t micro_sec_min_latency() const;
  void set_micro_sec_min_latency(uint32_t value);
  private:
  uint32_t _internal_micro_sec_min_latency() const;
  void _internal_set_micro_sec_min_latency(uint32_t value);
  public:

  // optional uint32 micro_sec_max_latency = 19;
  bool has_micro_sec_max_latency() const;
  private:
  bool _internal_has_micro_sec_max_latency() const;
  public:
  void clear_micro_sec_max_latency();
  uint32_t micro_sec_max_latency() const;
  void set_micro_sec_max_latency(uint32_t value);
  private:
  uint32_t _internal_micro_sec_max_latency() const;
  void _internal_set_micro_sec_max_latency(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientConnectionStats.Stats_VConn)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CMsgClientConnectionStats_Stats_UDP* stats_udp_;
  uint32_t connections_udp_;
  uint32_t connections_tcp_;
  uint64_t pkts_abandoned_;
  uint64_t conn_req_received_;
  uint64_t pkts_resent_;
  uint64_t msgs_sent_;
  uint64_t msgs_sent_failed_;
  uint64_t msgs_recv_;
  uint64_t datagrams_sent_;
  uint64_t datagrams_recv_;
  uint64_t bad_pkts_recv_;
  uint64_t unknown_conn_pkts_recv_;
  uint64_t missed_pkts_recv_;
  uint64_t dup_pkts_recv_;
  uint64_t failed_connect_challenges_;
  uint32_t micro_sec_avg_latency_;
  uint32_t micro_sec_min_latency_;
  uint32_t micro_sec_max_latency_;
  friend struct ::TableStruct_steammessages_5fclientserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientConnectionStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientConnectionStats) */ {
 public:
  inline CMsgClientConnectionStats() : CMsgClientConnectionStats(nullptr) {}
  ~CMsgClientConnectionStats() override;
  explicit constexpr CMsgClientConnectionStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientConnectionStats(const CMsgClientConnectionStats& from);
  CMsgClientConnectionStats(CMsgClientConnectionStats&& from) noexcept
    : CMsgClientConnectionStats() {
    *this = ::std::move(from);
  }

  inline CMsgClientConnectionStats& operator=(const CMsgClientConnectionStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientConnectionStats& operator=(CMsgClientConnectionStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientConnectionStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientConnectionStats* internal_default_instance() {
    return reinterpret_cast<const CMsgClientConnectionStats*>(
               &_CMsgClientConnectionStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(CMsgClientConnectionStats& a, CMsgClientConnectionStats& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientConnectionStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientConnectionStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientConnectionStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientConnectionStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientConnectionStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientConnectionStats& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientConnectionStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientConnectionStats";
  }
  protected:
  explicit CMsgClientConnectionStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgClientConnectionStats_Stats_Logon Stats_Logon;
  typedef CMsgClientConnectionStats_Stats_UDP Stats_UDP;
  typedef CMsgClientConnectionStats_Stats_VConn Stats_VConn;

  // accessors -------------------------------------------------------

  enum : int {
    kStatsLogonFieldNumber = 1,
    kStatsVconnFieldNumber = 2,
  };
  // optional .CMsgClientConnectionStats.Stats_Logon stats_logon = 1;
  bool has_stats_logon() const;
  private:
  bool _internal_has_stats_logon() const;
  public:
  void clear_stats_logon();
  const ::CMsgClientConnectionStats_Stats_Logon& stats_logon() const;
  PROTOBUF_NODISCARD ::CMsgClientConnectionStats_Stats_Logon* release_stats_logon();
  ::CMsgClientConnectionStats_Stats_Logon* mutable_stats_logon();
  void set_allocated_stats_logon(::CMsgClientConnectionStats_Stats_Logon* stats_logon);
  private:
  const ::CMsgClientConnectionStats_Stats_Logon& _internal_stats_logon() const;
  ::CMsgClientConnectionStats_Stats_Logon* _internal_mutable_stats_logon();
  public:
  void unsafe_arena_set_allocated_stats_logon(
      ::CMsgClientConnectionStats_Stats_Logon* stats_logon);
  ::CMsgClientConnectionStats_Stats_Logon* unsafe_arena_release_stats_logon();

  // optional .CMsgClientConnectionStats.Stats_VConn stats_vconn = 2;
  bool has_stats_vconn() const;
  private:
  bool _internal_has_stats_vconn() const;
  public:
  void clear_stats_vconn();
  const ::CMsgClientConnectionStats_Stats_VConn& stats_vconn() const;
  PROTOBUF_NODISCARD ::CMsgClientConnectionStats_Stats_VConn* release_stats_vconn();
  ::CMsgClientConnectionStats_Stats_VConn* mutable_stats_vconn();
  void set_allocated_stats_vconn(::CMsgClientConnectionStats_Stats_VConn* stats_vconn);
  private:
  const ::CMsgClientConnectionStats_Stats_VConn& _internal_stats_vconn() const;
  ::CMsgClientConnectionStats_Stats_VConn* _internal_mutable_stats_vconn();
  public:
  void unsafe_arena_set_allocated_stats_vconn(
      ::CMsgClientConnectionStats_Stats_VConn* stats_vconn);
  ::CMsgClientConnectionStats_Stats_VConn* unsafe_arena_release_stats_vconn();

  // @@protoc_insertion_point(class_scope:CMsgClientConnectionStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CMsgClientConnectionStats_Stats_Logon* stats_logon_;
  ::CMsgClientConnectionStats_Stats_VConn* stats_vconn_;
  friend struct ::TableStruct_steammessages_5fclientserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientServersAvailable_Server_Types_Available final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientServersAvailable.Server_Types_Available) */ {
 public:
  inline CMsgClientServersAvailable_Server_Types_Available() : CMsgClientServersAvailable_Server_Types_Available(nullptr) {}
  ~CMsgClientServersAvailable_Server_Types_Available() override;
  explicit constexpr CMsgClientServersAvailable_Server_Types_Available(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientServersAvailable_Server_Types_Available(const CMsgClientServersAvailable_Server_Types_Available& from);
  CMsgClientServersAvailable_Server_Types_Available(CMsgClientServersAvailable_Server_Types_Available&& from) noexcept
    : CMsgClientServersAvailable_Server_Types_Available() {
    *this = ::std::move(from);
  }

  inline CMsgClientServersAvailable_Server_Types_Available& operator=(const CMsgClientServersAvailable_Server_Types_Available& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientServersAvailable_Server_Types_Available& operator=(CMsgClientServersAvailable_Server_Types_Available&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientServersAvailable_Server_Types_Available& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientServersAvailable_Server_Types_Available* internal_default_instance() {
    return reinterpret_cast<const CMsgClientServersAvailable_Server_Types_Available*>(
               &_CMsgClientServersAvailable_Server_Types_Available_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(CMsgClientServersAvailable_Server_Types_Available& a, CMsgClientServersAvailable_Server_Types_Available& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientServersAvailable_Server_Types_Available* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientServersAvailable_Server_Types_Available* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientServersAvailable_Server_Types_Available* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientServersAvailable_Server_Types_Available>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientServersAvailable_Server_Types_Available& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientServersAvailable_Server_Types_Available& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientServersAvailable_Server_Types_Available* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientServersAvailable.Server_Types_Available";
  }
  protected:
  explicit CMsgClientServersAvailable_Server_Types_Available(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerFieldNumber = 1,
    kChangedFieldNumber = 2,
  };
  // optional uint32 server = 1;
  bool has_server() const;
  private:
  bool _internal_has_server() const;
  public:
  void clear_server();
  uint32_t server() const;
  void set_server(uint32_t value);
  private:
  uint32_t _internal_server() const;
  void _internal_set_server(uint32_t value);
  public:

  // optional bool changed = 2;
  bool has_changed() const;
  private:
  bool _internal_has_changed() const;
  public:
  void clear_changed();
  bool changed() const;
  void set_changed(bool value);
  private:
  bool _internal_changed() const;
  void _internal_set_changed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientServersAvailable.Server_Types_Available)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t server_;
  bool changed_;
  friend struct ::TableStruct_steammessages_5fclientserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientServersAvailable final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientServersAvailable) */ {
 public:
  inline CMsgClientServersAvailable() : CMsgClientServersAvailable(nullptr) {}
  ~CMsgClientServersAvailable() override;
  explicit constexpr CMsgClientServersAvailable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientServersAvailable(const CMsgClientServersAvailable& from);
  CMsgClientServersAvailable(CMsgClientServersAvailable&& from) noexcept
    : CMsgClientServersAvailable() {
    *this = ::std::move(from);
  }

  inline CMsgClientServersAvailable& operator=(const CMsgClientServersAvailable& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientServersAvailable& operator=(CMsgClientServersAvailable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientServersAvailable& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientServersAvailable* internal_default_instance() {
    return reinterpret_cast<const CMsgClientServersAvailable*>(
               &_CMsgClientServersAvailable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(CMsgClientServersAvailable& a, CMsgClientServersAvailable& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientServersAvailable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientServersAvailable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientServersAvailable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientServersAvailable>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientServersAvailable& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientServersAvailable& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientServersAvailable* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientServersAvailable";
  }
  protected:
  explicit CMsgClientServersAvailable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgClientServersAvailable_Server_Types_Available Server_Types_Available;

  // accessors -------------------------------------------------------

  enum : int {
    kServerTypesAvailableFieldNumber = 1,
    kServerTypeForAuthServicesFieldNumber = 2,
  };
  // repeated .CMsgClientServersAvailable.Server_Types_Available server_types_available = 1;
  int server_types_available_size() const;
  private:
  int _internal_server_types_available_size() const;
  public:
  void clear_server_types_available();
  ::CMsgClientServersAvailable_Server_Types_Available* mutable_server_types_available(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientServersAvailable_Server_Types_Available >*
      mutable_server_types_available();
  private:
  const ::CMsgClientServersAvailable_Server_Types_Available& _internal_server_types_available(int index) const;
  ::CMsgClientServersAvailable_Server_Types_Available* _internal_add_server_types_available();
  public:
  const ::CMsgClientServersAvailable_Server_Types_Available& server_types_available(int index) const;
  ::CMsgClientServersAvailable_Server_Types_Available* add_server_types_available();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientServersAvailable_Server_Types_Available >&
      server_types_available() const;

  // optional uint32 server_type_for_auth_services = 2;
  bool has_server_type_for_auth_services() const;
  private:
  bool _internal_has_server_type_for_auth_services() const;
  public:
  void clear_server_type_for_auth_services();
  uint32_t server_type_for_auth_services() const;
  void set_server_type_for_auth_services(uint32_t value);
  private:
  uint32_t _internal_server_type_for_auth_services() const;
  void _internal_set_server_type_for_auth_services(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientServersAvailable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientServersAvailable_Server_Types_Available > server_types_available_;
  uint32_t server_type_for_auth_services_;
  friend struct ::TableStruct_steammessages_5fclientserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientReportOverlayDetourFailure final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientReportOverlayDetourFailure) */ {
 public:
  inline CMsgClientReportOverlayDetourFailure() : CMsgClientReportOverlayDetourFailure(nullptr) {}
  ~CMsgClientReportOverlayDetourFailure() override;
  explicit constexpr CMsgClientReportOverlayDetourFailure(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientReportOverlayDetourFailure(const CMsgClientReportOverlayDetourFailure& from);
  CMsgClientReportOverlayDetourFailure(CMsgClientReportOverlayDetourFailure&& from) noexcept
    : CMsgClientReportOverlayDetourFailure() {
    *this = ::std::move(from);
  }

  inline CMsgClientReportOverlayDetourFailure& operator=(const CMsgClientReportOverlayDetourFailure& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientReportOverlayDetourFailure& operator=(CMsgClientReportOverlayDetourFailure&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientReportOverlayDetourFailure& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientReportOverlayDetourFailure* internal_default_instance() {
    return reinterpret_cast<const CMsgClientReportOverlayDetourFailure*>(
               &_CMsgClientReportOverlayDetourFailure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(CMsgClientReportOverlayDetourFailure& a, CMsgClientReportOverlayDetourFailure& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientReportOverlayDetourFailure* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientReportOverlayDetourFailure* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientReportOverlayDetourFailure* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientReportOverlayDetourFailure>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientReportOverlayDetourFailure& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientReportOverlayDetourFailure& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientReportOverlayDetourFailure* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientReportOverlayDetourFailure";
  }
  protected:
  explicit CMsgClientReportOverlayDetourFailure(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFailureStringsFieldNumber = 1,
  };
  // repeated string failure_strings = 1;
  int failure_strings_size() const;
  private:
  int _internal_failure_strings_size() const;
  public:
  void clear_failure_strings();
  const std::string& failure_strings(int index) const;
  std::string* mutable_failure_strings(int index);
  void set_failure_strings(int index, const std::string& value);
  void set_failure_strings(int index, std::string&& value);
  void set_failure_strings(int index, const char* value);
  void set_failure_strings(int index, const char* value, size_t size);
  std::string* add_failure_strings();
  void add_failure_strings(const std::string& value);
  void add_failure_strings(std::string&& value);
  void add_failure_strings(const char* value);
  void add_failure_strings(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& failure_strings() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_failure_strings();
  private:
  const std::string& _internal_failure_strings(int index) const;
  std::string* _internal_add_failure_strings();
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientReportOverlayDetourFailure)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> failure_strings_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fclientserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientRequestEncryptedAppTicket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientRequestEncryptedAppTicket) */ {
 public:
  inline CMsgClientRequestEncryptedAppTicket() : CMsgClientRequestEncryptedAppTicket(nullptr) {}
  ~CMsgClientRequestEncryptedAppTicket() override;
  explicit constexpr CMsgClientRequestEncryptedAppTicket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientRequestEncryptedAppTicket(const CMsgClientRequestEncryptedAppTicket& from);
  CMsgClientRequestEncryptedAppTicket(CMsgClientRequestEncryptedAppTicket&& from) noexcept
    : CMsgClientRequestEncryptedAppTicket() {
    *this = ::std::move(from);
  }

  inline CMsgClientRequestEncryptedAppTicket& operator=(const CMsgClientRequestEncryptedAppTicket& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientRequestEncryptedAppTicket& operator=(CMsgClientRequestEncryptedAppTicket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientRequestEncryptedAppTicket& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientRequestEncryptedAppTicket* internal_default_instance() {
    return reinterpret_cast<const CMsgClientRequestEncryptedAppTicket*>(
               &_CMsgClientRequestEncryptedAppTicket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(CMsgClientRequestEncryptedAppTicket& a, CMsgClientRequestEncryptedAppTicket& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientRequestEncryptedAppTicket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientRequestEncryptedAppTicket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientRequestEncryptedAppTicket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientRequestEncryptedAppTicket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientRequestEncryptedAppTicket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientRequestEncryptedAppTicket& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientRequestEncryptedAppTicket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientRequestEncryptedAppTicket";
  }
  protected:
  explicit CMsgClientRequestEncryptedAppTicket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserdataFieldNumber = 2,
    kAppIdFieldNumber = 1,
  };
  // optional bytes userdata = 2;
  bool has_userdata() const;
  private:
  bool _internal_has_userdata() const;
  public:
  void clear_userdata();
  const std::string& userdata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_userdata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_userdata();
  PROTOBUF_NODISCARD std::string* release_userdata();
  void set_allocated_userdata(std::string* userdata);
  private:
  const std::string& _internal_userdata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userdata(const std::string& value);
  std::string* _internal_mutable_userdata();
  public:

  // optional uint32 app_id = 1;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientRequestEncryptedAppTicket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userdata_;
  uint32_t app_id_;
  friend struct ::TableStruct_steammessages_5fclientserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientRequestEncryptedAppTicketResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientRequestEncryptedAppTicketResponse) */ {
 public:
  inline CMsgClientRequestEncryptedAppTicketResponse() : CMsgClientRequestEncryptedAppTicketResponse(nullptr) {}
  ~CMsgClientRequestEncryptedAppTicketResponse() override;
  explicit constexpr CMsgClientRequestEncryptedAppTicketResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientRequestEncryptedAppTicketResponse(const CMsgClientRequestEncryptedAppTicketResponse& from);
  CMsgClientRequestEncryptedAppTicketResponse(CMsgClientRequestEncryptedAppTicketResponse&& from) noexcept
    : CMsgClientRequestEncryptedAppTicketResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientRequestEncryptedAppTicketResponse& operator=(const CMsgClientRequestEncryptedAppTicketResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientRequestEncryptedAppTicketResponse& operator=(CMsgClientRequestEncryptedAppTicketResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientRequestEncryptedAppTicketResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientRequestEncryptedAppTicketResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientRequestEncryptedAppTicketResponse*>(
               &_CMsgClientRequestEncryptedAppTicketResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(CMsgClientRequestEncryptedAppTicketResponse& a, CMsgClientRequestEncryptedAppTicketResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientRequestEncryptedAppTicketResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientRequestEncryptedAppTicketResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientRequestEncryptedAppTicketResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientRequestEncryptedAppTicketResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientRequestEncryptedAppTicketResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientRequestEncryptedAppTicketResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientRequestEncryptedAppTicketResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientRequestEncryptedAppTicketResponse";
  }
  protected:
  explicit CMsgClientRequestEncryptedAppTicketResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncryptedAppTicketFieldNumber = 3,
    kAppIdFieldNumber = 1,
    kEresultFieldNumber = 2,
  };
  // optional .EncryptedAppTicket encrypted_app_ticket = 3;
  bool has_encrypted_app_ticket() const;
  private:
  bool _internal_has_encrypted_app_ticket() const;
  public:
  void clear_encrypted_app_ticket();
  const ::EncryptedAppTicket& encrypted_app_ticket() const;
  PROTOBUF_NODISCARD ::EncryptedAppTicket* release_encrypted_app_ticket();
  ::EncryptedAppTicket* mutable_encrypted_app_ticket();
  void set_allocated_encrypted_app_ticket(::EncryptedAppTicket* encrypted_app_ticket);
  private:
  const ::EncryptedAppTicket& _internal_encrypted_app_ticket() const;
  ::EncryptedAppTicket* _internal_mutable_encrypted_app_ticket();
  public:
  void unsafe_arena_set_allocated_encrypted_app_ticket(
      ::EncryptedAppTicket* encrypted_app_ticket);
  ::EncryptedAppTicket* unsafe_arena_release_encrypted_app_ticket();

  // optional uint32 app_id = 1;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // optional int32 eresult = 2 [default = 2];
  bool has_eresult() const;
  private:
  bool _internal_has_eresult() const;
  public:
  void clear_eresult();
  int32_t eresult() const;
  void set_eresult(int32_t value);
  private:
  int32_t _internal_eresult() const;
  void _internal_set_eresult(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientRequestEncryptedAppTicketResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::EncryptedAppTicket* encrypted_app_ticket_;
  uint32_t app_id_;
  int32_t eresult_;
  friend struct ::TableStruct_steammessages_5fclientserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientWalletInfoUpdate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientWalletInfoUpdate) */ {
 public:
  inline CMsgClientWalletInfoUpdate() : CMsgClientWalletInfoUpdate(nullptr) {}
  ~CMsgClientWalletInfoUpdate() override;
  explicit constexpr CMsgClientWalletInfoUpdate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientWalletInfoUpdate(const CMsgClientWalletInfoUpdate& from);
  CMsgClientWalletInfoUpdate(CMsgClientWalletInfoUpdate&& from) noexcept
    : CMsgClientWalletInfoUpdate() {
    *this = ::std::move(from);
  }

  inline CMsgClientWalletInfoUpdate& operator=(const CMsgClientWalletInfoUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientWalletInfoUpdate& operator=(CMsgClientWalletInfoUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientWalletInfoUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientWalletInfoUpdate* internal_default_instance() {
    return reinterpret_cast<const CMsgClientWalletInfoUpdate*>(
               &_CMsgClientWalletInfoUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(CMsgClientWalletInfoUpdate& a, CMsgClientWalletInfoUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientWalletInfoUpdate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientWalletInfoUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientWalletInfoUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientWalletInfoUpdate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientWalletInfoUpdate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientWalletInfoUpdate& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientWalletInfoUpdate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientWalletInfoUpdate";
  }
  protected:
  explicit CMsgClientWalletInfoUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHasWalletFieldNumber = 1,
    kBalanceFieldNumber = 2,
    kCurrencyFieldNumber = 3,
    kBalanceDelayedFieldNumber = 4,
    kBalance64FieldNumber = 5,
    kBalance64DelayedFieldNumber = 6,
    kRealmFieldNumber = 7,
  };
  // optional bool has_wallet = 1;
  bool has_has_wallet() const;
  private:
  bool _internal_has_has_wallet() const;
  public:
  void clear_has_wallet();
  bool has_wallet() const;
  void set_has_wallet(bool value);
  private:
  bool _internal_has_wallet() const;
  void _internal_set_has_wallet(bool value);
  public:

  // optional int32 balance = 2;
  bool has_balance() const;
  private:
  bool _internal_has_balance() const;
  public:
  void clear_balance();
  int32_t balance() const;
  void set_balance(int32_t value);
  private:
  int32_t _internal_balance() const;
  void _internal_set_balance(int32_t value);
  public:

  // optional int32 currency = 3;
  bool has_currency() const;
  private:
  bool _internal_has_currency() const;
  public:
  void clear_currency();
  int32_t currency() const;
  void set_currency(int32_t value);
  private:
  int32_t _internal_currency() const;
  void _internal_set_currency(int32_t value);
  public:

  // optional int32 balance_delayed = 4;
  bool has_balance_delayed() const;
  private:
  bool _internal_has_balance_delayed() const;
  public:
  void clear_balance_delayed();
  int32_t balance_delayed() const;
  void set_balance_delayed(int32_t value);
  private:
  int32_t _internal_balance_delayed() const;
  void _internal_set_balance_delayed(int32_t value);
  public:

  // optional int64 balance64 = 5 [(.php_output_always_number) = true];
  bool has_balance64() const;
  private:
  bool _internal_has_balance64() const;
  public:
  void clear_balance64();
  int64_t balance64() const;
  void set_balance64(int64_t value);
  private:
  int64_t _internal_balance64() const;
  void _internal_set_balance64(int64_t value);
  public:

  // optional int64 balance64_delayed = 6 [(.php_output_always_number) = true];
  bool has_balance64_delayed() const;
  private:
  bool _internal_has_balance64_delayed() const;
  public:
  void clear_balance64_delayed();
  int64_t balance64_delayed() const;
  void set_balance64_delayed(int64_t value);
  private:
  int64_t _internal_balance64_delayed() const;
  void _internal_set_balance64_delayed(int64_t value);
  public:

  // optional int32 realm = 7;
  bool has_realm() const;
  private:
  bool _internal_has_realm() const;
  public:
  void clear_realm();
  int32_t realm() const;
  void set_realm(int32_t value);
  private:
  int32_t _internal_realm() const;
  void _internal_set_realm(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientWalletInfoUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool has_wallet_;
  int32_t balance_;
  int32_t currency_;
  int32_t balance_delayed_;
  int64_t balance64_;
  int64_t balance64_delayed_;
  int32_t realm_;
  friend struct ::TableStruct_steammessages_5fclientserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientAMGetClanOfficers final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientAMGetClanOfficers) */ {
 public:
  inline CMsgClientAMGetClanOfficers() : CMsgClientAMGetClanOfficers(nullptr) {}
  ~CMsgClientAMGetClanOfficers() override;
  explicit constexpr CMsgClientAMGetClanOfficers(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientAMGetClanOfficers(const CMsgClientAMGetClanOfficers& from);
  CMsgClientAMGetClanOfficers(CMsgClientAMGetClanOfficers&& from) noexcept
    : CMsgClientAMGetClanOfficers() {
    *this = ::std::move(from);
  }

  inline CMsgClientAMGetClanOfficers& operator=(const CMsgClientAMGetClanOfficers& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientAMGetClanOfficers& operator=(CMsgClientAMGetClanOfficers&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientAMGetClanOfficers& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientAMGetClanOfficers* internal_default_instance() {
    return reinterpret_cast<const CMsgClientAMGetClanOfficers*>(
               &_CMsgClientAMGetClanOfficers_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(CMsgClientAMGetClanOfficers& a, CMsgClientAMGetClanOfficers& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientAMGetClanOfficers* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientAMGetClanOfficers* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientAMGetClanOfficers* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientAMGetClanOfficers>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientAMGetClanOfficers& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientAMGetClanOfficers& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientAMGetClanOfficers* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientAMGetClanOfficers";
  }
  protected:
  explicit CMsgClientAMGetClanOfficers(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidClanFieldNumber = 1,
  };
  // optional fixed64 steamid_clan = 1;
  bool has_steamid_clan() const;
  private:
  bool _internal_has_steamid_clan() const;
  public:
  void clear_steamid_clan();
  uint64_t steamid_clan() const;
  void set_steamid_clan(uint64_t value);
  private:
  uint64_t _internal_steamid_clan() const;
  void _internal_set_steamid_clan(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientAMGetClanOfficers)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t steamid_clan_;
  friend struct ::TableStruct_steammessages_5fclientserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientAMGetClanOfficersResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientAMGetClanOfficersResponse) */ {
 public:
  inline CMsgClientAMGetClanOfficersResponse() : CMsgClientAMGetClanOfficersResponse(nullptr) {}
  ~CMsgClientAMGetClanOfficersResponse() override;
  explicit constexpr CMsgClientAMGetClanOfficersResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientAMGetClanOfficersResponse(const CMsgClientAMGetClanOfficersResponse& from);
  CMsgClientAMGetClanOfficersResponse(CMsgClientAMGetClanOfficersResponse&& from) noexcept
    : CMsgClientAMGetClanOfficersResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientAMGetClanOfficersResponse& operator=(const CMsgClientAMGetClanOfficersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientAMGetClanOfficersResponse& operator=(CMsgClientAMGetClanOfficersResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientAMGetClanOfficersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientAMGetClanOfficersResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientAMGetClanOfficersResponse*>(
               &_CMsgClientAMGetClanOfficersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(CMsgClientAMGetClanOfficersResponse& a, CMsgClientAMGetClanOfficersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientAMGetClanOfficersResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientAMGetClanOfficersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientAMGetClanOfficersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientAMGetClanOfficersResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientAMGetClanOfficersResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientAMGetClanOfficersResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientAMGetClanOfficersResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientAMGetClanOfficersResponse";
  }
  protected:
  explicit CMsgClientAMGetClanOfficersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidClanFieldNumber = 2,
    kOfficerCountFieldNumber = 3,
    kEresultFieldNumber = 1,
  };
  // optional fixed64 steamid_clan = 2;
  bool has_steamid_clan() const;
  private:
  bool _internal_has_steamid_clan() const;
  public:
  void clear_steamid_clan();
  uint64_t steamid_clan() const;
  void set_steamid_clan(uint64_t value);
  private:
  uint64_t _internal_steamid_clan() const;
  void _internal_set_steamid_clan(uint64_t value);
  public:

  // optional int32 officer_count = 3;
  bool has_officer_count() const;
  private:
  bool _internal_has_officer_count() const;
  public:
  void clear_officer_count();
  int32_t officer_count() const;
  void set_officer_count(int32_t value);
  private:
  int32_t _internal_officer_count() const;
  void _internal_set_officer_count(int32_t value);
  public:

  // optional int32 eresult = 1 [default = 2];
  bool has_eresult() const;
  private:
  bool _internal_has_eresult() const;
  public:
  void clear_eresult();
  int32_t eresult() const;
  void set_eresult(int32_t value);
  private:
  int32_t _internal_eresult() const;
  void _internal_set_eresult(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientAMGetClanOfficersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t steamid_clan_;
  int32_t officer_count_;
  int32_t eresult_;
  friend struct ::TableStruct_steammessages_5fclientserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientAMGetPersonaNameHistory_IdInstance final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientAMGetPersonaNameHistory.IdInstance) */ {
 public:
  inline CMsgClientAMGetPersonaNameHistory_IdInstance() : CMsgClientAMGetPersonaNameHistory_IdInstance(nullptr) {}
  ~CMsgClientAMGetPersonaNameHistory_IdInstance() override;
  explicit constexpr CMsgClientAMGetPersonaNameHistory_IdInstance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientAMGetPersonaNameHistory_IdInstance(const CMsgClientAMGetPersonaNameHistory_IdInstance& from);
  CMsgClientAMGetPersonaNameHistory_IdInstance(CMsgClientAMGetPersonaNameHistory_IdInstance&& from) noexcept
    : CMsgClientAMGetPersonaNameHistory_IdInstance() {
    *this = ::std::move(from);
  }

  inline CMsgClientAMGetPersonaNameHistory_IdInstance& operator=(const CMsgClientAMGetPersonaNameHistory_IdInstance& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientAMGetPersonaNameHistory_IdInstance& operator=(CMsgClientAMGetPersonaNameHistory_IdInstance&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientAMGetPersonaNameHistory_IdInstance& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientAMGetPersonaNameHistory_IdInstance* internal_default_instance() {
    return reinterpret_cast<const CMsgClientAMGetPersonaNameHistory_IdInstance*>(
               &_CMsgClientAMGetPersonaNameHistory_IdInstance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(CMsgClientAMGetPersonaNameHistory_IdInstance& a, CMsgClientAMGetPersonaNameHistory_IdInstance& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientAMGetPersonaNameHistory_IdInstance* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientAMGetPersonaNameHistory_IdInstance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientAMGetPersonaNameHistory_IdInstance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientAMGetPersonaNameHistory_IdInstance>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientAMGetPersonaNameHistory_IdInstance& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientAMGetPersonaNameHistory_IdInstance& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientAMGetPersonaNameHistory_IdInstance* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientAMGetPersonaNameHistory.IdInstance";
  }
  protected:
  explicit CMsgClientAMGetPersonaNameHistory_IdInstance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidFieldNumber = 1,
  };
  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientAMGetPersonaNameHistory.IdInstance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t steamid_;
  friend struct ::TableStruct_steammessages_5fclientserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientAMGetPersonaNameHistory final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientAMGetPersonaNameHistory) */ {
 public:
  inline CMsgClientAMGetPersonaNameHistory() : CMsgClientAMGetPersonaNameHistory(nullptr) {}
  ~CMsgClientAMGetPersonaNameHistory() override;
  explicit constexpr CMsgClientAMGetPersonaNameHistory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientAMGetPersonaNameHistory(const CMsgClientAMGetPersonaNameHistory& from);
  CMsgClientAMGetPersonaNameHistory(CMsgClientAMGetPersonaNameHistory&& from) noexcept
    : CMsgClientAMGetPersonaNameHistory() {
    *this = ::std::move(from);
  }

  inline CMsgClientAMGetPersonaNameHistory& operator=(const CMsgClientAMGetPersonaNameHistory& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientAMGetPersonaNameHistory& operator=(CMsgClientAMGetPersonaNameHistory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientAMGetPersonaNameHistory& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientAMGetPersonaNameHistory* internal_default_instance() {
    return reinterpret_cast<const CMsgClientAMGetPersonaNameHistory*>(
               &_CMsgClientAMGetPersonaNameHistory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(CMsgClientAMGetPersonaNameHistory& a, CMsgClientAMGetPersonaNameHistory& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientAMGetPersonaNameHistory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientAMGetPersonaNameHistory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientAMGetPersonaNameHistory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientAMGetPersonaNameHistory>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientAMGetPersonaNameHistory& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientAMGetPersonaNameHistory& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientAMGetPersonaNameHistory* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientAMGetPersonaNameHistory";
  }
  protected:
  explicit CMsgClientAMGetPersonaNameHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgClientAMGetPersonaNameHistory_IdInstance IdInstance;

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 2,
    kIdCountFieldNumber = 1,
  };
  // repeated .CMsgClientAMGetPersonaNameHistory.IdInstance Ids = 2;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  ::CMsgClientAMGetPersonaNameHistory_IdInstance* mutable_ids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientAMGetPersonaNameHistory_IdInstance >*
      mutable_ids();
  private:
  const ::CMsgClientAMGetPersonaNameHistory_IdInstance& _internal_ids(int index) const;
  ::CMsgClientAMGetPersonaNameHistory_IdInstance* _internal_add_ids();
  public:
  const ::CMsgClientAMGetPersonaNameHistory_IdInstance& ids(int index) const;
  ::CMsgClientAMGetPersonaNameHistory_IdInstance* add_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientAMGetPersonaNameHistory_IdInstance >&
      ids() const;

  // optional int32 id_count = 1;
  bool has_id_count() const;
  private:
  bool _internal_has_id_count() const;
  public:
  void clear_id_count();
  int32_t id_count() const;
  void set_id_count(int32_t value);
  private:
  int32_t _internal_id_count() const;
  void _internal_set_id_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientAMGetPersonaNameHistory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientAMGetPersonaNameHistory_IdInstance > ids_;
  int32_t id_count_;
  friend struct ::TableStruct_steammessages_5fclientserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance) */ {
 public:
  inline CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance() : CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance(nullptr) {}
  ~CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance() override;
  explicit constexpr CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance(const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance& from);
  CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance(CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance&& from) noexcept
    : CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance() {
    *this = ::std::move(from);
  }

  inline CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance& operator=(const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance& operator=(CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance* internal_default_instance() {
    return reinterpret_cast<const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance*>(
               &_CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance& a, CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance";
  }
  protected:
  explicit CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kNameSinceFieldNumber = 1,
  };
  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional fixed32 name_since = 1;
  bool has_name_since() const;
  private:
  bool _internal_has_name_since() const;
  public:
  void clear_name_since();
  uint32_t name_since() const;
  void set_name_since(uint32_t value);
  private:
  uint32_t _internal_name_since() const;
  void _internal_set_name_since(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  uint32_t name_since_;
  friend struct ::TableStruct_steammessages_5fclientserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance) */ {
 public:
  inline CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance() : CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance(nullptr) {}
  ~CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance() override;
  explicit constexpr CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance(const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance& from);
  CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance(CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance&& from) noexcept
    : CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance() {
    *this = ::std::move(from);
  }

  inline CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance& operator=(const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance& operator=(CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance* internal_default_instance() {
    return reinterpret_cast<const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance*>(
               &_CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance& a, CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance";
  }
  protected:
  explicit CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance NameInstance;

  // accessors -------------------------------------------------------

  enum : int {
    kNamesFieldNumber = 3,
    kSteamidFieldNumber = 2,
    kEresultFieldNumber = 1,
  };
  // repeated .CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance names = 3;
  int names_size() const;
  private:
  int _internal_names_size() const;
  public:
  void clear_names();
  ::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance* mutable_names(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance >*
      mutable_names();
  private:
  const ::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance& _internal_names(int index) const;
  ::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance* _internal_add_names();
  public:
  const ::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance& names(int index) const;
  ::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance* add_names();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance >&
      names() const;

  // optional fixed64 steamid = 2;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional int32 eresult = 1 [default = 2];
  bool has_eresult() const;
  private:
  bool _internal_has_eresult() const;
  public:
  void clear_eresult();
  int32_t eresult() const;
  void set_eresult(int32_t value);
  private:
  int32_t _internal_eresult() const;
  void _internal_set_eresult(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance > names_;
  uint64_t steamid_;
  int32_t eresult_;
  friend struct ::TableStruct_steammessages_5fclientserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientAMGetPersonaNameHistoryResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientAMGetPersonaNameHistoryResponse) */ {
 public:
  inline CMsgClientAMGetPersonaNameHistoryResponse() : CMsgClientAMGetPersonaNameHistoryResponse(nullptr) {}
  ~CMsgClientAMGetPersonaNameHistoryResponse() override;
  explicit constexpr CMsgClientAMGetPersonaNameHistoryResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientAMGetPersonaNameHistoryResponse(const CMsgClientAMGetPersonaNameHistoryResponse& from);
  CMsgClientAMGetPersonaNameHistoryResponse(CMsgClientAMGetPersonaNameHistoryResponse&& from) noexcept
    : CMsgClientAMGetPersonaNameHistoryResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientAMGetPersonaNameHistoryResponse& operator=(const CMsgClientAMGetPersonaNameHistoryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientAMGetPersonaNameHistoryResponse& operator=(CMsgClientAMGetPersonaNameHistoryResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientAMGetPersonaNameHistoryResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientAMGetPersonaNameHistoryResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientAMGetPersonaNameHistoryResponse*>(
               &_CMsgClientAMGetPersonaNameHistoryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(CMsgClientAMGetPersonaNameHistoryResponse& a, CMsgClientAMGetPersonaNameHistoryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientAMGetPersonaNameHistoryResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientAMGetPersonaNameHistoryResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientAMGetPersonaNameHistoryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientAMGetPersonaNameHistoryResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientAMGetPersonaNameHistoryResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientAMGetPersonaNameHistoryResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientAMGetPersonaNameHistoryResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientAMGetPersonaNameHistoryResponse";
  }
  protected:
  explicit CMsgClientAMGetPersonaNameHistoryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance NameTableInstance;

  // accessors -------------------------------------------------------

  enum : int {
    kResponsesFieldNumber = 2,
  };
  // repeated .CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance responses = 2;
  int responses_size() const;
  private:
  int _internal_responses_size() const;
  public:
  void clear_responses();
  ::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance* mutable_responses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance >*
      mutable_responses();
  private:
  const ::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance& _internal_responses(int index) const;
  ::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance* _internal_add_responses();
  public:
  const ::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance& responses(int index) const;
  ::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance* add_responses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance >&
      responses() const;

  // @@protoc_insertion_point(class_scope:CMsgClientAMGetPersonaNameHistoryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance > responses_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fclientserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientDeregisterWithServer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientDeregisterWithServer) */ {
 public:
  inline CMsgClientDeregisterWithServer() : CMsgClientDeregisterWithServer(nullptr) {}
  ~CMsgClientDeregisterWithServer() override;
  explicit constexpr CMsgClientDeregisterWithServer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientDeregisterWithServer(const CMsgClientDeregisterWithServer& from);
  CMsgClientDeregisterWithServer(CMsgClientDeregisterWithServer&& from) noexcept
    : CMsgClientDeregisterWithServer() {
    *this = ::std::move(from);
  }

  inline CMsgClientDeregisterWithServer& operator=(const CMsgClientDeregisterWithServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientDeregisterWithServer& operator=(CMsgClientDeregisterWithServer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientDeregisterWithServer& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientDeregisterWithServer* internal_default_instance() {
    return reinterpret_cast<const CMsgClientDeregisterWithServer*>(
               &_CMsgClientDeregisterWithServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(CMsgClientDeregisterWithServer& a, CMsgClientDeregisterWithServer& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientDeregisterWithServer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientDeregisterWithServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientDeregisterWithServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientDeregisterWithServer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientDeregisterWithServer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientDeregisterWithServer& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientDeregisterWithServer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientDeregisterWithServer";
  }
  protected:
  explicit CMsgClientDeregisterWithServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEservertypeFieldNumber = 1,
    kAppIdFieldNumber = 2,
  };
  // optional uint32 eservertype = 1;
  bool has_eservertype() const;
  private:
  bool _internal_has_eservertype() const;
  public:
  void clear_eservertype();
  uint32_t eservertype() const;
  void set_eservertype(uint32_t value);
  private:
  uint32_t _internal_eservertype() const;
  void _internal_set_eservertype(uint32_t value);
  public:

  // optional uint32 app_id = 2;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientDeregisterWithServer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t eservertype_;
  uint32_t app_id_;
  friend struct ::TableStruct_steammessages_5fclientserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientClanState_NameInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientClanState.NameInfo) */ {
 public:
  inline CMsgClientClanState_NameInfo() : CMsgClientClanState_NameInfo(nullptr) {}
  ~CMsgClientClanState_NameInfo() override;
  explicit constexpr CMsgClientClanState_NameInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientClanState_NameInfo(const CMsgClientClanState_NameInfo& from);
  CMsgClientClanState_NameInfo(CMsgClientClanState_NameInfo&& from) noexcept
    : CMsgClientClanState_NameInfo() {
    *this = ::std::move(from);
  }

  inline CMsgClientClanState_NameInfo& operator=(const CMsgClientClanState_NameInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientClanState_NameInfo& operator=(CMsgClientClanState_NameInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientClanState_NameInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientClanState_NameInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgClientClanState_NameInfo*>(
               &_CMsgClientClanState_NameInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(CMsgClientClanState_NameInfo& a, CMsgClientClanState_NameInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientClanState_NameInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientClanState_NameInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientClanState_NameInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientClanState_NameInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientClanState_NameInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientClanState_NameInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientClanState_NameInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientClanState.NameInfo";
  }
  protected:
  explicit CMsgClientClanState_NameInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClanNameFieldNumber = 1,
    kShaAvatarFieldNumber = 2,
  };
  // optional string clan_name = 1;
  bool has_clan_name() const;
  private:
  bool _internal_has_clan_name() const;
  public:
  void clear_clan_name();
  const std::string& clan_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_clan_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_clan_name();
  PROTOBUF_NODISCARD std::string* release_clan_name();
  void set_allocated_clan_name(std::string* clan_name);
  private:
  const std::string& _internal_clan_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clan_name(const std::string& value);
  std::string* _internal_mutable_clan_name();
  public:

  // optional bytes sha_avatar = 2;
  bool has_sha_avatar() const;
  private:
  bool _internal_has_sha_avatar() const;
  public:
  void clear_sha_avatar();
  const std::string& sha_avatar() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sha_avatar(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sha_avatar();
  PROTOBUF_NODISCARD std::string* release_sha_avatar();
  void set_allocated_sha_avatar(std::string* sha_avatar);
  private:
  const std::string& _internal_sha_avatar() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sha_avatar(const std::string& value);
  std::string* _internal_mutable_sha_avatar();
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientClanState.NameInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clan_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sha_avatar_;
  friend struct ::TableStruct_steammessages_5fclientserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientClanState_UserCounts final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientClanState.UserCounts) */ {
 public:
  inline CMsgClientClanState_UserCounts() : CMsgClientClanState_UserCounts(nullptr) {}
  ~CMsgClientClanState_UserCounts() override;
  explicit constexpr CMsgClientClanState_UserCounts(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientClanState_UserCounts(const CMsgClientClanState_UserCounts& from);
  CMsgClientClanState_UserCounts(CMsgClientClanState_UserCounts&& from) noexcept
    : CMsgClientClanState_UserCounts() {
    *this = ::std::move(from);
  }

  inline CMsgClientClanState_UserCounts& operator=(const CMsgClientClanState_UserCounts& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientClanState_UserCounts& operator=(CMsgClientClanState_UserCounts&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientClanState_UserCounts& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientClanState_UserCounts* internal_default_instance() {
    return reinterpret_cast<const CMsgClientClanState_UserCounts*>(
               &_CMsgClientClanState_UserCounts_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(CMsgClientClanState_UserCounts& a, CMsgClientClanState_UserCounts& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientClanState_UserCounts* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientClanState_UserCounts* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientClanState_UserCounts* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientClanState_UserCounts>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientClanState_UserCounts& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientClanState_UserCounts& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientClanState_UserCounts* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientClanState.UserCounts";
  }
  protected:
  explicit CMsgClientClanState_UserCounts(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMembersFieldNumber = 1,
    kOnlineFieldNumber = 2,
    kChattingFieldNumber = 3,
    kInGameFieldNumber = 4,
    kChatRoomMembersFieldNumber = 5,
  };
  // optional uint32 members = 1;
  bool has_members() const;
  private:
  bool _internal_has_members() const;
  public:
  void clear_members();
  uint32_t members() const;
  void set_members(uint32_t value);
  private:
  uint32_t _internal_members() const;
  void _internal_set_members(uint32_t value);
  public:

  // optional uint32 online = 2;
  bool has_online() const;
  private:
  bool _internal_has_online() const;
  public:
  void clear_online();
  uint32_t online() const;
  void set_online(uint32_t value);
  private:
  uint32_t _internal_online() const;
  void _internal_set_online(uint32_t value);
  public:

  // optional uint32 chatting = 3;
  bool has_chatting() const;
  private:
  bool _internal_has_chatting() const;
  public:
  void clear_chatting();
  uint32_t chatting() const;
  void set_chatting(uint32_t value);
  private:
  uint32_t _internal_chatting() const;
  void _internal_set_chatting(uint32_t value);
  public:

  // optional uint32 in_game = 4;
  bool has_in_game() const;
  private:
  bool _internal_has_in_game() const;
  public:
  void clear_in_game();
  uint32_t in_game() const;
  void set_in_game(uint32_t value);
  private:
  uint32_t _internal_in_game() const;
  void _internal_set_in_game(uint32_t value);
  public:

  // optional uint32 chat_room_members = 5;
  bool has_chat_room_members() const;
  private:
  bool _internal_has_chat_room_members() const;
  public:
  void clear_chat_room_members();
  uint32_t chat_room_members() const;
  void set_chat_room_members(uint32_t value);
  private:
  uint32_t _internal_chat_room_members() const;
  void _internal_set_chat_room_members(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientClanState.UserCounts)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t members_;
  uint32_t online_;
  uint32_t chatting_;
  uint32_t in_game_;
  uint32_t chat_room_members_;
  friend struct ::TableStruct_steammessages_5fclientserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientClanState_Event final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientClanState.Event) */ {
 public:
  inline CMsgClientClanState_Event() : CMsgClientClanState_Event(nullptr) {}
  ~CMsgClientClanState_Event() override;
  explicit constexpr CMsgClientClanState_Event(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientClanState_Event(const CMsgClientClanState_Event& from);
  CMsgClientClanState_Event(CMsgClientClanState_Event&& from) noexcept
    : CMsgClientClanState_Event() {
    *this = ::std::move(from);
  }

  inline CMsgClientClanState_Event& operator=(const CMsgClientClanState_Event& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientClanState_Event& operator=(CMsgClientClanState_Event&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientClanState_Event& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientClanState_Event* internal_default_instance() {
    return reinterpret_cast<const CMsgClientClanState_Event*>(
               &_CMsgClientClanState_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(CMsgClientClanState_Event& a, CMsgClientClanState_Event& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientClanState_Event* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientClanState_Event* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientClanState_Event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientClanState_Event>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientClanState_Event& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientClanState_Event& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientClanState_Event* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientClanState.Event";
  }
  protected:
  explicit CMsgClientClanState_Event(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeadlineFieldNumber = 3,
    kGidFieldNumber = 1,
    kEventTimeFieldNumber = 2,
    kJustPostedFieldNumber = 5,
    kGameIdFieldNumber = 4,
  };
  // optional string headline = 3;
  bool has_headline() const;
  private:
  bool _internal_has_headline() const;
  public:
  void clear_headline();
  const std::string& headline() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_headline(ArgT0&& arg0, ArgT... args);
  std::string* mutable_headline();
  PROTOBUF_NODISCARD std::string* release_headline();
  void set_allocated_headline(std::string* headline);
  private:
  const std::string& _internal_headline() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_headline(const std::string& value);
  std::string* _internal_mutable_headline();
  public:

  // optional fixed64 gid = 1;
  bool has_gid() const;
  private:
  bool _internal_has_gid() const;
  public:
  void clear_gid();
  uint64_t gid() const;
  void set_gid(uint64_t value);
  private:
  uint64_t _internal_gid() const;
  void _internal_set_gid(uint64_t value);
  public:

  // optional uint32 event_time = 2;
  bool has_event_time() const;
  private:
  bool _internal_has_event_time() const;
  public:
  void clear_event_time();
  uint32_t event_time() const;
  void set_event_time(uint32_t value);
  private:
  uint32_t _internal_event_time() const;
  void _internal_set_event_time(uint32_t value);
  public:

  // optional bool just_posted = 5;
  bool has_just_posted() const;
  private:
  bool _internal_has_just_posted() const;
  public:
  void clear_just_posted();
  bool just_posted() const;
  void set_just_posted(bool value);
  private:
  bool _internal_just_posted() const;
  void _internal_set_just_posted(bool value);
  public:

  // optional fixed64 game_id = 4;
  bool has_game_id() const;
  private:
  bool _internal_has_game_id() const;
  public:
  void clear_game_id();
  uint64_t game_id() const;
  void set_game_id(uint64_t value);
  private:
  uint64_t _internal_game_id() const;
  void _internal_set_game_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientClanState.Event)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr headline_;
  uint64_t gid_;
  uint32_t event_time_;
  bool just_posted_;
  uint64_t game_id_;
  friend struct ::TableStruct_steammessages_5fclientserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientClanState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientClanState) */ {
 public:
  inline CMsgClientClanState() : CMsgClientClanState(nullptr) {}
  ~CMsgClientClanState() override;
  explicit constexpr CMsgClientClanState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientClanState(const CMsgClientClanState& from);
  CMsgClientClanState(CMsgClientClanState&& from) noexcept
    : CMsgClientClanState() {
    *this = ::std::move(from);
  }

  inline CMsgClientClanState& operator=(const CMsgClientClanState& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientClanState& operator=(CMsgClientClanState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientClanState& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientClanState* internal_default_instance() {
    return reinterpret_cast<const CMsgClientClanState*>(
               &_CMsgClientClanState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(CMsgClientClanState& a, CMsgClientClanState& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientClanState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientClanState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientClanState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientClanState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientClanState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientClanState& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientClanState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientClanState";
  }
  protected:
  explicit CMsgClientClanState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgClientClanState_NameInfo NameInfo;
  typedef CMsgClientClanState_UserCounts UserCounts;
  typedef CMsgClientClanState_Event Event;

  // accessors -------------------------------------------------------

  enum : int {
    kEventsFieldNumber = 6,
    kAnnouncementsFieldNumber = 7,
    kNameInfoFieldNumber = 4,
    kUserCountsFieldNumber = 5,
    kSteamidClanFieldNumber = 1,
    kClanAccountFlagsFieldNumber = 3,
    kChatRoomPrivateFieldNumber = 8,
  };
  // repeated .CMsgClientClanState.Event events = 6;
  int events_size() const;
  private:
  int _internal_events_size() const;
  public:
  void clear_events();
  ::CMsgClientClanState_Event* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientClanState_Event >*
      mutable_events();
  private:
  const ::CMsgClientClanState_Event& _internal_events(int index) const;
  ::CMsgClientClanState_Event* _internal_add_events();
  public:
  const ::CMsgClientClanState_Event& events(int index) const;
  ::CMsgClientClanState_Event* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientClanState_Event >&
      events() const;

  // repeated .CMsgClientClanState.Event announcements = 7;
  int announcements_size() const;
  private:
  int _internal_announcements_size() const;
  public:
  void clear_announcements();
  ::CMsgClientClanState_Event* mutable_announcements(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientClanState_Event >*
      mutable_announcements();
  private:
  const ::CMsgClientClanState_Event& _internal_announcements(int index) const;
  ::CMsgClientClanState_Event* _internal_add_announcements();
  public:
  const ::CMsgClientClanState_Event& announcements(int index) const;
  ::CMsgClientClanState_Event* add_announcements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientClanState_Event >&
      announcements() const;

  // optional .CMsgClientClanState.NameInfo name_info = 4;
  bool has_name_info() const;
  private:
  bool _internal_has_name_info() const;
  public:
  void clear_name_info();
  const ::CMsgClientClanState_NameInfo& name_info() const;
  PROTOBUF_NODISCARD ::CMsgClientClanState_NameInfo* release_name_info();
  ::CMsgClientClanState_NameInfo* mutable_name_info();
  void set_allocated_name_info(::CMsgClientClanState_NameInfo* name_info);
  private:
  const ::CMsgClientClanState_NameInfo& _internal_name_info() const;
  ::CMsgClientClanState_NameInfo* _internal_mutable_name_info();
  public:
  void unsafe_arena_set_allocated_name_info(
      ::CMsgClientClanState_NameInfo* name_info);
  ::CMsgClientClanState_NameInfo* unsafe_arena_release_name_info();

  // optional .CMsgClientClanState.UserCounts user_counts = 5;
  bool has_user_counts() const;
  private:
  bool _internal_has_user_counts() const;
  public:
  void clear_user_counts();
  const ::CMsgClientClanState_UserCounts& user_counts() const;
  PROTOBUF_NODISCARD ::CMsgClientClanState_UserCounts* release_user_counts();
  ::CMsgClientClanState_UserCounts* mutable_user_counts();
  void set_allocated_user_counts(::CMsgClientClanState_UserCounts* user_counts);
  private:
  const ::CMsgClientClanState_UserCounts& _internal_user_counts() const;
  ::CMsgClientClanState_UserCounts* _internal_mutable_user_counts();
  public:
  void unsafe_arena_set_allocated_user_counts(
      ::CMsgClientClanState_UserCounts* user_counts);
  ::CMsgClientClanState_UserCounts* unsafe_arena_release_user_counts();

  // optional fixed64 steamid_clan = 1;
  bool has_steamid_clan() const;
  private:
  bool _internal_has_steamid_clan() const;
  public:
  void clear_steamid_clan();
  uint64_t steamid_clan() const;
  void set_steamid_clan(uint64_t value);
  private:
  uint64_t _internal_steamid_clan() const;
  void _internal_set_steamid_clan(uint64_t value);
  public:

  // optional uint32 clan_account_flags = 3;
  bool has_clan_account_flags() const;
  private:
  bool _internal_has_clan_account_flags() const;
  public:
  void clear_clan_account_flags();
  uint32_t clan_account_flags() const;
  void set_clan_account_flags(uint32_t value);
  private:
  uint32_t _internal_clan_account_flags() const;
  void _internal_set_clan_account_flags(uint32_t value);
  public:

  // optional bool chat_room_private = 8;
  bool has_chat_room_private() const;
  private:
  bool _internal_has_chat_room_private() const;
  public:
  void clear_chat_room_private();
  bool chat_room_private() const;
  void set_chat_room_private(bool value);
  private:
  bool _internal_chat_room_private() const;
  void _internal_set_chat_room_private(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientClanState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientClanState_Event > events_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientClanState_Event > announcements_;
  ::CMsgClientClanState_NameInfo* name_info_;
  ::CMsgClientClanState_UserCounts* user_counts_;
  uint64_t steamid_clan_;
  uint32_t clan_account_flags_;
  bool chat_room_private_;
  friend struct ::TableStruct_steammessages_5fclientserver_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CMsgClientRegisterAuthTicketWithCM

// optional uint32 protocol_version = 1;
inline bool CMsgClientRegisterAuthTicketWithCM::_internal_has_protocol_version() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientRegisterAuthTicketWithCM::has_protocol_version() const {
  return _internal_has_protocol_version();
}
inline void CMsgClientRegisterAuthTicketWithCM::clear_protocol_version() {
  protocol_version_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgClientRegisterAuthTicketWithCM::_internal_protocol_version() const {
  return protocol_version_;
}
inline uint32_t CMsgClientRegisterAuthTicketWithCM::protocol_version() const {
  // @@protoc_insertion_point(field_get:CMsgClientRegisterAuthTicketWithCM.protocol_version)
  return _internal_protocol_version();
}
inline void CMsgClientRegisterAuthTicketWithCM::_internal_set_protocol_version(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  protocol_version_ = value;
}
inline void CMsgClientRegisterAuthTicketWithCM::set_protocol_version(uint32_t value) {
  _internal_set_protocol_version(value);
  // @@protoc_insertion_point(field_set:CMsgClientRegisterAuthTicketWithCM.protocol_version)
}

// optional bytes ticket = 3;
inline bool CMsgClientRegisterAuthTicketWithCM::_internal_has_ticket() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientRegisterAuthTicketWithCM::has_ticket() const {
  return _internal_has_ticket();
}
inline void CMsgClientRegisterAuthTicketWithCM::clear_ticket() {
  ticket_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientRegisterAuthTicketWithCM::ticket() const {
  // @@protoc_insertion_point(field_get:CMsgClientRegisterAuthTicketWithCM.ticket)
  return _internal_ticket();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientRegisterAuthTicketWithCM::set_ticket(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 ticket_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientRegisterAuthTicketWithCM.ticket)
}
inline std::string* CMsgClientRegisterAuthTicketWithCM::mutable_ticket() {
  std::string* _s = _internal_mutable_ticket();
  // @@protoc_insertion_point(field_mutable:CMsgClientRegisterAuthTicketWithCM.ticket)
  return _s;
}
inline const std::string& CMsgClientRegisterAuthTicketWithCM::_internal_ticket() const {
  return ticket_.Get();
}
inline void CMsgClientRegisterAuthTicketWithCM::_internal_set_ticket(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ticket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientRegisterAuthTicketWithCM::_internal_mutable_ticket() {
  _has_bits_[0] |= 0x00000001u;
  return ticket_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientRegisterAuthTicketWithCM::release_ticket() {
  // @@protoc_insertion_point(field_release:CMsgClientRegisterAuthTicketWithCM.ticket)
  if (!_internal_has_ticket()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = ticket_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ticket_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ticket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientRegisterAuthTicketWithCM::set_allocated_ticket(std::string* ticket) {
  if (ticket != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ticket_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ticket,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ticket_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ticket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientRegisterAuthTicketWithCM.ticket)
}

// optional uint64 client_instance_id = 4;
inline bool CMsgClientRegisterAuthTicketWithCM::_internal_has_client_instance_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientRegisterAuthTicketWithCM::has_client_instance_id() const {
  return _internal_has_client_instance_id();
}
inline void CMsgClientRegisterAuthTicketWithCM::clear_client_instance_id() {
  client_instance_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CMsgClientRegisterAuthTicketWithCM::_internal_client_instance_id() const {
  return client_instance_id_;
}
inline uint64_t CMsgClientRegisterAuthTicketWithCM::client_instance_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientRegisterAuthTicketWithCM.client_instance_id)
  return _internal_client_instance_id();
}
inline void CMsgClientRegisterAuthTicketWithCM::_internal_set_client_instance_id(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  client_instance_id_ = value;
}
inline void CMsgClientRegisterAuthTicketWithCM::set_client_instance_id(uint64_t value) {
  _internal_set_client_instance_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientRegisterAuthTicketWithCM.client_instance_id)
}

// -------------------------------------------------------------------

// CMsgClientTicketAuthComplete

// optional fixed64 steam_id = 1;
inline bool CMsgClientTicketAuthComplete::_internal_has_steam_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientTicketAuthComplete::has_steam_id() const {
  return _internal_has_steam_id();
}
inline void CMsgClientTicketAuthComplete::clear_steam_id() {
  steam_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CMsgClientTicketAuthComplete::_internal_steam_id() const {
  return steam_id_;
}
inline uint64_t CMsgClientTicketAuthComplete::steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientTicketAuthComplete.steam_id)
  return _internal_steam_id();
}
inline void CMsgClientTicketAuthComplete::_internal_set_steam_id(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  steam_id_ = value;
}
inline void CMsgClientTicketAuthComplete::set_steam_id(uint64_t value) {
  _internal_set_steam_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientTicketAuthComplete.steam_id)
}

// optional fixed64 game_id = 2;
inline bool CMsgClientTicketAuthComplete::_internal_has_game_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientTicketAuthComplete::has_game_id() const {
  return _internal_has_game_id();
}
inline void CMsgClientTicketAuthComplete::clear_game_id() {
  game_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CMsgClientTicketAuthComplete::_internal_game_id() const {
  return game_id_;
}
inline uint64_t CMsgClientTicketAuthComplete::game_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientTicketAuthComplete.game_id)
  return _internal_game_id();
}
inline void CMsgClientTicketAuthComplete::_internal_set_game_id(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  game_id_ = value;
}
inline void CMsgClientTicketAuthComplete::set_game_id(uint64_t value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientTicketAuthComplete.game_id)
}

// optional uint32 estate = 3;
inline bool CMsgClientTicketAuthComplete::_internal_has_estate() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientTicketAuthComplete::has_estate() const {
  return _internal_has_estate();
}
inline void CMsgClientTicketAuthComplete::clear_estate() {
  estate_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgClientTicketAuthComplete::_internal_estate() const {
  return estate_;
}
inline uint32_t CMsgClientTicketAuthComplete::estate() const {
  // @@protoc_insertion_point(field_get:CMsgClientTicketAuthComplete.estate)
  return _internal_estate();
}
inline void CMsgClientTicketAuthComplete::_internal_set_estate(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  estate_ = value;
}
inline void CMsgClientTicketAuthComplete::set_estate(uint32_t value) {
  _internal_set_estate(value);
  // @@protoc_insertion_point(field_set:CMsgClientTicketAuthComplete.estate)
}

// optional uint32 eauth_session_response = 4;
inline bool CMsgClientTicketAuthComplete::_internal_has_eauth_session_response() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgClientTicketAuthComplete::has_eauth_session_response() const {
  return _internal_has_eauth_session_response();
}
inline void CMsgClientTicketAuthComplete::clear_eauth_session_response() {
  eauth_session_response_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgClientTicketAuthComplete::_internal_eauth_session_response() const {
  return eauth_session_response_;
}
inline uint32_t CMsgClientTicketAuthComplete::eauth_session_response() const {
  // @@protoc_insertion_point(field_get:CMsgClientTicketAuthComplete.eauth_session_response)
  return _internal_eauth_session_response();
}
inline void CMsgClientTicketAuthComplete::_internal_set_eauth_session_response(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  eauth_session_response_ = value;
}
inline void CMsgClientTicketAuthComplete::set_eauth_session_response(uint32_t value) {
  _internal_set_eauth_session_response(value);
  // @@protoc_insertion_point(field_set:CMsgClientTicketAuthComplete.eauth_session_response)
}

// optional bytes DEPRECATED_ticket = 5;
inline bool CMsgClientTicketAuthComplete::_internal_has_deprecated_ticket() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientTicketAuthComplete::has_deprecated_ticket() const {
  return _internal_has_deprecated_ticket();
}
inline void CMsgClientTicketAuthComplete::clear_deprecated_ticket() {
  deprecated_ticket_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientTicketAuthComplete::deprecated_ticket() const {
  // @@protoc_insertion_point(field_get:CMsgClientTicketAuthComplete.DEPRECATED_ticket)
  return _internal_deprecated_ticket();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientTicketAuthComplete::set_deprecated_ticket(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 deprecated_ticket_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientTicketAuthComplete.DEPRECATED_ticket)
}
inline std::string* CMsgClientTicketAuthComplete::mutable_deprecated_ticket() {
  std::string* _s = _internal_mutable_deprecated_ticket();
  // @@protoc_insertion_point(field_mutable:CMsgClientTicketAuthComplete.DEPRECATED_ticket)
  return _s;
}
inline const std::string& CMsgClientTicketAuthComplete::_internal_deprecated_ticket() const {
  return deprecated_ticket_.Get();
}
inline void CMsgClientTicketAuthComplete::_internal_set_deprecated_ticket(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  deprecated_ticket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientTicketAuthComplete::_internal_mutable_deprecated_ticket() {
  _has_bits_[0] |= 0x00000001u;
  return deprecated_ticket_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientTicketAuthComplete::release_deprecated_ticket() {
  // @@protoc_insertion_point(field_release:CMsgClientTicketAuthComplete.DEPRECATED_ticket)
  if (!_internal_has_deprecated_ticket()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = deprecated_ticket_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (deprecated_ticket_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    deprecated_ticket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientTicketAuthComplete::set_allocated_deprecated_ticket(std::string* deprecated_ticket) {
  if (deprecated_ticket != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  deprecated_ticket_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deprecated_ticket,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (deprecated_ticket_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    deprecated_ticket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientTicketAuthComplete.DEPRECATED_ticket)
}

// optional uint32 ticket_crc = 6;
inline bool CMsgClientTicketAuthComplete::_internal_has_ticket_crc() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgClientTicketAuthComplete::has_ticket_crc() const {
  return _internal_has_ticket_crc();
}
inline void CMsgClientTicketAuthComplete::clear_ticket_crc() {
  ticket_crc_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgClientTicketAuthComplete::_internal_ticket_crc() const {
  return ticket_crc_;
}
inline uint32_t CMsgClientTicketAuthComplete::ticket_crc() const {
  // @@protoc_insertion_point(field_get:CMsgClientTicketAuthComplete.ticket_crc)
  return _internal_ticket_crc();
}
inline void CMsgClientTicketAuthComplete::_internal_set_ticket_crc(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  ticket_crc_ = value;
}
inline void CMsgClientTicketAuthComplete::set_ticket_crc(uint32_t value) {
  _internal_set_ticket_crc(value);
  // @@protoc_insertion_point(field_set:CMsgClientTicketAuthComplete.ticket_crc)
}

// optional uint32 ticket_sequence = 7;
inline bool CMsgClientTicketAuthComplete::_internal_has_ticket_sequence() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgClientTicketAuthComplete::has_ticket_sequence() const {
  return _internal_has_ticket_sequence();
}
inline void CMsgClientTicketAuthComplete::clear_ticket_sequence() {
  ticket_sequence_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgClientTicketAuthComplete::_internal_ticket_sequence() const {
  return ticket_sequence_;
}
inline uint32_t CMsgClientTicketAuthComplete::ticket_sequence() const {
  // @@protoc_insertion_point(field_get:CMsgClientTicketAuthComplete.ticket_sequence)
  return _internal_ticket_sequence();
}
inline void CMsgClientTicketAuthComplete::_internal_set_ticket_sequence(uint32_t value) {
  _has_bits_[0] |= 0x00000040u;
  ticket_sequence_ = value;
}
inline void CMsgClientTicketAuthComplete::set_ticket_sequence(uint32_t value) {
  _internal_set_ticket_sequence(value);
  // @@protoc_insertion_point(field_set:CMsgClientTicketAuthComplete.ticket_sequence)
}

// optional fixed64 owner_steam_id = 8;
inline bool CMsgClientTicketAuthComplete::_internal_has_owner_steam_id() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgClientTicketAuthComplete::has_owner_steam_id() const {
  return _internal_has_owner_steam_id();
}
inline void CMsgClientTicketAuthComplete::clear_owner_steam_id() {
  owner_steam_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000080u;
}
inline uint64_t CMsgClientTicketAuthComplete::_internal_owner_steam_id() const {
  return owner_steam_id_;
}
inline uint64_t CMsgClientTicketAuthComplete::owner_steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientTicketAuthComplete.owner_steam_id)
  return _internal_owner_steam_id();
}
inline void CMsgClientTicketAuthComplete::_internal_set_owner_steam_id(uint64_t value) {
  _has_bits_[0] |= 0x00000080u;
  owner_steam_id_ = value;
}
inline void CMsgClientTicketAuthComplete::set_owner_steam_id(uint64_t value) {
  _internal_set_owner_steam_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientTicketAuthComplete.owner_steam_id)
}

// -------------------------------------------------------------------

// CMsgClientCMList

// repeated uint32 cm_addresses = 1;
inline int CMsgClientCMList::_internal_cm_addresses_size() const {
  return cm_addresses_.size();
}
inline int CMsgClientCMList::cm_addresses_size() const {
  return _internal_cm_addresses_size();
}
inline void CMsgClientCMList::clear_cm_addresses() {
  cm_addresses_.Clear();
}
inline uint32_t CMsgClientCMList::_internal_cm_addresses(int index) const {
  return cm_addresses_.Get(index);
}
inline uint32_t CMsgClientCMList::cm_addresses(int index) const {
  // @@protoc_insertion_point(field_get:CMsgClientCMList.cm_addresses)
  return _internal_cm_addresses(index);
}
inline void CMsgClientCMList::set_cm_addresses(int index, uint32_t value) {
  cm_addresses_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgClientCMList.cm_addresses)
}
inline void CMsgClientCMList::_internal_add_cm_addresses(uint32_t value) {
  cm_addresses_.Add(value);
}
inline void CMsgClientCMList::add_cm_addresses(uint32_t value) {
  _internal_add_cm_addresses(value);
  // @@protoc_insertion_point(field_add:CMsgClientCMList.cm_addresses)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgClientCMList::_internal_cm_addresses() const {
  return cm_addresses_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgClientCMList::cm_addresses() const {
  // @@protoc_insertion_point(field_list:CMsgClientCMList.cm_addresses)
  return _internal_cm_addresses();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgClientCMList::_internal_mutable_cm_addresses() {
  return &cm_addresses_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgClientCMList::mutable_cm_addresses() {
  // @@protoc_insertion_point(field_mutable_list:CMsgClientCMList.cm_addresses)
  return _internal_mutable_cm_addresses();
}

// repeated uint32 cm_ports = 2;
inline int CMsgClientCMList::_internal_cm_ports_size() const {
  return cm_ports_.size();
}
inline int CMsgClientCMList::cm_ports_size() const {
  return _internal_cm_ports_size();
}
inline void CMsgClientCMList::clear_cm_ports() {
  cm_ports_.Clear();
}
inline uint32_t CMsgClientCMList::_internal_cm_ports(int index) const {
  return cm_ports_.Get(index);
}
inline uint32_t CMsgClientCMList::cm_ports(int index) const {
  // @@protoc_insertion_point(field_get:CMsgClientCMList.cm_ports)
  return _internal_cm_ports(index);
}
inline void CMsgClientCMList::set_cm_ports(int index, uint32_t value) {
  cm_ports_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgClientCMList.cm_ports)
}
inline void CMsgClientCMList::_internal_add_cm_ports(uint32_t value) {
  cm_ports_.Add(value);
}
inline void CMsgClientCMList::add_cm_ports(uint32_t value) {
  _internal_add_cm_ports(value);
  // @@protoc_insertion_point(field_add:CMsgClientCMList.cm_ports)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgClientCMList::_internal_cm_ports() const {
  return cm_ports_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgClientCMList::cm_ports() const {
  // @@protoc_insertion_point(field_list:CMsgClientCMList.cm_ports)
  return _internal_cm_ports();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgClientCMList::_internal_mutable_cm_ports() {
  return &cm_ports_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgClientCMList::mutable_cm_ports() {
  // @@protoc_insertion_point(field_mutable_list:CMsgClientCMList.cm_ports)
  return _internal_mutable_cm_ports();
}

// repeated string cm_websocket_addresses = 3;
inline int CMsgClientCMList::_internal_cm_websocket_addresses_size() const {
  return cm_websocket_addresses_.size();
}
inline int CMsgClientCMList::cm_websocket_addresses_size() const {
  return _internal_cm_websocket_addresses_size();
}
inline void CMsgClientCMList::clear_cm_websocket_addresses() {
  cm_websocket_addresses_.Clear();
}
inline std::string* CMsgClientCMList::add_cm_websocket_addresses() {
  std::string* _s = _internal_add_cm_websocket_addresses();
  // @@protoc_insertion_point(field_add_mutable:CMsgClientCMList.cm_websocket_addresses)
  return _s;
}
inline const std::string& CMsgClientCMList::_internal_cm_websocket_addresses(int index) const {
  return cm_websocket_addresses_.Get(index);
}
inline const std::string& CMsgClientCMList::cm_websocket_addresses(int index) const {
  // @@protoc_insertion_point(field_get:CMsgClientCMList.cm_websocket_addresses)
  return _internal_cm_websocket_addresses(index);
}
inline std::string* CMsgClientCMList::mutable_cm_websocket_addresses(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgClientCMList.cm_websocket_addresses)
  return cm_websocket_addresses_.Mutable(index);
}
inline void CMsgClientCMList::set_cm_websocket_addresses(int index, const std::string& value) {
  cm_websocket_addresses_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:CMsgClientCMList.cm_websocket_addresses)
}
inline void CMsgClientCMList::set_cm_websocket_addresses(int index, std::string&& value) {
  cm_websocket_addresses_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:CMsgClientCMList.cm_websocket_addresses)
}
inline void CMsgClientCMList::set_cm_websocket_addresses(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cm_websocket_addresses_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgClientCMList.cm_websocket_addresses)
}
inline void CMsgClientCMList::set_cm_websocket_addresses(int index, const char* value, size_t size) {
  cm_websocket_addresses_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgClientCMList.cm_websocket_addresses)
}
inline std::string* CMsgClientCMList::_internal_add_cm_websocket_addresses() {
  return cm_websocket_addresses_.Add();
}
inline void CMsgClientCMList::add_cm_websocket_addresses(const std::string& value) {
  cm_websocket_addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CMsgClientCMList.cm_websocket_addresses)
}
inline void CMsgClientCMList::add_cm_websocket_addresses(std::string&& value) {
  cm_websocket_addresses_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CMsgClientCMList.cm_websocket_addresses)
}
inline void CMsgClientCMList::add_cm_websocket_addresses(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cm_websocket_addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CMsgClientCMList.cm_websocket_addresses)
}
inline void CMsgClientCMList::add_cm_websocket_addresses(const char* value, size_t size) {
  cm_websocket_addresses_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CMsgClientCMList.cm_websocket_addresses)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CMsgClientCMList::cm_websocket_addresses() const {
  // @@protoc_insertion_point(field_list:CMsgClientCMList.cm_websocket_addresses)
  return cm_websocket_addresses_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CMsgClientCMList::mutable_cm_websocket_addresses() {
  // @@protoc_insertion_point(field_mutable_list:CMsgClientCMList.cm_websocket_addresses)
  return &cm_websocket_addresses_;
}

// optional uint32 percent_default_to_websocket = 4;
inline bool CMsgClientCMList::_internal_has_percent_default_to_websocket() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientCMList::has_percent_default_to_websocket() const {
  return _internal_has_percent_default_to_websocket();
}
inline void CMsgClientCMList::clear_percent_default_to_websocket() {
  percent_default_to_websocket_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgClientCMList::_internal_percent_default_to_websocket() const {
  return percent_default_to_websocket_;
}
inline uint32_t CMsgClientCMList::percent_default_to_websocket() const {
  // @@protoc_insertion_point(field_get:CMsgClientCMList.percent_default_to_websocket)
  return _internal_percent_default_to_websocket();
}
inline void CMsgClientCMList::_internal_set_percent_default_to_websocket(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  percent_default_to_websocket_ = value;
}
inline void CMsgClientCMList::set_percent_default_to_websocket(uint32_t value) {
  _internal_set_percent_default_to_websocket(value);
  // @@protoc_insertion_point(field_set:CMsgClientCMList.percent_default_to_websocket)
}

// -------------------------------------------------------------------

// CMsgClientP2PConnectionInfo

// optional fixed64 steam_id_dest = 1;
inline bool CMsgClientP2PConnectionInfo::_internal_has_steam_id_dest() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientP2PConnectionInfo::has_steam_id_dest() const {
  return _internal_has_steam_id_dest();
}
inline void CMsgClientP2PConnectionInfo::clear_steam_id_dest() {
  steam_id_dest_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CMsgClientP2PConnectionInfo::_internal_steam_id_dest() const {
  return steam_id_dest_;
}
inline uint64_t CMsgClientP2PConnectionInfo::steam_id_dest() const {
  // @@protoc_insertion_point(field_get:CMsgClientP2PConnectionInfo.steam_id_dest)
  return _internal_steam_id_dest();
}
inline void CMsgClientP2PConnectionInfo::_internal_set_steam_id_dest(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  steam_id_dest_ = value;
}
inline void CMsgClientP2PConnectionInfo::set_steam_id_dest(uint64_t value) {
  _internal_set_steam_id_dest(value);
  // @@protoc_insertion_point(field_set:CMsgClientP2PConnectionInfo.steam_id_dest)
}

// optional fixed64 steam_id_src = 2;
inline bool CMsgClientP2PConnectionInfo::_internal_has_steam_id_src() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientP2PConnectionInfo::has_steam_id_src() const {
  return _internal_has_steam_id_src();
}
inline void CMsgClientP2PConnectionInfo::clear_steam_id_src() {
  steam_id_src_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline uint64_t CMsgClientP2PConnectionInfo::_internal_steam_id_src() const {
  return steam_id_src_;
}
inline uint64_t CMsgClientP2PConnectionInfo::steam_id_src() const {
  // @@protoc_insertion_point(field_get:CMsgClientP2PConnectionInfo.steam_id_src)
  return _internal_steam_id_src();
}
inline void CMsgClientP2PConnectionInfo::_internal_set_steam_id_src(uint64_t value) {
  _has_bits_[0] |= 0x00000008u;
  steam_id_src_ = value;
}
inline void CMsgClientP2PConnectionInfo::set_steam_id_src(uint64_t value) {
  _internal_set_steam_id_src(value);
  // @@protoc_insertion_point(field_set:CMsgClientP2PConnectionInfo.steam_id_src)
}

// optional uint32 app_id = 3;
inline bool CMsgClientP2PConnectionInfo::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgClientP2PConnectionInfo::has_app_id() const {
  return _internal_has_app_id();
}
inline void CMsgClientP2PConnectionInfo::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgClientP2PConnectionInfo::_internal_app_id() const {
  return app_id_;
}
inline uint32_t CMsgClientP2PConnectionInfo::app_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientP2PConnectionInfo.app_id)
  return _internal_app_id();
}
inline void CMsgClientP2PConnectionInfo::_internal_set_app_id(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  app_id_ = value;
}
inline void CMsgClientP2PConnectionInfo::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientP2PConnectionInfo.app_id)
}

// optional bytes candidate = 4;
inline bool CMsgClientP2PConnectionInfo::_internal_has_candidate() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientP2PConnectionInfo::has_candidate() const {
  return _internal_has_candidate();
}
inline void CMsgClientP2PConnectionInfo::clear_candidate() {
  candidate_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientP2PConnectionInfo::candidate() const {
  // @@protoc_insertion_point(field_get:CMsgClientP2PConnectionInfo.candidate)
  return _internal_candidate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientP2PConnectionInfo::set_candidate(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 candidate_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientP2PConnectionInfo.candidate)
}
inline std::string* CMsgClientP2PConnectionInfo::mutable_candidate() {
  std::string* _s = _internal_mutable_candidate();
  // @@protoc_insertion_point(field_mutable:CMsgClientP2PConnectionInfo.candidate)
  return _s;
}
inline const std::string& CMsgClientP2PConnectionInfo::_internal_candidate() const {
  return candidate_.Get();
}
inline void CMsgClientP2PConnectionInfo::_internal_set_candidate(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  candidate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientP2PConnectionInfo::_internal_mutable_candidate() {
  _has_bits_[0] |= 0x00000001u;
  return candidate_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientP2PConnectionInfo::release_candidate() {
  // @@protoc_insertion_point(field_release:CMsgClientP2PConnectionInfo.candidate)
  if (!_internal_has_candidate()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = candidate_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (candidate_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    candidate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientP2PConnectionInfo::set_allocated_candidate(std::string* candidate) {
  if (candidate != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  candidate_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), candidate,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (candidate_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    candidate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientP2PConnectionInfo.candidate)
}

// optional fixed64 legacy_connection_id_src = 5;
inline bool CMsgClientP2PConnectionInfo::_internal_has_legacy_connection_id_src() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgClientP2PConnectionInfo::has_legacy_connection_id_src() const {
  return _internal_has_legacy_connection_id_src();
}
inline void CMsgClientP2PConnectionInfo::clear_legacy_connection_id_src() {
  legacy_connection_id_src_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000010u;
}
inline uint64_t CMsgClientP2PConnectionInfo::_internal_legacy_connection_id_src() const {
  return legacy_connection_id_src_;
}
inline uint64_t CMsgClientP2PConnectionInfo::legacy_connection_id_src() const {
  // @@protoc_insertion_point(field_get:CMsgClientP2PConnectionInfo.legacy_connection_id_src)
  return _internal_legacy_connection_id_src();
}
inline void CMsgClientP2PConnectionInfo::_internal_set_legacy_connection_id_src(uint64_t value) {
  _has_bits_[0] |= 0x00000010u;
  legacy_connection_id_src_ = value;
}
inline void CMsgClientP2PConnectionInfo::set_legacy_connection_id_src(uint64_t value) {
  _internal_set_legacy_connection_id_src(value);
  // @@protoc_insertion_point(field_set:CMsgClientP2PConnectionInfo.legacy_connection_id_src)
}

// optional bytes rendezvous = 6;
inline bool CMsgClientP2PConnectionInfo::_internal_has_rendezvous() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientP2PConnectionInfo::has_rendezvous() const {
  return _internal_has_rendezvous();
}
inline void CMsgClientP2PConnectionInfo::clear_rendezvous() {
  rendezvous_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgClientP2PConnectionInfo::rendezvous() const {
  // @@protoc_insertion_point(field_get:CMsgClientP2PConnectionInfo.rendezvous)
  return _internal_rendezvous();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientP2PConnectionInfo::set_rendezvous(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 rendezvous_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientP2PConnectionInfo.rendezvous)
}
inline std::string* CMsgClientP2PConnectionInfo::mutable_rendezvous() {
  std::string* _s = _internal_mutable_rendezvous();
  // @@protoc_insertion_point(field_mutable:CMsgClientP2PConnectionInfo.rendezvous)
  return _s;
}
inline const std::string& CMsgClientP2PConnectionInfo::_internal_rendezvous() const {
  return rendezvous_.Get();
}
inline void CMsgClientP2PConnectionInfo::_internal_set_rendezvous(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  rendezvous_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientP2PConnectionInfo::_internal_mutable_rendezvous() {
  _has_bits_[0] |= 0x00000002u;
  return rendezvous_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientP2PConnectionInfo::release_rendezvous() {
  // @@protoc_insertion_point(field_release:CMsgClientP2PConnectionInfo.rendezvous)
  if (!_internal_has_rendezvous()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = rendezvous_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (rendezvous_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    rendezvous_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientP2PConnectionInfo::set_allocated_rendezvous(std::string* rendezvous) {
  if (rendezvous != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  rendezvous_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rendezvous,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (rendezvous_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    rendezvous_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientP2PConnectionInfo.rendezvous)
}

// -------------------------------------------------------------------

// CMsgClientP2PConnectionFailInfo

// optional fixed64 steam_id_dest = 1;
inline bool CMsgClientP2PConnectionFailInfo::_internal_has_steam_id_dest() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientP2PConnectionFailInfo::has_steam_id_dest() const {
  return _internal_has_steam_id_dest();
}
inline void CMsgClientP2PConnectionFailInfo::clear_steam_id_dest() {
  steam_id_dest_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CMsgClientP2PConnectionFailInfo::_internal_steam_id_dest() const {
  return steam_id_dest_;
}
inline uint64_t CMsgClientP2PConnectionFailInfo::steam_id_dest() const {
  // @@protoc_insertion_point(field_get:CMsgClientP2PConnectionFailInfo.steam_id_dest)
  return _internal_steam_id_dest();
}
inline void CMsgClientP2PConnectionFailInfo::_internal_set_steam_id_dest(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  steam_id_dest_ = value;
}
inline void CMsgClientP2PConnectionFailInfo::set_steam_id_dest(uint64_t value) {
  _internal_set_steam_id_dest(value);
  // @@protoc_insertion_point(field_set:CMsgClientP2PConnectionFailInfo.steam_id_dest)
}

// optional fixed64 steam_id_src = 2;
inline bool CMsgClientP2PConnectionFailInfo::_internal_has_steam_id_src() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientP2PConnectionFailInfo::has_steam_id_src() const {
  return _internal_has_steam_id_src();
}
inline void CMsgClientP2PConnectionFailInfo::clear_steam_id_src() {
  steam_id_src_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CMsgClientP2PConnectionFailInfo::_internal_steam_id_src() const {
  return steam_id_src_;
}
inline uint64_t CMsgClientP2PConnectionFailInfo::steam_id_src() const {
  // @@protoc_insertion_point(field_get:CMsgClientP2PConnectionFailInfo.steam_id_src)
  return _internal_steam_id_src();
}
inline void CMsgClientP2PConnectionFailInfo::_internal_set_steam_id_src(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  steam_id_src_ = value;
}
inline void CMsgClientP2PConnectionFailInfo::set_steam_id_src(uint64_t value) {
  _internal_set_steam_id_src(value);
  // @@protoc_insertion_point(field_set:CMsgClientP2PConnectionFailInfo.steam_id_src)
}

// optional uint32 app_id = 3;
inline bool CMsgClientP2PConnectionFailInfo::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientP2PConnectionFailInfo::has_app_id() const {
  return _internal_has_app_id();
}
inline void CMsgClientP2PConnectionFailInfo::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgClientP2PConnectionFailInfo::_internal_app_id() const {
  return app_id_;
}
inline uint32_t CMsgClientP2PConnectionFailInfo::app_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientP2PConnectionFailInfo.app_id)
  return _internal_app_id();
}
inline void CMsgClientP2PConnectionFailInfo::_internal_set_app_id(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  app_id_ = value;
}
inline void CMsgClientP2PConnectionFailInfo::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientP2PConnectionFailInfo.app_id)
}

// optional uint32 ep2p_session_error = 4;
inline bool CMsgClientP2PConnectionFailInfo::_internal_has_ep2p_session_error() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgClientP2PConnectionFailInfo::has_ep2p_session_error() const {
  return _internal_has_ep2p_session_error();
}
inline void CMsgClientP2PConnectionFailInfo::clear_ep2p_session_error() {
  ep2p_session_error_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgClientP2PConnectionFailInfo::_internal_ep2p_session_error() const {
  return ep2p_session_error_;
}
inline uint32_t CMsgClientP2PConnectionFailInfo::ep2p_session_error() const {
  // @@protoc_insertion_point(field_get:CMsgClientP2PConnectionFailInfo.ep2p_session_error)
  return _internal_ep2p_session_error();
}
inline void CMsgClientP2PConnectionFailInfo::_internal_set_ep2p_session_error(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  ep2p_session_error_ = value;
}
inline void CMsgClientP2PConnectionFailInfo::set_ep2p_session_error(uint32_t value) {
  _internal_set_ep2p_session_error(value);
  // @@protoc_insertion_point(field_set:CMsgClientP2PConnectionFailInfo.ep2p_session_error)
}

// optional fixed64 connection_id_dest = 5;
inline bool CMsgClientP2PConnectionFailInfo::_internal_has_connection_id_dest() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgClientP2PConnectionFailInfo::has_connection_id_dest() const {
  return _internal_has_connection_id_dest();
}
inline void CMsgClientP2PConnectionFailInfo::clear_connection_id_dest() {
  connection_id_dest_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000020u;
}
inline uint64_t CMsgClientP2PConnectionFailInfo::_internal_connection_id_dest() const {
  return connection_id_dest_;
}
inline uint64_t CMsgClientP2PConnectionFailInfo::connection_id_dest() const {
  // @@protoc_insertion_point(field_get:CMsgClientP2PConnectionFailInfo.connection_id_dest)
  return _internal_connection_id_dest();
}
inline void CMsgClientP2PConnectionFailInfo::_internal_set_connection_id_dest(uint64_t value) {
  _has_bits_[0] |= 0x00000020u;
  connection_id_dest_ = value;
}
inline void CMsgClientP2PConnectionFailInfo::set_connection_id_dest(uint64_t value) {
  _internal_set_connection_id_dest(value);
  // @@protoc_insertion_point(field_set:CMsgClientP2PConnectionFailInfo.connection_id_dest)
}

// optional uint32 close_reason = 7;
inline bool CMsgClientP2PConnectionFailInfo::_internal_has_close_reason() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgClientP2PConnectionFailInfo::has_close_reason() const {
  return _internal_has_close_reason();
}
inline void CMsgClientP2PConnectionFailInfo::clear_close_reason() {
  close_reason_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgClientP2PConnectionFailInfo::_internal_close_reason() const {
  return close_reason_;
}
inline uint32_t CMsgClientP2PConnectionFailInfo::close_reason() const {
  // @@protoc_insertion_point(field_get:CMsgClientP2PConnectionFailInfo.close_reason)
  return _internal_close_reason();
}
inline void CMsgClientP2PConnectionFailInfo::_internal_set_close_reason(uint32_t value) {
  _has_bits_[0] |= 0x00000040u;
  close_reason_ = value;
}
inline void CMsgClientP2PConnectionFailInfo::set_close_reason(uint32_t value) {
  _internal_set_close_reason(value);
  // @@protoc_insertion_point(field_set:CMsgClientP2PConnectionFailInfo.close_reason)
}

// optional string close_message = 8;
inline bool CMsgClientP2PConnectionFailInfo::_internal_has_close_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientP2PConnectionFailInfo::has_close_message() const {
  return _internal_has_close_message();
}
inline void CMsgClientP2PConnectionFailInfo::clear_close_message() {
  close_message_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientP2PConnectionFailInfo::close_message() const {
  // @@protoc_insertion_point(field_get:CMsgClientP2PConnectionFailInfo.close_message)
  return _internal_close_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientP2PConnectionFailInfo::set_close_message(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 close_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientP2PConnectionFailInfo.close_message)
}
inline std::string* CMsgClientP2PConnectionFailInfo::mutable_close_message() {
  std::string* _s = _internal_mutable_close_message();
  // @@protoc_insertion_point(field_mutable:CMsgClientP2PConnectionFailInfo.close_message)
  return _s;
}
inline const std::string& CMsgClientP2PConnectionFailInfo::_internal_close_message() const {
  return close_message_.Get();
}
inline void CMsgClientP2PConnectionFailInfo::_internal_set_close_message(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  close_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientP2PConnectionFailInfo::_internal_mutable_close_message() {
  _has_bits_[0] |= 0x00000001u;
  return close_message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientP2PConnectionFailInfo::release_close_message() {
  // @@protoc_insertion_point(field_release:CMsgClientP2PConnectionFailInfo.close_message)
  if (!_internal_has_close_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = close_message_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (close_message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    close_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientP2PConnectionFailInfo::set_allocated_close_message(std::string* close_message) {
  if (close_message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  close_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), close_message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (close_message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    close_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientP2PConnectionFailInfo.close_message)
}

// -------------------------------------------------------------------

// CMsgClientNetworkingCertRequest

// optional bytes key_data = 2;
inline bool CMsgClientNetworkingCertRequest::_internal_has_key_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientNetworkingCertRequest::has_key_data() const {
  return _internal_has_key_data();
}
inline void CMsgClientNetworkingCertRequest::clear_key_data() {
  key_data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientNetworkingCertRequest::key_data() const {
  // @@protoc_insertion_point(field_get:CMsgClientNetworkingCertRequest.key_data)
  return _internal_key_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientNetworkingCertRequest::set_key_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 key_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientNetworkingCertRequest.key_data)
}
inline std::string* CMsgClientNetworkingCertRequest::mutable_key_data() {
  std::string* _s = _internal_mutable_key_data();
  // @@protoc_insertion_point(field_mutable:CMsgClientNetworkingCertRequest.key_data)
  return _s;
}
inline const std::string& CMsgClientNetworkingCertRequest::_internal_key_data() const {
  return key_data_.Get();
}
inline void CMsgClientNetworkingCertRequest::_internal_set_key_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientNetworkingCertRequest::_internal_mutable_key_data() {
  _has_bits_[0] |= 0x00000001u;
  return key_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientNetworkingCertRequest::release_key_data() {
  // @@protoc_insertion_point(field_release:CMsgClientNetworkingCertRequest.key_data)
  if (!_internal_has_key_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = key_data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientNetworkingCertRequest::set_allocated_key_data(std::string* key_data) {
  if (key_data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key_data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientNetworkingCertRequest.key_data)
}

// optional uint32 app_id = 3;
inline bool CMsgClientNetworkingCertRequest::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientNetworkingCertRequest::has_app_id() const {
  return _internal_has_app_id();
}
inline void CMsgClientNetworkingCertRequest::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgClientNetworkingCertRequest::_internal_app_id() const {
  return app_id_;
}
inline uint32_t CMsgClientNetworkingCertRequest::app_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientNetworkingCertRequest.app_id)
  return _internal_app_id();
}
inline void CMsgClientNetworkingCertRequest::_internal_set_app_id(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  app_id_ = value;
}
inline void CMsgClientNetworkingCertRequest::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientNetworkingCertRequest.app_id)
}

// -------------------------------------------------------------------

// CMsgClientNetworkingCertReply

// optional bytes cert = 4;
inline bool CMsgClientNetworkingCertReply::_internal_has_cert() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientNetworkingCertReply::has_cert() const {
  return _internal_has_cert();
}
inline void CMsgClientNetworkingCertReply::clear_cert() {
  cert_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientNetworkingCertReply::cert() const {
  // @@protoc_insertion_point(field_get:CMsgClientNetworkingCertReply.cert)
  return _internal_cert();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientNetworkingCertReply::set_cert(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 cert_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientNetworkingCertReply.cert)
}
inline std::string* CMsgClientNetworkingCertReply::mutable_cert() {
  std::string* _s = _internal_mutable_cert();
  // @@protoc_insertion_point(field_mutable:CMsgClientNetworkingCertReply.cert)
  return _s;
}
inline const std::string& CMsgClientNetworkingCertReply::_internal_cert() const {
  return cert_.Get();
}
inline void CMsgClientNetworkingCertReply::_internal_set_cert(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  cert_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientNetworkingCertReply::_internal_mutable_cert() {
  _has_bits_[0] |= 0x00000001u;
  return cert_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientNetworkingCertReply::release_cert() {
  // @@protoc_insertion_point(field_release:CMsgClientNetworkingCertReply.cert)
  if (!_internal_has_cert()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = cert_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cert_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    cert_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientNetworkingCertReply::set_allocated_cert(std::string* cert) {
  if (cert != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  cert_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cert,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cert_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    cert_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientNetworkingCertReply.cert)
}

// optional fixed64 ca_key_id = 5;
inline bool CMsgClientNetworkingCertReply::_internal_has_ca_key_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientNetworkingCertReply::has_ca_key_id() const {
  return _internal_has_ca_key_id();
}
inline void CMsgClientNetworkingCertReply::clear_ca_key_id() {
  ca_key_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CMsgClientNetworkingCertReply::_internal_ca_key_id() const {
  return ca_key_id_;
}
inline uint64_t CMsgClientNetworkingCertReply::ca_key_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientNetworkingCertReply.ca_key_id)
  return _internal_ca_key_id();
}
inline void CMsgClientNetworkingCertReply::_internal_set_ca_key_id(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  ca_key_id_ = value;
}
inline void CMsgClientNetworkingCertReply::set_ca_key_id(uint64_t value) {
  _internal_set_ca_key_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientNetworkingCertReply.ca_key_id)
}

// optional bytes ca_signature = 6;
inline bool CMsgClientNetworkingCertReply::_internal_has_ca_signature() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientNetworkingCertReply::has_ca_signature() const {
  return _internal_has_ca_signature();
}
inline void CMsgClientNetworkingCertReply::clear_ca_signature() {
  ca_signature_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgClientNetworkingCertReply::ca_signature() const {
  // @@protoc_insertion_point(field_get:CMsgClientNetworkingCertReply.ca_signature)
  return _internal_ca_signature();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientNetworkingCertReply::set_ca_signature(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 ca_signature_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientNetworkingCertReply.ca_signature)
}
inline std::string* CMsgClientNetworkingCertReply::mutable_ca_signature() {
  std::string* _s = _internal_mutable_ca_signature();
  // @@protoc_insertion_point(field_mutable:CMsgClientNetworkingCertReply.ca_signature)
  return _s;
}
inline const std::string& CMsgClientNetworkingCertReply::_internal_ca_signature() const {
  return ca_signature_.Get();
}
inline void CMsgClientNetworkingCertReply::_internal_set_ca_signature(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  ca_signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientNetworkingCertReply::_internal_mutable_ca_signature() {
  _has_bits_[0] |= 0x00000002u;
  return ca_signature_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientNetworkingCertReply::release_ca_signature() {
  // @@protoc_insertion_point(field_release:CMsgClientNetworkingCertReply.ca_signature)
  if (!_internal_has_ca_signature()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = ca_signature_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ca_signature_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ca_signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientNetworkingCertReply::set_allocated_ca_signature(std::string* ca_signature) {
  if (ca_signature != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ca_signature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ca_signature,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ca_signature_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ca_signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientNetworkingCertReply.ca_signature)
}

// -------------------------------------------------------------------

// CMsgClientNetworkingMobileCertRequest

// optional uint32 app_id = 1;
inline bool CMsgClientNetworkingMobileCertRequest::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientNetworkingMobileCertRequest::has_app_id() const {
  return _internal_has_app_id();
}
inline void CMsgClientNetworkingMobileCertRequest::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgClientNetworkingMobileCertRequest::_internal_app_id() const {
  return app_id_;
}
inline uint32_t CMsgClientNetworkingMobileCertRequest::app_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientNetworkingMobileCertRequest.app_id)
  return _internal_app_id();
}
inline void CMsgClientNetworkingMobileCertRequest::_internal_set_app_id(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  app_id_ = value;
}
inline void CMsgClientNetworkingMobileCertRequest::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientNetworkingMobileCertRequest.app_id)
}

// -------------------------------------------------------------------

// CMsgClientNetworkingMobileCertReply

// optional string encoded_cert = 1;
inline bool CMsgClientNetworkingMobileCertReply::_internal_has_encoded_cert() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientNetworkingMobileCertReply::has_encoded_cert() const {
  return _internal_has_encoded_cert();
}
inline void CMsgClientNetworkingMobileCertReply::clear_encoded_cert() {
  encoded_cert_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientNetworkingMobileCertReply::encoded_cert() const {
  // @@protoc_insertion_point(field_get:CMsgClientNetworkingMobileCertReply.encoded_cert)
  return _internal_encoded_cert();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientNetworkingMobileCertReply::set_encoded_cert(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 encoded_cert_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientNetworkingMobileCertReply.encoded_cert)
}
inline std::string* CMsgClientNetworkingMobileCertReply::mutable_encoded_cert() {
  std::string* _s = _internal_mutable_encoded_cert();
  // @@protoc_insertion_point(field_mutable:CMsgClientNetworkingMobileCertReply.encoded_cert)
  return _s;
}
inline const std::string& CMsgClientNetworkingMobileCertReply::_internal_encoded_cert() const {
  return encoded_cert_.Get();
}
inline void CMsgClientNetworkingMobileCertReply::_internal_set_encoded_cert(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  encoded_cert_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientNetworkingMobileCertReply::_internal_mutable_encoded_cert() {
  _has_bits_[0] |= 0x00000001u;
  return encoded_cert_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientNetworkingMobileCertReply::release_encoded_cert() {
  // @@protoc_insertion_point(field_release:CMsgClientNetworkingMobileCertReply.encoded_cert)
  if (!_internal_has_encoded_cert()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = encoded_cert_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (encoded_cert_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    encoded_cert_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientNetworkingMobileCertReply::set_allocated_encoded_cert(std::string* encoded_cert) {
  if (encoded_cert != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  encoded_cert_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encoded_cert,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (encoded_cert_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    encoded_cert_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientNetworkingMobileCertReply.encoded_cert)
}

// -------------------------------------------------------------------

// CMsgClientGetAppOwnershipTicket

// optional uint32 app_id = 1;
inline bool CMsgClientGetAppOwnershipTicket::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientGetAppOwnershipTicket::has_app_id() const {
  return _internal_has_app_id();
}
inline void CMsgClientGetAppOwnershipTicket::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgClientGetAppOwnershipTicket::_internal_app_id() const {
  return app_id_;
}
inline uint32_t CMsgClientGetAppOwnershipTicket::app_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientGetAppOwnershipTicket.app_id)
  return _internal_app_id();
}
inline void CMsgClientGetAppOwnershipTicket::_internal_set_app_id(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  app_id_ = value;
}
inline void CMsgClientGetAppOwnershipTicket::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientGetAppOwnershipTicket.app_id)
}

// -------------------------------------------------------------------

// CMsgClientGetAppOwnershipTicketResponse

// optional uint32 eresult = 1 [default = 2];
inline bool CMsgClientGetAppOwnershipTicketResponse::_internal_has_eresult() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientGetAppOwnershipTicketResponse::has_eresult() const {
  return _internal_has_eresult();
}
inline void CMsgClientGetAppOwnershipTicketResponse::clear_eresult() {
  eresult_ = 2u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgClientGetAppOwnershipTicketResponse::_internal_eresult() const {
  return eresult_;
}
inline uint32_t CMsgClientGetAppOwnershipTicketResponse::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgClientGetAppOwnershipTicketResponse.eresult)
  return _internal_eresult();
}
inline void CMsgClientGetAppOwnershipTicketResponse::_internal_set_eresult(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  eresult_ = value;
}
inline void CMsgClientGetAppOwnershipTicketResponse::set_eresult(uint32_t value) {
  _internal_set_eresult(value);
  // @@protoc_insertion_point(field_set:CMsgClientGetAppOwnershipTicketResponse.eresult)
}

// optional uint32 app_id = 2;
inline bool CMsgClientGetAppOwnershipTicketResponse::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientGetAppOwnershipTicketResponse::has_app_id() const {
  return _internal_has_app_id();
}
inline void CMsgClientGetAppOwnershipTicketResponse::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgClientGetAppOwnershipTicketResponse::_internal_app_id() const {
  return app_id_;
}
inline uint32_t CMsgClientGetAppOwnershipTicketResponse::app_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientGetAppOwnershipTicketResponse.app_id)
  return _internal_app_id();
}
inline void CMsgClientGetAppOwnershipTicketResponse::_internal_set_app_id(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  app_id_ = value;
}
inline void CMsgClientGetAppOwnershipTicketResponse::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientGetAppOwnershipTicketResponse.app_id)
}

// optional bytes ticket = 3;
inline bool CMsgClientGetAppOwnershipTicketResponse::_internal_has_ticket() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientGetAppOwnershipTicketResponse::has_ticket() const {
  return _internal_has_ticket();
}
inline void CMsgClientGetAppOwnershipTicketResponse::clear_ticket() {
  ticket_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientGetAppOwnershipTicketResponse::ticket() const {
  // @@protoc_insertion_point(field_get:CMsgClientGetAppOwnershipTicketResponse.ticket)
  return _internal_ticket();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientGetAppOwnershipTicketResponse::set_ticket(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 ticket_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientGetAppOwnershipTicketResponse.ticket)
}
inline std::string* CMsgClientGetAppOwnershipTicketResponse::mutable_ticket() {
  std::string* _s = _internal_mutable_ticket();
  // @@protoc_insertion_point(field_mutable:CMsgClientGetAppOwnershipTicketResponse.ticket)
  return _s;
}
inline const std::string& CMsgClientGetAppOwnershipTicketResponse::_internal_ticket() const {
  return ticket_.Get();
}
inline void CMsgClientGetAppOwnershipTicketResponse::_internal_set_ticket(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ticket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientGetAppOwnershipTicketResponse::_internal_mutable_ticket() {
  _has_bits_[0] |= 0x00000001u;
  return ticket_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientGetAppOwnershipTicketResponse::release_ticket() {
  // @@protoc_insertion_point(field_release:CMsgClientGetAppOwnershipTicketResponse.ticket)
  if (!_internal_has_ticket()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = ticket_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ticket_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ticket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientGetAppOwnershipTicketResponse::set_allocated_ticket(std::string* ticket) {
  if (ticket != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ticket_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ticket,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ticket_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ticket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientGetAppOwnershipTicketResponse.ticket)
}

// -------------------------------------------------------------------

// CMsgClientSessionToken

// optional uint64 token = 1;
inline bool CMsgClientSessionToken::_internal_has_token() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientSessionToken::has_token() const {
  return _internal_has_token();
}
inline void CMsgClientSessionToken::clear_token() {
  token_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgClientSessionToken::_internal_token() const {
  return token_;
}
inline uint64_t CMsgClientSessionToken::token() const {
  // @@protoc_insertion_point(field_get:CMsgClientSessionToken.token)
  return _internal_token();
}
inline void CMsgClientSessionToken::_internal_set_token(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  token_ = value;
}
inline void CMsgClientSessionToken::set_token(uint64_t value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:CMsgClientSessionToken.token)
}

// -------------------------------------------------------------------

// CMsgClientGameConnectTokens

// optional uint32 max_tokens_to_keep = 1 [default = 10];
inline bool CMsgClientGameConnectTokens::_internal_has_max_tokens_to_keep() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientGameConnectTokens::has_max_tokens_to_keep() const {
  return _internal_has_max_tokens_to_keep();
}
inline void CMsgClientGameConnectTokens::clear_max_tokens_to_keep() {
  max_tokens_to_keep_ = 10u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgClientGameConnectTokens::_internal_max_tokens_to_keep() const {
  return max_tokens_to_keep_;
}
inline uint32_t CMsgClientGameConnectTokens::max_tokens_to_keep() const {
  // @@protoc_insertion_point(field_get:CMsgClientGameConnectTokens.max_tokens_to_keep)
  return _internal_max_tokens_to_keep();
}
inline void CMsgClientGameConnectTokens::_internal_set_max_tokens_to_keep(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  max_tokens_to_keep_ = value;
}
inline void CMsgClientGameConnectTokens::set_max_tokens_to_keep(uint32_t value) {
  _internal_set_max_tokens_to_keep(value);
  // @@protoc_insertion_point(field_set:CMsgClientGameConnectTokens.max_tokens_to_keep)
}

// repeated bytes tokens = 2;
inline int CMsgClientGameConnectTokens::_internal_tokens_size() const {
  return tokens_.size();
}
inline int CMsgClientGameConnectTokens::tokens_size() const {
  return _internal_tokens_size();
}
inline void CMsgClientGameConnectTokens::clear_tokens() {
  tokens_.Clear();
}
inline std::string* CMsgClientGameConnectTokens::add_tokens() {
  std::string* _s = _internal_add_tokens();
  // @@protoc_insertion_point(field_add_mutable:CMsgClientGameConnectTokens.tokens)
  return _s;
}
inline const std::string& CMsgClientGameConnectTokens::_internal_tokens(int index) const {
  return tokens_.Get(index);
}
inline const std::string& CMsgClientGameConnectTokens::tokens(int index) const {
  // @@protoc_insertion_point(field_get:CMsgClientGameConnectTokens.tokens)
  return _internal_tokens(index);
}
inline std::string* CMsgClientGameConnectTokens::mutable_tokens(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgClientGameConnectTokens.tokens)
  return tokens_.Mutable(index);
}
inline void CMsgClientGameConnectTokens::set_tokens(int index, const std::string& value) {
  tokens_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:CMsgClientGameConnectTokens.tokens)
}
inline void CMsgClientGameConnectTokens::set_tokens(int index, std::string&& value) {
  tokens_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:CMsgClientGameConnectTokens.tokens)
}
inline void CMsgClientGameConnectTokens::set_tokens(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tokens_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgClientGameConnectTokens.tokens)
}
inline void CMsgClientGameConnectTokens::set_tokens(int index, const void* value, size_t size) {
  tokens_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgClientGameConnectTokens.tokens)
}
inline std::string* CMsgClientGameConnectTokens::_internal_add_tokens() {
  return tokens_.Add();
}
inline void CMsgClientGameConnectTokens::add_tokens(const std::string& value) {
  tokens_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CMsgClientGameConnectTokens.tokens)
}
inline void CMsgClientGameConnectTokens::add_tokens(std::string&& value) {
  tokens_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CMsgClientGameConnectTokens.tokens)
}
inline void CMsgClientGameConnectTokens::add_tokens(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tokens_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CMsgClientGameConnectTokens.tokens)
}
inline void CMsgClientGameConnectTokens::add_tokens(const void* value, size_t size) {
  tokens_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CMsgClientGameConnectTokens.tokens)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CMsgClientGameConnectTokens::tokens() const {
  // @@protoc_insertion_point(field_list:CMsgClientGameConnectTokens.tokens)
  return tokens_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CMsgClientGameConnectTokens::mutable_tokens() {
  // @@protoc_insertion_point(field_mutable_list:CMsgClientGameConnectTokens.tokens)
  return &tokens_;
}

// -------------------------------------------------------------------

// CMsgClientGamesPlayed_ProcessInfo

// optional uint32 process_id = 1;
inline bool CMsgClientGamesPlayed_ProcessInfo::_internal_has_process_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientGamesPlayed_ProcessInfo::has_process_id() const {
  return _internal_has_process_id();
}
inline void CMsgClientGamesPlayed_ProcessInfo::clear_process_id() {
  process_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgClientGamesPlayed_ProcessInfo::_internal_process_id() const {
  return process_id_;
}
inline uint32_t CMsgClientGamesPlayed_ProcessInfo::process_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientGamesPlayed.ProcessInfo.process_id)
  return _internal_process_id();
}
inline void CMsgClientGamesPlayed_ProcessInfo::_internal_set_process_id(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  process_id_ = value;
}
inline void CMsgClientGamesPlayed_ProcessInfo::set_process_id(uint32_t value) {
  _internal_set_process_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientGamesPlayed.ProcessInfo.process_id)
}

// optional uint32 process_id_parent = 2;
inline bool CMsgClientGamesPlayed_ProcessInfo::_internal_has_process_id_parent() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientGamesPlayed_ProcessInfo::has_process_id_parent() const {
  return _internal_has_process_id_parent();
}
inline void CMsgClientGamesPlayed_ProcessInfo::clear_process_id_parent() {
  process_id_parent_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgClientGamesPlayed_ProcessInfo::_internal_process_id_parent() const {
  return process_id_parent_;
}
inline uint32_t CMsgClientGamesPlayed_ProcessInfo::process_id_parent() const {
  // @@protoc_insertion_point(field_get:CMsgClientGamesPlayed.ProcessInfo.process_id_parent)
  return _internal_process_id_parent();
}
inline void CMsgClientGamesPlayed_ProcessInfo::_internal_set_process_id_parent(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  process_id_parent_ = value;
}
inline void CMsgClientGamesPlayed_ProcessInfo::set_process_id_parent(uint32_t value) {
  _internal_set_process_id_parent(value);
  // @@protoc_insertion_point(field_set:CMsgClientGamesPlayed.ProcessInfo.process_id_parent)
}

// optional bool parent_is_steam = 3;
inline bool CMsgClientGamesPlayed_ProcessInfo::_internal_has_parent_is_steam() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientGamesPlayed_ProcessInfo::has_parent_is_steam() const {
  return _internal_has_parent_is_steam();
}
inline void CMsgClientGamesPlayed_ProcessInfo::clear_parent_is_steam() {
  parent_is_steam_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CMsgClientGamesPlayed_ProcessInfo::_internal_parent_is_steam() const {
  return parent_is_steam_;
}
inline bool CMsgClientGamesPlayed_ProcessInfo::parent_is_steam() const {
  // @@protoc_insertion_point(field_get:CMsgClientGamesPlayed.ProcessInfo.parent_is_steam)
  return _internal_parent_is_steam();
}
inline void CMsgClientGamesPlayed_ProcessInfo::_internal_set_parent_is_steam(bool value) {
  _has_bits_[0] |= 0x00000004u;
  parent_is_steam_ = value;
}
inline void CMsgClientGamesPlayed_ProcessInfo::set_parent_is_steam(bool value) {
  _internal_set_parent_is_steam(value);
  // @@protoc_insertion_point(field_set:CMsgClientGamesPlayed.ProcessInfo.parent_is_steam)
}

// -------------------------------------------------------------------

// CMsgClientGamesPlayed_GamePlayed

// optional uint64 steam_id_gs = 1;
inline bool CMsgClientGamesPlayed_GamePlayed::_internal_has_steam_id_gs() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgClientGamesPlayed_GamePlayed::has_steam_id_gs() const {
  return _internal_has_steam_id_gs();
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_steam_id_gs() {
  steam_id_gs_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000200u;
}
inline uint64_t CMsgClientGamesPlayed_GamePlayed::_internal_steam_id_gs() const {
  return steam_id_gs_;
}
inline uint64_t CMsgClientGamesPlayed_GamePlayed::steam_id_gs() const {
  // @@protoc_insertion_point(field_get:CMsgClientGamesPlayed.GamePlayed.steam_id_gs)
  return _internal_steam_id_gs();
}
inline void CMsgClientGamesPlayed_GamePlayed::_internal_set_steam_id_gs(uint64_t value) {
  _has_bits_[0] |= 0x00000200u;
  steam_id_gs_ = value;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_steam_id_gs(uint64_t value) {
  _internal_set_steam_id_gs(value);
  // @@protoc_insertion_point(field_set:CMsgClientGamesPlayed.GamePlayed.steam_id_gs)
}

// optional fixed64 game_id = 2;
inline bool CMsgClientGamesPlayed_GamePlayed::_internal_has_game_id() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgClientGamesPlayed_GamePlayed::has_game_id() const {
  return _internal_has_game_id();
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_game_id() {
  game_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000400u;
}
inline uint64_t CMsgClientGamesPlayed_GamePlayed::_internal_game_id() const {
  return game_id_;
}
inline uint64_t CMsgClientGamesPlayed_GamePlayed::game_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientGamesPlayed.GamePlayed.game_id)
  return _internal_game_id();
}
inline void CMsgClientGamesPlayed_GamePlayed::_internal_set_game_id(uint64_t value) {
  _has_bits_[0] |= 0x00000400u;
  game_id_ = value;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_game_id(uint64_t value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientGamesPlayed.GamePlayed.game_id)
}

// optional uint32 deprecated_game_ip_address = 3;
inline bool CMsgClientGamesPlayed_GamePlayed::_internal_has_deprecated_game_ip_address() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgClientGamesPlayed_GamePlayed::has_deprecated_game_ip_address() const {
  return _internal_has_deprecated_game_ip_address();
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_deprecated_game_ip_address() {
  deprecated_game_ip_address_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline uint32_t CMsgClientGamesPlayed_GamePlayed::_internal_deprecated_game_ip_address() const {
  return deprecated_game_ip_address_;
}
inline uint32_t CMsgClientGamesPlayed_GamePlayed::deprecated_game_ip_address() const {
  // @@protoc_insertion_point(field_get:CMsgClientGamesPlayed.GamePlayed.deprecated_game_ip_address)
  return _internal_deprecated_game_ip_address();
}
inline void CMsgClientGamesPlayed_GamePlayed::_internal_set_deprecated_game_ip_address(uint32_t value) {
  _has_bits_[0] |= 0x00000800u;
  deprecated_game_ip_address_ = value;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_deprecated_game_ip_address(uint32_t value) {
  _internal_set_deprecated_game_ip_address(value);
  // @@protoc_insertion_point(field_set:CMsgClientGamesPlayed.GamePlayed.deprecated_game_ip_address)
}

// optional uint32 game_port = 4;
inline bool CMsgClientGamesPlayed_GamePlayed::_internal_has_game_port() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgClientGamesPlayed_GamePlayed::has_game_port() const {
  return _internal_has_game_port();
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_game_port() {
  game_port_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline uint32_t CMsgClientGamesPlayed_GamePlayed::_internal_game_port() const {
  return game_port_;
}
inline uint32_t CMsgClientGamesPlayed_GamePlayed::game_port() const {
  // @@protoc_insertion_point(field_get:CMsgClientGamesPlayed.GamePlayed.game_port)
  return _internal_game_port();
}
inline void CMsgClientGamesPlayed_GamePlayed::_internal_set_game_port(uint32_t value) {
  _has_bits_[0] |= 0x00001000u;
  game_port_ = value;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_game_port(uint32_t value) {
  _internal_set_game_port(value);
  // @@protoc_insertion_point(field_set:CMsgClientGamesPlayed.GamePlayed.game_port)
}

// optional bool is_secure = 5;
inline bool CMsgClientGamesPlayed_GamePlayed::_internal_has_is_secure() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgClientGamesPlayed_GamePlayed::has_is_secure() const {
  return _internal_has_is_secure();
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_is_secure() {
  is_secure_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool CMsgClientGamesPlayed_GamePlayed::_internal_is_secure() const {
  return is_secure_;
}
inline bool CMsgClientGamesPlayed_GamePlayed::is_secure() const {
  // @@protoc_insertion_point(field_get:CMsgClientGamesPlayed.GamePlayed.is_secure)
  return _internal_is_secure();
}
inline void CMsgClientGamesPlayed_GamePlayed::_internal_set_is_secure(bool value) {
  _has_bits_[0] |= 0x00002000u;
  is_secure_ = value;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_is_secure(bool value) {
  _internal_set_is_secure(value);
  // @@protoc_insertion_point(field_set:CMsgClientGamesPlayed.GamePlayed.is_secure)
}

// optional bytes token = 6;
inline bool CMsgClientGamesPlayed_GamePlayed::_internal_has_token() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientGamesPlayed_GamePlayed::has_token() const {
  return _internal_has_token();
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_token() {
  token_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientGamesPlayed_GamePlayed::token() const {
  // @@protoc_insertion_point(field_get:CMsgClientGamesPlayed.GamePlayed.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientGamesPlayed_GamePlayed::set_token(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 token_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientGamesPlayed.GamePlayed.token)
}
inline std::string* CMsgClientGamesPlayed_GamePlayed::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:CMsgClientGamesPlayed.GamePlayed.token)
  return _s;
}
inline const std::string& CMsgClientGamesPlayed_GamePlayed::_internal_token() const {
  return token_.Get();
}
inline void CMsgClientGamesPlayed_GamePlayed::_internal_set_token(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientGamesPlayed_GamePlayed::_internal_mutable_token() {
  _has_bits_[0] |= 0x00000001u;
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientGamesPlayed_GamePlayed::release_token() {
  // @@protoc_insertion_point(field_release:CMsgClientGamesPlayed.GamePlayed.token)
  if (!_internal_has_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = token_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientGamesPlayed.GamePlayed.token)
}

// optional string game_extra_info = 7;
inline bool CMsgClientGamesPlayed_GamePlayed::_internal_has_game_extra_info() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientGamesPlayed_GamePlayed::has_game_extra_info() const {
  return _internal_has_game_extra_info();
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_game_extra_info() {
  game_extra_info_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgClientGamesPlayed_GamePlayed::game_extra_info() const {
  // @@protoc_insertion_point(field_get:CMsgClientGamesPlayed.GamePlayed.game_extra_info)
  return _internal_game_extra_info();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientGamesPlayed_GamePlayed::set_game_extra_info(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 game_extra_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientGamesPlayed.GamePlayed.game_extra_info)
}
inline std::string* CMsgClientGamesPlayed_GamePlayed::mutable_game_extra_info() {
  std::string* _s = _internal_mutable_game_extra_info();
  // @@protoc_insertion_point(field_mutable:CMsgClientGamesPlayed.GamePlayed.game_extra_info)
  return _s;
}
inline const std::string& CMsgClientGamesPlayed_GamePlayed::_internal_game_extra_info() const {
  return game_extra_info_.Get();
}
inline void CMsgClientGamesPlayed_GamePlayed::_internal_set_game_extra_info(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  game_extra_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientGamesPlayed_GamePlayed::_internal_mutable_game_extra_info() {
  _has_bits_[0] |= 0x00000002u;
  return game_extra_info_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientGamesPlayed_GamePlayed::release_game_extra_info() {
  // @@protoc_insertion_point(field_release:CMsgClientGamesPlayed.GamePlayed.game_extra_info)
  if (!_internal_has_game_extra_info()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = game_extra_info_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (game_extra_info_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    game_extra_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_allocated_game_extra_info(std::string* game_extra_info) {
  if (game_extra_info != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  game_extra_info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), game_extra_info,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (game_extra_info_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    game_extra_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientGamesPlayed.GamePlayed.game_extra_info)
}

// optional bytes game_data_blob = 8;
inline bool CMsgClientGamesPlayed_GamePlayed::_internal_has_game_data_blob() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientGamesPlayed_GamePlayed::has_game_data_blob() const {
  return _internal_has_game_data_blob();
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_game_data_blob() {
  game_data_blob_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CMsgClientGamesPlayed_GamePlayed::game_data_blob() const {
  // @@protoc_insertion_point(field_get:CMsgClientGamesPlayed.GamePlayed.game_data_blob)
  return _internal_game_data_blob();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientGamesPlayed_GamePlayed::set_game_data_blob(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 game_data_blob_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientGamesPlayed.GamePlayed.game_data_blob)
}
inline std::string* CMsgClientGamesPlayed_GamePlayed::mutable_game_data_blob() {
  std::string* _s = _internal_mutable_game_data_blob();
  // @@protoc_insertion_point(field_mutable:CMsgClientGamesPlayed.GamePlayed.game_data_blob)
  return _s;
}
inline const std::string& CMsgClientGamesPlayed_GamePlayed::_internal_game_data_blob() const {
  return game_data_blob_.Get();
}
inline void CMsgClientGamesPlayed_GamePlayed::_internal_set_game_data_blob(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  game_data_blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientGamesPlayed_GamePlayed::_internal_mutable_game_data_blob() {
  _has_bits_[0] |= 0x00000004u;
  return game_data_blob_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientGamesPlayed_GamePlayed::release_game_data_blob() {
  // @@protoc_insertion_point(field_release:CMsgClientGamesPlayed.GamePlayed.game_data_blob)
  if (!_internal_has_game_data_blob()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = game_data_blob_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (game_data_blob_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    game_data_blob_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_allocated_game_data_blob(std::string* game_data_blob) {
  if (game_data_blob != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  game_data_blob_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), game_data_blob,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (game_data_blob_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    game_data_blob_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientGamesPlayed.GamePlayed.game_data_blob)
}

// optional uint32 process_id = 9;
inline bool CMsgClientGamesPlayed_GamePlayed::_internal_has_process_id() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CMsgClientGamesPlayed_GamePlayed::has_process_id() const {
  return _internal_has_process_id();
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_process_id() {
  process_id_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline uint32_t CMsgClientGamesPlayed_GamePlayed::_internal_process_id() const {
  return process_id_;
}
inline uint32_t CMsgClientGamesPlayed_GamePlayed::process_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientGamesPlayed.GamePlayed.process_id)
  return _internal_process_id();
}
inline void CMsgClientGamesPlayed_GamePlayed::_internal_set_process_id(uint32_t value) {
  _has_bits_[0] |= 0x00004000u;
  process_id_ = value;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_process_id(uint32_t value) {
  _internal_set_process_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientGamesPlayed.GamePlayed.process_id)
}

// optional uint32 streaming_provider_id = 10;
inline bool CMsgClientGamesPlayed_GamePlayed::_internal_has_streaming_provider_id() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CMsgClientGamesPlayed_GamePlayed::has_streaming_provider_id() const {
  return _internal_has_streaming_provider_id();
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_streaming_provider_id() {
  streaming_provider_id_ = 0u;
  _has_bits_[0] &= ~0x00008000u;
}
inline uint32_t CMsgClientGamesPlayed_GamePlayed::_internal_streaming_provider_id() const {
  return streaming_provider_id_;
}
inline uint32_t CMsgClientGamesPlayed_GamePlayed::streaming_provider_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientGamesPlayed.GamePlayed.streaming_provider_id)
  return _internal_streaming_provider_id();
}
inline void CMsgClientGamesPlayed_GamePlayed::_internal_set_streaming_provider_id(uint32_t value) {
  _has_bits_[0] |= 0x00008000u;
  streaming_provider_id_ = value;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_streaming_provider_id(uint32_t value) {
  _internal_set_streaming_provider_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientGamesPlayed.GamePlayed.streaming_provider_id)
}

// optional uint32 game_flags = 11;
inline bool CMsgClientGamesPlayed_GamePlayed::_internal_has_game_flags() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CMsgClientGamesPlayed_GamePlayed::has_game_flags() const {
  return _internal_has_game_flags();
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_game_flags() {
  game_flags_ = 0u;
  _has_bits_[0] &= ~0x00010000u;
}
inline uint32_t CMsgClientGamesPlayed_GamePlayed::_internal_game_flags() const {
  return game_flags_;
}
inline uint32_t CMsgClientGamesPlayed_GamePlayed::game_flags() const {
  // @@protoc_insertion_point(field_get:CMsgClientGamesPlayed.GamePlayed.game_flags)
  return _internal_game_flags();
}
inline void CMsgClientGamesPlayed_GamePlayed::_internal_set_game_flags(uint32_t value) {
  _has_bits_[0] |= 0x00010000u;
  game_flags_ = value;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_game_flags(uint32_t value) {
  _internal_set_game_flags(value);
  // @@protoc_insertion_point(field_set:CMsgClientGamesPlayed.GamePlayed.game_flags)
}

// optional uint32 owner_id = 12;
inline bool CMsgClientGamesPlayed_GamePlayed::_internal_has_owner_id() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CMsgClientGamesPlayed_GamePlayed::has_owner_id() const {
  return _internal_has_owner_id();
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_owner_id() {
  owner_id_ = 0u;
  _has_bits_[0] &= ~0x00020000u;
}
inline uint32_t CMsgClientGamesPlayed_GamePlayed::_internal_owner_id() const {
  return owner_id_;
}
inline uint32_t CMsgClientGamesPlayed_GamePlayed::owner_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientGamesPlayed.GamePlayed.owner_id)
  return _internal_owner_id();
}
inline void CMsgClientGamesPlayed_GamePlayed::_internal_set_owner_id(uint32_t value) {
  _has_bits_[0] |= 0x00020000u;
  owner_id_ = value;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_owner_id(uint32_t value) {
  _internal_set_owner_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientGamesPlayed.GamePlayed.owner_id)
}

// optional string vr_hmd_vendor = 13;
inline bool CMsgClientGamesPlayed_GamePlayed::_internal_has_vr_hmd_vendor() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientGamesPlayed_GamePlayed::has_vr_hmd_vendor() const {
  return _internal_has_vr_hmd_vendor();
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_vr_hmd_vendor() {
  vr_hmd_vendor_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CMsgClientGamesPlayed_GamePlayed::vr_hmd_vendor() const {
  // @@protoc_insertion_point(field_get:CMsgClientGamesPlayed.GamePlayed.vr_hmd_vendor)
  return _internal_vr_hmd_vendor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientGamesPlayed_GamePlayed::set_vr_hmd_vendor(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 vr_hmd_vendor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientGamesPlayed.GamePlayed.vr_hmd_vendor)
}
inline std::string* CMsgClientGamesPlayed_GamePlayed::mutable_vr_hmd_vendor() {
  std::string* _s = _internal_mutable_vr_hmd_vendor();
  // @@protoc_insertion_point(field_mutable:CMsgClientGamesPlayed.GamePlayed.vr_hmd_vendor)
  return _s;
}
inline const std::string& CMsgClientGamesPlayed_GamePlayed::_internal_vr_hmd_vendor() const {
  return vr_hmd_vendor_.Get();
}
inline void CMsgClientGamesPlayed_GamePlayed::_internal_set_vr_hmd_vendor(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  vr_hmd_vendor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientGamesPlayed_GamePlayed::_internal_mutable_vr_hmd_vendor() {
  _has_bits_[0] |= 0x00000008u;
  return vr_hmd_vendor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientGamesPlayed_GamePlayed::release_vr_hmd_vendor() {
  // @@protoc_insertion_point(field_release:CMsgClientGamesPlayed.GamePlayed.vr_hmd_vendor)
  if (!_internal_has_vr_hmd_vendor()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = vr_hmd_vendor_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (vr_hmd_vendor_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    vr_hmd_vendor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_allocated_vr_hmd_vendor(std::string* vr_hmd_vendor) {
  if (vr_hmd_vendor != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  vr_hmd_vendor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vr_hmd_vendor,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (vr_hmd_vendor_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    vr_hmd_vendor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientGamesPlayed.GamePlayed.vr_hmd_vendor)
}

// optional string vr_hmd_model = 14;
inline bool CMsgClientGamesPlayed_GamePlayed::_internal_has_vr_hmd_model() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgClientGamesPlayed_GamePlayed::has_vr_hmd_model() const {
  return _internal_has_vr_hmd_model();
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_vr_hmd_model() {
  vr_hmd_model_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& CMsgClientGamesPlayed_GamePlayed::vr_hmd_model() const {
  // @@protoc_insertion_point(field_get:CMsgClientGamesPlayed.GamePlayed.vr_hmd_model)
  return _internal_vr_hmd_model();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientGamesPlayed_GamePlayed::set_vr_hmd_model(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 vr_hmd_model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientGamesPlayed.GamePlayed.vr_hmd_model)
}
inline std::string* CMsgClientGamesPlayed_GamePlayed::mutable_vr_hmd_model() {
  std::string* _s = _internal_mutable_vr_hmd_model();
  // @@protoc_insertion_point(field_mutable:CMsgClientGamesPlayed.GamePlayed.vr_hmd_model)
  return _s;
}
inline const std::string& CMsgClientGamesPlayed_GamePlayed::_internal_vr_hmd_model() const {
  return vr_hmd_model_.Get();
}
inline void CMsgClientGamesPlayed_GamePlayed::_internal_set_vr_hmd_model(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  vr_hmd_model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientGamesPlayed_GamePlayed::_internal_mutable_vr_hmd_model() {
  _has_bits_[0] |= 0x00000010u;
  return vr_hmd_model_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientGamesPlayed_GamePlayed::release_vr_hmd_model() {
  // @@protoc_insertion_point(field_release:CMsgClientGamesPlayed.GamePlayed.vr_hmd_model)
  if (!_internal_has_vr_hmd_model()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  auto* p = vr_hmd_model_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (vr_hmd_model_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    vr_hmd_model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_allocated_vr_hmd_model(std::string* vr_hmd_model) {
  if (vr_hmd_model != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  vr_hmd_model_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vr_hmd_model,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (vr_hmd_model_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    vr_hmd_model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientGamesPlayed.GamePlayed.vr_hmd_model)
}

// optional uint32 launch_option_type = 15 [default = 0];
inline bool CMsgClientGamesPlayed_GamePlayed::_internal_has_launch_option_type() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CMsgClientGamesPlayed_GamePlayed::has_launch_option_type() const {
  return _internal_has_launch_option_type();
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_launch_option_type() {
  launch_option_type_ = 0u;
  _has_bits_[0] &= ~0x00040000u;
}
inline uint32_t CMsgClientGamesPlayed_GamePlayed::_internal_launch_option_type() const {
  return launch_option_type_;
}
inline uint32_t CMsgClientGamesPlayed_GamePlayed::launch_option_type() const {
  // @@protoc_insertion_point(field_get:CMsgClientGamesPlayed.GamePlayed.launch_option_type)
  return _internal_launch_option_type();
}
inline void CMsgClientGamesPlayed_GamePlayed::_internal_set_launch_option_type(uint32_t value) {
  _has_bits_[0] |= 0x00040000u;
  launch_option_type_ = value;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_launch_option_type(uint32_t value) {
  _internal_set_launch_option_type(value);
  // @@protoc_insertion_point(field_set:CMsgClientGamesPlayed.GamePlayed.launch_option_type)
}

// optional int32 primary_controller_type = 16 [default = -1];
inline bool CMsgClientGamesPlayed_GamePlayed::_internal_has_primary_controller_type() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool CMsgClientGamesPlayed_GamePlayed::has_primary_controller_type() const {
  return _internal_has_primary_controller_type();
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_primary_controller_type() {
  primary_controller_type_ = -1;
  _has_bits_[0] &= ~0x40000000u;
}
inline int32_t CMsgClientGamesPlayed_GamePlayed::_internal_primary_controller_type() const {
  return primary_controller_type_;
}
inline int32_t CMsgClientGamesPlayed_GamePlayed::primary_controller_type() const {
  // @@protoc_insertion_point(field_get:CMsgClientGamesPlayed.GamePlayed.primary_controller_type)
  return _internal_primary_controller_type();
}
inline void CMsgClientGamesPlayed_GamePlayed::_internal_set_primary_controller_type(int32_t value) {
  _has_bits_[0] |= 0x40000000u;
  primary_controller_type_ = value;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_primary_controller_type(int32_t value) {
  _internal_set_primary_controller_type(value);
  // @@protoc_insertion_point(field_set:CMsgClientGamesPlayed.GamePlayed.primary_controller_type)
}

// optional string primary_steam_controller_serial = 17;
inline bool CMsgClientGamesPlayed_GamePlayed::_internal_has_primary_steam_controller_serial() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgClientGamesPlayed_GamePlayed::has_primary_steam_controller_serial() const {
  return _internal_has_primary_steam_controller_serial();
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_primary_steam_controller_serial() {
  primary_steam_controller_serial_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& CMsgClientGamesPlayed_GamePlayed::primary_steam_controller_serial() const {
  // @@protoc_insertion_point(field_get:CMsgClientGamesPlayed.GamePlayed.primary_steam_controller_serial)
  return _internal_primary_steam_controller_serial();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientGamesPlayed_GamePlayed::set_primary_steam_controller_serial(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000020u;
 primary_steam_controller_serial_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientGamesPlayed.GamePlayed.primary_steam_controller_serial)
}
inline std::string* CMsgClientGamesPlayed_GamePlayed::mutable_primary_steam_controller_serial() {
  std::string* _s = _internal_mutable_primary_steam_controller_serial();
  // @@protoc_insertion_point(field_mutable:CMsgClientGamesPlayed.GamePlayed.primary_steam_controller_serial)
  return _s;
}
inline const std::string& CMsgClientGamesPlayed_GamePlayed::_internal_primary_steam_controller_serial() const {
  return primary_steam_controller_serial_.Get();
}
inline void CMsgClientGamesPlayed_GamePlayed::_internal_set_primary_steam_controller_serial(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  primary_steam_controller_serial_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientGamesPlayed_GamePlayed::_internal_mutable_primary_steam_controller_serial() {
  _has_bits_[0] |= 0x00000020u;
  return primary_steam_controller_serial_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientGamesPlayed_GamePlayed::release_primary_steam_controller_serial() {
  // @@protoc_insertion_point(field_release:CMsgClientGamesPlayed.GamePlayed.primary_steam_controller_serial)
  if (!_internal_has_primary_steam_controller_serial()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  auto* p = primary_steam_controller_serial_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (primary_steam_controller_serial_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    primary_steam_controller_serial_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_allocated_primary_steam_controller_serial(std::string* primary_steam_controller_serial) {
  if (primary_steam_controller_serial != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  primary_steam_controller_serial_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), primary_steam_controller_serial,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (primary_steam_controller_serial_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    primary_steam_controller_serial_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientGamesPlayed.GamePlayed.primary_steam_controller_serial)
}

// optional uint32 total_steam_controller_count = 18 [default = 0];
inline bool CMsgClientGamesPlayed_GamePlayed::_internal_has_total_steam_controller_count() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool CMsgClientGamesPlayed_GamePlayed::has_total_steam_controller_count() const {
  return _internal_has_total_steam_controller_count();
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_total_steam_controller_count() {
  total_steam_controller_count_ = 0u;
  _has_bits_[0] &= ~0x00080000u;
}
inline uint32_t CMsgClientGamesPlayed_GamePlayed::_internal_total_steam_controller_count() const {
  return total_steam_controller_count_;
}
inline uint32_t CMsgClientGamesPlayed_GamePlayed::total_steam_controller_count() const {
  // @@protoc_insertion_point(field_get:CMsgClientGamesPlayed.GamePlayed.total_steam_controller_count)
  return _internal_total_steam_controller_count();
}
inline void CMsgClientGamesPlayed_GamePlayed::_internal_set_total_steam_controller_count(uint32_t value) {
  _has_bits_[0] |= 0x00080000u;
  total_steam_controller_count_ = value;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_total_steam_controller_count(uint32_t value) {
  _internal_set_total_steam_controller_count(value);
  // @@protoc_insertion_point(field_set:CMsgClientGamesPlayed.GamePlayed.total_steam_controller_count)
}

// optional uint32 total_non_steam_controller_count = 19 [default = 0];
inline bool CMsgClientGamesPlayed_GamePlayed::_internal_has_total_non_steam_controller_count() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool CMsgClientGamesPlayed_GamePlayed::has_total_non_steam_controller_count() const {
  return _internal_has_total_non_steam_controller_count();
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_total_non_steam_controller_count() {
  total_non_steam_controller_count_ = 0u;
  _has_bits_[0] &= ~0x00100000u;
}
inline uint32_t CMsgClientGamesPlayed_GamePlayed::_internal_total_non_steam_controller_count() const {
  return total_non_steam_controller_count_;
}
inline uint32_t CMsgClientGamesPlayed_GamePlayed::total_non_steam_controller_count() const {
  // @@protoc_insertion_point(field_get:CMsgClientGamesPlayed.GamePlayed.total_non_steam_controller_count)
  return _internal_total_non_steam_controller_count();
}
inline void CMsgClientGamesPlayed_GamePlayed::_internal_set_total_non_steam_controller_count(uint32_t value) {
  _has_bits_[0] |= 0x00100000u;
  total_non_steam_controller_count_ = value;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_total_non_steam_controller_count(uint32_t value) {
  _internal_set_total_non_steam_controller_count(value);
  // @@protoc_insertion_point(field_set:CMsgClientGamesPlayed.GamePlayed.total_non_steam_controller_count)
}

// optional uint64 controller_workshop_file_id = 20 [default = 0];
inline bool CMsgClientGamesPlayed_GamePlayed::_internal_has_controller_workshop_file_id() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool CMsgClientGamesPlayed_GamePlayed::has_controller_workshop_file_id() const {
  return _internal_has_controller_workshop_file_id();
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_controller_workshop_file_id() {
  controller_workshop_file_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00200000u;
}
inline uint64_t CMsgClientGamesPlayed_GamePlayed::_internal_controller_workshop_file_id() const {
  return controller_workshop_file_id_;
}
inline uint64_t CMsgClientGamesPlayed_GamePlayed::controller_workshop_file_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientGamesPlayed.GamePlayed.controller_workshop_file_id)
  return _internal_controller_workshop_file_id();
}
inline void CMsgClientGamesPlayed_GamePlayed::_internal_set_controller_workshop_file_id(uint64_t value) {
  _has_bits_[0] |= 0x00200000u;
  controller_workshop_file_id_ = value;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_controller_workshop_file_id(uint64_t value) {
  _internal_set_controller_workshop_file_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientGamesPlayed.GamePlayed.controller_workshop_file_id)
}

// optional uint32 launch_source = 21 [default = 0];
inline bool CMsgClientGamesPlayed_GamePlayed::_internal_has_launch_source() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool CMsgClientGamesPlayed_GamePlayed::has_launch_source() const {
  return _internal_has_launch_source();
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_launch_source() {
  launch_source_ = 0u;
  _has_bits_[0] &= ~0x00400000u;
}
inline uint32_t CMsgClientGamesPlayed_GamePlayed::_internal_launch_source() const {
  return launch_source_;
}
inline uint32_t CMsgClientGamesPlayed_GamePlayed::launch_source() const {
  // @@protoc_insertion_point(field_get:CMsgClientGamesPlayed.GamePlayed.launch_source)
  return _internal_launch_source();
}
inline void CMsgClientGamesPlayed_GamePlayed::_internal_set_launch_source(uint32_t value) {
  _has_bits_[0] |= 0x00400000u;
  launch_source_ = value;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_launch_source(uint32_t value) {
  _internal_set_launch_source(value);
  // @@protoc_insertion_point(field_set:CMsgClientGamesPlayed.GamePlayed.launch_source)
}

// optional uint32 vr_hmd_runtime = 22;
inline bool CMsgClientGamesPlayed_GamePlayed::_internal_has_vr_hmd_runtime() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool CMsgClientGamesPlayed_GamePlayed::has_vr_hmd_runtime() const {
  return _internal_has_vr_hmd_runtime();
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_vr_hmd_runtime() {
  vr_hmd_runtime_ = 0u;
  _has_bits_[0] &= ~0x00800000u;
}
inline uint32_t CMsgClientGamesPlayed_GamePlayed::_internal_vr_hmd_runtime() const {
  return vr_hmd_runtime_;
}
inline uint32_t CMsgClientGamesPlayed_GamePlayed::vr_hmd_runtime() const {
  // @@protoc_insertion_point(field_get:CMsgClientGamesPlayed.GamePlayed.vr_hmd_runtime)
  return _internal_vr_hmd_runtime();
}
inline void CMsgClientGamesPlayed_GamePlayed::_internal_set_vr_hmd_runtime(uint32_t value) {
  _has_bits_[0] |= 0x00800000u;
  vr_hmd_runtime_ = value;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_vr_hmd_runtime(uint32_t value) {
  _internal_set_vr_hmd_runtime(value);
  // @@protoc_insertion_point(field_set:CMsgClientGamesPlayed.GamePlayed.vr_hmd_runtime)
}

// optional .CMsgIPAddress game_ip_address = 23;
inline bool CMsgClientGamesPlayed_GamePlayed::_internal_has_game_ip_address() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || game_ip_address_ != nullptr);
  return value;
}
inline bool CMsgClientGamesPlayed_GamePlayed::has_game_ip_address() const {
  return _internal_has_game_ip_address();
}
inline const ::CMsgIPAddress& CMsgClientGamesPlayed_GamePlayed::_internal_game_ip_address() const {
  const ::CMsgIPAddress* p = game_ip_address_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgIPAddress&>(
      ::_CMsgIPAddress_default_instance_);
}
inline const ::CMsgIPAddress& CMsgClientGamesPlayed_GamePlayed::game_ip_address() const {
  // @@protoc_insertion_point(field_get:CMsgClientGamesPlayed.GamePlayed.game_ip_address)
  return _internal_game_ip_address();
}
inline void CMsgClientGamesPlayed_GamePlayed::unsafe_arena_set_allocated_game_ip_address(
    ::CMsgIPAddress* game_ip_address) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(game_ip_address_);
  }
  game_ip_address_ = game_ip_address;
  if (game_ip_address) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgClientGamesPlayed.GamePlayed.game_ip_address)
}
inline ::CMsgIPAddress* CMsgClientGamesPlayed_GamePlayed::release_game_ip_address() {
  _has_bits_[0] &= ~0x00000100u;
  ::CMsgIPAddress* temp = game_ip_address_;
  game_ip_address_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgIPAddress* CMsgClientGamesPlayed_GamePlayed::unsafe_arena_release_game_ip_address() {
  // @@protoc_insertion_point(field_release:CMsgClientGamesPlayed.GamePlayed.game_ip_address)
  _has_bits_[0] &= ~0x00000100u;
  ::CMsgIPAddress* temp = game_ip_address_;
  game_ip_address_ = nullptr;
  return temp;
}
inline ::CMsgIPAddress* CMsgClientGamesPlayed_GamePlayed::_internal_mutable_game_ip_address() {
  _has_bits_[0] |= 0x00000100u;
  if (game_ip_address_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgIPAddress>(GetArenaForAllocation());
    game_ip_address_ = p;
  }
  return game_ip_address_;
}
inline ::CMsgIPAddress* CMsgClientGamesPlayed_GamePlayed::mutable_game_ip_address() {
  ::CMsgIPAddress* _msg = _internal_mutable_game_ip_address();
  // @@protoc_insertion_point(field_mutable:CMsgClientGamesPlayed.GamePlayed.game_ip_address)
  return _msg;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_allocated_game_ip_address(::CMsgIPAddress* game_ip_address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(game_ip_address_);
  }
  if (game_ip_address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(game_ip_address));
    if (message_arena != submessage_arena) {
      game_ip_address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, game_ip_address, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  game_ip_address_ = game_ip_address;
  // @@protoc_insertion_point(field_set_allocated:CMsgClientGamesPlayed.GamePlayed.game_ip_address)
}

// optional uint32 controller_connection_type = 24 [default = 0];
inline bool CMsgClientGamesPlayed_GamePlayed::_internal_has_controller_connection_type() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool CMsgClientGamesPlayed_GamePlayed::has_controller_connection_type() const {
  return _internal_has_controller_connection_type();
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_controller_connection_type() {
  controller_connection_type_ = 0u;
  _has_bits_[0] &= ~0x01000000u;
}
inline uint32_t CMsgClientGamesPlayed_GamePlayed::_internal_controller_connection_type() const {
  return controller_connection_type_;
}
inline uint32_t CMsgClientGamesPlayed_GamePlayed::controller_connection_type() const {
  // @@protoc_insertion_point(field_get:CMsgClientGamesPlayed.GamePlayed.controller_connection_type)
  return _internal_controller_connection_type();
}
inline void CMsgClientGamesPlayed_GamePlayed::_internal_set_controller_connection_type(uint32_t value) {
  _has_bits_[0] |= 0x01000000u;
  controller_connection_type_ = value;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_controller_connection_type(uint32_t value) {
  _internal_set_controller_connection_type(value);
  // @@protoc_insertion_point(field_set:CMsgClientGamesPlayed.GamePlayed.controller_connection_type)
}

// optional int32 game_os_platform = 25;
inline bool CMsgClientGamesPlayed_GamePlayed::_internal_has_game_os_platform() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool CMsgClientGamesPlayed_GamePlayed::has_game_os_platform() const {
  return _internal_has_game_os_platform();
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_game_os_platform() {
  game_os_platform_ = 0;
  _has_bits_[0] &= ~0x02000000u;
}
inline int32_t CMsgClientGamesPlayed_GamePlayed::_internal_game_os_platform() const {
  return game_os_platform_;
}
inline int32_t CMsgClientGamesPlayed_GamePlayed::game_os_platform() const {
  // @@protoc_insertion_point(field_get:CMsgClientGamesPlayed.GamePlayed.game_os_platform)
  return _internal_game_os_platform();
}
inline void CMsgClientGamesPlayed_GamePlayed::_internal_set_game_os_platform(int32_t value) {
  _has_bits_[0] |= 0x02000000u;
  game_os_platform_ = value;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_game_os_platform(int32_t value) {
  _internal_set_game_os_platform(value);
  // @@protoc_insertion_point(field_set:CMsgClientGamesPlayed.GamePlayed.game_os_platform)
}

// optional uint32 game_build_id = 26;
inline bool CMsgClientGamesPlayed_GamePlayed::_internal_has_game_build_id() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool CMsgClientGamesPlayed_GamePlayed::has_game_build_id() const {
  return _internal_has_game_build_id();
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_game_build_id() {
  game_build_id_ = 0u;
  _has_bits_[0] &= ~0x04000000u;
}
inline uint32_t CMsgClientGamesPlayed_GamePlayed::_internal_game_build_id() const {
  return game_build_id_;
}
inline uint32_t CMsgClientGamesPlayed_GamePlayed::game_build_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientGamesPlayed.GamePlayed.game_build_id)
  return _internal_game_build_id();
}
inline void CMsgClientGamesPlayed_GamePlayed::_internal_set_game_build_id(uint32_t value) {
  _has_bits_[0] |= 0x04000000u;
  game_build_id_ = value;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_game_build_id(uint32_t value) {
  _internal_set_game_build_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientGamesPlayed.GamePlayed.game_build_id)
}

// optional uint32 compat_tool_id = 27 [default = 0];
inline bool CMsgClientGamesPlayed_GamePlayed::_internal_has_compat_tool_id() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool CMsgClientGamesPlayed_GamePlayed::has_compat_tool_id() const {
  return _internal_has_compat_tool_id();
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_compat_tool_id() {
  compat_tool_id_ = 0u;
  _has_bits_[0] &= ~0x08000000u;
}
inline uint32_t CMsgClientGamesPlayed_GamePlayed::_internal_compat_tool_id() const {
  return compat_tool_id_;
}
inline uint32_t CMsgClientGamesPlayed_GamePlayed::compat_tool_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientGamesPlayed.GamePlayed.compat_tool_id)
  return _internal_compat_tool_id();
}
inline void CMsgClientGamesPlayed_GamePlayed::_internal_set_compat_tool_id(uint32_t value) {
  _has_bits_[0] |= 0x08000000u;
  compat_tool_id_ = value;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_compat_tool_id(uint32_t value) {
  _internal_set_compat_tool_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientGamesPlayed.GamePlayed.compat_tool_id)
}

// optional string compat_tool_cmd = 28;
inline bool CMsgClientGamesPlayed_GamePlayed::_internal_has_compat_tool_cmd() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgClientGamesPlayed_GamePlayed::has_compat_tool_cmd() const {
  return _internal_has_compat_tool_cmd();
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_compat_tool_cmd() {
  compat_tool_cmd_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& CMsgClientGamesPlayed_GamePlayed::compat_tool_cmd() const {
  // @@protoc_insertion_point(field_get:CMsgClientGamesPlayed.GamePlayed.compat_tool_cmd)
  return _internal_compat_tool_cmd();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientGamesPlayed_GamePlayed::set_compat_tool_cmd(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000040u;
 compat_tool_cmd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientGamesPlayed.GamePlayed.compat_tool_cmd)
}
inline std::string* CMsgClientGamesPlayed_GamePlayed::mutable_compat_tool_cmd() {
  std::string* _s = _internal_mutable_compat_tool_cmd();
  // @@protoc_insertion_point(field_mutable:CMsgClientGamesPlayed.GamePlayed.compat_tool_cmd)
  return _s;
}
inline const std::string& CMsgClientGamesPlayed_GamePlayed::_internal_compat_tool_cmd() const {
  return compat_tool_cmd_.Get();
}
inline void CMsgClientGamesPlayed_GamePlayed::_internal_set_compat_tool_cmd(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  compat_tool_cmd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientGamesPlayed_GamePlayed::_internal_mutable_compat_tool_cmd() {
  _has_bits_[0] |= 0x00000040u;
  return compat_tool_cmd_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientGamesPlayed_GamePlayed::release_compat_tool_cmd() {
  // @@protoc_insertion_point(field_release:CMsgClientGamesPlayed.GamePlayed.compat_tool_cmd)
  if (!_internal_has_compat_tool_cmd()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  auto* p = compat_tool_cmd_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (compat_tool_cmd_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    compat_tool_cmd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_allocated_compat_tool_cmd(std::string* compat_tool_cmd) {
  if (compat_tool_cmd != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  compat_tool_cmd_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), compat_tool_cmd,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (compat_tool_cmd_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    compat_tool_cmd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientGamesPlayed.GamePlayed.compat_tool_cmd)
}

// optional uint32 compat_tool_build_id = 29;
inline bool CMsgClientGamesPlayed_GamePlayed::_internal_has_compat_tool_build_id() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool CMsgClientGamesPlayed_GamePlayed::has_compat_tool_build_id() const {
  return _internal_has_compat_tool_build_id();
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_compat_tool_build_id() {
  compat_tool_build_id_ = 0u;
  _has_bits_[0] &= ~0x10000000u;
}
inline uint32_t CMsgClientGamesPlayed_GamePlayed::_internal_compat_tool_build_id() const {
  return compat_tool_build_id_;
}
inline uint32_t CMsgClientGamesPlayed_GamePlayed::compat_tool_build_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientGamesPlayed.GamePlayed.compat_tool_build_id)
  return _internal_compat_tool_build_id();
}
inline void CMsgClientGamesPlayed_GamePlayed::_internal_set_compat_tool_build_id(uint32_t value) {
  _has_bits_[0] |= 0x10000000u;
  compat_tool_build_id_ = value;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_compat_tool_build_id(uint32_t value) {
  _internal_set_compat_tool_build_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientGamesPlayed.GamePlayed.compat_tool_build_id)
}

// optional string beta_name = 30;
inline bool CMsgClientGamesPlayed_GamePlayed::_internal_has_beta_name() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgClientGamesPlayed_GamePlayed::has_beta_name() const {
  return _internal_has_beta_name();
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_beta_name() {
  beta_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& CMsgClientGamesPlayed_GamePlayed::beta_name() const {
  // @@protoc_insertion_point(field_get:CMsgClientGamesPlayed.GamePlayed.beta_name)
  return _internal_beta_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientGamesPlayed_GamePlayed::set_beta_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000080u;
 beta_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientGamesPlayed.GamePlayed.beta_name)
}
inline std::string* CMsgClientGamesPlayed_GamePlayed::mutable_beta_name() {
  std::string* _s = _internal_mutable_beta_name();
  // @@protoc_insertion_point(field_mutable:CMsgClientGamesPlayed.GamePlayed.beta_name)
  return _s;
}
inline const std::string& CMsgClientGamesPlayed_GamePlayed::_internal_beta_name() const {
  return beta_name_.Get();
}
inline void CMsgClientGamesPlayed_GamePlayed::_internal_set_beta_name(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  beta_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientGamesPlayed_GamePlayed::_internal_mutable_beta_name() {
  _has_bits_[0] |= 0x00000080u;
  return beta_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientGamesPlayed_GamePlayed::release_beta_name() {
  // @@protoc_insertion_point(field_release:CMsgClientGamesPlayed.GamePlayed.beta_name)
  if (!_internal_has_beta_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  auto* p = beta_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (beta_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    beta_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_allocated_beta_name(std::string* beta_name) {
  if (beta_name != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  beta_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), beta_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (beta_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    beta_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientGamesPlayed.GamePlayed.beta_name)
}

// optional uint32 dlc_context = 31;
inline bool CMsgClientGamesPlayed_GamePlayed::_internal_has_dlc_context() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool CMsgClientGamesPlayed_GamePlayed::has_dlc_context() const {
  return _internal_has_dlc_context();
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_dlc_context() {
  dlc_context_ = 0u;
  _has_bits_[0] &= ~0x20000000u;
}
inline uint32_t CMsgClientGamesPlayed_GamePlayed::_internal_dlc_context() const {
  return dlc_context_;
}
inline uint32_t CMsgClientGamesPlayed_GamePlayed::dlc_context() const {
  // @@protoc_insertion_point(field_get:CMsgClientGamesPlayed.GamePlayed.dlc_context)
  return _internal_dlc_context();
}
inline void CMsgClientGamesPlayed_GamePlayed::_internal_set_dlc_context(uint32_t value) {
  _has_bits_[0] |= 0x20000000u;
  dlc_context_ = value;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_dlc_context(uint32_t value) {
  _internal_set_dlc_context(value);
  // @@protoc_insertion_point(field_set:CMsgClientGamesPlayed.GamePlayed.dlc_context)
}

// repeated .CMsgClientGamesPlayed.ProcessInfo process_id_list = 32;
inline int CMsgClientGamesPlayed_GamePlayed::_internal_process_id_list_size() const {
  return process_id_list_.size();
}
inline int CMsgClientGamesPlayed_GamePlayed::process_id_list_size() const {
  return _internal_process_id_list_size();
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_process_id_list() {
  process_id_list_.Clear();
}
inline ::CMsgClientGamesPlayed_ProcessInfo* CMsgClientGamesPlayed_GamePlayed::mutable_process_id_list(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgClientGamesPlayed.GamePlayed.process_id_list)
  return process_id_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientGamesPlayed_ProcessInfo >*
CMsgClientGamesPlayed_GamePlayed::mutable_process_id_list() {
  // @@protoc_insertion_point(field_mutable_list:CMsgClientGamesPlayed.GamePlayed.process_id_list)
  return &process_id_list_;
}
inline const ::CMsgClientGamesPlayed_ProcessInfo& CMsgClientGamesPlayed_GamePlayed::_internal_process_id_list(int index) const {
  return process_id_list_.Get(index);
}
inline const ::CMsgClientGamesPlayed_ProcessInfo& CMsgClientGamesPlayed_GamePlayed::process_id_list(int index) const {
  // @@protoc_insertion_point(field_get:CMsgClientGamesPlayed.GamePlayed.process_id_list)
  return _internal_process_id_list(index);
}
inline ::CMsgClientGamesPlayed_ProcessInfo* CMsgClientGamesPlayed_GamePlayed::_internal_add_process_id_list() {
  return process_id_list_.Add();
}
inline ::CMsgClientGamesPlayed_ProcessInfo* CMsgClientGamesPlayed_GamePlayed::add_process_id_list() {
  ::CMsgClientGamesPlayed_ProcessInfo* _add = _internal_add_process_id_list();
  // @@protoc_insertion_point(field_add:CMsgClientGamesPlayed.GamePlayed.process_id_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientGamesPlayed_ProcessInfo >&
CMsgClientGamesPlayed_GamePlayed::process_id_list() const {
  // @@protoc_insertion_point(field_list:CMsgClientGamesPlayed.GamePlayed.process_id_list)
  return process_id_list_;
}

// -------------------------------------------------------------------

// CMsgClientGamesPlayed

// repeated .CMsgClientGamesPlayed.GamePlayed games_played = 1;
inline int CMsgClientGamesPlayed::_internal_games_played_size() const {
  return games_played_.size();
}
inline int CMsgClientGamesPlayed::games_played_size() const {
  return _internal_games_played_size();
}
inline void CMsgClientGamesPlayed::clear_games_played() {
  games_played_.Clear();
}
inline ::CMsgClientGamesPlayed_GamePlayed* CMsgClientGamesPlayed::mutable_games_played(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgClientGamesPlayed.games_played)
  return games_played_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientGamesPlayed_GamePlayed >*
CMsgClientGamesPlayed::mutable_games_played() {
  // @@protoc_insertion_point(field_mutable_list:CMsgClientGamesPlayed.games_played)
  return &games_played_;
}
inline const ::CMsgClientGamesPlayed_GamePlayed& CMsgClientGamesPlayed::_internal_games_played(int index) const {
  return games_played_.Get(index);
}
inline const ::CMsgClientGamesPlayed_GamePlayed& CMsgClientGamesPlayed::games_played(int index) const {
  // @@protoc_insertion_point(field_get:CMsgClientGamesPlayed.games_played)
  return _internal_games_played(index);
}
inline ::CMsgClientGamesPlayed_GamePlayed* CMsgClientGamesPlayed::_internal_add_games_played() {
  return games_played_.Add();
}
inline ::CMsgClientGamesPlayed_GamePlayed* CMsgClientGamesPlayed::add_games_played() {
  ::CMsgClientGamesPlayed_GamePlayed* _add = _internal_add_games_played();
  // @@protoc_insertion_point(field_add:CMsgClientGamesPlayed.games_played)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientGamesPlayed_GamePlayed >&
CMsgClientGamesPlayed::games_played() const {
  // @@protoc_insertion_point(field_list:CMsgClientGamesPlayed.games_played)
  return games_played_;
}

// optional uint32 client_os_type = 2;
inline bool CMsgClientGamesPlayed::_internal_has_client_os_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientGamesPlayed::has_client_os_type() const {
  return _internal_has_client_os_type();
}
inline void CMsgClientGamesPlayed::clear_client_os_type() {
  client_os_type_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgClientGamesPlayed::_internal_client_os_type() const {
  return client_os_type_;
}
inline uint32_t CMsgClientGamesPlayed::client_os_type() const {
  // @@protoc_insertion_point(field_get:CMsgClientGamesPlayed.client_os_type)
  return _internal_client_os_type();
}
inline void CMsgClientGamesPlayed::_internal_set_client_os_type(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  client_os_type_ = value;
}
inline void CMsgClientGamesPlayed::set_client_os_type(uint32_t value) {
  _internal_set_client_os_type(value);
  // @@protoc_insertion_point(field_set:CMsgClientGamesPlayed.client_os_type)
}

// optional uint32 cloud_gaming_platform = 3;
inline bool CMsgClientGamesPlayed::_internal_has_cloud_gaming_platform() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientGamesPlayed::has_cloud_gaming_platform() const {
  return _internal_has_cloud_gaming_platform();
}
inline void CMsgClientGamesPlayed::clear_cloud_gaming_platform() {
  cloud_gaming_platform_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgClientGamesPlayed::_internal_cloud_gaming_platform() const {
  return cloud_gaming_platform_;
}
inline uint32_t CMsgClientGamesPlayed::cloud_gaming_platform() const {
  // @@protoc_insertion_point(field_get:CMsgClientGamesPlayed.cloud_gaming_platform)
  return _internal_cloud_gaming_platform();
}
inline void CMsgClientGamesPlayed::_internal_set_cloud_gaming_platform(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  cloud_gaming_platform_ = value;
}
inline void CMsgClientGamesPlayed::set_cloud_gaming_platform(uint32_t value) {
  _internal_set_cloud_gaming_platform(value);
  // @@protoc_insertion_point(field_set:CMsgClientGamesPlayed.cloud_gaming_platform)
}

// optional bool recent_reauthentication = 4;
inline bool CMsgClientGamesPlayed::_internal_has_recent_reauthentication() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientGamesPlayed::has_recent_reauthentication() const {
  return _internal_has_recent_reauthentication();
}
inline void CMsgClientGamesPlayed::clear_recent_reauthentication() {
  recent_reauthentication_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CMsgClientGamesPlayed::_internal_recent_reauthentication() const {
  return recent_reauthentication_;
}
inline bool CMsgClientGamesPlayed::recent_reauthentication() const {
  // @@protoc_insertion_point(field_get:CMsgClientGamesPlayed.recent_reauthentication)
  return _internal_recent_reauthentication();
}
inline void CMsgClientGamesPlayed::_internal_set_recent_reauthentication(bool value) {
  _has_bits_[0] |= 0x00000004u;
  recent_reauthentication_ = value;
}
inline void CMsgClientGamesPlayed::set_recent_reauthentication(bool value) {
  _internal_set_recent_reauthentication(value);
  // @@protoc_insertion_point(field_set:CMsgClientGamesPlayed.recent_reauthentication)
}

// -------------------------------------------------------------------

// CMsgGSApprove

// optional fixed64 steam_id = 1;
inline bool CMsgGSApprove::_internal_has_steam_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGSApprove::has_steam_id() const {
  return _internal_has_steam_id();
}
inline void CMsgGSApprove::clear_steam_id() {
  steam_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgGSApprove::_internal_steam_id() const {
  return steam_id_;
}
inline uint64_t CMsgGSApprove::steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgGSApprove.steam_id)
  return _internal_steam_id();
}
inline void CMsgGSApprove::_internal_set_steam_id(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steam_id_ = value;
}
inline void CMsgGSApprove::set_steam_id(uint64_t value) {
  _internal_set_steam_id(value);
  // @@protoc_insertion_point(field_set:CMsgGSApprove.steam_id)
}

// optional fixed64 owner_steam_id = 2;
inline bool CMsgGSApprove::_internal_has_owner_steam_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGSApprove::has_owner_steam_id() const {
  return _internal_has_owner_steam_id();
}
inline void CMsgGSApprove::clear_owner_steam_id() {
  owner_steam_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CMsgGSApprove::_internal_owner_steam_id() const {
  return owner_steam_id_;
}
inline uint64_t CMsgGSApprove::owner_steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgGSApprove.owner_steam_id)
  return _internal_owner_steam_id();
}
inline void CMsgGSApprove::_internal_set_owner_steam_id(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  owner_steam_id_ = value;
}
inline void CMsgGSApprove::set_owner_steam_id(uint64_t value) {
  _internal_set_owner_steam_id(value);
  // @@protoc_insertion_point(field_set:CMsgGSApprove.owner_steam_id)
}

// -------------------------------------------------------------------

// CMsgGSDeny

// optional fixed64 steam_id = 1;
inline bool CMsgGSDeny::_internal_has_steam_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGSDeny::has_steam_id() const {
  return _internal_has_steam_id();
}
inline void CMsgGSDeny::clear_steam_id() {
  steam_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CMsgGSDeny::_internal_steam_id() const {
  return steam_id_;
}
inline uint64_t CMsgGSDeny::steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgGSDeny.steam_id)
  return _internal_steam_id();
}
inline void CMsgGSDeny::_internal_set_steam_id(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  steam_id_ = value;
}
inline void CMsgGSDeny::set_steam_id(uint64_t value) {
  _internal_set_steam_id(value);
  // @@protoc_insertion_point(field_set:CMsgGSDeny.steam_id)
}

// optional int32 edeny_reason = 2;
inline bool CMsgGSDeny::_internal_has_edeny_reason() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGSDeny::has_edeny_reason() const {
  return _internal_has_edeny_reason();
}
inline void CMsgGSDeny::clear_edeny_reason() {
  edeny_reason_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t CMsgGSDeny::_internal_edeny_reason() const {
  return edeny_reason_;
}
inline int32_t CMsgGSDeny::edeny_reason() const {
  // @@protoc_insertion_point(field_get:CMsgGSDeny.edeny_reason)
  return _internal_edeny_reason();
}
inline void CMsgGSDeny::_internal_set_edeny_reason(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  edeny_reason_ = value;
}
inline void CMsgGSDeny::set_edeny_reason(int32_t value) {
  _internal_set_edeny_reason(value);
  // @@protoc_insertion_point(field_set:CMsgGSDeny.edeny_reason)
}

// optional string deny_string = 3;
inline bool CMsgGSDeny::_internal_has_deny_string() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGSDeny::has_deny_string() const {
  return _internal_has_deny_string();
}
inline void CMsgGSDeny::clear_deny_string() {
  deny_string_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgGSDeny::deny_string() const {
  // @@protoc_insertion_point(field_get:CMsgGSDeny.deny_string)
  return _internal_deny_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGSDeny::set_deny_string(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 deny_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGSDeny.deny_string)
}
inline std::string* CMsgGSDeny::mutable_deny_string() {
  std::string* _s = _internal_mutable_deny_string();
  // @@protoc_insertion_point(field_mutable:CMsgGSDeny.deny_string)
  return _s;
}
inline const std::string& CMsgGSDeny::_internal_deny_string() const {
  return deny_string_.Get();
}
inline void CMsgGSDeny::_internal_set_deny_string(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  deny_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgGSDeny::_internal_mutable_deny_string() {
  _has_bits_[0] |= 0x00000001u;
  return deny_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgGSDeny::release_deny_string() {
  // @@protoc_insertion_point(field_release:CMsgGSDeny.deny_string)
  if (!_internal_has_deny_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = deny_string_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (deny_string_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    deny_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgGSDeny::set_allocated_deny_string(std::string* deny_string) {
  if (deny_string != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  deny_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deny_string,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (deny_string_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    deny_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgGSDeny.deny_string)
}

// -------------------------------------------------------------------

// CMsgGSKick

// optional fixed64 steam_id = 1;
inline bool CMsgGSKick::_internal_has_steam_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGSKick::has_steam_id() const {
  return _internal_has_steam_id();
}
inline void CMsgGSKick::clear_steam_id() {
  steam_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgGSKick::_internal_steam_id() const {
  return steam_id_;
}
inline uint64_t CMsgGSKick::steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgGSKick.steam_id)
  return _internal_steam_id();
}
inline void CMsgGSKick::_internal_set_steam_id(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steam_id_ = value;
}
inline void CMsgGSKick::set_steam_id(uint64_t value) {
  _internal_set_steam_id(value);
  // @@protoc_insertion_point(field_set:CMsgGSKick.steam_id)
}

// optional int32 edeny_reason = 2;
inline bool CMsgGSKick::_internal_has_edeny_reason() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGSKick::has_edeny_reason() const {
  return _internal_has_edeny_reason();
}
inline void CMsgGSKick::clear_edeny_reason() {
  edeny_reason_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t CMsgGSKick::_internal_edeny_reason() const {
  return edeny_reason_;
}
inline int32_t CMsgGSKick::edeny_reason() const {
  // @@protoc_insertion_point(field_get:CMsgGSKick.edeny_reason)
  return _internal_edeny_reason();
}
inline void CMsgGSKick::_internal_set_edeny_reason(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  edeny_reason_ = value;
}
inline void CMsgGSKick::set_edeny_reason(int32_t value) {
  _internal_set_edeny_reason(value);
  // @@protoc_insertion_point(field_set:CMsgGSKick.edeny_reason)
}

// -------------------------------------------------------------------

// CMsgClientAuthList

// optional uint32 tokens_left = 1;
inline bool CMsgClientAuthList::_internal_has_tokens_left() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientAuthList::has_tokens_left() const {
  return _internal_has_tokens_left();
}
inline void CMsgClientAuthList::clear_tokens_left() {
  tokens_left_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgClientAuthList::_internal_tokens_left() const {
  return tokens_left_;
}
inline uint32_t CMsgClientAuthList::tokens_left() const {
  // @@protoc_insertion_point(field_get:CMsgClientAuthList.tokens_left)
  return _internal_tokens_left();
}
inline void CMsgClientAuthList::_internal_set_tokens_left(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  tokens_left_ = value;
}
inline void CMsgClientAuthList::set_tokens_left(uint32_t value) {
  _internal_set_tokens_left(value);
  // @@protoc_insertion_point(field_set:CMsgClientAuthList.tokens_left)
}

// optional uint32 last_request_seq = 2;
inline bool CMsgClientAuthList::_internal_has_last_request_seq() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientAuthList::has_last_request_seq() const {
  return _internal_has_last_request_seq();
}
inline void CMsgClientAuthList::clear_last_request_seq() {
  last_request_seq_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgClientAuthList::_internal_last_request_seq() const {
  return last_request_seq_;
}
inline uint32_t CMsgClientAuthList::last_request_seq() const {
  // @@protoc_insertion_point(field_get:CMsgClientAuthList.last_request_seq)
  return _internal_last_request_seq();
}
inline void CMsgClientAuthList::_internal_set_last_request_seq(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  last_request_seq_ = value;
}
inline void CMsgClientAuthList::set_last_request_seq(uint32_t value) {
  _internal_set_last_request_seq(value);
  // @@protoc_insertion_point(field_set:CMsgClientAuthList.last_request_seq)
}

// optional uint32 last_request_seq_from_server = 3;
inline bool CMsgClientAuthList::_internal_has_last_request_seq_from_server() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientAuthList::has_last_request_seq_from_server() const {
  return _internal_has_last_request_seq_from_server();
}
inline void CMsgClientAuthList::clear_last_request_seq_from_server() {
  last_request_seq_from_server_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgClientAuthList::_internal_last_request_seq_from_server() const {
  return last_request_seq_from_server_;
}
inline uint32_t CMsgClientAuthList::last_request_seq_from_server() const {
  // @@protoc_insertion_point(field_get:CMsgClientAuthList.last_request_seq_from_server)
  return _internal_last_request_seq_from_server();
}
inline void CMsgClientAuthList::_internal_set_last_request_seq_from_server(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  last_request_seq_from_server_ = value;
}
inline void CMsgClientAuthList::set_last_request_seq_from_server(uint32_t value) {
  _internal_set_last_request_seq_from_server(value);
  // @@protoc_insertion_point(field_set:CMsgClientAuthList.last_request_seq_from_server)
}

// repeated .CMsgAuthTicket tickets = 4;
inline int CMsgClientAuthList::_internal_tickets_size() const {
  return tickets_.size();
}
inline int CMsgClientAuthList::tickets_size() const {
  return _internal_tickets_size();
}
inline ::CMsgAuthTicket* CMsgClientAuthList::mutable_tickets(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgClientAuthList.tickets)
  return tickets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgAuthTicket >*
CMsgClientAuthList::mutable_tickets() {
  // @@protoc_insertion_point(field_mutable_list:CMsgClientAuthList.tickets)
  return &tickets_;
}
inline const ::CMsgAuthTicket& CMsgClientAuthList::_internal_tickets(int index) const {
  return tickets_.Get(index);
}
inline const ::CMsgAuthTicket& CMsgClientAuthList::tickets(int index) const {
  // @@protoc_insertion_point(field_get:CMsgClientAuthList.tickets)
  return _internal_tickets(index);
}
inline ::CMsgAuthTicket* CMsgClientAuthList::_internal_add_tickets() {
  return tickets_.Add();
}
inline ::CMsgAuthTicket* CMsgClientAuthList::add_tickets() {
  ::CMsgAuthTicket* _add = _internal_add_tickets();
  // @@protoc_insertion_point(field_add:CMsgClientAuthList.tickets)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgAuthTicket >&
CMsgClientAuthList::tickets() const {
  // @@protoc_insertion_point(field_list:CMsgClientAuthList.tickets)
  return tickets_;
}

// repeated uint32 app_ids = 5;
inline int CMsgClientAuthList::_internal_app_ids_size() const {
  return app_ids_.size();
}
inline int CMsgClientAuthList::app_ids_size() const {
  return _internal_app_ids_size();
}
inline void CMsgClientAuthList::clear_app_ids() {
  app_ids_.Clear();
}
inline uint32_t CMsgClientAuthList::_internal_app_ids(int index) const {
  return app_ids_.Get(index);
}
inline uint32_t CMsgClientAuthList::app_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgClientAuthList.app_ids)
  return _internal_app_ids(index);
}
inline void CMsgClientAuthList::set_app_ids(int index, uint32_t value) {
  app_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgClientAuthList.app_ids)
}
inline void CMsgClientAuthList::_internal_add_app_ids(uint32_t value) {
  app_ids_.Add(value);
}
inline void CMsgClientAuthList::add_app_ids(uint32_t value) {
  _internal_add_app_ids(value);
  // @@protoc_insertion_point(field_add:CMsgClientAuthList.app_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgClientAuthList::_internal_app_ids() const {
  return app_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgClientAuthList::app_ids() const {
  // @@protoc_insertion_point(field_list:CMsgClientAuthList.app_ids)
  return _internal_app_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgClientAuthList::_internal_mutable_app_ids() {
  return &app_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgClientAuthList::mutable_app_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgClientAuthList.app_ids)
  return _internal_mutable_app_ids();
}

// optional uint32 message_sequence = 6;
inline bool CMsgClientAuthList::_internal_has_message_sequence() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientAuthList::has_message_sequence() const {
  return _internal_has_message_sequence();
}
inline void CMsgClientAuthList::clear_message_sequence() {
  message_sequence_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgClientAuthList::_internal_message_sequence() const {
  return message_sequence_;
}
inline uint32_t CMsgClientAuthList::message_sequence() const {
  // @@protoc_insertion_point(field_get:CMsgClientAuthList.message_sequence)
  return _internal_message_sequence();
}
inline void CMsgClientAuthList::_internal_set_message_sequence(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  message_sequence_ = value;
}
inline void CMsgClientAuthList::set_message_sequence(uint32_t value) {
  _internal_set_message_sequence(value);
  // @@protoc_insertion_point(field_set:CMsgClientAuthList.message_sequence)
}

// optional bool filtered = 7;
inline bool CMsgClientAuthList::_internal_has_filtered() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgClientAuthList::has_filtered() const {
  return _internal_has_filtered();
}
inline void CMsgClientAuthList::clear_filtered() {
  filtered_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CMsgClientAuthList::_internal_filtered() const {
  return filtered_;
}
inline bool CMsgClientAuthList::filtered() const {
  // @@protoc_insertion_point(field_get:CMsgClientAuthList.filtered)
  return _internal_filtered();
}
inline void CMsgClientAuthList::_internal_set_filtered(bool value) {
  _has_bits_[0] |= 0x00000010u;
  filtered_ = value;
}
inline void CMsgClientAuthList::set_filtered(bool value) {
  _internal_set_filtered(value);
  // @@protoc_insertion_point(field_set:CMsgClientAuthList.filtered)
}

// -------------------------------------------------------------------

// CMsgClientAuthListAck

// repeated uint32 ticket_crc = 1;
inline int CMsgClientAuthListAck::_internal_ticket_crc_size() const {
  return ticket_crc_.size();
}
inline int CMsgClientAuthListAck::ticket_crc_size() const {
  return _internal_ticket_crc_size();
}
inline void CMsgClientAuthListAck::clear_ticket_crc() {
  ticket_crc_.Clear();
}
inline uint32_t CMsgClientAuthListAck::_internal_ticket_crc(int index) const {
  return ticket_crc_.Get(index);
}
inline uint32_t CMsgClientAuthListAck::ticket_crc(int index) const {
  // @@protoc_insertion_point(field_get:CMsgClientAuthListAck.ticket_crc)
  return _internal_ticket_crc(index);
}
inline void CMsgClientAuthListAck::set_ticket_crc(int index, uint32_t value) {
  ticket_crc_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgClientAuthListAck.ticket_crc)
}
inline void CMsgClientAuthListAck::_internal_add_ticket_crc(uint32_t value) {
  ticket_crc_.Add(value);
}
inline void CMsgClientAuthListAck::add_ticket_crc(uint32_t value) {
  _internal_add_ticket_crc(value);
  // @@protoc_insertion_point(field_add:CMsgClientAuthListAck.ticket_crc)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgClientAuthListAck::_internal_ticket_crc() const {
  return ticket_crc_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgClientAuthListAck::ticket_crc() const {
  // @@protoc_insertion_point(field_list:CMsgClientAuthListAck.ticket_crc)
  return _internal_ticket_crc();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgClientAuthListAck::_internal_mutable_ticket_crc() {
  return &ticket_crc_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgClientAuthListAck::mutable_ticket_crc() {
  // @@protoc_insertion_point(field_mutable_list:CMsgClientAuthListAck.ticket_crc)
  return _internal_mutable_ticket_crc();
}

// repeated uint32 app_ids = 2;
inline int CMsgClientAuthListAck::_internal_app_ids_size() const {
  return app_ids_.size();
}
inline int CMsgClientAuthListAck::app_ids_size() const {
  return _internal_app_ids_size();
}
inline void CMsgClientAuthListAck::clear_app_ids() {
  app_ids_.Clear();
}
inline uint32_t CMsgClientAuthListAck::_internal_app_ids(int index) const {
  return app_ids_.Get(index);
}
inline uint32_t CMsgClientAuthListAck::app_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgClientAuthListAck.app_ids)
  return _internal_app_ids(index);
}
inline void CMsgClientAuthListAck::set_app_ids(int index, uint32_t value) {
  app_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgClientAuthListAck.app_ids)
}
inline void CMsgClientAuthListAck::_internal_add_app_ids(uint32_t value) {
  app_ids_.Add(value);
}
inline void CMsgClientAuthListAck::add_app_ids(uint32_t value) {
  _internal_add_app_ids(value);
  // @@protoc_insertion_point(field_add:CMsgClientAuthListAck.app_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgClientAuthListAck::_internal_app_ids() const {
  return app_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgClientAuthListAck::app_ids() const {
  // @@protoc_insertion_point(field_list:CMsgClientAuthListAck.app_ids)
  return _internal_app_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgClientAuthListAck::_internal_mutable_app_ids() {
  return &app_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgClientAuthListAck::mutable_app_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgClientAuthListAck.app_ids)
  return _internal_mutable_app_ids();
}

// optional uint32 message_sequence = 3;
inline bool CMsgClientAuthListAck::_internal_has_message_sequence() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientAuthListAck::has_message_sequence() const {
  return _internal_has_message_sequence();
}
inline void CMsgClientAuthListAck::clear_message_sequence() {
  message_sequence_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgClientAuthListAck::_internal_message_sequence() const {
  return message_sequence_;
}
inline uint32_t CMsgClientAuthListAck::message_sequence() const {
  // @@protoc_insertion_point(field_get:CMsgClientAuthListAck.message_sequence)
  return _internal_message_sequence();
}
inline void CMsgClientAuthListAck::_internal_set_message_sequence(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  message_sequence_ = value;
}
inline void CMsgClientAuthListAck::set_message_sequence(uint32_t value) {
  _internal_set_message_sequence(value);
  // @@protoc_insertion_point(field_set:CMsgClientAuthListAck.message_sequence)
}

// -------------------------------------------------------------------

// CMsgClientLicenseList_License

// optional uint32 package_id = 1;
inline bool CMsgClientLicenseList_License::_internal_has_package_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientLicenseList_License::has_package_id() const {
  return _internal_has_package_id();
}
inline void CMsgClientLicenseList_License::clear_package_id() {
  package_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgClientLicenseList_License::_internal_package_id() const {
  return package_id_;
}
inline uint32_t CMsgClientLicenseList_License::package_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientLicenseList.License.package_id)
  return _internal_package_id();
}
inline void CMsgClientLicenseList_License::_internal_set_package_id(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  package_id_ = value;
}
inline void CMsgClientLicenseList_License::set_package_id(uint32_t value) {
  _internal_set_package_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientLicenseList.License.package_id)
}

// optional fixed32 time_created = 2;
inline bool CMsgClientLicenseList_License::_internal_has_time_created() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientLicenseList_License::has_time_created() const {
  return _internal_has_time_created();
}
inline void CMsgClientLicenseList_License::clear_time_created() {
  time_created_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgClientLicenseList_License::_internal_time_created() const {
  return time_created_;
}
inline uint32_t CMsgClientLicenseList_License::time_created() const {
  // @@protoc_insertion_point(field_get:CMsgClientLicenseList.License.time_created)
  return _internal_time_created();
}
inline void CMsgClientLicenseList_License::_internal_set_time_created(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  time_created_ = value;
}
inline void CMsgClientLicenseList_License::set_time_created(uint32_t value) {
  _internal_set_time_created(value);
  // @@protoc_insertion_point(field_set:CMsgClientLicenseList.License.time_created)
}

// optional fixed32 time_next_process = 3;
inline bool CMsgClientLicenseList_License::_internal_has_time_next_process() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientLicenseList_License::has_time_next_process() const {
  return _internal_has_time_next_process();
}
inline void CMsgClientLicenseList_License::clear_time_next_process() {
  time_next_process_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgClientLicenseList_License::_internal_time_next_process() const {
  return time_next_process_;
}
inline uint32_t CMsgClientLicenseList_License::time_next_process() const {
  // @@protoc_insertion_point(field_get:CMsgClientLicenseList.License.time_next_process)
  return _internal_time_next_process();
}
inline void CMsgClientLicenseList_License::_internal_set_time_next_process(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  time_next_process_ = value;
}
inline void CMsgClientLicenseList_License::set_time_next_process(uint32_t value) {
  _internal_set_time_next_process(value);
  // @@protoc_insertion_point(field_set:CMsgClientLicenseList.License.time_next_process)
}

// optional int32 minute_limit = 4;
inline bool CMsgClientLicenseList_License::_internal_has_minute_limit() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgClientLicenseList_License::has_minute_limit() const {
  return _internal_has_minute_limit();
}
inline void CMsgClientLicenseList_License::clear_minute_limit() {
  minute_limit_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline int32_t CMsgClientLicenseList_License::_internal_minute_limit() const {
  return minute_limit_;
}
inline int32_t CMsgClientLicenseList_License::minute_limit() const {
  // @@protoc_insertion_point(field_get:CMsgClientLicenseList.License.minute_limit)
  return _internal_minute_limit();
}
inline void CMsgClientLicenseList_License::_internal_set_minute_limit(int32_t value) {
  _has_bits_[0] |= 0x00000010u;
  minute_limit_ = value;
}
inline void CMsgClientLicenseList_License::set_minute_limit(int32_t value) {
  _internal_set_minute_limit(value);
  // @@protoc_insertion_point(field_set:CMsgClientLicenseList.License.minute_limit)
}

// optional int32 minutes_used = 5;
inline bool CMsgClientLicenseList_License::_internal_has_minutes_used() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgClientLicenseList_License::has_minutes_used() const {
  return _internal_has_minutes_used();
}
inline void CMsgClientLicenseList_License::clear_minutes_used() {
  minutes_used_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline int32_t CMsgClientLicenseList_License::_internal_minutes_used() const {
  return minutes_used_;
}
inline int32_t CMsgClientLicenseList_License::minutes_used() const {
  // @@protoc_insertion_point(field_get:CMsgClientLicenseList.License.minutes_used)
  return _internal_minutes_used();
}
inline void CMsgClientLicenseList_License::_internal_set_minutes_used(int32_t value) {
  _has_bits_[0] |= 0x00000020u;
  minutes_used_ = value;
}
inline void CMsgClientLicenseList_License::set_minutes_used(int32_t value) {
  _internal_set_minutes_used(value);
  // @@protoc_insertion_point(field_set:CMsgClientLicenseList.License.minutes_used)
}

// optional uint32 payment_method = 6;
inline bool CMsgClientLicenseList_License::_internal_has_payment_method() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgClientLicenseList_License::has_payment_method() const {
  return _internal_has_payment_method();
}
inline void CMsgClientLicenseList_License::clear_payment_method() {
  payment_method_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgClientLicenseList_License::_internal_payment_method() const {
  return payment_method_;
}
inline uint32_t CMsgClientLicenseList_License::payment_method() const {
  // @@protoc_insertion_point(field_get:CMsgClientLicenseList.License.payment_method)
  return _internal_payment_method();
}
inline void CMsgClientLicenseList_License::_internal_set_payment_method(uint32_t value) {
  _has_bits_[0] |= 0x00000040u;
  payment_method_ = value;
}
inline void CMsgClientLicenseList_License::set_payment_method(uint32_t value) {
  _internal_set_payment_method(value);
  // @@protoc_insertion_point(field_set:CMsgClientLicenseList.License.payment_method)
}

// optional uint32 flags = 7;
inline bool CMsgClientLicenseList_License::_internal_has_flags() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgClientLicenseList_License::has_flags() const {
  return _internal_has_flags();
}
inline void CMsgClientLicenseList_License::clear_flags() {
  flags_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CMsgClientLicenseList_License::_internal_flags() const {
  return flags_;
}
inline uint32_t CMsgClientLicenseList_License::flags() const {
  // @@protoc_insertion_point(field_get:CMsgClientLicenseList.License.flags)
  return _internal_flags();
}
inline void CMsgClientLicenseList_License::_internal_set_flags(uint32_t value) {
  _has_bits_[0] |= 0x00000080u;
  flags_ = value;
}
inline void CMsgClientLicenseList_License::set_flags(uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:CMsgClientLicenseList.License.flags)
}

// optional string purchase_country_code = 8;
inline bool CMsgClientLicenseList_License::_internal_has_purchase_country_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientLicenseList_License::has_purchase_country_code() const {
  return _internal_has_purchase_country_code();
}
inline void CMsgClientLicenseList_License::clear_purchase_country_code() {
  purchase_country_code_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientLicenseList_License::purchase_country_code() const {
  // @@protoc_insertion_point(field_get:CMsgClientLicenseList.License.purchase_country_code)
  return _internal_purchase_country_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientLicenseList_License::set_purchase_country_code(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 purchase_country_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientLicenseList.License.purchase_country_code)
}
inline std::string* CMsgClientLicenseList_License::mutable_purchase_country_code() {
  std::string* _s = _internal_mutable_purchase_country_code();
  // @@protoc_insertion_point(field_mutable:CMsgClientLicenseList.License.purchase_country_code)
  return _s;
}
inline const std::string& CMsgClientLicenseList_License::_internal_purchase_country_code() const {
  return purchase_country_code_.Get();
}
inline void CMsgClientLicenseList_License::_internal_set_purchase_country_code(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  purchase_country_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientLicenseList_License::_internal_mutable_purchase_country_code() {
  _has_bits_[0] |= 0x00000001u;
  return purchase_country_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientLicenseList_License::release_purchase_country_code() {
  // @@protoc_insertion_point(field_release:CMsgClientLicenseList.License.purchase_country_code)
  if (!_internal_has_purchase_country_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = purchase_country_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (purchase_country_code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    purchase_country_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientLicenseList_License::set_allocated_purchase_country_code(std::string* purchase_country_code) {
  if (purchase_country_code != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  purchase_country_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), purchase_country_code,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (purchase_country_code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    purchase_country_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientLicenseList.License.purchase_country_code)
}

// optional uint32 license_type = 9;
inline bool CMsgClientLicenseList_License::_internal_has_license_type() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgClientLicenseList_License::has_license_type() const {
  return _internal_has_license_type();
}
inline void CMsgClientLicenseList_License::clear_license_type() {
  license_type_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CMsgClientLicenseList_License::_internal_license_type() const {
  return license_type_;
}
inline uint32_t CMsgClientLicenseList_License::license_type() const {
  // @@protoc_insertion_point(field_get:CMsgClientLicenseList.License.license_type)
  return _internal_license_type();
}
inline void CMsgClientLicenseList_License::_internal_set_license_type(uint32_t value) {
  _has_bits_[0] |= 0x00000100u;
  license_type_ = value;
}
inline void CMsgClientLicenseList_License::set_license_type(uint32_t value) {
  _internal_set_license_type(value);
  // @@protoc_insertion_point(field_set:CMsgClientLicenseList.License.license_type)
}

// optional int32 territory_code = 10;
inline bool CMsgClientLicenseList_License::_internal_has_territory_code() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgClientLicenseList_License::has_territory_code() const {
  return _internal_has_territory_code();
}
inline void CMsgClientLicenseList_License::clear_territory_code() {
  territory_code_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline int32_t CMsgClientLicenseList_License::_internal_territory_code() const {
  return territory_code_;
}
inline int32_t CMsgClientLicenseList_License::territory_code() const {
  // @@protoc_insertion_point(field_get:CMsgClientLicenseList.License.territory_code)
  return _internal_territory_code();
}
inline void CMsgClientLicenseList_License::_internal_set_territory_code(int32_t value) {
  _has_bits_[0] |= 0x00000200u;
  territory_code_ = value;
}
inline void CMsgClientLicenseList_License::set_territory_code(int32_t value) {
  _internal_set_territory_code(value);
  // @@protoc_insertion_point(field_set:CMsgClientLicenseList.License.territory_code)
}

// optional int32 change_number = 11;
inline bool CMsgClientLicenseList_License::_internal_has_change_number() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgClientLicenseList_License::has_change_number() const {
  return _internal_has_change_number();
}
inline void CMsgClientLicenseList_License::clear_change_number() {
  change_number_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline int32_t CMsgClientLicenseList_License::_internal_change_number() const {
  return change_number_;
}
inline int32_t CMsgClientLicenseList_License::change_number() const {
  // @@protoc_insertion_point(field_get:CMsgClientLicenseList.License.change_number)
  return _internal_change_number();
}
inline void CMsgClientLicenseList_License::_internal_set_change_number(int32_t value) {
  _has_bits_[0] |= 0x00000400u;
  change_number_ = value;
}
inline void CMsgClientLicenseList_License::set_change_number(int32_t value) {
  _internal_set_change_number(value);
  // @@protoc_insertion_point(field_set:CMsgClientLicenseList.License.change_number)
}

// optional uint32 owner_id = 12;
inline bool CMsgClientLicenseList_License::_internal_has_owner_id() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgClientLicenseList_License::has_owner_id() const {
  return _internal_has_owner_id();
}
inline void CMsgClientLicenseList_License::clear_owner_id() {
  owner_id_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline uint32_t CMsgClientLicenseList_License::_internal_owner_id() const {
  return owner_id_;
}
inline uint32_t CMsgClientLicenseList_License::owner_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientLicenseList.License.owner_id)
  return _internal_owner_id();
}
inline void CMsgClientLicenseList_License::_internal_set_owner_id(uint32_t value) {
  _has_bits_[0] |= 0x00000800u;
  owner_id_ = value;
}
inline void CMsgClientLicenseList_License::set_owner_id(uint32_t value) {
  _internal_set_owner_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientLicenseList.License.owner_id)
}

// optional uint32 initial_period = 13;
inline bool CMsgClientLicenseList_License::_internal_has_initial_period() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgClientLicenseList_License::has_initial_period() const {
  return _internal_has_initial_period();
}
inline void CMsgClientLicenseList_License::clear_initial_period() {
  initial_period_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline uint32_t CMsgClientLicenseList_License::_internal_initial_period() const {
  return initial_period_;
}
inline uint32_t CMsgClientLicenseList_License::initial_period() const {
  // @@protoc_insertion_point(field_get:CMsgClientLicenseList.License.initial_period)
  return _internal_initial_period();
}
inline void CMsgClientLicenseList_License::_internal_set_initial_period(uint32_t value) {
  _has_bits_[0] |= 0x00001000u;
  initial_period_ = value;
}
inline void CMsgClientLicenseList_License::set_initial_period(uint32_t value) {
  _internal_set_initial_period(value);
  // @@protoc_insertion_point(field_set:CMsgClientLicenseList.License.initial_period)
}

// optional uint32 initial_time_unit = 14;
inline bool CMsgClientLicenseList_License::_internal_has_initial_time_unit() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgClientLicenseList_License::has_initial_time_unit() const {
  return _internal_has_initial_time_unit();
}
inline void CMsgClientLicenseList_License::clear_initial_time_unit() {
  initial_time_unit_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline uint32_t CMsgClientLicenseList_License::_internal_initial_time_unit() const {
  return initial_time_unit_;
}
inline uint32_t CMsgClientLicenseList_License::initial_time_unit() const {
  // @@protoc_insertion_point(field_get:CMsgClientLicenseList.License.initial_time_unit)
  return _internal_initial_time_unit();
}
inline void CMsgClientLicenseList_License::_internal_set_initial_time_unit(uint32_t value) {
  _has_bits_[0] |= 0x00002000u;
  initial_time_unit_ = value;
}
inline void CMsgClientLicenseList_License::set_initial_time_unit(uint32_t value) {
  _internal_set_initial_time_unit(value);
  // @@protoc_insertion_point(field_set:CMsgClientLicenseList.License.initial_time_unit)
}

// optional uint32 renewal_period = 15;
inline bool CMsgClientLicenseList_License::_internal_has_renewal_period() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CMsgClientLicenseList_License::has_renewal_period() const {
  return _internal_has_renewal_period();
}
inline void CMsgClientLicenseList_License::clear_renewal_period() {
  renewal_period_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline uint32_t CMsgClientLicenseList_License::_internal_renewal_period() const {
  return renewal_period_;
}
inline uint32_t CMsgClientLicenseList_License::renewal_period() const {
  // @@protoc_insertion_point(field_get:CMsgClientLicenseList.License.renewal_period)
  return _internal_renewal_period();
}
inline void CMsgClientLicenseList_License::_internal_set_renewal_period(uint32_t value) {
  _has_bits_[0] |= 0x00004000u;
  renewal_period_ = value;
}
inline void CMsgClientLicenseList_License::set_renewal_period(uint32_t value) {
  _internal_set_renewal_period(value);
  // @@protoc_insertion_point(field_set:CMsgClientLicenseList.License.renewal_period)
}

// optional uint32 renewal_time_unit = 16;
inline bool CMsgClientLicenseList_License::_internal_has_renewal_time_unit() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CMsgClientLicenseList_License::has_renewal_time_unit() const {
  return _internal_has_renewal_time_unit();
}
inline void CMsgClientLicenseList_License::clear_renewal_time_unit() {
  renewal_time_unit_ = 0u;
  _has_bits_[0] &= ~0x00010000u;
}
inline uint32_t CMsgClientLicenseList_License::_internal_renewal_time_unit() const {
  return renewal_time_unit_;
}
inline uint32_t CMsgClientLicenseList_License::renewal_time_unit() const {
  // @@protoc_insertion_point(field_get:CMsgClientLicenseList.License.renewal_time_unit)
  return _internal_renewal_time_unit();
}
inline void CMsgClientLicenseList_License::_internal_set_renewal_time_unit(uint32_t value) {
  _has_bits_[0] |= 0x00010000u;
  renewal_time_unit_ = value;
}
inline void CMsgClientLicenseList_License::set_renewal_time_unit(uint32_t value) {
  _internal_set_renewal_time_unit(value);
  // @@protoc_insertion_point(field_set:CMsgClientLicenseList.License.renewal_time_unit)
}

// optional uint64 access_token = 17;
inline bool CMsgClientLicenseList_License::_internal_has_access_token() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CMsgClientLicenseList_License::has_access_token() const {
  return _internal_has_access_token();
}
inline void CMsgClientLicenseList_License::clear_access_token() {
  access_token_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00008000u;
}
inline uint64_t CMsgClientLicenseList_License::_internal_access_token() const {
  return access_token_;
}
inline uint64_t CMsgClientLicenseList_License::access_token() const {
  // @@protoc_insertion_point(field_get:CMsgClientLicenseList.License.access_token)
  return _internal_access_token();
}
inline void CMsgClientLicenseList_License::_internal_set_access_token(uint64_t value) {
  _has_bits_[0] |= 0x00008000u;
  access_token_ = value;
}
inline void CMsgClientLicenseList_License::set_access_token(uint64_t value) {
  _internal_set_access_token(value);
  // @@protoc_insertion_point(field_set:CMsgClientLicenseList.License.access_token)
}

// optional uint32 master_package_id = 18;
inline bool CMsgClientLicenseList_License::_internal_has_master_package_id() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CMsgClientLicenseList_License::has_master_package_id() const {
  return _internal_has_master_package_id();
}
inline void CMsgClientLicenseList_License::clear_master_package_id() {
  master_package_id_ = 0u;
  _has_bits_[0] &= ~0x00020000u;
}
inline uint32_t CMsgClientLicenseList_License::_internal_master_package_id() const {
  return master_package_id_;
}
inline uint32_t CMsgClientLicenseList_License::master_package_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientLicenseList.License.master_package_id)
  return _internal_master_package_id();
}
inline void CMsgClientLicenseList_License::_internal_set_master_package_id(uint32_t value) {
  _has_bits_[0] |= 0x00020000u;
  master_package_id_ = value;
}
inline void CMsgClientLicenseList_License::set_master_package_id(uint32_t value) {
  _internal_set_master_package_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientLicenseList.License.master_package_id)
}

// -------------------------------------------------------------------

// CMsgClientLicenseList

// optional int32 eresult = 1 [default = 2];
inline bool CMsgClientLicenseList::_internal_has_eresult() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientLicenseList::has_eresult() const {
  return _internal_has_eresult();
}
inline void CMsgClientLicenseList::clear_eresult() {
  eresult_ = 2;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t CMsgClientLicenseList::_internal_eresult() const {
  return eresult_;
}
inline int32_t CMsgClientLicenseList::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgClientLicenseList.eresult)
  return _internal_eresult();
}
inline void CMsgClientLicenseList::_internal_set_eresult(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  eresult_ = value;
}
inline void CMsgClientLicenseList::set_eresult(int32_t value) {
  _internal_set_eresult(value);
  // @@protoc_insertion_point(field_set:CMsgClientLicenseList.eresult)
}

// repeated .CMsgClientLicenseList.License licenses = 2;
inline int CMsgClientLicenseList::_internal_licenses_size() const {
  return licenses_.size();
}
inline int CMsgClientLicenseList::licenses_size() const {
  return _internal_licenses_size();
}
inline void CMsgClientLicenseList::clear_licenses() {
  licenses_.Clear();
}
inline ::CMsgClientLicenseList_License* CMsgClientLicenseList::mutable_licenses(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgClientLicenseList.licenses)
  return licenses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientLicenseList_License >*
CMsgClientLicenseList::mutable_licenses() {
  // @@protoc_insertion_point(field_mutable_list:CMsgClientLicenseList.licenses)
  return &licenses_;
}
inline const ::CMsgClientLicenseList_License& CMsgClientLicenseList::_internal_licenses(int index) const {
  return licenses_.Get(index);
}
inline const ::CMsgClientLicenseList_License& CMsgClientLicenseList::licenses(int index) const {
  // @@protoc_insertion_point(field_get:CMsgClientLicenseList.licenses)
  return _internal_licenses(index);
}
inline ::CMsgClientLicenseList_License* CMsgClientLicenseList::_internal_add_licenses() {
  return licenses_.Add();
}
inline ::CMsgClientLicenseList_License* CMsgClientLicenseList::add_licenses() {
  ::CMsgClientLicenseList_License* _add = _internal_add_licenses();
  // @@protoc_insertion_point(field_add:CMsgClientLicenseList.licenses)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientLicenseList_License >&
CMsgClientLicenseList::licenses() const {
  // @@protoc_insertion_point(field_list:CMsgClientLicenseList.licenses)
  return licenses_;
}

// -------------------------------------------------------------------

// CMsgClientIsLimitedAccount

// optional bool bis_limited_account = 1;
inline bool CMsgClientIsLimitedAccount::_internal_has_bis_limited_account() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientIsLimitedAccount::has_bis_limited_account() const {
  return _internal_has_bis_limited_account();
}
inline void CMsgClientIsLimitedAccount::clear_bis_limited_account() {
  bis_limited_account_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CMsgClientIsLimitedAccount::_internal_bis_limited_account() const {
  return bis_limited_account_;
}
inline bool CMsgClientIsLimitedAccount::bis_limited_account() const {
  // @@protoc_insertion_point(field_get:CMsgClientIsLimitedAccount.bis_limited_account)
  return _internal_bis_limited_account();
}
inline void CMsgClientIsLimitedAccount::_internal_set_bis_limited_account(bool value) {
  _has_bits_[0] |= 0x00000001u;
  bis_limited_account_ = value;
}
inline void CMsgClientIsLimitedAccount::set_bis_limited_account(bool value) {
  _internal_set_bis_limited_account(value);
  // @@protoc_insertion_point(field_set:CMsgClientIsLimitedAccount.bis_limited_account)
}

// optional bool bis_community_banned = 2;
inline bool CMsgClientIsLimitedAccount::_internal_has_bis_community_banned() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientIsLimitedAccount::has_bis_community_banned() const {
  return _internal_has_bis_community_banned();
}
inline void CMsgClientIsLimitedAccount::clear_bis_community_banned() {
  bis_community_banned_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CMsgClientIsLimitedAccount::_internal_bis_community_banned() const {
  return bis_community_banned_;
}
inline bool CMsgClientIsLimitedAccount::bis_community_banned() const {
  // @@protoc_insertion_point(field_get:CMsgClientIsLimitedAccount.bis_community_banned)
  return _internal_bis_community_banned();
}
inline void CMsgClientIsLimitedAccount::_internal_set_bis_community_banned(bool value) {
  _has_bits_[0] |= 0x00000002u;
  bis_community_banned_ = value;
}
inline void CMsgClientIsLimitedAccount::set_bis_community_banned(bool value) {
  _internal_set_bis_community_banned(value);
  // @@protoc_insertion_point(field_set:CMsgClientIsLimitedAccount.bis_community_banned)
}

// optional bool bis_locked_account = 3;
inline bool CMsgClientIsLimitedAccount::_internal_has_bis_locked_account() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientIsLimitedAccount::has_bis_locked_account() const {
  return _internal_has_bis_locked_account();
}
inline void CMsgClientIsLimitedAccount::clear_bis_locked_account() {
  bis_locked_account_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CMsgClientIsLimitedAccount::_internal_bis_locked_account() const {
  return bis_locked_account_;
}
inline bool CMsgClientIsLimitedAccount::bis_locked_account() const {
  // @@protoc_insertion_point(field_get:CMsgClientIsLimitedAccount.bis_locked_account)
  return _internal_bis_locked_account();
}
inline void CMsgClientIsLimitedAccount::_internal_set_bis_locked_account(bool value) {
  _has_bits_[0] |= 0x00000004u;
  bis_locked_account_ = value;
}
inline void CMsgClientIsLimitedAccount::set_bis_locked_account(bool value) {
  _internal_set_bis_locked_account(value);
  // @@protoc_insertion_point(field_set:CMsgClientIsLimitedAccount.bis_locked_account)
}

// optional bool bis_limited_account_allowed_to_invite_friends = 4;
inline bool CMsgClientIsLimitedAccount::_internal_has_bis_limited_account_allowed_to_invite_friends() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientIsLimitedAccount::has_bis_limited_account_allowed_to_invite_friends() const {
  return _internal_has_bis_limited_account_allowed_to_invite_friends();
}
inline void CMsgClientIsLimitedAccount::clear_bis_limited_account_allowed_to_invite_friends() {
  bis_limited_account_allowed_to_invite_friends_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CMsgClientIsLimitedAccount::_internal_bis_limited_account_allowed_to_invite_friends() const {
  return bis_limited_account_allowed_to_invite_friends_;
}
inline bool CMsgClientIsLimitedAccount::bis_limited_account_allowed_to_invite_friends() const {
  // @@protoc_insertion_point(field_get:CMsgClientIsLimitedAccount.bis_limited_account_allowed_to_invite_friends)
  return _internal_bis_limited_account_allowed_to_invite_friends();
}
inline void CMsgClientIsLimitedAccount::_internal_set_bis_limited_account_allowed_to_invite_friends(bool value) {
  _has_bits_[0] |= 0x00000008u;
  bis_limited_account_allowed_to_invite_friends_ = value;
}
inline void CMsgClientIsLimitedAccount::set_bis_limited_account_allowed_to_invite_friends(bool value) {
  _internal_set_bis_limited_account_allowed_to_invite_friends(value);
  // @@protoc_insertion_point(field_set:CMsgClientIsLimitedAccount.bis_limited_account_allowed_to_invite_friends)
}

// -------------------------------------------------------------------

// CMsgClientRequestedClientStats_StatsToSend

// optional uint32 client_stat = 1;
inline bool CMsgClientRequestedClientStats_StatsToSend::_internal_has_client_stat() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientRequestedClientStats_StatsToSend::has_client_stat() const {
  return _internal_has_client_stat();
}
inline void CMsgClientRequestedClientStats_StatsToSend::clear_client_stat() {
  client_stat_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgClientRequestedClientStats_StatsToSend::_internal_client_stat() const {
  return client_stat_;
}
inline uint32_t CMsgClientRequestedClientStats_StatsToSend::client_stat() const {
  // @@protoc_insertion_point(field_get:CMsgClientRequestedClientStats.StatsToSend.client_stat)
  return _internal_client_stat();
}
inline void CMsgClientRequestedClientStats_StatsToSend::_internal_set_client_stat(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  client_stat_ = value;
}
inline void CMsgClientRequestedClientStats_StatsToSend::set_client_stat(uint32_t value) {
  _internal_set_client_stat(value);
  // @@protoc_insertion_point(field_set:CMsgClientRequestedClientStats.StatsToSend.client_stat)
}

// optional uint32 stat_aggregate_method = 2;
inline bool CMsgClientRequestedClientStats_StatsToSend::_internal_has_stat_aggregate_method() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientRequestedClientStats_StatsToSend::has_stat_aggregate_method() const {
  return _internal_has_stat_aggregate_method();
}
inline void CMsgClientRequestedClientStats_StatsToSend::clear_stat_aggregate_method() {
  stat_aggregate_method_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgClientRequestedClientStats_StatsToSend::_internal_stat_aggregate_method() const {
  return stat_aggregate_method_;
}
inline uint32_t CMsgClientRequestedClientStats_StatsToSend::stat_aggregate_method() const {
  // @@protoc_insertion_point(field_get:CMsgClientRequestedClientStats.StatsToSend.stat_aggregate_method)
  return _internal_stat_aggregate_method();
}
inline void CMsgClientRequestedClientStats_StatsToSend::_internal_set_stat_aggregate_method(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  stat_aggregate_method_ = value;
}
inline void CMsgClientRequestedClientStats_StatsToSend::set_stat_aggregate_method(uint32_t value) {
  _internal_set_stat_aggregate_method(value);
  // @@protoc_insertion_point(field_set:CMsgClientRequestedClientStats.StatsToSend.stat_aggregate_method)
}

// -------------------------------------------------------------------

// CMsgClientRequestedClientStats

// repeated .CMsgClientRequestedClientStats.StatsToSend stats_to_send = 1;
inline int CMsgClientRequestedClientStats::_internal_stats_to_send_size() const {
  return stats_to_send_.size();
}
inline int CMsgClientRequestedClientStats::stats_to_send_size() const {
  return _internal_stats_to_send_size();
}
inline void CMsgClientRequestedClientStats::clear_stats_to_send() {
  stats_to_send_.Clear();
}
inline ::CMsgClientRequestedClientStats_StatsToSend* CMsgClientRequestedClientStats::mutable_stats_to_send(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgClientRequestedClientStats.stats_to_send)
  return stats_to_send_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientRequestedClientStats_StatsToSend >*
CMsgClientRequestedClientStats::mutable_stats_to_send() {
  // @@protoc_insertion_point(field_mutable_list:CMsgClientRequestedClientStats.stats_to_send)
  return &stats_to_send_;
}
inline const ::CMsgClientRequestedClientStats_StatsToSend& CMsgClientRequestedClientStats::_internal_stats_to_send(int index) const {
  return stats_to_send_.Get(index);
}
inline const ::CMsgClientRequestedClientStats_StatsToSend& CMsgClientRequestedClientStats::stats_to_send(int index) const {
  // @@protoc_insertion_point(field_get:CMsgClientRequestedClientStats.stats_to_send)
  return _internal_stats_to_send(index);
}
inline ::CMsgClientRequestedClientStats_StatsToSend* CMsgClientRequestedClientStats::_internal_add_stats_to_send() {
  return stats_to_send_.Add();
}
inline ::CMsgClientRequestedClientStats_StatsToSend* CMsgClientRequestedClientStats::add_stats_to_send() {
  ::CMsgClientRequestedClientStats_StatsToSend* _add = _internal_add_stats_to_send();
  // @@protoc_insertion_point(field_add:CMsgClientRequestedClientStats.stats_to_send)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientRequestedClientStats_StatsToSend >&
CMsgClientRequestedClientStats::stats_to_send() const {
  // @@protoc_insertion_point(field_list:CMsgClientRequestedClientStats.stats_to_send)
  return stats_to_send_;
}

// -------------------------------------------------------------------

// CMsgClientStat2_StatDetail

// optional uint32 client_stat = 1;
inline bool CMsgClientStat2_StatDetail::_internal_has_client_stat() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientStat2_StatDetail::has_client_stat() const {
  return _internal_has_client_stat();
}
inline void CMsgClientStat2_StatDetail::clear_client_stat() {
  client_stat_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgClientStat2_StatDetail::_internal_client_stat() const {
  return client_stat_;
}
inline uint32_t CMsgClientStat2_StatDetail::client_stat() const {
  // @@protoc_insertion_point(field_get:CMsgClientStat2.StatDetail.client_stat)
  return _internal_client_stat();
}
inline void CMsgClientStat2_StatDetail::_internal_set_client_stat(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  client_stat_ = value;
}
inline void CMsgClientStat2_StatDetail::set_client_stat(uint32_t value) {
  _internal_set_client_stat(value);
  // @@protoc_insertion_point(field_set:CMsgClientStat2.StatDetail.client_stat)
}

// optional int64 ll_value = 2;
inline bool CMsgClientStat2_StatDetail::_internal_has_ll_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientStat2_StatDetail::has_ll_value() const {
  return _internal_has_ll_value();
}
inline void CMsgClientStat2_StatDetail::clear_ll_value() {
  ll_value_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t CMsgClientStat2_StatDetail::_internal_ll_value() const {
  return ll_value_;
}
inline int64_t CMsgClientStat2_StatDetail::ll_value() const {
  // @@protoc_insertion_point(field_get:CMsgClientStat2.StatDetail.ll_value)
  return _internal_ll_value();
}
inline void CMsgClientStat2_StatDetail::_internal_set_ll_value(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  ll_value_ = value;
}
inline void CMsgClientStat2_StatDetail::set_ll_value(int64_t value) {
  _internal_set_ll_value(value);
  // @@protoc_insertion_point(field_set:CMsgClientStat2.StatDetail.ll_value)
}

// optional uint32 time_of_day = 3;
inline bool CMsgClientStat2_StatDetail::_internal_has_time_of_day() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientStat2_StatDetail::has_time_of_day() const {
  return _internal_has_time_of_day();
}
inline void CMsgClientStat2_StatDetail::clear_time_of_day() {
  time_of_day_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgClientStat2_StatDetail::_internal_time_of_day() const {
  return time_of_day_;
}
inline uint32_t CMsgClientStat2_StatDetail::time_of_day() const {
  // @@protoc_insertion_point(field_get:CMsgClientStat2.StatDetail.time_of_day)
  return _internal_time_of_day();
}
inline void CMsgClientStat2_StatDetail::_internal_set_time_of_day(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  time_of_day_ = value;
}
inline void CMsgClientStat2_StatDetail::set_time_of_day(uint32_t value) {
  _internal_set_time_of_day(value);
  // @@protoc_insertion_point(field_set:CMsgClientStat2.StatDetail.time_of_day)
}

// optional uint32 cell_id = 4;
inline bool CMsgClientStat2_StatDetail::_internal_has_cell_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientStat2_StatDetail::has_cell_id() const {
  return _internal_has_cell_id();
}
inline void CMsgClientStat2_StatDetail::clear_cell_id() {
  cell_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgClientStat2_StatDetail::_internal_cell_id() const {
  return cell_id_;
}
inline uint32_t CMsgClientStat2_StatDetail::cell_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientStat2.StatDetail.cell_id)
  return _internal_cell_id();
}
inline void CMsgClientStat2_StatDetail::_internal_set_cell_id(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  cell_id_ = value;
}
inline void CMsgClientStat2_StatDetail::set_cell_id(uint32_t value) {
  _internal_set_cell_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientStat2.StatDetail.cell_id)
}

// optional uint32 depot_id = 5;
inline bool CMsgClientStat2_StatDetail::_internal_has_depot_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgClientStat2_StatDetail::has_depot_id() const {
  return _internal_has_depot_id();
}
inline void CMsgClientStat2_StatDetail::clear_depot_id() {
  depot_id_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgClientStat2_StatDetail::_internal_depot_id() const {
  return depot_id_;
}
inline uint32_t CMsgClientStat2_StatDetail::depot_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientStat2.StatDetail.depot_id)
  return _internal_depot_id();
}
inline void CMsgClientStat2_StatDetail::_internal_set_depot_id(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  depot_id_ = value;
}
inline void CMsgClientStat2_StatDetail::set_depot_id(uint32_t value) {
  _internal_set_depot_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientStat2.StatDetail.depot_id)
}

// optional uint32 app_id = 6;
inline bool CMsgClientStat2_StatDetail::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgClientStat2_StatDetail::has_app_id() const {
  return _internal_has_app_id();
}
inline void CMsgClientStat2_StatDetail::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgClientStat2_StatDetail::_internal_app_id() const {
  return app_id_;
}
inline uint32_t CMsgClientStat2_StatDetail::app_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientStat2.StatDetail.app_id)
  return _internal_app_id();
}
inline void CMsgClientStat2_StatDetail::_internal_set_app_id(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  app_id_ = value;
}
inline void CMsgClientStat2_StatDetail::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientStat2.StatDetail.app_id)
}

// -------------------------------------------------------------------

// CMsgClientStat2

// repeated .CMsgClientStat2.StatDetail stat_detail = 1;
inline int CMsgClientStat2::_internal_stat_detail_size() const {
  return stat_detail_.size();
}
inline int CMsgClientStat2::stat_detail_size() const {
  return _internal_stat_detail_size();
}
inline void CMsgClientStat2::clear_stat_detail() {
  stat_detail_.Clear();
}
inline ::CMsgClientStat2_StatDetail* CMsgClientStat2::mutable_stat_detail(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgClientStat2.stat_detail)
  return stat_detail_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientStat2_StatDetail >*
CMsgClientStat2::mutable_stat_detail() {
  // @@protoc_insertion_point(field_mutable_list:CMsgClientStat2.stat_detail)
  return &stat_detail_;
}
inline const ::CMsgClientStat2_StatDetail& CMsgClientStat2::_internal_stat_detail(int index) const {
  return stat_detail_.Get(index);
}
inline const ::CMsgClientStat2_StatDetail& CMsgClientStat2::stat_detail(int index) const {
  // @@protoc_insertion_point(field_get:CMsgClientStat2.stat_detail)
  return _internal_stat_detail(index);
}
inline ::CMsgClientStat2_StatDetail* CMsgClientStat2::_internal_add_stat_detail() {
  return stat_detail_.Add();
}
inline ::CMsgClientStat2_StatDetail* CMsgClientStat2::add_stat_detail() {
  ::CMsgClientStat2_StatDetail* _add = _internal_add_stat_detail();
  // @@protoc_insertion_point(field_add:CMsgClientStat2.stat_detail)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientStat2_StatDetail >&
CMsgClientStat2::stat_detail() const {
  // @@protoc_insertion_point(field_list:CMsgClientStat2.stat_detail)
  return stat_detail_;
}

// -------------------------------------------------------------------

// CMsgClientInviteToGame

// optional fixed64 steam_id_dest = 1;
inline bool CMsgClientInviteToGame::_internal_has_steam_id_dest() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientInviteToGame::has_steam_id_dest() const {
  return _internal_has_steam_id_dest();
}
inline void CMsgClientInviteToGame::clear_steam_id_dest() {
  steam_id_dest_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CMsgClientInviteToGame::_internal_steam_id_dest() const {
  return steam_id_dest_;
}
inline uint64_t CMsgClientInviteToGame::steam_id_dest() const {
  // @@protoc_insertion_point(field_get:CMsgClientInviteToGame.steam_id_dest)
  return _internal_steam_id_dest();
}
inline void CMsgClientInviteToGame::_internal_set_steam_id_dest(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  steam_id_dest_ = value;
}
inline void CMsgClientInviteToGame::set_steam_id_dest(uint64_t value) {
  _internal_set_steam_id_dest(value);
  // @@protoc_insertion_point(field_set:CMsgClientInviteToGame.steam_id_dest)
}

// optional fixed64 steam_id_src = 2;
inline bool CMsgClientInviteToGame::_internal_has_steam_id_src() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientInviteToGame::has_steam_id_src() const {
  return _internal_has_steam_id_src();
}
inline void CMsgClientInviteToGame::clear_steam_id_src() {
  steam_id_src_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline uint64_t CMsgClientInviteToGame::_internal_steam_id_src() const {
  return steam_id_src_;
}
inline uint64_t CMsgClientInviteToGame::steam_id_src() const {
  // @@protoc_insertion_point(field_get:CMsgClientInviteToGame.steam_id_src)
  return _internal_steam_id_src();
}
inline void CMsgClientInviteToGame::_internal_set_steam_id_src(uint64_t value) {
  _has_bits_[0] |= 0x00000008u;
  steam_id_src_ = value;
}
inline void CMsgClientInviteToGame::set_steam_id_src(uint64_t value) {
  _internal_set_steam_id_src(value);
  // @@protoc_insertion_point(field_set:CMsgClientInviteToGame.steam_id_src)
}

// optional string connect_string = 3;
inline bool CMsgClientInviteToGame::_internal_has_connect_string() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientInviteToGame::has_connect_string() const {
  return _internal_has_connect_string();
}
inline void CMsgClientInviteToGame::clear_connect_string() {
  connect_string_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientInviteToGame::connect_string() const {
  // @@protoc_insertion_point(field_get:CMsgClientInviteToGame.connect_string)
  return _internal_connect_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientInviteToGame::set_connect_string(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 connect_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientInviteToGame.connect_string)
}
inline std::string* CMsgClientInviteToGame::mutable_connect_string() {
  std::string* _s = _internal_mutable_connect_string();
  // @@protoc_insertion_point(field_mutable:CMsgClientInviteToGame.connect_string)
  return _s;
}
inline const std::string& CMsgClientInviteToGame::_internal_connect_string() const {
  return connect_string_.Get();
}
inline void CMsgClientInviteToGame::_internal_set_connect_string(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  connect_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientInviteToGame::_internal_mutable_connect_string() {
  _has_bits_[0] |= 0x00000001u;
  return connect_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientInviteToGame::release_connect_string() {
  // @@protoc_insertion_point(field_release:CMsgClientInviteToGame.connect_string)
  if (!_internal_has_connect_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = connect_string_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (connect_string_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    connect_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientInviteToGame::set_allocated_connect_string(std::string* connect_string) {
  if (connect_string != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  connect_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), connect_string,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (connect_string_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    connect_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientInviteToGame.connect_string)
}

// optional string remote_play = 4;
inline bool CMsgClientInviteToGame::_internal_has_remote_play() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientInviteToGame::has_remote_play() const {
  return _internal_has_remote_play();
}
inline void CMsgClientInviteToGame::clear_remote_play() {
  remote_play_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgClientInviteToGame::remote_play() const {
  // @@protoc_insertion_point(field_get:CMsgClientInviteToGame.remote_play)
  return _internal_remote_play();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientInviteToGame::set_remote_play(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 remote_play_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientInviteToGame.remote_play)
}
inline std::string* CMsgClientInviteToGame::mutable_remote_play() {
  std::string* _s = _internal_mutable_remote_play();
  // @@protoc_insertion_point(field_mutable:CMsgClientInviteToGame.remote_play)
  return _s;
}
inline const std::string& CMsgClientInviteToGame::_internal_remote_play() const {
  return remote_play_.Get();
}
inline void CMsgClientInviteToGame::_internal_set_remote_play(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  remote_play_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientInviteToGame::_internal_mutable_remote_play() {
  _has_bits_[0] |= 0x00000002u;
  return remote_play_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientInviteToGame::release_remote_play() {
  // @@protoc_insertion_point(field_release:CMsgClientInviteToGame.remote_play)
  if (!_internal_has_remote_play()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = remote_play_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (remote_play_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    remote_play_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientInviteToGame::set_allocated_remote_play(std::string* remote_play) {
  if (remote_play != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  remote_play_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remote_play,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (remote_play_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    remote_play_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientInviteToGame.remote_play)
}

// -------------------------------------------------------------------

// CMsgClientChatInvite

// optional fixed64 steam_id_invited = 1;
inline bool CMsgClientChatInvite::_internal_has_steam_id_invited() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientChatInvite::has_steam_id_invited() const {
  return _internal_has_steam_id_invited();
}
inline void CMsgClientChatInvite::clear_steam_id_invited() {
  steam_id_invited_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CMsgClientChatInvite::_internal_steam_id_invited() const {
  return steam_id_invited_;
}
inline uint64_t CMsgClientChatInvite::steam_id_invited() const {
  // @@protoc_insertion_point(field_get:CMsgClientChatInvite.steam_id_invited)
  return _internal_steam_id_invited();
}
inline void CMsgClientChatInvite::_internal_set_steam_id_invited(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  steam_id_invited_ = value;
}
inline void CMsgClientChatInvite::set_steam_id_invited(uint64_t value) {
  _internal_set_steam_id_invited(value);
  // @@protoc_insertion_point(field_set:CMsgClientChatInvite.steam_id_invited)
}

// optional fixed64 steam_id_chat = 2;
inline bool CMsgClientChatInvite::_internal_has_steam_id_chat() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientChatInvite::has_steam_id_chat() const {
  return _internal_has_steam_id_chat();
}
inline void CMsgClientChatInvite::clear_steam_id_chat() {
  steam_id_chat_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CMsgClientChatInvite::_internal_steam_id_chat() const {
  return steam_id_chat_;
}
inline uint64_t CMsgClientChatInvite::steam_id_chat() const {
  // @@protoc_insertion_point(field_get:CMsgClientChatInvite.steam_id_chat)
  return _internal_steam_id_chat();
}
inline void CMsgClientChatInvite::_internal_set_steam_id_chat(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  steam_id_chat_ = value;
}
inline void CMsgClientChatInvite::set_steam_id_chat(uint64_t value) {
  _internal_set_steam_id_chat(value);
  // @@protoc_insertion_point(field_set:CMsgClientChatInvite.steam_id_chat)
}

// optional fixed64 steam_id_patron = 3;
inline bool CMsgClientChatInvite::_internal_has_steam_id_patron() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientChatInvite::has_steam_id_patron() const {
  return _internal_has_steam_id_patron();
}
inline void CMsgClientChatInvite::clear_steam_id_patron() {
  steam_id_patron_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline uint64_t CMsgClientChatInvite::_internal_steam_id_patron() const {
  return steam_id_patron_;
}
inline uint64_t CMsgClientChatInvite::steam_id_patron() const {
  // @@protoc_insertion_point(field_get:CMsgClientChatInvite.steam_id_patron)
  return _internal_steam_id_patron();
}
inline void CMsgClientChatInvite::_internal_set_steam_id_patron(uint64_t value) {
  _has_bits_[0] |= 0x00000008u;
  steam_id_patron_ = value;
}
inline void CMsgClientChatInvite::set_steam_id_patron(uint64_t value) {
  _internal_set_steam_id_patron(value);
  // @@protoc_insertion_point(field_set:CMsgClientChatInvite.steam_id_patron)
}

// optional int32 chatroom_type = 4;
inline bool CMsgClientChatInvite::_internal_has_chatroom_type() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgClientChatInvite::has_chatroom_type() const {
  return _internal_has_chatroom_type();
}
inline void CMsgClientChatInvite::clear_chatroom_type() {
  chatroom_type_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline int32_t CMsgClientChatInvite::_internal_chatroom_type() const {
  return chatroom_type_;
}
inline int32_t CMsgClientChatInvite::chatroom_type() const {
  // @@protoc_insertion_point(field_get:CMsgClientChatInvite.chatroom_type)
  return _internal_chatroom_type();
}
inline void CMsgClientChatInvite::_internal_set_chatroom_type(int32_t value) {
  _has_bits_[0] |= 0x00000040u;
  chatroom_type_ = value;
}
inline void CMsgClientChatInvite::set_chatroom_type(int32_t value) {
  _internal_set_chatroom_type(value);
  // @@protoc_insertion_point(field_set:CMsgClientChatInvite.chatroom_type)
}

// optional fixed64 steam_id_friend_chat = 5;
inline bool CMsgClientChatInvite::_internal_has_steam_id_friend_chat() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgClientChatInvite::has_steam_id_friend_chat() const {
  return _internal_has_steam_id_friend_chat();
}
inline void CMsgClientChatInvite::clear_steam_id_friend_chat() {
  steam_id_friend_chat_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000010u;
}
inline uint64_t CMsgClientChatInvite::_internal_steam_id_friend_chat() const {
  return steam_id_friend_chat_;
}
inline uint64_t CMsgClientChatInvite::steam_id_friend_chat() const {
  // @@protoc_insertion_point(field_get:CMsgClientChatInvite.steam_id_friend_chat)
  return _internal_steam_id_friend_chat();
}
inline void CMsgClientChatInvite::_internal_set_steam_id_friend_chat(uint64_t value) {
  _has_bits_[0] |= 0x00000010u;
  steam_id_friend_chat_ = value;
}
inline void CMsgClientChatInvite::set_steam_id_friend_chat(uint64_t value) {
  _internal_set_steam_id_friend_chat(value);
  // @@protoc_insertion_point(field_set:CMsgClientChatInvite.steam_id_friend_chat)
}

// optional string chat_name = 6;
inline bool CMsgClientChatInvite::_internal_has_chat_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientChatInvite::has_chat_name() const {
  return _internal_has_chat_name();
}
inline void CMsgClientChatInvite::clear_chat_name() {
  chat_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientChatInvite::chat_name() const {
  // @@protoc_insertion_point(field_get:CMsgClientChatInvite.chat_name)
  return _internal_chat_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientChatInvite::set_chat_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 chat_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientChatInvite.chat_name)
}
inline std::string* CMsgClientChatInvite::mutable_chat_name() {
  std::string* _s = _internal_mutable_chat_name();
  // @@protoc_insertion_point(field_mutable:CMsgClientChatInvite.chat_name)
  return _s;
}
inline const std::string& CMsgClientChatInvite::_internal_chat_name() const {
  return chat_name_.Get();
}
inline void CMsgClientChatInvite::_internal_set_chat_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  chat_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientChatInvite::_internal_mutable_chat_name() {
  _has_bits_[0] |= 0x00000001u;
  return chat_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientChatInvite::release_chat_name() {
  // @@protoc_insertion_point(field_release:CMsgClientChatInvite.chat_name)
  if (!_internal_has_chat_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = chat_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (chat_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    chat_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientChatInvite::set_allocated_chat_name(std::string* chat_name) {
  if (chat_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  chat_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chat_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (chat_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    chat_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientChatInvite.chat_name)
}

// optional fixed64 game_id = 7;
inline bool CMsgClientChatInvite::_internal_has_game_id() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgClientChatInvite::has_game_id() const {
  return _internal_has_game_id();
}
inline void CMsgClientChatInvite::clear_game_id() {
  game_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000020u;
}
inline uint64_t CMsgClientChatInvite::_internal_game_id() const {
  return game_id_;
}
inline uint64_t CMsgClientChatInvite::game_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientChatInvite.game_id)
  return _internal_game_id();
}
inline void CMsgClientChatInvite::_internal_set_game_id(uint64_t value) {
  _has_bits_[0] |= 0x00000020u;
  game_id_ = value;
}
inline void CMsgClientChatInvite::set_game_id(uint64_t value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientChatInvite.game_id)
}

// -------------------------------------------------------------------

// CMsgClientConnectionStats_Stats_Logon

// optional int32 connect_attempts = 1;
inline bool CMsgClientConnectionStats_Stats_Logon::_internal_has_connect_attempts() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientConnectionStats_Stats_Logon::has_connect_attempts() const {
  return _internal_has_connect_attempts();
}
inline void CMsgClientConnectionStats_Stats_Logon::clear_connect_attempts() {
  connect_attempts_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t CMsgClientConnectionStats_Stats_Logon::_internal_connect_attempts() const {
  return connect_attempts_;
}
inline int32_t CMsgClientConnectionStats_Stats_Logon::connect_attempts() const {
  // @@protoc_insertion_point(field_get:CMsgClientConnectionStats.Stats_Logon.connect_attempts)
  return _internal_connect_attempts();
}
inline void CMsgClientConnectionStats_Stats_Logon::_internal_set_connect_attempts(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  connect_attempts_ = value;
}
inline void CMsgClientConnectionStats_Stats_Logon::set_connect_attempts(int32_t value) {
  _internal_set_connect_attempts(value);
  // @@protoc_insertion_point(field_set:CMsgClientConnectionStats.Stats_Logon.connect_attempts)
}

// optional int32 connect_successes = 2;
inline bool CMsgClientConnectionStats_Stats_Logon::_internal_has_connect_successes() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientConnectionStats_Stats_Logon::has_connect_successes() const {
  return _internal_has_connect_successes();
}
inline void CMsgClientConnectionStats_Stats_Logon::clear_connect_successes() {
  connect_successes_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t CMsgClientConnectionStats_Stats_Logon::_internal_connect_successes() const {
  return connect_successes_;
}
inline int32_t CMsgClientConnectionStats_Stats_Logon::connect_successes() const {
  // @@protoc_insertion_point(field_get:CMsgClientConnectionStats.Stats_Logon.connect_successes)
  return _internal_connect_successes();
}
inline void CMsgClientConnectionStats_Stats_Logon::_internal_set_connect_successes(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  connect_successes_ = value;
}
inline void CMsgClientConnectionStats_Stats_Logon::set_connect_successes(int32_t value) {
  _internal_set_connect_successes(value);
  // @@protoc_insertion_point(field_set:CMsgClientConnectionStats.Stats_Logon.connect_successes)
}

// optional int32 connect_failures = 3;
inline bool CMsgClientConnectionStats_Stats_Logon::_internal_has_connect_failures() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientConnectionStats_Stats_Logon::has_connect_failures() const {
  return _internal_has_connect_failures();
}
inline void CMsgClientConnectionStats_Stats_Logon::clear_connect_failures() {
  connect_failures_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t CMsgClientConnectionStats_Stats_Logon::_internal_connect_failures() const {
  return connect_failures_;
}
inline int32_t CMsgClientConnectionStats_Stats_Logon::connect_failures() const {
  // @@protoc_insertion_point(field_get:CMsgClientConnectionStats.Stats_Logon.connect_failures)
  return _internal_connect_failures();
}
inline void CMsgClientConnectionStats_Stats_Logon::_internal_set_connect_failures(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  connect_failures_ = value;
}
inline void CMsgClientConnectionStats_Stats_Logon::set_connect_failures(int32_t value) {
  _internal_set_connect_failures(value);
  // @@protoc_insertion_point(field_set:CMsgClientConnectionStats.Stats_Logon.connect_failures)
}

// optional int32 connections_dropped = 4;
inline bool CMsgClientConnectionStats_Stats_Logon::_internal_has_connections_dropped() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientConnectionStats_Stats_Logon::has_connections_dropped() const {
  return _internal_has_connections_dropped();
}
inline void CMsgClientConnectionStats_Stats_Logon::clear_connections_dropped() {
  connections_dropped_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t CMsgClientConnectionStats_Stats_Logon::_internal_connections_dropped() const {
  return connections_dropped_;
}
inline int32_t CMsgClientConnectionStats_Stats_Logon::connections_dropped() const {
  // @@protoc_insertion_point(field_get:CMsgClientConnectionStats.Stats_Logon.connections_dropped)
  return _internal_connections_dropped();
}
inline void CMsgClientConnectionStats_Stats_Logon::_internal_set_connections_dropped(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  connections_dropped_ = value;
}
inline void CMsgClientConnectionStats_Stats_Logon::set_connections_dropped(int32_t value) {
  _internal_set_connections_dropped(value);
  // @@protoc_insertion_point(field_set:CMsgClientConnectionStats.Stats_Logon.connections_dropped)
}

// optional uint32 seconds_running = 5;
inline bool CMsgClientConnectionStats_Stats_Logon::_internal_has_seconds_running() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgClientConnectionStats_Stats_Logon::has_seconds_running() const {
  return _internal_has_seconds_running();
}
inline void CMsgClientConnectionStats_Stats_Logon::clear_seconds_running() {
  seconds_running_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgClientConnectionStats_Stats_Logon::_internal_seconds_running() const {
  return seconds_running_;
}
inline uint32_t CMsgClientConnectionStats_Stats_Logon::seconds_running() const {
  // @@protoc_insertion_point(field_get:CMsgClientConnectionStats.Stats_Logon.seconds_running)
  return _internal_seconds_running();
}
inline void CMsgClientConnectionStats_Stats_Logon::_internal_set_seconds_running(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  seconds_running_ = value;
}
inline void CMsgClientConnectionStats_Stats_Logon::set_seconds_running(uint32_t value) {
  _internal_set_seconds_running(value);
  // @@protoc_insertion_point(field_set:CMsgClientConnectionStats.Stats_Logon.seconds_running)
}

// optional uint32 msec_tologonthistime = 6;
inline bool CMsgClientConnectionStats_Stats_Logon::_internal_has_msec_tologonthistime() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgClientConnectionStats_Stats_Logon::has_msec_tologonthistime() const {
  return _internal_has_msec_tologonthistime();
}
inline void CMsgClientConnectionStats_Stats_Logon::clear_msec_tologonthistime() {
  msec_tologonthistime_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgClientConnectionStats_Stats_Logon::_internal_msec_tologonthistime() const {
  return msec_tologonthistime_;
}
inline uint32_t CMsgClientConnectionStats_Stats_Logon::msec_tologonthistime() const {
  // @@protoc_insertion_point(field_get:CMsgClientConnectionStats.Stats_Logon.msec_tologonthistime)
  return _internal_msec_tologonthistime();
}
inline void CMsgClientConnectionStats_Stats_Logon::_internal_set_msec_tologonthistime(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  msec_tologonthistime_ = value;
}
inline void CMsgClientConnectionStats_Stats_Logon::set_msec_tologonthistime(uint32_t value) {
  _internal_set_msec_tologonthistime(value);
  // @@protoc_insertion_point(field_set:CMsgClientConnectionStats.Stats_Logon.msec_tologonthistime)
}

// optional uint32 count_bad_cms = 7;
inline bool CMsgClientConnectionStats_Stats_Logon::_internal_has_count_bad_cms() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgClientConnectionStats_Stats_Logon::has_count_bad_cms() const {
  return _internal_has_count_bad_cms();
}
inline void CMsgClientConnectionStats_Stats_Logon::clear_count_bad_cms() {
  count_bad_cms_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgClientConnectionStats_Stats_Logon::_internal_count_bad_cms() const {
  return count_bad_cms_;
}
inline uint32_t CMsgClientConnectionStats_Stats_Logon::count_bad_cms() const {
  // @@protoc_insertion_point(field_get:CMsgClientConnectionStats.Stats_Logon.count_bad_cms)
  return _internal_count_bad_cms();
}
inline void CMsgClientConnectionStats_Stats_Logon::_internal_set_count_bad_cms(uint32_t value) {
  _has_bits_[0] |= 0x00000040u;
  count_bad_cms_ = value;
}
inline void CMsgClientConnectionStats_Stats_Logon::set_count_bad_cms(uint32_t value) {
  _internal_set_count_bad_cms(value);
  // @@protoc_insertion_point(field_set:CMsgClientConnectionStats.Stats_Logon.count_bad_cms)
}

// optional bool no_udp_connectivity = 8;
inline bool CMsgClientConnectionStats_Stats_Logon::_internal_has_no_udp_connectivity() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgClientConnectionStats_Stats_Logon::has_no_udp_connectivity() const {
  return _internal_has_no_udp_connectivity();
}
inline void CMsgClientConnectionStats_Stats_Logon::clear_no_udp_connectivity() {
  no_udp_connectivity_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CMsgClientConnectionStats_Stats_Logon::_internal_no_udp_connectivity() const {
  return no_udp_connectivity_;
}
inline bool CMsgClientConnectionStats_Stats_Logon::no_udp_connectivity() const {
  // @@protoc_insertion_point(field_get:CMsgClientConnectionStats.Stats_Logon.no_udp_connectivity)
  return _internal_no_udp_connectivity();
}
inline void CMsgClientConnectionStats_Stats_Logon::_internal_set_no_udp_connectivity(bool value) {
  _has_bits_[0] |= 0x00000080u;
  no_udp_connectivity_ = value;
}
inline void CMsgClientConnectionStats_Stats_Logon::set_no_udp_connectivity(bool value) {
  _internal_set_no_udp_connectivity(value);
  // @@protoc_insertion_point(field_set:CMsgClientConnectionStats.Stats_Logon.no_udp_connectivity)
}

// optional bool no_tcp_connectivity = 9;
inline bool CMsgClientConnectionStats_Stats_Logon::_internal_has_no_tcp_connectivity() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgClientConnectionStats_Stats_Logon::has_no_tcp_connectivity() const {
  return _internal_has_no_tcp_connectivity();
}
inline void CMsgClientConnectionStats_Stats_Logon::clear_no_tcp_connectivity() {
  no_tcp_connectivity_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool CMsgClientConnectionStats_Stats_Logon::_internal_no_tcp_connectivity() const {
  return no_tcp_connectivity_;
}
inline bool CMsgClientConnectionStats_Stats_Logon::no_tcp_connectivity() const {
  // @@protoc_insertion_point(field_get:CMsgClientConnectionStats.Stats_Logon.no_tcp_connectivity)
  return _internal_no_tcp_connectivity();
}
inline void CMsgClientConnectionStats_Stats_Logon::_internal_set_no_tcp_connectivity(bool value) {
  _has_bits_[0] |= 0x00000100u;
  no_tcp_connectivity_ = value;
}
inline void CMsgClientConnectionStats_Stats_Logon::set_no_tcp_connectivity(bool value) {
  _internal_set_no_tcp_connectivity(value);
  // @@protoc_insertion_point(field_set:CMsgClientConnectionStats.Stats_Logon.no_tcp_connectivity)
}

// optional bool no_websocket_443_connectivity = 10;
inline bool CMsgClientConnectionStats_Stats_Logon::_internal_has_no_websocket_443_connectivity() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgClientConnectionStats_Stats_Logon::has_no_websocket_443_connectivity() const {
  return _internal_has_no_websocket_443_connectivity();
}
inline void CMsgClientConnectionStats_Stats_Logon::clear_no_websocket_443_connectivity() {
  no_websocket_443_connectivity_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool CMsgClientConnectionStats_Stats_Logon::_internal_no_websocket_443_connectivity() const {
  return no_websocket_443_connectivity_;
}
inline bool CMsgClientConnectionStats_Stats_Logon::no_websocket_443_connectivity() const {
  // @@protoc_insertion_point(field_get:CMsgClientConnectionStats.Stats_Logon.no_websocket_443_connectivity)
  return _internal_no_websocket_443_connectivity();
}
inline void CMsgClientConnectionStats_Stats_Logon::_internal_set_no_websocket_443_connectivity(bool value) {
  _has_bits_[0] |= 0x00000200u;
  no_websocket_443_connectivity_ = value;
}
inline void CMsgClientConnectionStats_Stats_Logon::set_no_websocket_443_connectivity(bool value) {
  _internal_set_no_websocket_443_connectivity(value);
  // @@protoc_insertion_point(field_set:CMsgClientConnectionStats.Stats_Logon.no_websocket_443_connectivity)
}

// optional bool no_websocket_non_443_connectivity = 11;
inline bool CMsgClientConnectionStats_Stats_Logon::_internal_has_no_websocket_non_443_connectivity() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgClientConnectionStats_Stats_Logon::has_no_websocket_non_443_connectivity() const {
  return _internal_has_no_websocket_non_443_connectivity();
}
inline void CMsgClientConnectionStats_Stats_Logon::clear_no_websocket_non_443_connectivity() {
  no_websocket_non_443_connectivity_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool CMsgClientConnectionStats_Stats_Logon::_internal_no_websocket_non_443_connectivity() const {
  return no_websocket_non_443_connectivity_;
}
inline bool CMsgClientConnectionStats_Stats_Logon::no_websocket_non_443_connectivity() const {
  // @@protoc_insertion_point(field_get:CMsgClientConnectionStats.Stats_Logon.no_websocket_non_443_connectivity)
  return _internal_no_websocket_non_443_connectivity();
}
inline void CMsgClientConnectionStats_Stats_Logon::_internal_set_no_websocket_non_443_connectivity(bool value) {
  _has_bits_[0] |= 0x00000400u;
  no_websocket_non_443_connectivity_ = value;
}
inline void CMsgClientConnectionStats_Stats_Logon::set_no_websocket_non_443_connectivity(bool value) {
  _internal_set_no_websocket_non_443_connectivity(value);
  // @@protoc_insertion_point(field_set:CMsgClientConnectionStats.Stats_Logon.no_websocket_non_443_connectivity)
}

// -------------------------------------------------------------------

// CMsgClientConnectionStats_Stats_UDP

// optional uint64 pkts_sent = 1;
inline bool CMsgClientConnectionStats_Stats_UDP::_internal_has_pkts_sent() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientConnectionStats_Stats_UDP::has_pkts_sent() const {
  return _internal_has_pkts_sent();
}
inline void CMsgClientConnectionStats_Stats_UDP::clear_pkts_sent() {
  pkts_sent_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgClientConnectionStats_Stats_UDP::_internal_pkts_sent() const {
  return pkts_sent_;
}
inline uint64_t CMsgClientConnectionStats_Stats_UDP::pkts_sent() const {
  // @@protoc_insertion_point(field_get:CMsgClientConnectionStats.Stats_UDP.pkts_sent)
  return _internal_pkts_sent();
}
inline void CMsgClientConnectionStats_Stats_UDP::_internal_set_pkts_sent(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  pkts_sent_ = value;
}
inline void CMsgClientConnectionStats_Stats_UDP::set_pkts_sent(uint64_t value) {
  _internal_set_pkts_sent(value);
  // @@protoc_insertion_point(field_set:CMsgClientConnectionStats.Stats_UDP.pkts_sent)
}

// optional uint64 bytes_sent = 2;
inline bool CMsgClientConnectionStats_Stats_UDP::_internal_has_bytes_sent() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientConnectionStats_Stats_UDP::has_bytes_sent() const {
  return _internal_has_bytes_sent();
}
inline void CMsgClientConnectionStats_Stats_UDP::clear_bytes_sent() {
  bytes_sent_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CMsgClientConnectionStats_Stats_UDP::_internal_bytes_sent() const {
  return bytes_sent_;
}
inline uint64_t CMsgClientConnectionStats_Stats_UDP::bytes_sent() const {
  // @@protoc_insertion_point(field_get:CMsgClientConnectionStats.Stats_UDP.bytes_sent)
  return _internal_bytes_sent();
}
inline void CMsgClientConnectionStats_Stats_UDP::_internal_set_bytes_sent(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  bytes_sent_ = value;
}
inline void CMsgClientConnectionStats_Stats_UDP::set_bytes_sent(uint64_t value) {
  _internal_set_bytes_sent(value);
  // @@protoc_insertion_point(field_set:CMsgClientConnectionStats.Stats_UDP.bytes_sent)
}

// optional uint64 pkts_recv = 3;
inline bool CMsgClientConnectionStats_Stats_UDP::_internal_has_pkts_recv() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientConnectionStats_Stats_UDP::has_pkts_recv() const {
  return _internal_has_pkts_recv();
}
inline void CMsgClientConnectionStats_Stats_UDP::clear_pkts_recv() {
  pkts_recv_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CMsgClientConnectionStats_Stats_UDP::_internal_pkts_recv() const {
  return pkts_recv_;
}
inline uint64_t CMsgClientConnectionStats_Stats_UDP::pkts_recv() const {
  // @@protoc_insertion_point(field_get:CMsgClientConnectionStats.Stats_UDP.pkts_recv)
  return _internal_pkts_recv();
}
inline void CMsgClientConnectionStats_Stats_UDP::_internal_set_pkts_recv(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  pkts_recv_ = value;
}
inline void CMsgClientConnectionStats_Stats_UDP::set_pkts_recv(uint64_t value) {
  _internal_set_pkts_recv(value);
  // @@protoc_insertion_point(field_set:CMsgClientConnectionStats.Stats_UDP.pkts_recv)
}

// optional uint64 pkts_processed = 4;
inline bool CMsgClientConnectionStats_Stats_UDP::_internal_has_pkts_processed() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientConnectionStats_Stats_UDP::has_pkts_processed() const {
  return _internal_has_pkts_processed();
}
inline void CMsgClientConnectionStats_Stats_UDP::clear_pkts_processed() {
  pkts_processed_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline uint64_t CMsgClientConnectionStats_Stats_UDP::_internal_pkts_processed() const {
  return pkts_processed_;
}
inline uint64_t CMsgClientConnectionStats_Stats_UDP::pkts_processed() const {
  // @@protoc_insertion_point(field_get:CMsgClientConnectionStats.Stats_UDP.pkts_processed)
  return _internal_pkts_processed();
}
inline void CMsgClientConnectionStats_Stats_UDP::_internal_set_pkts_processed(uint64_t value) {
  _has_bits_[0] |= 0x00000008u;
  pkts_processed_ = value;
}
inline void CMsgClientConnectionStats_Stats_UDP::set_pkts_processed(uint64_t value) {
  _internal_set_pkts_processed(value);
  // @@protoc_insertion_point(field_set:CMsgClientConnectionStats.Stats_UDP.pkts_processed)
}

// optional uint64 bytes_recv = 5;
inline bool CMsgClientConnectionStats_Stats_UDP::_internal_has_bytes_recv() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgClientConnectionStats_Stats_UDP::has_bytes_recv() const {
  return _internal_has_bytes_recv();
}
inline void CMsgClientConnectionStats_Stats_UDP::clear_bytes_recv() {
  bytes_recv_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000010u;
}
inline uint64_t CMsgClientConnectionStats_Stats_UDP::_internal_bytes_recv() const {
  return bytes_recv_;
}
inline uint64_t CMsgClientConnectionStats_Stats_UDP::bytes_recv() const {
  // @@protoc_insertion_point(field_get:CMsgClientConnectionStats.Stats_UDP.bytes_recv)
  return _internal_bytes_recv();
}
inline void CMsgClientConnectionStats_Stats_UDP::_internal_set_bytes_recv(uint64_t value) {
  _has_bits_[0] |= 0x00000010u;
  bytes_recv_ = value;
}
inline void CMsgClientConnectionStats_Stats_UDP::set_bytes_recv(uint64_t value) {
  _internal_set_bytes_recv(value);
  // @@protoc_insertion_point(field_set:CMsgClientConnectionStats.Stats_UDP.bytes_recv)
}

// -------------------------------------------------------------------

// CMsgClientConnectionStats_Stats_VConn

// optional uint32 connections_udp = 1;
inline bool CMsgClientConnectionStats_Stats_VConn::_internal_has_connections_udp() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientConnectionStats_Stats_VConn::has_connections_udp() const {
  return _internal_has_connections_udp();
}
inline void CMsgClientConnectionStats_Stats_VConn::clear_connections_udp() {
  connections_udp_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgClientConnectionStats_Stats_VConn::_internal_connections_udp() const {
  return connections_udp_;
}
inline uint32_t CMsgClientConnectionStats_Stats_VConn::connections_udp() const {
  // @@protoc_insertion_point(field_get:CMsgClientConnectionStats.Stats_VConn.connections_udp)
  return _internal_connections_udp();
}
inline void CMsgClientConnectionStats_Stats_VConn::_internal_set_connections_udp(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  connections_udp_ = value;
}
inline void CMsgClientConnectionStats_Stats_VConn::set_connections_udp(uint32_t value) {
  _internal_set_connections_udp(value);
  // @@protoc_insertion_point(field_set:CMsgClientConnectionStats.Stats_VConn.connections_udp)
}

// optional uint32 connections_tcp = 2;
inline bool CMsgClientConnectionStats_Stats_VConn::_internal_has_connections_tcp() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientConnectionStats_Stats_VConn::has_connections_tcp() const {
  return _internal_has_connections_tcp();
}
inline void CMsgClientConnectionStats_Stats_VConn::clear_connections_tcp() {
  connections_tcp_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgClientConnectionStats_Stats_VConn::_internal_connections_tcp() const {
  return connections_tcp_;
}
inline uint32_t CMsgClientConnectionStats_Stats_VConn::connections_tcp() const {
  // @@protoc_insertion_point(field_get:CMsgClientConnectionStats.Stats_VConn.connections_tcp)
  return _internal_connections_tcp();
}
inline void CMsgClientConnectionStats_Stats_VConn::_internal_set_connections_tcp(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  connections_tcp_ = value;
}
inline void CMsgClientConnectionStats_Stats_VConn::set_connections_tcp(uint32_t value) {
  _internal_set_connections_tcp(value);
  // @@protoc_insertion_point(field_set:CMsgClientConnectionStats.Stats_VConn.connections_tcp)
}

// optional .CMsgClientConnectionStats.Stats_UDP stats_udp = 3;
inline bool CMsgClientConnectionStats_Stats_VConn::_internal_has_stats_udp() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || stats_udp_ != nullptr);
  return value;
}
inline bool CMsgClientConnectionStats_Stats_VConn::has_stats_udp() const {
  return _internal_has_stats_udp();
}
inline void CMsgClientConnectionStats_Stats_VConn::clear_stats_udp() {
  if (stats_udp_ != nullptr) stats_udp_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgClientConnectionStats_Stats_UDP& CMsgClientConnectionStats_Stats_VConn::_internal_stats_udp() const {
  const ::CMsgClientConnectionStats_Stats_UDP* p = stats_udp_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgClientConnectionStats_Stats_UDP&>(
      ::_CMsgClientConnectionStats_Stats_UDP_default_instance_);
}
inline const ::CMsgClientConnectionStats_Stats_UDP& CMsgClientConnectionStats_Stats_VConn::stats_udp() const {
  // @@protoc_insertion_point(field_get:CMsgClientConnectionStats.Stats_VConn.stats_udp)
  return _internal_stats_udp();
}
inline void CMsgClientConnectionStats_Stats_VConn::unsafe_arena_set_allocated_stats_udp(
    ::CMsgClientConnectionStats_Stats_UDP* stats_udp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stats_udp_);
  }
  stats_udp_ = stats_udp;
  if (stats_udp) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgClientConnectionStats.Stats_VConn.stats_udp)
}
inline ::CMsgClientConnectionStats_Stats_UDP* CMsgClientConnectionStats_Stats_VConn::release_stats_udp() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgClientConnectionStats_Stats_UDP* temp = stats_udp_;
  stats_udp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgClientConnectionStats_Stats_UDP* CMsgClientConnectionStats_Stats_VConn::unsafe_arena_release_stats_udp() {
  // @@protoc_insertion_point(field_release:CMsgClientConnectionStats.Stats_VConn.stats_udp)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgClientConnectionStats_Stats_UDP* temp = stats_udp_;
  stats_udp_ = nullptr;
  return temp;
}
inline ::CMsgClientConnectionStats_Stats_UDP* CMsgClientConnectionStats_Stats_VConn::_internal_mutable_stats_udp() {
  _has_bits_[0] |= 0x00000001u;
  if (stats_udp_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgClientConnectionStats_Stats_UDP>(GetArenaForAllocation());
    stats_udp_ = p;
  }
  return stats_udp_;
}
inline ::CMsgClientConnectionStats_Stats_UDP* CMsgClientConnectionStats_Stats_VConn::mutable_stats_udp() {
  ::CMsgClientConnectionStats_Stats_UDP* _msg = _internal_mutable_stats_udp();
  // @@protoc_insertion_point(field_mutable:CMsgClientConnectionStats.Stats_VConn.stats_udp)
  return _msg;
}
inline void CMsgClientConnectionStats_Stats_VConn::set_allocated_stats_udp(::CMsgClientConnectionStats_Stats_UDP* stats_udp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete stats_udp_;
  }
  if (stats_udp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgClientConnectionStats_Stats_UDP>::GetOwningArena(stats_udp);
    if (message_arena != submessage_arena) {
      stats_udp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stats_udp, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  stats_udp_ = stats_udp;
  // @@protoc_insertion_point(field_set_allocated:CMsgClientConnectionStats.Stats_VConn.stats_udp)
}

// optional uint64 pkts_abandoned = 4;
inline bool CMsgClientConnectionStats_Stats_VConn::_internal_has_pkts_abandoned() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientConnectionStats_Stats_VConn::has_pkts_abandoned() const {
  return _internal_has_pkts_abandoned();
}
inline void CMsgClientConnectionStats_Stats_VConn::clear_pkts_abandoned() {
  pkts_abandoned_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline uint64_t CMsgClientConnectionStats_Stats_VConn::_internal_pkts_abandoned() const {
  return pkts_abandoned_;
}
inline uint64_t CMsgClientConnectionStats_Stats_VConn::pkts_abandoned() const {
  // @@protoc_insertion_point(field_get:CMsgClientConnectionStats.Stats_VConn.pkts_abandoned)
  return _internal_pkts_abandoned();
}
inline void CMsgClientConnectionStats_Stats_VConn::_internal_set_pkts_abandoned(uint64_t value) {
  _has_bits_[0] |= 0x00000008u;
  pkts_abandoned_ = value;
}
inline void CMsgClientConnectionStats_Stats_VConn::set_pkts_abandoned(uint64_t value) {
  _internal_set_pkts_abandoned(value);
  // @@protoc_insertion_point(field_set:CMsgClientConnectionStats.Stats_VConn.pkts_abandoned)
}

// optional uint64 conn_req_received = 5;
inline bool CMsgClientConnectionStats_Stats_VConn::_internal_has_conn_req_received() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgClientConnectionStats_Stats_VConn::has_conn_req_received() const {
  return _internal_has_conn_req_received();
}
inline void CMsgClientConnectionStats_Stats_VConn::clear_conn_req_received() {
  conn_req_received_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000010u;
}
inline uint64_t CMsgClientConnectionStats_Stats_VConn::_internal_conn_req_received() const {
  return conn_req_received_;
}
inline uint64_t CMsgClientConnectionStats_Stats_VConn::conn_req_received() const {
  // @@protoc_insertion_point(field_get:CMsgClientConnectionStats.Stats_VConn.conn_req_received)
  return _internal_conn_req_received();
}
inline void CMsgClientConnectionStats_Stats_VConn::_internal_set_conn_req_received(uint64_t value) {
  _has_bits_[0] |= 0x00000010u;
  conn_req_received_ = value;
}
inline void CMsgClientConnectionStats_Stats_VConn::set_conn_req_received(uint64_t value) {
  _internal_set_conn_req_received(value);
  // @@protoc_insertion_point(field_set:CMsgClientConnectionStats.Stats_VConn.conn_req_received)
}

// optional uint64 pkts_resent = 6;
inline bool CMsgClientConnectionStats_Stats_VConn::_internal_has_pkts_resent() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgClientConnectionStats_Stats_VConn::has_pkts_resent() const {
  return _internal_has_pkts_resent();
}
inline void CMsgClientConnectionStats_Stats_VConn::clear_pkts_resent() {
  pkts_resent_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000020u;
}
inline uint64_t CMsgClientConnectionStats_Stats_VConn::_internal_pkts_resent() const {
  return pkts_resent_;
}
inline uint64_t CMsgClientConnectionStats_Stats_VConn::pkts_resent() const {
  // @@protoc_insertion_point(field_get:CMsgClientConnectionStats.Stats_VConn.pkts_resent)
  return _internal_pkts_resent();
}
inline void CMsgClientConnectionStats_Stats_VConn::_internal_set_pkts_resent(uint64_t value) {
  _has_bits_[0] |= 0x00000020u;
  pkts_resent_ = value;
}
inline void CMsgClientConnectionStats_Stats_VConn::set_pkts_resent(uint64_t value) {
  _internal_set_pkts_resent(value);
  // @@protoc_insertion_point(field_set:CMsgClientConnectionStats.Stats_VConn.pkts_resent)
}

// optional uint64 msgs_sent = 7;
inline bool CMsgClientConnectionStats_Stats_VConn::_internal_has_msgs_sent() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgClientConnectionStats_Stats_VConn::has_msgs_sent() const {
  return _internal_has_msgs_sent();
}
inline void CMsgClientConnectionStats_Stats_VConn::clear_msgs_sent() {
  msgs_sent_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000040u;
}
inline uint64_t CMsgClientConnectionStats_Stats_VConn::_internal_msgs_sent() const {
  return msgs_sent_;
}
inline uint64_t CMsgClientConnectionStats_Stats_VConn::msgs_sent() const {
  // @@protoc_insertion_point(field_get:CMsgClientConnectionStats.Stats_VConn.msgs_sent)
  return _internal_msgs_sent();
}
inline void CMsgClientConnectionStats_Stats_VConn::_internal_set_msgs_sent(uint64_t value) {
  _has_bits_[0] |= 0x00000040u;
  msgs_sent_ = value;
}
inline void CMsgClientConnectionStats_Stats_VConn::set_msgs_sent(uint64_t value) {
  _internal_set_msgs_sent(value);
  // @@protoc_insertion_point(field_set:CMsgClientConnectionStats.Stats_VConn.msgs_sent)
}

// optional uint64 msgs_sent_failed = 8;
inline bool CMsgClientConnectionStats_Stats_VConn::_internal_has_msgs_sent_failed() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgClientConnectionStats_Stats_VConn::has_msgs_sent_failed() const {
  return _internal_has_msgs_sent_failed();
}
inline void CMsgClientConnectionStats_Stats_VConn::clear_msgs_sent_failed() {
  msgs_sent_failed_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000080u;
}
inline uint64_t CMsgClientConnectionStats_Stats_VConn::_internal_msgs_sent_failed() const {
  return msgs_sent_failed_;
}
inline uint64_t CMsgClientConnectionStats_Stats_VConn::msgs_sent_failed() const {
  // @@protoc_insertion_point(field_get:CMsgClientConnectionStats.Stats_VConn.msgs_sent_failed)
  return _internal_msgs_sent_failed();
}
inline void CMsgClientConnectionStats_Stats_VConn::_internal_set_msgs_sent_failed(uint64_t value) {
  _has_bits_[0] |= 0x00000080u;
  msgs_sent_failed_ = value;
}
inline void CMsgClientConnectionStats_Stats_VConn::set_msgs_sent_failed(uint64_t value) {
  _internal_set_msgs_sent_failed(value);
  // @@protoc_insertion_point(field_set:CMsgClientConnectionStats.Stats_VConn.msgs_sent_failed)
}

// optional uint64 msgs_recv = 9;
inline bool CMsgClientConnectionStats_Stats_VConn::_internal_has_msgs_recv() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgClientConnectionStats_Stats_VConn::has_msgs_recv() const {
  return _internal_has_msgs_recv();
}
inline void CMsgClientConnectionStats_Stats_VConn::clear_msgs_recv() {
  msgs_recv_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000100u;
}
inline uint64_t CMsgClientConnectionStats_Stats_VConn::_internal_msgs_recv() const {
  return msgs_recv_;
}
inline uint64_t CMsgClientConnectionStats_Stats_VConn::msgs_recv() const {
  // @@protoc_insertion_point(field_get:CMsgClientConnectionStats.Stats_VConn.msgs_recv)
  return _internal_msgs_recv();
}
inline void CMsgClientConnectionStats_Stats_VConn::_internal_set_msgs_recv(uint64_t value) {
  _has_bits_[0] |= 0x00000100u;
  msgs_recv_ = value;
}
inline void CMsgClientConnectionStats_Stats_VConn::set_msgs_recv(uint64_t value) {
  _internal_set_msgs_recv(value);
  // @@protoc_insertion_point(field_set:CMsgClientConnectionStats.Stats_VConn.msgs_recv)
}

// optional uint64 datagrams_sent = 10;
inline bool CMsgClientConnectionStats_Stats_VConn::_internal_has_datagrams_sent() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgClientConnectionStats_Stats_VConn::has_datagrams_sent() const {
  return _internal_has_datagrams_sent();
}
inline void CMsgClientConnectionStats_Stats_VConn::clear_datagrams_sent() {
  datagrams_sent_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000200u;
}
inline uint64_t CMsgClientConnectionStats_Stats_VConn::_internal_datagrams_sent() const {
  return datagrams_sent_;
}
inline uint64_t CMsgClientConnectionStats_Stats_VConn::datagrams_sent() const {
  // @@protoc_insertion_point(field_get:CMsgClientConnectionStats.Stats_VConn.datagrams_sent)
  return _internal_datagrams_sent();
}
inline void CMsgClientConnectionStats_Stats_VConn::_internal_set_datagrams_sent(uint64_t value) {
  _has_bits_[0] |= 0x00000200u;
  datagrams_sent_ = value;
}
inline void CMsgClientConnectionStats_Stats_VConn::set_datagrams_sent(uint64_t value) {
  _internal_set_datagrams_sent(value);
  // @@protoc_insertion_point(field_set:CMsgClientConnectionStats.Stats_VConn.datagrams_sent)
}

// optional uint64 datagrams_recv = 11;
inline bool CMsgClientConnectionStats_Stats_VConn::_internal_has_datagrams_recv() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgClientConnectionStats_Stats_VConn::has_datagrams_recv() const {
  return _internal_has_datagrams_recv();
}
inline void CMsgClientConnectionStats_Stats_VConn::clear_datagrams_recv() {
  datagrams_recv_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000400u;
}
inline uint64_t CMsgClientConnectionStats_Stats_VConn::_internal_datagrams_recv() const {
  return datagrams_recv_;
}
inline uint64_t CMsgClientConnectionStats_Stats_VConn::datagrams_recv() const {
  // @@protoc_insertion_point(field_get:CMsgClientConnectionStats.Stats_VConn.datagrams_recv)
  return _internal_datagrams_recv();
}
inline void CMsgClientConnectionStats_Stats_VConn::_internal_set_datagrams_recv(uint64_t value) {
  _has_bits_[0] |= 0x00000400u;
  datagrams_recv_ = value;
}
inline void CMsgClientConnectionStats_Stats_VConn::set_datagrams_recv(uint64_t value) {
  _internal_set_datagrams_recv(value);
  // @@protoc_insertion_point(field_set:CMsgClientConnectionStats.Stats_VConn.datagrams_recv)
}

// optional uint64 bad_pkts_recv = 12;
inline bool CMsgClientConnectionStats_Stats_VConn::_internal_has_bad_pkts_recv() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgClientConnectionStats_Stats_VConn::has_bad_pkts_recv() const {
  return _internal_has_bad_pkts_recv();
}
inline void CMsgClientConnectionStats_Stats_VConn::clear_bad_pkts_recv() {
  bad_pkts_recv_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000800u;
}
inline uint64_t CMsgClientConnectionStats_Stats_VConn::_internal_bad_pkts_recv() const {
  return bad_pkts_recv_;
}
inline uint64_t CMsgClientConnectionStats_Stats_VConn::bad_pkts_recv() const {
  // @@protoc_insertion_point(field_get:CMsgClientConnectionStats.Stats_VConn.bad_pkts_recv)
  return _internal_bad_pkts_recv();
}
inline void CMsgClientConnectionStats_Stats_VConn::_internal_set_bad_pkts_recv(uint64_t value) {
  _has_bits_[0] |= 0x00000800u;
  bad_pkts_recv_ = value;
}
inline void CMsgClientConnectionStats_Stats_VConn::set_bad_pkts_recv(uint64_t value) {
  _internal_set_bad_pkts_recv(value);
  // @@protoc_insertion_point(field_set:CMsgClientConnectionStats.Stats_VConn.bad_pkts_recv)
}

// optional uint64 unknown_conn_pkts_recv = 13;
inline bool CMsgClientConnectionStats_Stats_VConn::_internal_has_unknown_conn_pkts_recv() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgClientConnectionStats_Stats_VConn::has_unknown_conn_pkts_recv() const {
  return _internal_has_unknown_conn_pkts_recv();
}
inline void CMsgClientConnectionStats_Stats_VConn::clear_unknown_conn_pkts_recv() {
  unknown_conn_pkts_recv_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00001000u;
}
inline uint64_t CMsgClientConnectionStats_Stats_VConn::_internal_unknown_conn_pkts_recv() const {
  return unknown_conn_pkts_recv_;
}
inline uint64_t CMsgClientConnectionStats_Stats_VConn::unknown_conn_pkts_recv() const {
  // @@protoc_insertion_point(field_get:CMsgClientConnectionStats.Stats_VConn.unknown_conn_pkts_recv)
  return _internal_unknown_conn_pkts_recv();
}
inline void CMsgClientConnectionStats_Stats_VConn::_internal_set_unknown_conn_pkts_recv(uint64_t value) {
  _has_bits_[0] |= 0x00001000u;
  unknown_conn_pkts_recv_ = value;
}
inline void CMsgClientConnectionStats_Stats_VConn::set_unknown_conn_pkts_recv(uint64_t value) {
  _internal_set_unknown_conn_pkts_recv(value);
  // @@protoc_insertion_point(field_set:CMsgClientConnectionStats.Stats_VConn.unknown_conn_pkts_recv)
}

// optional uint64 missed_pkts_recv = 14;
inline bool CMsgClientConnectionStats_Stats_VConn::_internal_has_missed_pkts_recv() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgClientConnectionStats_Stats_VConn::has_missed_pkts_recv() const {
  return _internal_has_missed_pkts_recv();
}
inline void CMsgClientConnectionStats_Stats_VConn::clear_missed_pkts_recv() {
  missed_pkts_recv_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00002000u;
}
inline uint64_t CMsgClientConnectionStats_Stats_VConn::_internal_missed_pkts_recv() const {
  return missed_pkts_recv_;
}
inline uint64_t CMsgClientConnectionStats_Stats_VConn::missed_pkts_recv() const {
  // @@protoc_insertion_point(field_get:CMsgClientConnectionStats.Stats_VConn.missed_pkts_recv)
  return _internal_missed_pkts_recv();
}
inline void CMsgClientConnectionStats_Stats_VConn::_internal_set_missed_pkts_recv(uint64_t value) {
  _has_bits_[0] |= 0x00002000u;
  missed_pkts_recv_ = value;
}
inline void CMsgClientConnectionStats_Stats_VConn::set_missed_pkts_recv(uint64_t value) {
  _internal_set_missed_pkts_recv(value);
  // @@protoc_insertion_point(field_set:CMsgClientConnectionStats.Stats_VConn.missed_pkts_recv)
}

// optional uint64 dup_pkts_recv = 15;
inline bool CMsgClientConnectionStats_Stats_VConn::_internal_has_dup_pkts_recv() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CMsgClientConnectionStats_Stats_VConn::has_dup_pkts_recv() const {
  return _internal_has_dup_pkts_recv();
}
inline void CMsgClientConnectionStats_Stats_VConn::clear_dup_pkts_recv() {
  dup_pkts_recv_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00004000u;
}
inline uint64_t CMsgClientConnectionStats_Stats_VConn::_internal_dup_pkts_recv() const {
  return dup_pkts_recv_;
}
inline uint64_t CMsgClientConnectionStats_Stats_VConn::dup_pkts_recv() const {
  // @@protoc_insertion_point(field_get:CMsgClientConnectionStats.Stats_VConn.dup_pkts_recv)
  return _internal_dup_pkts_recv();
}
inline void CMsgClientConnectionStats_Stats_VConn::_internal_set_dup_pkts_recv(uint64_t value) {
  _has_bits_[0] |= 0x00004000u;
  dup_pkts_recv_ = value;
}
inline void CMsgClientConnectionStats_Stats_VConn::set_dup_pkts_recv(uint64_t value) {
  _internal_set_dup_pkts_recv(value);
  // @@protoc_insertion_point(field_set:CMsgClientConnectionStats.Stats_VConn.dup_pkts_recv)
}

// optional uint64 failed_connect_challenges = 16;
inline bool CMsgClientConnectionStats_Stats_VConn::_internal_has_failed_connect_challenges() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CMsgClientConnectionStats_Stats_VConn::has_failed_connect_challenges() const {
  return _internal_has_failed_connect_challenges();
}
inline void CMsgClientConnectionStats_Stats_VConn::clear_failed_connect_challenges() {
  failed_connect_challenges_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00008000u;
}
inline uint64_t CMsgClientConnectionStats_Stats_VConn::_internal_failed_connect_challenges() const {
  return failed_connect_challenges_;
}
inline uint64_t CMsgClientConnectionStats_Stats_VConn::failed_connect_challenges() const {
  // @@protoc_insertion_point(field_get:CMsgClientConnectionStats.Stats_VConn.failed_connect_challenges)
  return _internal_failed_connect_challenges();
}
inline void CMsgClientConnectionStats_Stats_VConn::_internal_set_failed_connect_challenges(uint64_t value) {
  _has_bits_[0] |= 0x00008000u;
  failed_connect_challenges_ = value;
}
inline void CMsgClientConnectionStats_Stats_VConn::set_failed_connect_challenges(uint64_t value) {
  _internal_set_failed_connect_challenges(value);
  // @@protoc_insertion_point(field_set:CMsgClientConnectionStats.Stats_VConn.failed_connect_challenges)
}

// optional uint32 micro_sec_avg_latency = 17;
inline bool CMsgClientConnectionStats_Stats_VConn::_internal_has_micro_sec_avg_latency() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CMsgClientConnectionStats_Stats_VConn::has_micro_sec_avg_latency() const {
  return _internal_has_micro_sec_avg_latency();
}
inline void CMsgClientConnectionStats_Stats_VConn::clear_micro_sec_avg_latency() {
  micro_sec_avg_latency_ = 0u;
  _has_bits_[0] &= ~0x00010000u;
}
inline uint32_t CMsgClientConnectionStats_Stats_VConn::_internal_micro_sec_avg_latency() const {
  return micro_sec_avg_latency_;
}
inline uint32_t CMsgClientConnectionStats_Stats_VConn::micro_sec_avg_latency() const {
  // @@protoc_insertion_point(field_get:CMsgClientConnectionStats.Stats_VConn.micro_sec_avg_latency)
  return _internal_micro_sec_avg_latency();
}
inline void CMsgClientConnectionStats_Stats_VConn::_internal_set_micro_sec_avg_latency(uint32_t value) {
  _has_bits_[0] |= 0x00010000u;
  micro_sec_avg_latency_ = value;
}
inline void CMsgClientConnectionStats_Stats_VConn::set_micro_sec_avg_latency(uint32_t value) {
  _internal_set_micro_sec_avg_latency(value);
  // @@protoc_insertion_point(field_set:CMsgClientConnectionStats.Stats_VConn.micro_sec_avg_latency)
}

// optional uint32 micro_sec_min_latency = 18;
inline bool CMsgClientConnectionStats_Stats_VConn::_internal_has_micro_sec_min_latency() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CMsgClientConnectionStats_Stats_VConn::has_micro_sec_min_latency() const {
  return _internal_has_micro_sec_min_latency();
}
inline void CMsgClientConnectionStats_Stats_VConn::clear_micro_sec_min_latency() {
  micro_sec_min_latency_ = 0u;
  _has_bits_[0] &= ~0x00020000u;
}
inline uint32_t CMsgClientConnectionStats_Stats_VConn::_internal_micro_sec_min_latency() const {
  return micro_sec_min_latency_;
}
inline uint32_t CMsgClientConnectionStats_Stats_VConn::micro_sec_min_latency() const {
  // @@protoc_insertion_point(field_get:CMsgClientConnectionStats.Stats_VConn.micro_sec_min_latency)
  return _internal_micro_sec_min_latency();
}
inline void CMsgClientConnectionStats_Stats_VConn::_internal_set_micro_sec_min_latency(uint32_t value) {
  _has_bits_[0] |= 0x00020000u;
  micro_sec_min_latency_ = value;
}
inline void CMsgClientConnectionStats_Stats_VConn::set_micro_sec_min_latency(uint32_t value) {
  _internal_set_micro_sec_min_latency(value);
  // @@protoc_insertion_point(field_set:CMsgClientConnectionStats.Stats_VConn.micro_sec_min_latency)
}

// optional uint32 micro_sec_max_latency = 19;
inline bool CMsgClientConnectionStats_Stats_VConn::_internal_has_micro_sec_max_latency() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CMsgClientConnectionStats_Stats_VConn::has_micro_sec_max_latency() const {
  return _internal_has_micro_sec_max_latency();
}
inline void CMsgClientConnectionStats_Stats_VConn::clear_micro_sec_max_latency() {
  micro_sec_max_latency_ = 0u;
  _has_bits_[0] &= ~0x00040000u;
}
inline uint32_t CMsgClientConnectionStats_Stats_VConn::_internal_micro_sec_max_latency() const {
  return micro_sec_max_latency_;
}
inline uint32_t CMsgClientConnectionStats_Stats_VConn::micro_sec_max_latency() const {
  // @@protoc_insertion_point(field_get:CMsgClientConnectionStats.Stats_VConn.micro_sec_max_latency)
  return _internal_micro_sec_max_latency();
}
inline void CMsgClientConnectionStats_Stats_VConn::_internal_set_micro_sec_max_latency(uint32_t value) {
  _has_bits_[0] |= 0x00040000u;
  micro_sec_max_latency_ = value;
}
inline void CMsgClientConnectionStats_Stats_VConn::set_micro_sec_max_latency(uint32_t value) {
  _internal_set_micro_sec_max_latency(value);
  // @@protoc_insertion_point(field_set:CMsgClientConnectionStats.Stats_VConn.micro_sec_max_latency)
}

// -------------------------------------------------------------------

// CMsgClientConnectionStats

// optional .CMsgClientConnectionStats.Stats_Logon stats_logon = 1;
inline bool CMsgClientConnectionStats::_internal_has_stats_logon() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || stats_logon_ != nullptr);
  return value;
}
inline bool CMsgClientConnectionStats::has_stats_logon() const {
  return _internal_has_stats_logon();
}
inline void CMsgClientConnectionStats::clear_stats_logon() {
  if (stats_logon_ != nullptr) stats_logon_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgClientConnectionStats_Stats_Logon& CMsgClientConnectionStats::_internal_stats_logon() const {
  const ::CMsgClientConnectionStats_Stats_Logon* p = stats_logon_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgClientConnectionStats_Stats_Logon&>(
      ::_CMsgClientConnectionStats_Stats_Logon_default_instance_);
}
inline const ::CMsgClientConnectionStats_Stats_Logon& CMsgClientConnectionStats::stats_logon() const {
  // @@protoc_insertion_point(field_get:CMsgClientConnectionStats.stats_logon)
  return _internal_stats_logon();
}
inline void CMsgClientConnectionStats::unsafe_arena_set_allocated_stats_logon(
    ::CMsgClientConnectionStats_Stats_Logon* stats_logon) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stats_logon_);
  }
  stats_logon_ = stats_logon;
  if (stats_logon) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgClientConnectionStats.stats_logon)
}
inline ::CMsgClientConnectionStats_Stats_Logon* CMsgClientConnectionStats::release_stats_logon() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgClientConnectionStats_Stats_Logon* temp = stats_logon_;
  stats_logon_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgClientConnectionStats_Stats_Logon* CMsgClientConnectionStats::unsafe_arena_release_stats_logon() {
  // @@protoc_insertion_point(field_release:CMsgClientConnectionStats.stats_logon)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgClientConnectionStats_Stats_Logon* temp = stats_logon_;
  stats_logon_ = nullptr;
  return temp;
}
inline ::CMsgClientConnectionStats_Stats_Logon* CMsgClientConnectionStats::_internal_mutable_stats_logon() {
  _has_bits_[0] |= 0x00000001u;
  if (stats_logon_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgClientConnectionStats_Stats_Logon>(GetArenaForAllocation());
    stats_logon_ = p;
  }
  return stats_logon_;
}
inline ::CMsgClientConnectionStats_Stats_Logon* CMsgClientConnectionStats::mutable_stats_logon() {
  ::CMsgClientConnectionStats_Stats_Logon* _msg = _internal_mutable_stats_logon();
  // @@protoc_insertion_point(field_mutable:CMsgClientConnectionStats.stats_logon)
  return _msg;
}
inline void CMsgClientConnectionStats::set_allocated_stats_logon(::CMsgClientConnectionStats_Stats_Logon* stats_logon) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete stats_logon_;
  }
  if (stats_logon) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgClientConnectionStats_Stats_Logon>::GetOwningArena(stats_logon);
    if (message_arena != submessage_arena) {
      stats_logon = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stats_logon, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  stats_logon_ = stats_logon;
  // @@protoc_insertion_point(field_set_allocated:CMsgClientConnectionStats.stats_logon)
}

// optional .CMsgClientConnectionStats.Stats_VConn stats_vconn = 2;
inline bool CMsgClientConnectionStats::_internal_has_stats_vconn() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || stats_vconn_ != nullptr);
  return value;
}
inline bool CMsgClientConnectionStats::has_stats_vconn() const {
  return _internal_has_stats_vconn();
}
inline void CMsgClientConnectionStats::clear_stats_vconn() {
  if (stats_vconn_ != nullptr) stats_vconn_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::CMsgClientConnectionStats_Stats_VConn& CMsgClientConnectionStats::_internal_stats_vconn() const {
  const ::CMsgClientConnectionStats_Stats_VConn* p = stats_vconn_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgClientConnectionStats_Stats_VConn&>(
      ::_CMsgClientConnectionStats_Stats_VConn_default_instance_);
}
inline const ::CMsgClientConnectionStats_Stats_VConn& CMsgClientConnectionStats::stats_vconn() const {
  // @@protoc_insertion_point(field_get:CMsgClientConnectionStats.stats_vconn)
  return _internal_stats_vconn();
}
inline void CMsgClientConnectionStats::unsafe_arena_set_allocated_stats_vconn(
    ::CMsgClientConnectionStats_Stats_VConn* stats_vconn) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stats_vconn_);
  }
  stats_vconn_ = stats_vconn;
  if (stats_vconn) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgClientConnectionStats.stats_vconn)
}
inline ::CMsgClientConnectionStats_Stats_VConn* CMsgClientConnectionStats::release_stats_vconn() {
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgClientConnectionStats_Stats_VConn* temp = stats_vconn_;
  stats_vconn_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgClientConnectionStats_Stats_VConn* CMsgClientConnectionStats::unsafe_arena_release_stats_vconn() {
  // @@protoc_insertion_point(field_release:CMsgClientConnectionStats.stats_vconn)
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgClientConnectionStats_Stats_VConn* temp = stats_vconn_;
  stats_vconn_ = nullptr;
  return temp;
}
inline ::CMsgClientConnectionStats_Stats_VConn* CMsgClientConnectionStats::_internal_mutable_stats_vconn() {
  _has_bits_[0] |= 0x00000002u;
  if (stats_vconn_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgClientConnectionStats_Stats_VConn>(GetArenaForAllocation());
    stats_vconn_ = p;
  }
  return stats_vconn_;
}
inline ::CMsgClientConnectionStats_Stats_VConn* CMsgClientConnectionStats::mutable_stats_vconn() {
  ::CMsgClientConnectionStats_Stats_VConn* _msg = _internal_mutable_stats_vconn();
  // @@protoc_insertion_point(field_mutable:CMsgClientConnectionStats.stats_vconn)
  return _msg;
}
inline void CMsgClientConnectionStats::set_allocated_stats_vconn(::CMsgClientConnectionStats_Stats_VConn* stats_vconn) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete stats_vconn_;
  }
  if (stats_vconn) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgClientConnectionStats_Stats_VConn>::GetOwningArena(stats_vconn);
    if (message_arena != submessage_arena) {
      stats_vconn = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stats_vconn, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  stats_vconn_ = stats_vconn;
  // @@protoc_insertion_point(field_set_allocated:CMsgClientConnectionStats.stats_vconn)
}

// -------------------------------------------------------------------

// CMsgClientServersAvailable_Server_Types_Available

// optional uint32 server = 1;
inline bool CMsgClientServersAvailable_Server_Types_Available::_internal_has_server() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientServersAvailable_Server_Types_Available::has_server() const {
  return _internal_has_server();
}
inline void CMsgClientServersAvailable_Server_Types_Available::clear_server() {
  server_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgClientServersAvailable_Server_Types_Available::_internal_server() const {
  return server_;
}
inline uint32_t CMsgClientServersAvailable_Server_Types_Available::server() const {
  // @@protoc_insertion_point(field_get:CMsgClientServersAvailable.Server_Types_Available.server)
  return _internal_server();
}
inline void CMsgClientServersAvailable_Server_Types_Available::_internal_set_server(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  server_ = value;
}
inline void CMsgClientServersAvailable_Server_Types_Available::set_server(uint32_t value) {
  _internal_set_server(value);
  // @@protoc_insertion_point(field_set:CMsgClientServersAvailable.Server_Types_Available.server)
}

// optional bool changed = 2;
inline bool CMsgClientServersAvailable_Server_Types_Available::_internal_has_changed() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientServersAvailable_Server_Types_Available::has_changed() const {
  return _internal_has_changed();
}
inline void CMsgClientServersAvailable_Server_Types_Available::clear_changed() {
  changed_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CMsgClientServersAvailable_Server_Types_Available::_internal_changed() const {
  return changed_;
}
inline bool CMsgClientServersAvailable_Server_Types_Available::changed() const {
  // @@protoc_insertion_point(field_get:CMsgClientServersAvailable.Server_Types_Available.changed)
  return _internal_changed();
}
inline void CMsgClientServersAvailable_Server_Types_Available::_internal_set_changed(bool value) {
  _has_bits_[0] |= 0x00000002u;
  changed_ = value;
}
inline void CMsgClientServersAvailable_Server_Types_Available::set_changed(bool value) {
  _internal_set_changed(value);
  // @@protoc_insertion_point(field_set:CMsgClientServersAvailable.Server_Types_Available.changed)
}

// -------------------------------------------------------------------

// CMsgClientServersAvailable

// repeated .CMsgClientServersAvailable.Server_Types_Available server_types_available = 1;
inline int CMsgClientServersAvailable::_internal_server_types_available_size() const {
  return server_types_available_.size();
}
inline int CMsgClientServersAvailable::server_types_available_size() const {
  return _internal_server_types_available_size();
}
inline void CMsgClientServersAvailable::clear_server_types_available() {
  server_types_available_.Clear();
}
inline ::CMsgClientServersAvailable_Server_Types_Available* CMsgClientServersAvailable::mutable_server_types_available(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgClientServersAvailable.server_types_available)
  return server_types_available_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientServersAvailable_Server_Types_Available >*
CMsgClientServersAvailable::mutable_server_types_available() {
  // @@protoc_insertion_point(field_mutable_list:CMsgClientServersAvailable.server_types_available)
  return &server_types_available_;
}
inline const ::CMsgClientServersAvailable_Server_Types_Available& CMsgClientServersAvailable::_internal_server_types_available(int index) const {
  return server_types_available_.Get(index);
}
inline const ::CMsgClientServersAvailable_Server_Types_Available& CMsgClientServersAvailable::server_types_available(int index) const {
  // @@protoc_insertion_point(field_get:CMsgClientServersAvailable.server_types_available)
  return _internal_server_types_available(index);
}
inline ::CMsgClientServersAvailable_Server_Types_Available* CMsgClientServersAvailable::_internal_add_server_types_available() {
  return server_types_available_.Add();
}
inline ::CMsgClientServersAvailable_Server_Types_Available* CMsgClientServersAvailable::add_server_types_available() {
  ::CMsgClientServersAvailable_Server_Types_Available* _add = _internal_add_server_types_available();
  // @@protoc_insertion_point(field_add:CMsgClientServersAvailable.server_types_available)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientServersAvailable_Server_Types_Available >&
CMsgClientServersAvailable::server_types_available() const {
  // @@protoc_insertion_point(field_list:CMsgClientServersAvailable.server_types_available)
  return server_types_available_;
}

// optional uint32 server_type_for_auth_services = 2;
inline bool CMsgClientServersAvailable::_internal_has_server_type_for_auth_services() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientServersAvailable::has_server_type_for_auth_services() const {
  return _internal_has_server_type_for_auth_services();
}
inline void CMsgClientServersAvailable::clear_server_type_for_auth_services() {
  server_type_for_auth_services_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgClientServersAvailable::_internal_server_type_for_auth_services() const {
  return server_type_for_auth_services_;
}
inline uint32_t CMsgClientServersAvailable::server_type_for_auth_services() const {
  // @@protoc_insertion_point(field_get:CMsgClientServersAvailable.server_type_for_auth_services)
  return _internal_server_type_for_auth_services();
}
inline void CMsgClientServersAvailable::_internal_set_server_type_for_auth_services(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  server_type_for_auth_services_ = value;
}
inline void CMsgClientServersAvailable::set_server_type_for_auth_services(uint32_t value) {
  _internal_set_server_type_for_auth_services(value);
  // @@protoc_insertion_point(field_set:CMsgClientServersAvailable.server_type_for_auth_services)
}

// -------------------------------------------------------------------

// CMsgClientReportOverlayDetourFailure

// repeated string failure_strings = 1;
inline int CMsgClientReportOverlayDetourFailure::_internal_failure_strings_size() const {
  return failure_strings_.size();
}
inline int CMsgClientReportOverlayDetourFailure::failure_strings_size() const {
  return _internal_failure_strings_size();
}
inline void CMsgClientReportOverlayDetourFailure::clear_failure_strings() {
  failure_strings_.Clear();
}
inline std::string* CMsgClientReportOverlayDetourFailure::add_failure_strings() {
  std::string* _s = _internal_add_failure_strings();
  // @@protoc_insertion_point(field_add_mutable:CMsgClientReportOverlayDetourFailure.failure_strings)
  return _s;
}
inline const std::string& CMsgClientReportOverlayDetourFailure::_internal_failure_strings(int index) const {
  return failure_strings_.Get(index);
}
inline const std::string& CMsgClientReportOverlayDetourFailure::failure_strings(int index) const {
  // @@protoc_insertion_point(field_get:CMsgClientReportOverlayDetourFailure.failure_strings)
  return _internal_failure_strings(index);
}
inline std::string* CMsgClientReportOverlayDetourFailure::mutable_failure_strings(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgClientReportOverlayDetourFailure.failure_strings)
  return failure_strings_.Mutable(index);
}
inline void CMsgClientReportOverlayDetourFailure::set_failure_strings(int index, const std::string& value) {
  failure_strings_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:CMsgClientReportOverlayDetourFailure.failure_strings)
}
inline void CMsgClientReportOverlayDetourFailure::set_failure_strings(int index, std::string&& value) {
  failure_strings_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:CMsgClientReportOverlayDetourFailure.failure_strings)
}
inline void CMsgClientReportOverlayDetourFailure::set_failure_strings(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  failure_strings_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgClientReportOverlayDetourFailure.failure_strings)
}
inline void CMsgClientReportOverlayDetourFailure::set_failure_strings(int index, const char* value, size_t size) {
  failure_strings_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgClientReportOverlayDetourFailure.failure_strings)
}
inline std::string* CMsgClientReportOverlayDetourFailure::_internal_add_failure_strings() {
  return failure_strings_.Add();
}
inline void CMsgClientReportOverlayDetourFailure::add_failure_strings(const std::string& value) {
  failure_strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CMsgClientReportOverlayDetourFailure.failure_strings)
}
inline void CMsgClientReportOverlayDetourFailure::add_failure_strings(std::string&& value) {
  failure_strings_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CMsgClientReportOverlayDetourFailure.failure_strings)
}
inline void CMsgClientReportOverlayDetourFailure::add_failure_strings(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  failure_strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CMsgClientReportOverlayDetourFailure.failure_strings)
}
inline void CMsgClientReportOverlayDetourFailure::add_failure_strings(const char* value, size_t size) {
  failure_strings_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CMsgClientReportOverlayDetourFailure.failure_strings)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CMsgClientReportOverlayDetourFailure::failure_strings() const {
  // @@protoc_insertion_point(field_list:CMsgClientReportOverlayDetourFailure.failure_strings)
  return failure_strings_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CMsgClientReportOverlayDetourFailure::mutable_failure_strings() {
  // @@protoc_insertion_point(field_mutable_list:CMsgClientReportOverlayDetourFailure.failure_strings)
  return &failure_strings_;
}

// -------------------------------------------------------------------

// CMsgClientRequestEncryptedAppTicket

// optional uint32 app_id = 1;
inline bool CMsgClientRequestEncryptedAppTicket::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientRequestEncryptedAppTicket::has_app_id() const {
  return _internal_has_app_id();
}
inline void CMsgClientRequestEncryptedAppTicket::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgClientRequestEncryptedAppTicket::_internal_app_id() const {
  return app_id_;
}
inline uint32_t CMsgClientRequestEncryptedAppTicket::app_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientRequestEncryptedAppTicket.app_id)
  return _internal_app_id();
}
inline void CMsgClientRequestEncryptedAppTicket::_internal_set_app_id(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  app_id_ = value;
}
inline void CMsgClientRequestEncryptedAppTicket::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientRequestEncryptedAppTicket.app_id)
}

// optional bytes userdata = 2;
inline bool CMsgClientRequestEncryptedAppTicket::_internal_has_userdata() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientRequestEncryptedAppTicket::has_userdata() const {
  return _internal_has_userdata();
}
inline void CMsgClientRequestEncryptedAppTicket::clear_userdata() {
  userdata_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientRequestEncryptedAppTicket::userdata() const {
  // @@protoc_insertion_point(field_get:CMsgClientRequestEncryptedAppTicket.userdata)
  return _internal_userdata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientRequestEncryptedAppTicket::set_userdata(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 userdata_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientRequestEncryptedAppTicket.userdata)
}
inline std::string* CMsgClientRequestEncryptedAppTicket::mutable_userdata() {
  std::string* _s = _internal_mutable_userdata();
  // @@protoc_insertion_point(field_mutable:CMsgClientRequestEncryptedAppTicket.userdata)
  return _s;
}
inline const std::string& CMsgClientRequestEncryptedAppTicket::_internal_userdata() const {
  return userdata_.Get();
}
inline void CMsgClientRequestEncryptedAppTicket::_internal_set_userdata(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  userdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientRequestEncryptedAppTicket::_internal_mutable_userdata() {
  _has_bits_[0] |= 0x00000001u;
  return userdata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientRequestEncryptedAppTicket::release_userdata() {
  // @@protoc_insertion_point(field_release:CMsgClientRequestEncryptedAppTicket.userdata)
  if (!_internal_has_userdata()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = userdata_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (userdata_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    userdata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientRequestEncryptedAppTicket::set_allocated_userdata(std::string* userdata) {
  if (userdata != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  userdata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userdata,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (userdata_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    userdata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientRequestEncryptedAppTicket.userdata)
}

// -------------------------------------------------------------------

// CMsgClientRequestEncryptedAppTicketResponse

// optional uint32 app_id = 1;
inline bool CMsgClientRequestEncryptedAppTicketResponse::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientRequestEncryptedAppTicketResponse::has_app_id() const {
  return _internal_has_app_id();
}
inline void CMsgClientRequestEncryptedAppTicketResponse::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgClientRequestEncryptedAppTicketResponse::_internal_app_id() const {
  return app_id_;
}
inline uint32_t CMsgClientRequestEncryptedAppTicketResponse::app_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientRequestEncryptedAppTicketResponse.app_id)
  return _internal_app_id();
}
inline void CMsgClientRequestEncryptedAppTicketResponse::_internal_set_app_id(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  app_id_ = value;
}
inline void CMsgClientRequestEncryptedAppTicketResponse::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientRequestEncryptedAppTicketResponse.app_id)
}

// optional int32 eresult = 2 [default = 2];
inline bool CMsgClientRequestEncryptedAppTicketResponse::_internal_has_eresult() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientRequestEncryptedAppTicketResponse::has_eresult() const {
  return _internal_has_eresult();
}
inline void CMsgClientRequestEncryptedAppTicketResponse::clear_eresult() {
  eresult_ = 2;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t CMsgClientRequestEncryptedAppTicketResponse::_internal_eresult() const {
  return eresult_;
}
inline int32_t CMsgClientRequestEncryptedAppTicketResponse::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgClientRequestEncryptedAppTicketResponse.eresult)
  return _internal_eresult();
}
inline void CMsgClientRequestEncryptedAppTicketResponse::_internal_set_eresult(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  eresult_ = value;
}
inline void CMsgClientRequestEncryptedAppTicketResponse::set_eresult(int32_t value) {
  _internal_set_eresult(value);
  // @@protoc_insertion_point(field_set:CMsgClientRequestEncryptedAppTicketResponse.eresult)
}

// optional .EncryptedAppTicket encrypted_app_ticket = 3;
inline bool CMsgClientRequestEncryptedAppTicketResponse::_internal_has_encrypted_app_ticket() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || encrypted_app_ticket_ != nullptr);
  return value;
}
inline bool CMsgClientRequestEncryptedAppTicketResponse::has_encrypted_app_ticket() const {
  return _internal_has_encrypted_app_ticket();
}
inline const ::EncryptedAppTicket& CMsgClientRequestEncryptedAppTicketResponse::_internal_encrypted_app_ticket() const {
  const ::EncryptedAppTicket* p = encrypted_app_ticket_;
  return p != nullptr ? *p : reinterpret_cast<const ::EncryptedAppTicket&>(
      ::_EncryptedAppTicket_default_instance_);
}
inline const ::EncryptedAppTicket& CMsgClientRequestEncryptedAppTicketResponse::encrypted_app_ticket() const {
  // @@protoc_insertion_point(field_get:CMsgClientRequestEncryptedAppTicketResponse.encrypted_app_ticket)
  return _internal_encrypted_app_ticket();
}
inline void CMsgClientRequestEncryptedAppTicketResponse::unsafe_arena_set_allocated_encrypted_app_ticket(
    ::EncryptedAppTicket* encrypted_app_ticket) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(encrypted_app_ticket_);
  }
  encrypted_app_ticket_ = encrypted_app_ticket;
  if (encrypted_app_ticket) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgClientRequestEncryptedAppTicketResponse.encrypted_app_ticket)
}
inline ::EncryptedAppTicket* CMsgClientRequestEncryptedAppTicketResponse::release_encrypted_app_ticket() {
  _has_bits_[0] &= ~0x00000001u;
  ::EncryptedAppTicket* temp = encrypted_app_ticket_;
  encrypted_app_ticket_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::EncryptedAppTicket* CMsgClientRequestEncryptedAppTicketResponse::unsafe_arena_release_encrypted_app_ticket() {
  // @@protoc_insertion_point(field_release:CMsgClientRequestEncryptedAppTicketResponse.encrypted_app_ticket)
  _has_bits_[0] &= ~0x00000001u;
  ::EncryptedAppTicket* temp = encrypted_app_ticket_;
  encrypted_app_ticket_ = nullptr;
  return temp;
}
inline ::EncryptedAppTicket* CMsgClientRequestEncryptedAppTicketResponse::_internal_mutable_encrypted_app_ticket() {
  _has_bits_[0] |= 0x00000001u;
  if (encrypted_app_ticket_ == nullptr) {
    auto* p = CreateMaybeMessage<::EncryptedAppTicket>(GetArenaForAllocation());
    encrypted_app_ticket_ = p;
  }
  return encrypted_app_ticket_;
}
inline ::EncryptedAppTicket* CMsgClientRequestEncryptedAppTicketResponse::mutable_encrypted_app_ticket() {
  ::EncryptedAppTicket* _msg = _internal_mutable_encrypted_app_ticket();
  // @@protoc_insertion_point(field_mutable:CMsgClientRequestEncryptedAppTicketResponse.encrypted_app_ticket)
  return _msg;
}
inline void CMsgClientRequestEncryptedAppTicketResponse::set_allocated_encrypted_app_ticket(::EncryptedAppTicket* encrypted_app_ticket) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(encrypted_app_ticket_);
  }
  if (encrypted_app_ticket) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(encrypted_app_ticket));
    if (message_arena != submessage_arena) {
      encrypted_app_ticket = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, encrypted_app_ticket, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  encrypted_app_ticket_ = encrypted_app_ticket;
  // @@protoc_insertion_point(field_set_allocated:CMsgClientRequestEncryptedAppTicketResponse.encrypted_app_ticket)
}

// -------------------------------------------------------------------

// CMsgClientWalletInfoUpdate

// optional bool has_wallet = 1;
inline bool CMsgClientWalletInfoUpdate::_internal_has_has_wallet() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientWalletInfoUpdate::has_has_wallet() const {
  return _internal_has_has_wallet();
}
inline void CMsgClientWalletInfoUpdate::clear_has_wallet() {
  has_wallet_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CMsgClientWalletInfoUpdate::_internal_has_wallet() const {
  return has_wallet_;
}
inline bool CMsgClientWalletInfoUpdate::has_wallet() const {
  // @@protoc_insertion_point(field_get:CMsgClientWalletInfoUpdate.has_wallet)
  return _internal_has_wallet();
}
inline void CMsgClientWalletInfoUpdate::_internal_set_has_wallet(bool value) {
  _has_bits_[0] |= 0x00000001u;
  has_wallet_ = value;
}
inline void CMsgClientWalletInfoUpdate::set_has_wallet(bool value) {
  _internal_set_has_wallet(value);
  // @@protoc_insertion_point(field_set:CMsgClientWalletInfoUpdate.has_wallet)
}

// optional int32 balance = 2;
inline bool CMsgClientWalletInfoUpdate::_internal_has_balance() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientWalletInfoUpdate::has_balance() const {
  return _internal_has_balance();
}
inline void CMsgClientWalletInfoUpdate::clear_balance() {
  balance_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t CMsgClientWalletInfoUpdate::_internal_balance() const {
  return balance_;
}
inline int32_t CMsgClientWalletInfoUpdate::balance() const {
  // @@protoc_insertion_point(field_get:CMsgClientWalletInfoUpdate.balance)
  return _internal_balance();
}
inline void CMsgClientWalletInfoUpdate::_internal_set_balance(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  balance_ = value;
}
inline void CMsgClientWalletInfoUpdate::set_balance(int32_t value) {
  _internal_set_balance(value);
  // @@protoc_insertion_point(field_set:CMsgClientWalletInfoUpdate.balance)
}

// optional int32 currency = 3;
inline bool CMsgClientWalletInfoUpdate::_internal_has_currency() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientWalletInfoUpdate::has_currency() const {
  return _internal_has_currency();
}
inline void CMsgClientWalletInfoUpdate::clear_currency() {
  currency_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t CMsgClientWalletInfoUpdate::_internal_currency() const {
  return currency_;
}
inline int32_t CMsgClientWalletInfoUpdate::currency() const {
  // @@protoc_insertion_point(field_get:CMsgClientWalletInfoUpdate.currency)
  return _internal_currency();
}
inline void CMsgClientWalletInfoUpdate::_internal_set_currency(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  currency_ = value;
}
inline void CMsgClientWalletInfoUpdate::set_currency(int32_t value) {
  _internal_set_currency(value);
  // @@protoc_insertion_point(field_set:CMsgClientWalletInfoUpdate.currency)
}

// optional int32 balance_delayed = 4;
inline bool CMsgClientWalletInfoUpdate::_internal_has_balance_delayed() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientWalletInfoUpdate::has_balance_delayed() const {
  return _internal_has_balance_delayed();
}
inline void CMsgClientWalletInfoUpdate::clear_balance_delayed() {
  balance_delayed_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t CMsgClientWalletInfoUpdate::_internal_balance_delayed() const {
  return balance_delayed_;
}
inline int32_t CMsgClientWalletInfoUpdate::balance_delayed() const {
  // @@protoc_insertion_point(field_get:CMsgClientWalletInfoUpdate.balance_delayed)
  return _internal_balance_delayed();
}
inline void CMsgClientWalletInfoUpdate::_internal_set_balance_delayed(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  balance_delayed_ = value;
}
inline void CMsgClientWalletInfoUpdate::set_balance_delayed(int32_t value) {
  _internal_set_balance_delayed(value);
  // @@protoc_insertion_point(field_set:CMsgClientWalletInfoUpdate.balance_delayed)
}

// optional int64 balance64 = 5 [(.php_output_always_number) = true];
inline bool CMsgClientWalletInfoUpdate::_internal_has_balance64() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgClientWalletInfoUpdate::has_balance64() const {
  return _internal_has_balance64();
}
inline void CMsgClientWalletInfoUpdate::clear_balance64() {
  balance64_ = int64_t{0};
  _has_bits_[0] &= ~0x00000010u;
}
inline int64_t CMsgClientWalletInfoUpdate::_internal_balance64() const {
  return balance64_;
}
inline int64_t CMsgClientWalletInfoUpdate::balance64() const {
  // @@protoc_insertion_point(field_get:CMsgClientWalletInfoUpdate.balance64)
  return _internal_balance64();
}
inline void CMsgClientWalletInfoUpdate::_internal_set_balance64(int64_t value) {
  _has_bits_[0] |= 0x00000010u;
  balance64_ = value;
}
inline void CMsgClientWalletInfoUpdate::set_balance64(int64_t value) {
  _internal_set_balance64(value);
  // @@protoc_insertion_point(field_set:CMsgClientWalletInfoUpdate.balance64)
}

// optional int64 balance64_delayed = 6 [(.php_output_always_number) = true];
inline bool CMsgClientWalletInfoUpdate::_internal_has_balance64_delayed() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgClientWalletInfoUpdate::has_balance64_delayed() const {
  return _internal_has_balance64_delayed();
}
inline void CMsgClientWalletInfoUpdate::clear_balance64_delayed() {
  balance64_delayed_ = int64_t{0};
  _has_bits_[0] &= ~0x00000020u;
}
inline int64_t CMsgClientWalletInfoUpdate::_internal_balance64_delayed() const {
  return balance64_delayed_;
}
inline int64_t CMsgClientWalletInfoUpdate::balance64_delayed() const {
  // @@protoc_insertion_point(field_get:CMsgClientWalletInfoUpdate.balance64_delayed)
  return _internal_balance64_delayed();
}
inline void CMsgClientWalletInfoUpdate::_internal_set_balance64_delayed(int64_t value) {
  _has_bits_[0] |= 0x00000020u;
  balance64_delayed_ = value;
}
inline void CMsgClientWalletInfoUpdate::set_balance64_delayed(int64_t value) {
  _internal_set_balance64_delayed(value);
  // @@protoc_insertion_point(field_set:CMsgClientWalletInfoUpdate.balance64_delayed)
}

// optional int32 realm = 7;
inline bool CMsgClientWalletInfoUpdate::_internal_has_realm() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgClientWalletInfoUpdate::has_realm() const {
  return _internal_has_realm();
}
inline void CMsgClientWalletInfoUpdate::clear_realm() {
  realm_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline int32_t CMsgClientWalletInfoUpdate::_internal_realm() const {
  return realm_;
}
inline int32_t CMsgClientWalletInfoUpdate::realm() const {
  // @@protoc_insertion_point(field_get:CMsgClientWalletInfoUpdate.realm)
  return _internal_realm();
}
inline void CMsgClientWalletInfoUpdate::_internal_set_realm(int32_t value) {
  _has_bits_[0] |= 0x00000040u;
  realm_ = value;
}
inline void CMsgClientWalletInfoUpdate::set_realm(int32_t value) {
  _internal_set_realm(value);
  // @@protoc_insertion_point(field_set:CMsgClientWalletInfoUpdate.realm)
}

// -------------------------------------------------------------------

// CMsgClientAMGetClanOfficers

// optional fixed64 steamid_clan = 1;
inline bool CMsgClientAMGetClanOfficers::_internal_has_steamid_clan() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientAMGetClanOfficers::has_steamid_clan() const {
  return _internal_has_steamid_clan();
}
inline void CMsgClientAMGetClanOfficers::clear_steamid_clan() {
  steamid_clan_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgClientAMGetClanOfficers::_internal_steamid_clan() const {
  return steamid_clan_;
}
inline uint64_t CMsgClientAMGetClanOfficers::steamid_clan() const {
  // @@protoc_insertion_point(field_get:CMsgClientAMGetClanOfficers.steamid_clan)
  return _internal_steamid_clan();
}
inline void CMsgClientAMGetClanOfficers::_internal_set_steamid_clan(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_clan_ = value;
}
inline void CMsgClientAMGetClanOfficers::set_steamid_clan(uint64_t value) {
  _internal_set_steamid_clan(value);
  // @@protoc_insertion_point(field_set:CMsgClientAMGetClanOfficers.steamid_clan)
}

// -------------------------------------------------------------------

// CMsgClientAMGetClanOfficersResponse

// optional int32 eresult = 1 [default = 2];
inline bool CMsgClientAMGetClanOfficersResponse::_internal_has_eresult() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientAMGetClanOfficersResponse::has_eresult() const {
  return _internal_has_eresult();
}
inline void CMsgClientAMGetClanOfficersResponse::clear_eresult() {
  eresult_ = 2;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t CMsgClientAMGetClanOfficersResponse::_internal_eresult() const {
  return eresult_;
}
inline int32_t CMsgClientAMGetClanOfficersResponse::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgClientAMGetClanOfficersResponse.eresult)
  return _internal_eresult();
}
inline void CMsgClientAMGetClanOfficersResponse::_internal_set_eresult(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  eresult_ = value;
}
inline void CMsgClientAMGetClanOfficersResponse::set_eresult(int32_t value) {
  _internal_set_eresult(value);
  // @@protoc_insertion_point(field_set:CMsgClientAMGetClanOfficersResponse.eresult)
}

// optional fixed64 steamid_clan = 2;
inline bool CMsgClientAMGetClanOfficersResponse::_internal_has_steamid_clan() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientAMGetClanOfficersResponse::has_steamid_clan() const {
  return _internal_has_steamid_clan();
}
inline void CMsgClientAMGetClanOfficersResponse::clear_steamid_clan() {
  steamid_clan_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgClientAMGetClanOfficersResponse::_internal_steamid_clan() const {
  return steamid_clan_;
}
inline uint64_t CMsgClientAMGetClanOfficersResponse::steamid_clan() const {
  // @@protoc_insertion_point(field_get:CMsgClientAMGetClanOfficersResponse.steamid_clan)
  return _internal_steamid_clan();
}
inline void CMsgClientAMGetClanOfficersResponse::_internal_set_steamid_clan(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_clan_ = value;
}
inline void CMsgClientAMGetClanOfficersResponse::set_steamid_clan(uint64_t value) {
  _internal_set_steamid_clan(value);
  // @@protoc_insertion_point(field_set:CMsgClientAMGetClanOfficersResponse.steamid_clan)
}

// optional int32 officer_count = 3;
inline bool CMsgClientAMGetClanOfficersResponse::_internal_has_officer_count() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientAMGetClanOfficersResponse::has_officer_count() const {
  return _internal_has_officer_count();
}
inline void CMsgClientAMGetClanOfficersResponse::clear_officer_count() {
  officer_count_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t CMsgClientAMGetClanOfficersResponse::_internal_officer_count() const {
  return officer_count_;
}
inline int32_t CMsgClientAMGetClanOfficersResponse::officer_count() const {
  // @@protoc_insertion_point(field_get:CMsgClientAMGetClanOfficersResponse.officer_count)
  return _internal_officer_count();
}
inline void CMsgClientAMGetClanOfficersResponse::_internal_set_officer_count(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  officer_count_ = value;
}
inline void CMsgClientAMGetClanOfficersResponse::set_officer_count(int32_t value) {
  _internal_set_officer_count(value);
  // @@protoc_insertion_point(field_set:CMsgClientAMGetClanOfficersResponse.officer_count)
}

// -------------------------------------------------------------------

// CMsgClientAMGetPersonaNameHistory_IdInstance

// optional fixed64 steamid = 1;
inline bool CMsgClientAMGetPersonaNameHistory_IdInstance::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientAMGetPersonaNameHistory_IdInstance::has_steamid() const {
  return _internal_has_steamid();
}
inline void CMsgClientAMGetPersonaNameHistory_IdInstance::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgClientAMGetPersonaNameHistory_IdInstance::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CMsgClientAMGetPersonaNameHistory_IdInstance::steamid() const {
  // @@protoc_insertion_point(field_get:CMsgClientAMGetPersonaNameHistory.IdInstance.steamid)
  return _internal_steamid();
}
inline void CMsgClientAMGetPersonaNameHistory_IdInstance::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
}
inline void CMsgClientAMGetPersonaNameHistory_IdInstance::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CMsgClientAMGetPersonaNameHistory.IdInstance.steamid)
}

// -------------------------------------------------------------------

// CMsgClientAMGetPersonaNameHistory

// optional int32 id_count = 1;
inline bool CMsgClientAMGetPersonaNameHistory::_internal_has_id_count() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientAMGetPersonaNameHistory::has_id_count() const {
  return _internal_has_id_count();
}
inline void CMsgClientAMGetPersonaNameHistory::clear_id_count() {
  id_count_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t CMsgClientAMGetPersonaNameHistory::_internal_id_count() const {
  return id_count_;
}
inline int32_t CMsgClientAMGetPersonaNameHistory::id_count() const {
  // @@protoc_insertion_point(field_get:CMsgClientAMGetPersonaNameHistory.id_count)
  return _internal_id_count();
}
inline void CMsgClientAMGetPersonaNameHistory::_internal_set_id_count(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  id_count_ = value;
}
inline void CMsgClientAMGetPersonaNameHistory::set_id_count(int32_t value) {
  _internal_set_id_count(value);
  // @@protoc_insertion_point(field_set:CMsgClientAMGetPersonaNameHistory.id_count)
}

// repeated .CMsgClientAMGetPersonaNameHistory.IdInstance Ids = 2;
inline int CMsgClientAMGetPersonaNameHistory::_internal_ids_size() const {
  return ids_.size();
}
inline int CMsgClientAMGetPersonaNameHistory::ids_size() const {
  return _internal_ids_size();
}
inline void CMsgClientAMGetPersonaNameHistory::clear_ids() {
  ids_.Clear();
}
inline ::CMsgClientAMGetPersonaNameHistory_IdInstance* CMsgClientAMGetPersonaNameHistory::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgClientAMGetPersonaNameHistory.Ids)
  return ids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientAMGetPersonaNameHistory_IdInstance >*
CMsgClientAMGetPersonaNameHistory::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgClientAMGetPersonaNameHistory.Ids)
  return &ids_;
}
inline const ::CMsgClientAMGetPersonaNameHistory_IdInstance& CMsgClientAMGetPersonaNameHistory::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline const ::CMsgClientAMGetPersonaNameHistory_IdInstance& CMsgClientAMGetPersonaNameHistory::ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgClientAMGetPersonaNameHistory.Ids)
  return _internal_ids(index);
}
inline ::CMsgClientAMGetPersonaNameHistory_IdInstance* CMsgClientAMGetPersonaNameHistory::_internal_add_ids() {
  return ids_.Add();
}
inline ::CMsgClientAMGetPersonaNameHistory_IdInstance* CMsgClientAMGetPersonaNameHistory::add_ids() {
  ::CMsgClientAMGetPersonaNameHistory_IdInstance* _add = _internal_add_ids();
  // @@protoc_insertion_point(field_add:CMsgClientAMGetPersonaNameHistory.Ids)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientAMGetPersonaNameHistory_IdInstance >&
CMsgClientAMGetPersonaNameHistory::ids() const {
  // @@protoc_insertion_point(field_list:CMsgClientAMGetPersonaNameHistory.Ids)
  return ids_;
}

// -------------------------------------------------------------------

// CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance

// optional fixed32 name_since = 1;
inline bool CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::_internal_has_name_since() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::has_name_since() const {
  return _internal_has_name_since();
}
inline void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::clear_name_since() {
  name_since_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::_internal_name_since() const {
  return name_since_;
}
inline uint32_t CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::name_since() const {
  // @@protoc_insertion_point(field_get:CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance.name_since)
  return _internal_name_since();
}
inline void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::_internal_set_name_since(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  name_since_ = value;
}
inline void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::set_name_since(uint32_t value) {
  _internal_set_name_since(value);
  // @@protoc_insertion_point(field_set:CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance.name_since)
}

// optional string name = 2;
inline bool CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::has_name() const {
  return _internal_has_name();
}
inline void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::name() const {
  // @@protoc_insertion_point(field_get:CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance.name)
}
inline std::string* CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance.name)
  return _s;
}
inline const std::string& CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::_internal_name() const {
  return name_.Get();
}
inline void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::release_name() {
  // @@protoc_insertion_point(field_release:CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance.name)
}

// -------------------------------------------------------------------

// CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance

// optional int32 eresult = 1 [default = 2];
inline bool CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::_internal_has_eresult() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::has_eresult() const {
  return _internal_has_eresult();
}
inline void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::clear_eresult() {
  eresult_ = 2;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::_internal_eresult() const {
  return eresult_;
}
inline int32_t CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.eresult)
  return _internal_eresult();
}
inline void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::_internal_set_eresult(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  eresult_ = value;
}
inline void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::set_eresult(int32_t value) {
  _internal_set_eresult(value);
  // @@protoc_insertion_point(field_set:CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.eresult)
}

// optional fixed64 steamid = 2;
inline bool CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::has_steamid() const {
  return _internal_has_steamid();
}
inline void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::steamid() const {
  // @@protoc_insertion_point(field_get:CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.steamid)
  return _internal_steamid();
}
inline void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
}
inline void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.steamid)
}

// repeated .CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance names = 3;
inline int CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::_internal_names_size() const {
  return names_.size();
}
inline int CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::names_size() const {
  return _internal_names_size();
}
inline void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::clear_names() {
  names_.Clear();
}
inline ::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance* CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::mutable_names(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.names)
  return names_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance >*
CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::mutable_names() {
  // @@protoc_insertion_point(field_mutable_list:CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.names)
  return &names_;
}
inline const ::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance& CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::_internal_names(int index) const {
  return names_.Get(index);
}
inline const ::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance& CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::names(int index) const {
  // @@protoc_insertion_point(field_get:CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.names)
  return _internal_names(index);
}
inline ::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance* CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::_internal_add_names() {
  return names_.Add();
}
inline ::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance* CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::add_names() {
  ::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance* _add = _internal_add_names();
  // @@protoc_insertion_point(field_add:CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.names)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance >&
CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::names() const {
  // @@protoc_insertion_point(field_list:CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.names)
  return names_;
}

// -------------------------------------------------------------------

// CMsgClientAMGetPersonaNameHistoryResponse

// repeated .CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance responses = 2;
inline int CMsgClientAMGetPersonaNameHistoryResponse::_internal_responses_size() const {
  return responses_.size();
}
inline int CMsgClientAMGetPersonaNameHistoryResponse::responses_size() const {
  return _internal_responses_size();
}
inline void CMsgClientAMGetPersonaNameHistoryResponse::clear_responses() {
  responses_.Clear();
}
inline ::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance* CMsgClientAMGetPersonaNameHistoryResponse::mutable_responses(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgClientAMGetPersonaNameHistoryResponse.responses)
  return responses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance >*
CMsgClientAMGetPersonaNameHistoryResponse::mutable_responses() {
  // @@protoc_insertion_point(field_mutable_list:CMsgClientAMGetPersonaNameHistoryResponse.responses)
  return &responses_;
}
inline const ::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance& CMsgClientAMGetPersonaNameHistoryResponse::_internal_responses(int index) const {
  return responses_.Get(index);
}
inline const ::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance& CMsgClientAMGetPersonaNameHistoryResponse::responses(int index) const {
  // @@protoc_insertion_point(field_get:CMsgClientAMGetPersonaNameHistoryResponse.responses)
  return _internal_responses(index);
}
inline ::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance* CMsgClientAMGetPersonaNameHistoryResponse::_internal_add_responses() {
  return responses_.Add();
}
inline ::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance* CMsgClientAMGetPersonaNameHistoryResponse::add_responses() {
  ::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance* _add = _internal_add_responses();
  // @@protoc_insertion_point(field_add:CMsgClientAMGetPersonaNameHistoryResponse.responses)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance >&
CMsgClientAMGetPersonaNameHistoryResponse::responses() const {
  // @@protoc_insertion_point(field_list:CMsgClientAMGetPersonaNameHistoryResponse.responses)
  return responses_;
}

// -------------------------------------------------------------------

// CMsgClientDeregisterWithServer

// optional uint32 eservertype = 1;
inline bool CMsgClientDeregisterWithServer::_internal_has_eservertype() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientDeregisterWithServer::has_eservertype() const {
  return _internal_has_eservertype();
}
inline void CMsgClientDeregisterWithServer::clear_eservertype() {
  eservertype_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgClientDeregisterWithServer::_internal_eservertype() const {
  return eservertype_;
}
inline uint32_t CMsgClientDeregisterWithServer::eservertype() const {
  // @@protoc_insertion_point(field_get:CMsgClientDeregisterWithServer.eservertype)
  return _internal_eservertype();
}
inline void CMsgClientDeregisterWithServer::_internal_set_eservertype(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  eservertype_ = value;
}
inline void CMsgClientDeregisterWithServer::set_eservertype(uint32_t value) {
  _internal_set_eservertype(value);
  // @@protoc_insertion_point(field_set:CMsgClientDeregisterWithServer.eservertype)
}

// optional uint32 app_id = 2;
inline bool CMsgClientDeregisterWithServer::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientDeregisterWithServer::has_app_id() const {
  return _internal_has_app_id();
}
inline void CMsgClientDeregisterWithServer::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgClientDeregisterWithServer::_internal_app_id() const {
  return app_id_;
}
inline uint32_t CMsgClientDeregisterWithServer::app_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientDeregisterWithServer.app_id)
  return _internal_app_id();
}
inline void CMsgClientDeregisterWithServer::_internal_set_app_id(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  app_id_ = value;
}
inline void CMsgClientDeregisterWithServer::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientDeregisterWithServer.app_id)
}

// -------------------------------------------------------------------

// CMsgClientClanState_NameInfo

// optional string clan_name = 1;
inline bool CMsgClientClanState_NameInfo::_internal_has_clan_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientClanState_NameInfo::has_clan_name() const {
  return _internal_has_clan_name();
}
inline void CMsgClientClanState_NameInfo::clear_clan_name() {
  clan_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientClanState_NameInfo::clan_name() const {
  // @@protoc_insertion_point(field_get:CMsgClientClanState.NameInfo.clan_name)
  return _internal_clan_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientClanState_NameInfo::set_clan_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 clan_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientClanState.NameInfo.clan_name)
}
inline std::string* CMsgClientClanState_NameInfo::mutable_clan_name() {
  std::string* _s = _internal_mutable_clan_name();
  // @@protoc_insertion_point(field_mutable:CMsgClientClanState.NameInfo.clan_name)
  return _s;
}
inline const std::string& CMsgClientClanState_NameInfo::_internal_clan_name() const {
  return clan_name_.Get();
}
inline void CMsgClientClanState_NameInfo::_internal_set_clan_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  clan_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientClanState_NameInfo::_internal_mutable_clan_name() {
  _has_bits_[0] |= 0x00000001u;
  return clan_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientClanState_NameInfo::release_clan_name() {
  // @@protoc_insertion_point(field_release:CMsgClientClanState.NameInfo.clan_name)
  if (!_internal_has_clan_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = clan_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (clan_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    clan_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientClanState_NameInfo::set_allocated_clan_name(std::string* clan_name) {
  if (clan_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  clan_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clan_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (clan_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    clan_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientClanState.NameInfo.clan_name)
}

// optional bytes sha_avatar = 2;
inline bool CMsgClientClanState_NameInfo::_internal_has_sha_avatar() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientClanState_NameInfo::has_sha_avatar() const {
  return _internal_has_sha_avatar();
}
inline void CMsgClientClanState_NameInfo::clear_sha_avatar() {
  sha_avatar_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgClientClanState_NameInfo::sha_avatar() const {
  // @@protoc_insertion_point(field_get:CMsgClientClanState.NameInfo.sha_avatar)
  return _internal_sha_avatar();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientClanState_NameInfo::set_sha_avatar(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 sha_avatar_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientClanState.NameInfo.sha_avatar)
}
inline std::string* CMsgClientClanState_NameInfo::mutable_sha_avatar() {
  std::string* _s = _internal_mutable_sha_avatar();
  // @@protoc_insertion_point(field_mutable:CMsgClientClanState.NameInfo.sha_avatar)
  return _s;
}
inline const std::string& CMsgClientClanState_NameInfo::_internal_sha_avatar() const {
  return sha_avatar_.Get();
}
inline void CMsgClientClanState_NameInfo::_internal_set_sha_avatar(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  sha_avatar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientClanState_NameInfo::_internal_mutable_sha_avatar() {
  _has_bits_[0] |= 0x00000002u;
  return sha_avatar_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientClanState_NameInfo::release_sha_avatar() {
  // @@protoc_insertion_point(field_release:CMsgClientClanState.NameInfo.sha_avatar)
  if (!_internal_has_sha_avatar()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = sha_avatar_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sha_avatar_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sha_avatar_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientClanState_NameInfo::set_allocated_sha_avatar(std::string* sha_avatar) {
  if (sha_avatar != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sha_avatar_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sha_avatar,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sha_avatar_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sha_avatar_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientClanState.NameInfo.sha_avatar)
}

// -------------------------------------------------------------------

// CMsgClientClanState_UserCounts

// optional uint32 members = 1;
inline bool CMsgClientClanState_UserCounts::_internal_has_members() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientClanState_UserCounts::has_members() const {
  return _internal_has_members();
}
inline void CMsgClientClanState_UserCounts::clear_members() {
  members_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgClientClanState_UserCounts::_internal_members() const {
  return members_;
}
inline uint32_t CMsgClientClanState_UserCounts::members() const {
  // @@protoc_insertion_point(field_get:CMsgClientClanState.UserCounts.members)
  return _internal_members();
}
inline void CMsgClientClanState_UserCounts::_internal_set_members(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  members_ = value;
}
inline void CMsgClientClanState_UserCounts::set_members(uint32_t value) {
  _internal_set_members(value);
  // @@protoc_insertion_point(field_set:CMsgClientClanState.UserCounts.members)
}

// optional uint32 online = 2;
inline bool CMsgClientClanState_UserCounts::_internal_has_online() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientClanState_UserCounts::has_online() const {
  return _internal_has_online();
}
inline void CMsgClientClanState_UserCounts::clear_online() {
  online_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgClientClanState_UserCounts::_internal_online() const {
  return online_;
}
inline uint32_t CMsgClientClanState_UserCounts::online() const {
  // @@protoc_insertion_point(field_get:CMsgClientClanState.UserCounts.online)
  return _internal_online();
}
inline void CMsgClientClanState_UserCounts::_internal_set_online(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  online_ = value;
}
inline void CMsgClientClanState_UserCounts::set_online(uint32_t value) {
  _internal_set_online(value);
  // @@protoc_insertion_point(field_set:CMsgClientClanState.UserCounts.online)
}

// optional uint32 chatting = 3;
inline bool CMsgClientClanState_UserCounts::_internal_has_chatting() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientClanState_UserCounts::has_chatting() const {
  return _internal_has_chatting();
}
inline void CMsgClientClanState_UserCounts::clear_chatting() {
  chatting_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgClientClanState_UserCounts::_internal_chatting() const {
  return chatting_;
}
inline uint32_t CMsgClientClanState_UserCounts::chatting() const {
  // @@protoc_insertion_point(field_get:CMsgClientClanState.UserCounts.chatting)
  return _internal_chatting();
}
inline void CMsgClientClanState_UserCounts::_internal_set_chatting(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  chatting_ = value;
}
inline void CMsgClientClanState_UserCounts::set_chatting(uint32_t value) {
  _internal_set_chatting(value);
  // @@protoc_insertion_point(field_set:CMsgClientClanState.UserCounts.chatting)
}

// optional uint32 in_game = 4;
inline bool CMsgClientClanState_UserCounts::_internal_has_in_game() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientClanState_UserCounts::has_in_game() const {
  return _internal_has_in_game();
}
inline void CMsgClientClanState_UserCounts::clear_in_game() {
  in_game_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgClientClanState_UserCounts::_internal_in_game() const {
  return in_game_;
}
inline uint32_t CMsgClientClanState_UserCounts::in_game() const {
  // @@protoc_insertion_point(field_get:CMsgClientClanState.UserCounts.in_game)
  return _internal_in_game();
}
inline void CMsgClientClanState_UserCounts::_internal_set_in_game(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  in_game_ = value;
}
inline void CMsgClientClanState_UserCounts::set_in_game(uint32_t value) {
  _internal_set_in_game(value);
  // @@protoc_insertion_point(field_set:CMsgClientClanState.UserCounts.in_game)
}

// optional uint32 chat_room_members = 5;
inline bool CMsgClientClanState_UserCounts::_internal_has_chat_room_members() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgClientClanState_UserCounts::has_chat_room_members() const {
  return _internal_has_chat_room_members();
}
inline void CMsgClientClanState_UserCounts::clear_chat_room_members() {
  chat_room_members_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgClientClanState_UserCounts::_internal_chat_room_members() const {
  return chat_room_members_;
}
inline uint32_t CMsgClientClanState_UserCounts::chat_room_members() const {
  // @@protoc_insertion_point(field_get:CMsgClientClanState.UserCounts.chat_room_members)
  return _internal_chat_room_members();
}
inline void CMsgClientClanState_UserCounts::_internal_set_chat_room_members(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  chat_room_members_ = value;
}
inline void CMsgClientClanState_UserCounts::set_chat_room_members(uint32_t value) {
  _internal_set_chat_room_members(value);
  // @@protoc_insertion_point(field_set:CMsgClientClanState.UserCounts.chat_room_members)
}

// -------------------------------------------------------------------

// CMsgClientClanState_Event

// optional fixed64 gid = 1;
inline bool CMsgClientClanState_Event::_internal_has_gid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientClanState_Event::has_gid() const {
  return _internal_has_gid();
}
inline void CMsgClientClanState_Event::clear_gid() {
  gid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CMsgClientClanState_Event::_internal_gid() const {
  return gid_;
}
inline uint64_t CMsgClientClanState_Event::gid() const {
  // @@protoc_insertion_point(field_get:CMsgClientClanState.Event.gid)
  return _internal_gid();
}
inline void CMsgClientClanState_Event::_internal_set_gid(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  gid_ = value;
}
inline void CMsgClientClanState_Event::set_gid(uint64_t value) {
  _internal_set_gid(value);
  // @@protoc_insertion_point(field_set:CMsgClientClanState.Event.gid)
}

// optional uint32 event_time = 2;
inline bool CMsgClientClanState_Event::_internal_has_event_time() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientClanState_Event::has_event_time() const {
  return _internal_has_event_time();
}
inline void CMsgClientClanState_Event::clear_event_time() {
  event_time_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgClientClanState_Event::_internal_event_time() const {
  return event_time_;
}
inline uint32_t CMsgClientClanState_Event::event_time() const {
  // @@protoc_insertion_point(field_get:CMsgClientClanState.Event.event_time)
  return _internal_event_time();
}
inline void CMsgClientClanState_Event::_internal_set_event_time(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  event_time_ = value;
}
inline void CMsgClientClanState_Event::set_event_time(uint32_t value) {
  _internal_set_event_time(value);
  // @@protoc_insertion_point(field_set:CMsgClientClanState.Event.event_time)
}

// optional string headline = 3;
inline bool CMsgClientClanState_Event::_internal_has_headline() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientClanState_Event::has_headline() const {
  return _internal_has_headline();
}
inline void CMsgClientClanState_Event::clear_headline() {
  headline_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientClanState_Event::headline() const {
  // @@protoc_insertion_point(field_get:CMsgClientClanState.Event.headline)
  return _internal_headline();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientClanState_Event::set_headline(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 headline_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientClanState.Event.headline)
}
inline std::string* CMsgClientClanState_Event::mutable_headline() {
  std::string* _s = _internal_mutable_headline();
  // @@protoc_insertion_point(field_mutable:CMsgClientClanState.Event.headline)
  return _s;
}
inline const std::string& CMsgClientClanState_Event::_internal_headline() const {
  return headline_.Get();
}
inline void CMsgClientClanState_Event::_internal_set_headline(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  headline_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientClanState_Event::_internal_mutable_headline() {
  _has_bits_[0] |= 0x00000001u;
  return headline_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientClanState_Event::release_headline() {
  // @@protoc_insertion_point(field_release:CMsgClientClanState.Event.headline)
  if (!_internal_has_headline()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = headline_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (headline_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    headline_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientClanState_Event::set_allocated_headline(std::string* headline) {
  if (headline != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  headline_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), headline,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (headline_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    headline_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientClanState.Event.headline)
}

// optional fixed64 game_id = 4;
inline bool CMsgClientClanState_Event::_internal_has_game_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgClientClanState_Event::has_game_id() const {
  return _internal_has_game_id();
}
inline void CMsgClientClanState_Event::clear_game_id() {
  game_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000010u;
}
inline uint64_t CMsgClientClanState_Event::_internal_game_id() const {
  return game_id_;
}
inline uint64_t CMsgClientClanState_Event::game_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientClanState.Event.game_id)
  return _internal_game_id();
}
inline void CMsgClientClanState_Event::_internal_set_game_id(uint64_t value) {
  _has_bits_[0] |= 0x00000010u;
  game_id_ = value;
}
inline void CMsgClientClanState_Event::set_game_id(uint64_t value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientClanState.Event.game_id)
}

// optional bool just_posted = 5;
inline bool CMsgClientClanState_Event::_internal_has_just_posted() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientClanState_Event::has_just_posted() const {
  return _internal_has_just_posted();
}
inline void CMsgClientClanState_Event::clear_just_posted() {
  just_posted_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CMsgClientClanState_Event::_internal_just_posted() const {
  return just_posted_;
}
inline bool CMsgClientClanState_Event::just_posted() const {
  // @@protoc_insertion_point(field_get:CMsgClientClanState.Event.just_posted)
  return _internal_just_posted();
}
inline void CMsgClientClanState_Event::_internal_set_just_posted(bool value) {
  _has_bits_[0] |= 0x00000008u;
  just_posted_ = value;
}
inline void CMsgClientClanState_Event::set_just_posted(bool value) {
  _internal_set_just_posted(value);
  // @@protoc_insertion_point(field_set:CMsgClientClanState.Event.just_posted)
}

// -------------------------------------------------------------------

// CMsgClientClanState

// optional fixed64 steamid_clan = 1;
inline bool CMsgClientClanState::_internal_has_steamid_clan() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientClanState::has_steamid_clan() const {
  return _internal_has_steamid_clan();
}
inline void CMsgClientClanState::clear_steamid_clan() {
  steamid_clan_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CMsgClientClanState::_internal_steamid_clan() const {
  return steamid_clan_;
}
inline uint64_t CMsgClientClanState::steamid_clan() const {
  // @@protoc_insertion_point(field_get:CMsgClientClanState.steamid_clan)
  return _internal_steamid_clan();
}
inline void CMsgClientClanState::_internal_set_steamid_clan(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  steamid_clan_ = value;
}
inline void CMsgClientClanState::set_steamid_clan(uint64_t value) {
  _internal_set_steamid_clan(value);
  // @@protoc_insertion_point(field_set:CMsgClientClanState.steamid_clan)
}

// optional uint32 clan_account_flags = 3;
inline bool CMsgClientClanState::_internal_has_clan_account_flags() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientClanState::has_clan_account_flags() const {
  return _internal_has_clan_account_flags();
}
inline void CMsgClientClanState::clear_clan_account_flags() {
  clan_account_flags_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgClientClanState::_internal_clan_account_flags() const {
  return clan_account_flags_;
}
inline uint32_t CMsgClientClanState::clan_account_flags() const {
  // @@protoc_insertion_point(field_get:CMsgClientClanState.clan_account_flags)
  return _internal_clan_account_flags();
}
inline void CMsgClientClanState::_internal_set_clan_account_flags(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  clan_account_flags_ = value;
}
inline void CMsgClientClanState::set_clan_account_flags(uint32_t value) {
  _internal_set_clan_account_flags(value);
  // @@protoc_insertion_point(field_set:CMsgClientClanState.clan_account_flags)
}

// optional .CMsgClientClanState.NameInfo name_info = 4;
inline bool CMsgClientClanState::_internal_has_name_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || name_info_ != nullptr);
  return value;
}
inline bool CMsgClientClanState::has_name_info() const {
  return _internal_has_name_info();
}
inline void CMsgClientClanState::clear_name_info() {
  if (name_info_ != nullptr) name_info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgClientClanState_NameInfo& CMsgClientClanState::_internal_name_info() const {
  const ::CMsgClientClanState_NameInfo* p = name_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgClientClanState_NameInfo&>(
      ::_CMsgClientClanState_NameInfo_default_instance_);
}
inline const ::CMsgClientClanState_NameInfo& CMsgClientClanState::name_info() const {
  // @@protoc_insertion_point(field_get:CMsgClientClanState.name_info)
  return _internal_name_info();
}
inline void CMsgClientClanState::unsafe_arena_set_allocated_name_info(
    ::CMsgClientClanState_NameInfo* name_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(name_info_);
  }
  name_info_ = name_info;
  if (name_info) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgClientClanState.name_info)
}
inline ::CMsgClientClanState_NameInfo* CMsgClientClanState::release_name_info() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgClientClanState_NameInfo* temp = name_info_;
  name_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgClientClanState_NameInfo* CMsgClientClanState::unsafe_arena_release_name_info() {
  // @@protoc_insertion_point(field_release:CMsgClientClanState.name_info)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgClientClanState_NameInfo* temp = name_info_;
  name_info_ = nullptr;
  return temp;
}
inline ::CMsgClientClanState_NameInfo* CMsgClientClanState::_internal_mutable_name_info() {
  _has_bits_[0] |= 0x00000001u;
  if (name_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgClientClanState_NameInfo>(GetArenaForAllocation());
    name_info_ = p;
  }
  return name_info_;
}
inline ::CMsgClientClanState_NameInfo* CMsgClientClanState::mutable_name_info() {
  ::CMsgClientClanState_NameInfo* _msg = _internal_mutable_name_info();
  // @@protoc_insertion_point(field_mutable:CMsgClientClanState.name_info)
  return _msg;
}
inline void CMsgClientClanState::set_allocated_name_info(::CMsgClientClanState_NameInfo* name_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete name_info_;
  }
  if (name_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgClientClanState_NameInfo>::GetOwningArena(name_info);
    if (message_arena != submessage_arena) {
      name_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, name_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_info_ = name_info;
  // @@protoc_insertion_point(field_set_allocated:CMsgClientClanState.name_info)
}

// optional .CMsgClientClanState.UserCounts user_counts = 5;
inline bool CMsgClientClanState::_internal_has_user_counts() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || user_counts_ != nullptr);
  return value;
}
inline bool CMsgClientClanState::has_user_counts() const {
  return _internal_has_user_counts();
}
inline void CMsgClientClanState::clear_user_counts() {
  if (user_counts_ != nullptr) user_counts_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::CMsgClientClanState_UserCounts& CMsgClientClanState::_internal_user_counts() const {
  const ::CMsgClientClanState_UserCounts* p = user_counts_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgClientClanState_UserCounts&>(
      ::_CMsgClientClanState_UserCounts_default_instance_);
}
inline const ::CMsgClientClanState_UserCounts& CMsgClientClanState::user_counts() const {
  // @@protoc_insertion_point(field_get:CMsgClientClanState.user_counts)
  return _internal_user_counts();
}
inline void CMsgClientClanState::unsafe_arena_set_allocated_user_counts(
    ::CMsgClientClanState_UserCounts* user_counts) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_counts_);
  }
  user_counts_ = user_counts;
  if (user_counts) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgClientClanState.user_counts)
}
inline ::CMsgClientClanState_UserCounts* CMsgClientClanState::release_user_counts() {
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgClientClanState_UserCounts* temp = user_counts_;
  user_counts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgClientClanState_UserCounts* CMsgClientClanState::unsafe_arena_release_user_counts() {
  // @@protoc_insertion_point(field_release:CMsgClientClanState.user_counts)
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgClientClanState_UserCounts* temp = user_counts_;
  user_counts_ = nullptr;
  return temp;
}
inline ::CMsgClientClanState_UserCounts* CMsgClientClanState::_internal_mutable_user_counts() {
  _has_bits_[0] |= 0x00000002u;
  if (user_counts_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgClientClanState_UserCounts>(GetArenaForAllocation());
    user_counts_ = p;
  }
  return user_counts_;
}
inline ::CMsgClientClanState_UserCounts* CMsgClientClanState::mutable_user_counts() {
  ::CMsgClientClanState_UserCounts* _msg = _internal_mutable_user_counts();
  // @@protoc_insertion_point(field_mutable:CMsgClientClanState.user_counts)
  return _msg;
}
inline void CMsgClientClanState::set_allocated_user_counts(::CMsgClientClanState_UserCounts* user_counts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete user_counts_;
  }
  if (user_counts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgClientClanState_UserCounts>::GetOwningArena(user_counts);
    if (message_arena != submessage_arena) {
      user_counts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_counts, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  user_counts_ = user_counts;
  // @@protoc_insertion_point(field_set_allocated:CMsgClientClanState.user_counts)
}

// repeated .CMsgClientClanState.Event events = 6;
inline int CMsgClientClanState::_internal_events_size() const {
  return events_.size();
}
inline int CMsgClientClanState::events_size() const {
  return _internal_events_size();
}
inline void CMsgClientClanState::clear_events() {
  events_.Clear();
}
inline ::CMsgClientClanState_Event* CMsgClientClanState::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgClientClanState.events)
  return events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientClanState_Event >*
CMsgClientClanState::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:CMsgClientClanState.events)
  return &events_;
}
inline const ::CMsgClientClanState_Event& CMsgClientClanState::_internal_events(int index) const {
  return events_.Get(index);
}
inline const ::CMsgClientClanState_Event& CMsgClientClanState::events(int index) const {
  // @@protoc_insertion_point(field_get:CMsgClientClanState.events)
  return _internal_events(index);
}
inline ::CMsgClientClanState_Event* CMsgClientClanState::_internal_add_events() {
  return events_.Add();
}
inline ::CMsgClientClanState_Event* CMsgClientClanState::add_events() {
  ::CMsgClientClanState_Event* _add = _internal_add_events();
  // @@protoc_insertion_point(field_add:CMsgClientClanState.events)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientClanState_Event >&
CMsgClientClanState::events() const {
  // @@protoc_insertion_point(field_list:CMsgClientClanState.events)
  return events_;
}

// repeated .CMsgClientClanState.Event announcements = 7;
inline int CMsgClientClanState::_internal_announcements_size() const {
  return announcements_.size();
}
inline int CMsgClientClanState::announcements_size() const {
  return _internal_announcements_size();
}
inline void CMsgClientClanState::clear_announcements() {
  announcements_.Clear();
}
inline ::CMsgClientClanState_Event* CMsgClientClanState::mutable_announcements(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgClientClanState.announcements)
  return announcements_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientClanState_Event >*
CMsgClientClanState::mutable_announcements() {
  // @@protoc_insertion_point(field_mutable_list:CMsgClientClanState.announcements)
  return &announcements_;
}
inline const ::CMsgClientClanState_Event& CMsgClientClanState::_internal_announcements(int index) const {
  return announcements_.Get(index);
}
inline const ::CMsgClientClanState_Event& CMsgClientClanState::announcements(int index) const {
  // @@protoc_insertion_point(field_get:CMsgClientClanState.announcements)
  return _internal_announcements(index);
}
inline ::CMsgClientClanState_Event* CMsgClientClanState::_internal_add_announcements() {
  return announcements_.Add();
}
inline ::CMsgClientClanState_Event* CMsgClientClanState::add_announcements() {
  ::CMsgClientClanState_Event* _add = _internal_add_announcements();
  // @@protoc_insertion_point(field_add:CMsgClientClanState.announcements)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientClanState_Event >&
CMsgClientClanState::announcements() const {
  // @@protoc_insertion_point(field_list:CMsgClientClanState.announcements)
  return announcements_;
}

// optional bool chat_room_private = 8;
inline bool CMsgClientClanState::_internal_has_chat_room_private() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgClientClanState::has_chat_room_private() const {
  return _internal_has_chat_room_private();
}
inline void CMsgClientClanState::clear_chat_room_private() {
  chat_room_private_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CMsgClientClanState::_internal_chat_room_private() const {
  return chat_room_private_;
}
inline bool CMsgClientClanState::chat_room_private() const {
  // @@protoc_insertion_point(field_get:CMsgClientClanState.chat_room_private)
  return _internal_chat_room_private();
}
inline void CMsgClientClanState::_internal_set_chat_room_private(bool value) {
  _has_bits_[0] |= 0x00000010u;
  chat_room_private_ = value;
}
inline void CMsgClientClanState::set_chat_room_private(bool value) {
  _internal_set_chat_room_private(value);
  // @@protoc_insertion_point(field_set:CMsgClientClanState.chat_room_private)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_steammessages_5fclientserver_2eproto
