// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_workshop.steamclient.proto

#include "steammessages_workshop.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CWorkshop_GetEULAStatus_Request::CWorkshop_GetEULAStatus_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appid_(0u){}
struct CWorkshop_GetEULAStatus_RequestDefaultTypeInternal {
  constexpr CWorkshop_GetEULAStatus_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CWorkshop_GetEULAStatus_RequestDefaultTypeInternal() {}
  union {
    CWorkshop_GetEULAStatus_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CWorkshop_GetEULAStatus_RequestDefaultTypeInternal _CWorkshop_GetEULAStatus_Request_default_instance_;
constexpr CWorkshop_GetEULAStatus_Response::CWorkshop_GetEULAStatus_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : version_(0u)
  , timestamp_action_(0u)
  , accepted_(false)
  , needs_action_(false){}
struct CWorkshop_GetEULAStatus_ResponseDefaultTypeInternal {
  constexpr CWorkshop_GetEULAStatus_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CWorkshop_GetEULAStatus_ResponseDefaultTypeInternal() {}
  union {
    CWorkshop_GetEULAStatus_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CWorkshop_GetEULAStatus_ResponseDefaultTypeInternal _CWorkshop_GetEULAStatus_Response_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steammessages_5fworkshop_2esteamclient_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_steammessages_5fworkshop_2esteamclient_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_steammessages_5fworkshop_2esteamclient_2eproto[1];

const uint32_t TableStruct_steammessages_5fworkshop_2esteamclient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetEULAStatus_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetEULAStatus_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetEULAStatus_Request, appid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetEULAStatus_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetEULAStatus_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetEULAStatus_Response, version_),
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetEULAStatus_Response, timestamp_action_),
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetEULAStatus_Response, accepted_),
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetEULAStatus_Response, needs_action_),
  0,
  1,
  2,
  3,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, -1, sizeof(::CWorkshop_GetEULAStatus_Request)},
  { 8, 18, -1, sizeof(::CWorkshop_GetEULAStatus_Response)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CWorkshop_GetEULAStatus_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CWorkshop_GetEULAStatus_Response_default_instance_),
};

const char descriptor_table_protodef_steammessages_5fworkshop_2esteamclient_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n(steammessages_workshop.steamclient.pro"
  "to\032\030steammessages_base.proto\032,steammessa"
  "ges_unified_base.steamclient.proto\"0\n\037CW"
  "orkshop_GetEULAStatus_Request\022\r\n\005appid\030\001"
  " \001(\r\"u\n CWorkshop_GetEULAStatus_Response"
  "\022\017\n\007version\030\001 \001(\r\022\030\n\020timestamp_action\030\002 "
  "\001(\r\022\020\n\010accepted\030\003 \001(\010\022\024\n\014needs_action\030\004 "
  "\001(\0102\306\001\n\010Workshop\022\214\001\n\rGetEULAStatus\022 .CWo"
  "rkshop_GetEULAStatus_Request\032!.CWorkshop"
  "_GetEULAStatus_Response\"6\202\265\0302Retrieve th"
  "e status of the user\'s EULA acceptance.\032"
  "+\202\265\030\'A service to access published file "
  "dataB\003\200\001\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_steammessages_5fworkshop_2esteamclient_2eproto_deps[2] = {
  &::descriptor_table_steammessages_5fbase_2eproto,
  &::descriptor_table_steammessages_5funified_5fbase_2esteamclient_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steammessages_5fworkshop_2esteamclient_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fworkshop_2esteamclient_2eproto = {
  false, false, 489, descriptor_table_protodef_steammessages_5fworkshop_2esteamclient_2eproto, "steammessages_workshop.steamclient.proto", 
  &descriptor_table_steammessages_5fworkshop_2esteamclient_2eproto_once, descriptor_table_steammessages_5fworkshop_2esteamclient_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_steammessages_5fworkshop_2esteamclient_2eproto::offsets,
  file_level_metadata_steammessages_5fworkshop_2esteamclient_2eproto, file_level_enum_descriptors_steammessages_5fworkshop_2esteamclient_2eproto, file_level_service_descriptors_steammessages_5fworkshop_2esteamclient_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_steammessages_5fworkshop_2esteamclient_2eproto_getter() {
  return &descriptor_table_steammessages_5fworkshop_2esteamclient_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_steammessages_5fworkshop_2esteamclient_2eproto(&descriptor_table_steammessages_5fworkshop_2esteamclient_2eproto);

// ===================================================================

class CWorkshop_GetEULAStatus_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CWorkshop_GetEULAStatus_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CWorkshop_GetEULAStatus_Request::CWorkshop_GetEULAStatus_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CWorkshop_GetEULAStatus_Request)
}
CWorkshop_GetEULAStatus_Request::CWorkshop_GetEULAStatus_Request(const CWorkshop_GetEULAStatus_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:CWorkshop_GetEULAStatus_Request)
}

inline void CWorkshop_GetEULAStatus_Request::SharedCtor() {
appid_ = 0u;
}

CWorkshop_GetEULAStatus_Request::~CWorkshop_GetEULAStatus_Request() {
  // @@protoc_insertion_point(destructor:CWorkshop_GetEULAStatus_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CWorkshop_GetEULAStatus_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CWorkshop_GetEULAStatus_Request::ArenaDtor(void* object) {
  CWorkshop_GetEULAStatus_Request* _this = reinterpret_cast< CWorkshop_GetEULAStatus_Request* >(object);
  (void)_this;
}
void CWorkshop_GetEULAStatus_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CWorkshop_GetEULAStatus_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CWorkshop_GetEULAStatus_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CWorkshop_GetEULAStatus_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CWorkshop_GetEULAStatus_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CWorkshop_GetEULAStatus_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CWorkshop_GetEULAStatus_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CWorkshop_GetEULAStatus_Request)
  return target;
}

size_t CWorkshop_GetEULAStatus_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CWorkshop_GetEULAStatus_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 appid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CWorkshop_GetEULAStatus_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CWorkshop_GetEULAStatus_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CWorkshop_GetEULAStatus_Request::GetClassData() const { return &_class_data_; }

void CWorkshop_GetEULAStatus_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CWorkshop_GetEULAStatus_Request *>(to)->MergeFrom(
      static_cast<const CWorkshop_GetEULAStatus_Request &>(from));
}


void CWorkshop_GetEULAStatus_Request::MergeFrom(const CWorkshop_GetEULAStatus_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CWorkshop_GetEULAStatus_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_appid()) {
    _internal_set_appid(from._internal_appid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CWorkshop_GetEULAStatus_Request::CopyFrom(const CWorkshop_GetEULAStatus_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CWorkshop_GetEULAStatus_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWorkshop_GetEULAStatus_Request::IsInitialized() const {
  return true;
}

void CWorkshop_GetEULAStatus_Request::InternalSwap(CWorkshop_GetEULAStatus_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(appid_, other->appid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CWorkshop_GetEULAStatus_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fworkshop_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fworkshop_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fworkshop_2esteamclient_2eproto[0]);
}

// ===================================================================

class CWorkshop_GetEULAStatus_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CWorkshop_GetEULAStatus_Response>()._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timestamp_action(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_accepted(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_needs_action(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CWorkshop_GetEULAStatus_Response::CWorkshop_GetEULAStatus_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CWorkshop_GetEULAStatus_Response)
}
CWorkshop_GetEULAStatus_Response::CWorkshop_GetEULAStatus_Response(const CWorkshop_GetEULAStatus_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&needs_action_) -
    reinterpret_cast<char*>(&version_)) + sizeof(needs_action_));
  // @@protoc_insertion_point(copy_constructor:CWorkshop_GetEULAStatus_Response)
}

inline void CWorkshop_GetEULAStatus_Response::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&needs_action_) -
    reinterpret_cast<char*>(&version_)) + sizeof(needs_action_));
}

CWorkshop_GetEULAStatus_Response::~CWorkshop_GetEULAStatus_Response() {
  // @@protoc_insertion_point(destructor:CWorkshop_GetEULAStatus_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CWorkshop_GetEULAStatus_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CWorkshop_GetEULAStatus_Response::ArenaDtor(void* object) {
  CWorkshop_GetEULAStatus_Response* _this = reinterpret_cast< CWorkshop_GetEULAStatus_Response* >(object);
  (void)_this;
}
void CWorkshop_GetEULAStatus_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CWorkshop_GetEULAStatus_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CWorkshop_GetEULAStatus_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CWorkshop_GetEULAStatus_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&needs_action_) -
        reinterpret_cast<char*>(&version_)) + sizeof(needs_action_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CWorkshop_GetEULAStatus_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timestamp_action = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_timestamp_action(&has_bits);
          timestamp_action_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool accepted = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_accepted(&has_bits);
          accepted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool needs_action = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_needs_action(&has_bits);
          needs_action_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CWorkshop_GetEULAStatus_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CWorkshop_GetEULAStatus_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_version(), target);
  }

  // optional uint32 timestamp_action = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_timestamp_action(), target);
  }

  // optional bool accepted = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_accepted(), target);
  }

  // optional bool needs_action = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_needs_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CWorkshop_GetEULAStatus_Response)
  return target;
}

size_t CWorkshop_GetEULAStatus_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CWorkshop_GetEULAStatus_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 version = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_version());
    }

    // optional uint32 timestamp_action = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp_action());
    }

    // optional bool accepted = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool needs_action = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CWorkshop_GetEULAStatus_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CWorkshop_GetEULAStatus_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CWorkshop_GetEULAStatus_Response::GetClassData() const { return &_class_data_; }

void CWorkshop_GetEULAStatus_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CWorkshop_GetEULAStatus_Response *>(to)->MergeFrom(
      static_cast<const CWorkshop_GetEULAStatus_Response &>(from));
}


void CWorkshop_GetEULAStatus_Response::MergeFrom(const CWorkshop_GetEULAStatus_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CWorkshop_GetEULAStatus_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_action_ = from.timestamp_action_;
    }
    if (cached_has_bits & 0x00000004u) {
      accepted_ = from.accepted_;
    }
    if (cached_has_bits & 0x00000008u) {
      needs_action_ = from.needs_action_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CWorkshop_GetEULAStatus_Response::CopyFrom(const CWorkshop_GetEULAStatus_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CWorkshop_GetEULAStatus_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWorkshop_GetEULAStatus_Response::IsInitialized() const {
  return true;
}

void CWorkshop_GetEULAStatus_Response::InternalSwap(CWorkshop_GetEULAStatus_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CWorkshop_GetEULAStatus_Response, needs_action_)
      + sizeof(CWorkshop_GetEULAStatus_Response::needs_action_)
      - PROTOBUF_FIELD_OFFSET(CWorkshop_GetEULAStatus_Response, version_)>(
          reinterpret_cast<char*>(&version_),
          reinterpret_cast<char*>(&other->version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CWorkshop_GetEULAStatus_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fworkshop_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fworkshop_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fworkshop_2esteamclient_2eproto[1]);
}

// ===================================================================

Workshop::~Workshop() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* Workshop::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fworkshop_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5fworkshop_2esteamclient_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* Workshop::GetDescriptor() {
  return descriptor();
}

void Workshop::GetEULAStatus(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CWorkshop_GetEULAStatus_Request*,
                         ::CWorkshop_GetEULAStatus_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetEULAStatus() not implemented.");
  done->Run();
}

void Workshop::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5fworkshop_2esteamclient_2eproto[0]);
  switch(method->index()) {
    case 0:
      GetEULAStatus(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CWorkshop_GetEULAStatus_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CWorkshop_GetEULAStatus_Response*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& Workshop::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CWorkshop_GetEULAStatus_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& Workshop::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CWorkshop_GetEULAStatus_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

Workshop_Stub::Workshop_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
Workshop_Stub::Workshop_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
Workshop_Stub::~Workshop_Stub() {
  if (owns_channel_) delete channel_;
}

void Workshop_Stub::GetEULAStatus(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CWorkshop_GetEULAStatus_Request* request,
                              ::CWorkshop_GetEULAStatus_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CWorkshop_GetEULAStatus_Request* Arena::CreateMaybeMessage< ::CWorkshop_GetEULAStatus_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CWorkshop_GetEULAStatus_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CWorkshop_GetEULAStatus_Response* Arena::CreateMaybeMessage< ::CWorkshop_GetEULAStatus_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CWorkshop_GetEULAStatus_Response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
