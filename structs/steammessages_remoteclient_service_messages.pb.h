// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_remoteclient_service_messages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_steammessages_5fremoteclient_5fservice_5fmessages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_steammessages_5fremoteclient_5fservice_5fmessages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_5fremoteclient_5fservice_5fmessages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_5fremoteclient_5fservice_5fmessages_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[39]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto;
class CRemoteClient_AllocateRelayServer_Request;
struct CRemoteClient_AllocateRelayServer_RequestDefaultTypeInternal;
extern CRemoteClient_AllocateRelayServer_RequestDefaultTypeInternal _CRemoteClient_AllocateRelayServer_Request_default_instance_;
class CRemoteClient_AllocateRelayServer_Response;
struct CRemoteClient_AllocateRelayServer_ResponseDefaultTypeInternal;
extern CRemoteClient_AllocateRelayServer_ResponseDefaultTypeInternal _CRemoteClient_AllocateRelayServer_Response_default_instance_;
class CRemoteClient_AllocateSDR_Request;
struct CRemoteClient_AllocateSDR_RequestDefaultTypeInternal;
extern CRemoteClient_AllocateSDR_RequestDefaultTypeInternal _CRemoteClient_AllocateSDR_Request_default_instance_;
class CRemoteClient_AllocateSDR_Response;
struct CRemoteClient_AllocateSDR_ResponseDefaultTypeInternal;
extern CRemoteClient_AllocateSDR_ResponseDefaultTypeInternal _CRemoteClient_AllocateSDR_Response_default_instance_;
class CRemoteClient_AllocateTURNServer_Request;
struct CRemoteClient_AllocateTURNServer_RequestDefaultTypeInternal;
extern CRemoteClient_AllocateTURNServer_RequestDefaultTypeInternal _CRemoteClient_AllocateTURNServer_Request_default_instance_;
class CRemoteClient_AllocateTURNServer_Response;
struct CRemoteClient_AllocateTURNServer_ResponseDefaultTypeInternal;
extern CRemoteClient_AllocateTURNServer_ResponseDefaultTypeInternal _CRemoteClient_AllocateTURNServer_Response_default_instance_;
class CRemoteClient_CancelPairing_Request;
struct CRemoteClient_CancelPairing_RequestDefaultTypeInternal;
extern CRemoteClient_CancelPairing_RequestDefaultTypeInternal _CRemoteClient_CancelPairing_Request_default_instance_;
class CRemoteClient_CancelPairing_Response;
struct CRemoteClient_CancelPairing_ResponseDefaultTypeInternal;
extern CRemoteClient_CancelPairing_ResponseDefaultTypeInternal _CRemoteClient_CancelPairing_Response_default_instance_;
class CRemoteClient_CreateRemotePlayTogetherInvitation_Request;
struct CRemoteClient_CreateRemotePlayTogetherInvitation_RequestDefaultTypeInternal;
extern CRemoteClient_CreateRemotePlayTogetherInvitation_RequestDefaultTypeInternal _CRemoteClient_CreateRemotePlayTogetherInvitation_Request_default_instance_;
class CRemoteClient_CreateRemotePlayTogetherInvitation_Response;
struct CRemoteClient_CreateRemotePlayTogetherInvitation_ResponseDefaultTypeInternal;
extern CRemoteClient_CreateRemotePlayTogetherInvitation_ResponseDefaultTypeInternal _CRemoteClient_CreateRemotePlayTogetherInvitation_Response_default_instance_;
class CRemoteClient_CreateSession_Request;
struct CRemoteClient_CreateSession_RequestDefaultTypeInternal;
extern CRemoteClient_CreateSession_RequestDefaultTypeInternal _CRemoteClient_CreateSession_Request_default_instance_;
class CRemoteClient_CreateSession_Response;
struct CRemoteClient_CreateSession_ResponseDefaultTypeInternal;
extern CRemoteClient_CreateSession_ResponseDefaultTypeInternal _CRemoteClient_CreateSession_Response_default_instance_;
class CRemoteClient_DeleteRemotePlayTogetherInvitation_Request;
struct CRemoteClient_DeleteRemotePlayTogetherInvitation_RequestDefaultTypeInternal;
extern CRemoteClient_DeleteRemotePlayTogetherInvitation_RequestDefaultTypeInternal _CRemoteClient_DeleteRemotePlayTogetherInvitation_Request_default_instance_;
class CRemoteClient_DeleteRemotePlayTogetherInvitation_Response;
struct CRemoteClient_DeleteRemotePlayTogetherInvitation_ResponseDefaultTypeInternal;
extern CRemoteClient_DeleteRemotePlayTogetherInvitation_ResponseDefaultTypeInternal _CRemoteClient_DeleteRemotePlayTogetherInvitation_Response_default_instance_;
class CRemoteClient_GetPairingInfo_Request;
struct CRemoteClient_GetPairingInfo_RequestDefaultTypeInternal;
extern CRemoteClient_GetPairingInfo_RequestDefaultTypeInternal _CRemoteClient_GetPairingInfo_Request_default_instance_;
class CRemoteClient_GetPairingInfo_Response;
struct CRemoteClient_GetPairingInfo_ResponseDefaultTypeInternal;
extern CRemoteClient_GetPairingInfo_ResponseDefaultTypeInternal _CRemoteClient_GetPairingInfo_Response_default_instance_;
class CRemoteClient_GetReplies_Request;
struct CRemoteClient_GetReplies_RequestDefaultTypeInternal;
extern CRemoteClient_GetReplies_RequestDefaultTypeInternal _CRemoteClient_GetReplies_Request_default_instance_;
class CRemoteClient_GetReplies_Response;
struct CRemoteClient_GetReplies_ResponseDefaultTypeInternal;
extern CRemoteClient_GetReplies_ResponseDefaultTypeInternal _CRemoteClient_GetReplies_Response_default_instance_;
class CRemoteClient_LookupRemotePlayTogetherInvitation_Request;
struct CRemoteClient_LookupRemotePlayTogetherInvitation_RequestDefaultTypeInternal;
extern CRemoteClient_LookupRemotePlayTogetherInvitation_RequestDefaultTypeInternal _CRemoteClient_LookupRemotePlayTogetherInvitation_Request_default_instance_;
class CRemoteClient_LookupRemotePlayTogetherInvitation_Response;
struct CRemoteClient_LookupRemotePlayTogetherInvitation_ResponseDefaultTypeInternal;
extern CRemoteClient_LookupRemotePlayTogetherInvitation_ResponseDefaultTypeInternal _CRemoteClient_LookupRemotePlayTogetherInvitation_Response_default_instance_;
class CRemoteClient_Online_Notification;
struct CRemoteClient_Online_NotificationDefaultTypeInternal;
extern CRemoteClient_Online_NotificationDefaultTypeInternal _CRemoteClient_Online_Notification_default_instance_;
class CRemoteClient_RegisterStatusUpdate_Notification;
struct CRemoteClient_RegisterStatusUpdate_NotificationDefaultTypeInternal;
extern CRemoteClient_RegisterStatusUpdate_NotificationDefaultTypeInternal _CRemoteClient_RegisterStatusUpdate_Notification_default_instance_;
class CRemoteClient_RemotePacket_Notification;
struct CRemoteClient_RemotePacket_NotificationDefaultTypeInternal;
extern CRemoteClient_RemotePacket_NotificationDefaultTypeInternal _CRemoteClient_RemotePacket_Notification_default_instance_;
class CRemoteClient_ReplyPacket_Notification;
struct CRemoteClient_ReplyPacket_NotificationDefaultTypeInternal;
extern CRemoteClient_ReplyPacket_NotificationDefaultTypeInternal _CRemoteClient_ReplyPacket_Notification_default_instance_;
class CRemoteClient_SetPairingInfo_Request;
struct CRemoteClient_SetPairingInfo_RequestDefaultTypeInternal;
extern CRemoteClient_SetPairingInfo_RequestDefaultTypeInternal _CRemoteClient_SetPairingInfo_Request_default_instance_;
class CRemoteClient_SetPairingInfo_Response;
struct CRemoteClient_SetPairingInfo_ResponseDefaultTypeInternal;
extern CRemoteClient_SetPairingInfo_ResponseDefaultTypeInternal _CRemoteClient_SetPairingInfo_Response_default_instance_;
class CRemoteClient_StartPairing_Request;
struct CRemoteClient_StartPairing_RequestDefaultTypeInternal;
extern CRemoteClient_StartPairing_RequestDefaultTypeInternal _CRemoteClient_StartPairing_Request_default_instance_;
class CRemoteClient_StartPairing_Response;
struct CRemoteClient_StartPairing_ResponseDefaultTypeInternal;
extern CRemoteClient_StartPairing_ResponseDefaultTypeInternal _CRemoteClient_StartPairing_Response_default_instance_;
class CRemoteClient_SteamBroadcast_Notification;
struct CRemoteClient_SteamBroadcast_NotificationDefaultTypeInternal;
extern CRemoteClient_SteamBroadcast_NotificationDefaultTypeInternal _CRemoteClient_SteamBroadcast_Notification_default_instance_;
class CRemoteClient_SteamToSteam_Notification;
struct CRemoteClient_SteamToSteam_NotificationDefaultTypeInternal;
extern CRemoteClient_SteamToSteam_NotificationDefaultTypeInternal _CRemoteClient_SteamToSteam_Notification_default_instance_;
class CRemoteClient_UnregisterStatusUpdate_Notification;
struct CRemoteClient_UnregisterStatusUpdate_NotificationDefaultTypeInternal;
extern CRemoteClient_UnregisterStatusUpdate_NotificationDefaultTypeInternal _CRemoteClient_UnregisterStatusUpdate_Notification_default_instance_;
class CRemotePlayTogether_Notification;
struct CRemotePlayTogether_NotificationDefaultTypeInternal;
extern CRemotePlayTogether_NotificationDefaultTypeInternal _CRemotePlayTogether_Notification_default_instance_;
class CRemotePlayTogether_Notification_ControllerSlot;
struct CRemotePlayTogether_Notification_ControllerSlotDefaultTypeInternal;
extern CRemotePlayTogether_Notification_ControllerSlotDefaultTypeInternal _CRemotePlayTogether_Notification_ControllerSlot_default_instance_;
class CRemotePlayTogether_Notification_ControllerSlot_obsolete;
struct CRemotePlayTogether_Notification_ControllerSlot_obsoleteDefaultTypeInternal;
extern CRemotePlayTogether_Notification_ControllerSlot_obsoleteDefaultTypeInternal _CRemotePlayTogether_Notification_ControllerSlot_obsolete_default_instance_;
class CRemotePlayTogether_Notification_GroupUpdated;
struct CRemotePlayTogether_Notification_GroupUpdatedDefaultTypeInternal;
extern CRemotePlayTogether_Notification_GroupUpdatedDefaultTypeInternal _CRemotePlayTogether_Notification_GroupUpdated_default_instance_;
class CRemotePlayTogether_Notification_Player;
struct CRemotePlayTogether_Notification_PlayerDefaultTypeInternal;
extern CRemotePlayTogether_Notification_PlayerDefaultTypeInternal _CRemotePlayTogether_Notification_Player_default_instance_;
class CRemotePlay_SessionStarted_Request;
struct CRemotePlay_SessionStarted_RequestDefaultTypeInternal;
extern CRemotePlay_SessionStarted_RequestDefaultTypeInternal _CRemotePlay_SessionStarted_Request_default_instance_;
class CRemotePlay_SessionStarted_Response;
struct CRemotePlay_SessionStarted_ResponseDefaultTypeInternal;
extern CRemotePlay_SessionStarted_ResponseDefaultTypeInternal _CRemotePlay_SessionStarted_Response_default_instance_;
class CRemotePlay_SessionStopped_Notification;
struct CRemotePlay_SessionStopped_NotificationDefaultTypeInternal;
extern CRemotePlay_SessionStopped_NotificationDefaultTypeInternal _CRemotePlay_SessionStopped_Notification_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CRemoteClient_AllocateRelayServer_Request* Arena::CreateMaybeMessage<::CRemoteClient_AllocateRelayServer_Request>(Arena*);
template<> ::CRemoteClient_AllocateRelayServer_Response* Arena::CreateMaybeMessage<::CRemoteClient_AllocateRelayServer_Response>(Arena*);
template<> ::CRemoteClient_AllocateSDR_Request* Arena::CreateMaybeMessage<::CRemoteClient_AllocateSDR_Request>(Arena*);
template<> ::CRemoteClient_AllocateSDR_Response* Arena::CreateMaybeMessage<::CRemoteClient_AllocateSDR_Response>(Arena*);
template<> ::CRemoteClient_AllocateTURNServer_Request* Arena::CreateMaybeMessage<::CRemoteClient_AllocateTURNServer_Request>(Arena*);
template<> ::CRemoteClient_AllocateTURNServer_Response* Arena::CreateMaybeMessage<::CRemoteClient_AllocateTURNServer_Response>(Arena*);
template<> ::CRemoteClient_CancelPairing_Request* Arena::CreateMaybeMessage<::CRemoteClient_CancelPairing_Request>(Arena*);
template<> ::CRemoteClient_CancelPairing_Response* Arena::CreateMaybeMessage<::CRemoteClient_CancelPairing_Response>(Arena*);
template<> ::CRemoteClient_CreateRemotePlayTogetherInvitation_Request* Arena::CreateMaybeMessage<::CRemoteClient_CreateRemotePlayTogetherInvitation_Request>(Arena*);
template<> ::CRemoteClient_CreateRemotePlayTogetherInvitation_Response* Arena::CreateMaybeMessage<::CRemoteClient_CreateRemotePlayTogetherInvitation_Response>(Arena*);
template<> ::CRemoteClient_CreateSession_Request* Arena::CreateMaybeMessage<::CRemoteClient_CreateSession_Request>(Arena*);
template<> ::CRemoteClient_CreateSession_Response* Arena::CreateMaybeMessage<::CRemoteClient_CreateSession_Response>(Arena*);
template<> ::CRemoteClient_DeleteRemotePlayTogetherInvitation_Request* Arena::CreateMaybeMessage<::CRemoteClient_DeleteRemotePlayTogetherInvitation_Request>(Arena*);
template<> ::CRemoteClient_DeleteRemotePlayTogetherInvitation_Response* Arena::CreateMaybeMessage<::CRemoteClient_DeleteRemotePlayTogetherInvitation_Response>(Arena*);
template<> ::CRemoteClient_GetPairingInfo_Request* Arena::CreateMaybeMessage<::CRemoteClient_GetPairingInfo_Request>(Arena*);
template<> ::CRemoteClient_GetPairingInfo_Response* Arena::CreateMaybeMessage<::CRemoteClient_GetPairingInfo_Response>(Arena*);
template<> ::CRemoteClient_GetReplies_Request* Arena::CreateMaybeMessage<::CRemoteClient_GetReplies_Request>(Arena*);
template<> ::CRemoteClient_GetReplies_Response* Arena::CreateMaybeMessage<::CRemoteClient_GetReplies_Response>(Arena*);
template<> ::CRemoteClient_LookupRemotePlayTogetherInvitation_Request* Arena::CreateMaybeMessage<::CRemoteClient_LookupRemotePlayTogetherInvitation_Request>(Arena*);
template<> ::CRemoteClient_LookupRemotePlayTogetherInvitation_Response* Arena::CreateMaybeMessage<::CRemoteClient_LookupRemotePlayTogetherInvitation_Response>(Arena*);
template<> ::CRemoteClient_Online_Notification* Arena::CreateMaybeMessage<::CRemoteClient_Online_Notification>(Arena*);
template<> ::CRemoteClient_RegisterStatusUpdate_Notification* Arena::CreateMaybeMessage<::CRemoteClient_RegisterStatusUpdate_Notification>(Arena*);
template<> ::CRemoteClient_RemotePacket_Notification* Arena::CreateMaybeMessage<::CRemoteClient_RemotePacket_Notification>(Arena*);
template<> ::CRemoteClient_ReplyPacket_Notification* Arena::CreateMaybeMessage<::CRemoteClient_ReplyPacket_Notification>(Arena*);
template<> ::CRemoteClient_SetPairingInfo_Request* Arena::CreateMaybeMessage<::CRemoteClient_SetPairingInfo_Request>(Arena*);
template<> ::CRemoteClient_SetPairingInfo_Response* Arena::CreateMaybeMessage<::CRemoteClient_SetPairingInfo_Response>(Arena*);
template<> ::CRemoteClient_StartPairing_Request* Arena::CreateMaybeMessage<::CRemoteClient_StartPairing_Request>(Arena*);
template<> ::CRemoteClient_StartPairing_Response* Arena::CreateMaybeMessage<::CRemoteClient_StartPairing_Response>(Arena*);
template<> ::CRemoteClient_SteamBroadcast_Notification* Arena::CreateMaybeMessage<::CRemoteClient_SteamBroadcast_Notification>(Arena*);
template<> ::CRemoteClient_SteamToSteam_Notification* Arena::CreateMaybeMessage<::CRemoteClient_SteamToSteam_Notification>(Arena*);
template<> ::CRemoteClient_UnregisterStatusUpdate_Notification* Arena::CreateMaybeMessage<::CRemoteClient_UnregisterStatusUpdate_Notification>(Arena*);
template<> ::CRemotePlayTogether_Notification* Arena::CreateMaybeMessage<::CRemotePlayTogether_Notification>(Arena*);
template<> ::CRemotePlayTogether_Notification_ControllerSlot* Arena::CreateMaybeMessage<::CRemotePlayTogether_Notification_ControllerSlot>(Arena*);
template<> ::CRemotePlayTogether_Notification_ControllerSlot_obsolete* Arena::CreateMaybeMessage<::CRemotePlayTogether_Notification_ControllerSlot_obsolete>(Arena*);
template<> ::CRemotePlayTogether_Notification_GroupUpdated* Arena::CreateMaybeMessage<::CRemotePlayTogether_Notification_GroupUpdated>(Arena*);
template<> ::CRemotePlayTogether_Notification_Player* Arena::CreateMaybeMessage<::CRemotePlayTogether_Notification_Player>(Arena*);
template<> ::CRemotePlay_SessionStarted_Request* Arena::CreateMaybeMessage<::CRemotePlay_SessionStarted_Request>(Arena*);
template<> ::CRemotePlay_SessionStarted_Response* Arena::CreateMaybeMessage<::CRemotePlay_SessionStarted_Response>(Arena*);
template<> ::CRemotePlay_SessionStopped_Notification* Arena::CreateMaybeMessage<::CRemotePlay_SessionStopped_Notification>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class CRemoteClient_CreateSession_Request final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CRemoteClient_CreateSession_Request) */ {
 public:
  inline CRemoteClient_CreateSession_Request() : CRemoteClient_CreateSession_Request(nullptr) {}
  explicit constexpr CRemoteClient_CreateSession_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CRemoteClient_CreateSession_Request(const CRemoteClient_CreateSession_Request& from);
  CRemoteClient_CreateSession_Request(CRemoteClient_CreateSession_Request&& from) noexcept
    : CRemoteClient_CreateSession_Request() {
    *this = ::std::move(from);
  }

  inline CRemoteClient_CreateSession_Request& operator=(const CRemoteClient_CreateSession_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CRemoteClient_CreateSession_Request& operator=(CRemoteClient_CreateSession_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CRemoteClient_CreateSession_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CRemoteClient_CreateSession_Request* internal_default_instance() {
    return reinterpret_cast<const CRemoteClient_CreateSession_Request*>(
               &_CRemoteClient_CreateSession_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CRemoteClient_CreateSession_Request& a, CRemoteClient_CreateSession_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CRemoteClient_CreateSession_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CRemoteClient_CreateSession_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CRemoteClient_CreateSession_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CRemoteClient_CreateSession_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CRemoteClient_CreateSession_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CRemoteClient_CreateSession_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRemoteClient_CreateSession_Request";
  }
  protected:
  explicit CRemoteClient_CreateSession_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CRemoteClient_CreateSession_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fremoteclient_5fservice_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class CRemoteClient_CreateSession_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRemoteClient_CreateSession_Response) */ {
 public:
  inline CRemoteClient_CreateSession_Response() : CRemoteClient_CreateSession_Response(nullptr) {}
  ~CRemoteClient_CreateSession_Response() override;
  explicit constexpr CRemoteClient_CreateSession_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CRemoteClient_CreateSession_Response(const CRemoteClient_CreateSession_Response& from);
  CRemoteClient_CreateSession_Response(CRemoteClient_CreateSession_Response&& from) noexcept
    : CRemoteClient_CreateSession_Response() {
    *this = ::std::move(from);
  }

  inline CRemoteClient_CreateSession_Response& operator=(const CRemoteClient_CreateSession_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CRemoteClient_CreateSession_Response& operator=(CRemoteClient_CreateSession_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CRemoteClient_CreateSession_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CRemoteClient_CreateSession_Response* internal_default_instance() {
    return reinterpret_cast<const CRemoteClient_CreateSession_Response*>(
               &_CRemoteClient_CreateSession_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CRemoteClient_CreateSession_Response& a, CRemoteClient_CreateSession_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CRemoteClient_CreateSession_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CRemoteClient_CreateSession_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CRemoteClient_CreateSession_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CRemoteClient_CreateSession_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CRemoteClient_CreateSession_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CRemoteClient_CreateSession_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CRemoteClient_CreateSession_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRemoteClient_CreateSession_Response";
  }
  protected:
  explicit CRemoteClient_CreateSession_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 1,
    kEuniverseFieldNumber = 2,
  };
  // optional fixed64 session_id = 1;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  uint64_t session_id() const;
  void set_session_id(uint64_t value);
  private:
  uint64_t _internal_session_id() const;
  void _internal_set_session_id(uint64_t value);
  public:

  // optional int32 euniverse = 2;
  bool has_euniverse() const;
  private:
  bool _internal_has_euniverse() const;
  public:
  void clear_euniverse();
  int32_t euniverse() const;
  void set_euniverse(int32_t value);
  private:
  int32_t _internal_euniverse() const;
  void _internal_set_euniverse(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CRemoteClient_CreateSession_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t session_id_;
  int32_t euniverse_;
  friend struct ::TableStruct_steammessages_5fremoteclient_5fservice_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class CRemoteClient_StartPairing_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRemoteClient_StartPairing_Request) */ {
 public:
  inline CRemoteClient_StartPairing_Request() : CRemoteClient_StartPairing_Request(nullptr) {}
  ~CRemoteClient_StartPairing_Request() override;
  explicit constexpr CRemoteClient_StartPairing_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CRemoteClient_StartPairing_Request(const CRemoteClient_StartPairing_Request& from);
  CRemoteClient_StartPairing_Request(CRemoteClient_StartPairing_Request&& from) noexcept
    : CRemoteClient_StartPairing_Request() {
    *this = ::std::move(from);
  }

  inline CRemoteClient_StartPairing_Request& operator=(const CRemoteClient_StartPairing_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CRemoteClient_StartPairing_Request& operator=(CRemoteClient_StartPairing_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CRemoteClient_StartPairing_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CRemoteClient_StartPairing_Request* internal_default_instance() {
    return reinterpret_cast<const CRemoteClient_StartPairing_Request*>(
               &_CRemoteClient_StartPairing_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CRemoteClient_StartPairing_Request& a, CRemoteClient_StartPairing_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CRemoteClient_StartPairing_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CRemoteClient_StartPairing_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CRemoteClient_StartPairing_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CRemoteClient_StartPairing_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CRemoteClient_StartPairing_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CRemoteClient_StartPairing_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CRemoteClient_StartPairing_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRemoteClient_StartPairing_Request";
  }
  protected:
  explicit CRemoteClient_StartPairing_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 1,
  };
  // optional fixed64 session_id = 1;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  uint64_t session_id() const;
  void set_session_id(uint64_t value);
  private:
  uint64_t _internal_session_id() const;
  void _internal_set_session_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CRemoteClient_StartPairing_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t session_id_;
  friend struct ::TableStruct_steammessages_5fremoteclient_5fservice_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class CRemoteClient_StartPairing_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRemoteClient_StartPairing_Response) */ {
 public:
  inline CRemoteClient_StartPairing_Response() : CRemoteClient_StartPairing_Response(nullptr) {}
  ~CRemoteClient_StartPairing_Response() override;
  explicit constexpr CRemoteClient_StartPairing_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CRemoteClient_StartPairing_Response(const CRemoteClient_StartPairing_Response& from);
  CRemoteClient_StartPairing_Response(CRemoteClient_StartPairing_Response&& from) noexcept
    : CRemoteClient_StartPairing_Response() {
    *this = ::std::move(from);
  }

  inline CRemoteClient_StartPairing_Response& operator=(const CRemoteClient_StartPairing_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CRemoteClient_StartPairing_Response& operator=(CRemoteClient_StartPairing_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CRemoteClient_StartPairing_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CRemoteClient_StartPairing_Response* internal_default_instance() {
    return reinterpret_cast<const CRemoteClient_StartPairing_Response*>(
               &_CRemoteClient_StartPairing_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CRemoteClient_StartPairing_Response& a, CRemoteClient_StartPairing_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CRemoteClient_StartPairing_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CRemoteClient_StartPairing_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CRemoteClient_StartPairing_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CRemoteClient_StartPairing_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CRemoteClient_StartPairing_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CRemoteClient_StartPairing_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CRemoteClient_StartPairing_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRemoteClient_StartPairing_Response";
  }
  protected:
  explicit CRemoteClient_StartPairing_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPinFieldNumber = 1,
  };
  // optional uint32 pin = 1;
  bool has_pin() const;
  private:
  bool _internal_has_pin() const;
  public:
  void clear_pin();
  uint32_t pin() const;
  void set_pin(uint32_t value);
  private:
  uint32_t _internal_pin() const;
  void _internal_set_pin(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CRemoteClient_StartPairing_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t pin_;
  friend struct ::TableStruct_steammessages_5fremoteclient_5fservice_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class CRemoteClient_SetPairingInfo_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRemoteClient_SetPairingInfo_Request) */ {
 public:
  inline CRemoteClient_SetPairingInfo_Request() : CRemoteClient_SetPairingInfo_Request(nullptr) {}
  ~CRemoteClient_SetPairingInfo_Request() override;
  explicit constexpr CRemoteClient_SetPairingInfo_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CRemoteClient_SetPairingInfo_Request(const CRemoteClient_SetPairingInfo_Request& from);
  CRemoteClient_SetPairingInfo_Request(CRemoteClient_SetPairingInfo_Request&& from) noexcept
    : CRemoteClient_SetPairingInfo_Request() {
    *this = ::std::move(from);
  }

  inline CRemoteClient_SetPairingInfo_Request& operator=(const CRemoteClient_SetPairingInfo_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CRemoteClient_SetPairingInfo_Request& operator=(CRemoteClient_SetPairingInfo_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CRemoteClient_SetPairingInfo_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CRemoteClient_SetPairingInfo_Request* internal_default_instance() {
    return reinterpret_cast<const CRemoteClient_SetPairingInfo_Request*>(
               &_CRemoteClient_SetPairingInfo_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CRemoteClient_SetPairingInfo_Request& a, CRemoteClient_SetPairingInfo_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CRemoteClient_SetPairingInfo_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CRemoteClient_SetPairingInfo_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CRemoteClient_SetPairingInfo_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CRemoteClient_SetPairingInfo_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CRemoteClient_SetPairingInfo_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CRemoteClient_SetPairingInfo_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CRemoteClient_SetPairingInfo_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRemoteClient_SetPairingInfo_Request";
  }
  protected:
  explicit CRemoteClient_SetPairingInfo_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestFieldNumber = 3,
    kSessionIdFieldNumber = 1,
    kDeviceIdFieldNumber = 2,
  };
  // optional bytes request = 3;
  bool has_request() const;
  private:
  bool _internal_has_request() const;
  public:
  void clear_request();
  const std::string& request() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request();
  PROTOBUF_NODISCARD std::string* release_request();
  void set_allocated_request(std::string* request);
  private:
  const std::string& _internal_request() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request(const std::string& value);
  std::string* _internal_mutable_request();
  public:

  // optional fixed64 session_id = 1;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  uint64_t session_id() const;
  void set_session_id(uint64_t value);
  private:
  uint64_t _internal_session_id() const;
  void _internal_set_session_id(uint64_t value);
  public:

  // optional fixed64 device_id = 2;
  bool has_device_id() const;
  private:
  bool _internal_has_device_id() const;
  public:
  void clear_device_id();
  uint64_t device_id() const;
  void set_device_id(uint64_t value);
  private:
  uint64_t _internal_device_id() const;
  void _internal_set_device_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CRemoteClient_SetPairingInfo_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_;
  uint64_t session_id_;
  uint64_t device_id_;
  friend struct ::TableStruct_steammessages_5fremoteclient_5fservice_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class CRemoteClient_SetPairingInfo_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CRemoteClient_SetPairingInfo_Response) */ {
 public:
  inline CRemoteClient_SetPairingInfo_Response() : CRemoteClient_SetPairingInfo_Response(nullptr) {}
  explicit constexpr CRemoteClient_SetPairingInfo_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CRemoteClient_SetPairingInfo_Response(const CRemoteClient_SetPairingInfo_Response& from);
  CRemoteClient_SetPairingInfo_Response(CRemoteClient_SetPairingInfo_Response&& from) noexcept
    : CRemoteClient_SetPairingInfo_Response() {
    *this = ::std::move(from);
  }

  inline CRemoteClient_SetPairingInfo_Response& operator=(const CRemoteClient_SetPairingInfo_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CRemoteClient_SetPairingInfo_Response& operator=(CRemoteClient_SetPairingInfo_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CRemoteClient_SetPairingInfo_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CRemoteClient_SetPairingInfo_Response* internal_default_instance() {
    return reinterpret_cast<const CRemoteClient_SetPairingInfo_Response*>(
               &_CRemoteClient_SetPairingInfo_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CRemoteClient_SetPairingInfo_Response& a, CRemoteClient_SetPairingInfo_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CRemoteClient_SetPairingInfo_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CRemoteClient_SetPairingInfo_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CRemoteClient_SetPairingInfo_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CRemoteClient_SetPairingInfo_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CRemoteClient_SetPairingInfo_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CRemoteClient_SetPairingInfo_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRemoteClient_SetPairingInfo_Response";
  }
  protected:
  explicit CRemoteClient_SetPairingInfo_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CRemoteClient_SetPairingInfo_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fremoteclient_5fservice_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class CRemoteClient_GetPairingInfo_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRemoteClient_GetPairingInfo_Request) */ {
 public:
  inline CRemoteClient_GetPairingInfo_Request() : CRemoteClient_GetPairingInfo_Request(nullptr) {}
  ~CRemoteClient_GetPairingInfo_Request() override;
  explicit constexpr CRemoteClient_GetPairingInfo_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CRemoteClient_GetPairingInfo_Request(const CRemoteClient_GetPairingInfo_Request& from);
  CRemoteClient_GetPairingInfo_Request(CRemoteClient_GetPairingInfo_Request&& from) noexcept
    : CRemoteClient_GetPairingInfo_Request() {
    *this = ::std::move(from);
  }

  inline CRemoteClient_GetPairingInfo_Request& operator=(const CRemoteClient_GetPairingInfo_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CRemoteClient_GetPairingInfo_Request& operator=(CRemoteClient_GetPairingInfo_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CRemoteClient_GetPairingInfo_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CRemoteClient_GetPairingInfo_Request* internal_default_instance() {
    return reinterpret_cast<const CRemoteClient_GetPairingInfo_Request*>(
               &_CRemoteClient_GetPairingInfo_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CRemoteClient_GetPairingInfo_Request& a, CRemoteClient_GetPairingInfo_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CRemoteClient_GetPairingInfo_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CRemoteClient_GetPairingInfo_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CRemoteClient_GetPairingInfo_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CRemoteClient_GetPairingInfo_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CRemoteClient_GetPairingInfo_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CRemoteClient_GetPairingInfo_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CRemoteClient_GetPairingInfo_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRemoteClient_GetPairingInfo_Request";
  }
  protected:
  explicit CRemoteClient_GetPairingInfo_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPinFieldNumber = 1,
  };
  // optional uint32 pin = 1;
  bool has_pin() const;
  private:
  bool _internal_has_pin() const;
  public:
  void clear_pin();
  uint32_t pin() const;
  void set_pin(uint32_t value);
  private:
  uint32_t _internal_pin() const;
  void _internal_set_pin(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CRemoteClient_GetPairingInfo_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t pin_;
  friend struct ::TableStruct_steammessages_5fremoteclient_5fservice_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class CRemoteClient_GetPairingInfo_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRemoteClient_GetPairingInfo_Response) */ {
 public:
  inline CRemoteClient_GetPairingInfo_Response() : CRemoteClient_GetPairingInfo_Response(nullptr) {}
  ~CRemoteClient_GetPairingInfo_Response() override;
  explicit constexpr CRemoteClient_GetPairingInfo_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CRemoteClient_GetPairingInfo_Response(const CRemoteClient_GetPairingInfo_Response& from);
  CRemoteClient_GetPairingInfo_Response(CRemoteClient_GetPairingInfo_Response&& from) noexcept
    : CRemoteClient_GetPairingInfo_Response() {
    *this = ::std::move(from);
  }

  inline CRemoteClient_GetPairingInfo_Response& operator=(const CRemoteClient_GetPairingInfo_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CRemoteClient_GetPairingInfo_Response& operator=(CRemoteClient_GetPairingInfo_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CRemoteClient_GetPairingInfo_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CRemoteClient_GetPairingInfo_Response* internal_default_instance() {
    return reinterpret_cast<const CRemoteClient_GetPairingInfo_Response*>(
               &_CRemoteClient_GetPairingInfo_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CRemoteClient_GetPairingInfo_Response& a, CRemoteClient_GetPairingInfo_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CRemoteClient_GetPairingInfo_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CRemoteClient_GetPairingInfo_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CRemoteClient_GetPairingInfo_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CRemoteClient_GetPairingInfo_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CRemoteClient_GetPairingInfo_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CRemoteClient_GetPairingInfo_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CRemoteClient_GetPairingInfo_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRemoteClient_GetPairingInfo_Response";
  }
  protected:
  explicit CRemoteClient_GetPairingInfo_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestFieldNumber = 3,
    kSessionIdFieldNumber = 1,
    kDeviceIdFieldNumber = 2,
  };
  // optional bytes request = 3;
  bool has_request() const;
  private:
  bool _internal_has_request() const;
  public:
  void clear_request();
  const std::string& request() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request();
  PROTOBUF_NODISCARD std::string* release_request();
  void set_allocated_request(std::string* request);
  private:
  const std::string& _internal_request() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request(const std::string& value);
  std::string* _internal_mutable_request();
  public:

  // optional fixed64 session_id = 1;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  uint64_t session_id() const;
  void set_session_id(uint64_t value);
  private:
  uint64_t _internal_session_id() const;
  void _internal_set_session_id(uint64_t value);
  public:

  // optional fixed64 device_id = 2;
  bool has_device_id() const;
  private:
  bool _internal_has_device_id() const;
  public:
  void clear_device_id();
  uint64_t device_id() const;
  void set_device_id(uint64_t value);
  private:
  uint64_t _internal_device_id() const;
  void _internal_set_device_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CRemoteClient_GetPairingInfo_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_;
  uint64_t session_id_;
  uint64_t device_id_;
  friend struct ::TableStruct_steammessages_5fremoteclient_5fservice_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class CRemoteClient_CancelPairing_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRemoteClient_CancelPairing_Request) */ {
 public:
  inline CRemoteClient_CancelPairing_Request() : CRemoteClient_CancelPairing_Request(nullptr) {}
  ~CRemoteClient_CancelPairing_Request() override;
  explicit constexpr CRemoteClient_CancelPairing_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CRemoteClient_CancelPairing_Request(const CRemoteClient_CancelPairing_Request& from);
  CRemoteClient_CancelPairing_Request(CRemoteClient_CancelPairing_Request&& from) noexcept
    : CRemoteClient_CancelPairing_Request() {
    *this = ::std::move(from);
  }

  inline CRemoteClient_CancelPairing_Request& operator=(const CRemoteClient_CancelPairing_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CRemoteClient_CancelPairing_Request& operator=(CRemoteClient_CancelPairing_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CRemoteClient_CancelPairing_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CRemoteClient_CancelPairing_Request* internal_default_instance() {
    return reinterpret_cast<const CRemoteClient_CancelPairing_Request*>(
               &_CRemoteClient_CancelPairing_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CRemoteClient_CancelPairing_Request& a, CRemoteClient_CancelPairing_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CRemoteClient_CancelPairing_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CRemoteClient_CancelPairing_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CRemoteClient_CancelPairing_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CRemoteClient_CancelPairing_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CRemoteClient_CancelPairing_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CRemoteClient_CancelPairing_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CRemoteClient_CancelPairing_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRemoteClient_CancelPairing_Request";
  }
  protected:
  explicit CRemoteClient_CancelPairing_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 1,
  };
  // optional fixed64 session_id = 1;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  uint64_t session_id() const;
  void set_session_id(uint64_t value);
  private:
  uint64_t _internal_session_id() const;
  void _internal_set_session_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CRemoteClient_CancelPairing_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t session_id_;
  friend struct ::TableStruct_steammessages_5fremoteclient_5fservice_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class CRemoteClient_CancelPairing_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CRemoteClient_CancelPairing_Response) */ {
 public:
  inline CRemoteClient_CancelPairing_Response() : CRemoteClient_CancelPairing_Response(nullptr) {}
  explicit constexpr CRemoteClient_CancelPairing_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CRemoteClient_CancelPairing_Response(const CRemoteClient_CancelPairing_Response& from);
  CRemoteClient_CancelPairing_Response(CRemoteClient_CancelPairing_Response&& from) noexcept
    : CRemoteClient_CancelPairing_Response() {
    *this = ::std::move(from);
  }

  inline CRemoteClient_CancelPairing_Response& operator=(const CRemoteClient_CancelPairing_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CRemoteClient_CancelPairing_Response& operator=(CRemoteClient_CancelPairing_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CRemoteClient_CancelPairing_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CRemoteClient_CancelPairing_Response* internal_default_instance() {
    return reinterpret_cast<const CRemoteClient_CancelPairing_Response*>(
               &_CRemoteClient_CancelPairing_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CRemoteClient_CancelPairing_Response& a, CRemoteClient_CancelPairing_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CRemoteClient_CancelPairing_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CRemoteClient_CancelPairing_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CRemoteClient_CancelPairing_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CRemoteClient_CancelPairing_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CRemoteClient_CancelPairing_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CRemoteClient_CancelPairing_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRemoteClient_CancelPairing_Response";
  }
  protected:
  explicit CRemoteClient_CancelPairing_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CRemoteClient_CancelPairing_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fremoteclient_5fservice_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class CRemoteClient_RegisterStatusUpdate_Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRemoteClient_RegisterStatusUpdate_Notification) */ {
 public:
  inline CRemoteClient_RegisterStatusUpdate_Notification() : CRemoteClient_RegisterStatusUpdate_Notification(nullptr) {}
  ~CRemoteClient_RegisterStatusUpdate_Notification() override;
  explicit constexpr CRemoteClient_RegisterStatusUpdate_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CRemoteClient_RegisterStatusUpdate_Notification(const CRemoteClient_RegisterStatusUpdate_Notification& from);
  CRemoteClient_RegisterStatusUpdate_Notification(CRemoteClient_RegisterStatusUpdate_Notification&& from) noexcept
    : CRemoteClient_RegisterStatusUpdate_Notification() {
    *this = ::std::move(from);
  }

  inline CRemoteClient_RegisterStatusUpdate_Notification& operator=(const CRemoteClient_RegisterStatusUpdate_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CRemoteClient_RegisterStatusUpdate_Notification& operator=(CRemoteClient_RegisterStatusUpdate_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CRemoteClient_RegisterStatusUpdate_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CRemoteClient_RegisterStatusUpdate_Notification* internal_default_instance() {
    return reinterpret_cast<const CRemoteClient_RegisterStatusUpdate_Notification*>(
               &_CRemoteClient_RegisterStatusUpdate_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CRemoteClient_RegisterStatusUpdate_Notification& a, CRemoteClient_RegisterStatusUpdate_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CRemoteClient_RegisterStatusUpdate_Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CRemoteClient_RegisterStatusUpdate_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CRemoteClient_RegisterStatusUpdate_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CRemoteClient_RegisterStatusUpdate_Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CRemoteClient_RegisterStatusUpdate_Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CRemoteClient_RegisterStatusUpdate_Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CRemoteClient_RegisterStatusUpdate_Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRemoteClient_RegisterStatusUpdate_Notification";
  }
  protected:
  explicit CRemoteClient_RegisterStatusUpdate_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 1,
    kSteamidFieldNumber = 2,
    kDeviceIdFieldNumber = 3,
  };
  // optional fixed64 session_id = 1;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  uint64_t session_id() const;
  void set_session_id(uint64_t value);
  private:
  uint64_t _internal_session_id() const;
  void _internal_set_session_id(uint64_t value);
  public:

  // optional fixed64 steamid = 2;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional fixed64 device_id = 3;
  bool has_device_id() const;
  private:
  bool _internal_has_device_id() const;
  public:
  void clear_device_id();
  uint64_t device_id() const;
  void set_device_id(uint64_t value);
  private:
  uint64_t _internal_device_id() const;
  void _internal_set_device_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CRemoteClient_RegisterStatusUpdate_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t session_id_;
  uint64_t steamid_;
  uint64_t device_id_;
  friend struct ::TableStruct_steammessages_5fremoteclient_5fservice_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class CRemoteClient_UnregisterStatusUpdate_Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRemoteClient_UnregisterStatusUpdate_Notification) */ {
 public:
  inline CRemoteClient_UnregisterStatusUpdate_Notification() : CRemoteClient_UnregisterStatusUpdate_Notification(nullptr) {}
  ~CRemoteClient_UnregisterStatusUpdate_Notification() override;
  explicit constexpr CRemoteClient_UnregisterStatusUpdate_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CRemoteClient_UnregisterStatusUpdate_Notification(const CRemoteClient_UnregisterStatusUpdate_Notification& from);
  CRemoteClient_UnregisterStatusUpdate_Notification(CRemoteClient_UnregisterStatusUpdate_Notification&& from) noexcept
    : CRemoteClient_UnregisterStatusUpdate_Notification() {
    *this = ::std::move(from);
  }

  inline CRemoteClient_UnregisterStatusUpdate_Notification& operator=(const CRemoteClient_UnregisterStatusUpdate_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CRemoteClient_UnregisterStatusUpdate_Notification& operator=(CRemoteClient_UnregisterStatusUpdate_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CRemoteClient_UnregisterStatusUpdate_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CRemoteClient_UnregisterStatusUpdate_Notification* internal_default_instance() {
    return reinterpret_cast<const CRemoteClient_UnregisterStatusUpdate_Notification*>(
               &_CRemoteClient_UnregisterStatusUpdate_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CRemoteClient_UnregisterStatusUpdate_Notification& a, CRemoteClient_UnregisterStatusUpdate_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CRemoteClient_UnregisterStatusUpdate_Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CRemoteClient_UnregisterStatusUpdate_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CRemoteClient_UnregisterStatusUpdate_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CRemoteClient_UnregisterStatusUpdate_Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CRemoteClient_UnregisterStatusUpdate_Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CRemoteClient_UnregisterStatusUpdate_Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CRemoteClient_UnregisterStatusUpdate_Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRemoteClient_UnregisterStatusUpdate_Notification";
  }
  protected:
  explicit CRemoteClient_UnregisterStatusUpdate_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 1,
    kSteamidFieldNumber = 2,
  };
  // optional fixed64 session_id = 1;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  uint64_t session_id() const;
  void set_session_id(uint64_t value);
  private:
  uint64_t _internal_session_id() const;
  void _internal_set_session_id(uint64_t value);
  public:

  // optional fixed64 steamid = 2;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CRemoteClient_UnregisterStatusUpdate_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t session_id_;
  uint64_t steamid_;
  friend struct ::TableStruct_steammessages_5fremoteclient_5fservice_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class CRemoteClient_Online_Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRemoteClient_Online_Notification) */ {
 public:
  inline CRemoteClient_Online_Notification() : CRemoteClient_Online_Notification(nullptr) {}
  ~CRemoteClient_Online_Notification() override;
  explicit constexpr CRemoteClient_Online_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CRemoteClient_Online_Notification(const CRemoteClient_Online_Notification& from);
  CRemoteClient_Online_Notification(CRemoteClient_Online_Notification&& from) noexcept
    : CRemoteClient_Online_Notification() {
    *this = ::std::move(from);
  }

  inline CRemoteClient_Online_Notification& operator=(const CRemoteClient_Online_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CRemoteClient_Online_Notification& operator=(CRemoteClient_Online_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CRemoteClient_Online_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CRemoteClient_Online_Notification* internal_default_instance() {
    return reinterpret_cast<const CRemoteClient_Online_Notification*>(
               &_CRemoteClient_Online_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CRemoteClient_Online_Notification& a, CRemoteClient_Online_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CRemoteClient_Online_Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CRemoteClient_Online_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CRemoteClient_Online_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CRemoteClient_Online_Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CRemoteClient_Online_Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CRemoteClient_Online_Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CRemoteClient_Online_Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRemoteClient_Online_Notification";
  }
  protected:
  explicit CRemoteClient_Online_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidFieldNumber = 1,
    kRemoteClientIdFieldNumber = 2,
  };
  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional fixed64 remote_client_id = 2;
  bool has_remote_client_id() const;
  private:
  bool _internal_has_remote_client_id() const;
  public:
  void clear_remote_client_id();
  uint64_t remote_client_id() const;
  void set_remote_client_id(uint64_t value);
  private:
  uint64_t _internal_remote_client_id() const;
  void _internal_set_remote_client_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CRemoteClient_Online_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t steamid_;
  uint64_t remote_client_id_;
  friend struct ::TableStruct_steammessages_5fremoteclient_5fservice_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class CRemoteClient_RemotePacket_Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRemoteClient_RemotePacket_Notification) */ {
 public:
  inline CRemoteClient_RemotePacket_Notification() : CRemoteClient_RemotePacket_Notification(nullptr) {}
  ~CRemoteClient_RemotePacket_Notification() override;
  explicit constexpr CRemoteClient_RemotePacket_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CRemoteClient_RemotePacket_Notification(const CRemoteClient_RemotePacket_Notification& from);
  CRemoteClient_RemotePacket_Notification(CRemoteClient_RemotePacket_Notification&& from) noexcept
    : CRemoteClient_RemotePacket_Notification() {
    *this = ::std::move(from);
  }

  inline CRemoteClient_RemotePacket_Notification& operator=(const CRemoteClient_RemotePacket_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CRemoteClient_RemotePacket_Notification& operator=(CRemoteClient_RemotePacket_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CRemoteClient_RemotePacket_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CRemoteClient_RemotePacket_Notification* internal_default_instance() {
    return reinterpret_cast<const CRemoteClient_RemotePacket_Notification*>(
               &_CRemoteClient_RemotePacket_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CRemoteClient_RemotePacket_Notification& a, CRemoteClient_RemotePacket_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CRemoteClient_RemotePacket_Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CRemoteClient_RemotePacket_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CRemoteClient_RemotePacket_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CRemoteClient_RemotePacket_Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CRemoteClient_RemotePacket_Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CRemoteClient_RemotePacket_Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CRemoteClient_RemotePacket_Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRemoteClient_RemotePacket_Notification";
  }
  protected:
  explicit CRemoteClient_RemotePacket_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 4,
    kSessionIdFieldNumber = 1,
    kSteamidFieldNumber = 2,
  };
  // optional bytes payload = 4;
  bool has_payload() const;
  private:
  bool _internal_has_payload() const;
  public:
  void clear_payload();
  const std::string& payload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payload();
  PROTOBUF_NODISCARD std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // optional fixed64 session_id = 1;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  uint64_t session_id() const;
  void set_session_id(uint64_t value);
  private:
  uint64_t _internal_session_id() const;
  void _internal_set_session_id(uint64_t value);
  public:

  // optional fixed64 steamid = 2;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CRemoteClient_RemotePacket_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  uint64_t session_id_;
  uint64_t steamid_;
  friend struct ::TableStruct_steammessages_5fremoteclient_5fservice_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class CRemoteClient_ReplyPacket_Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRemoteClient_ReplyPacket_Notification) */ {
 public:
  inline CRemoteClient_ReplyPacket_Notification() : CRemoteClient_ReplyPacket_Notification(nullptr) {}
  ~CRemoteClient_ReplyPacket_Notification() override;
  explicit constexpr CRemoteClient_ReplyPacket_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CRemoteClient_ReplyPacket_Notification(const CRemoteClient_ReplyPacket_Notification& from);
  CRemoteClient_ReplyPacket_Notification(CRemoteClient_ReplyPacket_Notification&& from) noexcept
    : CRemoteClient_ReplyPacket_Notification() {
    *this = ::std::move(from);
  }

  inline CRemoteClient_ReplyPacket_Notification& operator=(const CRemoteClient_ReplyPacket_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CRemoteClient_ReplyPacket_Notification& operator=(CRemoteClient_ReplyPacket_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CRemoteClient_ReplyPacket_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CRemoteClient_ReplyPacket_Notification* internal_default_instance() {
    return reinterpret_cast<const CRemoteClient_ReplyPacket_Notification*>(
               &_CRemoteClient_ReplyPacket_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CRemoteClient_ReplyPacket_Notification& a, CRemoteClient_ReplyPacket_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CRemoteClient_ReplyPacket_Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CRemoteClient_ReplyPacket_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CRemoteClient_ReplyPacket_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CRemoteClient_ReplyPacket_Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CRemoteClient_ReplyPacket_Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CRemoteClient_ReplyPacket_Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CRemoteClient_ReplyPacket_Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRemoteClient_ReplyPacket_Notification";
  }
  protected:
  explicit CRemoteClient_ReplyPacket_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 2,
    kSessionIdFieldNumber = 1,
  };
  // optional bytes payload = 2;
  bool has_payload() const;
  private:
  bool _internal_has_payload() const;
  public:
  void clear_payload();
  const std::string& payload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payload();
  PROTOBUF_NODISCARD std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // optional fixed64 session_id = 1;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  uint64_t session_id() const;
  void set_session_id(uint64_t value);
  private:
  uint64_t _internal_session_id() const;
  void _internal_set_session_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CRemoteClient_ReplyPacket_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  uint64_t session_id_;
  friend struct ::TableStruct_steammessages_5fremoteclient_5fservice_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class CRemoteClient_GetReplies_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRemoteClient_GetReplies_Request) */ {
 public:
  inline CRemoteClient_GetReplies_Request() : CRemoteClient_GetReplies_Request(nullptr) {}
  ~CRemoteClient_GetReplies_Request() override;
  explicit constexpr CRemoteClient_GetReplies_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CRemoteClient_GetReplies_Request(const CRemoteClient_GetReplies_Request& from);
  CRemoteClient_GetReplies_Request(CRemoteClient_GetReplies_Request&& from) noexcept
    : CRemoteClient_GetReplies_Request() {
    *this = ::std::move(from);
  }

  inline CRemoteClient_GetReplies_Request& operator=(const CRemoteClient_GetReplies_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CRemoteClient_GetReplies_Request& operator=(CRemoteClient_GetReplies_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CRemoteClient_GetReplies_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CRemoteClient_GetReplies_Request* internal_default_instance() {
    return reinterpret_cast<const CRemoteClient_GetReplies_Request*>(
               &_CRemoteClient_GetReplies_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CRemoteClient_GetReplies_Request& a, CRemoteClient_GetReplies_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CRemoteClient_GetReplies_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CRemoteClient_GetReplies_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CRemoteClient_GetReplies_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CRemoteClient_GetReplies_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CRemoteClient_GetReplies_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CRemoteClient_GetReplies_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CRemoteClient_GetReplies_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRemoteClient_GetReplies_Request";
  }
  protected:
  explicit CRemoteClient_GetReplies_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 1,
  };
  // optional fixed64 session_id = 1;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  uint64_t session_id() const;
  void set_session_id(uint64_t value);
  private:
  uint64_t _internal_session_id() const;
  void _internal_set_session_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CRemoteClient_GetReplies_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t session_id_;
  friend struct ::TableStruct_steammessages_5fremoteclient_5fservice_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class CRemoteClient_GetReplies_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRemoteClient_GetReplies_Response) */ {
 public:
  inline CRemoteClient_GetReplies_Response() : CRemoteClient_GetReplies_Response(nullptr) {}
  ~CRemoteClient_GetReplies_Response() override;
  explicit constexpr CRemoteClient_GetReplies_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CRemoteClient_GetReplies_Response(const CRemoteClient_GetReplies_Response& from);
  CRemoteClient_GetReplies_Response(CRemoteClient_GetReplies_Response&& from) noexcept
    : CRemoteClient_GetReplies_Response() {
    *this = ::std::move(from);
  }

  inline CRemoteClient_GetReplies_Response& operator=(const CRemoteClient_GetReplies_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CRemoteClient_GetReplies_Response& operator=(CRemoteClient_GetReplies_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CRemoteClient_GetReplies_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CRemoteClient_GetReplies_Response* internal_default_instance() {
    return reinterpret_cast<const CRemoteClient_GetReplies_Response*>(
               &_CRemoteClient_GetReplies_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CRemoteClient_GetReplies_Response& a, CRemoteClient_GetReplies_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CRemoteClient_GetReplies_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CRemoteClient_GetReplies_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CRemoteClient_GetReplies_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CRemoteClient_GetReplies_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CRemoteClient_GetReplies_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CRemoteClient_GetReplies_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CRemoteClient_GetReplies_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRemoteClient_GetReplies_Response";
  }
  protected:
  explicit CRemoteClient_GetReplies_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 1,
  };
  // repeated bytes payload = 1;
  int payload_size() const;
  private:
  int _internal_payload_size() const;
  public:
  void clear_payload();
  const std::string& payload(int index) const;
  std::string* mutable_payload(int index);
  void set_payload(int index, const std::string& value);
  void set_payload(int index, std::string&& value);
  void set_payload(int index, const char* value);
  void set_payload(int index, const void* value, size_t size);
  std::string* add_payload();
  void add_payload(const std::string& value);
  void add_payload(std::string&& value);
  void add_payload(const char* value);
  void add_payload(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& payload() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_payload();
  private:
  const std::string& _internal_payload(int index) const;
  std::string* _internal_add_payload();
  public:

  // @@protoc_insertion_point(class_scope:CRemoteClient_GetReplies_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> payload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fremoteclient_5fservice_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class CRemoteClient_AllocateTURNServer_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRemoteClient_AllocateTURNServer_Request) */ {
 public:
  inline CRemoteClient_AllocateTURNServer_Request() : CRemoteClient_AllocateTURNServer_Request(nullptr) {}
  ~CRemoteClient_AllocateTURNServer_Request() override;
  explicit constexpr CRemoteClient_AllocateTURNServer_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CRemoteClient_AllocateTURNServer_Request(const CRemoteClient_AllocateTURNServer_Request& from);
  CRemoteClient_AllocateTURNServer_Request(CRemoteClient_AllocateTURNServer_Request&& from) noexcept
    : CRemoteClient_AllocateTURNServer_Request() {
    *this = ::std::move(from);
  }

  inline CRemoteClient_AllocateTURNServer_Request& operator=(const CRemoteClient_AllocateTURNServer_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CRemoteClient_AllocateTURNServer_Request& operator=(CRemoteClient_AllocateTURNServer_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CRemoteClient_AllocateTURNServer_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CRemoteClient_AllocateTURNServer_Request* internal_default_instance() {
    return reinterpret_cast<const CRemoteClient_AllocateTURNServer_Request*>(
               &_CRemoteClient_AllocateTURNServer_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CRemoteClient_AllocateTURNServer_Request& a, CRemoteClient_AllocateTURNServer_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CRemoteClient_AllocateTURNServer_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CRemoteClient_AllocateTURNServer_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CRemoteClient_AllocateTURNServer_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CRemoteClient_AllocateTURNServer_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CRemoteClient_AllocateTURNServer_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CRemoteClient_AllocateTURNServer_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CRemoteClient_AllocateTURNServer_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRemoteClient_AllocateTURNServer_Request";
  }
  protected:
  explicit CRemoteClient_AllocateTURNServer_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCredentialsFieldNumber = 2,
    kCellidFieldNumber = 1,
  };
  // optional string credentials = 2;
  bool has_credentials() const;
  private:
  bool _internal_has_credentials() const;
  public:
  void clear_credentials();
  const std::string& credentials() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_credentials(ArgT0&& arg0, ArgT... args);
  std::string* mutable_credentials();
  PROTOBUF_NODISCARD std::string* release_credentials();
  void set_allocated_credentials(std::string* credentials);
  private:
  const std::string& _internal_credentials() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_credentials(const std::string& value);
  std::string* _internal_mutable_credentials();
  public:

  // optional uint32 cellid = 1;
  bool has_cellid() const;
  private:
  bool _internal_has_cellid() const;
  public:
  void clear_cellid();
  uint32_t cellid() const;
  void set_cellid(uint32_t value);
  private:
  uint32_t _internal_cellid() const;
  void _internal_set_cellid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CRemoteClient_AllocateTURNServer_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr credentials_;
  uint32_t cellid_;
  friend struct ::TableStruct_steammessages_5fremoteclient_5fservice_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class CRemoteClient_AllocateTURNServer_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRemoteClient_AllocateTURNServer_Response) */ {
 public:
  inline CRemoteClient_AllocateTURNServer_Response() : CRemoteClient_AllocateTURNServer_Response(nullptr) {}
  ~CRemoteClient_AllocateTURNServer_Response() override;
  explicit constexpr CRemoteClient_AllocateTURNServer_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CRemoteClient_AllocateTURNServer_Response(const CRemoteClient_AllocateTURNServer_Response& from);
  CRemoteClient_AllocateTURNServer_Response(CRemoteClient_AllocateTURNServer_Response&& from) noexcept
    : CRemoteClient_AllocateTURNServer_Response() {
    *this = ::std::move(from);
  }

  inline CRemoteClient_AllocateTURNServer_Response& operator=(const CRemoteClient_AllocateTURNServer_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CRemoteClient_AllocateTURNServer_Response& operator=(CRemoteClient_AllocateTURNServer_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CRemoteClient_AllocateTURNServer_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CRemoteClient_AllocateTURNServer_Response* internal_default_instance() {
    return reinterpret_cast<const CRemoteClient_AllocateTURNServer_Response*>(
               &_CRemoteClient_AllocateTURNServer_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CRemoteClient_AllocateTURNServer_Response& a, CRemoteClient_AllocateTURNServer_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CRemoteClient_AllocateTURNServer_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CRemoteClient_AllocateTURNServer_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CRemoteClient_AllocateTURNServer_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CRemoteClient_AllocateTURNServer_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CRemoteClient_AllocateTURNServer_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CRemoteClient_AllocateTURNServer_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CRemoteClient_AllocateTURNServer_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRemoteClient_AllocateTURNServer_Response";
  }
  protected:
  explicit CRemoteClient_AllocateTURNServer_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTurnServerFieldNumber = 1,
  };
  // optional string turn_server = 1;
  bool has_turn_server() const;
  private:
  bool _internal_has_turn_server() const;
  public:
  void clear_turn_server();
  const std::string& turn_server() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_turn_server(ArgT0&& arg0, ArgT... args);
  std::string* mutable_turn_server();
  PROTOBUF_NODISCARD std::string* release_turn_server();
  void set_allocated_turn_server(std::string* turn_server);
  private:
  const std::string& _internal_turn_server() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_turn_server(const std::string& value);
  std::string* _internal_mutable_turn_server();
  public:

  // @@protoc_insertion_point(class_scope:CRemoteClient_AllocateTURNServer_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr turn_server_;
  friend struct ::TableStruct_steammessages_5fremoteclient_5fservice_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class CRemoteClient_AllocateRelayServer_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRemoteClient_AllocateRelayServer_Request) */ {
 public:
  inline CRemoteClient_AllocateRelayServer_Request() : CRemoteClient_AllocateRelayServer_Request(nullptr) {}
  ~CRemoteClient_AllocateRelayServer_Request() override;
  explicit constexpr CRemoteClient_AllocateRelayServer_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CRemoteClient_AllocateRelayServer_Request(const CRemoteClient_AllocateRelayServer_Request& from);
  CRemoteClient_AllocateRelayServer_Request(CRemoteClient_AllocateRelayServer_Request&& from) noexcept
    : CRemoteClient_AllocateRelayServer_Request() {
    *this = ::std::move(from);
  }

  inline CRemoteClient_AllocateRelayServer_Request& operator=(const CRemoteClient_AllocateRelayServer_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CRemoteClient_AllocateRelayServer_Request& operator=(CRemoteClient_AllocateRelayServer_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CRemoteClient_AllocateRelayServer_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CRemoteClient_AllocateRelayServer_Request* internal_default_instance() {
    return reinterpret_cast<const CRemoteClient_AllocateRelayServer_Request*>(
               &_CRemoteClient_AllocateRelayServer_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CRemoteClient_AllocateRelayServer_Request& a, CRemoteClient_AllocateRelayServer_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CRemoteClient_AllocateRelayServer_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CRemoteClient_AllocateRelayServer_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CRemoteClient_AllocateRelayServer_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CRemoteClient_AllocateRelayServer_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CRemoteClient_AllocateRelayServer_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CRemoteClient_AllocateRelayServer_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CRemoteClient_AllocateRelayServer_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRemoteClient_AllocateRelayServer_Request";
  }
  protected:
  explicit CRemoteClient_AllocateRelayServer_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCredentialsFieldNumber = 2,
    kCellidFieldNumber = 1,
  };
  // optional string credentials = 2;
  bool has_credentials() const;
  private:
  bool _internal_has_credentials() const;
  public:
  void clear_credentials();
  const std::string& credentials() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_credentials(ArgT0&& arg0, ArgT... args);
  std::string* mutable_credentials();
  PROTOBUF_NODISCARD std::string* release_credentials();
  void set_allocated_credentials(std::string* credentials);
  private:
  const std::string& _internal_credentials() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_credentials(const std::string& value);
  std::string* _internal_mutable_credentials();
  public:

  // optional uint32 cellid = 1;
  bool has_cellid() const;
  private:
  bool _internal_has_cellid() const;
  public:
  void clear_cellid();
  uint32_t cellid() const;
  void set_cellid(uint32_t value);
  private:
  uint32_t _internal_cellid() const;
  void _internal_set_cellid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CRemoteClient_AllocateRelayServer_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr credentials_;
  uint32_t cellid_;
  friend struct ::TableStruct_steammessages_5fremoteclient_5fservice_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class CRemoteClient_AllocateRelayServer_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRemoteClient_AllocateRelayServer_Response) */ {
 public:
  inline CRemoteClient_AllocateRelayServer_Response() : CRemoteClient_AllocateRelayServer_Response(nullptr) {}
  ~CRemoteClient_AllocateRelayServer_Response() override;
  explicit constexpr CRemoteClient_AllocateRelayServer_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CRemoteClient_AllocateRelayServer_Response(const CRemoteClient_AllocateRelayServer_Response& from);
  CRemoteClient_AllocateRelayServer_Response(CRemoteClient_AllocateRelayServer_Response&& from) noexcept
    : CRemoteClient_AllocateRelayServer_Response() {
    *this = ::std::move(from);
  }

  inline CRemoteClient_AllocateRelayServer_Response& operator=(const CRemoteClient_AllocateRelayServer_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CRemoteClient_AllocateRelayServer_Response& operator=(CRemoteClient_AllocateRelayServer_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CRemoteClient_AllocateRelayServer_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CRemoteClient_AllocateRelayServer_Response* internal_default_instance() {
    return reinterpret_cast<const CRemoteClient_AllocateRelayServer_Response*>(
               &_CRemoteClient_AllocateRelayServer_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CRemoteClient_AllocateRelayServer_Response& a, CRemoteClient_AllocateRelayServer_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CRemoteClient_AllocateRelayServer_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CRemoteClient_AllocateRelayServer_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CRemoteClient_AllocateRelayServer_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CRemoteClient_AllocateRelayServer_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CRemoteClient_AllocateRelayServer_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CRemoteClient_AllocateRelayServer_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CRemoteClient_AllocateRelayServer_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRemoteClient_AllocateRelayServer_Response";
  }
  protected:
  explicit CRemoteClient_AllocateRelayServer_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRelayServerFieldNumber = 1,
  };
  // optional string relay_server = 1;
  bool has_relay_server() const;
  private:
  bool _internal_has_relay_server() const;
  public:
  void clear_relay_server();
  const std::string& relay_server() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_relay_server(ArgT0&& arg0, ArgT... args);
  std::string* mutable_relay_server();
  PROTOBUF_NODISCARD std::string* release_relay_server();
  void set_allocated_relay_server(std::string* relay_server);
  private:
  const std::string& _internal_relay_server() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_relay_server(const std::string& value);
  std::string* _internal_mutable_relay_server();
  public:

  // @@protoc_insertion_point(class_scope:CRemoteClient_AllocateRelayServer_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr relay_server_;
  friend struct ::TableStruct_steammessages_5fremoteclient_5fservice_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class CRemoteClient_AllocateSDR_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRemoteClient_AllocateSDR_Request) */ {
 public:
  inline CRemoteClient_AllocateSDR_Request() : CRemoteClient_AllocateSDR_Request(nullptr) {}
  ~CRemoteClient_AllocateSDR_Request() override;
  explicit constexpr CRemoteClient_AllocateSDR_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CRemoteClient_AllocateSDR_Request(const CRemoteClient_AllocateSDR_Request& from);
  CRemoteClient_AllocateSDR_Request(CRemoteClient_AllocateSDR_Request&& from) noexcept
    : CRemoteClient_AllocateSDR_Request() {
    *this = ::std::move(from);
  }

  inline CRemoteClient_AllocateSDR_Request& operator=(const CRemoteClient_AllocateSDR_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CRemoteClient_AllocateSDR_Request& operator=(CRemoteClient_AllocateSDR_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CRemoteClient_AllocateSDR_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CRemoteClient_AllocateSDR_Request* internal_default_instance() {
    return reinterpret_cast<const CRemoteClient_AllocateSDR_Request*>(
               &_CRemoteClient_AllocateSDR_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CRemoteClient_AllocateSDR_Request& a, CRemoteClient_AllocateSDR_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CRemoteClient_AllocateSDR_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CRemoteClient_AllocateSDR_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CRemoteClient_AllocateSDR_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CRemoteClient_AllocateSDR_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CRemoteClient_AllocateSDR_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CRemoteClient_AllocateSDR_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CRemoteClient_AllocateSDR_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRemoteClient_AllocateSDR_Request";
  }
  protected:
  explicit CRemoteClient_AllocateSDR_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppidFieldNumber = 1,
  };
  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CRemoteClient_AllocateSDR_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t appid_;
  friend struct ::TableStruct_steammessages_5fremoteclient_5fservice_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class CRemoteClient_AllocateSDR_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CRemoteClient_AllocateSDR_Response) */ {
 public:
  inline CRemoteClient_AllocateSDR_Response() : CRemoteClient_AllocateSDR_Response(nullptr) {}
  explicit constexpr CRemoteClient_AllocateSDR_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CRemoteClient_AllocateSDR_Response(const CRemoteClient_AllocateSDR_Response& from);
  CRemoteClient_AllocateSDR_Response(CRemoteClient_AllocateSDR_Response&& from) noexcept
    : CRemoteClient_AllocateSDR_Response() {
    *this = ::std::move(from);
  }

  inline CRemoteClient_AllocateSDR_Response& operator=(const CRemoteClient_AllocateSDR_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CRemoteClient_AllocateSDR_Response& operator=(CRemoteClient_AllocateSDR_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CRemoteClient_AllocateSDR_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CRemoteClient_AllocateSDR_Response* internal_default_instance() {
    return reinterpret_cast<const CRemoteClient_AllocateSDR_Response*>(
               &_CRemoteClient_AllocateSDR_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CRemoteClient_AllocateSDR_Response& a, CRemoteClient_AllocateSDR_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CRemoteClient_AllocateSDR_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CRemoteClient_AllocateSDR_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CRemoteClient_AllocateSDR_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CRemoteClient_AllocateSDR_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CRemoteClient_AllocateSDR_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CRemoteClient_AllocateSDR_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRemoteClient_AllocateSDR_Response";
  }
  protected:
  explicit CRemoteClient_AllocateSDR_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CRemoteClient_AllocateSDR_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fremoteclient_5fservice_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class CRemoteClient_SteamBroadcast_Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRemoteClient_SteamBroadcast_Notification) */ {
 public:
  inline CRemoteClient_SteamBroadcast_Notification() : CRemoteClient_SteamBroadcast_Notification(nullptr) {}
  ~CRemoteClient_SteamBroadcast_Notification() override;
  explicit constexpr CRemoteClient_SteamBroadcast_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CRemoteClient_SteamBroadcast_Notification(const CRemoteClient_SteamBroadcast_Notification& from);
  CRemoteClient_SteamBroadcast_Notification(CRemoteClient_SteamBroadcast_Notification&& from) noexcept
    : CRemoteClient_SteamBroadcast_Notification() {
    *this = ::std::move(from);
  }

  inline CRemoteClient_SteamBroadcast_Notification& operator=(const CRemoteClient_SteamBroadcast_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CRemoteClient_SteamBroadcast_Notification& operator=(CRemoteClient_SteamBroadcast_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CRemoteClient_SteamBroadcast_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CRemoteClient_SteamBroadcast_Notification* internal_default_instance() {
    return reinterpret_cast<const CRemoteClient_SteamBroadcast_Notification*>(
               &_CRemoteClient_SteamBroadcast_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(CRemoteClient_SteamBroadcast_Notification& a, CRemoteClient_SteamBroadcast_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CRemoteClient_SteamBroadcast_Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CRemoteClient_SteamBroadcast_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CRemoteClient_SteamBroadcast_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CRemoteClient_SteamBroadcast_Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CRemoteClient_SteamBroadcast_Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CRemoteClient_SteamBroadcast_Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CRemoteClient_SteamBroadcast_Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRemoteClient_SteamBroadcast_Notification";
  }
  protected:
  explicit CRemoteClient_SteamBroadcast_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 3,
    kSteamidFieldNumber = 1,
    kClientidFieldNumber = 2,
  };
  // optional bytes payload = 3;
  bool has_payload() const;
  private:
  bool _internal_has_payload() const;
  public:
  void clear_payload();
  const std::string& payload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payload();
  PROTOBUF_NODISCARD std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional fixed64 clientid = 2;
  bool has_clientid() const;
  private:
  bool _internal_has_clientid() const;
  public:
  void clear_clientid();
  uint64_t clientid() const;
  void set_clientid(uint64_t value);
  private:
  uint64_t _internal_clientid() const;
  void _internal_set_clientid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CRemoteClient_SteamBroadcast_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  uint64_t steamid_;
  uint64_t clientid_;
  friend struct ::TableStruct_steammessages_5fremoteclient_5fservice_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class CRemoteClient_SteamToSteam_Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRemoteClient_SteamToSteam_Notification) */ {
 public:
  inline CRemoteClient_SteamToSteam_Notification() : CRemoteClient_SteamToSteam_Notification(nullptr) {}
  ~CRemoteClient_SteamToSteam_Notification() override;
  explicit constexpr CRemoteClient_SteamToSteam_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CRemoteClient_SteamToSteam_Notification(const CRemoteClient_SteamToSteam_Notification& from);
  CRemoteClient_SteamToSteam_Notification(CRemoteClient_SteamToSteam_Notification&& from) noexcept
    : CRemoteClient_SteamToSteam_Notification() {
    *this = ::std::move(from);
  }

  inline CRemoteClient_SteamToSteam_Notification& operator=(const CRemoteClient_SteamToSteam_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CRemoteClient_SteamToSteam_Notification& operator=(CRemoteClient_SteamToSteam_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CRemoteClient_SteamToSteam_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CRemoteClient_SteamToSteam_Notification* internal_default_instance() {
    return reinterpret_cast<const CRemoteClient_SteamToSteam_Notification*>(
               &_CRemoteClient_SteamToSteam_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(CRemoteClient_SteamToSteam_Notification& a, CRemoteClient_SteamToSteam_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CRemoteClient_SteamToSteam_Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CRemoteClient_SteamToSteam_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CRemoteClient_SteamToSteam_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CRemoteClient_SteamToSteam_Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CRemoteClient_SteamToSteam_Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CRemoteClient_SteamToSteam_Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CRemoteClient_SteamToSteam_Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRemoteClient_SteamToSteam_Notification";
  }
  protected:
  explicit CRemoteClient_SteamToSteam_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncryptedPayloadFieldNumber = 5,
    kSteamidFieldNumber = 1,
    kSrcClientidFieldNumber = 2,
    kDstClientidFieldNumber = 3,
    kSecretidFieldNumber = 4,
  };
  // optional bytes encrypted_payload = 5;
  bool has_encrypted_payload() const;
  private:
  bool _internal_has_encrypted_payload() const;
  public:
  void clear_encrypted_payload();
  const std::string& encrypted_payload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_encrypted_payload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_encrypted_payload();
  PROTOBUF_NODISCARD std::string* release_encrypted_payload();
  void set_allocated_encrypted_payload(std::string* encrypted_payload);
  private:
  const std::string& _internal_encrypted_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encrypted_payload(const std::string& value);
  std::string* _internal_mutable_encrypted_payload();
  public:

  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional fixed64 src_clientid = 2;
  bool has_src_clientid() const;
  private:
  bool _internal_has_src_clientid() const;
  public:
  void clear_src_clientid();
  uint64_t src_clientid() const;
  void set_src_clientid(uint64_t value);
  private:
  uint64_t _internal_src_clientid() const;
  void _internal_set_src_clientid(uint64_t value);
  public:

  // optional fixed64 dst_clientid = 3;
  bool has_dst_clientid() const;
  private:
  bool _internal_has_dst_clientid() const;
  public:
  void clear_dst_clientid();
  uint64_t dst_clientid() const;
  void set_dst_clientid(uint64_t value);
  private:
  uint64_t _internal_dst_clientid() const;
  void _internal_set_dst_clientid(uint64_t value);
  public:

  // optional uint32 secretid = 4;
  bool has_secretid() const;
  private:
  bool _internal_has_secretid() const;
  public:
  void clear_secretid();
  uint32_t secretid() const;
  void set_secretid(uint32_t value);
  private:
  uint32_t _internal_secretid() const;
  void _internal_set_secretid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CRemoteClient_SteamToSteam_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encrypted_payload_;
  uint64_t steamid_;
  uint64_t src_clientid_;
  uint64_t dst_clientid_;
  uint32_t secretid_;
  friend struct ::TableStruct_steammessages_5fremoteclient_5fservice_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class CRemotePlay_SessionStarted_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRemotePlay_SessionStarted_Request) */ {
 public:
  inline CRemotePlay_SessionStarted_Request() : CRemotePlay_SessionStarted_Request(nullptr) {}
  ~CRemotePlay_SessionStarted_Request() override;
  explicit constexpr CRemotePlay_SessionStarted_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CRemotePlay_SessionStarted_Request(const CRemotePlay_SessionStarted_Request& from);
  CRemotePlay_SessionStarted_Request(CRemotePlay_SessionStarted_Request&& from) noexcept
    : CRemotePlay_SessionStarted_Request() {
    *this = ::std::move(from);
  }

  inline CRemotePlay_SessionStarted_Request& operator=(const CRemotePlay_SessionStarted_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CRemotePlay_SessionStarted_Request& operator=(CRemotePlay_SessionStarted_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CRemotePlay_SessionStarted_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CRemotePlay_SessionStarted_Request* internal_default_instance() {
    return reinterpret_cast<const CRemotePlay_SessionStarted_Request*>(
               &_CRemotePlay_SessionStarted_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(CRemotePlay_SessionStarted_Request& a, CRemotePlay_SessionStarted_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CRemotePlay_SessionStarted_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CRemotePlay_SessionStarted_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CRemotePlay_SessionStarted_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CRemotePlay_SessionStarted_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CRemotePlay_SessionStarted_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CRemotePlay_SessionStarted_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CRemotePlay_SessionStarted_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRemotePlay_SessionStarted_Request";
  }
  protected:
  explicit CRemotePlay_SessionStarted_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostAccountIdFieldNumber = 1,
    kClientAccountIdFieldNumber = 2,
    kAppidFieldNumber = 3,
    kDeviceFormFactorFieldNumber = 4,
    kRemotePlayTogetherFieldNumber = 5,
    kGuestSessionFieldNumber = 6,
  };
  // optional uint32 host_account_id = 1;
  bool has_host_account_id() const;
  private:
  bool _internal_has_host_account_id() const;
  public:
  void clear_host_account_id();
  uint32_t host_account_id() const;
  void set_host_account_id(uint32_t value);
  private:
  uint32_t _internal_host_account_id() const;
  void _internal_set_host_account_id(uint32_t value);
  public:

  // optional uint32 client_account_id = 2;
  bool has_client_account_id() const;
  private:
  bool _internal_has_client_account_id() const;
  public:
  void clear_client_account_id();
  uint32_t client_account_id() const;
  void set_client_account_id(uint32_t value);
  private:
  uint32_t _internal_client_account_id() const;
  void _internal_set_client_account_id(uint32_t value);
  public:

  // optional uint32 appid = 3;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional int32 device_form_factor = 4;
  bool has_device_form_factor() const;
  private:
  bool _internal_has_device_form_factor() const;
  public:
  void clear_device_form_factor();
  int32_t device_form_factor() const;
  void set_device_form_factor(int32_t value);
  private:
  int32_t _internal_device_form_factor() const;
  void _internal_set_device_form_factor(int32_t value);
  public:

  // optional bool remote_play_together = 5;
  bool has_remote_play_together() const;
  private:
  bool _internal_has_remote_play_together() const;
  public:
  void clear_remote_play_together();
  bool remote_play_together() const;
  void set_remote_play_together(bool value);
  private:
  bool _internal_remote_play_together() const;
  void _internal_set_remote_play_together(bool value);
  public:

  // optional bool guest_session = 6;
  bool has_guest_session() const;
  private:
  bool _internal_has_guest_session() const;
  public:
  void clear_guest_session();
  bool guest_session() const;
  void set_guest_session(bool value);
  private:
  bool _internal_guest_session() const;
  void _internal_set_guest_session(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CRemotePlay_SessionStarted_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t host_account_id_;
  uint32_t client_account_id_;
  uint32_t appid_;
  int32_t device_form_factor_;
  bool remote_play_together_;
  bool guest_session_;
  friend struct ::TableStruct_steammessages_5fremoteclient_5fservice_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class CRemotePlay_SessionStarted_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRemotePlay_SessionStarted_Response) */ {
 public:
  inline CRemotePlay_SessionStarted_Response() : CRemotePlay_SessionStarted_Response(nullptr) {}
  ~CRemotePlay_SessionStarted_Response() override;
  explicit constexpr CRemotePlay_SessionStarted_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CRemotePlay_SessionStarted_Response(const CRemotePlay_SessionStarted_Response& from);
  CRemotePlay_SessionStarted_Response(CRemotePlay_SessionStarted_Response&& from) noexcept
    : CRemotePlay_SessionStarted_Response() {
    *this = ::std::move(from);
  }

  inline CRemotePlay_SessionStarted_Response& operator=(const CRemotePlay_SessionStarted_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CRemotePlay_SessionStarted_Response& operator=(CRemotePlay_SessionStarted_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CRemotePlay_SessionStarted_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CRemotePlay_SessionStarted_Response* internal_default_instance() {
    return reinterpret_cast<const CRemotePlay_SessionStarted_Response*>(
               &_CRemotePlay_SessionStarted_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(CRemotePlay_SessionStarted_Response& a, CRemotePlay_SessionStarted_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CRemotePlay_SessionStarted_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CRemotePlay_SessionStarted_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CRemotePlay_SessionStarted_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CRemotePlay_SessionStarted_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CRemotePlay_SessionStarted_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CRemotePlay_SessionStarted_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CRemotePlay_SessionStarted_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRemotePlay_SessionStarted_Response";
  }
  protected:
  explicit CRemotePlay_SessionStarted_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordIdFieldNumber = 1,
  };
  // optional fixed64 record_id = 1;
  bool has_record_id() const;
  private:
  bool _internal_has_record_id() const;
  public:
  void clear_record_id();
  uint64_t record_id() const;
  void set_record_id(uint64_t value);
  private:
  uint64_t _internal_record_id() const;
  void _internal_set_record_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CRemotePlay_SessionStarted_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t record_id_;
  friend struct ::TableStruct_steammessages_5fremoteclient_5fservice_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class CRemotePlay_SessionStopped_Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRemotePlay_SessionStopped_Notification) */ {
 public:
  inline CRemotePlay_SessionStopped_Notification() : CRemotePlay_SessionStopped_Notification(nullptr) {}
  ~CRemotePlay_SessionStopped_Notification() override;
  explicit constexpr CRemotePlay_SessionStopped_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CRemotePlay_SessionStopped_Notification(const CRemotePlay_SessionStopped_Notification& from);
  CRemotePlay_SessionStopped_Notification(CRemotePlay_SessionStopped_Notification&& from) noexcept
    : CRemotePlay_SessionStopped_Notification() {
    *this = ::std::move(from);
  }

  inline CRemotePlay_SessionStopped_Notification& operator=(const CRemotePlay_SessionStopped_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CRemotePlay_SessionStopped_Notification& operator=(CRemotePlay_SessionStopped_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CRemotePlay_SessionStopped_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CRemotePlay_SessionStopped_Notification* internal_default_instance() {
    return reinterpret_cast<const CRemotePlay_SessionStopped_Notification*>(
               &_CRemotePlay_SessionStopped_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(CRemotePlay_SessionStopped_Notification& a, CRemotePlay_SessionStopped_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CRemotePlay_SessionStopped_Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CRemotePlay_SessionStopped_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CRemotePlay_SessionStopped_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CRemotePlay_SessionStopped_Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CRemotePlay_SessionStopped_Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CRemotePlay_SessionStopped_Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CRemotePlay_SessionStopped_Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRemotePlay_SessionStopped_Notification";
  }
  protected:
  explicit CRemotePlay_SessionStopped_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordIdFieldNumber = 1,
    kUsedX264FieldNumber = 2,
    kUsedH264FieldNumber = 3,
    kUsedHevcFieldNumber = 4,
  };
  // optional fixed64 record_id = 1;
  bool has_record_id() const;
  private:
  bool _internal_has_record_id() const;
  public:
  void clear_record_id();
  uint64_t record_id() const;
  void set_record_id(uint64_t value);
  private:
  uint64_t _internal_record_id() const;
  void _internal_set_record_id(uint64_t value);
  public:

  // optional bool used_x264 = 2;
  bool has_used_x264() const;
  private:
  bool _internal_has_used_x264() const;
  public:
  void clear_used_x264();
  bool used_x264() const;
  void set_used_x264(bool value);
  private:
  bool _internal_used_x264() const;
  void _internal_set_used_x264(bool value);
  public:

  // optional bool used_h264 = 3;
  bool has_used_h264() const;
  private:
  bool _internal_has_used_h264() const;
  public:
  void clear_used_h264();
  bool used_h264() const;
  void set_used_h264(bool value);
  private:
  bool _internal_used_h264() const;
  void _internal_set_used_h264(bool value);
  public:

  // optional bool used_hevc = 4;
  bool has_used_hevc() const;
  private:
  bool _internal_has_used_hevc() const;
  public:
  void clear_used_hevc();
  bool used_hevc() const;
  void set_used_hevc(bool value);
  private:
  bool _internal_used_hevc() const;
  void _internal_set_used_hevc(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CRemotePlay_SessionStopped_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t record_id_;
  bool used_x264_;
  bool used_h264_;
  bool used_hevc_;
  friend struct ::TableStruct_steammessages_5fremoteclient_5fservice_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class CRemotePlayTogether_Notification_Player final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRemotePlayTogether_Notification.Player) */ {
 public:
  inline CRemotePlayTogether_Notification_Player() : CRemotePlayTogether_Notification_Player(nullptr) {}
  ~CRemotePlayTogether_Notification_Player() override;
  explicit constexpr CRemotePlayTogether_Notification_Player(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CRemotePlayTogether_Notification_Player(const CRemotePlayTogether_Notification_Player& from);
  CRemotePlayTogether_Notification_Player(CRemotePlayTogether_Notification_Player&& from) noexcept
    : CRemotePlayTogether_Notification_Player() {
    *this = ::std::move(from);
  }

  inline CRemotePlayTogether_Notification_Player& operator=(const CRemotePlayTogether_Notification_Player& from) {
    CopyFrom(from);
    return *this;
  }
  inline CRemotePlayTogether_Notification_Player& operator=(CRemotePlayTogether_Notification_Player&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CRemotePlayTogether_Notification_Player& default_instance() {
    return *internal_default_instance();
  }
  static inline const CRemotePlayTogether_Notification_Player* internal_default_instance() {
    return reinterpret_cast<const CRemotePlayTogether_Notification_Player*>(
               &_CRemotePlayTogether_Notification_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(CRemotePlayTogether_Notification_Player& a, CRemotePlayTogether_Notification_Player& b) {
    a.Swap(&b);
  }
  inline void Swap(CRemotePlayTogether_Notification_Player* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CRemotePlayTogether_Notification_Player* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CRemotePlayTogether_Notification_Player* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CRemotePlayTogether_Notification_Player>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CRemotePlayTogether_Notification_Player& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CRemotePlayTogether_Notification_Player& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CRemotePlayTogether_Notification_Player* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRemotePlayTogether_Notification.Player";
  }
  protected:
  explicit CRemotePlayTogether_Notification_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAvatarHashFieldNumber = 3,
    kSteamidFieldNumber = 1,
    kGuestidFieldNumber = 2,
    kKeyboardEnabledFieldNumber = 4,
    kMouseEnabledFieldNumber = 5,
    kControllerEnabledFieldNumber = 6,
  };
  // optional bytes avatar_hash = 3;
  bool has_avatar_hash() const;
  private:
  bool _internal_has_avatar_hash() const;
  public:
  void clear_avatar_hash();
  const std::string& avatar_hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_avatar_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_avatar_hash();
  PROTOBUF_NODISCARD std::string* release_avatar_hash();
  void set_allocated_avatar_hash(std::string* avatar_hash);
  private:
  const std::string& _internal_avatar_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_avatar_hash(const std::string& value);
  std::string* _internal_mutable_avatar_hash();
  public:

  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional uint32 guestid = 2;
  bool has_guestid() const;
  private:
  bool _internal_has_guestid() const;
  public:
  void clear_guestid();
  uint32_t guestid() const;
  void set_guestid(uint32_t value);
  private:
  uint32_t _internal_guestid() const;
  void _internal_set_guestid(uint32_t value);
  public:

  // optional bool keyboard_enabled = 4;
  bool has_keyboard_enabled() const;
  private:
  bool _internal_has_keyboard_enabled() const;
  public:
  void clear_keyboard_enabled();
  bool keyboard_enabled() const;
  void set_keyboard_enabled(bool value);
  private:
  bool _internal_keyboard_enabled() const;
  void _internal_set_keyboard_enabled(bool value);
  public:

  // optional bool mouse_enabled = 5;
  bool has_mouse_enabled() const;
  private:
  bool _internal_has_mouse_enabled() const;
  public:
  void clear_mouse_enabled();
  bool mouse_enabled() const;
  void set_mouse_enabled(bool value);
  private:
  bool _internal_mouse_enabled() const;
  void _internal_set_mouse_enabled(bool value);
  public:

  // optional bool controller_enabled = 6;
  bool has_controller_enabled() const;
  private:
  bool _internal_has_controller_enabled() const;
  public:
  void clear_controller_enabled();
  bool controller_enabled() const;
  void set_controller_enabled(bool value);
  private:
  bool _internal_controller_enabled() const;
  void _internal_set_controller_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CRemotePlayTogether_Notification.Player)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_hash_;
  uint64_t steamid_;
  uint32_t guestid_;
  bool keyboard_enabled_;
  bool mouse_enabled_;
  bool controller_enabled_;
  friend struct ::TableStruct_steammessages_5fremoteclient_5fservice_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class CRemotePlayTogether_Notification_ControllerSlot_obsolete final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRemotePlayTogether_Notification.ControllerSlot_obsolete) */ {
 public:
  inline CRemotePlayTogether_Notification_ControllerSlot_obsolete() : CRemotePlayTogether_Notification_ControllerSlot_obsolete(nullptr) {}
  ~CRemotePlayTogether_Notification_ControllerSlot_obsolete() override;
  explicit constexpr CRemotePlayTogether_Notification_ControllerSlot_obsolete(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CRemotePlayTogether_Notification_ControllerSlot_obsolete(const CRemotePlayTogether_Notification_ControllerSlot_obsolete& from);
  CRemotePlayTogether_Notification_ControllerSlot_obsolete(CRemotePlayTogether_Notification_ControllerSlot_obsolete&& from) noexcept
    : CRemotePlayTogether_Notification_ControllerSlot_obsolete() {
    *this = ::std::move(from);
  }

  inline CRemotePlayTogether_Notification_ControllerSlot_obsolete& operator=(const CRemotePlayTogether_Notification_ControllerSlot_obsolete& from) {
    CopyFrom(from);
    return *this;
  }
  inline CRemotePlayTogether_Notification_ControllerSlot_obsolete& operator=(CRemotePlayTogether_Notification_ControllerSlot_obsolete&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CRemotePlayTogether_Notification_ControllerSlot_obsolete& default_instance() {
    return *internal_default_instance();
  }
  static inline const CRemotePlayTogether_Notification_ControllerSlot_obsolete* internal_default_instance() {
    return reinterpret_cast<const CRemotePlayTogether_Notification_ControllerSlot_obsolete*>(
               &_CRemotePlayTogether_Notification_ControllerSlot_obsolete_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(CRemotePlayTogether_Notification_ControllerSlot_obsolete& a, CRemotePlayTogether_Notification_ControllerSlot_obsolete& b) {
    a.Swap(&b);
  }
  inline void Swap(CRemotePlayTogether_Notification_ControllerSlot_obsolete* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CRemotePlayTogether_Notification_ControllerSlot_obsolete* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CRemotePlayTogether_Notification_ControllerSlot_obsolete* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CRemotePlayTogether_Notification_ControllerSlot_obsolete>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CRemotePlayTogether_Notification_ControllerSlot_obsolete& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CRemotePlayTogether_Notification_ControllerSlot_obsolete& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CRemotePlayTogether_Notification_ControllerSlot_obsolete* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRemotePlayTogether_Notification.ControllerSlot_obsolete";
  }
  protected:
  explicit CRemotePlayTogether_Notification_ControllerSlot_obsolete(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidFieldNumber = 2,
    kSlotidFieldNumber = 1,
  };
  // optional fixed64 steamid = 2;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional uint32 slotid = 1;
  bool has_slotid() const;
  private:
  bool _internal_has_slotid() const;
  public:
  void clear_slotid();
  uint32_t slotid() const;
  void set_slotid(uint32_t value);
  private:
  uint32_t _internal_slotid() const;
  void _internal_set_slotid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CRemotePlayTogether_Notification.ControllerSlot_obsolete)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t steamid_;
  uint32_t slotid_;
  friend struct ::TableStruct_steammessages_5fremoteclient_5fservice_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class CRemotePlayTogether_Notification_ControllerSlot final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRemotePlayTogether_Notification.ControllerSlot) */ {
 public:
  inline CRemotePlayTogether_Notification_ControllerSlot() : CRemotePlayTogether_Notification_ControllerSlot(nullptr) {}
  ~CRemotePlayTogether_Notification_ControllerSlot() override;
  explicit constexpr CRemotePlayTogether_Notification_ControllerSlot(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CRemotePlayTogether_Notification_ControllerSlot(const CRemotePlayTogether_Notification_ControllerSlot& from);
  CRemotePlayTogether_Notification_ControllerSlot(CRemotePlayTogether_Notification_ControllerSlot&& from) noexcept
    : CRemotePlayTogether_Notification_ControllerSlot() {
    *this = ::std::move(from);
  }

  inline CRemotePlayTogether_Notification_ControllerSlot& operator=(const CRemotePlayTogether_Notification_ControllerSlot& from) {
    CopyFrom(from);
    return *this;
  }
  inline CRemotePlayTogether_Notification_ControllerSlot& operator=(CRemotePlayTogether_Notification_ControllerSlot&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CRemotePlayTogether_Notification_ControllerSlot& default_instance() {
    return *internal_default_instance();
  }
  static inline const CRemotePlayTogether_Notification_ControllerSlot* internal_default_instance() {
    return reinterpret_cast<const CRemotePlayTogether_Notification_ControllerSlot*>(
               &_CRemotePlayTogether_Notification_ControllerSlot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(CRemotePlayTogether_Notification_ControllerSlot& a, CRemotePlayTogether_Notification_ControllerSlot& b) {
    a.Swap(&b);
  }
  inline void Swap(CRemotePlayTogether_Notification_ControllerSlot* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CRemotePlayTogether_Notification_ControllerSlot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CRemotePlayTogether_Notification_ControllerSlot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CRemotePlayTogether_Notification_ControllerSlot>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CRemotePlayTogether_Notification_ControllerSlot& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CRemotePlayTogether_Notification_ControllerSlot& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CRemotePlayTogether_Notification_ControllerSlot* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRemotePlayTogether_Notification.ControllerSlot";
  }
  protected:
  explicit CRemotePlayTogether_Notification_ControllerSlot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 2,
    kSlotidFieldNumber = 1,
    kControllerTypeFieldNumber = 3,
  };
  // optional .CRemotePlayTogether_Notification.Player player = 2;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::CRemotePlayTogether_Notification_Player& player() const;
  PROTOBUF_NODISCARD ::CRemotePlayTogether_Notification_Player* release_player();
  ::CRemotePlayTogether_Notification_Player* mutable_player();
  void set_allocated_player(::CRemotePlayTogether_Notification_Player* player);
  private:
  const ::CRemotePlayTogether_Notification_Player& _internal_player() const;
  ::CRemotePlayTogether_Notification_Player* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::CRemotePlayTogether_Notification_Player* player);
  ::CRemotePlayTogether_Notification_Player* unsafe_arena_release_player();

  // optional uint32 slotid = 1;
  bool has_slotid() const;
  private:
  bool _internal_has_slotid() const;
  public:
  void clear_slotid();
  uint32_t slotid() const;
  void set_slotid(uint32_t value);
  private:
  uint32_t _internal_slotid() const;
  void _internal_set_slotid(uint32_t value);
  public:

  // optional int32 controller_type = 3;
  bool has_controller_type() const;
  private:
  bool _internal_has_controller_type() const;
  public:
  void clear_controller_type();
  int32_t controller_type() const;
  void set_controller_type(int32_t value);
  private:
  int32_t _internal_controller_type() const;
  void _internal_set_controller_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CRemotePlayTogether_Notification.ControllerSlot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CRemotePlayTogether_Notification_Player* player_;
  uint32_t slotid_;
  int32_t controller_type_;
  friend struct ::TableStruct_steammessages_5fremoteclient_5fservice_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class CRemotePlayTogether_Notification_GroupUpdated final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRemotePlayTogether_Notification.GroupUpdated) */ {
 public:
  inline CRemotePlayTogether_Notification_GroupUpdated() : CRemotePlayTogether_Notification_GroupUpdated(nullptr) {}
  ~CRemotePlayTogether_Notification_GroupUpdated() override;
  explicit constexpr CRemotePlayTogether_Notification_GroupUpdated(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CRemotePlayTogether_Notification_GroupUpdated(const CRemotePlayTogether_Notification_GroupUpdated& from);
  CRemotePlayTogether_Notification_GroupUpdated(CRemotePlayTogether_Notification_GroupUpdated&& from) noexcept
    : CRemotePlayTogether_Notification_GroupUpdated() {
    *this = ::std::move(from);
  }

  inline CRemotePlayTogether_Notification_GroupUpdated& operator=(const CRemotePlayTogether_Notification_GroupUpdated& from) {
    CopyFrom(from);
    return *this;
  }
  inline CRemotePlayTogether_Notification_GroupUpdated& operator=(CRemotePlayTogether_Notification_GroupUpdated&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CRemotePlayTogether_Notification_GroupUpdated& default_instance() {
    return *internal_default_instance();
  }
  static inline const CRemotePlayTogether_Notification_GroupUpdated* internal_default_instance() {
    return reinterpret_cast<const CRemotePlayTogether_Notification_GroupUpdated*>(
               &_CRemotePlayTogether_Notification_GroupUpdated_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(CRemotePlayTogether_Notification_GroupUpdated& a, CRemotePlayTogether_Notification_GroupUpdated& b) {
    a.Swap(&b);
  }
  inline void Swap(CRemotePlayTogether_Notification_GroupUpdated* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CRemotePlayTogether_Notification_GroupUpdated* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CRemotePlayTogether_Notification_GroupUpdated* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CRemotePlayTogether_Notification_GroupUpdated>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CRemotePlayTogether_Notification_GroupUpdated& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CRemotePlayTogether_Notification_GroupUpdated& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CRemotePlayTogether_Notification_GroupUpdated* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRemotePlayTogether_Notification.GroupUpdated";
  }
  protected:
  explicit CRemotePlayTogether_Notification_GroupUpdated(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersObsoleteFieldNumber = 3,
    kControllerSlotsObsoleteFieldNumber = 5,
    kPlayerSlotsFieldNumber = 7,
    kControllerSlotsFieldNumber = 8,
    kHostSteamidFieldNumber = 1,
    kHostClientidFieldNumber = 2,
    kHostGameidFieldNumber = 4,
    kHasNewPlayersFieldNumber = 6,
  };
  // repeated fixed64 players_obsolete = 3;
  int players_obsolete_size() const;
  private:
  int _internal_players_obsolete_size() const;
  public:
  void clear_players_obsolete();
  private:
  uint64_t _internal_players_obsolete(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_players_obsolete() const;
  void _internal_add_players_obsolete(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_players_obsolete();
  public:
  uint64_t players_obsolete(int index) const;
  void set_players_obsolete(int index, uint64_t value);
  void add_players_obsolete(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      players_obsolete() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_players_obsolete();

  // repeated .CRemotePlayTogether_Notification.ControllerSlot_obsolete controller_slots_obsolete = 5;
  int controller_slots_obsolete_size() const;
  private:
  int _internal_controller_slots_obsolete_size() const;
  public:
  void clear_controller_slots_obsolete();
  ::CRemotePlayTogether_Notification_ControllerSlot_obsolete* mutable_controller_slots_obsolete(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CRemotePlayTogether_Notification_ControllerSlot_obsolete >*
      mutable_controller_slots_obsolete();
  private:
  const ::CRemotePlayTogether_Notification_ControllerSlot_obsolete& _internal_controller_slots_obsolete(int index) const;
  ::CRemotePlayTogether_Notification_ControllerSlot_obsolete* _internal_add_controller_slots_obsolete();
  public:
  const ::CRemotePlayTogether_Notification_ControllerSlot_obsolete& controller_slots_obsolete(int index) const;
  ::CRemotePlayTogether_Notification_ControllerSlot_obsolete* add_controller_slots_obsolete();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CRemotePlayTogether_Notification_ControllerSlot_obsolete >&
      controller_slots_obsolete() const;

  // repeated .CRemotePlayTogether_Notification.Player player_slots = 7;
  int player_slots_size() const;
  private:
  int _internal_player_slots_size() const;
  public:
  void clear_player_slots();
  ::CRemotePlayTogether_Notification_Player* mutable_player_slots(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CRemotePlayTogether_Notification_Player >*
      mutable_player_slots();
  private:
  const ::CRemotePlayTogether_Notification_Player& _internal_player_slots(int index) const;
  ::CRemotePlayTogether_Notification_Player* _internal_add_player_slots();
  public:
  const ::CRemotePlayTogether_Notification_Player& player_slots(int index) const;
  ::CRemotePlayTogether_Notification_Player* add_player_slots();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CRemotePlayTogether_Notification_Player >&
      player_slots() const;

  // repeated .CRemotePlayTogether_Notification.ControllerSlot controller_slots = 8;
  int controller_slots_size() const;
  private:
  int _internal_controller_slots_size() const;
  public:
  void clear_controller_slots();
  ::CRemotePlayTogether_Notification_ControllerSlot* mutable_controller_slots(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CRemotePlayTogether_Notification_ControllerSlot >*
      mutable_controller_slots();
  private:
  const ::CRemotePlayTogether_Notification_ControllerSlot& _internal_controller_slots(int index) const;
  ::CRemotePlayTogether_Notification_ControllerSlot* _internal_add_controller_slots();
  public:
  const ::CRemotePlayTogether_Notification_ControllerSlot& controller_slots(int index) const;
  ::CRemotePlayTogether_Notification_ControllerSlot* add_controller_slots();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CRemotePlayTogether_Notification_ControllerSlot >&
      controller_slots() const;

  // optional fixed64 host_steamid = 1;
  bool has_host_steamid() const;
  private:
  bool _internal_has_host_steamid() const;
  public:
  void clear_host_steamid();
  uint64_t host_steamid() const;
  void set_host_steamid(uint64_t value);
  private:
  uint64_t _internal_host_steamid() const;
  void _internal_set_host_steamid(uint64_t value);
  public:

  // optional fixed64 host_clientid = 2;
  bool has_host_clientid() const;
  private:
  bool _internal_has_host_clientid() const;
  public:
  void clear_host_clientid();
  uint64_t host_clientid() const;
  void set_host_clientid(uint64_t value);
  private:
  uint64_t _internal_host_clientid() const;
  void _internal_set_host_clientid(uint64_t value);
  public:

  // optional fixed64 host_gameid = 4;
  bool has_host_gameid() const;
  private:
  bool _internal_has_host_gameid() const;
  public:
  void clear_host_gameid();
  uint64_t host_gameid() const;
  void set_host_gameid(uint64_t value);
  private:
  uint64_t _internal_host_gameid() const;
  void _internal_set_host_gameid(uint64_t value);
  public:

  // optional bool has_new_players = 6;
  bool has_has_new_players() const;
  private:
  bool _internal_has_has_new_players() const;
  public:
  void clear_has_new_players();
  bool has_new_players() const;
  void set_has_new_players(bool value);
  private:
  bool _internal_has_new_players() const;
  void _internal_set_has_new_players(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CRemotePlayTogether_Notification.GroupUpdated)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > players_obsolete_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CRemotePlayTogether_Notification_ControllerSlot_obsolete > controller_slots_obsolete_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CRemotePlayTogether_Notification_Player > player_slots_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CRemotePlayTogether_Notification_ControllerSlot > controller_slots_;
  uint64_t host_steamid_;
  uint64_t host_clientid_;
  uint64_t host_gameid_;
  bool has_new_players_;
  friend struct ::TableStruct_steammessages_5fremoteclient_5fservice_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class CRemotePlayTogether_Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRemotePlayTogether_Notification) */ {
 public:
  inline CRemotePlayTogether_Notification() : CRemotePlayTogether_Notification(nullptr) {}
  ~CRemotePlayTogether_Notification() override;
  explicit constexpr CRemotePlayTogether_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CRemotePlayTogether_Notification(const CRemotePlayTogether_Notification& from);
  CRemotePlayTogether_Notification(CRemotePlayTogether_Notification&& from) noexcept
    : CRemotePlayTogether_Notification() {
    *this = ::std::move(from);
  }

  inline CRemotePlayTogether_Notification& operator=(const CRemotePlayTogether_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CRemotePlayTogether_Notification& operator=(CRemotePlayTogether_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CRemotePlayTogether_Notification& default_instance() {
    return *internal_default_instance();
  }
  enum MessageCase {
    kGroupUpdated = 2,
    MESSAGE_NOT_SET = 0,
  };

  static inline const CRemotePlayTogether_Notification* internal_default_instance() {
    return reinterpret_cast<const CRemotePlayTogether_Notification*>(
               &_CRemotePlayTogether_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(CRemotePlayTogether_Notification& a, CRemotePlayTogether_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CRemotePlayTogether_Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CRemotePlayTogether_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CRemotePlayTogether_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CRemotePlayTogether_Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CRemotePlayTogether_Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CRemotePlayTogether_Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CRemotePlayTogether_Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRemotePlayTogether_Notification";
  }
  protected:
  explicit CRemotePlayTogether_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CRemotePlayTogether_Notification_Player Player;
  typedef CRemotePlayTogether_Notification_ControllerSlot_obsolete ControllerSlot_obsolete;
  typedef CRemotePlayTogether_Notification_ControllerSlot ControllerSlot;
  typedef CRemotePlayTogether_Notification_GroupUpdated GroupUpdated;

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidFieldNumber = 1,
    kGroupUpdatedFieldNumber = 2,
  };
  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // .CRemotePlayTogether_Notification.GroupUpdated group_updated = 2;
  bool has_group_updated() const;
  private:
  bool _internal_has_group_updated() const;
  public:
  void clear_group_updated();
  const ::CRemotePlayTogether_Notification_GroupUpdated& group_updated() const;
  PROTOBUF_NODISCARD ::CRemotePlayTogether_Notification_GroupUpdated* release_group_updated();
  ::CRemotePlayTogether_Notification_GroupUpdated* mutable_group_updated();
  void set_allocated_group_updated(::CRemotePlayTogether_Notification_GroupUpdated* group_updated);
  private:
  const ::CRemotePlayTogether_Notification_GroupUpdated& _internal_group_updated() const;
  ::CRemotePlayTogether_Notification_GroupUpdated* _internal_mutable_group_updated();
  public:
  void unsafe_arena_set_allocated_group_updated(
      ::CRemotePlayTogether_Notification_GroupUpdated* group_updated);
  ::CRemotePlayTogether_Notification_GroupUpdated* unsafe_arena_release_group_updated();

  void clear_Message();
  MessageCase Message_case() const;
  // @@protoc_insertion_point(class_scope:CRemotePlayTogether_Notification)
 private:
  class _Internal;
  void set_has_group_updated();

  inline bool has_Message() const;
  inline void clear_has_Message();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t steamid_;
  union MessageUnion {
    constexpr MessageUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::CRemotePlayTogether_Notification_GroupUpdated* group_updated_;
  } Message_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_steammessages_5fremoteclient_5fservice_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class CRemoteClient_CreateRemotePlayTogetherInvitation_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRemoteClient_CreateRemotePlayTogetherInvitation_Request) */ {
 public:
  inline CRemoteClient_CreateRemotePlayTogetherInvitation_Request() : CRemoteClient_CreateRemotePlayTogetherInvitation_Request(nullptr) {}
  ~CRemoteClient_CreateRemotePlayTogetherInvitation_Request() override;
  explicit constexpr CRemoteClient_CreateRemotePlayTogetherInvitation_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CRemoteClient_CreateRemotePlayTogetherInvitation_Request(const CRemoteClient_CreateRemotePlayTogetherInvitation_Request& from);
  CRemoteClient_CreateRemotePlayTogetherInvitation_Request(CRemoteClient_CreateRemotePlayTogetherInvitation_Request&& from) noexcept
    : CRemoteClient_CreateRemotePlayTogetherInvitation_Request() {
    *this = ::std::move(from);
  }

  inline CRemoteClient_CreateRemotePlayTogetherInvitation_Request& operator=(const CRemoteClient_CreateRemotePlayTogetherInvitation_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CRemoteClient_CreateRemotePlayTogetherInvitation_Request& operator=(CRemoteClient_CreateRemotePlayTogetherInvitation_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CRemoteClient_CreateRemotePlayTogetherInvitation_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CRemoteClient_CreateRemotePlayTogetherInvitation_Request* internal_default_instance() {
    return reinterpret_cast<const CRemoteClient_CreateRemotePlayTogetherInvitation_Request*>(
               &_CRemoteClient_CreateRemotePlayTogetherInvitation_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(CRemoteClient_CreateRemotePlayTogetherInvitation_Request& a, CRemoteClient_CreateRemotePlayTogetherInvitation_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CRemoteClient_CreateRemotePlayTogetherInvitation_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CRemoteClient_CreateRemotePlayTogetherInvitation_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CRemoteClient_CreateRemotePlayTogetherInvitation_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CRemoteClient_CreateRemotePlayTogetherInvitation_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CRemoteClient_CreateRemotePlayTogetherInvitation_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CRemoteClient_CreateRemotePlayTogetherInvitation_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CRemoteClient_CreateRemotePlayTogetherInvitation_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRemoteClient_CreateRemotePlayTogetherInvitation_Request";
  }
  protected:
  explicit CRemoteClient_CreateRemotePlayTogetherInvitation_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLaunchParametersFieldNumber = 2,
    kAppidFieldNumber = 1,
  };
  // optional string launch_parameters = 2;
  bool has_launch_parameters() const;
  private:
  bool _internal_has_launch_parameters() const;
  public:
  void clear_launch_parameters();
  const std::string& launch_parameters() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_launch_parameters(ArgT0&& arg0, ArgT... args);
  std::string* mutable_launch_parameters();
  PROTOBUF_NODISCARD std::string* release_launch_parameters();
  void set_allocated_launch_parameters(std::string* launch_parameters);
  private:
  const std::string& _internal_launch_parameters() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_launch_parameters(const std::string& value);
  std::string* _internal_mutable_launch_parameters();
  public:

  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CRemoteClient_CreateRemotePlayTogetherInvitation_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr launch_parameters_;
  uint32_t appid_;
  friend struct ::TableStruct_steammessages_5fremoteclient_5fservice_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class CRemoteClient_CreateRemotePlayTogetherInvitation_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRemoteClient_CreateRemotePlayTogetherInvitation_Response) */ {
 public:
  inline CRemoteClient_CreateRemotePlayTogetherInvitation_Response() : CRemoteClient_CreateRemotePlayTogetherInvitation_Response(nullptr) {}
  ~CRemoteClient_CreateRemotePlayTogetherInvitation_Response() override;
  explicit constexpr CRemoteClient_CreateRemotePlayTogetherInvitation_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CRemoteClient_CreateRemotePlayTogetherInvitation_Response(const CRemoteClient_CreateRemotePlayTogetherInvitation_Response& from);
  CRemoteClient_CreateRemotePlayTogetherInvitation_Response(CRemoteClient_CreateRemotePlayTogetherInvitation_Response&& from) noexcept
    : CRemoteClient_CreateRemotePlayTogetherInvitation_Response() {
    *this = ::std::move(from);
  }

  inline CRemoteClient_CreateRemotePlayTogetherInvitation_Response& operator=(const CRemoteClient_CreateRemotePlayTogetherInvitation_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CRemoteClient_CreateRemotePlayTogetherInvitation_Response& operator=(CRemoteClient_CreateRemotePlayTogetherInvitation_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CRemoteClient_CreateRemotePlayTogetherInvitation_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CRemoteClient_CreateRemotePlayTogetherInvitation_Response* internal_default_instance() {
    return reinterpret_cast<const CRemoteClient_CreateRemotePlayTogetherInvitation_Response*>(
               &_CRemoteClient_CreateRemotePlayTogetherInvitation_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(CRemoteClient_CreateRemotePlayTogetherInvitation_Response& a, CRemoteClient_CreateRemotePlayTogetherInvitation_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CRemoteClient_CreateRemotePlayTogetherInvitation_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CRemoteClient_CreateRemotePlayTogetherInvitation_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CRemoteClient_CreateRemotePlayTogetherInvitation_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CRemoteClient_CreateRemotePlayTogetherInvitation_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CRemoteClient_CreateRemotePlayTogetherInvitation_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CRemoteClient_CreateRemotePlayTogetherInvitation_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CRemoteClient_CreateRemotePlayTogetherInvitation_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRemoteClient_CreateRemotePlayTogetherInvitation_Response";
  }
  protected:
  explicit CRemoteClient_CreateRemotePlayTogetherInvitation_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInvitationCodeFieldNumber = 1,
  };
  // optional string invitation_code = 1;
  bool has_invitation_code() const;
  private:
  bool _internal_has_invitation_code() const;
  public:
  void clear_invitation_code();
  const std::string& invitation_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_invitation_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_invitation_code();
  PROTOBUF_NODISCARD std::string* release_invitation_code();
  void set_allocated_invitation_code(std::string* invitation_code);
  private:
  const std::string& _internal_invitation_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_invitation_code(const std::string& value);
  std::string* _internal_mutable_invitation_code();
  public:

  // @@protoc_insertion_point(class_scope:CRemoteClient_CreateRemotePlayTogetherInvitation_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr invitation_code_;
  friend struct ::TableStruct_steammessages_5fremoteclient_5fservice_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class CRemoteClient_DeleteRemotePlayTogetherInvitation_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRemoteClient_DeleteRemotePlayTogetherInvitation_Request) */ {
 public:
  inline CRemoteClient_DeleteRemotePlayTogetherInvitation_Request() : CRemoteClient_DeleteRemotePlayTogetherInvitation_Request(nullptr) {}
  ~CRemoteClient_DeleteRemotePlayTogetherInvitation_Request() override;
  explicit constexpr CRemoteClient_DeleteRemotePlayTogetherInvitation_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CRemoteClient_DeleteRemotePlayTogetherInvitation_Request(const CRemoteClient_DeleteRemotePlayTogetherInvitation_Request& from);
  CRemoteClient_DeleteRemotePlayTogetherInvitation_Request(CRemoteClient_DeleteRemotePlayTogetherInvitation_Request&& from) noexcept
    : CRemoteClient_DeleteRemotePlayTogetherInvitation_Request() {
    *this = ::std::move(from);
  }

  inline CRemoteClient_DeleteRemotePlayTogetherInvitation_Request& operator=(const CRemoteClient_DeleteRemotePlayTogetherInvitation_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CRemoteClient_DeleteRemotePlayTogetherInvitation_Request& operator=(CRemoteClient_DeleteRemotePlayTogetherInvitation_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CRemoteClient_DeleteRemotePlayTogetherInvitation_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CRemoteClient_DeleteRemotePlayTogetherInvitation_Request* internal_default_instance() {
    return reinterpret_cast<const CRemoteClient_DeleteRemotePlayTogetherInvitation_Request*>(
               &_CRemoteClient_DeleteRemotePlayTogetherInvitation_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(CRemoteClient_DeleteRemotePlayTogetherInvitation_Request& a, CRemoteClient_DeleteRemotePlayTogetherInvitation_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CRemoteClient_DeleteRemotePlayTogetherInvitation_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CRemoteClient_DeleteRemotePlayTogetherInvitation_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CRemoteClient_DeleteRemotePlayTogetherInvitation_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CRemoteClient_DeleteRemotePlayTogetherInvitation_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CRemoteClient_DeleteRemotePlayTogetherInvitation_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CRemoteClient_DeleteRemotePlayTogetherInvitation_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CRemoteClient_DeleteRemotePlayTogetherInvitation_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRemoteClient_DeleteRemotePlayTogetherInvitation_Request";
  }
  protected:
  explicit CRemoteClient_DeleteRemotePlayTogetherInvitation_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInvitationCodeFieldNumber = 1,
  };
  // optional string invitation_code = 1;
  bool has_invitation_code() const;
  private:
  bool _internal_has_invitation_code() const;
  public:
  void clear_invitation_code();
  const std::string& invitation_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_invitation_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_invitation_code();
  PROTOBUF_NODISCARD std::string* release_invitation_code();
  void set_allocated_invitation_code(std::string* invitation_code);
  private:
  const std::string& _internal_invitation_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_invitation_code(const std::string& value);
  std::string* _internal_mutable_invitation_code();
  public:

  // @@protoc_insertion_point(class_scope:CRemoteClient_DeleteRemotePlayTogetherInvitation_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr invitation_code_;
  friend struct ::TableStruct_steammessages_5fremoteclient_5fservice_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class CRemoteClient_DeleteRemotePlayTogetherInvitation_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CRemoteClient_DeleteRemotePlayTogetherInvitation_Response) */ {
 public:
  inline CRemoteClient_DeleteRemotePlayTogetherInvitation_Response() : CRemoteClient_DeleteRemotePlayTogetherInvitation_Response(nullptr) {}
  explicit constexpr CRemoteClient_DeleteRemotePlayTogetherInvitation_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CRemoteClient_DeleteRemotePlayTogetherInvitation_Response(const CRemoteClient_DeleteRemotePlayTogetherInvitation_Response& from);
  CRemoteClient_DeleteRemotePlayTogetherInvitation_Response(CRemoteClient_DeleteRemotePlayTogetherInvitation_Response&& from) noexcept
    : CRemoteClient_DeleteRemotePlayTogetherInvitation_Response() {
    *this = ::std::move(from);
  }

  inline CRemoteClient_DeleteRemotePlayTogetherInvitation_Response& operator=(const CRemoteClient_DeleteRemotePlayTogetherInvitation_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CRemoteClient_DeleteRemotePlayTogetherInvitation_Response& operator=(CRemoteClient_DeleteRemotePlayTogetherInvitation_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CRemoteClient_DeleteRemotePlayTogetherInvitation_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CRemoteClient_DeleteRemotePlayTogetherInvitation_Response* internal_default_instance() {
    return reinterpret_cast<const CRemoteClient_DeleteRemotePlayTogetherInvitation_Response*>(
               &_CRemoteClient_DeleteRemotePlayTogetherInvitation_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(CRemoteClient_DeleteRemotePlayTogetherInvitation_Response& a, CRemoteClient_DeleteRemotePlayTogetherInvitation_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CRemoteClient_DeleteRemotePlayTogetherInvitation_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CRemoteClient_DeleteRemotePlayTogetherInvitation_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CRemoteClient_DeleteRemotePlayTogetherInvitation_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CRemoteClient_DeleteRemotePlayTogetherInvitation_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CRemoteClient_DeleteRemotePlayTogetherInvitation_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CRemoteClient_DeleteRemotePlayTogetherInvitation_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRemoteClient_DeleteRemotePlayTogetherInvitation_Response";
  }
  protected:
  explicit CRemoteClient_DeleteRemotePlayTogetherInvitation_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CRemoteClient_DeleteRemotePlayTogetherInvitation_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fremoteclient_5fservice_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class CRemoteClient_LookupRemotePlayTogetherInvitation_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRemoteClient_LookupRemotePlayTogetherInvitation_Request) */ {
 public:
  inline CRemoteClient_LookupRemotePlayTogetherInvitation_Request() : CRemoteClient_LookupRemotePlayTogetherInvitation_Request(nullptr) {}
  ~CRemoteClient_LookupRemotePlayTogetherInvitation_Request() override;
  explicit constexpr CRemoteClient_LookupRemotePlayTogetherInvitation_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CRemoteClient_LookupRemotePlayTogetherInvitation_Request(const CRemoteClient_LookupRemotePlayTogetherInvitation_Request& from);
  CRemoteClient_LookupRemotePlayTogetherInvitation_Request(CRemoteClient_LookupRemotePlayTogetherInvitation_Request&& from) noexcept
    : CRemoteClient_LookupRemotePlayTogetherInvitation_Request() {
    *this = ::std::move(from);
  }

  inline CRemoteClient_LookupRemotePlayTogetherInvitation_Request& operator=(const CRemoteClient_LookupRemotePlayTogetherInvitation_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CRemoteClient_LookupRemotePlayTogetherInvitation_Request& operator=(CRemoteClient_LookupRemotePlayTogetherInvitation_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CRemoteClient_LookupRemotePlayTogetherInvitation_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CRemoteClient_LookupRemotePlayTogetherInvitation_Request* internal_default_instance() {
    return reinterpret_cast<const CRemoteClient_LookupRemotePlayTogetherInvitation_Request*>(
               &_CRemoteClient_LookupRemotePlayTogetherInvitation_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(CRemoteClient_LookupRemotePlayTogetherInvitation_Request& a, CRemoteClient_LookupRemotePlayTogetherInvitation_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CRemoteClient_LookupRemotePlayTogetherInvitation_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CRemoteClient_LookupRemotePlayTogetherInvitation_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CRemoteClient_LookupRemotePlayTogetherInvitation_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CRemoteClient_LookupRemotePlayTogetherInvitation_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CRemoteClient_LookupRemotePlayTogetherInvitation_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CRemoteClient_LookupRemotePlayTogetherInvitation_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CRemoteClient_LookupRemotePlayTogetherInvitation_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRemoteClient_LookupRemotePlayTogetherInvitation_Request";
  }
  protected:
  explicit CRemoteClient_LookupRemotePlayTogetherInvitation_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInvitationCodeFieldNumber = 1,
  };
  // optional string invitation_code = 1;
  bool has_invitation_code() const;
  private:
  bool _internal_has_invitation_code() const;
  public:
  void clear_invitation_code();
  const std::string& invitation_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_invitation_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_invitation_code();
  PROTOBUF_NODISCARD std::string* release_invitation_code();
  void set_allocated_invitation_code(std::string* invitation_code);
  private:
  const std::string& _internal_invitation_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_invitation_code(const std::string& value);
  std::string* _internal_mutable_invitation_code();
  public:

  // @@protoc_insertion_point(class_scope:CRemoteClient_LookupRemotePlayTogetherInvitation_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr invitation_code_;
  friend struct ::TableStruct_steammessages_5fremoteclient_5fservice_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class CRemoteClient_LookupRemotePlayTogetherInvitation_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRemoteClient_LookupRemotePlayTogetherInvitation_Response) */ {
 public:
  inline CRemoteClient_LookupRemotePlayTogetherInvitation_Response() : CRemoteClient_LookupRemotePlayTogetherInvitation_Response(nullptr) {}
  ~CRemoteClient_LookupRemotePlayTogetherInvitation_Response() override;
  explicit constexpr CRemoteClient_LookupRemotePlayTogetherInvitation_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CRemoteClient_LookupRemotePlayTogetherInvitation_Response(const CRemoteClient_LookupRemotePlayTogetherInvitation_Response& from);
  CRemoteClient_LookupRemotePlayTogetherInvitation_Response(CRemoteClient_LookupRemotePlayTogetherInvitation_Response&& from) noexcept
    : CRemoteClient_LookupRemotePlayTogetherInvitation_Response() {
    *this = ::std::move(from);
  }

  inline CRemoteClient_LookupRemotePlayTogetherInvitation_Response& operator=(const CRemoteClient_LookupRemotePlayTogetherInvitation_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CRemoteClient_LookupRemotePlayTogetherInvitation_Response& operator=(CRemoteClient_LookupRemotePlayTogetherInvitation_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CRemoteClient_LookupRemotePlayTogetherInvitation_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CRemoteClient_LookupRemotePlayTogetherInvitation_Response* internal_default_instance() {
    return reinterpret_cast<const CRemoteClient_LookupRemotePlayTogetherInvitation_Response*>(
               &_CRemoteClient_LookupRemotePlayTogetherInvitation_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(CRemoteClient_LookupRemotePlayTogetherInvitation_Response& a, CRemoteClient_LookupRemotePlayTogetherInvitation_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CRemoteClient_LookupRemotePlayTogetherInvitation_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CRemoteClient_LookupRemotePlayTogetherInvitation_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CRemoteClient_LookupRemotePlayTogetherInvitation_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CRemoteClient_LookupRemotePlayTogetherInvitation_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CRemoteClient_LookupRemotePlayTogetherInvitation_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CRemoteClient_LookupRemotePlayTogetherInvitation_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CRemoteClient_LookupRemotePlayTogetherInvitation_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRemoteClient_LookupRemotePlayTogetherInvitation_Response";
  }
  protected:
  explicit CRemoteClient_LookupRemotePlayTogetherInvitation_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInvitationUrlFieldNumber = 1,
  };
  // optional string invitation_url = 1;
  bool has_invitation_url() const;
  private:
  bool _internal_has_invitation_url() const;
  public:
  void clear_invitation_url();
  const std::string& invitation_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_invitation_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_invitation_url();
  PROTOBUF_NODISCARD std::string* release_invitation_url();
  void set_allocated_invitation_url(std::string* invitation_url);
  private:
  const std::string& _internal_invitation_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_invitation_url(const std::string& value);
  std::string* _internal_mutable_invitation_url();
  public:

  // @@protoc_insertion_point(class_scope:CRemoteClient_LookupRemotePlayTogetherInvitation_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr invitation_url_;
  friend struct ::TableStruct_steammessages_5fremoteclient_5fservice_5fmessages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CRemoteClient_CreateSession_Request

// -------------------------------------------------------------------

// CRemoteClient_CreateSession_Response

// optional fixed64 session_id = 1;
inline bool CRemoteClient_CreateSession_Response::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CRemoteClient_CreateSession_Response::has_session_id() const {
  return _internal_has_session_id();
}
inline void CRemoteClient_CreateSession_Response::clear_session_id() {
  session_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CRemoteClient_CreateSession_Response::_internal_session_id() const {
  return session_id_;
}
inline uint64_t CRemoteClient_CreateSession_Response::session_id() const {
  // @@protoc_insertion_point(field_get:CRemoteClient_CreateSession_Response.session_id)
  return _internal_session_id();
}
inline void CRemoteClient_CreateSession_Response::_internal_set_session_id(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  session_id_ = value;
}
inline void CRemoteClient_CreateSession_Response::set_session_id(uint64_t value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:CRemoteClient_CreateSession_Response.session_id)
}

// optional int32 euniverse = 2;
inline bool CRemoteClient_CreateSession_Response::_internal_has_euniverse() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CRemoteClient_CreateSession_Response::has_euniverse() const {
  return _internal_has_euniverse();
}
inline void CRemoteClient_CreateSession_Response::clear_euniverse() {
  euniverse_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t CRemoteClient_CreateSession_Response::_internal_euniverse() const {
  return euniverse_;
}
inline int32_t CRemoteClient_CreateSession_Response::euniverse() const {
  // @@protoc_insertion_point(field_get:CRemoteClient_CreateSession_Response.euniverse)
  return _internal_euniverse();
}
inline void CRemoteClient_CreateSession_Response::_internal_set_euniverse(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  euniverse_ = value;
}
inline void CRemoteClient_CreateSession_Response::set_euniverse(int32_t value) {
  _internal_set_euniverse(value);
  // @@protoc_insertion_point(field_set:CRemoteClient_CreateSession_Response.euniverse)
}

// -------------------------------------------------------------------

// CRemoteClient_StartPairing_Request

// optional fixed64 session_id = 1;
inline bool CRemoteClient_StartPairing_Request::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CRemoteClient_StartPairing_Request::has_session_id() const {
  return _internal_has_session_id();
}
inline void CRemoteClient_StartPairing_Request::clear_session_id() {
  session_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CRemoteClient_StartPairing_Request::_internal_session_id() const {
  return session_id_;
}
inline uint64_t CRemoteClient_StartPairing_Request::session_id() const {
  // @@protoc_insertion_point(field_get:CRemoteClient_StartPairing_Request.session_id)
  return _internal_session_id();
}
inline void CRemoteClient_StartPairing_Request::_internal_set_session_id(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  session_id_ = value;
}
inline void CRemoteClient_StartPairing_Request::set_session_id(uint64_t value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:CRemoteClient_StartPairing_Request.session_id)
}

// -------------------------------------------------------------------

// CRemoteClient_StartPairing_Response

// optional uint32 pin = 1;
inline bool CRemoteClient_StartPairing_Response::_internal_has_pin() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CRemoteClient_StartPairing_Response::has_pin() const {
  return _internal_has_pin();
}
inline void CRemoteClient_StartPairing_Response::clear_pin() {
  pin_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CRemoteClient_StartPairing_Response::_internal_pin() const {
  return pin_;
}
inline uint32_t CRemoteClient_StartPairing_Response::pin() const {
  // @@protoc_insertion_point(field_get:CRemoteClient_StartPairing_Response.pin)
  return _internal_pin();
}
inline void CRemoteClient_StartPairing_Response::_internal_set_pin(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  pin_ = value;
}
inline void CRemoteClient_StartPairing_Response::set_pin(uint32_t value) {
  _internal_set_pin(value);
  // @@protoc_insertion_point(field_set:CRemoteClient_StartPairing_Response.pin)
}

// -------------------------------------------------------------------

// CRemoteClient_SetPairingInfo_Request

// optional fixed64 session_id = 1;
inline bool CRemoteClient_SetPairingInfo_Request::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CRemoteClient_SetPairingInfo_Request::has_session_id() const {
  return _internal_has_session_id();
}
inline void CRemoteClient_SetPairingInfo_Request::clear_session_id() {
  session_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CRemoteClient_SetPairingInfo_Request::_internal_session_id() const {
  return session_id_;
}
inline uint64_t CRemoteClient_SetPairingInfo_Request::session_id() const {
  // @@protoc_insertion_point(field_get:CRemoteClient_SetPairingInfo_Request.session_id)
  return _internal_session_id();
}
inline void CRemoteClient_SetPairingInfo_Request::_internal_set_session_id(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  session_id_ = value;
}
inline void CRemoteClient_SetPairingInfo_Request::set_session_id(uint64_t value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:CRemoteClient_SetPairingInfo_Request.session_id)
}

// optional fixed64 device_id = 2;
inline bool CRemoteClient_SetPairingInfo_Request::_internal_has_device_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CRemoteClient_SetPairingInfo_Request::has_device_id() const {
  return _internal_has_device_id();
}
inline void CRemoteClient_SetPairingInfo_Request::clear_device_id() {
  device_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CRemoteClient_SetPairingInfo_Request::_internal_device_id() const {
  return device_id_;
}
inline uint64_t CRemoteClient_SetPairingInfo_Request::device_id() const {
  // @@protoc_insertion_point(field_get:CRemoteClient_SetPairingInfo_Request.device_id)
  return _internal_device_id();
}
inline void CRemoteClient_SetPairingInfo_Request::_internal_set_device_id(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  device_id_ = value;
}
inline void CRemoteClient_SetPairingInfo_Request::set_device_id(uint64_t value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:CRemoteClient_SetPairingInfo_Request.device_id)
}

// optional bytes request = 3;
inline bool CRemoteClient_SetPairingInfo_Request::_internal_has_request() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CRemoteClient_SetPairingInfo_Request::has_request() const {
  return _internal_has_request();
}
inline void CRemoteClient_SetPairingInfo_Request::clear_request() {
  request_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CRemoteClient_SetPairingInfo_Request::request() const {
  // @@protoc_insertion_point(field_get:CRemoteClient_SetPairingInfo_Request.request)
  return _internal_request();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CRemoteClient_SetPairingInfo_Request::set_request(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 request_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CRemoteClient_SetPairingInfo_Request.request)
}
inline std::string* CRemoteClient_SetPairingInfo_Request::mutable_request() {
  std::string* _s = _internal_mutable_request();
  // @@protoc_insertion_point(field_mutable:CRemoteClient_SetPairingInfo_Request.request)
  return _s;
}
inline const std::string& CRemoteClient_SetPairingInfo_Request::_internal_request() const {
  return request_.Get();
}
inline void CRemoteClient_SetPairingInfo_Request::_internal_set_request(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  request_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CRemoteClient_SetPairingInfo_Request::_internal_mutable_request() {
  _has_bits_[0] |= 0x00000001u;
  return request_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CRemoteClient_SetPairingInfo_Request::release_request() {
  // @@protoc_insertion_point(field_release:CRemoteClient_SetPairingInfo_Request.request)
  if (!_internal_has_request()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = request_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (request_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    request_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CRemoteClient_SetPairingInfo_Request::set_allocated_request(std::string* request) {
  if (request != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  request_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (request_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    request_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CRemoteClient_SetPairingInfo_Request.request)
}

// -------------------------------------------------------------------

// CRemoteClient_SetPairingInfo_Response

// -------------------------------------------------------------------

// CRemoteClient_GetPairingInfo_Request

// optional uint32 pin = 1;
inline bool CRemoteClient_GetPairingInfo_Request::_internal_has_pin() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CRemoteClient_GetPairingInfo_Request::has_pin() const {
  return _internal_has_pin();
}
inline void CRemoteClient_GetPairingInfo_Request::clear_pin() {
  pin_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CRemoteClient_GetPairingInfo_Request::_internal_pin() const {
  return pin_;
}
inline uint32_t CRemoteClient_GetPairingInfo_Request::pin() const {
  // @@protoc_insertion_point(field_get:CRemoteClient_GetPairingInfo_Request.pin)
  return _internal_pin();
}
inline void CRemoteClient_GetPairingInfo_Request::_internal_set_pin(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  pin_ = value;
}
inline void CRemoteClient_GetPairingInfo_Request::set_pin(uint32_t value) {
  _internal_set_pin(value);
  // @@protoc_insertion_point(field_set:CRemoteClient_GetPairingInfo_Request.pin)
}

// -------------------------------------------------------------------

// CRemoteClient_GetPairingInfo_Response

// optional fixed64 session_id = 1;
inline bool CRemoteClient_GetPairingInfo_Response::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CRemoteClient_GetPairingInfo_Response::has_session_id() const {
  return _internal_has_session_id();
}
inline void CRemoteClient_GetPairingInfo_Response::clear_session_id() {
  session_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CRemoteClient_GetPairingInfo_Response::_internal_session_id() const {
  return session_id_;
}
inline uint64_t CRemoteClient_GetPairingInfo_Response::session_id() const {
  // @@protoc_insertion_point(field_get:CRemoteClient_GetPairingInfo_Response.session_id)
  return _internal_session_id();
}
inline void CRemoteClient_GetPairingInfo_Response::_internal_set_session_id(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  session_id_ = value;
}
inline void CRemoteClient_GetPairingInfo_Response::set_session_id(uint64_t value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:CRemoteClient_GetPairingInfo_Response.session_id)
}

// optional fixed64 device_id = 2;
inline bool CRemoteClient_GetPairingInfo_Response::_internal_has_device_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CRemoteClient_GetPairingInfo_Response::has_device_id() const {
  return _internal_has_device_id();
}
inline void CRemoteClient_GetPairingInfo_Response::clear_device_id() {
  device_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CRemoteClient_GetPairingInfo_Response::_internal_device_id() const {
  return device_id_;
}
inline uint64_t CRemoteClient_GetPairingInfo_Response::device_id() const {
  // @@protoc_insertion_point(field_get:CRemoteClient_GetPairingInfo_Response.device_id)
  return _internal_device_id();
}
inline void CRemoteClient_GetPairingInfo_Response::_internal_set_device_id(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  device_id_ = value;
}
inline void CRemoteClient_GetPairingInfo_Response::set_device_id(uint64_t value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:CRemoteClient_GetPairingInfo_Response.device_id)
}

// optional bytes request = 3;
inline bool CRemoteClient_GetPairingInfo_Response::_internal_has_request() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CRemoteClient_GetPairingInfo_Response::has_request() const {
  return _internal_has_request();
}
inline void CRemoteClient_GetPairingInfo_Response::clear_request() {
  request_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CRemoteClient_GetPairingInfo_Response::request() const {
  // @@protoc_insertion_point(field_get:CRemoteClient_GetPairingInfo_Response.request)
  return _internal_request();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CRemoteClient_GetPairingInfo_Response::set_request(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 request_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CRemoteClient_GetPairingInfo_Response.request)
}
inline std::string* CRemoteClient_GetPairingInfo_Response::mutable_request() {
  std::string* _s = _internal_mutable_request();
  // @@protoc_insertion_point(field_mutable:CRemoteClient_GetPairingInfo_Response.request)
  return _s;
}
inline const std::string& CRemoteClient_GetPairingInfo_Response::_internal_request() const {
  return request_.Get();
}
inline void CRemoteClient_GetPairingInfo_Response::_internal_set_request(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  request_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CRemoteClient_GetPairingInfo_Response::_internal_mutable_request() {
  _has_bits_[0] |= 0x00000001u;
  return request_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CRemoteClient_GetPairingInfo_Response::release_request() {
  // @@protoc_insertion_point(field_release:CRemoteClient_GetPairingInfo_Response.request)
  if (!_internal_has_request()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = request_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (request_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    request_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CRemoteClient_GetPairingInfo_Response::set_allocated_request(std::string* request) {
  if (request != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  request_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (request_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    request_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CRemoteClient_GetPairingInfo_Response.request)
}

// -------------------------------------------------------------------

// CRemoteClient_CancelPairing_Request

// optional fixed64 session_id = 1;
inline bool CRemoteClient_CancelPairing_Request::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CRemoteClient_CancelPairing_Request::has_session_id() const {
  return _internal_has_session_id();
}
inline void CRemoteClient_CancelPairing_Request::clear_session_id() {
  session_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CRemoteClient_CancelPairing_Request::_internal_session_id() const {
  return session_id_;
}
inline uint64_t CRemoteClient_CancelPairing_Request::session_id() const {
  // @@protoc_insertion_point(field_get:CRemoteClient_CancelPairing_Request.session_id)
  return _internal_session_id();
}
inline void CRemoteClient_CancelPairing_Request::_internal_set_session_id(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  session_id_ = value;
}
inline void CRemoteClient_CancelPairing_Request::set_session_id(uint64_t value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:CRemoteClient_CancelPairing_Request.session_id)
}

// -------------------------------------------------------------------

// CRemoteClient_CancelPairing_Response

// -------------------------------------------------------------------

// CRemoteClient_RegisterStatusUpdate_Notification

// optional fixed64 session_id = 1;
inline bool CRemoteClient_RegisterStatusUpdate_Notification::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CRemoteClient_RegisterStatusUpdate_Notification::has_session_id() const {
  return _internal_has_session_id();
}
inline void CRemoteClient_RegisterStatusUpdate_Notification::clear_session_id() {
  session_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CRemoteClient_RegisterStatusUpdate_Notification::_internal_session_id() const {
  return session_id_;
}
inline uint64_t CRemoteClient_RegisterStatusUpdate_Notification::session_id() const {
  // @@protoc_insertion_point(field_get:CRemoteClient_RegisterStatusUpdate_Notification.session_id)
  return _internal_session_id();
}
inline void CRemoteClient_RegisterStatusUpdate_Notification::_internal_set_session_id(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  session_id_ = value;
}
inline void CRemoteClient_RegisterStatusUpdate_Notification::set_session_id(uint64_t value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:CRemoteClient_RegisterStatusUpdate_Notification.session_id)
}

// optional fixed64 steamid = 2;
inline bool CRemoteClient_RegisterStatusUpdate_Notification::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CRemoteClient_RegisterStatusUpdate_Notification::has_steamid() const {
  return _internal_has_steamid();
}
inline void CRemoteClient_RegisterStatusUpdate_Notification::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CRemoteClient_RegisterStatusUpdate_Notification::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CRemoteClient_RegisterStatusUpdate_Notification::steamid() const {
  // @@protoc_insertion_point(field_get:CRemoteClient_RegisterStatusUpdate_Notification.steamid)
  return _internal_steamid();
}
inline void CRemoteClient_RegisterStatusUpdate_Notification::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  steamid_ = value;
}
inline void CRemoteClient_RegisterStatusUpdate_Notification::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CRemoteClient_RegisterStatusUpdate_Notification.steamid)
}

// optional fixed64 device_id = 3;
inline bool CRemoteClient_RegisterStatusUpdate_Notification::_internal_has_device_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CRemoteClient_RegisterStatusUpdate_Notification::has_device_id() const {
  return _internal_has_device_id();
}
inline void CRemoteClient_RegisterStatusUpdate_Notification::clear_device_id() {
  device_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CRemoteClient_RegisterStatusUpdate_Notification::_internal_device_id() const {
  return device_id_;
}
inline uint64_t CRemoteClient_RegisterStatusUpdate_Notification::device_id() const {
  // @@protoc_insertion_point(field_get:CRemoteClient_RegisterStatusUpdate_Notification.device_id)
  return _internal_device_id();
}
inline void CRemoteClient_RegisterStatusUpdate_Notification::_internal_set_device_id(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  device_id_ = value;
}
inline void CRemoteClient_RegisterStatusUpdate_Notification::set_device_id(uint64_t value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:CRemoteClient_RegisterStatusUpdate_Notification.device_id)
}

// -------------------------------------------------------------------

// CRemoteClient_UnregisterStatusUpdate_Notification

// optional fixed64 session_id = 1;
inline bool CRemoteClient_UnregisterStatusUpdate_Notification::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CRemoteClient_UnregisterStatusUpdate_Notification::has_session_id() const {
  return _internal_has_session_id();
}
inline void CRemoteClient_UnregisterStatusUpdate_Notification::clear_session_id() {
  session_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CRemoteClient_UnregisterStatusUpdate_Notification::_internal_session_id() const {
  return session_id_;
}
inline uint64_t CRemoteClient_UnregisterStatusUpdate_Notification::session_id() const {
  // @@protoc_insertion_point(field_get:CRemoteClient_UnregisterStatusUpdate_Notification.session_id)
  return _internal_session_id();
}
inline void CRemoteClient_UnregisterStatusUpdate_Notification::_internal_set_session_id(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  session_id_ = value;
}
inline void CRemoteClient_UnregisterStatusUpdate_Notification::set_session_id(uint64_t value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:CRemoteClient_UnregisterStatusUpdate_Notification.session_id)
}

// optional fixed64 steamid = 2;
inline bool CRemoteClient_UnregisterStatusUpdate_Notification::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CRemoteClient_UnregisterStatusUpdate_Notification::has_steamid() const {
  return _internal_has_steamid();
}
inline void CRemoteClient_UnregisterStatusUpdate_Notification::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CRemoteClient_UnregisterStatusUpdate_Notification::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CRemoteClient_UnregisterStatusUpdate_Notification::steamid() const {
  // @@protoc_insertion_point(field_get:CRemoteClient_UnregisterStatusUpdate_Notification.steamid)
  return _internal_steamid();
}
inline void CRemoteClient_UnregisterStatusUpdate_Notification::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  steamid_ = value;
}
inline void CRemoteClient_UnregisterStatusUpdate_Notification::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CRemoteClient_UnregisterStatusUpdate_Notification.steamid)
}

// -------------------------------------------------------------------

// CRemoteClient_Online_Notification

// optional fixed64 steamid = 1;
inline bool CRemoteClient_Online_Notification::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CRemoteClient_Online_Notification::has_steamid() const {
  return _internal_has_steamid();
}
inline void CRemoteClient_Online_Notification::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CRemoteClient_Online_Notification::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CRemoteClient_Online_Notification::steamid() const {
  // @@protoc_insertion_point(field_get:CRemoteClient_Online_Notification.steamid)
  return _internal_steamid();
}
inline void CRemoteClient_Online_Notification::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
}
inline void CRemoteClient_Online_Notification::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CRemoteClient_Online_Notification.steamid)
}

// optional fixed64 remote_client_id = 2;
inline bool CRemoteClient_Online_Notification::_internal_has_remote_client_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CRemoteClient_Online_Notification::has_remote_client_id() const {
  return _internal_has_remote_client_id();
}
inline void CRemoteClient_Online_Notification::clear_remote_client_id() {
  remote_client_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CRemoteClient_Online_Notification::_internal_remote_client_id() const {
  return remote_client_id_;
}
inline uint64_t CRemoteClient_Online_Notification::remote_client_id() const {
  // @@protoc_insertion_point(field_get:CRemoteClient_Online_Notification.remote_client_id)
  return _internal_remote_client_id();
}
inline void CRemoteClient_Online_Notification::_internal_set_remote_client_id(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  remote_client_id_ = value;
}
inline void CRemoteClient_Online_Notification::set_remote_client_id(uint64_t value) {
  _internal_set_remote_client_id(value);
  // @@protoc_insertion_point(field_set:CRemoteClient_Online_Notification.remote_client_id)
}

// -------------------------------------------------------------------

// CRemoteClient_RemotePacket_Notification

// optional fixed64 session_id = 1;
inline bool CRemoteClient_RemotePacket_Notification::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CRemoteClient_RemotePacket_Notification::has_session_id() const {
  return _internal_has_session_id();
}
inline void CRemoteClient_RemotePacket_Notification::clear_session_id() {
  session_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CRemoteClient_RemotePacket_Notification::_internal_session_id() const {
  return session_id_;
}
inline uint64_t CRemoteClient_RemotePacket_Notification::session_id() const {
  // @@protoc_insertion_point(field_get:CRemoteClient_RemotePacket_Notification.session_id)
  return _internal_session_id();
}
inline void CRemoteClient_RemotePacket_Notification::_internal_set_session_id(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  session_id_ = value;
}
inline void CRemoteClient_RemotePacket_Notification::set_session_id(uint64_t value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:CRemoteClient_RemotePacket_Notification.session_id)
}

// optional fixed64 steamid = 2;
inline bool CRemoteClient_RemotePacket_Notification::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CRemoteClient_RemotePacket_Notification::has_steamid() const {
  return _internal_has_steamid();
}
inline void CRemoteClient_RemotePacket_Notification::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CRemoteClient_RemotePacket_Notification::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CRemoteClient_RemotePacket_Notification::steamid() const {
  // @@protoc_insertion_point(field_get:CRemoteClient_RemotePacket_Notification.steamid)
  return _internal_steamid();
}
inline void CRemoteClient_RemotePacket_Notification::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  steamid_ = value;
}
inline void CRemoteClient_RemotePacket_Notification::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CRemoteClient_RemotePacket_Notification.steamid)
}

// optional bytes payload = 4;
inline bool CRemoteClient_RemotePacket_Notification::_internal_has_payload() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CRemoteClient_RemotePacket_Notification::has_payload() const {
  return _internal_has_payload();
}
inline void CRemoteClient_RemotePacket_Notification::clear_payload() {
  payload_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CRemoteClient_RemotePacket_Notification::payload() const {
  // @@protoc_insertion_point(field_get:CRemoteClient_RemotePacket_Notification.payload)
  return _internal_payload();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CRemoteClient_RemotePacket_Notification::set_payload(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 payload_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CRemoteClient_RemotePacket_Notification.payload)
}
inline std::string* CRemoteClient_RemotePacket_Notification::mutable_payload() {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:CRemoteClient_RemotePacket_Notification.payload)
  return _s;
}
inline const std::string& CRemoteClient_RemotePacket_Notification::_internal_payload() const {
  return payload_.Get();
}
inline void CRemoteClient_RemotePacket_Notification::_internal_set_payload(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CRemoteClient_RemotePacket_Notification::_internal_mutable_payload() {
  _has_bits_[0] |= 0x00000001u;
  return payload_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CRemoteClient_RemotePacket_Notification::release_payload() {
  // @@protoc_insertion_point(field_release:CRemoteClient_RemotePacket_Notification.payload)
  if (!_internal_has_payload()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = payload_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (payload_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CRemoteClient_RemotePacket_Notification::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (payload_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CRemoteClient_RemotePacket_Notification.payload)
}

// -------------------------------------------------------------------

// CRemoteClient_ReplyPacket_Notification

// optional fixed64 session_id = 1;
inline bool CRemoteClient_ReplyPacket_Notification::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CRemoteClient_ReplyPacket_Notification::has_session_id() const {
  return _internal_has_session_id();
}
inline void CRemoteClient_ReplyPacket_Notification::clear_session_id() {
  session_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CRemoteClient_ReplyPacket_Notification::_internal_session_id() const {
  return session_id_;
}
inline uint64_t CRemoteClient_ReplyPacket_Notification::session_id() const {
  // @@protoc_insertion_point(field_get:CRemoteClient_ReplyPacket_Notification.session_id)
  return _internal_session_id();
}
inline void CRemoteClient_ReplyPacket_Notification::_internal_set_session_id(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  session_id_ = value;
}
inline void CRemoteClient_ReplyPacket_Notification::set_session_id(uint64_t value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:CRemoteClient_ReplyPacket_Notification.session_id)
}

// optional bytes payload = 2;
inline bool CRemoteClient_ReplyPacket_Notification::_internal_has_payload() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CRemoteClient_ReplyPacket_Notification::has_payload() const {
  return _internal_has_payload();
}
inline void CRemoteClient_ReplyPacket_Notification::clear_payload() {
  payload_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CRemoteClient_ReplyPacket_Notification::payload() const {
  // @@protoc_insertion_point(field_get:CRemoteClient_ReplyPacket_Notification.payload)
  return _internal_payload();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CRemoteClient_ReplyPacket_Notification::set_payload(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 payload_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CRemoteClient_ReplyPacket_Notification.payload)
}
inline std::string* CRemoteClient_ReplyPacket_Notification::mutable_payload() {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:CRemoteClient_ReplyPacket_Notification.payload)
  return _s;
}
inline const std::string& CRemoteClient_ReplyPacket_Notification::_internal_payload() const {
  return payload_.Get();
}
inline void CRemoteClient_ReplyPacket_Notification::_internal_set_payload(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CRemoteClient_ReplyPacket_Notification::_internal_mutable_payload() {
  _has_bits_[0] |= 0x00000001u;
  return payload_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CRemoteClient_ReplyPacket_Notification::release_payload() {
  // @@protoc_insertion_point(field_release:CRemoteClient_ReplyPacket_Notification.payload)
  if (!_internal_has_payload()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = payload_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (payload_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CRemoteClient_ReplyPacket_Notification::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (payload_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CRemoteClient_ReplyPacket_Notification.payload)
}

// -------------------------------------------------------------------

// CRemoteClient_GetReplies_Request

// optional fixed64 session_id = 1;
inline bool CRemoteClient_GetReplies_Request::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CRemoteClient_GetReplies_Request::has_session_id() const {
  return _internal_has_session_id();
}
inline void CRemoteClient_GetReplies_Request::clear_session_id() {
  session_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CRemoteClient_GetReplies_Request::_internal_session_id() const {
  return session_id_;
}
inline uint64_t CRemoteClient_GetReplies_Request::session_id() const {
  // @@protoc_insertion_point(field_get:CRemoteClient_GetReplies_Request.session_id)
  return _internal_session_id();
}
inline void CRemoteClient_GetReplies_Request::_internal_set_session_id(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  session_id_ = value;
}
inline void CRemoteClient_GetReplies_Request::set_session_id(uint64_t value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:CRemoteClient_GetReplies_Request.session_id)
}

// -------------------------------------------------------------------

// CRemoteClient_GetReplies_Response

// repeated bytes payload = 1;
inline int CRemoteClient_GetReplies_Response::_internal_payload_size() const {
  return payload_.size();
}
inline int CRemoteClient_GetReplies_Response::payload_size() const {
  return _internal_payload_size();
}
inline void CRemoteClient_GetReplies_Response::clear_payload() {
  payload_.Clear();
}
inline std::string* CRemoteClient_GetReplies_Response::add_payload() {
  std::string* _s = _internal_add_payload();
  // @@protoc_insertion_point(field_add_mutable:CRemoteClient_GetReplies_Response.payload)
  return _s;
}
inline const std::string& CRemoteClient_GetReplies_Response::_internal_payload(int index) const {
  return payload_.Get(index);
}
inline const std::string& CRemoteClient_GetReplies_Response::payload(int index) const {
  // @@protoc_insertion_point(field_get:CRemoteClient_GetReplies_Response.payload)
  return _internal_payload(index);
}
inline std::string* CRemoteClient_GetReplies_Response::mutable_payload(int index) {
  // @@protoc_insertion_point(field_mutable:CRemoteClient_GetReplies_Response.payload)
  return payload_.Mutable(index);
}
inline void CRemoteClient_GetReplies_Response::set_payload(int index, const std::string& value) {
  payload_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:CRemoteClient_GetReplies_Response.payload)
}
inline void CRemoteClient_GetReplies_Response::set_payload(int index, std::string&& value) {
  payload_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:CRemoteClient_GetReplies_Response.payload)
}
inline void CRemoteClient_GetReplies_Response::set_payload(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  payload_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CRemoteClient_GetReplies_Response.payload)
}
inline void CRemoteClient_GetReplies_Response::set_payload(int index, const void* value, size_t size) {
  payload_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CRemoteClient_GetReplies_Response.payload)
}
inline std::string* CRemoteClient_GetReplies_Response::_internal_add_payload() {
  return payload_.Add();
}
inline void CRemoteClient_GetReplies_Response::add_payload(const std::string& value) {
  payload_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CRemoteClient_GetReplies_Response.payload)
}
inline void CRemoteClient_GetReplies_Response::add_payload(std::string&& value) {
  payload_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CRemoteClient_GetReplies_Response.payload)
}
inline void CRemoteClient_GetReplies_Response::add_payload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  payload_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CRemoteClient_GetReplies_Response.payload)
}
inline void CRemoteClient_GetReplies_Response::add_payload(const void* value, size_t size) {
  payload_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CRemoteClient_GetReplies_Response.payload)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CRemoteClient_GetReplies_Response::payload() const {
  // @@protoc_insertion_point(field_list:CRemoteClient_GetReplies_Response.payload)
  return payload_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CRemoteClient_GetReplies_Response::mutable_payload() {
  // @@protoc_insertion_point(field_mutable_list:CRemoteClient_GetReplies_Response.payload)
  return &payload_;
}

// -------------------------------------------------------------------

// CRemoteClient_AllocateTURNServer_Request

// optional uint32 cellid = 1;
inline bool CRemoteClient_AllocateTURNServer_Request::_internal_has_cellid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CRemoteClient_AllocateTURNServer_Request::has_cellid() const {
  return _internal_has_cellid();
}
inline void CRemoteClient_AllocateTURNServer_Request::clear_cellid() {
  cellid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CRemoteClient_AllocateTURNServer_Request::_internal_cellid() const {
  return cellid_;
}
inline uint32_t CRemoteClient_AllocateTURNServer_Request::cellid() const {
  // @@protoc_insertion_point(field_get:CRemoteClient_AllocateTURNServer_Request.cellid)
  return _internal_cellid();
}
inline void CRemoteClient_AllocateTURNServer_Request::_internal_set_cellid(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  cellid_ = value;
}
inline void CRemoteClient_AllocateTURNServer_Request::set_cellid(uint32_t value) {
  _internal_set_cellid(value);
  // @@protoc_insertion_point(field_set:CRemoteClient_AllocateTURNServer_Request.cellid)
}

// optional string credentials = 2;
inline bool CRemoteClient_AllocateTURNServer_Request::_internal_has_credentials() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CRemoteClient_AllocateTURNServer_Request::has_credentials() const {
  return _internal_has_credentials();
}
inline void CRemoteClient_AllocateTURNServer_Request::clear_credentials() {
  credentials_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CRemoteClient_AllocateTURNServer_Request::credentials() const {
  // @@protoc_insertion_point(field_get:CRemoteClient_AllocateTURNServer_Request.credentials)
  return _internal_credentials();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CRemoteClient_AllocateTURNServer_Request::set_credentials(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 credentials_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CRemoteClient_AllocateTURNServer_Request.credentials)
}
inline std::string* CRemoteClient_AllocateTURNServer_Request::mutable_credentials() {
  std::string* _s = _internal_mutable_credentials();
  // @@protoc_insertion_point(field_mutable:CRemoteClient_AllocateTURNServer_Request.credentials)
  return _s;
}
inline const std::string& CRemoteClient_AllocateTURNServer_Request::_internal_credentials() const {
  return credentials_.Get();
}
inline void CRemoteClient_AllocateTURNServer_Request::_internal_set_credentials(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  credentials_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CRemoteClient_AllocateTURNServer_Request::_internal_mutable_credentials() {
  _has_bits_[0] |= 0x00000001u;
  return credentials_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CRemoteClient_AllocateTURNServer_Request::release_credentials() {
  // @@protoc_insertion_point(field_release:CRemoteClient_AllocateTURNServer_Request.credentials)
  if (!_internal_has_credentials()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = credentials_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (credentials_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    credentials_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CRemoteClient_AllocateTURNServer_Request::set_allocated_credentials(std::string* credentials) {
  if (credentials != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  credentials_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), credentials,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (credentials_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    credentials_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CRemoteClient_AllocateTURNServer_Request.credentials)
}

// -------------------------------------------------------------------

// CRemoteClient_AllocateTURNServer_Response

// optional string turn_server = 1;
inline bool CRemoteClient_AllocateTURNServer_Response::_internal_has_turn_server() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CRemoteClient_AllocateTURNServer_Response::has_turn_server() const {
  return _internal_has_turn_server();
}
inline void CRemoteClient_AllocateTURNServer_Response::clear_turn_server() {
  turn_server_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CRemoteClient_AllocateTURNServer_Response::turn_server() const {
  // @@protoc_insertion_point(field_get:CRemoteClient_AllocateTURNServer_Response.turn_server)
  return _internal_turn_server();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CRemoteClient_AllocateTURNServer_Response::set_turn_server(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 turn_server_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CRemoteClient_AllocateTURNServer_Response.turn_server)
}
inline std::string* CRemoteClient_AllocateTURNServer_Response::mutable_turn_server() {
  std::string* _s = _internal_mutable_turn_server();
  // @@protoc_insertion_point(field_mutable:CRemoteClient_AllocateTURNServer_Response.turn_server)
  return _s;
}
inline const std::string& CRemoteClient_AllocateTURNServer_Response::_internal_turn_server() const {
  return turn_server_.Get();
}
inline void CRemoteClient_AllocateTURNServer_Response::_internal_set_turn_server(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  turn_server_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CRemoteClient_AllocateTURNServer_Response::_internal_mutable_turn_server() {
  _has_bits_[0] |= 0x00000001u;
  return turn_server_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CRemoteClient_AllocateTURNServer_Response::release_turn_server() {
  // @@protoc_insertion_point(field_release:CRemoteClient_AllocateTURNServer_Response.turn_server)
  if (!_internal_has_turn_server()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = turn_server_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (turn_server_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    turn_server_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CRemoteClient_AllocateTURNServer_Response::set_allocated_turn_server(std::string* turn_server) {
  if (turn_server != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  turn_server_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), turn_server,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (turn_server_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    turn_server_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CRemoteClient_AllocateTURNServer_Response.turn_server)
}

// -------------------------------------------------------------------

// CRemoteClient_AllocateRelayServer_Request

// optional uint32 cellid = 1;
inline bool CRemoteClient_AllocateRelayServer_Request::_internal_has_cellid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CRemoteClient_AllocateRelayServer_Request::has_cellid() const {
  return _internal_has_cellid();
}
inline void CRemoteClient_AllocateRelayServer_Request::clear_cellid() {
  cellid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CRemoteClient_AllocateRelayServer_Request::_internal_cellid() const {
  return cellid_;
}
inline uint32_t CRemoteClient_AllocateRelayServer_Request::cellid() const {
  // @@protoc_insertion_point(field_get:CRemoteClient_AllocateRelayServer_Request.cellid)
  return _internal_cellid();
}
inline void CRemoteClient_AllocateRelayServer_Request::_internal_set_cellid(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  cellid_ = value;
}
inline void CRemoteClient_AllocateRelayServer_Request::set_cellid(uint32_t value) {
  _internal_set_cellid(value);
  // @@protoc_insertion_point(field_set:CRemoteClient_AllocateRelayServer_Request.cellid)
}

// optional string credentials = 2;
inline bool CRemoteClient_AllocateRelayServer_Request::_internal_has_credentials() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CRemoteClient_AllocateRelayServer_Request::has_credentials() const {
  return _internal_has_credentials();
}
inline void CRemoteClient_AllocateRelayServer_Request::clear_credentials() {
  credentials_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CRemoteClient_AllocateRelayServer_Request::credentials() const {
  // @@protoc_insertion_point(field_get:CRemoteClient_AllocateRelayServer_Request.credentials)
  return _internal_credentials();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CRemoteClient_AllocateRelayServer_Request::set_credentials(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 credentials_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CRemoteClient_AllocateRelayServer_Request.credentials)
}
inline std::string* CRemoteClient_AllocateRelayServer_Request::mutable_credentials() {
  std::string* _s = _internal_mutable_credentials();
  // @@protoc_insertion_point(field_mutable:CRemoteClient_AllocateRelayServer_Request.credentials)
  return _s;
}
inline const std::string& CRemoteClient_AllocateRelayServer_Request::_internal_credentials() const {
  return credentials_.Get();
}
inline void CRemoteClient_AllocateRelayServer_Request::_internal_set_credentials(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  credentials_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CRemoteClient_AllocateRelayServer_Request::_internal_mutable_credentials() {
  _has_bits_[0] |= 0x00000001u;
  return credentials_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CRemoteClient_AllocateRelayServer_Request::release_credentials() {
  // @@protoc_insertion_point(field_release:CRemoteClient_AllocateRelayServer_Request.credentials)
  if (!_internal_has_credentials()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = credentials_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (credentials_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    credentials_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CRemoteClient_AllocateRelayServer_Request::set_allocated_credentials(std::string* credentials) {
  if (credentials != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  credentials_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), credentials,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (credentials_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    credentials_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CRemoteClient_AllocateRelayServer_Request.credentials)
}

// -------------------------------------------------------------------

// CRemoteClient_AllocateRelayServer_Response

// optional string relay_server = 1;
inline bool CRemoteClient_AllocateRelayServer_Response::_internal_has_relay_server() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CRemoteClient_AllocateRelayServer_Response::has_relay_server() const {
  return _internal_has_relay_server();
}
inline void CRemoteClient_AllocateRelayServer_Response::clear_relay_server() {
  relay_server_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CRemoteClient_AllocateRelayServer_Response::relay_server() const {
  // @@protoc_insertion_point(field_get:CRemoteClient_AllocateRelayServer_Response.relay_server)
  return _internal_relay_server();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CRemoteClient_AllocateRelayServer_Response::set_relay_server(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 relay_server_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CRemoteClient_AllocateRelayServer_Response.relay_server)
}
inline std::string* CRemoteClient_AllocateRelayServer_Response::mutable_relay_server() {
  std::string* _s = _internal_mutable_relay_server();
  // @@protoc_insertion_point(field_mutable:CRemoteClient_AllocateRelayServer_Response.relay_server)
  return _s;
}
inline const std::string& CRemoteClient_AllocateRelayServer_Response::_internal_relay_server() const {
  return relay_server_.Get();
}
inline void CRemoteClient_AllocateRelayServer_Response::_internal_set_relay_server(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  relay_server_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CRemoteClient_AllocateRelayServer_Response::_internal_mutable_relay_server() {
  _has_bits_[0] |= 0x00000001u;
  return relay_server_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CRemoteClient_AllocateRelayServer_Response::release_relay_server() {
  // @@protoc_insertion_point(field_release:CRemoteClient_AllocateRelayServer_Response.relay_server)
  if (!_internal_has_relay_server()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = relay_server_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (relay_server_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    relay_server_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CRemoteClient_AllocateRelayServer_Response::set_allocated_relay_server(std::string* relay_server) {
  if (relay_server != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  relay_server_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), relay_server,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (relay_server_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    relay_server_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CRemoteClient_AllocateRelayServer_Response.relay_server)
}

// -------------------------------------------------------------------

// CRemoteClient_AllocateSDR_Request

// optional uint32 appid = 1;
inline bool CRemoteClient_AllocateSDR_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CRemoteClient_AllocateSDR_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CRemoteClient_AllocateSDR_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CRemoteClient_AllocateSDR_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CRemoteClient_AllocateSDR_Request::appid() const {
  // @@protoc_insertion_point(field_get:CRemoteClient_AllocateSDR_Request.appid)
  return _internal_appid();
}
inline void CRemoteClient_AllocateSDR_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  appid_ = value;
}
inline void CRemoteClient_AllocateSDR_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CRemoteClient_AllocateSDR_Request.appid)
}

// -------------------------------------------------------------------

// CRemoteClient_AllocateSDR_Response

// -------------------------------------------------------------------

// CRemoteClient_SteamBroadcast_Notification

// optional fixed64 steamid = 1;
inline bool CRemoteClient_SteamBroadcast_Notification::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CRemoteClient_SteamBroadcast_Notification::has_steamid() const {
  return _internal_has_steamid();
}
inline void CRemoteClient_SteamBroadcast_Notification::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CRemoteClient_SteamBroadcast_Notification::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CRemoteClient_SteamBroadcast_Notification::steamid() const {
  // @@protoc_insertion_point(field_get:CRemoteClient_SteamBroadcast_Notification.steamid)
  return _internal_steamid();
}
inline void CRemoteClient_SteamBroadcast_Notification::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  steamid_ = value;
}
inline void CRemoteClient_SteamBroadcast_Notification::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CRemoteClient_SteamBroadcast_Notification.steamid)
}

// optional fixed64 clientid = 2;
inline bool CRemoteClient_SteamBroadcast_Notification::_internal_has_clientid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CRemoteClient_SteamBroadcast_Notification::has_clientid() const {
  return _internal_has_clientid();
}
inline void CRemoteClient_SteamBroadcast_Notification::clear_clientid() {
  clientid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CRemoteClient_SteamBroadcast_Notification::_internal_clientid() const {
  return clientid_;
}
inline uint64_t CRemoteClient_SteamBroadcast_Notification::clientid() const {
  // @@protoc_insertion_point(field_get:CRemoteClient_SteamBroadcast_Notification.clientid)
  return _internal_clientid();
}
inline void CRemoteClient_SteamBroadcast_Notification::_internal_set_clientid(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  clientid_ = value;
}
inline void CRemoteClient_SteamBroadcast_Notification::set_clientid(uint64_t value) {
  _internal_set_clientid(value);
  // @@protoc_insertion_point(field_set:CRemoteClient_SteamBroadcast_Notification.clientid)
}

// optional bytes payload = 3;
inline bool CRemoteClient_SteamBroadcast_Notification::_internal_has_payload() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CRemoteClient_SteamBroadcast_Notification::has_payload() const {
  return _internal_has_payload();
}
inline void CRemoteClient_SteamBroadcast_Notification::clear_payload() {
  payload_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CRemoteClient_SteamBroadcast_Notification::payload() const {
  // @@protoc_insertion_point(field_get:CRemoteClient_SteamBroadcast_Notification.payload)
  return _internal_payload();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CRemoteClient_SteamBroadcast_Notification::set_payload(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 payload_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CRemoteClient_SteamBroadcast_Notification.payload)
}
inline std::string* CRemoteClient_SteamBroadcast_Notification::mutable_payload() {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:CRemoteClient_SteamBroadcast_Notification.payload)
  return _s;
}
inline const std::string& CRemoteClient_SteamBroadcast_Notification::_internal_payload() const {
  return payload_.Get();
}
inline void CRemoteClient_SteamBroadcast_Notification::_internal_set_payload(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CRemoteClient_SteamBroadcast_Notification::_internal_mutable_payload() {
  _has_bits_[0] |= 0x00000001u;
  return payload_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CRemoteClient_SteamBroadcast_Notification::release_payload() {
  // @@protoc_insertion_point(field_release:CRemoteClient_SteamBroadcast_Notification.payload)
  if (!_internal_has_payload()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = payload_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (payload_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CRemoteClient_SteamBroadcast_Notification::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (payload_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CRemoteClient_SteamBroadcast_Notification.payload)
}

// -------------------------------------------------------------------

// CRemoteClient_SteamToSteam_Notification

// optional fixed64 steamid = 1;
inline bool CRemoteClient_SteamToSteam_Notification::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CRemoteClient_SteamToSteam_Notification::has_steamid() const {
  return _internal_has_steamid();
}
inline void CRemoteClient_SteamToSteam_Notification::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CRemoteClient_SteamToSteam_Notification::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CRemoteClient_SteamToSteam_Notification::steamid() const {
  // @@protoc_insertion_point(field_get:CRemoteClient_SteamToSteam_Notification.steamid)
  return _internal_steamid();
}
inline void CRemoteClient_SteamToSteam_Notification::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  steamid_ = value;
}
inline void CRemoteClient_SteamToSteam_Notification::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CRemoteClient_SteamToSteam_Notification.steamid)
}

// optional fixed64 src_clientid = 2;
inline bool CRemoteClient_SteamToSteam_Notification::_internal_has_src_clientid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CRemoteClient_SteamToSteam_Notification::has_src_clientid() const {
  return _internal_has_src_clientid();
}
inline void CRemoteClient_SteamToSteam_Notification::clear_src_clientid() {
  src_clientid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CRemoteClient_SteamToSteam_Notification::_internal_src_clientid() const {
  return src_clientid_;
}
inline uint64_t CRemoteClient_SteamToSteam_Notification::src_clientid() const {
  // @@protoc_insertion_point(field_get:CRemoteClient_SteamToSteam_Notification.src_clientid)
  return _internal_src_clientid();
}
inline void CRemoteClient_SteamToSteam_Notification::_internal_set_src_clientid(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  src_clientid_ = value;
}
inline void CRemoteClient_SteamToSteam_Notification::set_src_clientid(uint64_t value) {
  _internal_set_src_clientid(value);
  // @@protoc_insertion_point(field_set:CRemoteClient_SteamToSteam_Notification.src_clientid)
}

// optional fixed64 dst_clientid = 3;
inline bool CRemoteClient_SteamToSteam_Notification::_internal_has_dst_clientid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CRemoteClient_SteamToSteam_Notification::has_dst_clientid() const {
  return _internal_has_dst_clientid();
}
inline void CRemoteClient_SteamToSteam_Notification::clear_dst_clientid() {
  dst_clientid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline uint64_t CRemoteClient_SteamToSteam_Notification::_internal_dst_clientid() const {
  return dst_clientid_;
}
inline uint64_t CRemoteClient_SteamToSteam_Notification::dst_clientid() const {
  // @@protoc_insertion_point(field_get:CRemoteClient_SteamToSteam_Notification.dst_clientid)
  return _internal_dst_clientid();
}
inline void CRemoteClient_SteamToSteam_Notification::_internal_set_dst_clientid(uint64_t value) {
  _has_bits_[0] |= 0x00000008u;
  dst_clientid_ = value;
}
inline void CRemoteClient_SteamToSteam_Notification::set_dst_clientid(uint64_t value) {
  _internal_set_dst_clientid(value);
  // @@protoc_insertion_point(field_set:CRemoteClient_SteamToSteam_Notification.dst_clientid)
}

// optional uint32 secretid = 4;
inline bool CRemoteClient_SteamToSteam_Notification::_internal_has_secretid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CRemoteClient_SteamToSteam_Notification::has_secretid() const {
  return _internal_has_secretid();
}
inline void CRemoteClient_SteamToSteam_Notification::clear_secretid() {
  secretid_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CRemoteClient_SteamToSteam_Notification::_internal_secretid() const {
  return secretid_;
}
inline uint32_t CRemoteClient_SteamToSteam_Notification::secretid() const {
  // @@protoc_insertion_point(field_get:CRemoteClient_SteamToSteam_Notification.secretid)
  return _internal_secretid();
}
inline void CRemoteClient_SteamToSteam_Notification::_internal_set_secretid(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  secretid_ = value;
}
inline void CRemoteClient_SteamToSteam_Notification::set_secretid(uint32_t value) {
  _internal_set_secretid(value);
  // @@protoc_insertion_point(field_set:CRemoteClient_SteamToSteam_Notification.secretid)
}

// optional bytes encrypted_payload = 5;
inline bool CRemoteClient_SteamToSteam_Notification::_internal_has_encrypted_payload() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CRemoteClient_SteamToSteam_Notification::has_encrypted_payload() const {
  return _internal_has_encrypted_payload();
}
inline void CRemoteClient_SteamToSteam_Notification::clear_encrypted_payload() {
  encrypted_payload_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CRemoteClient_SteamToSteam_Notification::encrypted_payload() const {
  // @@protoc_insertion_point(field_get:CRemoteClient_SteamToSteam_Notification.encrypted_payload)
  return _internal_encrypted_payload();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CRemoteClient_SteamToSteam_Notification::set_encrypted_payload(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 encrypted_payload_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CRemoteClient_SteamToSteam_Notification.encrypted_payload)
}
inline std::string* CRemoteClient_SteamToSteam_Notification::mutable_encrypted_payload() {
  std::string* _s = _internal_mutable_encrypted_payload();
  // @@protoc_insertion_point(field_mutable:CRemoteClient_SteamToSteam_Notification.encrypted_payload)
  return _s;
}
inline const std::string& CRemoteClient_SteamToSteam_Notification::_internal_encrypted_payload() const {
  return encrypted_payload_.Get();
}
inline void CRemoteClient_SteamToSteam_Notification::_internal_set_encrypted_payload(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  encrypted_payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CRemoteClient_SteamToSteam_Notification::_internal_mutable_encrypted_payload() {
  _has_bits_[0] |= 0x00000001u;
  return encrypted_payload_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CRemoteClient_SteamToSteam_Notification::release_encrypted_payload() {
  // @@protoc_insertion_point(field_release:CRemoteClient_SteamToSteam_Notification.encrypted_payload)
  if (!_internal_has_encrypted_payload()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = encrypted_payload_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (encrypted_payload_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    encrypted_payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CRemoteClient_SteamToSteam_Notification::set_allocated_encrypted_payload(std::string* encrypted_payload) {
  if (encrypted_payload != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  encrypted_payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encrypted_payload,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (encrypted_payload_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    encrypted_payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CRemoteClient_SteamToSteam_Notification.encrypted_payload)
}

// -------------------------------------------------------------------

// CRemotePlay_SessionStarted_Request

// optional uint32 host_account_id = 1;
inline bool CRemotePlay_SessionStarted_Request::_internal_has_host_account_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CRemotePlay_SessionStarted_Request::has_host_account_id() const {
  return _internal_has_host_account_id();
}
inline void CRemotePlay_SessionStarted_Request::clear_host_account_id() {
  host_account_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CRemotePlay_SessionStarted_Request::_internal_host_account_id() const {
  return host_account_id_;
}
inline uint32_t CRemotePlay_SessionStarted_Request::host_account_id() const {
  // @@protoc_insertion_point(field_get:CRemotePlay_SessionStarted_Request.host_account_id)
  return _internal_host_account_id();
}
inline void CRemotePlay_SessionStarted_Request::_internal_set_host_account_id(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  host_account_id_ = value;
}
inline void CRemotePlay_SessionStarted_Request::set_host_account_id(uint32_t value) {
  _internal_set_host_account_id(value);
  // @@protoc_insertion_point(field_set:CRemotePlay_SessionStarted_Request.host_account_id)
}

// optional uint32 client_account_id = 2;
inline bool CRemotePlay_SessionStarted_Request::_internal_has_client_account_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CRemotePlay_SessionStarted_Request::has_client_account_id() const {
  return _internal_has_client_account_id();
}
inline void CRemotePlay_SessionStarted_Request::clear_client_account_id() {
  client_account_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CRemotePlay_SessionStarted_Request::_internal_client_account_id() const {
  return client_account_id_;
}
inline uint32_t CRemotePlay_SessionStarted_Request::client_account_id() const {
  // @@protoc_insertion_point(field_get:CRemotePlay_SessionStarted_Request.client_account_id)
  return _internal_client_account_id();
}
inline void CRemotePlay_SessionStarted_Request::_internal_set_client_account_id(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  client_account_id_ = value;
}
inline void CRemotePlay_SessionStarted_Request::set_client_account_id(uint32_t value) {
  _internal_set_client_account_id(value);
  // @@protoc_insertion_point(field_set:CRemotePlay_SessionStarted_Request.client_account_id)
}

// optional uint32 appid = 3;
inline bool CRemotePlay_SessionStarted_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CRemotePlay_SessionStarted_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CRemotePlay_SessionStarted_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CRemotePlay_SessionStarted_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CRemotePlay_SessionStarted_Request::appid() const {
  // @@protoc_insertion_point(field_get:CRemotePlay_SessionStarted_Request.appid)
  return _internal_appid();
}
inline void CRemotePlay_SessionStarted_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  appid_ = value;
}
inline void CRemotePlay_SessionStarted_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CRemotePlay_SessionStarted_Request.appid)
}

// optional int32 device_form_factor = 4;
inline bool CRemotePlay_SessionStarted_Request::_internal_has_device_form_factor() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CRemotePlay_SessionStarted_Request::has_device_form_factor() const {
  return _internal_has_device_form_factor();
}
inline void CRemotePlay_SessionStarted_Request::clear_device_form_factor() {
  device_form_factor_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t CRemotePlay_SessionStarted_Request::_internal_device_form_factor() const {
  return device_form_factor_;
}
inline int32_t CRemotePlay_SessionStarted_Request::device_form_factor() const {
  // @@protoc_insertion_point(field_get:CRemotePlay_SessionStarted_Request.device_form_factor)
  return _internal_device_form_factor();
}
inline void CRemotePlay_SessionStarted_Request::_internal_set_device_form_factor(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  device_form_factor_ = value;
}
inline void CRemotePlay_SessionStarted_Request::set_device_form_factor(int32_t value) {
  _internal_set_device_form_factor(value);
  // @@protoc_insertion_point(field_set:CRemotePlay_SessionStarted_Request.device_form_factor)
}

// optional bool remote_play_together = 5;
inline bool CRemotePlay_SessionStarted_Request::_internal_has_remote_play_together() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CRemotePlay_SessionStarted_Request::has_remote_play_together() const {
  return _internal_has_remote_play_together();
}
inline void CRemotePlay_SessionStarted_Request::clear_remote_play_together() {
  remote_play_together_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CRemotePlay_SessionStarted_Request::_internal_remote_play_together() const {
  return remote_play_together_;
}
inline bool CRemotePlay_SessionStarted_Request::remote_play_together() const {
  // @@protoc_insertion_point(field_get:CRemotePlay_SessionStarted_Request.remote_play_together)
  return _internal_remote_play_together();
}
inline void CRemotePlay_SessionStarted_Request::_internal_set_remote_play_together(bool value) {
  _has_bits_[0] |= 0x00000010u;
  remote_play_together_ = value;
}
inline void CRemotePlay_SessionStarted_Request::set_remote_play_together(bool value) {
  _internal_set_remote_play_together(value);
  // @@protoc_insertion_point(field_set:CRemotePlay_SessionStarted_Request.remote_play_together)
}

// optional bool guest_session = 6;
inline bool CRemotePlay_SessionStarted_Request::_internal_has_guest_session() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CRemotePlay_SessionStarted_Request::has_guest_session() const {
  return _internal_has_guest_session();
}
inline void CRemotePlay_SessionStarted_Request::clear_guest_session() {
  guest_session_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CRemotePlay_SessionStarted_Request::_internal_guest_session() const {
  return guest_session_;
}
inline bool CRemotePlay_SessionStarted_Request::guest_session() const {
  // @@protoc_insertion_point(field_get:CRemotePlay_SessionStarted_Request.guest_session)
  return _internal_guest_session();
}
inline void CRemotePlay_SessionStarted_Request::_internal_set_guest_session(bool value) {
  _has_bits_[0] |= 0x00000020u;
  guest_session_ = value;
}
inline void CRemotePlay_SessionStarted_Request::set_guest_session(bool value) {
  _internal_set_guest_session(value);
  // @@protoc_insertion_point(field_set:CRemotePlay_SessionStarted_Request.guest_session)
}

// -------------------------------------------------------------------

// CRemotePlay_SessionStarted_Response

// optional fixed64 record_id = 1;
inline bool CRemotePlay_SessionStarted_Response::_internal_has_record_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CRemotePlay_SessionStarted_Response::has_record_id() const {
  return _internal_has_record_id();
}
inline void CRemotePlay_SessionStarted_Response::clear_record_id() {
  record_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CRemotePlay_SessionStarted_Response::_internal_record_id() const {
  return record_id_;
}
inline uint64_t CRemotePlay_SessionStarted_Response::record_id() const {
  // @@protoc_insertion_point(field_get:CRemotePlay_SessionStarted_Response.record_id)
  return _internal_record_id();
}
inline void CRemotePlay_SessionStarted_Response::_internal_set_record_id(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  record_id_ = value;
}
inline void CRemotePlay_SessionStarted_Response::set_record_id(uint64_t value) {
  _internal_set_record_id(value);
  // @@protoc_insertion_point(field_set:CRemotePlay_SessionStarted_Response.record_id)
}

// -------------------------------------------------------------------

// CRemotePlay_SessionStopped_Notification

// optional fixed64 record_id = 1;
inline bool CRemotePlay_SessionStopped_Notification::_internal_has_record_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CRemotePlay_SessionStopped_Notification::has_record_id() const {
  return _internal_has_record_id();
}
inline void CRemotePlay_SessionStopped_Notification::clear_record_id() {
  record_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CRemotePlay_SessionStopped_Notification::_internal_record_id() const {
  return record_id_;
}
inline uint64_t CRemotePlay_SessionStopped_Notification::record_id() const {
  // @@protoc_insertion_point(field_get:CRemotePlay_SessionStopped_Notification.record_id)
  return _internal_record_id();
}
inline void CRemotePlay_SessionStopped_Notification::_internal_set_record_id(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  record_id_ = value;
}
inline void CRemotePlay_SessionStopped_Notification::set_record_id(uint64_t value) {
  _internal_set_record_id(value);
  // @@protoc_insertion_point(field_set:CRemotePlay_SessionStopped_Notification.record_id)
}

// optional bool used_x264 = 2;
inline bool CRemotePlay_SessionStopped_Notification::_internal_has_used_x264() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CRemotePlay_SessionStopped_Notification::has_used_x264() const {
  return _internal_has_used_x264();
}
inline void CRemotePlay_SessionStopped_Notification::clear_used_x264() {
  used_x264_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CRemotePlay_SessionStopped_Notification::_internal_used_x264() const {
  return used_x264_;
}
inline bool CRemotePlay_SessionStopped_Notification::used_x264() const {
  // @@protoc_insertion_point(field_get:CRemotePlay_SessionStopped_Notification.used_x264)
  return _internal_used_x264();
}
inline void CRemotePlay_SessionStopped_Notification::_internal_set_used_x264(bool value) {
  _has_bits_[0] |= 0x00000002u;
  used_x264_ = value;
}
inline void CRemotePlay_SessionStopped_Notification::set_used_x264(bool value) {
  _internal_set_used_x264(value);
  // @@protoc_insertion_point(field_set:CRemotePlay_SessionStopped_Notification.used_x264)
}

// optional bool used_h264 = 3;
inline bool CRemotePlay_SessionStopped_Notification::_internal_has_used_h264() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CRemotePlay_SessionStopped_Notification::has_used_h264() const {
  return _internal_has_used_h264();
}
inline void CRemotePlay_SessionStopped_Notification::clear_used_h264() {
  used_h264_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CRemotePlay_SessionStopped_Notification::_internal_used_h264() const {
  return used_h264_;
}
inline bool CRemotePlay_SessionStopped_Notification::used_h264() const {
  // @@protoc_insertion_point(field_get:CRemotePlay_SessionStopped_Notification.used_h264)
  return _internal_used_h264();
}
inline void CRemotePlay_SessionStopped_Notification::_internal_set_used_h264(bool value) {
  _has_bits_[0] |= 0x00000004u;
  used_h264_ = value;
}
inline void CRemotePlay_SessionStopped_Notification::set_used_h264(bool value) {
  _internal_set_used_h264(value);
  // @@protoc_insertion_point(field_set:CRemotePlay_SessionStopped_Notification.used_h264)
}

// optional bool used_hevc = 4;
inline bool CRemotePlay_SessionStopped_Notification::_internal_has_used_hevc() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CRemotePlay_SessionStopped_Notification::has_used_hevc() const {
  return _internal_has_used_hevc();
}
inline void CRemotePlay_SessionStopped_Notification::clear_used_hevc() {
  used_hevc_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CRemotePlay_SessionStopped_Notification::_internal_used_hevc() const {
  return used_hevc_;
}
inline bool CRemotePlay_SessionStopped_Notification::used_hevc() const {
  // @@protoc_insertion_point(field_get:CRemotePlay_SessionStopped_Notification.used_hevc)
  return _internal_used_hevc();
}
inline void CRemotePlay_SessionStopped_Notification::_internal_set_used_hevc(bool value) {
  _has_bits_[0] |= 0x00000008u;
  used_hevc_ = value;
}
inline void CRemotePlay_SessionStopped_Notification::set_used_hevc(bool value) {
  _internal_set_used_hevc(value);
  // @@protoc_insertion_point(field_set:CRemotePlay_SessionStopped_Notification.used_hevc)
}

// -------------------------------------------------------------------

// CRemotePlayTogether_Notification_Player

// optional fixed64 steamid = 1;
inline bool CRemotePlayTogether_Notification_Player::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CRemotePlayTogether_Notification_Player::has_steamid() const {
  return _internal_has_steamid();
}
inline void CRemotePlayTogether_Notification_Player::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CRemotePlayTogether_Notification_Player::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CRemotePlayTogether_Notification_Player::steamid() const {
  // @@protoc_insertion_point(field_get:CRemotePlayTogether_Notification.Player.steamid)
  return _internal_steamid();
}
inline void CRemotePlayTogether_Notification_Player::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  steamid_ = value;
}
inline void CRemotePlayTogether_Notification_Player::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CRemotePlayTogether_Notification.Player.steamid)
}

// optional uint32 guestid = 2;
inline bool CRemotePlayTogether_Notification_Player::_internal_has_guestid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CRemotePlayTogether_Notification_Player::has_guestid() const {
  return _internal_has_guestid();
}
inline void CRemotePlayTogether_Notification_Player::clear_guestid() {
  guestid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CRemotePlayTogether_Notification_Player::_internal_guestid() const {
  return guestid_;
}
inline uint32_t CRemotePlayTogether_Notification_Player::guestid() const {
  // @@protoc_insertion_point(field_get:CRemotePlayTogether_Notification.Player.guestid)
  return _internal_guestid();
}
inline void CRemotePlayTogether_Notification_Player::_internal_set_guestid(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  guestid_ = value;
}
inline void CRemotePlayTogether_Notification_Player::set_guestid(uint32_t value) {
  _internal_set_guestid(value);
  // @@protoc_insertion_point(field_set:CRemotePlayTogether_Notification.Player.guestid)
}

// optional bytes avatar_hash = 3;
inline bool CRemotePlayTogether_Notification_Player::_internal_has_avatar_hash() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CRemotePlayTogether_Notification_Player::has_avatar_hash() const {
  return _internal_has_avatar_hash();
}
inline void CRemotePlayTogether_Notification_Player::clear_avatar_hash() {
  avatar_hash_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CRemotePlayTogether_Notification_Player::avatar_hash() const {
  // @@protoc_insertion_point(field_get:CRemotePlayTogether_Notification.Player.avatar_hash)
  return _internal_avatar_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CRemotePlayTogether_Notification_Player::set_avatar_hash(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 avatar_hash_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CRemotePlayTogether_Notification.Player.avatar_hash)
}
inline std::string* CRemotePlayTogether_Notification_Player::mutable_avatar_hash() {
  std::string* _s = _internal_mutable_avatar_hash();
  // @@protoc_insertion_point(field_mutable:CRemotePlayTogether_Notification.Player.avatar_hash)
  return _s;
}
inline const std::string& CRemotePlayTogether_Notification_Player::_internal_avatar_hash() const {
  return avatar_hash_.Get();
}
inline void CRemotePlayTogether_Notification_Player::_internal_set_avatar_hash(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  avatar_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CRemotePlayTogether_Notification_Player::_internal_mutable_avatar_hash() {
  _has_bits_[0] |= 0x00000001u;
  return avatar_hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CRemotePlayTogether_Notification_Player::release_avatar_hash() {
  // @@protoc_insertion_point(field_release:CRemotePlayTogether_Notification.Player.avatar_hash)
  if (!_internal_has_avatar_hash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = avatar_hash_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (avatar_hash_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    avatar_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CRemotePlayTogether_Notification_Player::set_allocated_avatar_hash(std::string* avatar_hash) {
  if (avatar_hash != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  avatar_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avatar_hash,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (avatar_hash_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    avatar_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CRemotePlayTogether_Notification.Player.avatar_hash)
}

// optional bool keyboard_enabled = 4;
inline bool CRemotePlayTogether_Notification_Player::_internal_has_keyboard_enabled() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CRemotePlayTogether_Notification_Player::has_keyboard_enabled() const {
  return _internal_has_keyboard_enabled();
}
inline void CRemotePlayTogether_Notification_Player::clear_keyboard_enabled() {
  keyboard_enabled_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CRemotePlayTogether_Notification_Player::_internal_keyboard_enabled() const {
  return keyboard_enabled_;
}
inline bool CRemotePlayTogether_Notification_Player::keyboard_enabled() const {
  // @@protoc_insertion_point(field_get:CRemotePlayTogether_Notification.Player.keyboard_enabled)
  return _internal_keyboard_enabled();
}
inline void CRemotePlayTogether_Notification_Player::_internal_set_keyboard_enabled(bool value) {
  _has_bits_[0] |= 0x00000008u;
  keyboard_enabled_ = value;
}
inline void CRemotePlayTogether_Notification_Player::set_keyboard_enabled(bool value) {
  _internal_set_keyboard_enabled(value);
  // @@protoc_insertion_point(field_set:CRemotePlayTogether_Notification.Player.keyboard_enabled)
}

// optional bool mouse_enabled = 5;
inline bool CRemotePlayTogether_Notification_Player::_internal_has_mouse_enabled() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CRemotePlayTogether_Notification_Player::has_mouse_enabled() const {
  return _internal_has_mouse_enabled();
}
inline void CRemotePlayTogether_Notification_Player::clear_mouse_enabled() {
  mouse_enabled_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CRemotePlayTogether_Notification_Player::_internal_mouse_enabled() const {
  return mouse_enabled_;
}
inline bool CRemotePlayTogether_Notification_Player::mouse_enabled() const {
  // @@protoc_insertion_point(field_get:CRemotePlayTogether_Notification.Player.mouse_enabled)
  return _internal_mouse_enabled();
}
inline void CRemotePlayTogether_Notification_Player::_internal_set_mouse_enabled(bool value) {
  _has_bits_[0] |= 0x00000010u;
  mouse_enabled_ = value;
}
inline void CRemotePlayTogether_Notification_Player::set_mouse_enabled(bool value) {
  _internal_set_mouse_enabled(value);
  // @@protoc_insertion_point(field_set:CRemotePlayTogether_Notification.Player.mouse_enabled)
}

// optional bool controller_enabled = 6;
inline bool CRemotePlayTogether_Notification_Player::_internal_has_controller_enabled() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CRemotePlayTogether_Notification_Player::has_controller_enabled() const {
  return _internal_has_controller_enabled();
}
inline void CRemotePlayTogether_Notification_Player::clear_controller_enabled() {
  controller_enabled_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CRemotePlayTogether_Notification_Player::_internal_controller_enabled() const {
  return controller_enabled_;
}
inline bool CRemotePlayTogether_Notification_Player::controller_enabled() const {
  // @@protoc_insertion_point(field_get:CRemotePlayTogether_Notification.Player.controller_enabled)
  return _internal_controller_enabled();
}
inline void CRemotePlayTogether_Notification_Player::_internal_set_controller_enabled(bool value) {
  _has_bits_[0] |= 0x00000020u;
  controller_enabled_ = value;
}
inline void CRemotePlayTogether_Notification_Player::set_controller_enabled(bool value) {
  _internal_set_controller_enabled(value);
  // @@protoc_insertion_point(field_set:CRemotePlayTogether_Notification.Player.controller_enabled)
}

// -------------------------------------------------------------------

// CRemotePlayTogether_Notification_ControllerSlot_obsolete

// optional uint32 slotid = 1;
inline bool CRemotePlayTogether_Notification_ControllerSlot_obsolete::_internal_has_slotid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CRemotePlayTogether_Notification_ControllerSlot_obsolete::has_slotid() const {
  return _internal_has_slotid();
}
inline void CRemotePlayTogether_Notification_ControllerSlot_obsolete::clear_slotid() {
  slotid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CRemotePlayTogether_Notification_ControllerSlot_obsolete::_internal_slotid() const {
  return slotid_;
}
inline uint32_t CRemotePlayTogether_Notification_ControllerSlot_obsolete::slotid() const {
  // @@protoc_insertion_point(field_get:CRemotePlayTogether_Notification.ControllerSlot_obsolete.slotid)
  return _internal_slotid();
}
inline void CRemotePlayTogether_Notification_ControllerSlot_obsolete::_internal_set_slotid(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  slotid_ = value;
}
inline void CRemotePlayTogether_Notification_ControllerSlot_obsolete::set_slotid(uint32_t value) {
  _internal_set_slotid(value);
  // @@protoc_insertion_point(field_set:CRemotePlayTogether_Notification.ControllerSlot_obsolete.slotid)
}

// optional fixed64 steamid = 2;
inline bool CRemotePlayTogether_Notification_ControllerSlot_obsolete::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CRemotePlayTogether_Notification_ControllerSlot_obsolete::has_steamid() const {
  return _internal_has_steamid();
}
inline void CRemotePlayTogether_Notification_ControllerSlot_obsolete::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CRemotePlayTogether_Notification_ControllerSlot_obsolete::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CRemotePlayTogether_Notification_ControllerSlot_obsolete::steamid() const {
  // @@protoc_insertion_point(field_get:CRemotePlayTogether_Notification.ControllerSlot_obsolete.steamid)
  return _internal_steamid();
}
inline void CRemotePlayTogether_Notification_ControllerSlot_obsolete::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
}
inline void CRemotePlayTogether_Notification_ControllerSlot_obsolete::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CRemotePlayTogether_Notification.ControllerSlot_obsolete.steamid)
}

// -------------------------------------------------------------------

// CRemotePlayTogether_Notification_ControllerSlot

// optional uint32 slotid = 1;
inline bool CRemotePlayTogether_Notification_ControllerSlot::_internal_has_slotid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CRemotePlayTogether_Notification_ControllerSlot::has_slotid() const {
  return _internal_has_slotid();
}
inline void CRemotePlayTogether_Notification_ControllerSlot::clear_slotid() {
  slotid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CRemotePlayTogether_Notification_ControllerSlot::_internal_slotid() const {
  return slotid_;
}
inline uint32_t CRemotePlayTogether_Notification_ControllerSlot::slotid() const {
  // @@protoc_insertion_point(field_get:CRemotePlayTogether_Notification.ControllerSlot.slotid)
  return _internal_slotid();
}
inline void CRemotePlayTogether_Notification_ControllerSlot::_internal_set_slotid(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  slotid_ = value;
}
inline void CRemotePlayTogether_Notification_ControllerSlot::set_slotid(uint32_t value) {
  _internal_set_slotid(value);
  // @@protoc_insertion_point(field_set:CRemotePlayTogether_Notification.ControllerSlot.slotid)
}

// optional .CRemotePlayTogether_Notification.Player player = 2;
inline bool CRemotePlayTogether_Notification_ControllerSlot::_internal_has_player() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || player_ != nullptr);
  return value;
}
inline bool CRemotePlayTogether_Notification_ControllerSlot::has_player() const {
  return _internal_has_player();
}
inline void CRemotePlayTogether_Notification_ControllerSlot::clear_player() {
  if (player_ != nullptr) player_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CRemotePlayTogether_Notification_Player& CRemotePlayTogether_Notification_ControllerSlot::_internal_player() const {
  const ::CRemotePlayTogether_Notification_Player* p = player_;
  return p != nullptr ? *p : reinterpret_cast<const ::CRemotePlayTogether_Notification_Player&>(
      ::_CRemotePlayTogether_Notification_Player_default_instance_);
}
inline const ::CRemotePlayTogether_Notification_Player& CRemotePlayTogether_Notification_ControllerSlot::player() const {
  // @@protoc_insertion_point(field_get:CRemotePlayTogether_Notification.ControllerSlot.player)
  return _internal_player();
}
inline void CRemotePlayTogether_Notification_ControllerSlot::unsafe_arena_set_allocated_player(
    ::CRemotePlayTogether_Notification_Player* player) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  player_ = player;
  if (player) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CRemotePlayTogether_Notification.ControllerSlot.player)
}
inline ::CRemotePlayTogether_Notification_Player* CRemotePlayTogether_Notification_ControllerSlot::release_player() {
  _has_bits_[0] &= ~0x00000001u;
  ::CRemotePlayTogether_Notification_Player* temp = player_;
  player_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CRemotePlayTogether_Notification_Player* CRemotePlayTogether_Notification_ControllerSlot::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:CRemotePlayTogether_Notification.ControllerSlot.player)
  _has_bits_[0] &= ~0x00000001u;
  ::CRemotePlayTogether_Notification_Player* temp = player_;
  player_ = nullptr;
  return temp;
}
inline ::CRemotePlayTogether_Notification_Player* CRemotePlayTogether_Notification_ControllerSlot::_internal_mutable_player() {
  _has_bits_[0] |= 0x00000001u;
  if (player_ == nullptr) {
    auto* p = CreateMaybeMessage<::CRemotePlayTogether_Notification_Player>(GetArenaForAllocation());
    player_ = p;
  }
  return player_;
}
inline ::CRemotePlayTogether_Notification_Player* CRemotePlayTogether_Notification_ControllerSlot::mutable_player() {
  ::CRemotePlayTogether_Notification_Player* _msg = _internal_mutable_player();
  // @@protoc_insertion_point(field_mutable:CRemotePlayTogether_Notification.ControllerSlot.player)
  return _msg;
}
inline void CRemotePlayTogether_Notification_ControllerSlot::set_allocated_player(::CRemotePlayTogether_Notification_Player* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete player_;
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CRemotePlayTogether_Notification_Player>::GetOwningArena(player);
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:CRemotePlayTogether_Notification.ControllerSlot.player)
}

// optional int32 controller_type = 3;
inline bool CRemotePlayTogether_Notification_ControllerSlot::_internal_has_controller_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CRemotePlayTogether_Notification_ControllerSlot::has_controller_type() const {
  return _internal_has_controller_type();
}
inline void CRemotePlayTogether_Notification_ControllerSlot::clear_controller_type() {
  controller_type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t CRemotePlayTogether_Notification_ControllerSlot::_internal_controller_type() const {
  return controller_type_;
}
inline int32_t CRemotePlayTogether_Notification_ControllerSlot::controller_type() const {
  // @@protoc_insertion_point(field_get:CRemotePlayTogether_Notification.ControllerSlot.controller_type)
  return _internal_controller_type();
}
inline void CRemotePlayTogether_Notification_ControllerSlot::_internal_set_controller_type(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  controller_type_ = value;
}
inline void CRemotePlayTogether_Notification_ControllerSlot::set_controller_type(int32_t value) {
  _internal_set_controller_type(value);
  // @@protoc_insertion_point(field_set:CRemotePlayTogether_Notification.ControllerSlot.controller_type)
}

// -------------------------------------------------------------------

// CRemotePlayTogether_Notification_GroupUpdated

// optional fixed64 host_steamid = 1;
inline bool CRemotePlayTogether_Notification_GroupUpdated::_internal_has_host_steamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CRemotePlayTogether_Notification_GroupUpdated::has_host_steamid() const {
  return _internal_has_host_steamid();
}
inline void CRemotePlayTogether_Notification_GroupUpdated::clear_host_steamid() {
  host_steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CRemotePlayTogether_Notification_GroupUpdated::_internal_host_steamid() const {
  return host_steamid_;
}
inline uint64_t CRemotePlayTogether_Notification_GroupUpdated::host_steamid() const {
  // @@protoc_insertion_point(field_get:CRemotePlayTogether_Notification.GroupUpdated.host_steamid)
  return _internal_host_steamid();
}
inline void CRemotePlayTogether_Notification_GroupUpdated::_internal_set_host_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  host_steamid_ = value;
}
inline void CRemotePlayTogether_Notification_GroupUpdated::set_host_steamid(uint64_t value) {
  _internal_set_host_steamid(value);
  // @@protoc_insertion_point(field_set:CRemotePlayTogether_Notification.GroupUpdated.host_steamid)
}

// optional fixed64 host_clientid = 2;
inline bool CRemotePlayTogether_Notification_GroupUpdated::_internal_has_host_clientid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CRemotePlayTogether_Notification_GroupUpdated::has_host_clientid() const {
  return _internal_has_host_clientid();
}
inline void CRemotePlayTogether_Notification_GroupUpdated::clear_host_clientid() {
  host_clientid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CRemotePlayTogether_Notification_GroupUpdated::_internal_host_clientid() const {
  return host_clientid_;
}
inline uint64_t CRemotePlayTogether_Notification_GroupUpdated::host_clientid() const {
  // @@protoc_insertion_point(field_get:CRemotePlayTogether_Notification.GroupUpdated.host_clientid)
  return _internal_host_clientid();
}
inline void CRemotePlayTogether_Notification_GroupUpdated::_internal_set_host_clientid(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  host_clientid_ = value;
}
inline void CRemotePlayTogether_Notification_GroupUpdated::set_host_clientid(uint64_t value) {
  _internal_set_host_clientid(value);
  // @@protoc_insertion_point(field_set:CRemotePlayTogether_Notification.GroupUpdated.host_clientid)
}

// repeated fixed64 players_obsolete = 3;
inline int CRemotePlayTogether_Notification_GroupUpdated::_internal_players_obsolete_size() const {
  return players_obsolete_.size();
}
inline int CRemotePlayTogether_Notification_GroupUpdated::players_obsolete_size() const {
  return _internal_players_obsolete_size();
}
inline void CRemotePlayTogether_Notification_GroupUpdated::clear_players_obsolete() {
  players_obsolete_.Clear();
}
inline uint64_t CRemotePlayTogether_Notification_GroupUpdated::_internal_players_obsolete(int index) const {
  return players_obsolete_.Get(index);
}
inline uint64_t CRemotePlayTogether_Notification_GroupUpdated::players_obsolete(int index) const {
  // @@protoc_insertion_point(field_get:CRemotePlayTogether_Notification.GroupUpdated.players_obsolete)
  return _internal_players_obsolete(index);
}
inline void CRemotePlayTogether_Notification_GroupUpdated::set_players_obsolete(int index, uint64_t value) {
  players_obsolete_.Set(index, value);
  // @@protoc_insertion_point(field_set:CRemotePlayTogether_Notification.GroupUpdated.players_obsolete)
}
inline void CRemotePlayTogether_Notification_GroupUpdated::_internal_add_players_obsolete(uint64_t value) {
  players_obsolete_.Add(value);
}
inline void CRemotePlayTogether_Notification_GroupUpdated::add_players_obsolete(uint64_t value) {
  _internal_add_players_obsolete(value);
  // @@protoc_insertion_point(field_add:CRemotePlayTogether_Notification.GroupUpdated.players_obsolete)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CRemotePlayTogether_Notification_GroupUpdated::_internal_players_obsolete() const {
  return players_obsolete_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CRemotePlayTogether_Notification_GroupUpdated::players_obsolete() const {
  // @@protoc_insertion_point(field_list:CRemotePlayTogether_Notification.GroupUpdated.players_obsolete)
  return _internal_players_obsolete();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CRemotePlayTogether_Notification_GroupUpdated::_internal_mutable_players_obsolete() {
  return &players_obsolete_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CRemotePlayTogether_Notification_GroupUpdated::mutable_players_obsolete() {
  // @@protoc_insertion_point(field_mutable_list:CRemotePlayTogether_Notification.GroupUpdated.players_obsolete)
  return _internal_mutable_players_obsolete();
}

// optional fixed64 host_gameid = 4;
inline bool CRemotePlayTogether_Notification_GroupUpdated::_internal_has_host_gameid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CRemotePlayTogether_Notification_GroupUpdated::has_host_gameid() const {
  return _internal_has_host_gameid();
}
inline void CRemotePlayTogether_Notification_GroupUpdated::clear_host_gameid() {
  host_gameid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CRemotePlayTogether_Notification_GroupUpdated::_internal_host_gameid() const {
  return host_gameid_;
}
inline uint64_t CRemotePlayTogether_Notification_GroupUpdated::host_gameid() const {
  // @@protoc_insertion_point(field_get:CRemotePlayTogether_Notification.GroupUpdated.host_gameid)
  return _internal_host_gameid();
}
inline void CRemotePlayTogether_Notification_GroupUpdated::_internal_set_host_gameid(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  host_gameid_ = value;
}
inline void CRemotePlayTogether_Notification_GroupUpdated::set_host_gameid(uint64_t value) {
  _internal_set_host_gameid(value);
  // @@protoc_insertion_point(field_set:CRemotePlayTogether_Notification.GroupUpdated.host_gameid)
}

// repeated .CRemotePlayTogether_Notification.ControllerSlot_obsolete controller_slots_obsolete = 5;
inline int CRemotePlayTogether_Notification_GroupUpdated::_internal_controller_slots_obsolete_size() const {
  return controller_slots_obsolete_.size();
}
inline int CRemotePlayTogether_Notification_GroupUpdated::controller_slots_obsolete_size() const {
  return _internal_controller_slots_obsolete_size();
}
inline void CRemotePlayTogether_Notification_GroupUpdated::clear_controller_slots_obsolete() {
  controller_slots_obsolete_.Clear();
}
inline ::CRemotePlayTogether_Notification_ControllerSlot_obsolete* CRemotePlayTogether_Notification_GroupUpdated::mutable_controller_slots_obsolete(int index) {
  // @@protoc_insertion_point(field_mutable:CRemotePlayTogether_Notification.GroupUpdated.controller_slots_obsolete)
  return controller_slots_obsolete_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CRemotePlayTogether_Notification_ControllerSlot_obsolete >*
CRemotePlayTogether_Notification_GroupUpdated::mutable_controller_slots_obsolete() {
  // @@protoc_insertion_point(field_mutable_list:CRemotePlayTogether_Notification.GroupUpdated.controller_slots_obsolete)
  return &controller_slots_obsolete_;
}
inline const ::CRemotePlayTogether_Notification_ControllerSlot_obsolete& CRemotePlayTogether_Notification_GroupUpdated::_internal_controller_slots_obsolete(int index) const {
  return controller_slots_obsolete_.Get(index);
}
inline const ::CRemotePlayTogether_Notification_ControllerSlot_obsolete& CRemotePlayTogether_Notification_GroupUpdated::controller_slots_obsolete(int index) const {
  // @@protoc_insertion_point(field_get:CRemotePlayTogether_Notification.GroupUpdated.controller_slots_obsolete)
  return _internal_controller_slots_obsolete(index);
}
inline ::CRemotePlayTogether_Notification_ControllerSlot_obsolete* CRemotePlayTogether_Notification_GroupUpdated::_internal_add_controller_slots_obsolete() {
  return controller_slots_obsolete_.Add();
}
inline ::CRemotePlayTogether_Notification_ControllerSlot_obsolete* CRemotePlayTogether_Notification_GroupUpdated::add_controller_slots_obsolete() {
  ::CRemotePlayTogether_Notification_ControllerSlot_obsolete* _add = _internal_add_controller_slots_obsolete();
  // @@protoc_insertion_point(field_add:CRemotePlayTogether_Notification.GroupUpdated.controller_slots_obsolete)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CRemotePlayTogether_Notification_ControllerSlot_obsolete >&
CRemotePlayTogether_Notification_GroupUpdated::controller_slots_obsolete() const {
  // @@protoc_insertion_point(field_list:CRemotePlayTogether_Notification.GroupUpdated.controller_slots_obsolete)
  return controller_slots_obsolete_;
}

// optional bool has_new_players = 6;
inline bool CRemotePlayTogether_Notification_GroupUpdated::_internal_has_has_new_players() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CRemotePlayTogether_Notification_GroupUpdated::has_has_new_players() const {
  return _internal_has_has_new_players();
}
inline void CRemotePlayTogether_Notification_GroupUpdated::clear_has_new_players() {
  has_new_players_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CRemotePlayTogether_Notification_GroupUpdated::_internal_has_new_players() const {
  return has_new_players_;
}
inline bool CRemotePlayTogether_Notification_GroupUpdated::has_new_players() const {
  // @@protoc_insertion_point(field_get:CRemotePlayTogether_Notification.GroupUpdated.has_new_players)
  return _internal_has_new_players();
}
inline void CRemotePlayTogether_Notification_GroupUpdated::_internal_set_has_new_players(bool value) {
  _has_bits_[0] |= 0x00000008u;
  has_new_players_ = value;
}
inline void CRemotePlayTogether_Notification_GroupUpdated::set_has_new_players(bool value) {
  _internal_set_has_new_players(value);
  // @@protoc_insertion_point(field_set:CRemotePlayTogether_Notification.GroupUpdated.has_new_players)
}

// repeated .CRemotePlayTogether_Notification.Player player_slots = 7;
inline int CRemotePlayTogether_Notification_GroupUpdated::_internal_player_slots_size() const {
  return player_slots_.size();
}
inline int CRemotePlayTogether_Notification_GroupUpdated::player_slots_size() const {
  return _internal_player_slots_size();
}
inline void CRemotePlayTogether_Notification_GroupUpdated::clear_player_slots() {
  player_slots_.Clear();
}
inline ::CRemotePlayTogether_Notification_Player* CRemotePlayTogether_Notification_GroupUpdated::mutable_player_slots(int index) {
  // @@protoc_insertion_point(field_mutable:CRemotePlayTogether_Notification.GroupUpdated.player_slots)
  return player_slots_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CRemotePlayTogether_Notification_Player >*
CRemotePlayTogether_Notification_GroupUpdated::mutable_player_slots() {
  // @@protoc_insertion_point(field_mutable_list:CRemotePlayTogether_Notification.GroupUpdated.player_slots)
  return &player_slots_;
}
inline const ::CRemotePlayTogether_Notification_Player& CRemotePlayTogether_Notification_GroupUpdated::_internal_player_slots(int index) const {
  return player_slots_.Get(index);
}
inline const ::CRemotePlayTogether_Notification_Player& CRemotePlayTogether_Notification_GroupUpdated::player_slots(int index) const {
  // @@protoc_insertion_point(field_get:CRemotePlayTogether_Notification.GroupUpdated.player_slots)
  return _internal_player_slots(index);
}
inline ::CRemotePlayTogether_Notification_Player* CRemotePlayTogether_Notification_GroupUpdated::_internal_add_player_slots() {
  return player_slots_.Add();
}
inline ::CRemotePlayTogether_Notification_Player* CRemotePlayTogether_Notification_GroupUpdated::add_player_slots() {
  ::CRemotePlayTogether_Notification_Player* _add = _internal_add_player_slots();
  // @@protoc_insertion_point(field_add:CRemotePlayTogether_Notification.GroupUpdated.player_slots)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CRemotePlayTogether_Notification_Player >&
CRemotePlayTogether_Notification_GroupUpdated::player_slots() const {
  // @@protoc_insertion_point(field_list:CRemotePlayTogether_Notification.GroupUpdated.player_slots)
  return player_slots_;
}

// repeated .CRemotePlayTogether_Notification.ControllerSlot controller_slots = 8;
inline int CRemotePlayTogether_Notification_GroupUpdated::_internal_controller_slots_size() const {
  return controller_slots_.size();
}
inline int CRemotePlayTogether_Notification_GroupUpdated::controller_slots_size() const {
  return _internal_controller_slots_size();
}
inline void CRemotePlayTogether_Notification_GroupUpdated::clear_controller_slots() {
  controller_slots_.Clear();
}
inline ::CRemotePlayTogether_Notification_ControllerSlot* CRemotePlayTogether_Notification_GroupUpdated::mutable_controller_slots(int index) {
  // @@protoc_insertion_point(field_mutable:CRemotePlayTogether_Notification.GroupUpdated.controller_slots)
  return controller_slots_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CRemotePlayTogether_Notification_ControllerSlot >*
CRemotePlayTogether_Notification_GroupUpdated::mutable_controller_slots() {
  // @@protoc_insertion_point(field_mutable_list:CRemotePlayTogether_Notification.GroupUpdated.controller_slots)
  return &controller_slots_;
}
inline const ::CRemotePlayTogether_Notification_ControllerSlot& CRemotePlayTogether_Notification_GroupUpdated::_internal_controller_slots(int index) const {
  return controller_slots_.Get(index);
}
inline const ::CRemotePlayTogether_Notification_ControllerSlot& CRemotePlayTogether_Notification_GroupUpdated::controller_slots(int index) const {
  // @@protoc_insertion_point(field_get:CRemotePlayTogether_Notification.GroupUpdated.controller_slots)
  return _internal_controller_slots(index);
}
inline ::CRemotePlayTogether_Notification_ControllerSlot* CRemotePlayTogether_Notification_GroupUpdated::_internal_add_controller_slots() {
  return controller_slots_.Add();
}
inline ::CRemotePlayTogether_Notification_ControllerSlot* CRemotePlayTogether_Notification_GroupUpdated::add_controller_slots() {
  ::CRemotePlayTogether_Notification_ControllerSlot* _add = _internal_add_controller_slots();
  // @@protoc_insertion_point(field_add:CRemotePlayTogether_Notification.GroupUpdated.controller_slots)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CRemotePlayTogether_Notification_ControllerSlot >&
CRemotePlayTogether_Notification_GroupUpdated::controller_slots() const {
  // @@protoc_insertion_point(field_list:CRemotePlayTogether_Notification.GroupUpdated.controller_slots)
  return controller_slots_;
}

// -------------------------------------------------------------------

// CRemotePlayTogether_Notification

// optional fixed64 steamid = 1;
inline bool CRemotePlayTogether_Notification::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CRemotePlayTogether_Notification::has_steamid() const {
  return _internal_has_steamid();
}
inline void CRemotePlayTogether_Notification::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CRemotePlayTogether_Notification::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CRemotePlayTogether_Notification::steamid() const {
  // @@protoc_insertion_point(field_get:CRemotePlayTogether_Notification.steamid)
  return _internal_steamid();
}
inline void CRemotePlayTogether_Notification::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
}
inline void CRemotePlayTogether_Notification::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CRemotePlayTogether_Notification.steamid)
}

// .CRemotePlayTogether_Notification.GroupUpdated group_updated = 2;
inline bool CRemotePlayTogether_Notification::_internal_has_group_updated() const {
  return Message_case() == kGroupUpdated;
}
inline bool CRemotePlayTogether_Notification::has_group_updated() const {
  return _internal_has_group_updated();
}
inline void CRemotePlayTogether_Notification::set_has_group_updated() {
  _oneof_case_[0] = kGroupUpdated;
}
inline void CRemotePlayTogether_Notification::clear_group_updated() {
  if (_internal_has_group_updated()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Message_.group_updated_;
    }
    clear_has_Message();
  }
}
inline ::CRemotePlayTogether_Notification_GroupUpdated* CRemotePlayTogether_Notification::release_group_updated() {
  // @@protoc_insertion_point(field_release:CRemotePlayTogether_Notification.group_updated)
  if (_internal_has_group_updated()) {
    clear_has_Message();
      ::CRemotePlayTogether_Notification_GroupUpdated* temp = Message_.group_updated_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Message_.group_updated_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CRemotePlayTogether_Notification_GroupUpdated& CRemotePlayTogether_Notification::_internal_group_updated() const {
  return _internal_has_group_updated()
      ? *Message_.group_updated_
      : reinterpret_cast< ::CRemotePlayTogether_Notification_GroupUpdated&>(::_CRemotePlayTogether_Notification_GroupUpdated_default_instance_);
}
inline const ::CRemotePlayTogether_Notification_GroupUpdated& CRemotePlayTogether_Notification::group_updated() const {
  // @@protoc_insertion_point(field_get:CRemotePlayTogether_Notification.group_updated)
  return _internal_group_updated();
}
inline ::CRemotePlayTogether_Notification_GroupUpdated* CRemotePlayTogether_Notification::unsafe_arena_release_group_updated() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CRemotePlayTogether_Notification.group_updated)
  if (_internal_has_group_updated()) {
    clear_has_Message();
    ::CRemotePlayTogether_Notification_GroupUpdated* temp = Message_.group_updated_;
    Message_.group_updated_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CRemotePlayTogether_Notification::unsafe_arena_set_allocated_group_updated(::CRemotePlayTogether_Notification_GroupUpdated* group_updated) {
  clear_Message();
  if (group_updated) {
    set_has_group_updated();
    Message_.group_updated_ = group_updated;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CRemotePlayTogether_Notification.group_updated)
}
inline ::CRemotePlayTogether_Notification_GroupUpdated* CRemotePlayTogether_Notification::_internal_mutable_group_updated() {
  if (!_internal_has_group_updated()) {
    clear_Message();
    set_has_group_updated();
    Message_.group_updated_ = CreateMaybeMessage< ::CRemotePlayTogether_Notification_GroupUpdated >(GetArenaForAllocation());
  }
  return Message_.group_updated_;
}
inline ::CRemotePlayTogether_Notification_GroupUpdated* CRemotePlayTogether_Notification::mutable_group_updated() {
  ::CRemotePlayTogether_Notification_GroupUpdated* _msg = _internal_mutable_group_updated();
  // @@protoc_insertion_point(field_mutable:CRemotePlayTogether_Notification.group_updated)
  return _msg;
}

inline bool CRemotePlayTogether_Notification::has_Message() const {
  return Message_case() != MESSAGE_NOT_SET;
}
inline void CRemotePlayTogether_Notification::clear_has_Message() {
  _oneof_case_[0] = MESSAGE_NOT_SET;
}
inline CRemotePlayTogether_Notification::MessageCase CRemotePlayTogether_Notification::Message_case() const {
  return CRemotePlayTogether_Notification::MessageCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CRemoteClient_CreateRemotePlayTogetherInvitation_Request

// optional uint32 appid = 1;
inline bool CRemoteClient_CreateRemotePlayTogetherInvitation_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CRemoteClient_CreateRemotePlayTogetherInvitation_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CRemoteClient_CreateRemotePlayTogetherInvitation_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CRemoteClient_CreateRemotePlayTogetherInvitation_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CRemoteClient_CreateRemotePlayTogetherInvitation_Request::appid() const {
  // @@protoc_insertion_point(field_get:CRemoteClient_CreateRemotePlayTogetherInvitation_Request.appid)
  return _internal_appid();
}
inline void CRemoteClient_CreateRemotePlayTogetherInvitation_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  appid_ = value;
}
inline void CRemoteClient_CreateRemotePlayTogetherInvitation_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CRemoteClient_CreateRemotePlayTogetherInvitation_Request.appid)
}

// optional string launch_parameters = 2;
inline bool CRemoteClient_CreateRemotePlayTogetherInvitation_Request::_internal_has_launch_parameters() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CRemoteClient_CreateRemotePlayTogetherInvitation_Request::has_launch_parameters() const {
  return _internal_has_launch_parameters();
}
inline void CRemoteClient_CreateRemotePlayTogetherInvitation_Request::clear_launch_parameters() {
  launch_parameters_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CRemoteClient_CreateRemotePlayTogetherInvitation_Request::launch_parameters() const {
  // @@protoc_insertion_point(field_get:CRemoteClient_CreateRemotePlayTogetherInvitation_Request.launch_parameters)
  return _internal_launch_parameters();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CRemoteClient_CreateRemotePlayTogetherInvitation_Request::set_launch_parameters(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 launch_parameters_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CRemoteClient_CreateRemotePlayTogetherInvitation_Request.launch_parameters)
}
inline std::string* CRemoteClient_CreateRemotePlayTogetherInvitation_Request::mutable_launch_parameters() {
  std::string* _s = _internal_mutable_launch_parameters();
  // @@protoc_insertion_point(field_mutable:CRemoteClient_CreateRemotePlayTogetherInvitation_Request.launch_parameters)
  return _s;
}
inline const std::string& CRemoteClient_CreateRemotePlayTogetherInvitation_Request::_internal_launch_parameters() const {
  return launch_parameters_.Get();
}
inline void CRemoteClient_CreateRemotePlayTogetherInvitation_Request::_internal_set_launch_parameters(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  launch_parameters_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CRemoteClient_CreateRemotePlayTogetherInvitation_Request::_internal_mutable_launch_parameters() {
  _has_bits_[0] |= 0x00000001u;
  return launch_parameters_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CRemoteClient_CreateRemotePlayTogetherInvitation_Request::release_launch_parameters() {
  // @@protoc_insertion_point(field_release:CRemoteClient_CreateRemotePlayTogetherInvitation_Request.launch_parameters)
  if (!_internal_has_launch_parameters()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = launch_parameters_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (launch_parameters_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    launch_parameters_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CRemoteClient_CreateRemotePlayTogetherInvitation_Request::set_allocated_launch_parameters(std::string* launch_parameters) {
  if (launch_parameters != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  launch_parameters_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), launch_parameters,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (launch_parameters_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    launch_parameters_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CRemoteClient_CreateRemotePlayTogetherInvitation_Request.launch_parameters)
}

// -------------------------------------------------------------------

// CRemoteClient_CreateRemotePlayTogetherInvitation_Response

// optional string invitation_code = 1;
inline bool CRemoteClient_CreateRemotePlayTogetherInvitation_Response::_internal_has_invitation_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CRemoteClient_CreateRemotePlayTogetherInvitation_Response::has_invitation_code() const {
  return _internal_has_invitation_code();
}
inline void CRemoteClient_CreateRemotePlayTogetherInvitation_Response::clear_invitation_code() {
  invitation_code_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CRemoteClient_CreateRemotePlayTogetherInvitation_Response::invitation_code() const {
  // @@protoc_insertion_point(field_get:CRemoteClient_CreateRemotePlayTogetherInvitation_Response.invitation_code)
  return _internal_invitation_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CRemoteClient_CreateRemotePlayTogetherInvitation_Response::set_invitation_code(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 invitation_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CRemoteClient_CreateRemotePlayTogetherInvitation_Response.invitation_code)
}
inline std::string* CRemoteClient_CreateRemotePlayTogetherInvitation_Response::mutable_invitation_code() {
  std::string* _s = _internal_mutable_invitation_code();
  // @@protoc_insertion_point(field_mutable:CRemoteClient_CreateRemotePlayTogetherInvitation_Response.invitation_code)
  return _s;
}
inline const std::string& CRemoteClient_CreateRemotePlayTogetherInvitation_Response::_internal_invitation_code() const {
  return invitation_code_.Get();
}
inline void CRemoteClient_CreateRemotePlayTogetherInvitation_Response::_internal_set_invitation_code(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  invitation_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CRemoteClient_CreateRemotePlayTogetherInvitation_Response::_internal_mutable_invitation_code() {
  _has_bits_[0] |= 0x00000001u;
  return invitation_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CRemoteClient_CreateRemotePlayTogetherInvitation_Response::release_invitation_code() {
  // @@protoc_insertion_point(field_release:CRemoteClient_CreateRemotePlayTogetherInvitation_Response.invitation_code)
  if (!_internal_has_invitation_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = invitation_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (invitation_code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    invitation_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CRemoteClient_CreateRemotePlayTogetherInvitation_Response::set_allocated_invitation_code(std::string* invitation_code) {
  if (invitation_code != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  invitation_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), invitation_code,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (invitation_code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    invitation_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CRemoteClient_CreateRemotePlayTogetherInvitation_Response.invitation_code)
}

// -------------------------------------------------------------------

// CRemoteClient_DeleteRemotePlayTogetherInvitation_Request

// optional string invitation_code = 1;
inline bool CRemoteClient_DeleteRemotePlayTogetherInvitation_Request::_internal_has_invitation_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CRemoteClient_DeleteRemotePlayTogetherInvitation_Request::has_invitation_code() const {
  return _internal_has_invitation_code();
}
inline void CRemoteClient_DeleteRemotePlayTogetherInvitation_Request::clear_invitation_code() {
  invitation_code_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CRemoteClient_DeleteRemotePlayTogetherInvitation_Request::invitation_code() const {
  // @@protoc_insertion_point(field_get:CRemoteClient_DeleteRemotePlayTogetherInvitation_Request.invitation_code)
  return _internal_invitation_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CRemoteClient_DeleteRemotePlayTogetherInvitation_Request::set_invitation_code(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 invitation_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CRemoteClient_DeleteRemotePlayTogetherInvitation_Request.invitation_code)
}
inline std::string* CRemoteClient_DeleteRemotePlayTogetherInvitation_Request::mutable_invitation_code() {
  std::string* _s = _internal_mutable_invitation_code();
  // @@protoc_insertion_point(field_mutable:CRemoteClient_DeleteRemotePlayTogetherInvitation_Request.invitation_code)
  return _s;
}
inline const std::string& CRemoteClient_DeleteRemotePlayTogetherInvitation_Request::_internal_invitation_code() const {
  return invitation_code_.Get();
}
inline void CRemoteClient_DeleteRemotePlayTogetherInvitation_Request::_internal_set_invitation_code(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  invitation_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CRemoteClient_DeleteRemotePlayTogetherInvitation_Request::_internal_mutable_invitation_code() {
  _has_bits_[0] |= 0x00000001u;
  return invitation_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CRemoteClient_DeleteRemotePlayTogetherInvitation_Request::release_invitation_code() {
  // @@protoc_insertion_point(field_release:CRemoteClient_DeleteRemotePlayTogetherInvitation_Request.invitation_code)
  if (!_internal_has_invitation_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = invitation_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (invitation_code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    invitation_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CRemoteClient_DeleteRemotePlayTogetherInvitation_Request::set_allocated_invitation_code(std::string* invitation_code) {
  if (invitation_code != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  invitation_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), invitation_code,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (invitation_code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    invitation_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CRemoteClient_DeleteRemotePlayTogetherInvitation_Request.invitation_code)
}

// -------------------------------------------------------------------

// CRemoteClient_DeleteRemotePlayTogetherInvitation_Response

// -------------------------------------------------------------------

// CRemoteClient_LookupRemotePlayTogetherInvitation_Request

// optional string invitation_code = 1;
inline bool CRemoteClient_LookupRemotePlayTogetherInvitation_Request::_internal_has_invitation_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CRemoteClient_LookupRemotePlayTogetherInvitation_Request::has_invitation_code() const {
  return _internal_has_invitation_code();
}
inline void CRemoteClient_LookupRemotePlayTogetherInvitation_Request::clear_invitation_code() {
  invitation_code_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CRemoteClient_LookupRemotePlayTogetherInvitation_Request::invitation_code() const {
  // @@protoc_insertion_point(field_get:CRemoteClient_LookupRemotePlayTogetherInvitation_Request.invitation_code)
  return _internal_invitation_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CRemoteClient_LookupRemotePlayTogetherInvitation_Request::set_invitation_code(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 invitation_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CRemoteClient_LookupRemotePlayTogetherInvitation_Request.invitation_code)
}
inline std::string* CRemoteClient_LookupRemotePlayTogetherInvitation_Request::mutable_invitation_code() {
  std::string* _s = _internal_mutable_invitation_code();
  // @@protoc_insertion_point(field_mutable:CRemoteClient_LookupRemotePlayTogetherInvitation_Request.invitation_code)
  return _s;
}
inline const std::string& CRemoteClient_LookupRemotePlayTogetherInvitation_Request::_internal_invitation_code() const {
  return invitation_code_.Get();
}
inline void CRemoteClient_LookupRemotePlayTogetherInvitation_Request::_internal_set_invitation_code(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  invitation_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CRemoteClient_LookupRemotePlayTogetherInvitation_Request::_internal_mutable_invitation_code() {
  _has_bits_[0] |= 0x00000001u;
  return invitation_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CRemoteClient_LookupRemotePlayTogetherInvitation_Request::release_invitation_code() {
  // @@protoc_insertion_point(field_release:CRemoteClient_LookupRemotePlayTogetherInvitation_Request.invitation_code)
  if (!_internal_has_invitation_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = invitation_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (invitation_code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    invitation_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CRemoteClient_LookupRemotePlayTogetherInvitation_Request::set_allocated_invitation_code(std::string* invitation_code) {
  if (invitation_code != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  invitation_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), invitation_code,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (invitation_code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    invitation_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CRemoteClient_LookupRemotePlayTogetherInvitation_Request.invitation_code)
}

// -------------------------------------------------------------------

// CRemoteClient_LookupRemotePlayTogetherInvitation_Response

// optional string invitation_url = 1;
inline bool CRemoteClient_LookupRemotePlayTogetherInvitation_Response::_internal_has_invitation_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CRemoteClient_LookupRemotePlayTogetherInvitation_Response::has_invitation_url() const {
  return _internal_has_invitation_url();
}
inline void CRemoteClient_LookupRemotePlayTogetherInvitation_Response::clear_invitation_url() {
  invitation_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CRemoteClient_LookupRemotePlayTogetherInvitation_Response::invitation_url() const {
  // @@protoc_insertion_point(field_get:CRemoteClient_LookupRemotePlayTogetherInvitation_Response.invitation_url)
  return _internal_invitation_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CRemoteClient_LookupRemotePlayTogetherInvitation_Response::set_invitation_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 invitation_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CRemoteClient_LookupRemotePlayTogetherInvitation_Response.invitation_url)
}
inline std::string* CRemoteClient_LookupRemotePlayTogetherInvitation_Response::mutable_invitation_url() {
  std::string* _s = _internal_mutable_invitation_url();
  // @@protoc_insertion_point(field_mutable:CRemoteClient_LookupRemotePlayTogetherInvitation_Response.invitation_url)
  return _s;
}
inline const std::string& CRemoteClient_LookupRemotePlayTogetherInvitation_Response::_internal_invitation_url() const {
  return invitation_url_.Get();
}
inline void CRemoteClient_LookupRemotePlayTogetherInvitation_Response::_internal_set_invitation_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  invitation_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CRemoteClient_LookupRemotePlayTogetherInvitation_Response::_internal_mutable_invitation_url() {
  _has_bits_[0] |= 0x00000001u;
  return invitation_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CRemoteClient_LookupRemotePlayTogetherInvitation_Response::release_invitation_url() {
  // @@protoc_insertion_point(field_release:CRemoteClient_LookupRemotePlayTogetherInvitation_Response.invitation_url)
  if (!_internal_has_invitation_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = invitation_url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (invitation_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    invitation_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CRemoteClient_LookupRemotePlayTogetherInvitation_Response::set_allocated_invitation_url(std::string* invitation_url) {
  if (invitation_url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  invitation_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), invitation_url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (invitation_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    invitation_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CRemoteClient_LookupRemotePlayTogetherInvitation_Response.invitation_url)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_steammessages_5fremoteclient_5fservice_5fmessages_2eproto
