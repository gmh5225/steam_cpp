// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_gameservers.steamclient.proto

#include "steammessages_gameservers.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CGameServers_GetServerList_Request::CGameServers_GetServerList_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : filter_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , limit_(100u){}
struct CGameServers_GetServerList_RequestDefaultTypeInternal {
  constexpr CGameServers_GetServerList_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameServers_GetServerList_RequestDefaultTypeInternal() {}
  union {
    CGameServers_GetServerList_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameServers_GetServerList_RequestDefaultTypeInternal _CGameServers_GetServerList_Request_default_instance_;
constexpr CGameServers_GetServerList_Response_Server::CGameServers_GetServerList_Response_Server(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : addr_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , gamedir_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , product_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , map_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , os_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , gametype_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , gameport_(0u)
  , specport_(0u)
  , steamid_(uint64_t{0u})
  , appid_(0u)
  , region_(0)
  , players_(0)
  , max_players_(0)
  , bots_(0)
  , secure_(false)
  , dedicated_(false){}
struct CGameServers_GetServerList_Response_ServerDefaultTypeInternal {
  constexpr CGameServers_GetServerList_Response_ServerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameServers_GetServerList_Response_ServerDefaultTypeInternal() {}
  union {
    CGameServers_GetServerList_Response_Server _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameServers_GetServerList_Response_ServerDefaultTypeInternal _CGameServers_GetServerList_Response_Server_default_instance_;
constexpr CGameServers_GetServerList_Response::CGameServers_GetServerList_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : servers_(){}
struct CGameServers_GetServerList_ResponseDefaultTypeInternal {
  constexpr CGameServers_GetServerList_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameServers_GetServerList_ResponseDefaultTypeInternal() {}
  union {
    CGameServers_GetServerList_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameServers_GetServerList_ResponseDefaultTypeInternal _CGameServers_GetServerList_Response_default_instance_;
constexpr CGameServers_GetServerSteamIDsByIP_Request::CGameServers_GetServerSteamIDsByIP_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : server_ips_(){}
struct CGameServers_GetServerSteamIDsByIP_RequestDefaultTypeInternal {
  constexpr CGameServers_GetServerSteamIDsByIP_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameServers_GetServerSteamIDsByIP_RequestDefaultTypeInternal() {}
  union {
    CGameServers_GetServerSteamIDsByIP_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameServers_GetServerSteamIDsByIP_RequestDefaultTypeInternal _CGameServers_GetServerSteamIDsByIP_Request_default_instance_;
constexpr CGameServers_IPsWithSteamIDs_Response_Server::CGameServers_IPsWithSteamIDs_Response_Server(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : addr_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steamid_(uint64_t{0u}){}
struct CGameServers_IPsWithSteamIDs_Response_ServerDefaultTypeInternal {
  constexpr CGameServers_IPsWithSteamIDs_Response_ServerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameServers_IPsWithSteamIDs_Response_ServerDefaultTypeInternal() {}
  union {
    CGameServers_IPsWithSteamIDs_Response_Server _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameServers_IPsWithSteamIDs_Response_ServerDefaultTypeInternal _CGameServers_IPsWithSteamIDs_Response_Server_default_instance_;
constexpr CGameServers_IPsWithSteamIDs_Response::CGameServers_IPsWithSteamIDs_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : servers_(){}
struct CGameServers_IPsWithSteamIDs_ResponseDefaultTypeInternal {
  constexpr CGameServers_IPsWithSteamIDs_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameServers_IPsWithSteamIDs_ResponseDefaultTypeInternal() {}
  union {
    CGameServers_IPsWithSteamIDs_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameServers_IPsWithSteamIDs_ResponseDefaultTypeInternal _CGameServers_IPsWithSteamIDs_Response_default_instance_;
constexpr CGameServers_GetServerIPsBySteamID_Request::CGameServers_GetServerIPsBySteamID_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : server_steamids_(){}
struct CGameServers_GetServerIPsBySteamID_RequestDefaultTypeInternal {
  constexpr CGameServers_GetServerIPsBySteamID_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameServers_GetServerIPsBySteamID_RequestDefaultTypeInternal() {}
  union {
    CGameServers_GetServerIPsBySteamID_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameServers_GetServerIPsBySteamID_RequestDefaultTypeInternal _CGameServers_GetServerIPsBySteamID_Request_default_instance_;
constexpr CGameServers_QueryByFakeIP_Request::CGameServers_QueryByFakeIP_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fake_ip_(0u)
  , fake_port_(0u)
  , app_id_(0u)
  , query_type_(0)
{}
struct CGameServers_QueryByFakeIP_RequestDefaultTypeInternal {
  constexpr CGameServers_QueryByFakeIP_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameServers_QueryByFakeIP_RequestDefaultTypeInternal() {}
  union {
    CGameServers_QueryByFakeIP_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameServers_QueryByFakeIP_RequestDefaultTypeInternal _CGameServers_QueryByFakeIP_Request_default_instance_;
constexpr CMsgGameServerPingQueryData::CMsgGameServerPingQueryData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : spectator_server_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , server_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , gamedir_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , map_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , game_description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , gametype_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sdr_location_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , server_ip_(nullptr)
  , query_port_(0u)
  , game_port_(0u)
  , spectator_port_(0u)
  , app_id_(0u)
  , steamid_(uint64_t{0u})
  , num_players_(0u)
  , max_players_(0u)
  , num_bots_(0u)
  , password_(false)
  , secure_(false)
  , dedicated_(false)
  , sdr_popid_(0u){}
struct CMsgGameServerPingQueryDataDefaultTypeInternal {
  constexpr CMsgGameServerPingQueryDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGameServerPingQueryDataDefaultTypeInternal() {}
  union {
    CMsgGameServerPingQueryData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGameServerPingQueryDataDefaultTypeInternal _CMsgGameServerPingQueryData_default_instance_;
constexpr CMsgGameServerPlayersQueryData_Player::CMsgGameServerPlayersQueryData_Player(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , score_(0u)
  , time_played_(0u){}
struct CMsgGameServerPlayersQueryData_PlayerDefaultTypeInternal {
  constexpr CMsgGameServerPlayersQueryData_PlayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGameServerPlayersQueryData_PlayerDefaultTypeInternal() {}
  union {
    CMsgGameServerPlayersQueryData_Player _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGameServerPlayersQueryData_PlayerDefaultTypeInternal _CMsgGameServerPlayersQueryData_Player_default_instance_;
constexpr CMsgGameServerPlayersQueryData::CMsgGameServerPlayersQueryData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : players_(){}
struct CMsgGameServerPlayersQueryDataDefaultTypeInternal {
  constexpr CMsgGameServerPlayersQueryDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGameServerPlayersQueryDataDefaultTypeInternal() {}
  union {
    CMsgGameServerPlayersQueryData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGameServerPlayersQueryDataDefaultTypeInternal _CMsgGameServerPlayersQueryData_default_instance_;
constexpr CMsgGameServerRulesQueryData_Rule::CMsgGameServerRulesQueryData_Rule(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rule_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CMsgGameServerRulesQueryData_RuleDefaultTypeInternal {
  constexpr CMsgGameServerRulesQueryData_RuleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGameServerRulesQueryData_RuleDefaultTypeInternal() {}
  union {
    CMsgGameServerRulesQueryData_Rule _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGameServerRulesQueryData_RuleDefaultTypeInternal _CMsgGameServerRulesQueryData_Rule_default_instance_;
constexpr CMsgGameServerRulesQueryData::CMsgGameServerRulesQueryData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rules_(){}
struct CMsgGameServerRulesQueryDataDefaultTypeInternal {
  constexpr CMsgGameServerRulesQueryDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGameServerRulesQueryDataDefaultTypeInternal() {}
  union {
    CMsgGameServerRulesQueryData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGameServerRulesQueryDataDefaultTypeInternal _CMsgGameServerRulesQueryData_default_instance_;
constexpr CGameServers_GameServerQuery_Response::CGameServers_GameServerQuery_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ping_data_(nullptr)
  , players_data_(nullptr)
  , rules_data_(nullptr){}
struct CGameServers_GameServerQuery_ResponseDefaultTypeInternal {
  constexpr CGameServers_GameServerQuery_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameServers_GameServerQuery_ResponseDefaultTypeInternal() {}
  union {
    CGameServers_GameServerQuery_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameServers_GameServerQuery_ResponseDefaultTypeInternal _CGameServers_GameServerQuery_Response_default_instance_;
constexpr GameServerClient_QueryServerData_Request::GameServerClient_QueryServerData_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GameServerClient_QueryServerData_RequestDefaultTypeInternal {
  constexpr GameServerClient_QueryServerData_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameServerClient_QueryServerData_RequestDefaultTypeInternal() {}
  union {
    GameServerClient_QueryServerData_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameServerClient_QueryServerData_RequestDefaultTypeInternal _GameServerClient_QueryServerData_Request_default_instance_;
constexpr GameServerClient_QueryServerData_Response::GameServerClient_QueryServerData_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ping_data_(nullptr)
  , players_data_(nullptr)
  , rules_data_(nullptr){}
struct GameServerClient_QueryServerData_ResponseDefaultTypeInternal {
  constexpr GameServerClient_QueryServerData_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameServerClient_QueryServerData_ResponseDefaultTypeInternal() {}
  union {
    GameServerClient_QueryServerData_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameServerClient_QueryServerData_ResponseDefaultTypeInternal _GameServerClient_QueryServerData_Response_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steammessages_5fgameservers_2esteamclient_2eproto[16];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_steammessages_5fgameservers_2esteamclient_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_steammessages_5fgameservers_2esteamclient_2eproto[2];

const uint32_t TableStruct_steammessages_5fgameservers_2esteamclient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CGameServers_GetServerList_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameServers_GetServerList_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CGameServers_GetServerList_Request, filter_),
  PROTOBUF_FIELD_OFFSET(::CGameServers_GetServerList_Request, limit_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CGameServers_GetServerList_Response_Server, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameServers_GetServerList_Response_Server, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CGameServers_GetServerList_Response_Server, addr_),
  PROTOBUF_FIELD_OFFSET(::CGameServers_GetServerList_Response_Server, gameport_),
  PROTOBUF_FIELD_OFFSET(::CGameServers_GetServerList_Response_Server, specport_),
  PROTOBUF_FIELD_OFFSET(::CGameServers_GetServerList_Response_Server, steamid_),
  PROTOBUF_FIELD_OFFSET(::CGameServers_GetServerList_Response_Server, name_),
  PROTOBUF_FIELD_OFFSET(::CGameServers_GetServerList_Response_Server, appid_),
  PROTOBUF_FIELD_OFFSET(::CGameServers_GetServerList_Response_Server, gamedir_),
  PROTOBUF_FIELD_OFFSET(::CGameServers_GetServerList_Response_Server, version_),
  PROTOBUF_FIELD_OFFSET(::CGameServers_GetServerList_Response_Server, product_),
  PROTOBUF_FIELD_OFFSET(::CGameServers_GetServerList_Response_Server, region_),
  PROTOBUF_FIELD_OFFSET(::CGameServers_GetServerList_Response_Server, players_),
  PROTOBUF_FIELD_OFFSET(::CGameServers_GetServerList_Response_Server, max_players_),
  PROTOBUF_FIELD_OFFSET(::CGameServers_GetServerList_Response_Server, bots_),
  PROTOBUF_FIELD_OFFSET(::CGameServers_GetServerList_Response_Server, map_),
  PROTOBUF_FIELD_OFFSET(::CGameServers_GetServerList_Response_Server, secure_),
  PROTOBUF_FIELD_OFFSET(::CGameServers_GetServerList_Response_Server, dedicated_),
  PROTOBUF_FIELD_OFFSET(::CGameServers_GetServerList_Response_Server, os_),
  PROTOBUF_FIELD_OFFSET(::CGameServers_GetServerList_Response_Server, gametype_),
  0,
  8,
  9,
  10,
  1,
  11,
  2,
  3,
  4,
  12,
  13,
  14,
  15,
  5,
  16,
  17,
  6,
  7,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGameServers_GetServerList_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CGameServers_GetServerList_Response, servers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGameServers_GetServerSteamIDsByIP_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CGameServers_GetServerSteamIDsByIP_Request, server_ips_),
  PROTOBUF_FIELD_OFFSET(::CGameServers_IPsWithSteamIDs_Response_Server, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameServers_IPsWithSteamIDs_Response_Server, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CGameServers_IPsWithSteamIDs_Response_Server, addr_),
  PROTOBUF_FIELD_OFFSET(::CGameServers_IPsWithSteamIDs_Response_Server, steamid_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGameServers_IPsWithSteamIDs_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CGameServers_IPsWithSteamIDs_Response, servers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGameServers_GetServerIPsBySteamID_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CGameServers_GetServerIPsBySteamID_Request, server_steamids_),
  PROTOBUF_FIELD_OFFSET(::CGameServers_QueryByFakeIP_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameServers_QueryByFakeIP_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CGameServers_QueryByFakeIP_Request, fake_ip_),
  PROTOBUF_FIELD_OFFSET(::CGameServers_QueryByFakeIP_Request, fake_port_),
  PROTOBUF_FIELD_OFFSET(::CGameServers_QueryByFakeIP_Request, app_id_),
  PROTOBUF_FIELD_OFFSET(::CGameServers_QueryByFakeIP_Request, query_type_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerPingQueryData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerPingQueryData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerPingQueryData, server_ip_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerPingQueryData, query_port_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerPingQueryData, game_port_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerPingQueryData, spectator_port_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerPingQueryData, spectator_server_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerPingQueryData, server_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerPingQueryData, steamid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerPingQueryData, app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerPingQueryData, gamedir_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerPingQueryData, map_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerPingQueryData, game_description_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerPingQueryData, gametype_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerPingQueryData, num_players_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerPingQueryData, max_players_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerPingQueryData, num_bots_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerPingQueryData, password_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerPingQueryData, secure_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerPingQueryData, dedicated_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerPingQueryData, version_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerPingQueryData, sdr_popid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerPingQueryData, sdr_location_string_),
  8,
  9,
  10,
  11,
  0,
  1,
  13,
  12,
  2,
  3,
  4,
  5,
  14,
  15,
  16,
  17,
  18,
  19,
  6,
  20,
  7,
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerPlayersQueryData_Player, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerPlayersQueryData_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerPlayersQueryData_Player, name_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerPlayersQueryData_Player, score_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerPlayersQueryData_Player, time_played_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerPlayersQueryData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerPlayersQueryData, players_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerRulesQueryData_Rule, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerRulesQueryData_Rule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerRulesQueryData_Rule, rule_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerRulesQueryData_Rule, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerRulesQueryData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerRulesQueryData, rules_),
  PROTOBUF_FIELD_OFFSET(::CGameServers_GameServerQuery_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameServers_GameServerQuery_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CGameServers_GameServerQuery_Response, ping_data_),
  PROTOBUF_FIELD_OFFSET(::CGameServers_GameServerQuery_Response, players_data_),
  PROTOBUF_FIELD_OFFSET(::CGameServers_GameServerQuery_Response, rules_data_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GameServerClient_QueryServerData_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GameServerClient_QueryServerData_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameServerClient_QueryServerData_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GameServerClient_QueryServerData_Response, ping_data_),
  PROTOBUF_FIELD_OFFSET(::GameServerClient_QueryServerData_Response, players_data_),
  PROTOBUF_FIELD_OFFSET(::GameServerClient_QueryServerData_Response, rules_data_),
  0,
  1,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::CGameServers_GetServerList_Request)},
  { 10, 34, -1, sizeof(::CGameServers_GetServerList_Response_Server)},
  { 52, -1, -1, sizeof(::CGameServers_GetServerList_Response)},
  { 59, -1, -1, sizeof(::CGameServers_GetServerSteamIDsByIP_Request)},
  { 66, 74, -1, sizeof(::CGameServers_IPsWithSteamIDs_Response_Server)},
  { 76, -1, -1, sizeof(::CGameServers_IPsWithSteamIDs_Response)},
  { 83, -1, -1, sizeof(::CGameServers_GetServerIPsBySteamID_Request)},
  { 90, 100, -1, sizeof(::CGameServers_QueryByFakeIP_Request)},
  { 104, 131, -1, sizeof(::CMsgGameServerPingQueryData)},
  { 152, 161, -1, sizeof(::CMsgGameServerPlayersQueryData_Player)},
  { 164, -1, -1, sizeof(::CMsgGameServerPlayersQueryData)},
  { 171, 179, -1, sizeof(::CMsgGameServerRulesQueryData_Rule)},
  { 181, -1, -1, sizeof(::CMsgGameServerRulesQueryData)},
  { 188, 197, -1, sizeof(::CGameServers_GameServerQuery_Response)},
  { 200, -1, -1, sizeof(::GameServerClient_QueryServerData_Request)},
  { 206, 215, -1, sizeof(::GameServerClient_QueryServerData_Response)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameServers_GetServerList_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameServers_GetServerList_Response_Server_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameServers_GetServerList_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameServers_GetServerSteamIDsByIP_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameServers_IPsWithSteamIDs_Response_Server_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameServers_IPsWithSteamIDs_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameServers_GetServerIPsBySteamID_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameServers_QueryByFakeIP_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGameServerPingQueryData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGameServerPlayersQueryData_Player_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGameServerPlayersQueryData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGameServerRulesQueryData_Rule_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGameServerRulesQueryData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameServers_GameServerQuery_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GameServerClient_QueryServerData_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GameServerClient_QueryServerData_Response_default_instance_),
};

const char descriptor_table_protodef_steammessages_5fgameservers_2esteamclient_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n+steammessages_gameservers.steamclient."
  "proto\032\030steammessages_base.proto\032,steamme"
  "ssages_unified_base.steamclient.proto\"\237\001"
  "\n\"CGameServers_GetServerList_Request\022(\n\006"
  "filter\030\001 \001(\tB\030\202\265\030\024Query filter string.\022O"
  "\n\005limit\030\002 \001(\r:\003100B;\202\265\0307The maximum numb"
  "er of servers to return in the response\""
  "\340\003\n#CGameServers_GetServerList_Response\022"
  "e\n\007servers\030\001 \003(\0132+.CGameServers_GetServe"
  "rList_Response.ServerB\'\202\265\030#List of serve"
  "rs matching the filter\032\321\002\n\006Server\0220\n\004add"
  "r\030\001 \001(\tB\"\202\265\030\036The server\'s IP and query p"
  "ort\022\020\n\010gameport\030\002 \001(\r\022\020\n\010specport\030\003 \001(\r\022"
  "\017\n\007steamid\030\004 \001(\006\022\014\n\004name\030\005 \001(\t\022\r\n\005appid\030"
  "\006 \001(\r\022\017\n\007gamedir\030\007 \001(\t\022\017\n\007version\030\010 \001(\t\022"
  "\017\n\007product\030\t \001(\t\022\016\n\006region\030\n \001(\005\022\017\n\007play"
  "ers\030\013 \001(\005\022\023\n\013max_players\030\014 \001(\005\022\014\n\004bots\030\r"
  " \001(\005\022\013\n\003map\030\016 \001(\t\022\016\n\006secure\030\017 \001(\010\022\021\n\tded"
  "icated\030\020 \001(\010\022\n\n\002os\030\021 \001(\t\022\020\n\010gametype\030\022 \001"
  "(\t\"@\n*CGameServers_GetServerSteamIDsByIP"
  "_Request\022\022\n\nserver_ips\030\001 \003(\t\"\220\001\n%CGameSe"
  "rvers_IPsWithSteamIDs_Response\022>\n\007server"
  "s\030\001 \003(\0132-.CGameServers_IPsWithSteamIDs_R"
  "esponse.Server\032\'\n\006Server\022\014\n\004addr\030\001 \001(\t\022\017"
  "\n\007steamid\030\002 \001(\006\"E\n*CGameServers_GetServe"
  "rIPsBySteamID_Request\022\027\n\017server_steamids"
  "\030\001 \003(\006\"\227\003\n\"CGameServers_QueryByFakeIP_Re"
  "quest\022/\n\007fake_ip\030\001 \001(\rB\036\202\265\030\032FakeIP of se"
  "rver to query.\0224\n\tfake_port\030\002 \001(\rB!\202\265\030\035F"
  "ake port of server to query.\022I\n\006app_id\030\003"
  " \001(\rB9\202\265\0305AppID to use.  Each AppID has "
  "its own FakeIP address.\022j\n\nquery_type\030\004 "
  "\001(\0162..CGameServers_QueryByFakeIP_Request"
  ".EQueryType:\rQuery_InvalidB\027\202\265\030\023What typ"
  "e of query\?\"S\n\nEQueryType\022\021\n\rQuery_Inval"
  "id\020\000\022\016\n\nQuery_Ping\020\001\022\021\n\rQuery_Players\020\002\022"
  "\017\n\013Query_Rules\020\003\"\320\003\n\033CMsgGameServerPingQ"
  "ueryData\022!\n\tserver_ip\030\001 \001(\0132\016.CMsgIPAddr"
  "ess\022\022\n\nquery_port\030\002 \001(\r\022\021\n\tgame_port\030\003 \001"
  "(\r\022\026\n\016spectator_port\030\004 \001(\r\022\035\n\025spectator_"
  "server_name\030\005 \001(\t\022\023\n\013server_name\030\006 \001(\t\022\017"
  "\n\007steamid\030\007 \001(\006\022\016\n\006app_id\030\010 \001(\r\022\017\n\007gamed"
  "ir\030\t \001(\t\022\013\n\003map\030\n \001(\t\022\030\n\020game_descriptio"
  "n\030\013 \001(\t\022\020\n\010gametype\030\014 \001(\t\022\023\n\013num_players"
  "\030\r \001(\r\022\023\n\013max_players\030\016 \001(\r\022\020\n\010num_bots\030"
  "\017 \001(\r\022\020\n\010password\030\020 \001(\010\022\016\n\006secure\030\021 \001(\010\022"
  "\021\n\tdedicated\030\022 \001(\010\022\017\n\007version\030\023 \001(\t\022\021\n\ts"
  "dr_popid\030\024 \001(\007\022\033\n\023sdr_location_string\030\025 "
  "\001(\t\"\225\001\n\036CMsgGameServerPlayersQueryData\0227"
  "\n\007players\030\001 \003(\0132&.CMsgGameServerPlayersQ"
  "ueryData.Player\032:\n\006Player\022\014\n\004name\030\001 \001(\t\022"
  "\r\n\005score\030\002 \001(\r\022\023\n\013time_played\030\003 \001(\r\"v\n\034C"
  "MsgGameServerRulesQueryData\0221\n\005rules\030\001 \003"
  "(\0132\".CMsgGameServerRulesQueryData.Rule\032#"
  "\n\004Rule\022\014\n\004rule\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\"\302\001\n%"
  "CGameServers_GameServerQuery_Response\022/\n"
  "\tping_data\030\001 \001(\0132\034.CMsgGameServerPingQue"
  "ryData\0225\n\014players_data\030\002 \001(\0132\037.CMsgGameS"
  "erverPlayersQueryData\0221\n\nrules_data\030\003 \001("
  "\0132\035.CMsgGameServerRulesQueryData\"*\n(Game"
  "ServerClient_QueryServerData_Request\"\306\001\n"
  ")GameServerClient_QueryServerData_Respon"
  "se\022/\n\tping_data\030\001 \001(\0132\034.CMsgGameServerPi"
  "ngQueryData\0225\n\014players_data\030\002 \001(\0132\037.CMsg"
  "GameServerPlayersQueryData\0221\n\nrules_data"
  "\030\003 \001(\0132\035.CMsgGameServerRulesQueryData2\276\005"
  "\n\013GameServers\022\214\001\n\rGetServerList\022#.CGameS"
  "ervers_GetServerList_Request\032$.CGameServ"
  "ers_GetServerList_Response\"0\202\265\030,Gets a l"
  "ist of servers given a filter string\022\244\001\n"
  "\025GetServerSteamIDsByIP\022+.CGameServers_Ge"
  "tServerSteamIDsByIP_Request\032&.CGameServe"
  "rs_IPsWithSteamIDs_Response\"6\202\265\0302Gets a "
  "list of server SteamIDs given a list of "
  "IPs\022\255\001\n\025GetServerIPsBySteamID\022+.CGameSer"
  "vers_GetServerIPsBySteamID_Request\032&.CGa"
  "meServers_IPsWithSteamIDs_Response\"\?\202\265\030;"
  "Gets a list of server IP addresses given"
  " a list of SteamIDs\022\220\001\n\rQueryByFakeIP\022#."
  "CGameServers_QueryByFakeIP_Request\032&.CGa"
  "meServers_GameServerQuery_Response\"2\202\265\030."
  "Perform a query on a specific server by "
  "FakeIP\0326\202\265\0302A service for searching and "
  "managing game servers.2\351\001\n\020GameServerCli"
  "ent\022\227\001\n\017QueryServerData\022).GameServerClie"
  "nt_QueryServerData_Request\032*.GameServerC"
  "lient_QueryServerData_Response\"-\202\265\030)Stea"
  "m is asking a gameserver for its data\032;\202"
  "\265\0303Service methods exposed by GameServer"
  " Steam clients\300\265\030\002B\003\200\001\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_steammessages_5fgameservers_2esteamclient_2eproto_deps[2] = {
  &::descriptor_table_steammessages_5fbase_2eproto,
  &::descriptor_table_steammessages_5funified_5fbase_2esteamclient_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steammessages_5fgameservers_2esteamclient_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fgameservers_2esteamclient_2eproto = {
  false, false, 3583, descriptor_table_protodef_steammessages_5fgameservers_2esteamclient_2eproto, "steammessages_gameservers.steamclient.proto", 
  &descriptor_table_steammessages_5fgameservers_2esteamclient_2eproto_once, descriptor_table_steammessages_5fgameservers_2esteamclient_2eproto_deps, 2, 16,
  schemas, file_default_instances, TableStruct_steammessages_5fgameservers_2esteamclient_2eproto::offsets,
  file_level_metadata_steammessages_5fgameservers_2esteamclient_2eproto, file_level_enum_descriptors_steammessages_5fgameservers_2esteamclient_2eproto, file_level_service_descriptors_steammessages_5fgameservers_2esteamclient_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_steammessages_5fgameservers_2esteamclient_2eproto_getter() {
  return &descriptor_table_steammessages_5fgameservers_2esteamclient_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_steammessages_5fgameservers_2esteamclient_2eproto(&descriptor_table_steammessages_5fgameservers_2esteamclient_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CGameServers_QueryByFakeIP_Request_EQueryType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fgameservers_2esteamclient_2eproto);
  return file_level_enum_descriptors_steammessages_5fgameservers_2esteamclient_2eproto[0];
}
bool CGameServers_QueryByFakeIP_Request_EQueryType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CGameServers_QueryByFakeIP_Request_EQueryType CGameServers_QueryByFakeIP_Request::Query_Invalid;
constexpr CGameServers_QueryByFakeIP_Request_EQueryType CGameServers_QueryByFakeIP_Request::Query_Ping;
constexpr CGameServers_QueryByFakeIP_Request_EQueryType CGameServers_QueryByFakeIP_Request::Query_Players;
constexpr CGameServers_QueryByFakeIP_Request_EQueryType CGameServers_QueryByFakeIP_Request::Query_Rules;
constexpr CGameServers_QueryByFakeIP_Request_EQueryType CGameServers_QueryByFakeIP_Request::EQueryType_MIN;
constexpr CGameServers_QueryByFakeIP_Request_EQueryType CGameServers_QueryByFakeIP_Request::EQueryType_MAX;
constexpr int CGameServers_QueryByFakeIP_Request::EQueryType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class CGameServers_GetServerList_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameServers_GetServerList_Request>()._has_bits_);
  static void set_has_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CGameServers_GetServerList_Request::CGameServers_GetServerList_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGameServers_GetServerList_Request)
}
CGameServers_GetServerList_Request::CGameServers_GetServerList_Request(const CGameServers_GetServerList_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    filter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_filter()) {
    filter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filter(), 
      GetArenaForAllocation());
  }
  limit_ = from.limit_;
  // @@protoc_insertion_point(copy_constructor:CGameServers_GetServerList_Request)
}

inline void CGameServers_GetServerList_Request::SharedCtor() {
filter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  filter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
limit_ = 100u;
}

CGameServers_GetServerList_Request::~CGameServers_GetServerList_Request() {
  // @@protoc_insertion_point(destructor:CGameServers_GetServerList_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CGameServers_GetServerList_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  filter_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGameServers_GetServerList_Request::ArenaDtor(void* object) {
  CGameServers_GetServerList_Request* _this = reinterpret_cast< CGameServers_GetServerList_Request* >(object);
  (void)_this;
}
void CGameServers_GetServerList_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameServers_GetServerList_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameServers_GetServerList_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameServers_GetServerList_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      filter_.ClearNonDefaultToEmpty();
    }
    limit_ = 100u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameServers_GetServerList_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string filter = 1 [(.description) = "Query filter string."];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_filter();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameServers_GetServerList_Request.filter");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 limit = 2 [default = 100, (.description) = "The maximum number of servers to return in the response"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_limit(&has_bits);
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGameServers_GetServerList_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameServers_GetServerList_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string filter = 1 [(.description) = "Query filter string."];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_filter().data(), static_cast<int>(this->_internal_filter().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameServers_GetServerList_Request.filter");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filter(), target);
  }

  // optional uint32 limit = 2 [default = 100, (.description) = "The maximum number of servers to return in the response"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameServers_GetServerList_Request)
  return target;
}

size_t CGameServers_GetServerList_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameServers_GetServerList_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string filter = 1 [(.description) = "Query filter string."];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_filter());
    }

    // optional uint32 limit = 2 [default = 100, (.description) = "The maximum number of servers to return in the response"];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_limit());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGameServers_GetServerList_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CGameServers_GetServerList_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGameServers_GetServerList_Request::GetClassData() const { return &_class_data_; }

void CGameServers_GetServerList_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CGameServers_GetServerList_Request *>(to)->MergeFrom(
      static_cast<const CGameServers_GetServerList_Request &>(from));
}


void CGameServers_GetServerList_Request::MergeFrom(const CGameServers_GetServerList_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameServers_GetServerList_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_filter(from._internal_filter());
    }
    if (cached_has_bits & 0x00000002u) {
      limit_ = from.limit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGameServers_GetServerList_Request::CopyFrom(const CGameServers_GetServerList_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameServers_GetServerList_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameServers_GetServerList_Request::IsInitialized() const {
  return true;
}

void CGameServers_GetServerList_Request::InternalSwap(CGameServers_GetServerList_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &filter_, lhs_arena,
      &other->filter_, rhs_arena
  );
  swap(limit_, other->limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameServers_GetServerList_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fgameservers_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fgameservers_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fgameservers_2esteamclient_2eproto[0]);
}

// ===================================================================

class CGameServers_GetServerList_Response_Server::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameServers_GetServerList_Response_Server>()._has_bits_);
  static void set_has_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gameport(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_specport(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_gamedir(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_product(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_region(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_players(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_max_players(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_bots(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_map(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_secure(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_dedicated(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_os(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_gametype(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CGameServers_GetServerList_Response_Server::CGameServers_GetServerList_Response_Server(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGameServers_GetServerList_Response.Server)
}
CGameServers_GetServerList_Response_Server::CGameServers_GetServerList_Response_Server(const CGameServers_GetServerList_Response_Server& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_addr()) {
    addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_addr(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  gamedir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    gamedir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_gamedir()) {
    gamedir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gamedir(), 
      GetArenaForAllocation());
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_version()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArenaForAllocation());
  }
  product_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    product_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_product()) {
    product_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_product(), 
      GetArenaForAllocation());
  }
  map_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    map_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_map()) {
    map_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_map(), 
      GetArenaForAllocation());
  }
  os_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    os_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_os()) {
    os_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_os(), 
      GetArenaForAllocation());
  }
  gametype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    gametype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_gametype()) {
    gametype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gametype(), 
      GetArenaForAllocation());
  }
  ::memcpy(&gameport_, &from.gameport_,
    static_cast<size_t>(reinterpret_cast<char*>(&dedicated_) -
    reinterpret_cast<char*>(&gameport_)) + sizeof(dedicated_));
  // @@protoc_insertion_point(copy_constructor:CGameServers_GetServerList_Response.Server)
}

inline void CGameServers_GetServerList_Response_Server::SharedCtor() {
addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
gamedir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  gamedir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
product_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  product_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
map_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  map_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
os_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  os_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
gametype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  gametype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&gameport_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&dedicated_) -
    reinterpret_cast<char*>(&gameport_)) + sizeof(dedicated_));
}

CGameServers_GetServerList_Response_Server::~CGameServers_GetServerList_Response_Server() {
  // @@protoc_insertion_point(destructor:CGameServers_GetServerList_Response.Server)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CGameServers_GetServerList_Response_Server::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gamedir_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  product_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  map_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  os_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gametype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGameServers_GetServerList_Response_Server::ArenaDtor(void* object) {
  CGameServers_GetServerList_Response_Server* _this = reinterpret_cast< CGameServers_GetServerList_Response_Server* >(object);
  (void)_this;
}
void CGameServers_GetServerList_Response_Server::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameServers_GetServerList_Response_Server::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameServers_GetServerList_Response_Server::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameServers_GetServerList_Response.Server)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      addr_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      gamedir_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      product_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      map_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      os_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      gametype_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&gameport_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bots_) -
        reinterpret_cast<char*>(&gameport_)) + sizeof(bots_));
  }
  if (cached_has_bits & 0x00030000u) {
    ::memset(&secure_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dedicated_) -
        reinterpret_cast<char*>(&secure_)) + sizeof(dedicated_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameServers_GetServerList_Response_Server::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string addr = 1 [(.description) = "The server\'s IP and query port"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameServers_GetServerList_Response.Server.addr");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 gameport = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_gameport(&has_bits);
          gameport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 specport = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_specport(&has_bits);
          specport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 steamid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameServers_GetServerList_Response.Server.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 appid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string gamedir = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_gamedir();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameServers_GetServerList_Response.Server.gamedir");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string version = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameServers_GetServerList_Response.Server.version");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string product = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_product();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameServers_GetServerList_Response.Server.product");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 region = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_region(&has_bits);
          region_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 players = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_players(&has_bits);
          players_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 max_players = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_max_players(&has_bits);
          max_players_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 bots = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_bots(&has_bits);
          bots_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string map = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_map();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameServers_GetServerList_Response.Server.map");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool secure = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_secure(&has_bits);
          secure_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool dedicated = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_dedicated(&has_bits);
          dedicated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string os = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_os();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameServers_GetServerList_Response.Server.os");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string gametype = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_gametype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameServers_GetServerList_Response.Server.gametype");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGameServers_GetServerList_Response_Server::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameServers_GetServerList_Response.Server)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string addr = 1 [(.description) = "The server\'s IP and query port"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_addr().data(), static_cast<int>(this->_internal_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameServers_GetServerList_Response.Server.addr");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_addr(), target);
  }

  // optional uint32 gameport = 2;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_gameport(), target);
  }

  // optional uint32 specport = 3;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_specport(), target);
  }

  // optional fixed64 steamid = 4;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(4, this->_internal_steamid(), target);
  }

  // optional string name = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameServers_GetServerList_Response.Server.name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_name(), target);
  }

  // optional uint32 appid = 6;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_appid(), target);
  }

  // optional string gamedir = 7;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_gamedir().data(), static_cast<int>(this->_internal_gamedir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameServers_GetServerList_Response.Server.gamedir");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_gamedir(), target);
  }

  // optional string version = 8;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameServers_GetServerList_Response.Server.version");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_version(), target);
  }

  // optional string product = 9;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_product().data(), static_cast<int>(this->_internal_product().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameServers_GetServerList_Response.Server.product");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_product(), target);
  }

  // optional int32 region = 10;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_region(), target);
  }

  // optional int32 players = 11;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_players(), target);
  }

  // optional int32 max_players = 12;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_max_players(), target);
  }

  // optional int32 bots = 13;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_bots(), target);
  }

  // optional string map = 14;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_map().data(), static_cast<int>(this->_internal_map().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameServers_GetServerList_Response.Server.map");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_map(), target);
  }

  // optional bool secure = 15;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_secure(), target);
  }

  // optional bool dedicated = 16;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_dedicated(), target);
  }

  // optional string os = 17;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_os().data(), static_cast<int>(this->_internal_os().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameServers_GetServerList_Response.Server.os");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_os(), target);
  }

  // optional string gametype = 18;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_gametype().data(), static_cast<int>(this->_internal_gametype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameServers_GetServerList_Response.Server.gametype");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_gametype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameServers_GetServerList_Response.Server)
  return target;
}

size_t CGameServers_GetServerList_Response_Server::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameServers_GetServerList_Response.Server)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string addr = 1 [(.description) = "The server\'s IP and query port"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_addr());
    }

    // optional string name = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string gamedir = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_gamedir());
    }

    // optional string version = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_version());
    }

    // optional string product = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_product());
    }

    // optional string map = 14;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_map());
    }

    // optional string os = 17;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_os());
    }

    // optional string gametype = 18;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_gametype());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 gameport = 2;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_gameport());
    }

    // optional uint32 specport = 3;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_specport());
    }

    // optional fixed64 steamid = 4;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional uint32 appid = 6;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional int32 region = 10;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_region());
    }

    // optional int32 players = 11;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_players());
    }

    // optional int32 max_players = 12;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_max_players());
    }

    // optional int32 bots = 13;
    if (cached_has_bits & 0x00008000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_bots());
    }

  }
  if (cached_has_bits & 0x00030000u) {
    // optional bool secure = 15;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 1;
    }

    // optional bool dedicated = 16;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGameServers_GetServerList_Response_Server::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CGameServers_GetServerList_Response_Server::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGameServers_GetServerList_Response_Server::GetClassData() const { return &_class_data_; }

void CGameServers_GetServerList_Response_Server::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CGameServers_GetServerList_Response_Server *>(to)->MergeFrom(
      static_cast<const CGameServers_GetServerList_Response_Server &>(from));
}


void CGameServers_GetServerList_Response_Server::MergeFrom(const CGameServers_GetServerList_Response_Server& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameServers_GetServerList_Response.Server)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_addr(from._internal_addr());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_gamedir(from._internal_gamedir());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_version(from._internal_version());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_product(from._internal_product());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_map(from._internal_map());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_os(from._internal_os());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_gametype(from._internal_gametype());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      gameport_ = from.gameport_;
    }
    if (cached_has_bits & 0x00000200u) {
      specport_ = from.specport_;
    }
    if (cached_has_bits & 0x00000400u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000800u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00001000u) {
      region_ = from.region_;
    }
    if (cached_has_bits & 0x00002000u) {
      players_ = from.players_;
    }
    if (cached_has_bits & 0x00004000u) {
      max_players_ = from.max_players_;
    }
    if (cached_has_bits & 0x00008000u) {
      bots_ = from.bots_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      secure_ = from.secure_;
    }
    if (cached_has_bits & 0x00020000u) {
      dedicated_ = from.dedicated_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGameServers_GetServerList_Response_Server::CopyFrom(const CGameServers_GetServerList_Response_Server& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameServers_GetServerList_Response.Server)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameServers_GetServerList_Response_Server::IsInitialized() const {
  return true;
}

void CGameServers_GetServerList_Response_Server::InternalSwap(CGameServers_GetServerList_Response_Server* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &addr_, lhs_arena,
      &other->addr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &gamedir_, lhs_arena,
      &other->gamedir_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &version_, lhs_arena,
      &other->version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &product_, lhs_arena,
      &other->product_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &map_, lhs_arena,
      &other->map_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &os_, lhs_arena,
      &other->os_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &gametype_, lhs_arena,
      &other->gametype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGameServers_GetServerList_Response_Server, dedicated_)
      + sizeof(CGameServers_GetServerList_Response_Server::dedicated_)
      - PROTOBUF_FIELD_OFFSET(CGameServers_GetServerList_Response_Server, gameport_)>(
          reinterpret_cast<char*>(&gameport_),
          reinterpret_cast<char*>(&other->gameport_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameServers_GetServerList_Response_Server::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fgameservers_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fgameservers_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fgameservers_2esteamclient_2eproto[1]);
}

// ===================================================================

class CGameServers_GetServerList_Response::_Internal {
 public:
};

CGameServers_GetServerList_Response::CGameServers_GetServerList_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  servers_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGameServers_GetServerList_Response)
}
CGameServers_GetServerList_Response::CGameServers_GetServerList_Response(const CGameServers_GetServerList_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      servers_(from.servers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGameServers_GetServerList_Response)
}

inline void CGameServers_GetServerList_Response::SharedCtor() {
}

CGameServers_GetServerList_Response::~CGameServers_GetServerList_Response() {
  // @@protoc_insertion_point(destructor:CGameServers_GetServerList_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CGameServers_GetServerList_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGameServers_GetServerList_Response::ArenaDtor(void* object) {
  CGameServers_GetServerList_Response* _this = reinterpret_cast< CGameServers_GetServerList_Response* >(object);
  (void)_this;
}
void CGameServers_GetServerList_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameServers_GetServerList_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameServers_GetServerList_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameServers_GetServerList_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  servers_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameServers_GetServerList_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CGameServers_GetServerList_Response.Server servers = 1 [(.description) = "List of servers matching the filter"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_servers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGameServers_GetServerList_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameServers_GetServerList_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CGameServers_GetServerList_Response.Server servers = 1 [(.description) = "List of servers matching the filter"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_servers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_servers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameServers_GetServerList_Response)
  return target;
}

size_t CGameServers_GetServerList_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameServers_GetServerList_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CGameServers_GetServerList_Response.Server servers = 1 [(.description) = "List of servers matching the filter"];
  total_size += 1UL * this->_internal_servers_size();
  for (const auto& msg : this->servers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGameServers_GetServerList_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CGameServers_GetServerList_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGameServers_GetServerList_Response::GetClassData() const { return &_class_data_; }

void CGameServers_GetServerList_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CGameServers_GetServerList_Response *>(to)->MergeFrom(
      static_cast<const CGameServers_GetServerList_Response &>(from));
}


void CGameServers_GetServerList_Response::MergeFrom(const CGameServers_GetServerList_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameServers_GetServerList_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  servers_.MergeFrom(from.servers_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGameServers_GetServerList_Response::CopyFrom(const CGameServers_GetServerList_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameServers_GetServerList_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameServers_GetServerList_Response::IsInitialized() const {
  return true;
}

void CGameServers_GetServerList_Response::InternalSwap(CGameServers_GetServerList_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  servers_.InternalSwap(&other->servers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameServers_GetServerList_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fgameservers_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fgameservers_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fgameservers_2esteamclient_2eproto[2]);
}

// ===================================================================

class CGameServers_GetServerSteamIDsByIP_Request::_Internal {
 public:
};

CGameServers_GetServerSteamIDsByIP_Request::CGameServers_GetServerSteamIDsByIP_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  server_ips_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGameServers_GetServerSteamIDsByIP_Request)
}
CGameServers_GetServerSteamIDsByIP_Request::CGameServers_GetServerSteamIDsByIP_Request(const CGameServers_GetServerSteamIDsByIP_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      server_ips_(from.server_ips_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGameServers_GetServerSteamIDsByIP_Request)
}

inline void CGameServers_GetServerSteamIDsByIP_Request::SharedCtor() {
}

CGameServers_GetServerSteamIDsByIP_Request::~CGameServers_GetServerSteamIDsByIP_Request() {
  // @@protoc_insertion_point(destructor:CGameServers_GetServerSteamIDsByIP_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CGameServers_GetServerSteamIDsByIP_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGameServers_GetServerSteamIDsByIP_Request::ArenaDtor(void* object) {
  CGameServers_GetServerSteamIDsByIP_Request* _this = reinterpret_cast< CGameServers_GetServerSteamIDsByIP_Request* >(object);
  (void)_this;
}
void CGameServers_GetServerSteamIDsByIP_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameServers_GetServerSteamIDsByIP_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameServers_GetServerSteamIDsByIP_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameServers_GetServerSteamIDsByIP_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_ips_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameServers_GetServerSteamIDsByIP_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string server_ips = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_server_ips();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameServers_GetServerSteamIDsByIP_Request.server_ips");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGameServers_GetServerSteamIDsByIP_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameServers_GetServerSteamIDsByIP_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string server_ips = 1;
  for (int i = 0, n = this->_internal_server_ips_size(); i < n; i++) {
    const auto& s = this->_internal_server_ips(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameServers_GetServerSteamIDsByIP_Request.server_ips");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameServers_GetServerSteamIDsByIP_Request)
  return target;
}

size_t CGameServers_GetServerSteamIDsByIP_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameServers_GetServerSteamIDsByIP_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string server_ips = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(server_ips_.size());
  for (int i = 0, n = server_ips_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      server_ips_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGameServers_GetServerSteamIDsByIP_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CGameServers_GetServerSteamIDsByIP_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGameServers_GetServerSteamIDsByIP_Request::GetClassData() const { return &_class_data_; }

void CGameServers_GetServerSteamIDsByIP_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CGameServers_GetServerSteamIDsByIP_Request *>(to)->MergeFrom(
      static_cast<const CGameServers_GetServerSteamIDsByIP_Request &>(from));
}


void CGameServers_GetServerSteamIDsByIP_Request::MergeFrom(const CGameServers_GetServerSteamIDsByIP_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameServers_GetServerSteamIDsByIP_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  server_ips_.MergeFrom(from.server_ips_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGameServers_GetServerSteamIDsByIP_Request::CopyFrom(const CGameServers_GetServerSteamIDsByIP_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameServers_GetServerSteamIDsByIP_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameServers_GetServerSteamIDsByIP_Request::IsInitialized() const {
  return true;
}

void CGameServers_GetServerSteamIDsByIP_Request::InternalSwap(CGameServers_GetServerSteamIDsByIP_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  server_ips_.InternalSwap(&other->server_ips_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameServers_GetServerSteamIDsByIP_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fgameservers_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fgameservers_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fgameservers_2esteamclient_2eproto[3]);
}

// ===================================================================

class CGameServers_IPsWithSteamIDs_Response_Server::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameServers_IPsWithSteamIDs_Response_Server>()._has_bits_);
  static void set_has_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CGameServers_IPsWithSteamIDs_Response_Server::CGameServers_IPsWithSteamIDs_Response_Server(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGameServers_IPsWithSteamIDs_Response.Server)
}
CGameServers_IPsWithSteamIDs_Response_Server::CGameServers_IPsWithSteamIDs_Response_Server(const CGameServers_IPsWithSteamIDs_Response_Server& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_addr()) {
    addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_addr(), 
      GetArenaForAllocation());
  }
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:CGameServers_IPsWithSteamIDs_Response.Server)
}

inline void CGameServers_IPsWithSteamIDs_Response_Server::SharedCtor() {
addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
steamid_ = uint64_t{0u};
}

CGameServers_IPsWithSteamIDs_Response_Server::~CGameServers_IPsWithSteamIDs_Response_Server() {
  // @@protoc_insertion_point(destructor:CGameServers_IPsWithSteamIDs_Response.Server)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CGameServers_IPsWithSteamIDs_Response_Server::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGameServers_IPsWithSteamIDs_Response_Server::ArenaDtor(void* object) {
  CGameServers_IPsWithSteamIDs_Response_Server* _this = reinterpret_cast< CGameServers_IPsWithSteamIDs_Response_Server* >(object);
  (void)_this;
}
void CGameServers_IPsWithSteamIDs_Response_Server::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameServers_IPsWithSteamIDs_Response_Server::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameServers_IPsWithSteamIDs_Response_Server::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameServers_IPsWithSteamIDs_Response.Server)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    addr_.ClearNonDefaultToEmpty();
  }
  steamid_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameServers_IPsWithSteamIDs_Response_Server::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameServers_IPsWithSteamIDs_Response.Server.addr");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 steamid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGameServers_IPsWithSteamIDs_Response_Server::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameServers_IPsWithSteamIDs_Response.Server)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string addr = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_addr().data(), static_cast<int>(this->_internal_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameServers_IPsWithSteamIDs_Response.Server.addr");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_addr(), target);
  }

  // optional fixed64 steamid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameServers_IPsWithSteamIDs_Response.Server)
  return target;
}

size_t CGameServers_IPsWithSteamIDs_Response_Server::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameServers_IPsWithSteamIDs_Response.Server)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string addr = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_addr());
    }

    // optional fixed64 steamid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGameServers_IPsWithSteamIDs_Response_Server::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CGameServers_IPsWithSteamIDs_Response_Server::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGameServers_IPsWithSteamIDs_Response_Server::GetClassData() const { return &_class_data_; }

void CGameServers_IPsWithSteamIDs_Response_Server::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CGameServers_IPsWithSteamIDs_Response_Server *>(to)->MergeFrom(
      static_cast<const CGameServers_IPsWithSteamIDs_Response_Server &>(from));
}


void CGameServers_IPsWithSteamIDs_Response_Server::MergeFrom(const CGameServers_IPsWithSteamIDs_Response_Server& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameServers_IPsWithSteamIDs_Response.Server)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_addr(from._internal_addr());
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGameServers_IPsWithSteamIDs_Response_Server::CopyFrom(const CGameServers_IPsWithSteamIDs_Response_Server& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameServers_IPsWithSteamIDs_Response.Server)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameServers_IPsWithSteamIDs_Response_Server::IsInitialized() const {
  return true;
}

void CGameServers_IPsWithSteamIDs_Response_Server::InternalSwap(CGameServers_IPsWithSteamIDs_Response_Server* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &addr_, lhs_arena,
      &other->addr_, rhs_arena
  );
  swap(steamid_, other->steamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameServers_IPsWithSteamIDs_Response_Server::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fgameservers_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fgameservers_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fgameservers_2esteamclient_2eproto[4]);
}

// ===================================================================

class CGameServers_IPsWithSteamIDs_Response::_Internal {
 public:
};

CGameServers_IPsWithSteamIDs_Response::CGameServers_IPsWithSteamIDs_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  servers_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGameServers_IPsWithSteamIDs_Response)
}
CGameServers_IPsWithSteamIDs_Response::CGameServers_IPsWithSteamIDs_Response(const CGameServers_IPsWithSteamIDs_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      servers_(from.servers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGameServers_IPsWithSteamIDs_Response)
}

inline void CGameServers_IPsWithSteamIDs_Response::SharedCtor() {
}

CGameServers_IPsWithSteamIDs_Response::~CGameServers_IPsWithSteamIDs_Response() {
  // @@protoc_insertion_point(destructor:CGameServers_IPsWithSteamIDs_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CGameServers_IPsWithSteamIDs_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGameServers_IPsWithSteamIDs_Response::ArenaDtor(void* object) {
  CGameServers_IPsWithSteamIDs_Response* _this = reinterpret_cast< CGameServers_IPsWithSteamIDs_Response* >(object);
  (void)_this;
}
void CGameServers_IPsWithSteamIDs_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameServers_IPsWithSteamIDs_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameServers_IPsWithSteamIDs_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameServers_IPsWithSteamIDs_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  servers_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameServers_IPsWithSteamIDs_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CGameServers_IPsWithSteamIDs_Response.Server servers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_servers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGameServers_IPsWithSteamIDs_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameServers_IPsWithSteamIDs_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CGameServers_IPsWithSteamIDs_Response.Server servers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_servers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_servers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameServers_IPsWithSteamIDs_Response)
  return target;
}

size_t CGameServers_IPsWithSteamIDs_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameServers_IPsWithSteamIDs_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CGameServers_IPsWithSteamIDs_Response.Server servers = 1;
  total_size += 1UL * this->_internal_servers_size();
  for (const auto& msg : this->servers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGameServers_IPsWithSteamIDs_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CGameServers_IPsWithSteamIDs_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGameServers_IPsWithSteamIDs_Response::GetClassData() const { return &_class_data_; }

void CGameServers_IPsWithSteamIDs_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CGameServers_IPsWithSteamIDs_Response *>(to)->MergeFrom(
      static_cast<const CGameServers_IPsWithSteamIDs_Response &>(from));
}


void CGameServers_IPsWithSteamIDs_Response::MergeFrom(const CGameServers_IPsWithSteamIDs_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameServers_IPsWithSteamIDs_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  servers_.MergeFrom(from.servers_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGameServers_IPsWithSteamIDs_Response::CopyFrom(const CGameServers_IPsWithSteamIDs_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameServers_IPsWithSteamIDs_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameServers_IPsWithSteamIDs_Response::IsInitialized() const {
  return true;
}

void CGameServers_IPsWithSteamIDs_Response::InternalSwap(CGameServers_IPsWithSteamIDs_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  servers_.InternalSwap(&other->servers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameServers_IPsWithSteamIDs_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fgameservers_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fgameservers_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fgameservers_2esteamclient_2eproto[5]);
}

// ===================================================================

class CGameServers_GetServerIPsBySteamID_Request::_Internal {
 public:
};

CGameServers_GetServerIPsBySteamID_Request::CGameServers_GetServerIPsBySteamID_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  server_steamids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGameServers_GetServerIPsBySteamID_Request)
}
CGameServers_GetServerIPsBySteamID_Request::CGameServers_GetServerIPsBySteamID_Request(const CGameServers_GetServerIPsBySteamID_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      server_steamids_(from.server_steamids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGameServers_GetServerIPsBySteamID_Request)
}

inline void CGameServers_GetServerIPsBySteamID_Request::SharedCtor() {
}

CGameServers_GetServerIPsBySteamID_Request::~CGameServers_GetServerIPsBySteamID_Request() {
  // @@protoc_insertion_point(destructor:CGameServers_GetServerIPsBySteamID_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CGameServers_GetServerIPsBySteamID_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGameServers_GetServerIPsBySteamID_Request::ArenaDtor(void* object) {
  CGameServers_GetServerIPsBySteamID_Request* _this = reinterpret_cast< CGameServers_GetServerIPsBySteamID_Request* >(object);
  (void)_this;
}
void CGameServers_GetServerIPsBySteamID_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameServers_GetServerIPsBySteamID_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameServers_GetServerIPsBySteamID_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameServers_GetServerIPsBySteamID_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_steamids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameServers_GetServerIPsBySteamID_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated fixed64 server_steamids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_server_steamids(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr));
            ptr += sizeof(uint64_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<9>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_server_steamids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGameServers_GetServerIPsBySteamID_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameServers_GetServerIPsBySteamID_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed64 server_steamids = 1;
  for (int i = 0, n = this->_internal_server_steamids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_server_steamids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameServers_GetServerIPsBySteamID_Request)
  return target;
}

size_t CGameServers_GetServerIPsBySteamID_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameServers_GetServerIPsBySteamID_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 server_steamids = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_server_steamids_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_server_steamids_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGameServers_GetServerIPsBySteamID_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CGameServers_GetServerIPsBySteamID_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGameServers_GetServerIPsBySteamID_Request::GetClassData() const { return &_class_data_; }

void CGameServers_GetServerIPsBySteamID_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CGameServers_GetServerIPsBySteamID_Request *>(to)->MergeFrom(
      static_cast<const CGameServers_GetServerIPsBySteamID_Request &>(from));
}


void CGameServers_GetServerIPsBySteamID_Request::MergeFrom(const CGameServers_GetServerIPsBySteamID_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameServers_GetServerIPsBySteamID_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  server_steamids_.MergeFrom(from.server_steamids_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGameServers_GetServerIPsBySteamID_Request::CopyFrom(const CGameServers_GetServerIPsBySteamID_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameServers_GetServerIPsBySteamID_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameServers_GetServerIPsBySteamID_Request::IsInitialized() const {
  return true;
}

void CGameServers_GetServerIPsBySteamID_Request::InternalSwap(CGameServers_GetServerIPsBySteamID_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  server_steamids_.InternalSwap(&other->server_steamids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameServers_GetServerIPsBySteamID_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fgameservers_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fgameservers_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fgameservers_2esteamclient_2eproto[6]);
}

// ===================================================================

class CGameServers_QueryByFakeIP_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameServers_QueryByFakeIP_Request>()._has_bits_);
  static void set_has_fake_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fake_port(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_query_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CGameServers_QueryByFakeIP_Request::CGameServers_QueryByFakeIP_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGameServers_QueryByFakeIP_Request)
}
CGameServers_QueryByFakeIP_Request::CGameServers_QueryByFakeIP_Request(const CGameServers_QueryByFakeIP_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&fake_ip_, &from.fake_ip_,
    static_cast<size_t>(reinterpret_cast<char*>(&query_type_) -
    reinterpret_cast<char*>(&fake_ip_)) + sizeof(query_type_));
  // @@protoc_insertion_point(copy_constructor:CGameServers_QueryByFakeIP_Request)
}

inline void CGameServers_QueryByFakeIP_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&fake_ip_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&query_type_) -
    reinterpret_cast<char*>(&fake_ip_)) + sizeof(query_type_));
}

CGameServers_QueryByFakeIP_Request::~CGameServers_QueryByFakeIP_Request() {
  // @@protoc_insertion_point(destructor:CGameServers_QueryByFakeIP_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CGameServers_QueryByFakeIP_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGameServers_QueryByFakeIP_Request::ArenaDtor(void* object) {
  CGameServers_QueryByFakeIP_Request* _this = reinterpret_cast< CGameServers_QueryByFakeIP_Request* >(object);
  (void)_this;
}
void CGameServers_QueryByFakeIP_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameServers_QueryByFakeIP_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameServers_QueryByFakeIP_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameServers_QueryByFakeIP_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&fake_ip_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&query_type_) -
        reinterpret_cast<char*>(&fake_ip_)) + sizeof(query_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameServers_QueryByFakeIP_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 fake_ip = 1 [(.description) = "FakeIP of server to query."];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_fake_ip(&has_bits);
          fake_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 fake_port = 2 [(.description) = "Fake port of server to query."];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_fake_port(&has_bits);
          fake_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 app_id = 3 [(.description) = "AppID to use.  Each AppID has its own FakeIP address."];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CGameServers_QueryByFakeIP_Request.EQueryType query_type = 4 [default = Query_Invalid, (.description) = "What type of query?"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CGameServers_QueryByFakeIP_Request_EQueryType_IsValid(val))) {
            _internal_set_query_type(static_cast<::CGameServers_QueryByFakeIP_Request_EQueryType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGameServers_QueryByFakeIP_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameServers_QueryByFakeIP_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fake_ip = 1 [(.description) = "FakeIP of server to query."];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fake_ip(), target);
  }

  // optional uint32 fake_port = 2 [(.description) = "Fake port of server to query."];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_fake_port(), target);
  }

  // optional uint32 app_id = 3 [(.description) = "AppID to use.  Each AppID has its own FakeIP address."];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_app_id(), target);
  }

  // optional .CGameServers_QueryByFakeIP_Request.EQueryType query_type = 4 [default = Query_Invalid, (.description) = "What type of query?"];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_query_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameServers_QueryByFakeIP_Request)
  return target;
}

size_t CGameServers_QueryByFakeIP_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameServers_QueryByFakeIP_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 fake_ip = 1 [(.description) = "FakeIP of server to query."];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_fake_ip());
    }

    // optional uint32 fake_port = 2 [(.description) = "Fake port of server to query."];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_fake_port());
    }

    // optional uint32 app_id = 3 [(.description) = "AppID to use.  Each AppID has its own FakeIP address."];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
    }

    // optional .CGameServers_QueryByFakeIP_Request.EQueryType query_type = 4 [default = Query_Invalid, (.description) = "What type of query?"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_query_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGameServers_QueryByFakeIP_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CGameServers_QueryByFakeIP_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGameServers_QueryByFakeIP_Request::GetClassData() const { return &_class_data_; }

void CGameServers_QueryByFakeIP_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CGameServers_QueryByFakeIP_Request *>(to)->MergeFrom(
      static_cast<const CGameServers_QueryByFakeIP_Request &>(from));
}


void CGameServers_QueryByFakeIP_Request::MergeFrom(const CGameServers_QueryByFakeIP_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameServers_QueryByFakeIP_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      fake_ip_ = from.fake_ip_;
    }
    if (cached_has_bits & 0x00000002u) {
      fake_port_ = from.fake_port_;
    }
    if (cached_has_bits & 0x00000004u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      query_type_ = from.query_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGameServers_QueryByFakeIP_Request::CopyFrom(const CGameServers_QueryByFakeIP_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameServers_QueryByFakeIP_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameServers_QueryByFakeIP_Request::IsInitialized() const {
  return true;
}

void CGameServers_QueryByFakeIP_Request::InternalSwap(CGameServers_QueryByFakeIP_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGameServers_QueryByFakeIP_Request, query_type_)
      + sizeof(CGameServers_QueryByFakeIP_Request::query_type_)
      - PROTOBUF_FIELD_OFFSET(CGameServers_QueryByFakeIP_Request, fake_ip_)>(
          reinterpret_cast<char*>(&fake_ip_),
          reinterpret_cast<char*>(&other->fake_ip_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameServers_QueryByFakeIP_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fgameservers_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fgameservers_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fgameservers_2esteamclient_2eproto[7]);
}

// ===================================================================

class CMsgGameServerPingQueryData::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGameServerPingQueryData>()._has_bits_);
  static const ::CMsgIPAddress& server_ip(const CMsgGameServerPingQueryData* msg);
  static void set_has_server_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_query_port(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_game_port(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_spectator_port(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_spectator_server_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_server_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_gamedir(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_map(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_game_description(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_gametype(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_num_players(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_max_players(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_num_bots(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_password(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_secure(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_dedicated(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_sdr_popid(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_sdr_location_string(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::CMsgIPAddress&
CMsgGameServerPingQueryData::_Internal::server_ip(const CMsgGameServerPingQueryData* msg) {
  return *msg->server_ip_;
}
void CMsgGameServerPingQueryData::clear_server_ip() {
  if (server_ip_ != nullptr) server_ip_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
CMsgGameServerPingQueryData::CMsgGameServerPingQueryData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgGameServerPingQueryData)
}
CMsgGameServerPingQueryData::CMsgGameServerPingQueryData(const CMsgGameServerPingQueryData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  spectator_server_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    spectator_server_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_spectator_server_name()) {
    spectator_server_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_spectator_server_name(), 
      GetArenaForAllocation());
  }
  server_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    server_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_server_name()) {
    server_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_server_name(), 
      GetArenaForAllocation());
  }
  gamedir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    gamedir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_gamedir()) {
    gamedir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gamedir(), 
      GetArenaForAllocation());
  }
  map_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    map_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_map()) {
    map_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_map(), 
      GetArenaForAllocation());
  }
  game_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    game_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_game_description()) {
    game_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_game_description(), 
      GetArenaForAllocation());
  }
  gametype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    gametype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_gametype()) {
    gametype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gametype(), 
      GetArenaForAllocation());
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_version()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArenaForAllocation());
  }
  sdr_location_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sdr_location_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sdr_location_string()) {
    sdr_location_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sdr_location_string(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_server_ip()) {
    server_ip_ = new ::CMsgIPAddress(*from.server_ip_);
  } else {
    server_ip_ = nullptr;
  }
  ::memcpy(&query_port_, &from.query_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&sdr_popid_) -
    reinterpret_cast<char*>(&query_port_)) + sizeof(sdr_popid_));
  // @@protoc_insertion_point(copy_constructor:CMsgGameServerPingQueryData)
}

inline void CMsgGameServerPingQueryData::SharedCtor() {
spectator_server_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  spectator_server_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
server_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  server_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
gamedir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  gamedir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
map_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  map_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
game_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  game_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
gametype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  gametype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
sdr_location_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sdr_location_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&server_ip_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sdr_popid_) -
    reinterpret_cast<char*>(&server_ip_)) + sizeof(sdr_popid_));
}

CMsgGameServerPingQueryData::~CMsgGameServerPingQueryData() {
  // @@protoc_insertion_point(destructor:CMsgGameServerPingQueryData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgGameServerPingQueryData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  spectator_server_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  server_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gamedir_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  map_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  game_description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gametype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sdr_location_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete server_ip_;
}

void CMsgGameServerPingQueryData::ArenaDtor(void* object) {
  CMsgGameServerPingQueryData* _this = reinterpret_cast< CMsgGameServerPingQueryData* >(object);
  (void)_this;
}
void CMsgGameServerPingQueryData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGameServerPingQueryData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGameServerPingQueryData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameServerPingQueryData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      spectator_server_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      server_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      gamedir_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      map_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      game_description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      gametype_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      sdr_location_string_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(server_ip_ != nullptr);
    server_ip_->Clear();
  }
  if (cached_has_bits & 0x0000fe00u) {
    ::memset(&query_port_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_players_) -
        reinterpret_cast<char*>(&query_port_)) + sizeof(max_players_));
  }
  if (cached_has_bits & 0x001f0000u) {
    ::memset(&num_bots_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sdr_popid_) -
        reinterpret_cast<char*>(&num_bots_)) + sizeof(sdr_popid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGameServerPingQueryData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgIPAddress server_ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_server_ip(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 query_port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_query_port(&has_bits);
          query_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 game_port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_game_port(&has_bits);
          game_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 spectator_port = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_spectator_port(&has_bits);
          spectator_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string spectator_server_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_spectator_server_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGameServerPingQueryData.spectator_server_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string server_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_server_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGameServerPingQueryData.server_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 steamid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 app_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string gamedir = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_gamedir();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGameServerPingQueryData.gamedir");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string map = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_map();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGameServerPingQueryData.map");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string game_description = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_game_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGameServerPingQueryData.game_description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string gametype = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_gametype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGameServerPingQueryData.gametype");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 num_players = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_num_players(&has_bits);
          num_players_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 max_players = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_max_players(&has_bits);
          max_players_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 num_bots = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_num_bots(&has_bits);
          num_bots_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool password = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_password(&has_bits);
          password_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool secure = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_secure(&has_bits);
          secure_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool dedicated = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_dedicated(&has_bits);
          dedicated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string version = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGameServerPingQueryData.version");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 sdr_popid = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 165)) {
          _Internal::set_has_sdr_popid(&has_bits);
          sdr_popid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional string sdr_location_string = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_sdr_location_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGameServerPingQueryData.sdr_location_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGameServerPingQueryData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameServerPingQueryData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgIPAddress server_ip = 1;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::server_ip(this), target, stream);
  }

  // optional uint32 query_port = 2;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_query_port(), target);
  }

  // optional uint32 game_port = 3;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_game_port(), target);
  }

  // optional uint32 spectator_port = 4;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_spectator_port(), target);
  }

  // optional string spectator_server_name = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_spectator_server_name().data(), static_cast<int>(this->_internal_spectator_server_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGameServerPingQueryData.spectator_server_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_spectator_server_name(), target);
  }

  // optional string server_name = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_server_name().data(), static_cast<int>(this->_internal_server_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGameServerPingQueryData.server_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_server_name(), target);
  }

  // optional fixed64 steamid = 7;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(7, this->_internal_steamid(), target);
  }

  // optional uint32 app_id = 8;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_app_id(), target);
  }

  // optional string gamedir = 9;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_gamedir().data(), static_cast<int>(this->_internal_gamedir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGameServerPingQueryData.gamedir");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_gamedir(), target);
  }

  // optional string map = 10;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_map().data(), static_cast<int>(this->_internal_map().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGameServerPingQueryData.map");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_map(), target);
  }

  // optional string game_description = 11;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_game_description().data(), static_cast<int>(this->_internal_game_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGameServerPingQueryData.game_description");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_game_description(), target);
  }

  // optional string gametype = 12;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_gametype().data(), static_cast<int>(this->_internal_gametype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGameServerPingQueryData.gametype");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_gametype(), target);
  }

  // optional uint32 num_players = 13;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_num_players(), target);
  }

  // optional uint32 max_players = 14;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_max_players(), target);
  }

  // optional uint32 num_bots = 15;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_num_bots(), target);
  }

  // optional bool password = 16;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_password(), target);
  }

  // optional bool secure = 17;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_secure(), target);
  }

  // optional bool dedicated = 18;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_dedicated(), target);
  }

  // optional string version = 19;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGameServerPingQueryData.version");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_version(), target);
  }

  // optional fixed32 sdr_popid = 20;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(20, this->_internal_sdr_popid(), target);
  }

  // optional string sdr_location_string = 21;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sdr_location_string().data(), static_cast<int>(this->_internal_sdr_location_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGameServerPingQueryData.sdr_location_string");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_sdr_location_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameServerPingQueryData)
  return target;
}

size_t CMsgGameServerPingQueryData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameServerPingQueryData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string spectator_server_name = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_spectator_server_name());
    }

    // optional string server_name = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_server_name());
    }

    // optional string gamedir = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_gamedir());
    }

    // optional string map = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_map());
    }

    // optional string game_description = 11;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_game_description());
    }

    // optional string gametype = 12;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_gametype());
    }

    // optional string version = 19;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_version());
    }

    // optional string sdr_location_string = 21;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sdr_location_string());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .CMsgIPAddress server_ip = 1;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *server_ip_);
    }

    // optional uint32 query_port = 2;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_query_port());
    }

    // optional uint32 game_port = 3;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_game_port());
    }

    // optional uint32 spectator_port = 4;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_spectator_port());
    }

    // optional uint32 app_id = 8;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
    }

    // optional fixed64 steamid = 7;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional uint32 num_players = 13;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_num_players());
    }

    // optional uint32 max_players = 14;
    if (cached_has_bits & 0x00008000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_max_players());
    }

  }
  if (cached_has_bits & 0x001f0000u) {
    // optional uint32 num_bots = 15;
    if (cached_has_bits & 0x00010000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_num_bots());
    }

    // optional bool password = 16;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional bool secure = 17;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional bool dedicated = 18;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional fixed32 sdr_popid = 20;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGameServerPingQueryData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgGameServerPingQueryData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGameServerPingQueryData::GetClassData() const { return &_class_data_; }

void CMsgGameServerPingQueryData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgGameServerPingQueryData *>(to)->MergeFrom(
      static_cast<const CMsgGameServerPingQueryData &>(from));
}


void CMsgGameServerPingQueryData::MergeFrom(const CMsgGameServerPingQueryData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameServerPingQueryData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_spectator_server_name(from._internal_spectator_server_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_server_name(from._internal_server_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_gamedir(from._internal_gamedir());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_map(from._internal_map());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_game_description(from._internal_game_description());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_gametype(from._internal_gametype());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_version(from._internal_version());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_sdr_location_string(from._internal_sdr_location_string());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_server_ip()->::CMsgIPAddress::MergeFrom(from._internal_server_ip());
    }
    if (cached_has_bits & 0x00000200u) {
      query_port_ = from.query_port_;
    }
    if (cached_has_bits & 0x00000400u) {
      game_port_ = from.game_port_;
    }
    if (cached_has_bits & 0x00000800u) {
      spectator_port_ = from.spectator_port_;
    }
    if (cached_has_bits & 0x00001000u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00002000u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00004000u) {
      num_players_ = from.num_players_;
    }
    if (cached_has_bits & 0x00008000u) {
      max_players_ = from.max_players_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x001f0000u) {
    if (cached_has_bits & 0x00010000u) {
      num_bots_ = from.num_bots_;
    }
    if (cached_has_bits & 0x00020000u) {
      password_ = from.password_;
    }
    if (cached_has_bits & 0x00040000u) {
      secure_ = from.secure_;
    }
    if (cached_has_bits & 0x00080000u) {
      dedicated_ = from.dedicated_;
    }
    if (cached_has_bits & 0x00100000u) {
      sdr_popid_ = from.sdr_popid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGameServerPingQueryData::CopyFrom(const CMsgGameServerPingQueryData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameServerPingQueryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameServerPingQueryData::IsInitialized() const {
  return true;
}

void CMsgGameServerPingQueryData::InternalSwap(CMsgGameServerPingQueryData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &spectator_server_name_, lhs_arena,
      &other->spectator_server_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &server_name_, lhs_arena,
      &other->server_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &gamedir_, lhs_arena,
      &other->gamedir_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &map_, lhs_arena,
      &other->map_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &game_description_, lhs_arena,
      &other->game_description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &gametype_, lhs_arena,
      &other->gametype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &version_, lhs_arena,
      &other->version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sdr_location_string_, lhs_arena,
      &other->sdr_location_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGameServerPingQueryData, sdr_popid_)
      + sizeof(CMsgGameServerPingQueryData::sdr_popid_)
      - PROTOBUF_FIELD_OFFSET(CMsgGameServerPingQueryData, server_ip_)>(
          reinterpret_cast<char*>(&server_ip_),
          reinterpret_cast<char*>(&other->server_ip_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGameServerPingQueryData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fgameservers_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fgameservers_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fgameservers_2esteamclient_2eproto[8]);
}

// ===================================================================

class CMsgGameServerPlayersQueryData_Player::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGameServerPlayersQueryData_Player>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_time_played(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgGameServerPlayersQueryData_Player::CMsgGameServerPlayersQueryData_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgGameServerPlayersQueryData.Player)
}
CMsgGameServerPlayersQueryData_Player::CMsgGameServerPlayersQueryData_Player(const CMsgGameServerPlayersQueryData_Player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&score_, &from.score_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_played_) -
    reinterpret_cast<char*>(&score_)) + sizeof(time_played_));
  // @@protoc_insertion_point(copy_constructor:CMsgGameServerPlayersQueryData.Player)
}

inline void CMsgGameServerPlayersQueryData_Player::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&score_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&time_played_) -
    reinterpret_cast<char*>(&score_)) + sizeof(time_played_));
}

CMsgGameServerPlayersQueryData_Player::~CMsgGameServerPlayersQueryData_Player() {
  // @@protoc_insertion_point(destructor:CMsgGameServerPlayersQueryData.Player)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgGameServerPlayersQueryData_Player::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGameServerPlayersQueryData_Player::ArenaDtor(void* object) {
  CMsgGameServerPlayersQueryData_Player* _this = reinterpret_cast< CMsgGameServerPlayersQueryData_Player* >(object);
  (void)_this;
}
void CMsgGameServerPlayersQueryData_Player::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGameServerPlayersQueryData_Player::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGameServerPlayersQueryData_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameServerPlayersQueryData.Player)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&score_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_played_) -
        reinterpret_cast<char*>(&score_)) + sizeof(time_played_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGameServerPlayersQueryData_Player::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGameServerPlayersQueryData.Player.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_score(&has_bits);
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 time_played = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_time_played(&has_bits);
          time_played_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGameServerPlayersQueryData_Player::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameServerPlayersQueryData.Player)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGameServerPlayersQueryData.Player.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional uint32 score = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_score(), target);
  }

  // optional uint32 time_played = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_time_played(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameServerPlayersQueryData.Player)
  return target;
}

size_t CMsgGameServerPlayersQueryData_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameServerPlayersQueryData.Player)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint32 score = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_score());
    }

    // optional uint32 time_played = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_time_played());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGameServerPlayersQueryData_Player::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgGameServerPlayersQueryData_Player::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGameServerPlayersQueryData_Player::GetClassData() const { return &_class_data_; }

void CMsgGameServerPlayersQueryData_Player::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgGameServerPlayersQueryData_Player *>(to)->MergeFrom(
      static_cast<const CMsgGameServerPlayersQueryData_Player &>(from));
}


void CMsgGameServerPlayersQueryData_Player::MergeFrom(const CMsgGameServerPlayersQueryData_Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameServerPlayersQueryData.Player)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_played_ = from.time_played_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGameServerPlayersQueryData_Player::CopyFrom(const CMsgGameServerPlayersQueryData_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameServerPlayersQueryData.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameServerPlayersQueryData_Player::IsInitialized() const {
  return true;
}

void CMsgGameServerPlayersQueryData_Player::InternalSwap(CMsgGameServerPlayersQueryData_Player* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGameServerPlayersQueryData_Player, time_played_)
      + sizeof(CMsgGameServerPlayersQueryData_Player::time_played_)
      - PROTOBUF_FIELD_OFFSET(CMsgGameServerPlayersQueryData_Player, score_)>(
          reinterpret_cast<char*>(&score_),
          reinterpret_cast<char*>(&other->score_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGameServerPlayersQueryData_Player::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fgameservers_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fgameservers_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fgameservers_2esteamclient_2eproto[9]);
}

// ===================================================================

class CMsgGameServerPlayersQueryData::_Internal {
 public:
};

CMsgGameServerPlayersQueryData::CMsgGameServerPlayersQueryData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  players_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgGameServerPlayersQueryData)
}
CMsgGameServerPlayersQueryData::CMsgGameServerPlayersQueryData(const CMsgGameServerPlayersQueryData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      players_(from.players_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGameServerPlayersQueryData)
}

inline void CMsgGameServerPlayersQueryData::SharedCtor() {
}

CMsgGameServerPlayersQueryData::~CMsgGameServerPlayersQueryData() {
  // @@protoc_insertion_point(destructor:CMsgGameServerPlayersQueryData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgGameServerPlayersQueryData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGameServerPlayersQueryData::ArenaDtor(void* object) {
  CMsgGameServerPlayersQueryData* _this = reinterpret_cast< CMsgGameServerPlayersQueryData* >(object);
  (void)_this;
}
void CMsgGameServerPlayersQueryData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGameServerPlayersQueryData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGameServerPlayersQueryData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameServerPlayersQueryData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGameServerPlayersQueryData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgGameServerPlayersQueryData.Player players = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGameServerPlayersQueryData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameServerPlayersQueryData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgGameServerPlayersQueryData.Player players = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_players_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_players(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameServerPlayersQueryData)
  return target;
}

size_t CMsgGameServerPlayersQueryData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameServerPlayersQueryData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGameServerPlayersQueryData.Player players = 1;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGameServerPlayersQueryData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgGameServerPlayersQueryData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGameServerPlayersQueryData::GetClassData() const { return &_class_data_; }

void CMsgGameServerPlayersQueryData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgGameServerPlayersQueryData *>(to)->MergeFrom(
      static_cast<const CMsgGameServerPlayersQueryData &>(from));
}


void CMsgGameServerPlayersQueryData::MergeFrom(const CMsgGameServerPlayersQueryData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameServerPlayersQueryData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGameServerPlayersQueryData::CopyFrom(const CMsgGameServerPlayersQueryData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameServerPlayersQueryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameServerPlayersQueryData::IsInitialized() const {
  return true;
}

void CMsgGameServerPlayersQueryData::InternalSwap(CMsgGameServerPlayersQueryData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  players_.InternalSwap(&other->players_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGameServerPlayersQueryData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fgameservers_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fgameservers_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fgameservers_2esteamclient_2eproto[10]);
}

// ===================================================================

class CMsgGameServerRulesQueryData_Rule::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGameServerRulesQueryData_Rule>()._has_bits_);
  static void set_has_rule(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGameServerRulesQueryData_Rule::CMsgGameServerRulesQueryData_Rule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgGameServerRulesQueryData.Rule)
}
CMsgGameServerRulesQueryData_Rule::CMsgGameServerRulesQueryData_Rule(const CMsgGameServerRulesQueryData_Rule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rule_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    rule_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_rule()) {
    rule_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rule(), 
      GetArenaForAllocation());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgGameServerRulesQueryData.Rule)
}

inline void CMsgGameServerRulesQueryData_Rule::SharedCtor() {
rule_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  rule_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgGameServerRulesQueryData_Rule::~CMsgGameServerRulesQueryData_Rule() {
  // @@protoc_insertion_point(destructor:CMsgGameServerRulesQueryData.Rule)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgGameServerRulesQueryData_Rule::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  rule_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGameServerRulesQueryData_Rule::ArenaDtor(void* object) {
  CMsgGameServerRulesQueryData_Rule* _this = reinterpret_cast< CMsgGameServerRulesQueryData_Rule* >(object);
  (void)_this;
}
void CMsgGameServerRulesQueryData_Rule::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGameServerRulesQueryData_Rule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGameServerRulesQueryData_Rule::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameServerRulesQueryData.Rule)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      rule_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGameServerRulesQueryData_Rule::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string rule = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_rule();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGameServerRulesQueryData.Rule.rule");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGameServerRulesQueryData.Rule.value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGameServerRulesQueryData_Rule::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameServerRulesQueryData.Rule)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string rule = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_rule().data(), static_cast<int>(this->_internal_rule().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGameServerRulesQueryData.Rule.rule");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_rule(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGameServerRulesQueryData.Rule.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameServerRulesQueryData.Rule)
  return target;
}

size_t CMsgGameServerRulesQueryData_Rule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameServerRulesQueryData.Rule)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string rule = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_rule());
    }

    // optional string value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGameServerRulesQueryData_Rule::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgGameServerRulesQueryData_Rule::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGameServerRulesQueryData_Rule::GetClassData() const { return &_class_data_; }

void CMsgGameServerRulesQueryData_Rule::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgGameServerRulesQueryData_Rule *>(to)->MergeFrom(
      static_cast<const CMsgGameServerRulesQueryData_Rule &>(from));
}


void CMsgGameServerRulesQueryData_Rule::MergeFrom(const CMsgGameServerRulesQueryData_Rule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameServerRulesQueryData.Rule)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_rule(from._internal_rule());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_value(from._internal_value());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGameServerRulesQueryData_Rule::CopyFrom(const CMsgGameServerRulesQueryData_Rule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameServerRulesQueryData.Rule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameServerRulesQueryData_Rule::IsInitialized() const {
  return true;
}

void CMsgGameServerRulesQueryData_Rule::InternalSwap(CMsgGameServerRulesQueryData_Rule* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &rule_, lhs_arena,
      &other->rule_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGameServerRulesQueryData_Rule::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fgameservers_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fgameservers_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fgameservers_2esteamclient_2eproto[11]);
}

// ===================================================================

class CMsgGameServerRulesQueryData::_Internal {
 public:
};

CMsgGameServerRulesQueryData::CMsgGameServerRulesQueryData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  rules_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgGameServerRulesQueryData)
}
CMsgGameServerRulesQueryData::CMsgGameServerRulesQueryData(const CMsgGameServerRulesQueryData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      rules_(from.rules_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGameServerRulesQueryData)
}

inline void CMsgGameServerRulesQueryData::SharedCtor() {
}

CMsgGameServerRulesQueryData::~CMsgGameServerRulesQueryData() {
  // @@protoc_insertion_point(destructor:CMsgGameServerRulesQueryData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgGameServerRulesQueryData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGameServerRulesQueryData::ArenaDtor(void* object) {
  CMsgGameServerRulesQueryData* _this = reinterpret_cast< CMsgGameServerRulesQueryData* >(object);
  (void)_this;
}
void CMsgGameServerRulesQueryData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGameServerRulesQueryData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGameServerRulesQueryData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameServerRulesQueryData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rules_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGameServerRulesQueryData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgGameServerRulesQueryData.Rule rules = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGameServerRulesQueryData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameServerRulesQueryData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgGameServerRulesQueryData.Rule rules = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rules_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_rules(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameServerRulesQueryData)
  return target;
}

size_t CMsgGameServerRulesQueryData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameServerRulesQueryData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGameServerRulesQueryData.Rule rules = 1;
  total_size += 1UL * this->_internal_rules_size();
  for (const auto& msg : this->rules_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGameServerRulesQueryData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgGameServerRulesQueryData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGameServerRulesQueryData::GetClassData() const { return &_class_data_; }

void CMsgGameServerRulesQueryData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgGameServerRulesQueryData *>(to)->MergeFrom(
      static_cast<const CMsgGameServerRulesQueryData &>(from));
}


void CMsgGameServerRulesQueryData::MergeFrom(const CMsgGameServerRulesQueryData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameServerRulesQueryData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  rules_.MergeFrom(from.rules_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGameServerRulesQueryData::CopyFrom(const CMsgGameServerRulesQueryData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameServerRulesQueryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameServerRulesQueryData::IsInitialized() const {
  return true;
}

void CMsgGameServerRulesQueryData::InternalSwap(CMsgGameServerRulesQueryData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  rules_.InternalSwap(&other->rules_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGameServerRulesQueryData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fgameservers_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fgameservers_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fgameservers_2esteamclient_2eproto[12]);
}

// ===================================================================

class CGameServers_GameServerQuery_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameServers_GameServerQuery_Response>()._has_bits_);
  static const ::CMsgGameServerPingQueryData& ping_data(const CGameServers_GameServerQuery_Response* msg);
  static void set_has_ping_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgGameServerPlayersQueryData& players_data(const CGameServers_GameServerQuery_Response* msg);
  static void set_has_players_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgGameServerRulesQueryData& rules_data(const CGameServers_GameServerQuery_Response* msg);
  static void set_has_rules_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::CMsgGameServerPingQueryData&
CGameServers_GameServerQuery_Response::_Internal::ping_data(const CGameServers_GameServerQuery_Response* msg) {
  return *msg->ping_data_;
}
const ::CMsgGameServerPlayersQueryData&
CGameServers_GameServerQuery_Response::_Internal::players_data(const CGameServers_GameServerQuery_Response* msg) {
  return *msg->players_data_;
}
const ::CMsgGameServerRulesQueryData&
CGameServers_GameServerQuery_Response::_Internal::rules_data(const CGameServers_GameServerQuery_Response* msg) {
  return *msg->rules_data_;
}
CGameServers_GameServerQuery_Response::CGameServers_GameServerQuery_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGameServers_GameServerQuery_Response)
}
CGameServers_GameServerQuery_Response::CGameServers_GameServerQuery_Response(const CGameServers_GameServerQuery_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ping_data()) {
    ping_data_ = new ::CMsgGameServerPingQueryData(*from.ping_data_);
  } else {
    ping_data_ = nullptr;
  }
  if (from._internal_has_players_data()) {
    players_data_ = new ::CMsgGameServerPlayersQueryData(*from.players_data_);
  } else {
    players_data_ = nullptr;
  }
  if (from._internal_has_rules_data()) {
    rules_data_ = new ::CMsgGameServerRulesQueryData(*from.rules_data_);
  } else {
    rules_data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CGameServers_GameServerQuery_Response)
}

inline void CGameServers_GameServerQuery_Response::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ping_data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rules_data_) -
    reinterpret_cast<char*>(&ping_data_)) + sizeof(rules_data_));
}

CGameServers_GameServerQuery_Response::~CGameServers_GameServerQuery_Response() {
  // @@protoc_insertion_point(destructor:CGameServers_GameServerQuery_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CGameServers_GameServerQuery_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete ping_data_;
  if (this != internal_default_instance()) delete players_data_;
  if (this != internal_default_instance()) delete rules_data_;
}

void CGameServers_GameServerQuery_Response::ArenaDtor(void* object) {
  CGameServers_GameServerQuery_Response* _this = reinterpret_cast< CGameServers_GameServerQuery_Response* >(object);
  (void)_this;
}
void CGameServers_GameServerQuery_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameServers_GameServerQuery_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameServers_GameServerQuery_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameServers_GameServerQuery_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(ping_data_ != nullptr);
      ping_data_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(players_data_ != nullptr);
      players_data_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(rules_data_ != nullptr);
      rules_data_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameServers_GameServerQuery_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgGameServerPingQueryData ping_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ping_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgGameServerPlayersQueryData players_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_players_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgGameServerRulesQueryData rules_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rules_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGameServers_GameServerQuery_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameServers_GameServerQuery_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgGameServerPingQueryData ping_data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ping_data(this), target, stream);
  }

  // optional .CMsgGameServerPlayersQueryData players_data = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::players_data(this), target, stream);
  }

  // optional .CMsgGameServerRulesQueryData rules_data = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::rules_data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameServers_GameServerQuery_Response)
  return target;
}

size_t CGameServers_GameServerQuery_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameServers_GameServerQuery_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CMsgGameServerPingQueryData ping_data = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ping_data_);
    }

    // optional .CMsgGameServerPlayersQueryData players_data = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *players_data_);
    }

    // optional .CMsgGameServerRulesQueryData rules_data = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rules_data_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGameServers_GameServerQuery_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CGameServers_GameServerQuery_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGameServers_GameServerQuery_Response::GetClassData() const { return &_class_data_; }

void CGameServers_GameServerQuery_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CGameServers_GameServerQuery_Response *>(to)->MergeFrom(
      static_cast<const CGameServers_GameServerQuery_Response &>(from));
}


void CGameServers_GameServerQuery_Response::MergeFrom(const CGameServers_GameServerQuery_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameServers_GameServerQuery_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_ping_data()->::CMsgGameServerPingQueryData::MergeFrom(from._internal_ping_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_players_data()->::CMsgGameServerPlayersQueryData::MergeFrom(from._internal_players_data());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_rules_data()->::CMsgGameServerRulesQueryData::MergeFrom(from._internal_rules_data());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGameServers_GameServerQuery_Response::CopyFrom(const CGameServers_GameServerQuery_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameServers_GameServerQuery_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameServers_GameServerQuery_Response::IsInitialized() const {
  return true;
}

void CGameServers_GameServerQuery_Response::InternalSwap(CGameServers_GameServerQuery_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGameServers_GameServerQuery_Response, rules_data_)
      + sizeof(CGameServers_GameServerQuery_Response::rules_data_)
      - PROTOBUF_FIELD_OFFSET(CGameServers_GameServerQuery_Response, ping_data_)>(
          reinterpret_cast<char*>(&ping_data_),
          reinterpret_cast<char*>(&other->ping_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameServers_GameServerQuery_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fgameservers_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fgameservers_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fgameservers_2esteamclient_2eproto[13]);
}

// ===================================================================

class GameServerClient_QueryServerData_Request::_Internal {
 public:
};

GameServerClient_QueryServerData_Request::GameServerClient_QueryServerData_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:GameServerClient_QueryServerData_Request)
}
GameServerClient_QueryServerData_Request::GameServerClient_QueryServerData_Request(const GameServerClient_QueryServerData_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GameServerClient_QueryServerData_Request)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameServerClient_QueryServerData_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameServerClient_QueryServerData_Request::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GameServerClient_QueryServerData_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fgameservers_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fgameservers_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fgameservers_2esteamclient_2eproto[14]);
}

// ===================================================================

class GameServerClient_QueryServerData_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<GameServerClient_QueryServerData_Response>()._has_bits_);
  static const ::CMsgGameServerPingQueryData& ping_data(const GameServerClient_QueryServerData_Response* msg);
  static void set_has_ping_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgGameServerPlayersQueryData& players_data(const GameServerClient_QueryServerData_Response* msg);
  static void set_has_players_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgGameServerRulesQueryData& rules_data(const GameServerClient_QueryServerData_Response* msg);
  static void set_has_rules_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::CMsgGameServerPingQueryData&
GameServerClient_QueryServerData_Response::_Internal::ping_data(const GameServerClient_QueryServerData_Response* msg) {
  return *msg->ping_data_;
}
const ::CMsgGameServerPlayersQueryData&
GameServerClient_QueryServerData_Response::_Internal::players_data(const GameServerClient_QueryServerData_Response* msg) {
  return *msg->players_data_;
}
const ::CMsgGameServerRulesQueryData&
GameServerClient_QueryServerData_Response::_Internal::rules_data(const GameServerClient_QueryServerData_Response* msg) {
  return *msg->rules_data_;
}
GameServerClient_QueryServerData_Response::GameServerClient_QueryServerData_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:GameServerClient_QueryServerData_Response)
}
GameServerClient_QueryServerData_Response::GameServerClient_QueryServerData_Response(const GameServerClient_QueryServerData_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ping_data()) {
    ping_data_ = new ::CMsgGameServerPingQueryData(*from.ping_data_);
  } else {
    ping_data_ = nullptr;
  }
  if (from._internal_has_players_data()) {
    players_data_ = new ::CMsgGameServerPlayersQueryData(*from.players_data_);
  } else {
    players_data_ = nullptr;
  }
  if (from._internal_has_rules_data()) {
    rules_data_ = new ::CMsgGameServerRulesQueryData(*from.rules_data_);
  } else {
    rules_data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:GameServerClient_QueryServerData_Response)
}

inline void GameServerClient_QueryServerData_Response::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ping_data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rules_data_) -
    reinterpret_cast<char*>(&ping_data_)) + sizeof(rules_data_));
}

GameServerClient_QueryServerData_Response::~GameServerClient_QueryServerData_Response() {
  // @@protoc_insertion_point(destructor:GameServerClient_QueryServerData_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GameServerClient_QueryServerData_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete ping_data_;
  if (this != internal_default_instance()) delete players_data_;
  if (this != internal_default_instance()) delete rules_data_;
}

void GameServerClient_QueryServerData_Response::ArenaDtor(void* object) {
  GameServerClient_QueryServerData_Response* _this = reinterpret_cast< GameServerClient_QueryServerData_Response* >(object);
  (void)_this;
}
void GameServerClient_QueryServerData_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameServerClient_QueryServerData_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameServerClient_QueryServerData_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:GameServerClient_QueryServerData_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(ping_data_ != nullptr);
      ping_data_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(players_data_ != nullptr);
      players_data_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(rules_data_ != nullptr);
      rules_data_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameServerClient_QueryServerData_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgGameServerPingQueryData ping_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ping_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgGameServerPlayersQueryData players_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_players_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgGameServerRulesQueryData rules_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rules_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameServerClient_QueryServerData_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameServerClient_QueryServerData_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgGameServerPingQueryData ping_data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ping_data(this), target, stream);
  }

  // optional .CMsgGameServerPlayersQueryData players_data = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::players_data(this), target, stream);
  }

  // optional .CMsgGameServerRulesQueryData rules_data = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::rules_data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameServerClient_QueryServerData_Response)
  return target;
}

size_t GameServerClient_QueryServerData_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameServerClient_QueryServerData_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CMsgGameServerPingQueryData ping_data = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ping_data_);
    }

    // optional .CMsgGameServerPlayersQueryData players_data = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *players_data_);
    }

    // optional .CMsgGameServerRulesQueryData rules_data = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rules_data_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameServerClient_QueryServerData_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GameServerClient_QueryServerData_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameServerClient_QueryServerData_Response::GetClassData() const { return &_class_data_; }

void GameServerClient_QueryServerData_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GameServerClient_QueryServerData_Response *>(to)->MergeFrom(
      static_cast<const GameServerClient_QueryServerData_Response &>(from));
}


void GameServerClient_QueryServerData_Response::MergeFrom(const GameServerClient_QueryServerData_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameServerClient_QueryServerData_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_ping_data()->::CMsgGameServerPingQueryData::MergeFrom(from._internal_ping_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_players_data()->::CMsgGameServerPlayersQueryData::MergeFrom(from._internal_players_data());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_rules_data()->::CMsgGameServerRulesQueryData::MergeFrom(from._internal_rules_data());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameServerClient_QueryServerData_Response::CopyFrom(const GameServerClient_QueryServerData_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameServerClient_QueryServerData_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServerClient_QueryServerData_Response::IsInitialized() const {
  return true;
}

void GameServerClient_QueryServerData_Response::InternalSwap(GameServerClient_QueryServerData_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameServerClient_QueryServerData_Response, rules_data_)
      + sizeof(GameServerClient_QueryServerData_Response::rules_data_)
      - PROTOBUF_FIELD_OFFSET(GameServerClient_QueryServerData_Response, ping_data_)>(
          reinterpret_cast<char*>(&ping_data_),
          reinterpret_cast<char*>(&other->ping_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameServerClient_QueryServerData_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fgameservers_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fgameservers_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fgameservers_2esteamclient_2eproto[15]);
}

// ===================================================================

GameServers::~GameServers() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GameServers::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fgameservers_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5fgameservers_2esteamclient_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GameServers::GetDescriptor() {
  return descriptor();
}

void GameServers::GetServerList(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameServers_GetServerList_Request*,
                         ::CGameServers_GetServerList_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetServerList() not implemented.");
  done->Run();
}

void GameServers::GetServerSteamIDsByIP(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameServers_GetServerSteamIDsByIP_Request*,
                         ::CGameServers_IPsWithSteamIDs_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetServerSteamIDsByIP() not implemented.");
  done->Run();
}

void GameServers::GetServerIPsBySteamID(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameServers_GetServerIPsBySteamID_Request*,
                         ::CGameServers_IPsWithSteamIDs_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetServerIPsBySteamID() not implemented.");
  done->Run();
}

void GameServers::QueryByFakeIP(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameServers_QueryByFakeIP_Request*,
                         ::CGameServers_GameServerQuery_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method QueryByFakeIP() not implemented.");
  done->Run();
}

void GameServers::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5fgameservers_2esteamclient_2eproto[0]);
  switch(method->index()) {
    case 0:
      GetServerList(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameServers_GetServerList_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CGameServers_GetServerList_Response*>(
                 response),
             done);
      break;
    case 1:
      GetServerSteamIDsByIP(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameServers_GetServerSteamIDsByIP_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CGameServers_IPsWithSteamIDs_Response*>(
                 response),
             done);
      break;
    case 2:
      GetServerIPsBySteamID(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameServers_GetServerIPsBySteamID_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CGameServers_IPsWithSteamIDs_Response*>(
                 response),
             done);
      break;
    case 3:
      QueryByFakeIP(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameServers_QueryByFakeIP_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CGameServers_GameServerQuery_Response*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& GameServers::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CGameServers_GetServerList_Request::default_instance();
    case 1:
      return ::CGameServers_GetServerSteamIDsByIP_Request::default_instance();
    case 2:
      return ::CGameServers_GetServerIPsBySteamID_Request::default_instance();
    case 3:
      return ::CGameServers_QueryByFakeIP_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& GameServers::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CGameServers_GetServerList_Response::default_instance();
    case 1:
      return ::CGameServers_IPsWithSteamIDs_Response::default_instance();
    case 2:
      return ::CGameServers_IPsWithSteamIDs_Response::default_instance();
    case 3:
      return ::CGameServers_GameServerQuery_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

GameServers_Stub::GameServers_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
GameServers_Stub::GameServers_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
GameServers_Stub::~GameServers_Stub() {
  if (owns_channel_) delete channel_;
}

void GameServers_Stub::GetServerList(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameServers_GetServerList_Request* request,
                              ::CGameServers_GetServerList_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void GameServers_Stub::GetServerSteamIDsByIP(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameServers_GetServerSteamIDsByIP_Request* request,
                              ::CGameServers_IPsWithSteamIDs_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void GameServers_Stub::GetServerIPsBySteamID(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameServers_GetServerIPsBySteamID_Request* request,
                              ::CGameServers_IPsWithSteamIDs_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void GameServers_Stub::QueryByFakeIP(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameServers_QueryByFakeIP_Request* request,
                              ::CGameServers_GameServerQuery_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
// ===================================================================

GameServerClient::~GameServerClient() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GameServerClient::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fgameservers_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5fgameservers_2esteamclient_2eproto[1];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GameServerClient::GetDescriptor() {
  return descriptor();
}

void GameServerClient::QueryServerData(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::GameServerClient_QueryServerData_Request*,
                         ::GameServerClient_QueryServerData_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method QueryServerData() not implemented.");
  done->Run();
}

void GameServerClient::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5fgameservers_2esteamclient_2eproto[1]);
  switch(method->index()) {
    case 0:
      QueryServerData(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::GameServerClient_QueryServerData_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::GameServerClient_QueryServerData_Response*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& GameServerClient::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::GameServerClient_QueryServerData_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& GameServerClient::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::GameServerClient_QueryServerData_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

GameServerClient_Stub::GameServerClient_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
GameServerClient_Stub::GameServerClient_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
GameServerClient_Stub::~GameServerClient_Stub() {
  if (owns_channel_) delete channel_;
}

void GameServerClient_Stub::QueryServerData(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::GameServerClient_QueryServerData_Request* request,
                              ::GameServerClient_QueryServerData_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CGameServers_GetServerList_Request* Arena::CreateMaybeMessage< ::CGameServers_GetServerList_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameServers_GetServerList_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameServers_GetServerList_Response_Server* Arena::CreateMaybeMessage< ::CGameServers_GetServerList_Response_Server >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameServers_GetServerList_Response_Server >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameServers_GetServerList_Response* Arena::CreateMaybeMessage< ::CGameServers_GetServerList_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameServers_GetServerList_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameServers_GetServerSteamIDsByIP_Request* Arena::CreateMaybeMessage< ::CGameServers_GetServerSteamIDsByIP_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameServers_GetServerSteamIDsByIP_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameServers_IPsWithSteamIDs_Response_Server* Arena::CreateMaybeMessage< ::CGameServers_IPsWithSteamIDs_Response_Server >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameServers_IPsWithSteamIDs_Response_Server >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameServers_IPsWithSteamIDs_Response* Arena::CreateMaybeMessage< ::CGameServers_IPsWithSteamIDs_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameServers_IPsWithSteamIDs_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameServers_GetServerIPsBySteamID_Request* Arena::CreateMaybeMessage< ::CGameServers_GetServerIPsBySteamID_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameServers_GetServerIPsBySteamID_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameServers_QueryByFakeIP_Request* Arena::CreateMaybeMessage< ::CGameServers_QueryByFakeIP_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameServers_QueryByFakeIP_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGameServerPingQueryData* Arena::CreateMaybeMessage< ::CMsgGameServerPingQueryData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGameServerPingQueryData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGameServerPlayersQueryData_Player* Arena::CreateMaybeMessage< ::CMsgGameServerPlayersQueryData_Player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGameServerPlayersQueryData_Player >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGameServerPlayersQueryData* Arena::CreateMaybeMessage< ::CMsgGameServerPlayersQueryData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGameServerPlayersQueryData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGameServerRulesQueryData_Rule* Arena::CreateMaybeMessage< ::CMsgGameServerRulesQueryData_Rule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGameServerRulesQueryData_Rule >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGameServerRulesQueryData* Arena::CreateMaybeMessage< ::CMsgGameServerRulesQueryData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGameServerRulesQueryData >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameServers_GameServerQuery_Response* Arena::CreateMaybeMessage< ::CGameServers_GameServerQuery_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameServers_GameServerQuery_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::GameServerClient_QueryServerData_Request* Arena::CreateMaybeMessage< ::GameServerClient_QueryServerData_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameServerClient_QueryServerData_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::GameServerClient_QueryServerData_Response* Arena::CreateMaybeMessage< ::GameServerClient_QueryServerData_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameServerClient_QueryServerData_Response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
