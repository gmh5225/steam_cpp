// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_friendmessages.steamclient.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_steammessages_5ffriendmessages_2esteamclient_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_steammessages_5ffriendmessages_2esteamclient_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "steammessages_base.pb.h"
#include "steammessages_unified_base.steamclient.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_5ffriendmessages_2esteamclient_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_5ffriendmessages_2esteamclient_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[16]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5ffriendmessages_2esteamclient_2eproto;
class CFriendMessages_AckMessage_Notification;
struct CFriendMessages_AckMessage_NotificationDefaultTypeInternal;
extern CFriendMessages_AckMessage_NotificationDefaultTypeInternal _CFriendMessages_AckMessage_Notification_default_instance_;
class CFriendMessages_GetRecentMessages_Request;
struct CFriendMessages_GetRecentMessages_RequestDefaultTypeInternal;
extern CFriendMessages_GetRecentMessages_RequestDefaultTypeInternal _CFriendMessages_GetRecentMessages_Request_default_instance_;
class CFriendMessages_GetRecentMessages_Response;
struct CFriendMessages_GetRecentMessages_ResponseDefaultTypeInternal;
extern CFriendMessages_GetRecentMessages_ResponseDefaultTypeInternal _CFriendMessages_GetRecentMessages_Response_default_instance_;
class CFriendMessages_GetRecentMessages_Response_FriendMessage;
struct CFriendMessages_GetRecentMessages_Response_FriendMessageDefaultTypeInternal;
extern CFriendMessages_GetRecentMessages_Response_FriendMessageDefaultTypeInternal _CFriendMessages_GetRecentMessages_Response_FriendMessage_default_instance_;
class CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction;
struct CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReactionDefaultTypeInternal;
extern CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReactionDefaultTypeInternal _CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction_default_instance_;
class CFriendMessages_IncomingMessage_Notification;
struct CFriendMessages_IncomingMessage_NotificationDefaultTypeInternal;
extern CFriendMessages_IncomingMessage_NotificationDefaultTypeInternal _CFriendMessages_IncomingMessage_Notification_default_instance_;
class CFriendMessages_IsInFriendsUIBeta_Request;
struct CFriendMessages_IsInFriendsUIBeta_RequestDefaultTypeInternal;
extern CFriendMessages_IsInFriendsUIBeta_RequestDefaultTypeInternal _CFriendMessages_IsInFriendsUIBeta_Request_default_instance_;
class CFriendMessages_IsInFriendsUIBeta_Response;
struct CFriendMessages_IsInFriendsUIBeta_ResponseDefaultTypeInternal;
extern CFriendMessages_IsInFriendsUIBeta_ResponseDefaultTypeInternal _CFriendMessages_IsInFriendsUIBeta_Response_default_instance_;
class CFriendMessages_MessageReaction_Notification;
struct CFriendMessages_MessageReaction_NotificationDefaultTypeInternal;
extern CFriendMessages_MessageReaction_NotificationDefaultTypeInternal _CFriendMessages_MessageReaction_Notification_default_instance_;
class CFriendMessages_SendMessage_Request;
struct CFriendMessages_SendMessage_RequestDefaultTypeInternal;
extern CFriendMessages_SendMessage_RequestDefaultTypeInternal _CFriendMessages_SendMessage_Request_default_instance_;
class CFriendMessages_SendMessage_Response;
struct CFriendMessages_SendMessage_ResponseDefaultTypeInternal;
extern CFriendMessages_SendMessage_ResponseDefaultTypeInternal _CFriendMessages_SendMessage_Response_default_instance_;
class CFriendMessages_UpdateMessageReaction_Request;
struct CFriendMessages_UpdateMessageReaction_RequestDefaultTypeInternal;
extern CFriendMessages_UpdateMessageReaction_RequestDefaultTypeInternal _CFriendMessages_UpdateMessageReaction_Request_default_instance_;
class CFriendMessages_UpdateMessageReaction_Response;
struct CFriendMessages_UpdateMessageReaction_ResponseDefaultTypeInternal;
extern CFriendMessages_UpdateMessageReaction_ResponseDefaultTypeInternal _CFriendMessages_UpdateMessageReaction_Response_default_instance_;
class CFriendsMessages_GetActiveMessageSessions_Request;
struct CFriendsMessages_GetActiveMessageSessions_RequestDefaultTypeInternal;
extern CFriendsMessages_GetActiveMessageSessions_RequestDefaultTypeInternal _CFriendsMessages_GetActiveMessageSessions_Request_default_instance_;
class CFriendsMessages_GetActiveMessageSessions_Response;
struct CFriendsMessages_GetActiveMessageSessions_ResponseDefaultTypeInternal;
extern CFriendsMessages_GetActiveMessageSessions_ResponseDefaultTypeInternal _CFriendsMessages_GetActiveMessageSessions_Response_default_instance_;
class CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession;
struct CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSessionDefaultTypeInternal;
extern CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSessionDefaultTypeInternal _CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CFriendMessages_AckMessage_Notification* Arena::CreateMaybeMessage<::CFriendMessages_AckMessage_Notification>(Arena*);
template<> ::CFriendMessages_GetRecentMessages_Request* Arena::CreateMaybeMessage<::CFriendMessages_GetRecentMessages_Request>(Arena*);
template<> ::CFriendMessages_GetRecentMessages_Response* Arena::CreateMaybeMessage<::CFriendMessages_GetRecentMessages_Response>(Arena*);
template<> ::CFriendMessages_GetRecentMessages_Response_FriendMessage* Arena::CreateMaybeMessage<::CFriendMessages_GetRecentMessages_Response_FriendMessage>(Arena*);
template<> ::CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction* Arena::CreateMaybeMessage<::CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction>(Arena*);
template<> ::CFriendMessages_IncomingMessage_Notification* Arena::CreateMaybeMessage<::CFriendMessages_IncomingMessage_Notification>(Arena*);
template<> ::CFriendMessages_IsInFriendsUIBeta_Request* Arena::CreateMaybeMessage<::CFriendMessages_IsInFriendsUIBeta_Request>(Arena*);
template<> ::CFriendMessages_IsInFriendsUIBeta_Response* Arena::CreateMaybeMessage<::CFriendMessages_IsInFriendsUIBeta_Response>(Arena*);
template<> ::CFriendMessages_MessageReaction_Notification* Arena::CreateMaybeMessage<::CFriendMessages_MessageReaction_Notification>(Arena*);
template<> ::CFriendMessages_SendMessage_Request* Arena::CreateMaybeMessage<::CFriendMessages_SendMessage_Request>(Arena*);
template<> ::CFriendMessages_SendMessage_Response* Arena::CreateMaybeMessage<::CFriendMessages_SendMessage_Response>(Arena*);
template<> ::CFriendMessages_UpdateMessageReaction_Request* Arena::CreateMaybeMessage<::CFriendMessages_UpdateMessageReaction_Request>(Arena*);
template<> ::CFriendMessages_UpdateMessageReaction_Response* Arena::CreateMaybeMessage<::CFriendMessages_UpdateMessageReaction_Response>(Arena*);
template<> ::CFriendsMessages_GetActiveMessageSessions_Request* Arena::CreateMaybeMessage<::CFriendsMessages_GetActiveMessageSessions_Request>(Arena*);
template<> ::CFriendsMessages_GetActiveMessageSessions_Response* Arena::CreateMaybeMessage<::CFriendsMessages_GetActiveMessageSessions_Response>(Arena*);
template<> ::CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession* Arena::CreateMaybeMessage<::CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum EMessageReactionType : int {
  k_EMessageReactionType_Invalid = 0,
  k_EMessageReactionType_Emoticon = 1,
  k_EMessageReactionType_Sticker = 2
};
bool EMessageReactionType_IsValid(int value);
constexpr EMessageReactionType EMessageReactionType_MIN = k_EMessageReactionType_Invalid;
constexpr EMessageReactionType EMessageReactionType_MAX = k_EMessageReactionType_Sticker;
constexpr int EMessageReactionType_ARRAYSIZE = EMessageReactionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMessageReactionType_descriptor();
template<typename T>
inline const std::string& EMessageReactionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EMessageReactionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EMessageReactionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EMessageReactionType_descriptor(), enum_t_value);
}
inline bool EMessageReactionType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EMessageReactionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EMessageReactionType>(
    EMessageReactionType_descriptor(), name, value);
}
// ===================================================================

class CFriendMessages_GetRecentMessages_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CFriendMessages_GetRecentMessages_Request) */ {
 public:
  inline CFriendMessages_GetRecentMessages_Request() : CFriendMessages_GetRecentMessages_Request(nullptr) {}
  ~CFriendMessages_GetRecentMessages_Request() override;
  explicit constexpr CFriendMessages_GetRecentMessages_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CFriendMessages_GetRecentMessages_Request(const CFriendMessages_GetRecentMessages_Request& from);
  CFriendMessages_GetRecentMessages_Request(CFriendMessages_GetRecentMessages_Request&& from) noexcept
    : CFriendMessages_GetRecentMessages_Request() {
    *this = ::std::move(from);
  }

  inline CFriendMessages_GetRecentMessages_Request& operator=(const CFriendMessages_GetRecentMessages_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CFriendMessages_GetRecentMessages_Request& operator=(CFriendMessages_GetRecentMessages_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CFriendMessages_GetRecentMessages_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CFriendMessages_GetRecentMessages_Request* internal_default_instance() {
    return reinterpret_cast<const CFriendMessages_GetRecentMessages_Request*>(
               &_CFriendMessages_GetRecentMessages_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CFriendMessages_GetRecentMessages_Request& a, CFriendMessages_GetRecentMessages_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CFriendMessages_GetRecentMessages_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CFriendMessages_GetRecentMessages_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CFriendMessages_GetRecentMessages_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CFriendMessages_GetRecentMessages_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CFriendMessages_GetRecentMessages_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CFriendMessages_GetRecentMessages_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CFriendMessages_GetRecentMessages_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CFriendMessages_GetRecentMessages_Request";
  }
  protected:
  explicit CFriendMessages_GetRecentMessages_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamid1FieldNumber = 1,
    kSteamid2FieldNumber = 2,
    kCountFieldNumber = 3,
    kRtime32StartTimeFieldNumber = 5,
    kMostRecentConversationFieldNumber = 4,
    kBbcodeFormatFieldNumber = 6,
    kStartOrdinalFieldNumber = 7,
    kTimeLastFieldNumber = 8,
    kOrdinalLastFieldNumber = 9,
  };
  // optional fixed64 steamid1 = 1;
  bool has_steamid1() const;
  private:
  bool _internal_has_steamid1() const;
  public:
  void clear_steamid1();
  uint64_t steamid1() const;
  void set_steamid1(uint64_t value);
  private:
  uint64_t _internal_steamid1() const;
  void _internal_set_steamid1(uint64_t value);
  public:

  // optional fixed64 steamid2 = 2;
  bool has_steamid2() const;
  private:
  bool _internal_has_steamid2() const;
  public:
  void clear_steamid2();
  uint64_t steamid2() const;
  void set_steamid2(uint64_t value);
  private:
  uint64_t _internal_steamid2() const;
  void _internal_set_steamid2(uint64_t value);
  public:

  // optional uint32 count = 3 [(.description) = "If non-zero, cap the number of recent messages to return."];
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  uint32_t count() const;
  void set_count(uint32_t value);
  private:
  uint32_t _internal_count() const;
  void _internal_set_count(uint32_t value);
  public:

  // optional fixed32 rtime32_start_time = 5 [(.description) = "If non-zero, return only messages with timestamps greater or equal to this. If zero, we only return messages from a recent time cutoff."];
  bool has_rtime32_start_time() const;
  private:
  bool _internal_has_rtime32_start_time() const;
  public:
  void clear_rtime32_start_time();
  uint32_t rtime32_start_time() const;
  void set_rtime32_start_time(uint32_t value);
  private:
  uint32_t _internal_rtime32_start_time() const;
  void _internal_set_rtime32_start_time(uint32_t value);
  public:

  // optional bool most_recent_conversation = 4 [(.description) = "Grab the block of chat from the most recent conversation (a ~5 minute period)"];
  bool has_most_recent_conversation() const;
  private:
  bool _internal_has_most_recent_conversation() const;
  public:
  void clear_most_recent_conversation();
  bool most_recent_conversation() const;
  void set_most_recent_conversation(bool value);
  private:
  bool _internal_most_recent_conversation() const;
  void _internal_set_most_recent_conversation(bool value);
  public:

  // optional bool bbcode_format = 6 [(.description) = "Return the results with bbcode formatting."];
  bool has_bbcode_format() const;
  private:
  bool _internal_has_bbcode_format() const;
  public:
  void clear_bbcode_format();
  bool bbcode_format() const;
  void set_bbcode_format(bool value);
  private:
  bool _internal_bbcode_format() const;
  void _internal_set_bbcode_format(bool value);
  public:

  // optional uint32 start_ordinal = 7 [(.description) = "Combined with start time, only messages after this ordinal are returned (dedupes messages in same second)"];
  bool has_start_ordinal() const;
  private:
  bool _internal_has_start_ordinal() const;
  public:
  void clear_start_ordinal();
  uint32_t start_ordinal() const;
  void set_start_ordinal(uint32_t value);
  private:
  uint32_t _internal_start_ordinal() const;
  void _internal_set_start_ordinal(uint32_t value);
  public:

  // optional uint32 time_last = 8 [(.description) = "if present/non-zero, return only messages before this."];
  bool has_time_last() const;
  private:
  bool _internal_has_time_last() const;
  public:
  void clear_time_last();
  uint32_t time_last() const;
  void set_time_last(uint32_t value);
  private:
  uint32_t _internal_time_last() const;
  void _internal_set_time_last(uint32_t value);
  public:

  // optional uint32 ordinal_last = 9;
  bool has_ordinal_last() const;
  private:
  bool _internal_has_ordinal_last() const;
  public:
  void clear_ordinal_last();
  uint32_t ordinal_last() const;
  void set_ordinal_last(uint32_t value);
  private:
  uint32_t _internal_ordinal_last() const;
  void _internal_set_ordinal_last(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CFriendMessages_GetRecentMessages_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t steamid1_;
  uint64_t steamid2_;
  uint32_t count_;
  uint32_t rtime32_start_time_;
  bool most_recent_conversation_;
  bool bbcode_format_;
  uint32_t start_ordinal_;
  uint32_t time_last_;
  uint32_t ordinal_last_;
  friend struct ::TableStruct_steammessages_5ffriendmessages_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CFriendMessages_GetRecentMessages_Response.FriendMessage.MessageReaction) */ {
 public:
  inline CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction() : CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction(nullptr) {}
  ~CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction() override;
  explicit constexpr CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction(const CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction& from);
  CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction(CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction&& from) noexcept
    : CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction() {
    *this = ::std::move(from);
  }

  inline CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction& operator=(const CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction& operator=(CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction& default_instance() {
    return *internal_default_instance();
  }
  static inline const CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction* internal_default_instance() {
    return reinterpret_cast<const CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction*>(
               &_CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction& a, CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction& b) {
    a.Swap(&b);
  }
  inline void Swap(CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CFriendMessages_GetRecentMessages_Response.FriendMessage.MessageReaction";
  }
  protected:
  explicit CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReactorsFieldNumber = 3,
    kReactionFieldNumber = 2,
    kReactionTypeFieldNumber = 1,
  };
  // repeated uint32 reactors = 3;
  int reactors_size() const;
  private:
  int _internal_reactors_size() const;
  public:
  void clear_reactors();
  private:
  uint32_t _internal_reactors(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_reactors() const;
  void _internal_add_reactors(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_reactors();
  public:
  uint32_t reactors(int index) const;
  void set_reactors(int index, uint32_t value);
  void add_reactors(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      reactors() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_reactors();

  // optional string reaction = 2;
  bool has_reaction() const;
  private:
  bool _internal_has_reaction() const;
  public:
  void clear_reaction();
  const std::string& reaction() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reaction(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reaction();
  PROTOBUF_NODISCARD std::string* release_reaction();
  void set_allocated_reaction(std::string* reaction);
  private:
  const std::string& _internal_reaction() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reaction(const std::string& value);
  std::string* _internal_mutable_reaction();
  public:

  // optional .EMessageReactionType reaction_type = 1 [default = k_EMessageReactionType_Invalid];
  bool has_reaction_type() const;
  private:
  bool _internal_has_reaction_type() const;
  public:
  void clear_reaction_type();
  ::EMessageReactionType reaction_type() const;
  void set_reaction_type(::EMessageReactionType value);
  private:
  ::EMessageReactionType _internal_reaction_type() const;
  void _internal_set_reaction_type(::EMessageReactionType value);
  public:

  // @@protoc_insertion_point(class_scope:CFriendMessages_GetRecentMessages_Response.FriendMessage.MessageReaction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > reactors_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reaction_;
  int reaction_type_;
  friend struct ::TableStruct_steammessages_5ffriendmessages_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CFriendMessages_GetRecentMessages_Response_FriendMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CFriendMessages_GetRecentMessages_Response.FriendMessage) */ {
 public:
  inline CFriendMessages_GetRecentMessages_Response_FriendMessage() : CFriendMessages_GetRecentMessages_Response_FriendMessage(nullptr) {}
  ~CFriendMessages_GetRecentMessages_Response_FriendMessage() override;
  explicit constexpr CFriendMessages_GetRecentMessages_Response_FriendMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CFriendMessages_GetRecentMessages_Response_FriendMessage(const CFriendMessages_GetRecentMessages_Response_FriendMessage& from);
  CFriendMessages_GetRecentMessages_Response_FriendMessage(CFriendMessages_GetRecentMessages_Response_FriendMessage&& from) noexcept
    : CFriendMessages_GetRecentMessages_Response_FriendMessage() {
    *this = ::std::move(from);
  }

  inline CFriendMessages_GetRecentMessages_Response_FriendMessage& operator=(const CFriendMessages_GetRecentMessages_Response_FriendMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CFriendMessages_GetRecentMessages_Response_FriendMessage& operator=(CFriendMessages_GetRecentMessages_Response_FriendMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CFriendMessages_GetRecentMessages_Response_FriendMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const CFriendMessages_GetRecentMessages_Response_FriendMessage* internal_default_instance() {
    return reinterpret_cast<const CFriendMessages_GetRecentMessages_Response_FriendMessage*>(
               &_CFriendMessages_GetRecentMessages_Response_FriendMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CFriendMessages_GetRecentMessages_Response_FriendMessage& a, CFriendMessages_GetRecentMessages_Response_FriendMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(CFriendMessages_GetRecentMessages_Response_FriendMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CFriendMessages_GetRecentMessages_Response_FriendMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CFriendMessages_GetRecentMessages_Response_FriendMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CFriendMessages_GetRecentMessages_Response_FriendMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CFriendMessages_GetRecentMessages_Response_FriendMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CFriendMessages_GetRecentMessages_Response_FriendMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CFriendMessages_GetRecentMessages_Response_FriendMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CFriendMessages_GetRecentMessages_Response.FriendMessage";
  }
  protected:
  explicit CFriendMessages_GetRecentMessages_Response_FriendMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction MessageReaction;

  // accessors -------------------------------------------------------

  enum : int {
    kReactionsFieldNumber = 5,
    kMessageFieldNumber = 3,
    kAccountidFieldNumber = 1,
    kTimestampFieldNumber = 2,
    kOrdinalFieldNumber = 4,
  };
  // repeated .CFriendMessages_GetRecentMessages_Response.FriendMessage.MessageReaction reactions = 5;
  int reactions_size() const;
  private:
  int _internal_reactions_size() const;
  public:
  void clear_reactions();
  ::CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction* mutable_reactions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction >*
      mutable_reactions();
  private:
  const ::CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction& _internal_reactions(int index) const;
  ::CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction* _internal_add_reactions();
  public:
  const ::CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction& reactions(int index) const;
  ::CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction* add_reactions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction >&
      reactions() const;

  // optional string message = 3;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // optional uint32 accountid = 1;
  bool has_accountid() const;
  private:
  bool _internal_has_accountid() const;
  public:
  void clear_accountid();
  uint32_t accountid() const;
  void set_accountid(uint32_t value);
  private:
  uint32_t _internal_accountid() const;
  void _internal_set_accountid(uint32_t value);
  public:

  // optional uint32 timestamp = 2;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  uint32_t timestamp() const;
  void set_timestamp(uint32_t value);
  private:
  uint32_t _internal_timestamp() const;
  void _internal_set_timestamp(uint32_t value);
  public:

  // optional uint32 ordinal = 4;
  bool has_ordinal() const;
  private:
  bool _internal_has_ordinal() const;
  public:
  void clear_ordinal();
  uint32_t ordinal() const;
  void set_ordinal(uint32_t value);
  private:
  uint32_t _internal_ordinal() const;
  void _internal_set_ordinal(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CFriendMessages_GetRecentMessages_Response.FriendMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction > reactions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  uint32_t accountid_;
  uint32_t timestamp_;
  uint32_t ordinal_;
  friend struct ::TableStruct_steammessages_5ffriendmessages_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CFriendMessages_GetRecentMessages_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CFriendMessages_GetRecentMessages_Response) */ {
 public:
  inline CFriendMessages_GetRecentMessages_Response() : CFriendMessages_GetRecentMessages_Response(nullptr) {}
  ~CFriendMessages_GetRecentMessages_Response() override;
  explicit constexpr CFriendMessages_GetRecentMessages_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CFriendMessages_GetRecentMessages_Response(const CFriendMessages_GetRecentMessages_Response& from);
  CFriendMessages_GetRecentMessages_Response(CFriendMessages_GetRecentMessages_Response&& from) noexcept
    : CFriendMessages_GetRecentMessages_Response() {
    *this = ::std::move(from);
  }

  inline CFriendMessages_GetRecentMessages_Response& operator=(const CFriendMessages_GetRecentMessages_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CFriendMessages_GetRecentMessages_Response& operator=(CFriendMessages_GetRecentMessages_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CFriendMessages_GetRecentMessages_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CFriendMessages_GetRecentMessages_Response* internal_default_instance() {
    return reinterpret_cast<const CFriendMessages_GetRecentMessages_Response*>(
               &_CFriendMessages_GetRecentMessages_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CFriendMessages_GetRecentMessages_Response& a, CFriendMessages_GetRecentMessages_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CFriendMessages_GetRecentMessages_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CFriendMessages_GetRecentMessages_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CFriendMessages_GetRecentMessages_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CFriendMessages_GetRecentMessages_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CFriendMessages_GetRecentMessages_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CFriendMessages_GetRecentMessages_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CFriendMessages_GetRecentMessages_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CFriendMessages_GetRecentMessages_Response";
  }
  protected:
  explicit CFriendMessages_GetRecentMessages_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CFriendMessages_GetRecentMessages_Response_FriendMessage FriendMessage;

  // accessors -------------------------------------------------------

  enum : int {
    kMessagesFieldNumber = 1,
    kMoreAvailableFieldNumber = 4,
  };
  // repeated .CFriendMessages_GetRecentMessages_Response.FriendMessage messages = 1 [(.description) = "Array of messages, returned newest to oldest."];
  int messages_size() const;
  private:
  int _internal_messages_size() const;
  public:
  void clear_messages();
  ::CFriendMessages_GetRecentMessages_Response_FriendMessage* mutable_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CFriendMessages_GetRecentMessages_Response_FriendMessage >*
      mutable_messages();
  private:
  const ::CFriendMessages_GetRecentMessages_Response_FriendMessage& _internal_messages(int index) const;
  ::CFriendMessages_GetRecentMessages_Response_FriendMessage* _internal_add_messages();
  public:
  const ::CFriendMessages_GetRecentMessages_Response_FriendMessage& messages(int index) const;
  ::CFriendMessages_GetRecentMessages_Response_FriendMessage* add_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CFriendMessages_GetRecentMessages_Response_FriendMessage >&
      messages() const;

  // optional bool more_available = 4;
  bool has_more_available() const;
  private:
  bool _internal_has_more_available() const;
  public:
  void clear_more_available();
  bool more_available() const;
  void set_more_available(bool value);
  private:
  bool _internal_more_available() const;
  void _internal_set_more_available(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CFriendMessages_GetRecentMessages_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CFriendMessages_GetRecentMessages_Response_FriendMessage > messages_;
  bool more_available_;
  friend struct ::TableStruct_steammessages_5ffriendmessages_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CFriendsMessages_GetActiveMessageSessions_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CFriendsMessages_GetActiveMessageSessions_Request) */ {
 public:
  inline CFriendsMessages_GetActiveMessageSessions_Request() : CFriendsMessages_GetActiveMessageSessions_Request(nullptr) {}
  ~CFriendsMessages_GetActiveMessageSessions_Request() override;
  explicit constexpr CFriendsMessages_GetActiveMessageSessions_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CFriendsMessages_GetActiveMessageSessions_Request(const CFriendsMessages_GetActiveMessageSessions_Request& from);
  CFriendsMessages_GetActiveMessageSessions_Request(CFriendsMessages_GetActiveMessageSessions_Request&& from) noexcept
    : CFriendsMessages_GetActiveMessageSessions_Request() {
    *this = ::std::move(from);
  }

  inline CFriendsMessages_GetActiveMessageSessions_Request& operator=(const CFriendsMessages_GetActiveMessageSessions_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CFriendsMessages_GetActiveMessageSessions_Request& operator=(CFriendsMessages_GetActiveMessageSessions_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CFriendsMessages_GetActiveMessageSessions_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CFriendsMessages_GetActiveMessageSessions_Request* internal_default_instance() {
    return reinterpret_cast<const CFriendsMessages_GetActiveMessageSessions_Request*>(
               &_CFriendsMessages_GetActiveMessageSessions_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CFriendsMessages_GetActiveMessageSessions_Request& a, CFriendsMessages_GetActiveMessageSessions_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CFriendsMessages_GetActiveMessageSessions_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CFriendsMessages_GetActiveMessageSessions_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CFriendsMessages_GetActiveMessageSessions_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CFriendsMessages_GetActiveMessageSessions_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CFriendsMessages_GetActiveMessageSessions_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CFriendsMessages_GetActiveMessageSessions_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CFriendsMessages_GetActiveMessageSessions_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CFriendsMessages_GetActiveMessageSessions_Request";
  }
  protected:
  explicit CFriendsMessages_GetActiveMessageSessions_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLastmessageSinceFieldNumber = 1,
    kOnlySessionsWithMessagesFieldNumber = 2,
  };
  // optional uint32 lastmessage_since = 1 [(.description) = "return only session information where a chat message has been sent since this time (for polling)"];
  bool has_lastmessage_since() const;
  private:
  bool _internal_has_lastmessage_since() const;
  public:
  void clear_lastmessage_since();
  uint32_t lastmessage_since() const;
  void set_lastmessage_since(uint32_t value);
  private:
  uint32_t _internal_lastmessage_since() const;
  void _internal_set_lastmessage_since(uint32_t value);
  public:

  // optional bool only_sessions_with_messages = 2 [(.description) = "If non-zero, return only message sessions that have messages since our message cutoff. If zero, we return all active sessions."];
  bool has_only_sessions_with_messages() const;
  private:
  bool _internal_has_only_sessions_with_messages() const;
  public:
  void clear_only_sessions_with_messages();
  bool only_sessions_with_messages() const;
  void set_only_sessions_with_messages(bool value);
  private:
  bool _internal_only_sessions_with_messages() const;
  void _internal_set_only_sessions_with_messages(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CFriendsMessages_GetActiveMessageSessions_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t lastmessage_since_;
  bool only_sessions_with_messages_;
  friend struct ::TableStruct_steammessages_5ffriendmessages_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CFriendsMessages_GetActiveMessageSessions_Response.FriendMessageSession) */ {
 public:
  inline CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession() : CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession(nullptr) {}
  ~CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession() override;
  explicit constexpr CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession(const CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession& from);
  CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession(CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession&& from) noexcept
    : CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession() {
    *this = ::std::move(from);
  }

  inline CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession& operator=(const CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession& from) {
    CopyFrom(from);
    return *this;
  }
  inline CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession& operator=(CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession& default_instance() {
    return *internal_default_instance();
  }
  static inline const CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession* internal_default_instance() {
    return reinterpret_cast<const CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession*>(
               &_CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession& a, CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession& b) {
    a.Swap(&b);
  }
  inline void Swap(CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CFriendsMessages_GetActiveMessageSessions_Response.FriendMessageSession";
  }
  protected:
  explicit CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountidFriendFieldNumber = 1,
    kLastMessageFieldNumber = 2,
    kLastViewFieldNumber = 3,
    kUnreadMessageCountFieldNumber = 4,
  };
  // optional uint32 accountid_friend = 1;
  bool has_accountid_friend() const;
  private:
  bool _internal_has_accountid_friend() const;
  public:
  void clear_accountid_friend();
  uint32_t accountid_friend() const;
  void set_accountid_friend(uint32_t value);
  private:
  uint32_t _internal_accountid_friend() const;
  void _internal_set_accountid_friend(uint32_t value);
  public:

  // optional uint32 last_message = 2;
  bool has_last_message() const;
  private:
  bool _internal_has_last_message() const;
  public:
  void clear_last_message();
  uint32_t last_message() const;
  void set_last_message(uint32_t value);
  private:
  uint32_t _internal_last_message() const;
  void _internal_set_last_message(uint32_t value);
  public:

  // optional uint32 last_view = 3;
  bool has_last_view() const;
  private:
  bool _internal_has_last_view() const;
  public:
  void clear_last_view();
  uint32_t last_view() const;
  void set_last_view(uint32_t value);
  private:
  uint32_t _internal_last_view() const;
  void _internal_set_last_view(uint32_t value);
  public:

  // optional uint32 unread_message_count = 4;
  bool has_unread_message_count() const;
  private:
  bool _internal_has_unread_message_count() const;
  public:
  void clear_unread_message_count();
  uint32_t unread_message_count() const;
  void set_unread_message_count(uint32_t value);
  private:
  uint32_t _internal_unread_message_count() const;
  void _internal_set_unread_message_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CFriendsMessages_GetActiveMessageSessions_Response.FriendMessageSession)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t accountid_friend_;
  uint32_t last_message_;
  uint32_t last_view_;
  uint32_t unread_message_count_;
  friend struct ::TableStruct_steammessages_5ffriendmessages_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CFriendsMessages_GetActiveMessageSessions_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CFriendsMessages_GetActiveMessageSessions_Response) */ {
 public:
  inline CFriendsMessages_GetActiveMessageSessions_Response() : CFriendsMessages_GetActiveMessageSessions_Response(nullptr) {}
  ~CFriendsMessages_GetActiveMessageSessions_Response() override;
  explicit constexpr CFriendsMessages_GetActiveMessageSessions_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CFriendsMessages_GetActiveMessageSessions_Response(const CFriendsMessages_GetActiveMessageSessions_Response& from);
  CFriendsMessages_GetActiveMessageSessions_Response(CFriendsMessages_GetActiveMessageSessions_Response&& from) noexcept
    : CFriendsMessages_GetActiveMessageSessions_Response() {
    *this = ::std::move(from);
  }

  inline CFriendsMessages_GetActiveMessageSessions_Response& operator=(const CFriendsMessages_GetActiveMessageSessions_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CFriendsMessages_GetActiveMessageSessions_Response& operator=(CFriendsMessages_GetActiveMessageSessions_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CFriendsMessages_GetActiveMessageSessions_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CFriendsMessages_GetActiveMessageSessions_Response* internal_default_instance() {
    return reinterpret_cast<const CFriendsMessages_GetActiveMessageSessions_Response*>(
               &_CFriendsMessages_GetActiveMessageSessions_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CFriendsMessages_GetActiveMessageSessions_Response& a, CFriendsMessages_GetActiveMessageSessions_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CFriendsMessages_GetActiveMessageSessions_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CFriendsMessages_GetActiveMessageSessions_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CFriendsMessages_GetActiveMessageSessions_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CFriendsMessages_GetActiveMessageSessions_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CFriendsMessages_GetActiveMessageSessions_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CFriendsMessages_GetActiveMessageSessions_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CFriendsMessages_GetActiveMessageSessions_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CFriendsMessages_GetActiveMessageSessions_Response";
  }
  protected:
  explicit CFriendsMessages_GetActiveMessageSessions_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession FriendMessageSession;

  // accessors -------------------------------------------------------

  enum : int {
    kMessageSessionsFieldNumber = 1,
    kTimestampFieldNumber = 2,
  };
  // repeated .CFriendsMessages_GetActiveMessageSessions_Response.FriendMessageSession message_sessions = 1;
  int message_sessions_size() const;
  private:
  int _internal_message_sessions_size() const;
  public:
  void clear_message_sessions();
  ::CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession* mutable_message_sessions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession >*
      mutable_message_sessions();
  private:
  const ::CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession& _internal_message_sessions(int index) const;
  ::CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession* _internal_add_message_sessions();
  public:
  const ::CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession& message_sessions(int index) const;
  ::CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession* add_message_sessions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession >&
      message_sessions() const;

  // optional uint32 timestamp = 2 [(.description) = "This should be passed in the next request as lastmessage_since to poll for updates"];
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  uint32_t timestamp() const;
  void set_timestamp(uint32_t value);
  private:
  uint32_t _internal_timestamp() const;
  void _internal_set_timestamp(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CFriendsMessages_GetActiveMessageSessions_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession > message_sessions_;
  uint32_t timestamp_;
  friend struct ::TableStruct_steammessages_5ffriendmessages_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CFriendMessages_SendMessage_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CFriendMessages_SendMessage_Request) */ {
 public:
  inline CFriendMessages_SendMessage_Request() : CFriendMessages_SendMessage_Request(nullptr) {}
  ~CFriendMessages_SendMessage_Request() override;
  explicit constexpr CFriendMessages_SendMessage_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CFriendMessages_SendMessage_Request(const CFriendMessages_SendMessage_Request& from);
  CFriendMessages_SendMessage_Request(CFriendMessages_SendMessage_Request&& from) noexcept
    : CFriendMessages_SendMessage_Request() {
    *this = ::std::move(from);
  }

  inline CFriendMessages_SendMessage_Request& operator=(const CFriendMessages_SendMessage_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CFriendMessages_SendMessage_Request& operator=(CFriendMessages_SendMessage_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CFriendMessages_SendMessage_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CFriendMessages_SendMessage_Request* internal_default_instance() {
    return reinterpret_cast<const CFriendMessages_SendMessage_Request*>(
               &_CFriendMessages_SendMessage_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CFriendMessages_SendMessage_Request& a, CFriendMessages_SendMessage_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CFriendMessages_SendMessage_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CFriendMessages_SendMessage_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CFriendMessages_SendMessage_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CFriendMessages_SendMessage_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CFriendMessages_SendMessage_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CFriendMessages_SendMessage_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CFriendMessages_SendMessage_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CFriendMessages_SendMessage_Request";
  }
  protected:
  explicit CFriendMessages_SendMessage_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 3,
    kClientMessageIdFieldNumber = 8,
    kSteamidFieldNumber = 1,
    kChatEntryTypeFieldNumber = 2,
    kContainsBbcodeFieldNumber = 4,
    kEchoToSenderFieldNumber = 5,
    kLowPriorityFieldNumber = 6,
  };
  // optional string message = 3;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // optional string client_message_id = 8;
  bool has_client_message_id() const;
  private:
  bool _internal_has_client_message_id() const;
  public:
  void clear_client_message_id();
  const std::string& client_message_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_client_message_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_client_message_id();
  PROTOBUF_NODISCARD std::string* release_client_message_id();
  void set_allocated_client_message_id(std::string* client_message_id);
  private:
  const std::string& _internal_client_message_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_message_id(const std::string& value);
  std::string* _internal_mutable_client_message_id();
  public:

  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional int32 chat_entry_type = 2;
  bool has_chat_entry_type() const;
  private:
  bool _internal_has_chat_entry_type() const;
  public:
  void clear_chat_entry_type();
  int32_t chat_entry_type() const;
  void set_chat_entry_type(int32_t value);
  private:
  int32_t _internal_chat_entry_type() const;
  void _internal_set_chat_entry_type(int32_t value);
  public:

  // optional bool contains_bbcode = 4;
  bool has_contains_bbcode() const;
  private:
  bool _internal_has_contains_bbcode() const;
  public:
  void clear_contains_bbcode();
  bool contains_bbcode() const;
  void set_contains_bbcode(bool value);
  private:
  bool _internal_contains_bbcode() const;
  void _internal_set_contains_bbcode(bool value);
  public:

  // optional bool echo_to_sender = 5;
  bool has_echo_to_sender() const;
  private:
  bool _internal_has_echo_to_sender() const;
  public:
  void clear_echo_to_sender();
  bool echo_to_sender() const;
  void set_echo_to_sender(bool value);
  private:
  bool _internal_echo_to_sender() const;
  void _internal_set_echo_to_sender(bool value);
  public:

  // optional bool low_priority = 6;
  bool has_low_priority() const;
  private:
  bool _internal_has_low_priority() const;
  public:
  void clear_low_priority();
  bool low_priority() const;
  void set_low_priority(bool value);
  private:
  bool _internal_low_priority() const;
  void _internal_set_low_priority(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CFriendMessages_SendMessage_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_message_id_;
  uint64_t steamid_;
  int32_t chat_entry_type_;
  bool contains_bbcode_;
  bool echo_to_sender_;
  bool low_priority_;
  friend struct ::TableStruct_steammessages_5ffriendmessages_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CFriendMessages_SendMessage_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CFriendMessages_SendMessage_Response) */ {
 public:
  inline CFriendMessages_SendMessage_Response() : CFriendMessages_SendMessage_Response(nullptr) {}
  ~CFriendMessages_SendMessage_Response() override;
  explicit constexpr CFriendMessages_SendMessage_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CFriendMessages_SendMessage_Response(const CFriendMessages_SendMessage_Response& from);
  CFriendMessages_SendMessage_Response(CFriendMessages_SendMessage_Response&& from) noexcept
    : CFriendMessages_SendMessage_Response() {
    *this = ::std::move(from);
  }

  inline CFriendMessages_SendMessage_Response& operator=(const CFriendMessages_SendMessage_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CFriendMessages_SendMessage_Response& operator=(CFriendMessages_SendMessage_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CFriendMessages_SendMessage_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CFriendMessages_SendMessage_Response* internal_default_instance() {
    return reinterpret_cast<const CFriendMessages_SendMessage_Response*>(
               &_CFriendMessages_SendMessage_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CFriendMessages_SendMessage_Response& a, CFriendMessages_SendMessage_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CFriendMessages_SendMessage_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CFriendMessages_SendMessage_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CFriendMessages_SendMessage_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CFriendMessages_SendMessage_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CFriendMessages_SendMessage_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CFriendMessages_SendMessage_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CFriendMessages_SendMessage_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CFriendMessages_SendMessage_Response";
  }
  protected:
  explicit CFriendMessages_SendMessage_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModifiedMessageFieldNumber = 1,
    kMessageWithoutBbCodeFieldNumber = 4,
    kServerTimestampFieldNumber = 2,
    kOrdinalFieldNumber = 3,
  };
  // optional string modified_message = 1;
  bool has_modified_message() const;
  private:
  bool _internal_has_modified_message() const;
  public:
  void clear_modified_message();
  const std::string& modified_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_modified_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_modified_message();
  PROTOBUF_NODISCARD std::string* release_modified_message();
  void set_allocated_modified_message(std::string* modified_message);
  private:
  const std::string& _internal_modified_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_modified_message(const std::string& value);
  std::string* _internal_mutable_modified_message();
  public:

  // optional string message_without_bb_code = 4;
  bool has_message_without_bb_code() const;
  private:
  bool _internal_has_message_without_bb_code() const;
  public:
  void clear_message_without_bb_code();
  const std::string& message_without_bb_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message_without_bb_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message_without_bb_code();
  PROTOBUF_NODISCARD std::string* release_message_without_bb_code();
  void set_allocated_message_without_bb_code(std::string* message_without_bb_code);
  private:
  const std::string& _internal_message_without_bb_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message_without_bb_code(const std::string& value);
  std::string* _internal_mutable_message_without_bb_code();
  public:

  // optional uint32 server_timestamp = 2;
  bool has_server_timestamp() const;
  private:
  bool _internal_has_server_timestamp() const;
  public:
  void clear_server_timestamp();
  uint32_t server_timestamp() const;
  void set_server_timestamp(uint32_t value);
  private:
  uint32_t _internal_server_timestamp() const;
  void _internal_set_server_timestamp(uint32_t value);
  public:

  // optional uint32 ordinal = 3;
  bool has_ordinal() const;
  private:
  bool _internal_has_ordinal() const;
  public:
  void clear_ordinal();
  uint32_t ordinal() const;
  void set_ordinal(uint32_t value);
  private:
  uint32_t _internal_ordinal() const;
  void _internal_set_ordinal(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CFriendMessages_SendMessage_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr modified_message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_without_bb_code_;
  uint32_t server_timestamp_;
  uint32_t ordinal_;
  friend struct ::TableStruct_steammessages_5ffriendmessages_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CFriendMessages_AckMessage_Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CFriendMessages_AckMessage_Notification) */ {
 public:
  inline CFriendMessages_AckMessage_Notification() : CFriendMessages_AckMessage_Notification(nullptr) {}
  ~CFriendMessages_AckMessage_Notification() override;
  explicit constexpr CFriendMessages_AckMessage_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CFriendMessages_AckMessage_Notification(const CFriendMessages_AckMessage_Notification& from);
  CFriendMessages_AckMessage_Notification(CFriendMessages_AckMessage_Notification&& from) noexcept
    : CFriendMessages_AckMessage_Notification() {
    *this = ::std::move(from);
  }

  inline CFriendMessages_AckMessage_Notification& operator=(const CFriendMessages_AckMessage_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CFriendMessages_AckMessage_Notification& operator=(CFriendMessages_AckMessage_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CFriendMessages_AckMessage_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CFriendMessages_AckMessage_Notification* internal_default_instance() {
    return reinterpret_cast<const CFriendMessages_AckMessage_Notification*>(
               &_CFriendMessages_AckMessage_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CFriendMessages_AckMessage_Notification& a, CFriendMessages_AckMessage_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CFriendMessages_AckMessage_Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CFriendMessages_AckMessage_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CFriendMessages_AckMessage_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CFriendMessages_AckMessage_Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CFriendMessages_AckMessage_Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CFriendMessages_AckMessage_Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CFriendMessages_AckMessage_Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CFriendMessages_AckMessage_Notification";
  }
  protected:
  explicit CFriendMessages_AckMessage_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidPartnerFieldNumber = 1,
    kTimestampFieldNumber = 2,
  };
  // optional fixed64 steamid_partner = 1;
  bool has_steamid_partner() const;
  private:
  bool _internal_has_steamid_partner() const;
  public:
  void clear_steamid_partner();
  uint64_t steamid_partner() const;
  void set_steamid_partner(uint64_t value);
  private:
  uint64_t _internal_steamid_partner() const;
  void _internal_set_steamid_partner(uint64_t value);
  public:

  // optional uint32 timestamp = 2;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  uint32_t timestamp() const;
  void set_timestamp(uint32_t value);
  private:
  uint32_t _internal_timestamp() const;
  void _internal_set_timestamp(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CFriendMessages_AckMessage_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t steamid_partner_;
  uint32_t timestamp_;
  friend struct ::TableStruct_steammessages_5ffriendmessages_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CFriendMessages_IsInFriendsUIBeta_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CFriendMessages_IsInFriendsUIBeta_Request) */ {
 public:
  inline CFriendMessages_IsInFriendsUIBeta_Request() : CFriendMessages_IsInFriendsUIBeta_Request(nullptr) {}
  ~CFriendMessages_IsInFriendsUIBeta_Request() override;
  explicit constexpr CFriendMessages_IsInFriendsUIBeta_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CFriendMessages_IsInFriendsUIBeta_Request(const CFriendMessages_IsInFriendsUIBeta_Request& from);
  CFriendMessages_IsInFriendsUIBeta_Request(CFriendMessages_IsInFriendsUIBeta_Request&& from) noexcept
    : CFriendMessages_IsInFriendsUIBeta_Request() {
    *this = ::std::move(from);
  }

  inline CFriendMessages_IsInFriendsUIBeta_Request& operator=(const CFriendMessages_IsInFriendsUIBeta_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CFriendMessages_IsInFriendsUIBeta_Request& operator=(CFriendMessages_IsInFriendsUIBeta_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CFriendMessages_IsInFriendsUIBeta_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CFriendMessages_IsInFriendsUIBeta_Request* internal_default_instance() {
    return reinterpret_cast<const CFriendMessages_IsInFriendsUIBeta_Request*>(
               &_CFriendMessages_IsInFriendsUIBeta_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CFriendMessages_IsInFriendsUIBeta_Request& a, CFriendMessages_IsInFriendsUIBeta_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CFriendMessages_IsInFriendsUIBeta_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CFriendMessages_IsInFriendsUIBeta_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CFriendMessages_IsInFriendsUIBeta_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CFriendMessages_IsInFriendsUIBeta_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CFriendMessages_IsInFriendsUIBeta_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CFriendMessages_IsInFriendsUIBeta_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CFriendMessages_IsInFriendsUIBeta_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CFriendMessages_IsInFriendsUIBeta_Request";
  }
  protected:
  explicit CFriendMessages_IsInFriendsUIBeta_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidFieldNumber = 1,
  };
  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CFriendMessages_IsInFriendsUIBeta_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t steamid_;
  friend struct ::TableStruct_steammessages_5ffriendmessages_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CFriendMessages_IsInFriendsUIBeta_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CFriendMessages_IsInFriendsUIBeta_Response) */ {
 public:
  inline CFriendMessages_IsInFriendsUIBeta_Response() : CFriendMessages_IsInFriendsUIBeta_Response(nullptr) {}
  ~CFriendMessages_IsInFriendsUIBeta_Response() override;
  explicit constexpr CFriendMessages_IsInFriendsUIBeta_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CFriendMessages_IsInFriendsUIBeta_Response(const CFriendMessages_IsInFriendsUIBeta_Response& from);
  CFriendMessages_IsInFriendsUIBeta_Response(CFriendMessages_IsInFriendsUIBeta_Response&& from) noexcept
    : CFriendMessages_IsInFriendsUIBeta_Response() {
    *this = ::std::move(from);
  }

  inline CFriendMessages_IsInFriendsUIBeta_Response& operator=(const CFriendMessages_IsInFriendsUIBeta_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CFriendMessages_IsInFriendsUIBeta_Response& operator=(CFriendMessages_IsInFriendsUIBeta_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CFriendMessages_IsInFriendsUIBeta_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CFriendMessages_IsInFriendsUIBeta_Response* internal_default_instance() {
    return reinterpret_cast<const CFriendMessages_IsInFriendsUIBeta_Response*>(
               &_CFriendMessages_IsInFriendsUIBeta_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CFriendMessages_IsInFriendsUIBeta_Response& a, CFriendMessages_IsInFriendsUIBeta_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CFriendMessages_IsInFriendsUIBeta_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CFriendMessages_IsInFriendsUIBeta_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CFriendMessages_IsInFriendsUIBeta_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CFriendMessages_IsInFriendsUIBeta_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CFriendMessages_IsInFriendsUIBeta_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CFriendMessages_IsInFriendsUIBeta_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CFriendMessages_IsInFriendsUIBeta_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CFriendMessages_IsInFriendsUIBeta_Response";
  }
  protected:
  explicit CFriendMessages_IsInFriendsUIBeta_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOnlineInFriendsuiFieldNumber = 1,
    kHasUsedFriendsuiFieldNumber = 2,
  };
  // optional bool online_in_friendsui = 1;
  bool has_online_in_friendsui() const;
  private:
  bool _internal_has_online_in_friendsui() const;
  public:
  void clear_online_in_friendsui();
  bool online_in_friendsui() const;
  void set_online_in_friendsui(bool value);
  private:
  bool _internal_online_in_friendsui() const;
  void _internal_set_online_in_friendsui(bool value);
  public:

  // optional bool has_used_friendsui = 2;
  bool has_has_used_friendsui() const;
  private:
  bool _internal_has_has_used_friendsui() const;
  public:
  void clear_has_used_friendsui();
  bool has_used_friendsui() const;
  void set_has_used_friendsui(bool value);
  private:
  bool _internal_has_used_friendsui() const;
  void _internal_set_has_used_friendsui(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CFriendMessages_IsInFriendsUIBeta_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool online_in_friendsui_;
  bool has_used_friendsui_;
  friend struct ::TableStruct_steammessages_5ffriendmessages_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CFriendMessages_UpdateMessageReaction_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CFriendMessages_UpdateMessageReaction_Request) */ {
 public:
  inline CFriendMessages_UpdateMessageReaction_Request() : CFriendMessages_UpdateMessageReaction_Request(nullptr) {}
  ~CFriendMessages_UpdateMessageReaction_Request() override;
  explicit constexpr CFriendMessages_UpdateMessageReaction_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CFriendMessages_UpdateMessageReaction_Request(const CFriendMessages_UpdateMessageReaction_Request& from);
  CFriendMessages_UpdateMessageReaction_Request(CFriendMessages_UpdateMessageReaction_Request&& from) noexcept
    : CFriendMessages_UpdateMessageReaction_Request() {
    *this = ::std::move(from);
  }

  inline CFriendMessages_UpdateMessageReaction_Request& operator=(const CFriendMessages_UpdateMessageReaction_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CFriendMessages_UpdateMessageReaction_Request& operator=(CFriendMessages_UpdateMessageReaction_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CFriendMessages_UpdateMessageReaction_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CFriendMessages_UpdateMessageReaction_Request* internal_default_instance() {
    return reinterpret_cast<const CFriendMessages_UpdateMessageReaction_Request*>(
               &_CFriendMessages_UpdateMessageReaction_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CFriendMessages_UpdateMessageReaction_Request& a, CFriendMessages_UpdateMessageReaction_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CFriendMessages_UpdateMessageReaction_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CFriendMessages_UpdateMessageReaction_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CFriendMessages_UpdateMessageReaction_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CFriendMessages_UpdateMessageReaction_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CFriendMessages_UpdateMessageReaction_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CFriendMessages_UpdateMessageReaction_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CFriendMessages_UpdateMessageReaction_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CFriendMessages_UpdateMessageReaction_Request";
  }
  protected:
  explicit CFriendMessages_UpdateMessageReaction_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReactionFieldNumber = 5,
    kSteamidFieldNumber = 1,
    kServerTimestampFieldNumber = 2,
    kOrdinalFieldNumber = 3,
    kReactionTypeFieldNumber = 4,
    kIsAddFieldNumber = 6,
  };
  // optional string reaction = 5;
  bool has_reaction() const;
  private:
  bool _internal_has_reaction() const;
  public:
  void clear_reaction();
  const std::string& reaction() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reaction(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reaction();
  PROTOBUF_NODISCARD std::string* release_reaction();
  void set_allocated_reaction(std::string* reaction);
  private:
  const std::string& _internal_reaction() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reaction(const std::string& value);
  std::string* _internal_mutable_reaction();
  public:

  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional uint32 server_timestamp = 2;
  bool has_server_timestamp() const;
  private:
  bool _internal_has_server_timestamp() const;
  public:
  void clear_server_timestamp();
  uint32_t server_timestamp() const;
  void set_server_timestamp(uint32_t value);
  private:
  uint32_t _internal_server_timestamp() const;
  void _internal_set_server_timestamp(uint32_t value);
  public:

  // optional uint32 ordinal = 3;
  bool has_ordinal() const;
  private:
  bool _internal_has_ordinal() const;
  public:
  void clear_ordinal();
  uint32_t ordinal() const;
  void set_ordinal(uint32_t value);
  private:
  uint32_t _internal_ordinal() const;
  void _internal_set_ordinal(uint32_t value);
  public:

  // optional .EMessageReactionType reaction_type = 4 [default = k_EMessageReactionType_Invalid];
  bool has_reaction_type() const;
  private:
  bool _internal_has_reaction_type() const;
  public:
  void clear_reaction_type();
  ::EMessageReactionType reaction_type() const;
  void set_reaction_type(::EMessageReactionType value);
  private:
  ::EMessageReactionType _internal_reaction_type() const;
  void _internal_set_reaction_type(::EMessageReactionType value);
  public:

  // optional bool is_add = 6;
  bool has_is_add() const;
  private:
  bool _internal_has_is_add() const;
  public:
  void clear_is_add();
  bool is_add() const;
  void set_is_add(bool value);
  private:
  bool _internal_is_add() const;
  void _internal_set_is_add(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CFriendMessages_UpdateMessageReaction_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reaction_;
  uint64_t steamid_;
  uint32_t server_timestamp_;
  uint32_t ordinal_;
  int reaction_type_;
  bool is_add_;
  friend struct ::TableStruct_steammessages_5ffriendmessages_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CFriendMessages_UpdateMessageReaction_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CFriendMessages_UpdateMessageReaction_Response) */ {
 public:
  inline CFriendMessages_UpdateMessageReaction_Response() : CFriendMessages_UpdateMessageReaction_Response(nullptr) {}
  ~CFriendMessages_UpdateMessageReaction_Response() override;
  explicit constexpr CFriendMessages_UpdateMessageReaction_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CFriendMessages_UpdateMessageReaction_Response(const CFriendMessages_UpdateMessageReaction_Response& from);
  CFriendMessages_UpdateMessageReaction_Response(CFriendMessages_UpdateMessageReaction_Response&& from) noexcept
    : CFriendMessages_UpdateMessageReaction_Response() {
    *this = ::std::move(from);
  }

  inline CFriendMessages_UpdateMessageReaction_Response& operator=(const CFriendMessages_UpdateMessageReaction_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CFriendMessages_UpdateMessageReaction_Response& operator=(CFriendMessages_UpdateMessageReaction_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CFriendMessages_UpdateMessageReaction_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CFriendMessages_UpdateMessageReaction_Response* internal_default_instance() {
    return reinterpret_cast<const CFriendMessages_UpdateMessageReaction_Response*>(
               &_CFriendMessages_UpdateMessageReaction_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CFriendMessages_UpdateMessageReaction_Response& a, CFriendMessages_UpdateMessageReaction_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CFriendMessages_UpdateMessageReaction_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CFriendMessages_UpdateMessageReaction_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CFriendMessages_UpdateMessageReaction_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CFriendMessages_UpdateMessageReaction_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CFriendMessages_UpdateMessageReaction_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CFriendMessages_UpdateMessageReaction_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CFriendMessages_UpdateMessageReaction_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CFriendMessages_UpdateMessageReaction_Response";
  }
  protected:
  explicit CFriendMessages_UpdateMessageReaction_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReactorsFieldNumber = 1,
  };
  // repeated uint32 reactors = 1;
  int reactors_size() const;
  private:
  int _internal_reactors_size() const;
  public:
  void clear_reactors();
  private:
  uint32_t _internal_reactors(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_reactors() const;
  void _internal_add_reactors(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_reactors();
  public:
  uint32_t reactors(int index) const;
  void set_reactors(int index, uint32_t value);
  void add_reactors(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      reactors() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_reactors();

  // @@protoc_insertion_point(class_scope:CFriendMessages_UpdateMessageReaction_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > reactors_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5ffriendmessages_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CFriendMessages_IncomingMessage_Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CFriendMessages_IncomingMessage_Notification) */ {
 public:
  inline CFriendMessages_IncomingMessage_Notification() : CFriendMessages_IncomingMessage_Notification(nullptr) {}
  ~CFriendMessages_IncomingMessage_Notification() override;
  explicit constexpr CFriendMessages_IncomingMessage_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CFriendMessages_IncomingMessage_Notification(const CFriendMessages_IncomingMessage_Notification& from);
  CFriendMessages_IncomingMessage_Notification(CFriendMessages_IncomingMessage_Notification&& from) noexcept
    : CFriendMessages_IncomingMessage_Notification() {
    *this = ::std::move(from);
  }

  inline CFriendMessages_IncomingMessage_Notification& operator=(const CFriendMessages_IncomingMessage_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CFriendMessages_IncomingMessage_Notification& operator=(CFriendMessages_IncomingMessage_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CFriendMessages_IncomingMessage_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CFriendMessages_IncomingMessage_Notification* internal_default_instance() {
    return reinterpret_cast<const CFriendMessages_IncomingMessage_Notification*>(
               &_CFriendMessages_IncomingMessage_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CFriendMessages_IncomingMessage_Notification& a, CFriendMessages_IncomingMessage_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CFriendMessages_IncomingMessage_Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CFriendMessages_IncomingMessage_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CFriendMessages_IncomingMessage_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CFriendMessages_IncomingMessage_Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CFriendMessages_IncomingMessage_Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CFriendMessages_IncomingMessage_Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CFriendMessages_IncomingMessage_Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CFriendMessages_IncomingMessage_Notification";
  }
  protected:
  explicit CFriendMessages_IncomingMessage_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 4,
    kMessageNoBbcodeFieldNumber = 8,
    kSteamidFriendFieldNumber = 1,
    kChatEntryTypeFieldNumber = 2,
    kRtime32ServerTimestampFieldNumber = 5,
    kOrdinalFieldNumber = 6,
    kFromLimitedAccountFieldNumber = 3,
    kLocalEchoFieldNumber = 7,
    kLowPriorityFieldNumber = 9,
  };
  // optional string message = 4;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // optional string message_no_bbcode = 8;
  bool has_message_no_bbcode() const;
  private:
  bool _internal_has_message_no_bbcode() const;
  public:
  void clear_message_no_bbcode();
  const std::string& message_no_bbcode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message_no_bbcode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message_no_bbcode();
  PROTOBUF_NODISCARD std::string* release_message_no_bbcode();
  void set_allocated_message_no_bbcode(std::string* message_no_bbcode);
  private:
  const std::string& _internal_message_no_bbcode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message_no_bbcode(const std::string& value);
  std::string* _internal_mutable_message_no_bbcode();
  public:

  // optional fixed64 steamid_friend = 1;
  bool has_steamid_friend() const;
  private:
  bool _internal_has_steamid_friend() const;
  public:
  void clear_steamid_friend();
  uint64_t steamid_friend() const;
  void set_steamid_friend(uint64_t value);
  private:
  uint64_t _internal_steamid_friend() const;
  void _internal_set_steamid_friend(uint64_t value);
  public:

  // optional int32 chat_entry_type = 2;
  bool has_chat_entry_type() const;
  private:
  bool _internal_has_chat_entry_type() const;
  public:
  void clear_chat_entry_type();
  int32_t chat_entry_type() const;
  void set_chat_entry_type(int32_t value);
  private:
  int32_t _internal_chat_entry_type() const;
  void _internal_set_chat_entry_type(int32_t value);
  public:

  // optional fixed32 rtime32_server_timestamp = 5;
  bool has_rtime32_server_timestamp() const;
  private:
  bool _internal_has_rtime32_server_timestamp() const;
  public:
  void clear_rtime32_server_timestamp();
  uint32_t rtime32_server_timestamp() const;
  void set_rtime32_server_timestamp(uint32_t value);
  private:
  uint32_t _internal_rtime32_server_timestamp() const;
  void _internal_set_rtime32_server_timestamp(uint32_t value);
  public:

  // optional uint32 ordinal = 6;
  bool has_ordinal() const;
  private:
  bool _internal_has_ordinal() const;
  public:
  void clear_ordinal();
  uint32_t ordinal() const;
  void set_ordinal(uint32_t value);
  private:
  uint32_t _internal_ordinal() const;
  void _internal_set_ordinal(uint32_t value);
  public:

  // optional bool from_limited_account = 3;
  bool has_from_limited_account() const;
  private:
  bool _internal_has_from_limited_account() const;
  public:
  void clear_from_limited_account();
  bool from_limited_account() const;
  void set_from_limited_account(bool value);
  private:
  bool _internal_from_limited_account() const;
  void _internal_set_from_limited_account(bool value);
  public:

  // optional bool local_echo = 7;
  bool has_local_echo() const;
  private:
  bool _internal_has_local_echo() const;
  public:
  void clear_local_echo();
  bool local_echo() const;
  void set_local_echo(bool value);
  private:
  bool _internal_local_echo() const;
  void _internal_set_local_echo(bool value);
  public:

  // optional bool low_priority = 9;
  bool has_low_priority() const;
  private:
  bool _internal_has_low_priority() const;
  public:
  void clear_low_priority();
  bool low_priority() const;
  void set_low_priority(bool value);
  private:
  bool _internal_low_priority() const;
  void _internal_set_low_priority(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CFriendMessages_IncomingMessage_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_no_bbcode_;
  uint64_t steamid_friend_;
  int32_t chat_entry_type_;
  uint32_t rtime32_server_timestamp_;
  uint32_t ordinal_;
  bool from_limited_account_;
  bool local_echo_;
  bool low_priority_;
  friend struct ::TableStruct_steammessages_5ffriendmessages_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CFriendMessages_MessageReaction_Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CFriendMessages_MessageReaction_Notification) */ {
 public:
  inline CFriendMessages_MessageReaction_Notification() : CFriendMessages_MessageReaction_Notification(nullptr) {}
  ~CFriendMessages_MessageReaction_Notification() override;
  explicit constexpr CFriendMessages_MessageReaction_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CFriendMessages_MessageReaction_Notification(const CFriendMessages_MessageReaction_Notification& from);
  CFriendMessages_MessageReaction_Notification(CFriendMessages_MessageReaction_Notification&& from) noexcept
    : CFriendMessages_MessageReaction_Notification() {
    *this = ::std::move(from);
  }

  inline CFriendMessages_MessageReaction_Notification& operator=(const CFriendMessages_MessageReaction_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CFriendMessages_MessageReaction_Notification& operator=(CFriendMessages_MessageReaction_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CFriendMessages_MessageReaction_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CFriendMessages_MessageReaction_Notification* internal_default_instance() {
    return reinterpret_cast<const CFriendMessages_MessageReaction_Notification*>(
               &_CFriendMessages_MessageReaction_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CFriendMessages_MessageReaction_Notification& a, CFriendMessages_MessageReaction_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CFriendMessages_MessageReaction_Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CFriendMessages_MessageReaction_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CFriendMessages_MessageReaction_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CFriendMessages_MessageReaction_Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CFriendMessages_MessageReaction_Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CFriendMessages_MessageReaction_Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CFriendMessages_MessageReaction_Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CFriendMessages_MessageReaction_Notification";
  }
  protected:
  explicit CFriendMessages_MessageReaction_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReactionFieldNumber = 6,
    kSteamidFriendFieldNumber = 1,
    kServerTimestampFieldNumber = 2,
    kOrdinalFieldNumber = 3,
    kReactorFieldNumber = 4,
    kReactionTypeFieldNumber = 5,
    kIsAddFieldNumber = 7,
  };
  // optional string reaction = 6;
  bool has_reaction() const;
  private:
  bool _internal_has_reaction() const;
  public:
  void clear_reaction();
  const std::string& reaction() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reaction(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reaction();
  PROTOBUF_NODISCARD std::string* release_reaction();
  void set_allocated_reaction(std::string* reaction);
  private:
  const std::string& _internal_reaction() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reaction(const std::string& value);
  std::string* _internal_mutable_reaction();
  public:

  // optional fixed64 steamid_friend = 1;
  bool has_steamid_friend() const;
  private:
  bool _internal_has_steamid_friend() const;
  public:
  void clear_steamid_friend();
  uint64_t steamid_friend() const;
  void set_steamid_friend(uint64_t value);
  private:
  uint64_t _internal_steamid_friend() const;
  void _internal_set_steamid_friend(uint64_t value);
  public:

  // optional uint32 server_timestamp = 2;
  bool has_server_timestamp() const;
  private:
  bool _internal_has_server_timestamp() const;
  public:
  void clear_server_timestamp();
  uint32_t server_timestamp() const;
  void set_server_timestamp(uint32_t value);
  private:
  uint32_t _internal_server_timestamp() const;
  void _internal_set_server_timestamp(uint32_t value);
  public:

  // optional uint32 ordinal = 3;
  bool has_ordinal() const;
  private:
  bool _internal_has_ordinal() const;
  public:
  void clear_ordinal();
  uint32_t ordinal() const;
  void set_ordinal(uint32_t value);
  private:
  uint32_t _internal_ordinal() const;
  void _internal_set_ordinal(uint32_t value);
  public:

  // optional fixed64 reactor = 4;
  bool has_reactor() const;
  private:
  bool _internal_has_reactor() const;
  public:
  void clear_reactor();
  uint64_t reactor() const;
  void set_reactor(uint64_t value);
  private:
  uint64_t _internal_reactor() const;
  void _internal_set_reactor(uint64_t value);
  public:

  // optional .EMessageReactionType reaction_type = 5 [default = k_EMessageReactionType_Invalid];
  bool has_reaction_type() const;
  private:
  bool _internal_has_reaction_type() const;
  public:
  void clear_reaction_type();
  ::EMessageReactionType reaction_type() const;
  void set_reaction_type(::EMessageReactionType value);
  private:
  ::EMessageReactionType _internal_reaction_type() const;
  void _internal_set_reaction_type(::EMessageReactionType value);
  public:

  // optional bool is_add = 7;
  bool has_is_add() const;
  private:
  bool _internal_has_is_add() const;
  public:
  void clear_is_add();
  bool is_add() const;
  void set_is_add(bool value);
  private:
  bool _internal_is_add() const;
  void _internal_set_is_add(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CFriendMessages_MessageReaction_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reaction_;
  uint64_t steamid_friend_;
  uint32_t server_timestamp_;
  uint32_t ordinal_;
  uint64_t reactor_;
  int reaction_type_;
  bool is_add_;
  friend struct ::TableStruct_steammessages_5ffriendmessages_2esteamclient_2eproto;
};
// ===================================================================

class FriendMessages_Stub;

class FriendMessages : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline FriendMessages() {};
 public:
  virtual ~FriendMessages();

  typedef FriendMessages_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void GetRecentMessages(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CFriendMessages_GetRecentMessages_Request* request,
                       ::CFriendMessages_GetRecentMessages_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetActiveMessageSessions(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CFriendsMessages_GetActiveMessageSessions_Request* request,
                       ::CFriendsMessages_GetActiveMessageSessions_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void SendMessage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CFriendMessages_SendMessage_Request* request,
                       ::CFriendMessages_SendMessage_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void AckMessage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CFriendMessages_AckMessage_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void IsInFriendsUIBeta(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CFriendMessages_IsInFriendsUIBeta_Request* request,
                       ::CFriendMessages_IsInFriendsUIBeta_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void UpdateMessageReaction(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CFriendMessages_UpdateMessageReaction_Request* request,
                       ::CFriendMessages_UpdateMessageReaction_Response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(FriendMessages);
};

class FriendMessages_Stub : public FriendMessages {
 public:
  FriendMessages_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  FriendMessages_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~FriendMessages_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements FriendMessages ------------------------------------------

  void GetRecentMessages(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CFriendMessages_GetRecentMessages_Request* request,
                       ::CFriendMessages_GetRecentMessages_Response* response,
                       ::google::protobuf::Closure* done);
  void GetActiveMessageSessions(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CFriendsMessages_GetActiveMessageSessions_Request* request,
                       ::CFriendsMessages_GetActiveMessageSessions_Response* response,
                       ::google::protobuf::Closure* done);
  void SendMessage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CFriendMessages_SendMessage_Request* request,
                       ::CFriendMessages_SendMessage_Response* response,
                       ::google::protobuf::Closure* done);
  void AckMessage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CFriendMessages_AckMessage_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void IsInFriendsUIBeta(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CFriendMessages_IsInFriendsUIBeta_Request* request,
                       ::CFriendMessages_IsInFriendsUIBeta_Response* response,
                       ::google::protobuf::Closure* done);
  void UpdateMessageReaction(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CFriendMessages_UpdateMessageReaction_Request* request,
                       ::CFriendMessages_UpdateMessageReaction_Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(FriendMessages_Stub);
};


// -------------------------------------------------------------------

class FriendMessagesClient_Stub;

class FriendMessagesClient : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline FriendMessagesClient() {};
 public:
  virtual ~FriendMessagesClient();

  typedef FriendMessagesClient_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void IncomingMessage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CFriendMessages_IncomingMessage_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyAckMessageEcho(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CFriendMessages_AckMessage_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void MessageReaction(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CFriendMessages_MessageReaction_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(FriendMessagesClient);
};

class FriendMessagesClient_Stub : public FriendMessagesClient {
 public:
  FriendMessagesClient_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  FriendMessagesClient_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~FriendMessagesClient_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements FriendMessagesClient ------------------------------------------

  void IncomingMessage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CFriendMessages_IncomingMessage_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void NotifyAckMessageEcho(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CFriendMessages_AckMessage_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void MessageReaction(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CFriendMessages_MessageReaction_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(FriendMessagesClient_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CFriendMessages_GetRecentMessages_Request

// optional fixed64 steamid1 = 1;
inline bool CFriendMessages_GetRecentMessages_Request::_internal_has_steamid1() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CFriendMessages_GetRecentMessages_Request::has_steamid1() const {
  return _internal_has_steamid1();
}
inline void CFriendMessages_GetRecentMessages_Request::clear_steamid1() {
  steamid1_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CFriendMessages_GetRecentMessages_Request::_internal_steamid1() const {
  return steamid1_;
}
inline uint64_t CFriendMessages_GetRecentMessages_Request::steamid1() const {
  // @@protoc_insertion_point(field_get:CFriendMessages_GetRecentMessages_Request.steamid1)
  return _internal_steamid1();
}
inline void CFriendMessages_GetRecentMessages_Request::_internal_set_steamid1(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steamid1_ = value;
}
inline void CFriendMessages_GetRecentMessages_Request::set_steamid1(uint64_t value) {
  _internal_set_steamid1(value);
  // @@protoc_insertion_point(field_set:CFriendMessages_GetRecentMessages_Request.steamid1)
}

// optional fixed64 steamid2 = 2;
inline bool CFriendMessages_GetRecentMessages_Request::_internal_has_steamid2() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CFriendMessages_GetRecentMessages_Request::has_steamid2() const {
  return _internal_has_steamid2();
}
inline void CFriendMessages_GetRecentMessages_Request::clear_steamid2() {
  steamid2_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CFriendMessages_GetRecentMessages_Request::_internal_steamid2() const {
  return steamid2_;
}
inline uint64_t CFriendMessages_GetRecentMessages_Request::steamid2() const {
  // @@protoc_insertion_point(field_get:CFriendMessages_GetRecentMessages_Request.steamid2)
  return _internal_steamid2();
}
inline void CFriendMessages_GetRecentMessages_Request::_internal_set_steamid2(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  steamid2_ = value;
}
inline void CFriendMessages_GetRecentMessages_Request::set_steamid2(uint64_t value) {
  _internal_set_steamid2(value);
  // @@protoc_insertion_point(field_set:CFriendMessages_GetRecentMessages_Request.steamid2)
}

// optional uint32 count = 3 [(.description) = "If non-zero, cap the number of recent messages to return."];
inline bool CFriendMessages_GetRecentMessages_Request::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CFriendMessages_GetRecentMessages_Request::has_count() const {
  return _internal_has_count();
}
inline void CFriendMessages_GetRecentMessages_Request::clear_count() {
  count_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CFriendMessages_GetRecentMessages_Request::_internal_count() const {
  return count_;
}
inline uint32_t CFriendMessages_GetRecentMessages_Request::count() const {
  // @@protoc_insertion_point(field_get:CFriendMessages_GetRecentMessages_Request.count)
  return _internal_count();
}
inline void CFriendMessages_GetRecentMessages_Request::_internal_set_count(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  count_ = value;
}
inline void CFriendMessages_GetRecentMessages_Request::set_count(uint32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:CFriendMessages_GetRecentMessages_Request.count)
}

// optional bool most_recent_conversation = 4 [(.description) = "Grab the block of chat from the most recent conversation (a ~5 minute period)"];
inline bool CFriendMessages_GetRecentMessages_Request::_internal_has_most_recent_conversation() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CFriendMessages_GetRecentMessages_Request::has_most_recent_conversation() const {
  return _internal_has_most_recent_conversation();
}
inline void CFriendMessages_GetRecentMessages_Request::clear_most_recent_conversation() {
  most_recent_conversation_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CFriendMessages_GetRecentMessages_Request::_internal_most_recent_conversation() const {
  return most_recent_conversation_;
}
inline bool CFriendMessages_GetRecentMessages_Request::most_recent_conversation() const {
  // @@protoc_insertion_point(field_get:CFriendMessages_GetRecentMessages_Request.most_recent_conversation)
  return _internal_most_recent_conversation();
}
inline void CFriendMessages_GetRecentMessages_Request::_internal_set_most_recent_conversation(bool value) {
  _has_bits_[0] |= 0x00000010u;
  most_recent_conversation_ = value;
}
inline void CFriendMessages_GetRecentMessages_Request::set_most_recent_conversation(bool value) {
  _internal_set_most_recent_conversation(value);
  // @@protoc_insertion_point(field_set:CFriendMessages_GetRecentMessages_Request.most_recent_conversation)
}

// optional fixed32 rtime32_start_time = 5 [(.description) = "If non-zero, return only messages with timestamps greater or equal to this. If zero, we only return messages from a recent time cutoff."];
inline bool CFriendMessages_GetRecentMessages_Request::_internal_has_rtime32_start_time() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CFriendMessages_GetRecentMessages_Request::has_rtime32_start_time() const {
  return _internal_has_rtime32_start_time();
}
inline void CFriendMessages_GetRecentMessages_Request::clear_rtime32_start_time() {
  rtime32_start_time_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CFriendMessages_GetRecentMessages_Request::_internal_rtime32_start_time() const {
  return rtime32_start_time_;
}
inline uint32_t CFriendMessages_GetRecentMessages_Request::rtime32_start_time() const {
  // @@protoc_insertion_point(field_get:CFriendMessages_GetRecentMessages_Request.rtime32_start_time)
  return _internal_rtime32_start_time();
}
inline void CFriendMessages_GetRecentMessages_Request::_internal_set_rtime32_start_time(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  rtime32_start_time_ = value;
}
inline void CFriendMessages_GetRecentMessages_Request::set_rtime32_start_time(uint32_t value) {
  _internal_set_rtime32_start_time(value);
  // @@protoc_insertion_point(field_set:CFriendMessages_GetRecentMessages_Request.rtime32_start_time)
}

// optional bool bbcode_format = 6 [(.description) = "Return the results with bbcode formatting."];
inline bool CFriendMessages_GetRecentMessages_Request::_internal_has_bbcode_format() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CFriendMessages_GetRecentMessages_Request::has_bbcode_format() const {
  return _internal_has_bbcode_format();
}
inline void CFriendMessages_GetRecentMessages_Request::clear_bbcode_format() {
  bbcode_format_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CFriendMessages_GetRecentMessages_Request::_internal_bbcode_format() const {
  return bbcode_format_;
}
inline bool CFriendMessages_GetRecentMessages_Request::bbcode_format() const {
  // @@protoc_insertion_point(field_get:CFriendMessages_GetRecentMessages_Request.bbcode_format)
  return _internal_bbcode_format();
}
inline void CFriendMessages_GetRecentMessages_Request::_internal_set_bbcode_format(bool value) {
  _has_bits_[0] |= 0x00000020u;
  bbcode_format_ = value;
}
inline void CFriendMessages_GetRecentMessages_Request::set_bbcode_format(bool value) {
  _internal_set_bbcode_format(value);
  // @@protoc_insertion_point(field_set:CFriendMessages_GetRecentMessages_Request.bbcode_format)
}

// optional uint32 start_ordinal = 7 [(.description) = "Combined with start time, only messages after this ordinal are returned (dedupes messages in same second)"];
inline bool CFriendMessages_GetRecentMessages_Request::_internal_has_start_ordinal() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CFriendMessages_GetRecentMessages_Request::has_start_ordinal() const {
  return _internal_has_start_ordinal();
}
inline void CFriendMessages_GetRecentMessages_Request::clear_start_ordinal() {
  start_ordinal_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CFriendMessages_GetRecentMessages_Request::_internal_start_ordinal() const {
  return start_ordinal_;
}
inline uint32_t CFriendMessages_GetRecentMessages_Request::start_ordinal() const {
  // @@protoc_insertion_point(field_get:CFriendMessages_GetRecentMessages_Request.start_ordinal)
  return _internal_start_ordinal();
}
inline void CFriendMessages_GetRecentMessages_Request::_internal_set_start_ordinal(uint32_t value) {
  _has_bits_[0] |= 0x00000040u;
  start_ordinal_ = value;
}
inline void CFriendMessages_GetRecentMessages_Request::set_start_ordinal(uint32_t value) {
  _internal_set_start_ordinal(value);
  // @@protoc_insertion_point(field_set:CFriendMessages_GetRecentMessages_Request.start_ordinal)
}

// optional uint32 time_last = 8 [(.description) = "if present/non-zero, return only messages before this."];
inline bool CFriendMessages_GetRecentMessages_Request::_internal_has_time_last() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CFriendMessages_GetRecentMessages_Request::has_time_last() const {
  return _internal_has_time_last();
}
inline void CFriendMessages_GetRecentMessages_Request::clear_time_last() {
  time_last_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CFriendMessages_GetRecentMessages_Request::_internal_time_last() const {
  return time_last_;
}
inline uint32_t CFriendMessages_GetRecentMessages_Request::time_last() const {
  // @@protoc_insertion_point(field_get:CFriendMessages_GetRecentMessages_Request.time_last)
  return _internal_time_last();
}
inline void CFriendMessages_GetRecentMessages_Request::_internal_set_time_last(uint32_t value) {
  _has_bits_[0] |= 0x00000080u;
  time_last_ = value;
}
inline void CFriendMessages_GetRecentMessages_Request::set_time_last(uint32_t value) {
  _internal_set_time_last(value);
  // @@protoc_insertion_point(field_set:CFriendMessages_GetRecentMessages_Request.time_last)
}

// optional uint32 ordinal_last = 9;
inline bool CFriendMessages_GetRecentMessages_Request::_internal_has_ordinal_last() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CFriendMessages_GetRecentMessages_Request::has_ordinal_last() const {
  return _internal_has_ordinal_last();
}
inline void CFriendMessages_GetRecentMessages_Request::clear_ordinal_last() {
  ordinal_last_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CFriendMessages_GetRecentMessages_Request::_internal_ordinal_last() const {
  return ordinal_last_;
}
inline uint32_t CFriendMessages_GetRecentMessages_Request::ordinal_last() const {
  // @@protoc_insertion_point(field_get:CFriendMessages_GetRecentMessages_Request.ordinal_last)
  return _internal_ordinal_last();
}
inline void CFriendMessages_GetRecentMessages_Request::_internal_set_ordinal_last(uint32_t value) {
  _has_bits_[0] |= 0x00000100u;
  ordinal_last_ = value;
}
inline void CFriendMessages_GetRecentMessages_Request::set_ordinal_last(uint32_t value) {
  _internal_set_ordinal_last(value);
  // @@protoc_insertion_point(field_set:CFriendMessages_GetRecentMessages_Request.ordinal_last)
}

// -------------------------------------------------------------------

// CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction

// optional .EMessageReactionType reaction_type = 1 [default = k_EMessageReactionType_Invalid];
inline bool CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction::_internal_has_reaction_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction::has_reaction_type() const {
  return _internal_has_reaction_type();
}
inline void CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction::clear_reaction_type() {
  reaction_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::EMessageReactionType CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction::_internal_reaction_type() const {
  return static_cast< ::EMessageReactionType >(reaction_type_);
}
inline ::EMessageReactionType CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction::reaction_type() const {
  // @@protoc_insertion_point(field_get:CFriendMessages_GetRecentMessages_Response.FriendMessage.MessageReaction.reaction_type)
  return _internal_reaction_type();
}
inline void CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction::_internal_set_reaction_type(::EMessageReactionType value) {
  assert(::EMessageReactionType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  reaction_type_ = value;
}
inline void CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction::set_reaction_type(::EMessageReactionType value) {
  _internal_set_reaction_type(value);
  // @@protoc_insertion_point(field_set:CFriendMessages_GetRecentMessages_Response.FriendMessage.MessageReaction.reaction_type)
}

// optional string reaction = 2;
inline bool CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction::_internal_has_reaction() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction::has_reaction() const {
  return _internal_has_reaction();
}
inline void CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction::clear_reaction() {
  reaction_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction::reaction() const {
  // @@protoc_insertion_point(field_get:CFriendMessages_GetRecentMessages_Response.FriendMessage.MessageReaction.reaction)
  return _internal_reaction();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction::set_reaction(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 reaction_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CFriendMessages_GetRecentMessages_Response.FriendMessage.MessageReaction.reaction)
}
inline std::string* CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction::mutable_reaction() {
  std::string* _s = _internal_mutable_reaction();
  // @@protoc_insertion_point(field_mutable:CFriendMessages_GetRecentMessages_Response.FriendMessage.MessageReaction.reaction)
  return _s;
}
inline const std::string& CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction::_internal_reaction() const {
  return reaction_.Get();
}
inline void CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction::_internal_set_reaction(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  reaction_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction::_internal_mutable_reaction() {
  _has_bits_[0] |= 0x00000001u;
  return reaction_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction::release_reaction() {
  // @@protoc_insertion_point(field_release:CFriendMessages_GetRecentMessages_Response.FriendMessage.MessageReaction.reaction)
  if (!_internal_has_reaction()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = reaction_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (reaction_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    reaction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction::set_allocated_reaction(std::string* reaction) {
  if (reaction != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  reaction_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reaction,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (reaction_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    reaction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CFriendMessages_GetRecentMessages_Response.FriendMessage.MessageReaction.reaction)
}

// repeated uint32 reactors = 3;
inline int CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction::_internal_reactors_size() const {
  return reactors_.size();
}
inline int CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction::reactors_size() const {
  return _internal_reactors_size();
}
inline void CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction::clear_reactors() {
  reactors_.Clear();
}
inline uint32_t CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction::_internal_reactors(int index) const {
  return reactors_.Get(index);
}
inline uint32_t CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction::reactors(int index) const {
  // @@protoc_insertion_point(field_get:CFriendMessages_GetRecentMessages_Response.FriendMessage.MessageReaction.reactors)
  return _internal_reactors(index);
}
inline void CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction::set_reactors(int index, uint32_t value) {
  reactors_.Set(index, value);
  // @@protoc_insertion_point(field_set:CFriendMessages_GetRecentMessages_Response.FriendMessage.MessageReaction.reactors)
}
inline void CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction::_internal_add_reactors(uint32_t value) {
  reactors_.Add(value);
}
inline void CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction::add_reactors(uint32_t value) {
  _internal_add_reactors(value);
  // @@protoc_insertion_point(field_add:CFriendMessages_GetRecentMessages_Response.FriendMessage.MessageReaction.reactors)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction::_internal_reactors() const {
  return reactors_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction::reactors() const {
  // @@protoc_insertion_point(field_list:CFriendMessages_GetRecentMessages_Response.FriendMessage.MessageReaction.reactors)
  return _internal_reactors();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction::_internal_mutable_reactors() {
  return &reactors_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction::mutable_reactors() {
  // @@protoc_insertion_point(field_mutable_list:CFriendMessages_GetRecentMessages_Response.FriendMessage.MessageReaction.reactors)
  return _internal_mutable_reactors();
}

// -------------------------------------------------------------------

// CFriendMessages_GetRecentMessages_Response_FriendMessage

// optional uint32 accountid = 1;
inline bool CFriendMessages_GetRecentMessages_Response_FriendMessage::_internal_has_accountid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CFriendMessages_GetRecentMessages_Response_FriendMessage::has_accountid() const {
  return _internal_has_accountid();
}
inline void CFriendMessages_GetRecentMessages_Response_FriendMessage::clear_accountid() {
  accountid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CFriendMessages_GetRecentMessages_Response_FriendMessage::_internal_accountid() const {
  return accountid_;
}
inline uint32_t CFriendMessages_GetRecentMessages_Response_FriendMessage::accountid() const {
  // @@protoc_insertion_point(field_get:CFriendMessages_GetRecentMessages_Response.FriendMessage.accountid)
  return _internal_accountid();
}
inline void CFriendMessages_GetRecentMessages_Response_FriendMessage::_internal_set_accountid(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  accountid_ = value;
}
inline void CFriendMessages_GetRecentMessages_Response_FriendMessage::set_accountid(uint32_t value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:CFriendMessages_GetRecentMessages_Response.FriendMessage.accountid)
}

// optional uint32 timestamp = 2;
inline bool CFriendMessages_GetRecentMessages_Response_FriendMessage::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CFriendMessages_GetRecentMessages_Response_FriendMessage::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void CFriendMessages_GetRecentMessages_Response_FriendMessage::clear_timestamp() {
  timestamp_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CFriendMessages_GetRecentMessages_Response_FriendMessage::_internal_timestamp() const {
  return timestamp_;
}
inline uint32_t CFriendMessages_GetRecentMessages_Response_FriendMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:CFriendMessages_GetRecentMessages_Response.FriendMessage.timestamp)
  return _internal_timestamp();
}
inline void CFriendMessages_GetRecentMessages_Response_FriendMessage::_internal_set_timestamp(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  timestamp_ = value;
}
inline void CFriendMessages_GetRecentMessages_Response_FriendMessage::set_timestamp(uint32_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:CFriendMessages_GetRecentMessages_Response.FriendMessage.timestamp)
}

// optional string message = 3;
inline bool CFriendMessages_GetRecentMessages_Response_FriendMessage::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CFriendMessages_GetRecentMessages_Response_FriendMessage::has_message() const {
  return _internal_has_message();
}
inline void CFriendMessages_GetRecentMessages_Response_FriendMessage::clear_message() {
  message_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CFriendMessages_GetRecentMessages_Response_FriendMessage::message() const {
  // @@protoc_insertion_point(field_get:CFriendMessages_GetRecentMessages_Response.FriendMessage.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CFriendMessages_GetRecentMessages_Response_FriendMessage::set_message(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CFriendMessages_GetRecentMessages_Response.FriendMessage.message)
}
inline std::string* CFriendMessages_GetRecentMessages_Response_FriendMessage::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:CFriendMessages_GetRecentMessages_Response.FriendMessage.message)
  return _s;
}
inline const std::string& CFriendMessages_GetRecentMessages_Response_FriendMessage::_internal_message() const {
  return message_.Get();
}
inline void CFriendMessages_GetRecentMessages_Response_FriendMessage::_internal_set_message(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CFriendMessages_GetRecentMessages_Response_FriendMessage::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CFriendMessages_GetRecentMessages_Response_FriendMessage::release_message() {
  // @@protoc_insertion_point(field_release:CFriendMessages_GetRecentMessages_Response.FriendMessage.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = message_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CFriendMessages_GetRecentMessages_Response_FriendMessage::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CFriendMessages_GetRecentMessages_Response.FriendMessage.message)
}

// optional uint32 ordinal = 4;
inline bool CFriendMessages_GetRecentMessages_Response_FriendMessage::_internal_has_ordinal() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CFriendMessages_GetRecentMessages_Response_FriendMessage::has_ordinal() const {
  return _internal_has_ordinal();
}
inline void CFriendMessages_GetRecentMessages_Response_FriendMessage::clear_ordinal() {
  ordinal_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CFriendMessages_GetRecentMessages_Response_FriendMessage::_internal_ordinal() const {
  return ordinal_;
}
inline uint32_t CFriendMessages_GetRecentMessages_Response_FriendMessage::ordinal() const {
  // @@protoc_insertion_point(field_get:CFriendMessages_GetRecentMessages_Response.FriendMessage.ordinal)
  return _internal_ordinal();
}
inline void CFriendMessages_GetRecentMessages_Response_FriendMessage::_internal_set_ordinal(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  ordinal_ = value;
}
inline void CFriendMessages_GetRecentMessages_Response_FriendMessage::set_ordinal(uint32_t value) {
  _internal_set_ordinal(value);
  // @@protoc_insertion_point(field_set:CFriendMessages_GetRecentMessages_Response.FriendMessage.ordinal)
}

// repeated .CFriendMessages_GetRecentMessages_Response.FriendMessage.MessageReaction reactions = 5;
inline int CFriendMessages_GetRecentMessages_Response_FriendMessage::_internal_reactions_size() const {
  return reactions_.size();
}
inline int CFriendMessages_GetRecentMessages_Response_FriendMessage::reactions_size() const {
  return _internal_reactions_size();
}
inline void CFriendMessages_GetRecentMessages_Response_FriendMessage::clear_reactions() {
  reactions_.Clear();
}
inline ::CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction* CFriendMessages_GetRecentMessages_Response_FriendMessage::mutable_reactions(int index) {
  // @@protoc_insertion_point(field_mutable:CFriendMessages_GetRecentMessages_Response.FriendMessage.reactions)
  return reactions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction >*
CFriendMessages_GetRecentMessages_Response_FriendMessage::mutable_reactions() {
  // @@protoc_insertion_point(field_mutable_list:CFriendMessages_GetRecentMessages_Response.FriendMessage.reactions)
  return &reactions_;
}
inline const ::CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction& CFriendMessages_GetRecentMessages_Response_FriendMessage::_internal_reactions(int index) const {
  return reactions_.Get(index);
}
inline const ::CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction& CFriendMessages_GetRecentMessages_Response_FriendMessage::reactions(int index) const {
  // @@protoc_insertion_point(field_get:CFriendMessages_GetRecentMessages_Response.FriendMessage.reactions)
  return _internal_reactions(index);
}
inline ::CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction* CFriendMessages_GetRecentMessages_Response_FriendMessage::_internal_add_reactions() {
  return reactions_.Add();
}
inline ::CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction* CFriendMessages_GetRecentMessages_Response_FriendMessage::add_reactions() {
  ::CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction* _add = _internal_add_reactions();
  // @@protoc_insertion_point(field_add:CFriendMessages_GetRecentMessages_Response.FriendMessage.reactions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction >&
CFriendMessages_GetRecentMessages_Response_FriendMessage::reactions() const {
  // @@protoc_insertion_point(field_list:CFriendMessages_GetRecentMessages_Response.FriendMessage.reactions)
  return reactions_;
}

// -------------------------------------------------------------------

// CFriendMessages_GetRecentMessages_Response

// repeated .CFriendMessages_GetRecentMessages_Response.FriendMessage messages = 1 [(.description) = "Array of messages, returned newest to oldest."];
inline int CFriendMessages_GetRecentMessages_Response::_internal_messages_size() const {
  return messages_.size();
}
inline int CFriendMessages_GetRecentMessages_Response::messages_size() const {
  return _internal_messages_size();
}
inline void CFriendMessages_GetRecentMessages_Response::clear_messages() {
  messages_.Clear();
}
inline ::CFriendMessages_GetRecentMessages_Response_FriendMessage* CFriendMessages_GetRecentMessages_Response::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:CFriendMessages_GetRecentMessages_Response.messages)
  return messages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CFriendMessages_GetRecentMessages_Response_FriendMessage >*
CFriendMessages_GetRecentMessages_Response::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:CFriendMessages_GetRecentMessages_Response.messages)
  return &messages_;
}
inline const ::CFriendMessages_GetRecentMessages_Response_FriendMessage& CFriendMessages_GetRecentMessages_Response::_internal_messages(int index) const {
  return messages_.Get(index);
}
inline const ::CFriendMessages_GetRecentMessages_Response_FriendMessage& CFriendMessages_GetRecentMessages_Response::messages(int index) const {
  // @@protoc_insertion_point(field_get:CFriendMessages_GetRecentMessages_Response.messages)
  return _internal_messages(index);
}
inline ::CFriendMessages_GetRecentMessages_Response_FriendMessage* CFriendMessages_GetRecentMessages_Response::_internal_add_messages() {
  return messages_.Add();
}
inline ::CFriendMessages_GetRecentMessages_Response_FriendMessage* CFriendMessages_GetRecentMessages_Response::add_messages() {
  ::CFriendMessages_GetRecentMessages_Response_FriendMessage* _add = _internal_add_messages();
  // @@protoc_insertion_point(field_add:CFriendMessages_GetRecentMessages_Response.messages)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CFriendMessages_GetRecentMessages_Response_FriendMessage >&
CFriendMessages_GetRecentMessages_Response::messages() const {
  // @@protoc_insertion_point(field_list:CFriendMessages_GetRecentMessages_Response.messages)
  return messages_;
}

// optional bool more_available = 4;
inline bool CFriendMessages_GetRecentMessages_Response::_internal_has_more_available() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CFriendMessages_GetRecentMessages_Response::has_more_available() const {
  return _internal_has_more_available();
}
inline void CFriendMessages_GetRecentMessages_Response::clear_more_available() {
  more_available_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CFriendMessages_GetRecentMessages_Response::_internal_more_available() const {
  return more_available_;
}
inline bool CFriendMessages_GetRecentMessages_Response::more_available() const {
  // @@protoc_insertion_point(field_get:CFriendMessages_GetRecentMessages_Response.more_available)
  return _internal_more_available();
}
inline void CFriendMessages_GetRecentMessages_Response::_internal_set_more_available(bool value) {
  _has_bits_[0] |= 0x00000001u;
  more_available_ = value;
}
inline void CFriendMessages_GetRecentMessages_Response::set_more_available(bool value) {
  _internal_set_more_available(value);
  // @@protoc_insertion_point(field_set:CFriendMessages_GetRecentMessages_Response.more_available)
}

// -------------------------------------------------------------------

// CFriendsMessages_GetActiveMessageSessions_Request

// optional uint32 lastmessage_since = 1 [(.description) = "return only session information where a chat message has been sent since this time (for polling)"];
inline bool CFriendsMessages_GetActiveMessageSessions_Request::_internal_has_lastmessage_since() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CFriendsMessages_GetActiveMessageSessions_Request::has_lastmessage_since() const {
  return _internal_has_lastmessage_since();
}
inline void CFriendsMessages_GetActiveMessageSessions_Request::clear_lastmessage_since() {
  lastmessage_since_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CFriendsMessages_GetActiveMessageSessions_Request::_internal_lastmessage_since() const {
  return lastmessage_since_;
}
inline uint32_t CFriendsMessages_GetActiveMessageSessions_Request::lastmessage_since() const {
  // @@protoc_insertion_point(field_get:CFriendsMessages_GetActiveMessageSessions_Request.lastmessage_since)
  return _internal_lastmessage_since();
}
inline void CFriendsMessages_GetActiveMessageSessions_Request::_internal_set_lastmessage_since(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  lastmessage_since_ = value;
}
inline void CFriendsMessages_GetActiveMessageSessions_Request::set_lastmessage_since(uint32_t value) {
  _internal_set_lastmessage_since(value);
  // @@protoc_insertion_point(field_set:CFriendsMessages_GetActiveMessageSessions_Request.lastmessage_since)
}

// optional bool only_sessions_with_messages = 2 [(.description) = "If non-zero, return only message sessions that have messages since our message cutoff. If zero, we return all active sessions."];
inline bool CFriendsMessages_GetActiveMessageSessions_Request::_internal_has_only_sessions_with_messages() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CFriendsMessages_GetActiveMessageSessions_Request::has_only_sessions_with_messages() const {
  return _internal_has_only_sessions_with_messages();
}
inline void CFriendsMessages_GetActiveMessageSessions_Request::clear_only_sessions_with_messages() {
  only_sessions_with_messages_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CFriendsMessages_GetActiveMessageSessions_Request::_internal_only_sessions_with_messages() const {
  return only_sessions_with_messages_;
}
inline bool CFriendsMessages_GetActiveMessageSessions_Request::only_sessions_with_messages() const {
  // @@protoc_insertion_point(field_get:CFriendsMessages_GetActiveMessageSessions_Request.only_sessions_with_messages)
  return _internal_only_sessions_with_messages();
}
inline void CFriendsMessages_GetActiveMessageSessions_Request::_internal_set_only_sessions_with_messages(bool value) {
  _has_bits_[0] |= 0x00000002u;
  only_sessions_with_messages_ = value;
}
inline void CFriendsMessages_GetActiveMessageSessions_Request::set_only_sessions_with_messages(bool value) {
  _internal_set_only_sessions_with_messages(value);
  // @@protoc_insertion_point(field_set:CFriendsMessages_GetActiveMessageSessions_Request.only_sessions_with_messages)
}

// -------------------------------------------------------------------

// CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession

// optional uint32 accountid_friend = 1;
inline bool CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::_internal_has_accountid_friend() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::has_accountid_friend() const {
  return _internal_has_accountid_friend();
}
inline void CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::clear_accountid_friend() {
  accountid_friend_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::_internal_accountid_friend() const {
  return accountid_friend_;
}
inline uint32_t CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::accountid_friend() const {
  // @@protoc_insertion_point(field_get:CFriendsMessages_GetActiveMessageSessions_Response.FriendMessageSession.accountid_friend)
  return _internal_accountid_friend();
}
inline void CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::_internal_set_accountid_friend(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  accountid_friend_ = value;
}
inline void CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::set_accountid_friend(uint32_t value) {
  _internal_set_accountid_friend(value);
  // @@protoc_insertion_point(field_set:CFriendsMessages_GetActiveMessageSessions_Response.FriendMessageSession.accountid_friend)
}

// optional uint32 last_message = 2;
inline bool CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::_internal_has_last_message() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::has_last_message() const {
  return _internal_has_last_message();
}
inline void CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::clear_last_message() {
  last_message_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::_internal_last_message() const {
  return last_message_;
}
inline uint32_t CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::last_message() const {
  // @@protoc_insertion_point(field_get:CFriendsMessages_GetActiveMessageSessions_Response.FriendMessageSession.last_message)
  return _internal_last_message();
}
inline void CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::_internal_set_last_message(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  last_message_ = value;
}
inline void CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::set_last_message(uint32_t value) {
  _internal_set_last_message(value);
  // @@protoc_insertion_point(field_set:CFriendsMessages_GetActiveMessageSessions_Response.FriendMessageSession.last_message)
}

// optional uint32 last_view = 3;
inline bool CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::_internal_has_last_view() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::has_last_view() const {
  return _internal_has_last_view();
}
inline void CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::clear_last_view() {
  last_view_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::_internal_last_view() const {
  return last_view_;
}
inline uint32_t CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::last_view() const {
  // @@protoc_insertion_point(field_get:CFriendsMessages_GetActiveMessageSessions_Response.FriendMessageSession.last_view)
  return _internal_last_view();
}
inline void CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::_internal_set_last_view(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  last_view_ = value;
}
inline void CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::set_last_view(uint32_t value) {
  _internal_set_last_view(value);
  // @@protoc_insertion_point(field_set:CFriendsMessages_GetActiveMessageSessions_Response.FriendMessageSession.last_view)
}

// optional uint32 unread_message_count = 4;
inline bool CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::_internal_has_unread_message_count() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::has_unread_message_count() const {
  return _internal_has_unread_message_count();
}
inline void CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::clear_unread_message_count() {
  unread_message_count_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::_internal_unread_message_count() const {
  return unread_message_count_;
}
inline uint32_t CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::unread_message_count() const {
  // @@protoc_insertion_point(field_get:CFriendsMessages_GetActiveMessageSessions_Response.FriendMessageSession.unread_message_count)
  return _internal_unread_message_count();
}
inline void CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::_internal_set_unread_message_count(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  unread_message_count_ = value;
}
inline void CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::set_unread_message_count(uint32_t value) {
  _internal_set_unread_message_count(value);
  // @@protoc_insertion_point(field_set:CFriendsMessages_GetActiveMessageSessions_Response.FriendMessageSession.unread_message_count)
}

// -------------------------------------------------------------------

// CFriendsMessages_GetActiveMessageSessions_Response

// repeated .CFriendsMessages_GetActiveMessageSessions_Response.FriendMessageSession message_sessions = 1;
inline int CFriendsMessages_GetActiveMessageSessions_Response::_internal_message_sessions_size() const {
  return message_sessions_.size();
}
inline int CFriendsMessages_GetActiveMessageSessions_Response::message_sessions_size() const {
  return _internal_message_sessions_size();
}
inline void CFriendsMessages_GetActiveMessageSessions_Response::clear_message_sessions() {
  message_sessions_.Clear();
}
inline ::CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession* CFriendsMessages_GetActiveMessageSessions_Response::mutable_message_sessions(int index) {
  // @@protoc_insertion_point(field_mutable:CFriendsMessages_GetActiveMessageSessions_Response.message_sessions)
  return message_sessions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession >*
CFriendsMessages_GetActiveMessageSessions_Response::mutable_message_sessions() {
  // @@protoc_insertion_point(field_mutable_list:CFriendsMessages_GetActiveMessageSessions_Response.message_sessions)
  return &message_sessions_;
}
inline const ::CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession& CFriendsMessages_GetActiveMessageSessions_Response::_internal_message_sessions(int index) const {
  return message_sessions_.Get(index);
}
inline const ::CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession& CFriendsMessages_GetActiveMessageSessions_Response::message_sessions(int index) const {
  // @@protoc_insertion_point(field_get:CFriendsMessages_GetActiveMessageSessions_Response.message_sessions)
  return _internal_message_sessions(index);
}
inline ::CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession* CFriendsMessages_GetActiveMessageSessions_Response::_internal_add_message_sessions() {
  return message_sessions_.Add();
}
inline ::CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession* CFriendsMessages_GetActiveMessageSessions_Response::add_message_sessions() {
  ::CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession* _add = _internal_add_message_sessions();
  // @@protoc_insertion_point(field_add:CFriendsMessages_GetActiveMessageSessions_Response.message_sessions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession >&
CFriendsMessages_GetActiveMessageSessions_Response::message_sessions() const {
  // @@protoc_insertion_point(field_list:CFriendsMessages_GetActiveMessageSessions_Response.message_sessions)
  return message_sessions_;
}

// optional uint32 timestamp = 2 [(.description) = "This should be passed in the next request as lastmessage_since to poll for updates"];
inline bool CFriendsMessages_GetActiveMessageSessions_Response::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CFriendsMessages_GetActiveMessageSessions_Response::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void CFriendsMessages_GetActiveMessageSessions_Response::clear_timestamp() {
  timestamp_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CFriendsMessages_GetActiveMessageSessions_Response::_internal_timestamp() const {
  return timestamp_;
}
inline uint32_t CFriendsMessages_GetActiveMessageSessions_Response::timestamp() const {
  // @@protoc_insertion_point(field_get:CFriendsMessages_GetActiveMessageSessions_Response.timestamp)
  return _internal_timestamp();
}
inline void CFriendsMessages_GetActiveMessageSessions_Response::_internal_set_timestamp(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_ = value;
}
inline void CFriendsMessages_GetActiveMessageSessions_Response::set_timestamp(uint32_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:CFriendsMessages_GetActiveMessageSessions_Response.timestamp)
}

// -------------------------------------------------------------------

// CFriendMessages_SendMessage_Request

// optional fixed64 steamid = 1;
inline bool CFriendMessages_SendMessage_Request::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CFriendMessages_SendMessage_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CFriendMessages_SendMessage_Request::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CFriendMessages_SendMessage_Request::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CFriendMessages_SendMessage_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CFriendMessages_SendMessage_Request.steamid)
  return _internal_steamid();
}
inline void CFriendMessages_SendMessage_Request::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  steamid_ = value;
}
inline void CFriendMessages_SendMessage_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CFriendMessages_SendMessage_Request.steamid)
}

// optional int32 chat_entry_type = 2;
inline bool CFriendMessages_SendMessage_Request::_internal_has_chat_entry_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CFriendMessages_SendMessage_Request::has_chat_entry_type() const {
  return _internal_has_chat_entry_type();
}
inline void CFriendMessages_SendMessage_Request::clear_chat_entry_type() {
  chat_entry_type_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t CFriendMessages_SendMessage_Request::_internal_chat_entry_type() const {
  return chat_entry_type_;
}
inline int32_t CFriendMessages_SendMessage_Request::chat_entry_type() const {
  // @@protoc_insertion_point(field_get:CFriendMessages_SendMessage_Request.chat_entry_type)
  return _internal_chat_entry_type();
}
inline void CFriendMessages_SendMessage_Request::_internal_set_chat_entry_type(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  chat_entry_type_ = value;
}
inline void CFriendMessages_SendMessage_Request::set_chat_entry_type(int32_t value) {
  _internal_set_chat_entry_type(value);
  // @@protoc_insertion_point(field_set:CFriendMessages_SendMessage_Request.chat_entry_type)
}

// optional string message = 3;
inline bool CFriendMessages_SendMessage_Request::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CFriendMessages_SendMessage_Request::has_message() const {
  return _internal_has_message();
}
inline void CFriendMessages_SendMessage_Request::clear_message() {
  message_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CFriendMessages_SendMessage_Request::message() const {
  // @@protoc_insertion_point(field_get:CFriendMessages_SendMessage_Request.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CFriendMessages_SendMessage_Request::set_message(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CFriendMessages_SendMessage_Request.message)
}
inline std::string* CFriendMessages_SendMessage_Request::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:CFriendMessages_SendMessage_Request.message)
  return _s;
}
inline const std::string& CFriendMessages_SendMessage_Request::_internal_message() const {
  return message_.Get();
}
inline void CFriendMessages_SendMessage_Request::_internal_set_message(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CFriendMessages_SendMessage_Request::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CFriendMessages_SendMessage_Request::release_message() {
  // @@protoc_insertion_point(field_release:CFriendMessages_SendMessage_Request.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = message_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CFriendMessages_SendMessage_Request::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CFriendMessages_SendMessage_Request.message)
}

// optional bool contains_bbcode = 4;
inline bool CFriendMessages_SendMessage_Request::_internal_has_contains_bbcode() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CFriendMessages_SendMessage_Request::has_contains_bbcode() const {
  return _internal_has_contains_bbcode();
}
inline void CFriendMessages_SendMessage_Request::clear_contains_bbcode() {
  contains_bbcode_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CFriendMessages_SendMessage_Request::_internal_contains_bbcode() const {
  return contains_bbcode_;
}
inline bool CFriendMessages_SendMessage_Request::contains_bbcode() const {
  // @@protoc_insertion_point(field_get:CFriendMessages_SendMessage_Request.contains_bbcode)
  return _internal_contains_bbcode();
}
inline void CFriendMessages_SendMessage_Request::_internal_set_contains_bbcode(bool value) {
  _has_bits_[0] |= 0x00000010u;
  contains_bbcode_ = value;
}
inline void CFriendMessages_SendMessage_Request::set_contains_bbcode(bool value) {
  _internal_set_contains_bbcode(value);
  // @@protoc_insertion_point(field_set:CFriendMessages_SendMessage_Request.contains_bbcode)
}

// optional bool echo_to_sender = 5;
inline bool CFriendMessages_SendMessage_Request::_internal_has_echo_to_sender() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CFriendMessages_SendMessage_Request::has_echo_to_sender() const {
  return _internal_has_echo_to_sender();
}
inline void CFriendMessages_SendMessage_Request::clear_echo_to_sender() {
  echo_to_sender_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CFriendMessages_SendMessage_Request::_internal_echo_to_sender() const {
  return echo_to_sender_;
}
inline bool CFriendMessages_SendMessage_Request::echo_to_sender() const {
  // @@protoc_insertion_point(field_get:CFriendMessages_SendMessage_Request.echo_to_sender)
  return _internal_echo_to_sender();
}
inline void CFriendMessages_SendMessage_Request::_internal_set_echo_to_sender(bool value) {
  _has_bits_[0] |= 0x00000020u;
  echo_to_sender_ = value;
}
inline void CFriendMessages_SendMessage_Request::set_echo_to_sender(bool value) {
  _internal_set_echo_to_sender(value);
  // @@protoc_insertion_point(field_set:CFriendMessages_SendMessage_Request.echo_to_sender)
}

// optional bool low_priority = 6;
inline bool CFriendMessages_SendMessage_Request::_internal_has_low_priority() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CFriendMessages_SendMessage_Request::has_low_priority() const {
  return _internal_has_low_priority();
}
inline void CFriendMessages_SendMessage_Request::clear_low_priority() {
  low_priority_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool CFriendMessages_SendMessage_Request::_internal_low_priority() const {
  return low_priority_;
}
inline bool CFriendMessages_SendMessage_Request::low_priority() const {
  // @@protoc_insertion_point(field_get:CFriendMessages_SendMessage_Request.low_priority)
  return _internal_low_priority();
}
inline void CFriendMessages_SendMessage_Request::_internal_set_low_priority(bool value) {
  _has_bits_[0] |= 0x00000040u;
  low_priority_ = value;
}
inline void CFriendMessages_SendMessage_Request::set_low_priority(bool value) {
  _internal_set_low_priority(value);
  // @@protoc_insertion_point(field_set:CFriendMessages_SendMessage_Request.low_priority)
}

// optional string client_message_id = 8;
inline bool CFriendMessages_SendMessage_Request::_internal_has_client_message_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CFriendMessages_SendMessage_Request::has_client_message_id() const {
  return _internal_has_client_message_id();
}
inline void CFriendMessages_SendMessage_Request::clear_client_message_id() {
  client_message_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CFriendMessages_SendMessage_Request::client_message_id() const {
  // @@protoc_insertion_point(field_get:CFriendMessages_SendMessage_Request.client_message_id)
  return _internal_client_message_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CFriendMessages_SendMessage_Request::set_client_message_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 client_message_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CFriendMessages_SendMessage_Request.client_message_id)
}
inline std::string* CFriendMessages_SendMessage_Request::mutable_client_message_id() {
  std::string* _s = _internal_mutable_client_message_id();
  // @@protoc_insertion_point(field_mutable:CFriendMessages_SendMessage_Request.client_message_id)
  return _s;
}
inline const std::string& CFriendMessages_SendMessage_Request::_internal_client_message_id() const {
  return client_message_id_.Get();
}
inline void CFriendMessages_SendMessage_Request::_internal_set_client_message_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  client_message_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CFriendMessages_SendMessage_Request::_internal_mutable_client_message_id() {
  _has_bits_[0] |= 0x00000002u;
  return client_message_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CFriendMessages_SendMessage_Request::release_client_message_id() {
  // @@protoc_insertion_point(field_release:CFriendMessages_SendMessage_Request.client_message_id)
  if (!_internal_has_client_message_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = client_message_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (client_message_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    client_message_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CFriendMessages_SendMessage_Request::set_allocated_client_message_id(std::string* client_message_id) {
  if (client_message_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  client_message_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_message_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (client_message_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    client_message_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CFriendMessages_SendMessage_Request.client_message_id)
}

// -------------------------------------------------------------------

// CFriendMessages_SendMessage_Response

// optional string modified_message = 1;
inline bool CFriendMessages_SendMessage_Response::_internal_has_modified_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CFriendMessages_SendMessage_Response::has_modified_message() const {
  return _internal_has_modified_message();
}
inline void CFriendMessages_SendMessage_Response::clear_modified_message() {
  modified_message_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CFriendMessages_SendMessage_Response::modified_message() const {
  // @@protoc_insertion_point(field_get:CFriendMessages_SendMessage_Response.modified_message)
  return _internal_modified_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CFriendMessages_SendMessage_Response::set_modified_message(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 modified_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CFriendMessages_SendMessage_Response.modified_message)
}
inline std::string* CFriendMessages_SendMessage_Response::mutable_modified_message() {
  std::string* _s = _internal_mutable_modified_message();
  // @@protoc_insertion_point(field_mutable:CFriendMessages_SendMessage_Response.modified_message)
  return _s;
}
inline const std::string& CFriendMessages_SendMessage_Response::_internal_modified_message() const {
  return modified_message_.Get();
}
inline void CFriendMessages_SendMessage_Response::_internal_set_modified_message(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  modified_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CFriendMessages_SendMessage_Response::_internal_mutable_modified_message() {
  _has_bits_[0] |= 0x00000001u;
  return modified_message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CFriendMessages_SendMessage_Response::release_modified_message() {
  // @@protoc_insertion_point(field_release:CFriendMessages_SendMessage_Response.modified_message)
  if (!_internal_has_modified_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = modified_message_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (modified_message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    modified_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CFriendMessages_SendMessage_Response::set_allocated_modified_message(std::string* modified_message) {
  if (modified_message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  modified_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), modified_message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (modified_message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    modified_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CFriendMessages_SendMessage_Response.modified_message)
}

// optional uint32 server_timestamp = 2;
inline bool CFriendMessages_SendMessage_Response::_internal_has_server_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CFriendMessages_SendMessage_Response::has_server_timestamp() const {
  return _internal_has_server_timestamp();
}
inline void CFriendMessages_SendMessage_Response::clear_server_timestamp() {
  server_timestamp_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CFriendMessages_SendMessage_Response::_internal_server_timestamp() const {
  return server_timestamp_;
}
inline uint32_t CFriendMessages_SendMessage_Response::server_timestamp() const {
  // @@protoc_insertion_point(field_get:CFriendMessages_SendMessage_Response.server_timestamp)
  return _internal_server_timestamp();
}
inline void CFriendMessages_SendMessage_Response::_internal_set_server_timestamp(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  server_timestamp_ = value;
}
inline void CFriendMessages_SendMessage_Response::set_server_timestamp(uint32_t value) {
  _internal_set_server_timestamp(value);
  // @@protoc_insertion_point(field_set:CFriendMessages_SendMessage_Response.server_timestamp)
}

// optional uint32 ordinal = 3;
inline bool CFriendMessages_SendMessage_Response::_internal_has_ordinal() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CFriendMessages_SendMessage_Response::has_ordinal() const {
  return _internal_has_ordinal();
}
inline void CFriendMessages_SendMessage_Response::clear_ordinal() {
  ordinal_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CFriendMessages_SendMessage_Response::_internal_ordinal() const {
  return ordinal_;
}
inline uint32_t CFriendMessages_SendMessage_Response::ordinal() const {
  // @@protoc_insertion_point(field_get:CFriendMessages_SendMessage_Response.ordinal)
  return _internal_ordinal();
}
inline void CFriendMessages_SendMessage_Response::_internal_set_ordinal(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  ordinal_ = value;
}
inline void CFriendMessages_SendMessage_Response::set_ordinal(uint32_t value) {
  _internal_set_ordinal(value);
  // @@protoc_insertion_point(field_set:CFriendMessages_SendMessage_Response.ordinal)
}

// optional string message_without_bb_code = 4;
inline bool CFriendMessages_SendMessage_Response::_internal_has_message_without_bb_code() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CFriendMessages_SendMessage_Response::has_message_without_bb_code() const {
  return _internal_has_message_without_bb_code();
}
inline void CFriendMessages_SendMessage_Response::clear_message_without_bb_code() {
  message_without_bb_code_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CFriendMessages_SendMessage_Response::message_without_bb_code() const {
  // @@protoc_insertion_point(field_get:CFriendMessages_SendMessage_Response.message_without_bb_code)
  return _internal_message_without_bb_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CFriendMessages_SendMessage_Response::set_message_without_bb_code(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 message_without_bb_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CFriendMessages_SendMessage_Response.message_without_bb_code)
}
inline std::string* CFriendMessages_SendMessage_Response::mutable_message_without_bb_code() {
  std::string* _s = _internal_mutable_message_without_bb_code();
  // @@protoc_insertion_point(field_mutable:CFriendMessages_SendMessage_Response.message_without_bb_code)
  return _s;
}
inline const std::string& CFriendMessages_SendMessage_Response::_internal_message_without_bb_code() const {
  return message_without_bb_code_.Get();
}
inline void CFriendMessages_SendMessage_Response::_internal_set_message_without_bb_code(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  message_without_bb_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CFriendMessages_SendMessage_Response::_internal_mutable_message_without_bb_code() {
  _has_bits_[0] |= 0x00000002u;
  return message_without_bb_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CFriendMessages_SendMessage_Response::release_message_without_bb_code() {
  // @@protoc_insertion_point(field_release:CFriendMessages_SendMessage_Response.message_without_bb_code)
  if (!_internal_has_message_without_bb_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = message_without_bb_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_without_bb_code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    message_without_bb_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CFriendMessages_SendMessage_Response::set_allocated_message_without_bb_code(std::string* message_without_bb_code) {
  if (message_without_bb_code != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  message_without_bb_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message_without_bb_code,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_without_bb_code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    message_without_bb_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CFriendMessages_SendMessage_Response.message_without_bb_code)
}

// -------------------------------------------------------------------

// CFriendMessages_AckMessage_Notification

// optional fixed64 steamid_partner = 1;
inline bool CFriendMessages_AckMessage_Notification::_internal_has_steamid_partner() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CFriendMessages_AckMessage_Notification::has_steamid_partner() const {
  return _internal_has_steamid_partner();
}
inline void CFriendMessages_AckMessage_Notification::clear_steamid_partner() {
  steamid_partner_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CFriendMessages_AckMessage_Notification::_internal_steamid_partner() const {
  return steamid_partner_;
}
inline uint64_t CFriendMessages_AckMessage_Notification::steamid_partner() const {
  // @@protoc_insertion_point(field_get:CFriendMessages_AckMessage_Notification.steamid_partner)
  return _internal_steamid_partner();
}
inline void CFriendMessages_AckMessage_Notification::_internal_set_steamid_partner(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_partner_ = value;
}
inline void CFriendMessages_AckMessage_Notification::set_steamid_partner(uint64_t value) {
  _internal_set_steamid_partner(value);
  // @@protoc_insertion_point(field_set:CFriendMessages_AckMessage_Notification.steamid_partner)
}

// optional uint32 timestamp = 2;
inline bool CFriendMessages_AckMessage_Notification::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CFriendMessages_AckMessage_Notification::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void CFriendMessages_AckMessage_Notification::clear_timestamp() {
  timestamp_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CFriendMessages_AckMessage_Notification::_internal_timestamp() const {
  return timestamp_;
}
inline uint32_t CFriendMessages_AckMessage_Notification::timestamp() const {
  // @@protoc_insertion_point(field_get:CFriendMessages_AckMessage_Notification.timestamp)
  return _internal_timestamp();
}
inline void CFriendMessages_AckMessage_Notification::_internal_set_timestamp(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  timestamp_ = value;
}
inline void CFriendMessages_AckMessage_Notification::set_timestamp(uint32_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:CFriendMessages_AckMessage_Notification.timestamp)
}

// -------------------------------------------------------------------

// CFriendMessages_IsInFriendsUIBeta_Request

// optional fixed64 steamid = 1;
inline bool CFriendMessages_IsInFriendsUIBeta_Request::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CFriendMessages_IsInFriendsUIBeta_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CFriendMessages_IsInFriendsUIBeta_Request::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CFriendMessages_IsInFriendsUIBeta_Request::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CFriendMessages_IsInFriendsUIBeta_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CFriendMessages_IsInFriendsUIBeta_Request.steamid)
  return _internal_steamid();
}
inline void CFriendMessages_IsInFriendsUIBeta_Request::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
}
inline void CFriendMessages_IsInFriendsUIBeta_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CFriendMessages_IsInFriendsUIBeta_Request.steamid)
}

// -------------------------------------------------------------------

// CFriendMessages_IsInFriendsUIBeta_Response

// optional bool online_in_friendsui = 1;
inline bool CFriendMessages_IsInFriendsUIBeta_Response::_internal_has_online_in_friendsui() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CFriendMessages_IsInFriendsUIBeta_Response::has_online_in_friendsui() const {
  return _internal_has_online_in_friendsui();
}
inline void CFriendMessages_IsInFriendsUIBeta_Response::clear_online_in_friendsui() {
  online_in_friendsui_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CFriendMessages_IsInFriendsUIBeta_Response::_internal_online_in_friendsui() const {
  return online_in_friendsui_;
}
inline bool CFriendMessages_IsInFriendsUIBeta_Response::online_in_friendsui() const {
  // @@protoc_insertion_point(field_get:CFriendMessages_IsInFriendsUIBeta_Response.online_in_friendsui)
  return _internal_online_in_friendsui();
}
inline void CFriendMessages_IsInFriendsUIBeta_Response::_internal_set_online_in_friendsui(bool value) {
  _has_bits_[0] |= 0x00000001u;
  online_in_friendsui_ = value;
}
inline void CFriendMessages_IsInFriendsUIBeta_Response::set_online_in_friendsui(bool value) {
  _internal_set_online_in_friendsui(value);
  // @@protoc_insertion_point(field_set:CFriendMessages_IsInFriendsUIBeta_Response.online_in_friendsui)
}

// optional bool has_used_friendsui = 2;
inline bool CFriendMessages_IsInFriendsUIBeta_Response::_internal_has_has_used_friendsui() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CFriendMessages_IsInFriendsUIBeta_Response::has_has_used_friendsui() const {
  return _internal_has_has_used_friendsui();
}
inline void CFriendMessages_IsInFriendsUIBeta_Response::clear_has_used_friendsui() {
  has_used_friendsui_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CFriendMessages_IsInFriendsUIBeta_Response::_internal_has_used_friendsui() const {
  return has_used_friendsui_;
}
inline bool CFriendMessages_IsInFriendsUIBeta_Response::has_used_friendsui() const {
  // @@protoc_insertion_point(field_get:CFriendMessages_IsInFriendsUIBeta_Response.has_used_friendsui)
  return _internal_has_used_friendsui();
}
inline void CFriendMessages_IsInFriendsUIBeta_Response::_internal_set_has_used_friendsui(bool value) {
  _has_bits_[0] |= 0x00000002u;
  has_used_friendsui_ = value;
}
inline void CFriendMessages_IsInFriendsUIBeta_Response::set_has_used_friendsui(bool value) {
  _internal_set_has_used_friendsui(value);
  // @@protoc_insertion_point(field_set:CFriendMessages_IsInFriendsUIBeta_Response.has_used_friendsui)
}

// -------------------------------------------------------------------

// CFriendMessages_UpdateMessageReaction_Request

// optional fixed64 steamid = 1;
inline bool CFriendMessages_UpdateMessageReaction_Request::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CFriendMessages_UpdateMessageReaction_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CFriendMessages_UpdateMessageReaction_Request::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CFriendMessages_UpdateMessageReaction_Request::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CFriendMessages_UpdateMessageReaction_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CFriendMessages_UpdateMessageReaction_Request.steamid)
  return _internal_steamid();
}
inline void CFriendMessages_UpdateMessageReaction_Request::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  steamid_ = value;
}
inline void CFriendMessages_UpdateMessageReaction_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CFriendMessages_UpdateMessageReaction_Request.steamid)
}

// optional uint32 server_timestamp = 2;
inline bool CFriendMessages_UpdateMessageReaction_Request::_internal_has_server_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CFriendMessages_UpdateMessageReaction_Request::has_server_timestamp() const {
  return _internal_has_server_timestamp();
}
inline void CFriendMessages_UpdateMessageReaction_Request::clear_server_timestamp() {
  server_timestamp_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CFriendMessages_UpdateMessageReaction_Request::_internal_server_timestamp() const {
  return server_timestamp_;
}
inline uint32_t CFriendMessages_UpdateMessageReaction_Request::server_timestamp() const {
  // @@protoc_insertion_point(field_get:CFriendMessages_UpdateMessageReaction_Request.server_timestamp)
  return _internal_server_timestamp();
}
inline void CFriendMessages_UpdateMessageReaction_Request::_internal_set_server_timestamp(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  server_timestamp_ = value;
}
inline void CFriendMessages_UpdateMessageReaction_Request::set_server_timestamp(uint32_t value) {
  _internal_set_server_timestamp(value);
  // @@protoc_insertion_point(field_set:CFriendMessages_UpdateMessageReaction_Request.server_timestamp)
}

// optional uint32 ordinal = 3;
inline bool CFriendMessages_UpdateMessageReaction_Request::_internal_has_ordinal() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CFriendMessages_UpdateMessageReaction_Request::has_ordinal() const {
  return _internal_has_ordinal();
}
inline void CFriendMessages_UpdateMessageReaction_Request::clear_ordinal() {
  ordinal_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CFriendMessages_UpdateMessageReaction_Request::_internal_ordinal() const {
  return ordinal_;
}
inline uint32_t CFriendMessages_UpdateMessageReaction_Request::ordinal() const {
  // @@protoc_insertion_point(field_get:CFriendMessages_UpdateMessageReaction_Request.ordinal)
  return _internal_ordinal();
}
inline void CFriendMessages_UpdateMessageReaction_Request::_internal_set_ordinal(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  ordinal_ = value;
}
inline void CFriendMessages_UpdateMessageReaction_Request::set_ordinal(uint32_t value) {
  _internal_set_ordinal(value);
  // @@protoc_insertion_point(field_set:CFriendMessages_UpdateMessageReaction_Request.ordinal)
}

// optional .EMessageReactionType reaction_type = 4 [default = k_EMessageReactionType_Invalid];
inline bool CFriendMessages_UpdateMessageReaction_Request::_internal_has_reaction_type() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CFriendMessages_UpdateMessageReaction_Request::has_reaction_type() const {
  return _internal_has_reaction_type();
}
inline void CFriendMessages_UpdateMessageReaction_Request::clear_reaction_type() {
  reaction_type_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::EMessageReactionType CFriendMessages_UpdateMessageReaction_Request::_internal_reaction_type() const {
  return static_cast< ::EMessageReactionType >(reaction_type_);
}
inline ::EMessageReactionType CFriendMessages_UpdateMessageReaction_Request::reaction_type() const {
  // @@protoc_insertion_point(field_get:CFriendMessages_UpdateMessageReaction_Request.reaction_type)
  return _internal_reaction_type();
}
inline void CFriendMessages_UpdateMessageReaction_Request::_internal_set_reaction_type(::EMessageReactionType value) {
  assert(::EMessageReactionType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  reaction_type_ = value;
}
inline void CFriendMessages_UpdateMessageReaction_Request::set_reaction_type(::EMessageReactionType value) {
  _internal_set_reaction_type(value);
  // @@protoc_insertion_point(field_set:CFriendMessages_UpdateMessageReaction_Request.reaction_type)
}

// optional string reaction = 5;
inline bool CFriendMessages_UpdateMessageReaction_Request::_internal_has_reaction() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CFriendMessages_UpdateMessageReaction_Request::has_reaction() const {
  return _internal_has_reaction();
}
inline void CFriendMessages_UpdateMessageReaction_Request::clear_reaction() {
  reaction_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CFriendMessages_UpdateMessageReaction_Request::reaction() const {
  // @@protoc_insertion_point(field_get:CFriendMessages_UpdateMessageReaction_Request.reaction)
  return _internal_reaction();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CFriendMessages_UpdateMessageReaction_Request::set_reaction(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 reaction_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CFriendMessages_UpdateMessageReaction_Request.reaction)
}
inline std::string* CFriendMessages_UpdateMessageReaction_Request::mutable_reaction() {
  std::string* _s = _internal_mutable_reaction();
  // @@protoc_insertion_point(field_mutable:CFriendMessages_UpdateMessageReaction_Request.reaction)
  return _s;
}
inline const std::string& CFriendMessages_UpdateMessageReaction_Request::_internal_reaction() const {
  return reaction_.Get();
}
inline void CFriendMessages_UpdateMessageReaction_Request::_internal_set_reaction(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  reaction_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CFriendMessages_UpdateMessageReaction_Request::_internal_mutable_reaction() {
  _has_bits_[0] |= 0x00000001u;
  return reaction_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CFriendMessages_UpdateMessageReaction_Request::release_reaction() {
  // @@protoc_insertion_point(field_release:CFriendMessages_UpdateMessageReaction_Request.reaction)
  if (!_internal_has_reaction()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = reaction_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (reaction_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    reaction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CFriendMessages_UpdateMessageReaction_Request::set_allocated_reaction(std::string* reaction) {
  if (reaction != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  reaction_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reaction,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (reaction_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    reaction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CFriendMessages_UpdateMessageReaction_Request.reaction)
}

// optional bool is_add = 6;
inline bool CFriendMessages_UpdateMessageReaction_Request::_internal_has_is_add() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CFriendMessages_UpdateMessageReaction_Request::has_is_add() const {
  return _internal_has_is_add();
}
inline void CFriendMessages_UpdateMessageReaction_Request::clear_is_add() {
  is_add_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CFriendMessages_UpdateMessageReaction_Request::_internal_is_add() const {
  return is_add_;
}
inline bool CFriendMessages_UpdateMessageReaction_Request::is_add() const {
  // @@protoc_insertion_point(field_get:CFriendMessages_UpdateMessageReaction_Request.is_add)
  return _internal_is_add();
}
inline void CFriendMessages_UpdateMessageReaction_Request::_internal_set_is_add(bool value) {
  _has_bits_[0] |= 0x00000020u;
  is_add_ = value;
}
inline void CFriendMessages_UpdateMessageReaction_Request::set_is_add(bool value) {
  _internal_set_is_add(value);
  // @@protoc_insertion_point(field_set:CFriendMessages_UpdateMessageReaction_Request.is_add)
}

// -------------------------------------------------------------------

// CFriendMessages_UpdateMessageReaction_Response

// repeated uint32 reactors = 1;
inline int CFriendMessages_UpdateMessageReaction_Response::_internal_reactors_size() const {
  return reactors_.size();
}
inline int CFriendMessages_UpdateMessageReaction_Response::reactors_size() const {
  return _internal_reactors_size();
}
inline void CFriendMessages_UpdateMessageReaction_Response::clear_reactors() {
  reactors_.Clear();
}
inline uint32_t CFriendMessages_UpdateMessageReaction_Response::_internal_reactors(int index) const {
  return reactors_.Get(index);
}
inline uint32_t CFriendMessages_UpdateMessageReaction_Response::reactors(int index) const {
  // @@protoc_insertion_point(field_get:CFriendMessages_UpdateMessageReaction_Response.reactors)
  return _internal_reactors(index);
}
inline void CFriendMessages_UpdateMessageReaction_Response::set_reactors(int index, uint32_t value) {
  reactors_.Set(index, value);
  // @@protoc_insertion_point(field_set:CFriendMessages_UpdateMessageReaction_Response.reactors)
}
inline void CFriendMessages_UpdateMessageReaction_Response::_internal_add_reactors(uint32_t value) {
  reactors_.Add(value);
}
inline void CFriendMessages_UpdateMessageReaction_Response::add_reactors(uint32_t value) {
  _internal_add_reactors(value);
  // @@protoc_insertion_point(field_add:CFriendMessages_UpdateMessageReaction_Response.reactors)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CFriendMessages_UpdateMessageReaction_Response::_internal_reactors() const {
  return reactors_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CFriendMessages_UpdateMessageReaction_Response::reactors() const {
  // @@protoc_insertion_point(field_list:CFriendMessages_UpdateMessageReaction_Response.reactors)
  return _internal_reactors();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CFriendMessages_UpdateMessageReaction_Response::_internal_mutable_reactors() {
  return &reactors_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CFriendMessages_UpdateMessageReaction_Response::mutable_reactors() {
  // @@protoc_insertion_point(field_mutable_list:CFriendMessages_UpdateMessageReaction_Response.reactors)
  return _internal_mutable_reactors();
}

// -------------------------------------------------------------------

// CFriendMessages_IncomingMessage_Notification

// optional fixed64 steamid_friend = 1;
inline bool CFriendMessages_IncomingMessage_Notification::_internal_has_steamid_friend() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CFriendMessages_IncomingMessage_Notification::has_steamid_friend() const {
  return _internal_has_steamid_friend();
}
inline void CFriendMessages_IncomingMessage_Notification::clear_steamid_friend() {
  steamid_friend_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CFriendMessages_IncomingMessage_Notification::_internal_steamid_friend() const {
  return steamid_friend_;
}
inline uint64_t CFriendMessages_IncomingMessage_Notification::steamid_friend() const {
  // @@protoc_insertion_point(field_get:CFriendMessages_IncomingMessage_Notification.steamid_friend)
  return _internal_steamid_friend();
}
inline void CFriendMessages_IncomingMessage_Notification::_internal_set_steamid_friend(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  steamid_friend_ = value;
}
inline void CFriendMessages_IncomingMessage_Notification::set_steamid_friend(uint64_t value) {
  _internal_set_steamid_friend(value);
  // @@protoc_insertion_point(field_set:CFriendMessages_IncomingMessage_Notification.steamid_friend)
}

// optional int32 chat_entry_type = 2;
inline bool CFriendMessages_IncomingMessage_Notification::_internal_has_chat_entry_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CFriendMessages_IncomingMessage_Notification::has_chat_entry_type() const {
  return _internal_has_chat_entry_type();
}
inline void CFriendMessages_IncomingMessage_Notification::clear_chat_entry_type() {
  chat_entry_type_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t CFriendMessages_IncomingMessage_Notification::_internal_chat_entry_type() const {
  return chat_entry_type_;
}
inline int32_t CFriendMessages_IncomingMessage_Notification::chat_entry_type() const {
  // @@protoc_insertion_point(field_get:CFriendMessages_IncomingMessage_Notification.chat_entry_type)
  return _internal_chat_entry_type();
}
inline void CFriendMessages_IncomingMessage_Notification::_internal_set_chat_entry_type(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  chat_entry_type_ = value;
}
inline void CFriendMessages_IncomingMessage_Notification::set_chat_entry_type(int32_t value) {
  _internal_set_chat_entry_type(value);
  // @@protoc_insertion_point(field_set:CFriendMessages_IncomingMessage_Notification.chat_entry_type)
}

// optional bool from_limited_account = 3;
inline bool CFriendMessages_IncomingMessage_Notification::_internal_has_from_limited_account() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CFriendMessages_IncomingMessage_Notification::has_from_limited_account() const {
  return _internal_has_from_limited_account();
}
inline void CFriendMessages_IncomingMessage_Notification::clear_from_limited_account() {
  from_limited_account_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool CFriendMessages_IncomingMessage_Notification::_internal_from_limited_account() const {
  return from_limited_account_;
}
inline bool CFriendMessages_IncomingMessage_Notification::from_limited_account() const {
  // @@protoc_insertion_point(field_get:CFriendMessages_IncomingMessage_Notification.from_limited_account)
  return _internal_from_limited_account();
}
inline void CFriendMessages_IncomingMessage_Notification::_internal_set_from_limited_account(bool value) {
  _has_bits_[0] |= 0x00000040u;
  from_limited_account_ = value;
}
inline void CFriendMessages_IncomingMessage_Notification::set_from_limited_account(bool value) {
  _internal_set_from_limited_account(value);
  // @@protoc_insertion_point(field_set:CFriendMessages_IncomingMessage_Notification.from_limited_account)
}

// optional string message = 4;
inline bool CFriendMessages_IncomingMessage_Notification::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CFriendMessages_IncomingMessage_Notification::has_message() const {
  return _internal_has_message();
}
inline void CFriendMessages_IncomingMessage_Notification::clear_message() {
  message_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CFriendMessages_IncomingMessage_Notification::message() const {
  // @@protoc_insertion_point(field_get:CFriendMessages_IncomingMessage_Notification.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CFriendMessages_IncomingMessage_Notification::set_message(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CFriendMessages_IncomingMessage_Notification.message)
}
inline std::string* CFriendMessages_IncomingMessage_Notification::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:CFriendMessages_IncomingMessage_Notification.message)
  return _s;
}
inline const std::string& CFriendMessages_IncomingMessage_Notification::_internal_message() const {
  return message_.Get();
}
inline void CFriendMessages_IncomingMessage_Notification::_internal_set_message(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CFriendMessages_IncomingMessage_Notification::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CFriendMessages_IncomingMessage_Notification::release_message() {
  // @@protoc_insertion_point(field_release:CFriendMessages_IncomingMessage_Notification.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = message_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CFriendMessages_IncomingMessage_Notification::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CFriendMessages_IncomingMessage_Notification.message)
}

// optional fixed32 rtime32_server_timestamp = 5;
inline bool CFriendMessages_IncomingMessage_Notification::_internal_has_rtime32_server_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CFriendMessages_IncomingMessage_Notification::has_rtime32_server_timestamp() const {
  return _internal_has_rtime32_server_timestamp();
}
inline void CFriendMessages_IncomingMessage_Notification::clear_rtime32_server_timestamp() {
  rtime32_server_timestamp_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CFriendMessages_IncomingMessage_Notification::_internal_rtime32_server_timestamp() const {
  return rtime32_server_timestamp_;
}
inline uint32_t CFriendMessages_IncomingMessage_Notification::rtime32_server_timestamp() const {
  // @@protoc_insertion_point(field_get:CFriendMessages_IncomingMessage_Notification.rtime32_server_timestamp)
  return _internal_rtime32_server_timestamp();
}
inline void CFriendMessages_IncomingMessage_Notification::_internal_set_rtime32_server_timestamp(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  rtime32_server_timestamp_ = value;
}
inline void CFriendMessages_IncomingMessage_Notification::set_rtime32_server_timestamp(uint32_t value) {
  _internal_set_rtime32_server_timestamp(value);
  // @@protoc_insertion_point(field_set:CFriendMessages_IncomingMessage_Notification.rtime32_server_timestamp)
}

// optional uint32 ordinal = 6;
inline bool CFriendMessages_IncomingMessage_Notification::_internal_has_ordinal() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CFriendMessages_IncomingMessage_Notification::has_ordinal() const {
  return _internal_has_ordinal();
}
inline void CFriendMessages_IncomingMessage_Notification::clear_ordinal() {
  ordinal_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CFriendMessages_IncomingMessage_Notification::_internal_ordinal() const {
  return ordinal_;
}
inline uint32_t CFriendMessages_IncomingMessage_Notification::ordinal() const {
  // @@protoc_insertion_point(field_get:CFriendMessages_IncomingMessage_Notification.ordinal)
  return _internal_ordinal();
}
inline void CFriendMessages_IncomingMessage_Notification::_internal_set_ordinal(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  ordinal_ = value;
}
inline void CFriendMessages_IncomingMessage_Notification::set_ordinal(uint32_t value) {
  _internal_set_ordinal(value);
  // @@protoc_insertion_point(field_set:CFriendMessages_IncomingMessage_Notification.ordinal)
}

// optional bool local_echo = 7;
inline bool CFriendMessages_IncomingMessage_Notification::_internal_has_local_echo() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CFriendMessages_IncomingMessage_Notification::has_local_echo() const {
  return _internal_has_local_echo();
}
inline void CFriendMessages_IncomingMessage_Notification::clear_local_echo() {
  local_echo_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CFriendMessages_IncomingMessage_Notification::_internal_local_echo() const {
  return local_echo_;
}
inline bool CFriendMessages_IncomingMessage_Notification::local_echo() const {
  // @@protoc_insertion_point(field_get:CFriendMessages_IncomingMessage_Notification.local_echo)
  return _internal_local_echo();
}
inline void CFriendMessages_IncomingMessage_Notification::_internal_set_local_echo(bool value) {
  _has_bits_[0] |= 0x00000080u;
  local_echo_ = value;
}
inline void CFriendMessages_IncomingMessage_Notification::set_local_echo(bool value) {
  _internal_set_local_echo(value);
  // @@protoc_insertion_point(field_set:CFriendMessages_IncomingMessage_Notification.local_echo)
}

// optional string message_no_bbcode = 8;
inline bool CFriendMessages_IncomingMessage_Notification::_internal_has_message_no_bbcode() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CFriendMessages_IncomingMessage_Notification::has_message_no_bbcode() const {
  return _internal_has_message_no_bbcode();
}
inline void CFriendMessages_IncomingMessage_Notification::clear_message_no_bbcode() {
  message_no_bbcode_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CFriendMessages_IncomingMessage_Notification::message_no_bbcode() const {
  // @@protoc_insertion_point(field_get:CFriendMessages_IncomingMessage_Notification.message_no_bbcode)
  return _internal_message_no_bbcode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CFriendMessages_IncomingMessage_Notification::set_message_no_bbcode(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 message_no_bbcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CFriendMessages_IncomingMessage_Notification.message_no_bbcode)
}
inline std::string* CFriendMessages_IncomingMessage_Notification::mutable_message_no_bbcode() {
  std::string* _s = _internal_mutable_message_no_bbcode();
  // @@protoc_insertion_point(field_mutable:CFriendMessages_IncomingMessage_Notification.message_no_bbcode)
  return _s;
}
inline const std::string& CFriendMessages_IncomingMessage_Notification::_internal_message_no_bbcode() const {
  return message_no_bbcode_.Get();
}
inline void CFriendMessages_IncomingMessage_Notification::_internal_set_message_no_bbcode(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  message_no_bbcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CFriendMessages_IncomingMessage_Notification::_internal_mutable_message_no_bbcode() {
  _has_bits_[0] |= 0x00000002u;
  return message_no_bbcode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CFriendMessages_IncomingMessage_Notification::release_message_no_bbcode() {
  // @@protoc_insertion_point(field_release:CFriendMessages_IncomingMessage_Notification.message_no_bbcode)
  if (!_internal_has_message_no_bbcode()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = message_no_bbcode_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_no_bbcode_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    message_no_bbcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CFriendMessages_IncomingMessage_Notification::set_allocated_message_no_bbcode(std::string* message_no_bbcode) {
  if (message_no_bbcode != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  message_no_bbcode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message_no_bbcode,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_no_bbcode_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    message_no_bbcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CFriendMessages_IncomingMessage_Notification.message_no_bbcode)
}

// optional bool low_priority = 9;
inline bool CFriendMessages_IncomingMessage_Notification::_internal_has_low_priority() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CFriendMessages_IncomingMessage_Notification::has_low_priority() const {
  return _internal_has_low_priority();
}
inline void CFriendMessages_IncomingMessage_Notification::clear_low_priority() {
  low_priority_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool CFriendMessages_IncomingMessage_Notification::_internal_low_priority() const {
  return low_priority_;
}
inline bool CFriendMessages_IncomingMessage_Notification::low_priority() const {
  // @@protoc_insertion_point(field_get:CFriendMessages_IncomingMessage_Notification.low_priority)
  return _internal_low_priority();
}
inline void CFriendMessages_IncomingMessage_Notification::_internal_set_low_priority(bool value) {
  _has_bits_[0] |= 0x00000100u;
  low_priority_ = value;
}
inline void CFriendMessages_IncomingMessage_Notification::set_low_priority(bool value) {
  _internal_set_low_priority(value);
  // @@protoc_insertion_point(field_set:CFriendMessages_IncomingMessage_Notification.low_priority)
}

// -------------------------------------------------------------------

// CFriendMessages_MessageReaction_Notification

// optional fixed64 steamid_friend = 1;
inline bool CFriendMessages_MessageReaction_Notification::_internal_has_steamid_friend() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CFriendMessages_MessageReaction_Notification::has_steamid_friend() const {
  return _internal_has_steamid_friend();
}
inline void CFriendMessages_MessageReaction_Notification::clear_steamid_friend() {
  steamid_friend_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CFriendMessages_MessageReaction_Notification::_internal_steamid_friend() const {
  return steamid_friend_;
}
inline uint64_t CFriendMessages_MessageReaction_Notification::steamid_friend() const {
  // @@protoc_insertion_point(field_get:CFriendMessages_MessageReaction_Notification.steamid_friend)
  return _internal_steamid_friend();
}
inline void CFriendMessages_MessageReaction_Notification::_internal_set_steamid_friend(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  steamid_friend_ = value;
}
inline void CFriendMessages_MessageReaction_Notification::set_steamid_friend(uint64_t value) {
  _internal_set_steamid_friend(value);
  // @@protoc_insertion_point(field_set:CFriendMessages_MessageReaction_Notification.steamid_friend)
}

// optional uint32 server_timestamp = 2;
inline bool CFriendMessages_MessageReaction_Notification::_internal_has_server_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CFriendMessages_MessageReaction_Notification::has_server_timestamp() const {
  return _internal_has_server_timestamp();
}
inline void CFriendMessages_MessageReaction_Notification::clear_server_timestamp() {
  server_timestamp_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CFriendMessages_MessageReaction_Notification::_internal_server_timestamp() const {
  return server_timestamp_;
}
inline uint32_t CFriendMessages_MessageReaction_Notification::server_timestamp() const {
  // @@protoc_insertion_point(field_get:CFriendMessages_MessageReaction_Notification.server_timestamp)
  return _internal_server_timestamp();
}
inline void CFriendMessages_MessageReaction_Notification::_internal_set_server_timestamp(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  server_timestamp_ = value;
}
inline void CFriendMessages_MessageReaction_Notification::set_server_timestamp(uint32_t value) {
  _internal_set_server_timestamp(value);
  // @@protoc_insertion_point(field_set:CFriendMessages_MessageReaction_Notification.server_timestamp)
}

// optional uint32 ordinal = 3;
inline bool CFriendMessages_MessageReaction_Notification::_internal_has_ordinal() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CFriendMessages_MessageReaction_Notification::has_ordinal() const {
  return _internal_has_ordinal();
}
inline void CFriendMessages_MessageReaction_Notification::clear_ordinal() {
  ordinal_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CFriendMessages_MessageReaction_Notification::_internal_ordinal() const {
  return ordinal_;
}
inline uint32_t CFriendMessages_MessageReaction_Notification::ordinal() const {
  // @@protoc_insertion_point(field_get:CFriendMessages_MessageReaction_Notification.ordinal)
  return _internal_ordinal();
}
inline void CFriendMessages_MessageReaction_Notification::_internal_set_ordinal(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  ordinal_ = value;
}
inline void CFriendMessages_MessageReaction_Notification::set_ordinal(uint32_t value) {
  _internal_set_ordinal(value);
  // @@protoc_insertion_point(field_set:CFriendMessages_MessageReaction_Notification.ordinal)
}

// optional fixed64 reactor = 4;
inline bool CFriendMessages_MessageReaction_Notification::_internal_has_reactor() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CFriendMessages_MessageReaction_Notification::has_reactor() const {
  return _internal_has_reactor();
}
inline void CFriendMessages_MessageReaction_Notification::clear_reactor() {
  reactor_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000010u;
}
inline uint64_t CFriendMessages_MessageReaction_Notification::_internal_reactor() const {
  return reactor_;
}
inline uint64_t CFriendMessages_MessageReaction_Notification::reactor() const {
  // @@protoc_insertion_point(field_get:CFriendMessages_MessageReaction_Notification.reactor)
  return _internal_reactor();
}
inline void CFriendMessages_MessageReaction_Notification::_internal_set_reactor(uint64_t value) {
  _has_bits_[0] |= 0x00000010u;
  reactor_ = value;
}
inline void CFriendMessages_MessageReaction_Notification::set_reactor(uint64_t value) {
  _internal_set_reactor(value);
  // @@protoc_insertion_point(field_set:CFriendMessages_MessageReaction_Notification.reactor)
}

// optional .EMessageReactionType reaction_type = 5 [default = k_EMessageReactionType_Invalid];
inline bool CFriendMessages_MessageReaction_Notification::_internal_has_reaction_type() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CFriendMessages_MessageReaction_Notification::has_reaction_type() const {
  return _internal_has_reaction_type();
}
inline void CFriendMessages_MessageReaction_Notification::clear_reaction_type() {
  reaction_type_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::EMessageReactionType CFriendMessages_MessageReaction_Notification::_internal_reaction_type() const {
  return static_cast< ::EMessageReactionType >(reaction_type_);
}
inline ::EMessageReactionType CFriendMessages_MessageReaction_Notification::reaction_type() const {
  // @@protoc_insertion_point(field_get:CFriendMessages_MessageReaction_Notification.reaction_type)
  return _internal_reaction_type();
}
inline void CFriendMessages_MessageReaction_Notification::_internal_set_reaction_type(::EMessageReactionType value) {
  assert(::EMessageReactionType_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  reaction_type_ = value;
}
inline void CFriendMessages_MessageReaction_Notification::set_reaction_type(::EMessageReactionType value) {
  _internal_set_reaction_type(value);
  // @@protoc_insertion_point(field_set:CFriendMessages_MessageReaction_Notification.reaction_type)
}

// optional string reaction = 6;
inline bool CFriendMessages_MessageReaction_Notification::_internal_has_reaction() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CFriendMessages_MessageReaction_Notification::has_reaction() const {
  return _internal_has_reaction();
}
inline void CFriendMessages_MessageReaction_Notification::clear_reaction() {
  reaction_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CFriendMessages_MessageReaction_Notification::reaction() const {
  // @@protoc_insertion_point(field_get:CFriendMessages_MessageReaction_Notification.reaction)
  return _internal_reaction();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CFriendMessages_MessageReaction_Notification::set_reaction(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 reaction_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CFriendMessages_MessageReaction_Notification.reaction)
}
inline std::string* CFriendMessages_MessageReaction_Notification::mutable_reaction() {
  std::string* _s = _internal_mutable_reaction();
  // @@protoc_insertion_point(field_mutable:CFriendMessages_MessageReaction_Notification.reaction)
  return _s;
}
inline const std::string& CFriendMessages_MessageReaction_Notification::_internal_reaction() const {
  return reaction_.Get();
}
inline void CFriendMessages_MessageReaction_Notification::_internal_set_reaction(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  reaction_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CFriendMessages_MessageReaction_Notification::_internal_mutable_reaction() {
  _has_bits_[0] |= 0x00000001u;
  return reaction_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CFriendMessages_MessageReaction_Notification::release_reaction() {
  // @@protoc_insertion_point(field_release:CFriendMessages_MessageReaction_Notification.reaction)
  if (!_internal_has_reaction()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = reaction_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (reaction_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    reaction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CFriendMessages_MessageReaction_Notification::set_allocated_reaction(std::string* reaction) {
  if (reaction != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  reaction_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reaction,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (reaction_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    reaction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CFriendMessages_MessageReaction_Notification.reaction)
}

// optional bool is_add = 7;
inline bool CFriendMessages_MessageReaction_Notification::_internal_has_is_add() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CFriendMessages_MessageReaction_Notification::has_is_add() const {
  return _internal_has_is_add();
}
inline void CFriendMessages_MessageReaction_Notification::clear_is_add() {
  is_add_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool CFriendMessages_MessageReaction_Notification::_internal_is_add() const {
  return is_add_;
}
inline bool CFriendMessages_MessageReaction_Notification::is_add() const {
  // @@protoc_insertion_point(field_get:CFriendMessages_MessageReaction_Notification.is_add)
  return _internal_is_add();
}
inline void CFriendMessages_MessageReaction_Notification::_internal_set_is_add(bool value) {
  _has_bits_[0] |= 0x00000040u;
  is_add_ = value;
}
inline void CFriendMessages_MessageReaction_Notification::set_is_add(bool value) {
  _internal_set_is_add(value);
  // @@protoc_insertion_point(field_set:CFriendMessages_MessageReaction_Notification.is_add)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::EMessageReactionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EMessageReactionType>() {
  return ::EMessageReactionType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_steammessages_5ffriendmessages_2esteamclient_2eproto
