// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_inventory.steamclient.proto

#include "steammessages_inventory.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CInventory_GetInventory_Request::CInventory_GetInventory_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(uint64_t{0u})
  , appid_(0u){}
struct CInventory_GetInventory_RequestDefaultTypeInternal {
  constexpr CInventory_GetInventory_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CInventory_GetInventory_RequestDefaultTypeInternal() {}
  union {
    CInventory_GetInventory_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CInventory_GetInventory_RequestDefaultTypeInternal _CInventory_GetInventory_Request_default_instance_;
constexpr CInventory_Response::CInventory_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : removeditemids_()
  , etag_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , item_json_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , itemdef_json_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ticket_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , replayed_(false){}
struct CInventory_ResponseDefaultTypeInternal {
  constexpr CInventory_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CInventory_ResponseDefaultTypeInternal() {}
  union {
    CInventory_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CInventory_ResponseDefaultTypeInternal _CInventory_Response_default_instance_;
constexpr CInventory_ExchangeItem_Request::CInventory_ExchangeItem_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : materialsitemid_()
  , materialsquantity_()
  , steamid_(uint64_t{0u})
  , outputitemdefid_(uint64_t{0u})
  , appid_(0u){}
struct CInventory_ExchangeItem_RequestDefaultTypeInternal {
  constexpr CInventory_ExchangeItem_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CInventory_ExchangeItem_RequestDefaultTypeInternal() {}
  union {
    CInventory_ExchangeItem_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CInventory_ExchangeItem_RequestDefaultTypeInternal _CInventory_ExchangeItem_Request_default_instance_;
constexpr CInventory_GetEligiblePromoItemDefIDs_Request::CInventory_GetEligiblePromoItemDefIDs_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(uint64_t{0u})
  , appid_(0u){}
struct CInventory_GetEligiblePromoItemDefIDs_RequestDefaultTypeInternal {
  constexpr CInventory_GetEligiblePromoItemDefIDs_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CInventory_GetEligiblePromoItemDefIDs_RequestDefaultTypeInternal() {}
  union {
    CInventory_GetEligiblePromoItemDefIDs_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CInventory_GetEligiblePromoItemDefIDs_RequestDefaultTypeInternal _CInventory_GetEligiblePromoItemDefIDs_Request_default_instance_;
constexpr CInventory_GetEligiblePromoItemDefIDs_Response::CInventory_GetEligiblePromoItemDefIDs_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : itemdefids_(){}
struct CInventory_GetEligiblePromoItemDefIDs_ResponseDefaultTypeInternal {
  constexpr CInventory_GetEligiblePromoItemDefIDs_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CInventory_GetEligiblePromoItemDefIDs_ResponseDefaultTypeInternal() {}
  union {
    CInventory_GetEligiblePromoItemDefIDs_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CInventory_GetEligiblePromoItemDefIDs_ResponseDefaultTypeInternal _CInventory_GetEligiblePromoItemDefIDs_Response_default_instance_;
constexpr CInventory_AddItem_Request::CInventory_AddItem_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : itemdefid_()
  , itempropsjson_()
  , steamid_(uint64_t{0u})
  , appid_(0u)
  , notify_(false)
  , trade_restriction_(false)
  , is_purchase_(false)
  , requestid_(uint64_t{0u}){}
struct CInventory_AddItem_RequestDefaultTypeInternal {
  constexpr CInventory_AddItem_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CInventory_AddItem_RequestDefaultTypeInternal() {}
  union {
    CInventory_AddItem_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CInventory_AddItem_RequestDefaultTypeInternal _CInventory_AddItem_Request_default_instance_;
constexpr CInventory_ModifyItems_Request_ItemPropertyUpdate::CInventory_ModifyItems_Request_ItemPropertyUpdate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : property_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , property_value_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , itemid_(uint64_t{0u})
  , remove_property_(false)
  , property_value_bool_(false)
  , property_value_float_(0)
  , property_value_int_(int64_t{0}){}
struct CInventory_ModifyItems_Request_ItemPropertyUpdateDefaultTypeInternal {
  constexpr CInventory_ModifyItems_Request_ItemPropertyUpdateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CInventory_ModifyItems_Request_ItemPropertyUpdateDefaultTypeInternal() {}
  union {
    CInventory_ModifyItems_Request_ItemPropertyUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CInventory_ModifyItems_Request_ItemPropertyUpdateDefaultTypeInternal _CInventory_ModifyItems_Request_ItemPropertyUpdate_default_instance_;
constexpr CInventory_ModifyItems_Request::CInventory_ModifyItems_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : updates_()
  , steamid_(uint64_t{0u})
  , appid_(0u)
  , timestamp_(0u){}
struct CInventory_ModifyItems_RequestDefaultTypeInternal {
  constexpr CInventory_ModifyItems_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CInventory_ModifyItems_RequestDefaultTypeInternal() {}
  union {
    CInventory_ModifyItems_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CInventory_ModifyItems_RequestDefaultTypeInternal _CInventory_ModifyItems_Request_default_instance_;
constexpr CInventory_ConsumePlaytime_Request::CInventory_ConsumePlaytime_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : itemdefid_(uint64_t{0u})
  , appid_(0u){}
struct CInventory_ConsumePlaytime_RequestDefaultTypeInternal {
  constexpr CInventory_ConsumePlaytime_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CInventory_ConsumePlaytime_RequestDefaultTypeInternal() {}
  union {
    CInventory_ConsumePlaytime_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CInventory_ConsumePlaytime_RequestDefaultTypeInternal _CInventory_ConsumePlaytime_Request_default_instance_;
constexpr CInventory_ConsumeItem_Request::CInventory_ConsumeItem_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : timestamp_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , itemid_(uint64_t{0u})
  , appid_(0u)
  , quantity_(0u)
  , steamid_(uint64_t{0u})
  , requestid_(uint64_t{0u}){}
struct CInventory_ConsumeItem_RequestDefaultTypeInternal {
  constexpr CInventory_ConsumeItem_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CInventory_ConsumeItem_RequestDefaultTypeInternal() {}
  union {
    CInventory_ConsumeItem_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CInventory_ConsumeItem_RequestDefaultTypeInternal _CInventory_ConsumeItem_Request_default_instance_;
constexpr CInventory_DevSetNextDrop_Request::CInventory_DevSetNextDrop_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : droptime_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , itemdefid_(uint64_t{0u})
  , appid_(0u){}
struct CInventory_DevSetNextDrop_RequestDefaultTypeInternal {
  constexpr CInventory_DevSetNextDrop_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CInventory_DevSetNextDrop_RequestDefaultTypeInternal() {}
  union {
    CInventory_DevSetNextDrop_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CInventory_DevSetNextDrop_RequestDefaultTypeInternal _CInventory_DevSetNextDrop_Request_default_instance_;
constexpr CInventory_SplitItemStack_Request::CInventory_SplitItemStack_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : itemid_(uint64_t{0u})
  , appid_(0u)
  , quantity_(0u)
  , steamid_(uint64_t{0u}){}
struct CInventory_SplitItemStack_RequestDefaultTypeInternal {
  constexpr CInventory_SplitItemStack_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CInventory_SplitItemStack_RequestDefaultTypeInternal() {}
  union {
    CInventory_SplitItemStack_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CInventory_SplitItemStack_RequestDefaultTypeInternal _CInventory_SplitItemStack_Request_default_instance_;
constexpr CInventory_CombineItemStacks_Request::CInventory_CombineItemStacks_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fromitemid_(uint64_t{0u})
  , appid_(0u)
  , quantity_(0u)
  , destitemid_(uint64_t{0u})
  , steamid_(uint64_t{0u}){}
struct CInventory_CombineItemStacks_RequestDefaultTypeInternal {
  constexpr CInventory_CombineItemStacks_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CInventory_CombineItemStacks_RequestDefaultTypeInternal() {}
  union {
    CInventory_CombineItemStacks_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CInventory_CombineItemStacks_RequestDefaultTypeInternal _CInventory_CombineItemStacks_Request_default_instance_;
constexpr CInventory_GetItemDefMeta_Request::CInventory_GetItemDefMeta_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appid_(0u){}
struct CInventory_GetItemDefMeta_RequestDefaultTypeInternal {
  constexpr CInventory_GetItemDefMeta_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CInventory_GetItemDefMeta_RequestDefaultTypeInternal() {}
  union {
    CInventory_GetItemDefMeta_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CInventory_GetItemDefMeta_RequestDefaultTypeInternal _CInventory_GetItemDefMeta_Request_default_instance_;
constexpr CInventory_GetItemDefMeta_Response::CInventory_GetItemDefMeta_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : digest_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , modified_(0u){}
struct CInventory_GetItemDefMeta_ResponseDefaultTypeInternal {
  constexpr CInventory_GetItemDefMeta_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CInventory_GetItemDefMeta_ResponseDefaultTypeInternal() {}
  union {
    CInventory_GetItemDefMeta_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CInventory_GetItemDefMeta_ResponseDefaultTypeInternal _CInventory_GetItemDefMeta_Response_default_instance_;
constexpr CInventory_GetUserPurchaseInfo_Request::CInventory_GetUserPurchaseInfo_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CInventory_GetUserPurchaseInfo_RequestDefaultTypeInternal {
  constexpr CInventory_GetUserPurchaseInfo_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CInventory_GetUserPurchaseInfo_RequestDefaultTypeInternal() {}
  union {
    CInventory_GetUserPurchaseInfo_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CInventory_GetUserPurchaseInfo_RequestDefaultTypeInternal _CInventory_GetUserPurchaseInfo_Request_default_instance_;
constexpr CInventory_GetUserPurchaseInfo_Response::CInventory_GetUserPurchaseInfo_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ecurrency_(0){}
struct CInventory_GetUserPurchaseInfo_ResponseDefaultTypeInternal {
  constexpr CInventory_GetUserPurchaseInfo_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CInventory_GetUserPurchaseInfo_ResponseDefaultTypeInternal() {}
  union {
    CInventory_GetUserPurchaseInfo_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CInventory_GetUserPurchaseInfo_ResponseDefaultTypeInternal _CInventory_GetUserPurchaseInfo_Response_default_instance_;
constexpr CInventory_PurchaseInit_Request_LineItem::CInventory_PurchaseInit_Request_LineItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : itemdefid_(uint64_t{0u})
  , quantity_(0u){}
struct CInventory_PurchaseInit_Request_LineItemDefaultTypeInternal {
  constexpr CInventory_PurchaseInit_Request_LineItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CInventory_PurchaseInit_Request_LineItemDefaultTypeInternal() {}
  union {
    CInventory_PurchaseInit_Request_LineItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CInventory_PurchaseInit_Request_LineItemDefaultTypeInternal _CInventory_PurchaseInit_Request_LineItem_default_instance_;
constexpr CInventory_PurchaseInit_Request::CInventory_PurchaseInit_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : line_items_()
  , appid_(0u)
  , language_(0){}
struct CInventory_PurchaseInit_RequestDefaultTypeInternal {
  constexpr CInventory_PurchaseInit_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CInventory_PurchaseInit_RequestDefaultTypeInternal() {}
  union {
    CInventory_PurchaseInit_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CInventory_PurchaseInit_RequestDefaultTypeInternal _CInventory_PurchaseInit_Request_default_instance_;
constexpr CInventory_PurchaseInit_Response::CInventory_PurchaseInit_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : orderid_(uint64_t{0u})
  , transid_(uint64_t{0u}){}
struct CInventory_PurchaseInit_ResponseDefaultTypeInternal {
  constexpr CInventory_PurchaseInit_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CInventory_PurchaseInit_ResponseDefaultTypeInternal() {}
  union {
    CInventory_PurchaseInit_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CInventory_PurchaseInit_ResponseDefaultTypeInternal _CInventory_PurchaseInit_Response_default_instance_;
constexpr CInventory_PurchaseFinalize_Request::CInventory_PurchaseFinalize_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appid_(0u)
  , language_(0)
  , orderid_(uint64_t{0u}){}
struct CInventory_PurchaseFinalize_RequestDefaultTypeInternal {
  constexpr CInventory_PurchaseFinalize_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CInventory_PurchaseFinalize_RequestDefaultTypeInternal() {}
  union {
    CInventory_PurchaseFinalize_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CInventory_PurchaseFinalize_RequestDefaultTypeInternal _CInventory_PurchaseFinalize_Request_default_instance_;
constexpr CInventory_InspectItem_Request::CInventory_InspectItem_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tags_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , itemdefid_(uint64_t{0u})
  , itemid_(uint64_t{0u}){}
struct CInventory_InspectItem_RequestDefaultTypeInternal {
  constexpr CInventory_InspectItem_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CInventory_InspectItem_RequestDefaultTypeInternal() {}
  union {
    CInventory_InspectItem_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CInventory_InspectItem_RequestDefaultTypeInternal _CInventory_InspectItem_Request_default_instance_;
constexpr CInventoryClient_NewItems_Notification::CInventoryClient_NewItems_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : inventory_response_(nullptr)
  , appid_(0u){}
struct CInventoryClient_NewItems_NotificationDefaultTypeInternal {
  constexpr CInventoryClient_NewItems_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CInventoryClient_NewItems_NotificationDefaultTypeInternal() {}
  union {
    CInventoryClient_NewItems_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CInventoryClient_NewItems_NotificationDefaultTypeInternal _CInventoryClient_NewItems_Notification_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steammessages_5finventory_2esteamclient_2eproto[23];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_steammessages_5finventory_2esteamclient_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_steammessages_5finventory_2esteamclient_2eproto[2];

const uint32_t TableStruct_steammessages_5finventory_2esteamclient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CInventory_GetInventory_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CInventory_GetInventory_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CInventory_GetInventory_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CInventory_GetInventory_Request, steamid_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CInventory_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CInventory_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CInventory_Response, etag_),
  PROTOBUF_FIELD_OFFSET(::CInventory_Response, removeditemids_),
  PROTOBUF_FIELD_OFFSET(::CInventory_Response, item_json_),
  PROTOBUF_FIELD_OFFSET(::CInventory_Response, itemdef_json_),
  PROTOBUF_FIELD_OFFSET(::CInventory_Response, ticket_),
  PROTOBUF_FIELD_OFFSET(::CInventory_Response, replayed_),
  0,
  ~0u,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CInventory_ExchangeItem_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CInventory_ExchangeItem_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CInventory_ExchangeItem_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CInventory_ExchangeItem_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::CInventory_ExchangeItem_Request, materialsitemid_),
  PROTOBUF_FIELD_OFFSET(::CInventory_ExchangeItem_Request, materialsquantity_),
  PROTOBUF_FIELD_OFFSET(::CInventory_ExchangeItem_Request, outputitemdefid_),
  2,
  0,
  ~0u,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::CInventory_GetEligiblePromoItemDefIDs_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CInventory_GetEligiblePromoItemDefIDs_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CInventory_GetEligiblePromoItemDefIDs_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CInventory_GetEligiblePromoItemDefIDs_Request, steamid_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CInventory_GetEligiblePromoItemDefIDs_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CInventory_GetEligiblePromoItemDefIDs_Response, itemdefids_),
  PROTOBUF_FIELD_OFFSET(::CInventory_AddItem_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CInventory_AddItem_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CInventory_AddItem_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CInventory_AddItem_Request, itemdefid_),
  PROTOBUF_FIELD_OFFSET(::CInventory_AddItem_Request, itempropsjson_),
  PROTOBUF_FIELD_OFFSET(::CInventory_AddItem_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::CInventory_AddItem_Request, notify_),
  PROTOBUF_FIELD_OFFSET(::CInventory_AddItem_Request, requestid_),
  PROTOBUF_FIELD_OFFSET(::CInventory_AddItem_Request, trade_restriction_),
  PROTOBUF_FIELD_OFFSET(::CInventory_AddItem_Request, is_purchase_),
  1,
  ~0u,
  ~0u,
  0,
  2,
  5,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CInventory_ModifyItems_Request_ItemPropertyUpdate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CInventory_ModifyItems_Request_ItemPropertyUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CInventory_ModifyItems_Request_ItemPropertyUpdate, itemid_),
  PROTOBUF_FIELD_OFFSET(::CInventory_ModifyItems_Request_ItemPropertyUpdate, remove_property_),
  PROTOBUF_FIELD_OFFSET(::CInventory_ModifyItems_Request_ItemPropertyUpdate, property_name_),
  PROTOBUF_FIELD_OFFSET(::CInventory_ModifyItems_Request_ItemPropertyUpdate, property_value_bool_),
  PROTOBUF_FIELD_OFFSET(::CInventory_ModifyItems_Request_ItemPropertyUpdate, property_value_int_),
  PROTOBUF_FIELD_OFFSET(::CInventory_ModifyItems_Request_ItemPropertyUpdate, property_value_string_),
  PROTOBUF_FIELD_OFFSET(::CInventory_ModifyItems_Request_ItemPropertyUpdate, property_value_float_),
  2,
  3,
  0,
  4,
  6,
  1,
  5,
  PROTOBUF_FIELD_OFFSET(::CInventory_ModifyItems_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CInventory_ModifyItems_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CInventory_ModifyItems_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CInventory_ModifyItems_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::CInventory_ModifyItems_Request, updates_),
  PROTOBUF_FIELD_OFFSET(::CInventory_ModifyItems_Request, timestamp_),
  1,
  0,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::CInventory_ConsumePlaytime_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CInventory_ConsumePlaytime_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CInventory_ConsumePlaytime_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CInventory_ConsumePlaytime_Request, itemdefid_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CInventory_ConsumeItem_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CInventory_ConsumeItem_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CInventory_ConsumeItem_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CInventory_ConsumeItem_Request, itemid_),
  PROTOBUF_FIELD_OFFSET(::CInventory_ConsumeItem_Request, quantity_),
  PROTOBUF_FIELD_OFFSET(::CInventory_ConsumeItem_Request, timestamp_),
  PROTOBUF_FIELD_OFFSET(::CInventory_ConsumeItem_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::CInventory_ConsumeItem_Request, requestid_),
  2,
  1,
  3,
  0,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CInventory_DevSetNextDrop_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CInventory_DevSetNextDrop_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CInventory_DevSetNextDrop_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CInventory_DevSetNextDrop_Request, itemdefid_),
  PROTOBUF_FIELD_OFFSET(::CInventory_DevSetNextDrop_Request, droptime_),
  2,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CInventory_SplitItemStack_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CInventory_SplitItemStack_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CInventory_SplitItemStack_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CInventory_SplitItemStack_Request, itemid_),
  PROTOBUF_FIELD_OFFSET(::CInventory_SplitItemStack_Request, quantity_),
  PROTOBUF_FIELD_OFFSET(::CInventory_SplitItemStack_Request, steamid_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CInventory_CombineItemStacks_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CInventory_CombineItemStacks_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CInventory_CombineItemStacks_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CInventory_CombineItemStacks_Request, fromitemid_),
  PROTOBUF_FIELD_OFFSET(::CInventory_CombineItemStacks_Request, destitemid_),
  PROTOBUF_FIELD_OFFSET(::CInventory_CombineItemStacks_Request, quantity_),
  PROTOBUF_FIELD_OFFSET(::CInventory_CombineItemStacks_Request, steamid_),
  1,
  0,
  3,
  2,
  4,
  PROTOBUF_FIELD_OFFSET(::CInventory_GetItemDefMeta_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CInventory_GetItemDefMeta_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CInventory_GetItemDefMeta_Request, appid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CInventory_GetItemDefMeta_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CInventory_GetItemDefMeta_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CInventory_GetItemDefMeta_Response, modified_),
  PROTOBUF_FIELD_OFFSET(::CInventory_GetItemDefMeta_Response, digest_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CInventory_GetUserPurchaseInfo_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CInventory_GetUserPurchaseInfo_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CInventory_GetUserPurchaseInfo_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CInventory_GetUserPurchaseInfo_Response, ecurrency_),
  0,
  PROTOBUF_FIELD_OFFSET(::CInventory_PurchaseInit_Request_LineItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CInventory_PurchaseInit_Request_LineItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CInventory_PurchaseInit_Request_LineItem, itemdefid_),
  PROTOBUF_FIELD_OFFSET(::CInventory_PurchaseInit_Request_LineItem, quantity_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CInventory_PurchaseInit_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CInventory_PurchaseInit_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CInventory_PurchaseInit_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CInventory_PurchaseInit_Request, language_),
  PROTOBUF_FIELD_OFFSET(::CInventory_PurchaseInit_Request, line_items_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CInventory_PurchaseInit_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CInventory_PurchaseInit_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CInventory_PurchaseInit_Response, orderid_),
  PROTOBUF_FIELD_OFFSET(::CInventory_PurchaseInit_Response, transid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CInventory_PurchaseFinalize_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CInventory_PurchaseFinalize_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CInventory_PurchaseFinalize_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CInventory_PurchaseFinalize_Request, language_),
  PROTOBUF_FIELD_OFFSET(::CInventory_PurchaseFinalize_Request, orderid_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CInventory_InspectItem_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CInventory_InspectItem_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CInventory_InspectItem_Request, itemdefid_),
  PROTOBUF_FIELD_OFFSET(::CInventory_InspectItem_Request, itemid_),
  PROTOBUF_FIELD_OFFSET(::CInventory_InspectItem_Request, tags_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CInventoryClient_NewItems_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CInventoryClient_NewItems_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CInventoryClient_NewItems_Notification, appid_),
  PROTOBUF_FIELD_OFFSET(::CInventoryClient_NewItems_Notification, inventory_response_),
  1,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::CInventory_GetInventory_Request)},
  { 10, 22, -1, sizeof(::CInventory_Response)},
  { 28, 39, -1, sizeof(::CInventory_ExchangeItem_Request)},
  { 44, 52, -1, sizeof(::CInventory_GetEligiblePromoItemDefIDs_Request)},
  { 54, -1, -1, sizeof(::CInventory_GetEligiblePromoItemDefIDs_Response)},
  { 61, 75, -1, sizeof(::CInventory_AddItem_Request)},
  { 83, 96, -1, sizeof(::CInventory_ModifyItems_Request_ItemPropertyUpdate)},
  { 103, 113, -1, sizeof(::CInventory_ModifyItems_Request)},
  { 117, 125, -1, sizeof(::CInventory_ConsumePlaytime_Request)},
  { 127, 139, -1, sizeof(::CInventory_ConsumeItem_Request)},
  { 145, 154, -1, sizeof(::CInventory_DevSetNextDrop_Request)},
  { 157, 167, -1, sizeof(::CInventory_SplitItemStack_Request)},
  { 171, 182, -1, sizeof(::CInventory_CombineItemStacks_Request)},
  { 187, 194, -1, sizeof(::CInventory_GetItemDefMeta_Request)},
  { 195, 203, -1, sizeof(::CInventory_GetItemDefMeta_Response)},
  { 205, -1, -1, sizeof(::CInventory_GetUserPurchaseInfo_Request)},
  { 211, 218, -1, sizeof(::CInventory_GetUserPurchaseInfo_Response)},
  { 219, 227, -1, sizeof(::CInventory_PurchaseInit_Request_LineItem)},
  { 229, 238, -1, sizeof(::CInventory_PurchaseInit_Request)},
  { 241, 249, -1, sizeof(::CInventory_PurchaseInit_Response)},
  { 251, 260, -1, sizeof(::CInventory_PurchaseFinalize_Request)},
  { 263, 272, -1, sizeof(::CInventory_InspectItem_Request)},
  { 275, 283, -1, sizeof(::CInventoryClient_NewItems_Notification)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CInventory_GetInventory_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CInventory_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CInventory_ExchangeItem_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CInventory_GetEligiblePromoItemDefIDs_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CInventory_GetEligiblePromoItemDefIDs_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CInventory_AddItem_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CInventory_ModifyItems_Request_ItemPropertyUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CInventory_ModifyItems_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CInventory_ConsumePlaytime_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CInventory_ConsumeItem_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CInventory_DevSetNextDrop_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CInventory_SplitItemStack_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CInventory_CombineItemStacks_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CInventory_GetItemDefMeta_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CInventory_GetItemDefMeta_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CInventory_GetUserPurchaseInfo_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CInventory_GetUserPurchaseInfo_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CInventory_PurchaseInit_Request_LineItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CInventory_PurchaseInit_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CInventory_PurchaseInit_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CInventory_PurchaseFinalize_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CInventory_InspectItem_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CInventoryClient_NewItems_Notification_default_instance_),
};

const char descriptor_table_protodef_steammessages_5finventory_2esteamclient_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n)steammessages_inventory.steamclient.pr"
  "oto\032\030steammessages_base.proto\032,steammess"
  "ages_unified_base.steamclient.proto\"A\n\037C"
  "Inventory_GetInventory_Request\022\r\n\005appid\030"
  "\001 \001(\r\022\017\n\007steamid\030\002 \001(\004\"\277\001\n\023CInventory_Re"
  "sponse\022\014\n\004etag\030\001 \001(\t\022\026\n\016removeditemids\030\002"
  " \003(\004\022\021\n\titem_json\030\003 \001(\t\022\024\n\014itemdef_json\030"
  "\004 \001(\t\022\016\n\006ticket\030\005 \001(\014\022I\n\010replayed\030\006 \001(\010B"
  "7\202\265\0303If true, the requestid given was pr"
  "ocessed earlier.\"\216\001\n\037CInventory_Exchange"
  "Item_Request\022\r\n\005appid\030\001 \001(\r\022\017\n\007steamid\030\002"
  " \001(\004\022\027\n\017materialsitemid\030\003 \003(\004\022\031\n\021materia"
  "lsquantity\030\004 \003(\r\022\027\n\017outputitemdefid\030\005 \001("
  "\004\"O\n-CInventory_GetEligiblePromoItemDefI"
  "Ds_Request\022\r\n\005appid\030\001 \001(\r\022\017\n\007steamid\030\002 \001"
  "(\004\"D\n.CInventory_GetEligiblePromoItemDef"
  "IDs_Response\022\022\n\nitemdefids\030\001 \003(\004\"\314\003\n\032CIn"
  "ventory_AddItem_Request\022\r\n\005appid\030\001 \001(\r\022\021"
  "\n\titemdefid\030\002 \003(\004\022\025\n\ritempropsjson\030\003 \003(\t"
  "\022\017\n\007steamid\030\004 \001(\004\022\\\n\006notify\030\005 \001(\010BL\202\265\030HS"
  "hould notify the user that the item was "
  "added to their Steam Inventory.\022\021\n\treque"
  "stid\030\006 \001(\004\022j\n\021trade_restriction\030\007 \001(\010BO\202"
  "\265\030KIf true, apply the default trade and "
  "market restriction times to this item.\022\206"
  "\001\n\013is_purchase\030\010 \001(\010:\005falseBj\202\265\030fIf set,"
  " treat requestid as a txnid and create t"
  "his item as a result of user microtransa"
  "ction purchase.\"\345\002\n\036CInventory_ModifyIte"
  "ms_Request\022\r\n\005appid\030\001 \001(\r\022\017\n\007steamid\030\002 \001"
  "(\004\022C\n\007updates\030\003 \003(\01322.CInventory_ModifyI"
  "tems_Request.ItemPropertyUpdate\022\021\n\ttimes"
  "tamp\030\004 \001(\r\032\312\001\n\022ItemPropertyUpdate\022\016\n\006ite"
  "mid\030\001 \001(\004\022\027\n\017remove_property\030\002 \001(\010\022\025\n\rpr"
  "operty_name\030\003 \001(\t\022\033\n\023property_value_bool"
  "\030\004 \001(\010\022\032\n\022property_value_int\030\005 \001(\003\022\035\n\025pr"
  "operty_value_string\030\006 \001(\t\022\034\n\024property_va"
  "lue_float\030\007 \001(\002\"F\n\"CInventory_ConsumePla"
  "ytime_Request\022\r\n\005appid\030\001 \001(\r\022\021\n\titemdefi"
  "d\030\002 \001(\004\"\210\001\n\036CInventory_ConsumeItem_Reque"
  "st\022\r\n\005appid\030\001 \001(\r\022\016\n\006itemid\030\002 \001(\004\022\020\n\010qua"
  "ntity\030\003 \001(\r\022\021\n\ttimestamp\030\004 \001(\t\022\017\n\007steami"
  "d\030\005 \001(\004\022\021\n\trequestid\030\006 \001(\004\"W\n!CInventory"
  "_DevSetNextDrop_Request\022\r\n\005appid\030\001 \001(\r\022\021"
  "\n\titemdefid\030\002 \001(\004\022\020\n\010droptime\030\003 \001(\t\"e\n!C"
  "Inventory_SplitItemStack_Request\022\r\n\005appi"
  "d\030\001 \001(\r\022\016\n\006itemid\030\002 \001(\004\022\020\n\010quantity\030\003 \001("
  "\r\022\017\n\007steamid\030\005 \001(\004\"\200\001\n$CInventory_Combin"
  "eItemStacks_Request\022\r\n\005appid\030\001 \001(\r\022\022\n\nfr"
  "omitemid\030\002 \001(\004\022\022\n\ndestitemid\030\003 \001(\004\022\020\n\010qu"
  "antity\030\004 \001(\r\022\017\n\007steamid\030\007 \001(\006\"2\n!CInvent"
  "ory_GetItemDefMeta_Request\022\r\n\005appid\030\001 \001("
  "\r\"F\n\"CInventory_GetItemDefMeta_Response\022"
  "\020\n\010modified\030\001 \001(\r\022\016\n\006digest\030\002 \001(\t\"(\n&CIn"
  "ventory_GetUserPurchaseInfo_Request\"<\n\'C"
  "Inventory_GetUserPurchaseInfo_Response\022\021"
  "\n\tecurrency\030\001 \001(\005\"\262\001\n\037CInventory_Purchas"
  "eInit_Request\022\r\n\005appid\030\001 \001(\r\022\020\n\010language"
  "\030\002 \001(\005\022=\n\nline_items\030\003 \003(\0132).CInventory_"
  "PurchaseInit_Request.LineItem\032/\n\010LineIte"
  "m\022\021\n\titemdefid\030\001 \001(\004\022\020\n\010quantity\030\002 \001(\r\"D"
  "\n CInventory_PurchaseInit_Response\022\017\n\007or"
  "derid\030\001 \001(\004\022\017\n\007transid\030\002 \001(\004\"W\n#CInvento"
  "ry_PurchaseFinalize_Request\022\r\n\005appid\030\001 \001"
  "(\r\022\020\n\010language\030\002 \001(\005\022\017\n\007orderid\030\003 \001(\004\"Q\n"
  "\036CInventory_InspectItem_Request\022\021\n\titemd"
  "efid\030\001 \001(\004\022\016\n\006itemid\030\002 \001(\006\022\014\n\004tags\030\003 \001(\t"
  "\"i\n&CInventoryClient_NewItems_Notificati"
  "on\022\r\n\005appid\030\001 \001(\r\0220\n\022inventory_response\030"
  "\002 \001(\0132\024.CInventory_Response2\273\020\n\tInventor"
  "y\022z\n\014GetInventory\022 .CInventory_GetInvent"
  "ory_Request\032\024.CInventory_Response\"2\202\265\030.R"
  "etrieves a users inventory as a big JSON"
  " blob\022o\n\014ExchangeItem\022 .CInventory_Excha"
  "ngeItem_Request\032\024.CInventory_Response\"\'\202"
  "\265\030#Craft an item in a user\'s inventory\022\275"
  "\001\n\032GetEligiblePromoItemDefIDs\022..CInvento"
  "ry_GetEligiblePromoItemDefIDs_Request\032/."
  "CInventory_GetEligiblePromoItemDefIDs_Re"
  "sponse\">\202\265\030:Returns a list of promo item"
  " defs the user is eligible for\022n\n\014AddPro"
  "moItem\022\033.CInventory_AddItem_Request\032\024.CI"
  "nventory_Response\"+\202\265\030\'Adds a promo item"
  " to a user\'s inventory\022\211\001\n\017SafeModifyIte"
  "ms\022\037.CInventory_ModifyItems_Request\032\024.CI"
  "nventory_Response\"\?\202\265\030;Modify an item in"
  " a user\'s inventory (safe properties onl"
  "y)\022\207\001\n\017ConsumePlaytime\022#.CInventory_Cons"
  "umePlaytime_Request\032\024.CInventory_Respons"
  "e\"9\202\265\0305Consumes playtime and possibly re"
  "turns a granted item\022Y\n\013ConsumeItem\022\037.CI"
  "nventory_ConsumeItem_Request\032\024.CInventor"
  "y_Response\"\023\202\265\030\017Consume an item\022n\n\017DevGe"
  "nerateItem\022\033.CInventory_AddItem_Request\032"
  "\024.CInventory_Response\"(\202\265\030$Grant an item"
  " when in developer mode\022_\n\016DevSetNextDro"
  "p\022\".CInventory_DevSetNextDrop_Request\032\024."
  "CInventory_Response\"\023\202\265\030\017Consume an item"
  "\022s\n\016SplitItemStack\022\".CInventory_SplitIte"
  "mStack_Request\032\024.CInventory_Response\"\'\202\265"
  "\030#Split an item stack into two stacks\022q\n"
  "\021CombineItemStacks\022%.CInventory_CombineI"
  "temStacks_Request\032\024.CInventory_Response\""
  "\037\202\265\030\033Combine two stacks of items\022\234\001\n\016Get"
  "ItemDefMeta\022\".CInventory_GetItemDefMeta_"
  "Request\032#.CInventory_GetItemDefMeta_Resp"
  "onse\"A\202\265\030=Get metadata about the current"
  " item definition for this game.\022\247\001\n\023GetU"
  "serPurchaseInfo\022\'.CInventory_GetUserPurc"
  "haseInfo_Request\032(.CInventory_GetUserPur"
  "chaseInfo_Response\"=\202\265\0309Returns informat"
  "ion about the user such as their currenc"
  "y\022|\n\014PurchaseInit\022 .CInventory_PurchaseI"
  "nit_Request\032!.CInventory_PurchaseInit_Re"
  "sponse\"\'\202\265\030#Initializes a purchase for t"
  "he user\022u\n\020PurchaseFinalize\022$.CInventory"
  "_PurchaseFinalize_Request\032\024.CInventory_R"
  "esponse\"%\202\265\030!Finalizes a purchase for th"
  "e user\022x\n\013InspectItem\022\037.CInventory_Inspe"
  "ctItem_Request\032\024.CInventory_Response\"2\202\265"
  "\030.Get item detail given a valid inspecti"
  "on token\032/\202\265\030+A service that provides ac"
  "cess to inventory2\304\001\n\017InventoryClient\022z\n"
  "\016NotifyNewItems\022\'.CInventoryClient_NewIt"
  "ems_Notification\032\013.NoResponse\"2\202\265\030.Notif"
  "y client that the user received new item"
  "s\0325\202\265\030-Client notifications inventory se"
  "rvice events\300\265\030\002B\003\200\001\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_steammessages_5finventory_2esteamclient_2eproto_deps[2] = {
  &::descriptor_table_steammessages_5fbase_2eproto,
  &::descriptor_table_steammessages_5funified_5fbase_2esteamclient_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steammessages_5finventory_2esteamclient_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5finventory_2esteamclient_2eproto = {
  false, false, 5101, descriptor_table_protodef_steammessages_5finventory_2esteamclient_2eproto, "steammessages_inventory.steamclient.proto", 
  &descriptor_table_steammessages_5finventory_2esteamclient_2eproto_once, descriptor_table_steammessages_5finventory_2esteamclient_2eproto_deps, 2, 23,
  schemas, file_default_instances, TableStruct_steammessages_5finventory_2esteamclient_2eproto::offsets,
  file_level_metadata_steammessages_5finventory_2esteamclient_2eproto, file_level_enum_descriptors_steammessages_5finventory_2esteamclient_2eproto, file_level_service_descriptors_steammessages_5finventory_2esteamclient_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_steammessages_5finventory_2esteamclient_2eproto_getter() {
  return &descriptor_table_steammessages_5finventory_2esteamclient_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_steammessages_5finventory_2esteamclient_2eproto(&descriptor_table_steammessages_5finventory_2esteamclient_2eproto);

// ===================================================================

class CInventory_GetInventory_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CInventory_GetInventory_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CInventory_GetInventory_Request::CInventory_GetInventory_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CInventory_GetInventory_Request)
}
CInventory_GetInventory_Request::CInventory_GetInventory_Request(const CInventory_GetInventory_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:CInventory_GetInventory_Request)
}

inline void CInventory_GetInventory_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(appid_));
}

CInventory_GetInventory_Request::~CInventory_GetInventory_Request() {
  // @@protoc_insertion_point(destructor:CInventory_GetInventory_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CInventory_GetInventory_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CInventory_GetInventory_Request::ArenaDtor(void* object) {
  CInventory_GetInventory_Request* _this = reinterpret_cast< CInventory_GetInventory_Request* >(object);
  (void)_this;
}
void CInventory_GetInventory_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CInventory_GetInventory_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CInventory_GetInventory_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CInventory_GetInventory_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&appid_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CInventory_GetInventory_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 steamid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CInventory_GetInventory_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CInventory_GetInventory_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional uint64 steamid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CInventory_GetInventory_Request)
  return target;
}

size_t CInventory_GetInventory_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CInventory_GetInventory_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 steamid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_steamid());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CInventory_GetInventory_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CInventory_GetInventory_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CInventory_GetInventory_Request::GetClassData() const { return &_class_data_; }

void CInventory_GetInventory_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CInventory_GetInventory_Request *>(to)->MergeFrom(
      static_cast<const CInventory_GetInventory_Request &>(from));
}


void CInventory_GetInventory_Request::MergeFrom(const CInventory_GetInventory_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CInventory_GetInventory_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CInventory_GetInventory_Request::CopyFrom(const CInventory_GetInventory_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CInventory_GetInventory_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CInventory_GetInventory_Request::IsInitialized() const {
  return true;
}

void CInventory_GetInventory_Request::InternalSwap(CInventory_GetInventory_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CInventory_GetInventory_Request, appid_)
      + sizeof(CInventory_GetInventory_Request::appid_)
      - PROTOBUF_FIELD_OFFSET(CInventory_GetInventory_Request, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CInventory_GetInventory_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5finventory_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5finventory_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5finventory_2esteamclient_2eproto[0]);
}

// ===================================================================

class CInventory_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CInventory_Response>()._has_bits_);
  static void set_has_etag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_item_json(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_itemdef_json(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ticket(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_replayed(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CInventory_Response::CInventory_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  removeditemids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CInventory_Response)
}
CInventory_Response::CInventory_Response(const CInventory_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      removeditemids_(from.removeditemids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  etag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    etag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_etag()) {
    etag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_etag(), 
      GetArenaForAllocation());
  }
  item_json_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    item_json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_item_json()) {
    item_json_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_item_json(), 
      GetArenaForAllocation());
  }
  itemdef_json_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    itemdef_json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_itemdef_json()) {
    itemdef_json_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_itemdef_json(), 
      GetArenaForAllocation());
  }
  ticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ticket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ticket()) {
    ticket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ticket(), 
      GetArenaForAllocation());
  }
  replayed_ = from.replayed_;
  // @@protoc_insertion_point(copy_constructor:CInventory_Response)
}

inline void CInventory_Response::SharedCtor() {
etag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  etag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
item_json_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  item_json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
itemdef_json_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  itemdef_json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
ticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ticket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
replayed_ = false;
}

CInventory_Response::~CInventory_Response() {
  // @@protoc_insertion_point(destructor:CInventory_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CInventory_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  etag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  item_json_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  itemdef_json_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ticket_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CInventory_Response::ArenaDtor(void* object) {
  CInventory_Response* _this = reinterpret_cast< CInventory_Response* >(object);
  (void)_this;
}
void CInventory_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CInventory_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CInventory_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CInventory_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  removeditemids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      etag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      item_json_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      itemdef_json_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      ticket_.ClearNonDefaultToEmpty();
    }
  }
  replayed_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CInventory_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string etag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_etag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CInventory_Response.etag");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 removeditemids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_removeditemids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_removeditemids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string item_json = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_item_json();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CInventory_Response.item_json");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string itemdef_json = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_itemdef_json();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CInventory_Response.itemdef_json");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes ticket = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_ticket();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool replayed = 6 [(.description) = "If true, the requestid given was processed earlier."];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_replayed(&has_bits);
          replayed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CInventory_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CInventory_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string etag = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_etag().data(), static_cast<int>(this->_internal_etag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CInventory_Response.etag");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_etag(), target);
  }

  // repeated uint64 removeditemids = 2;
  for (int i = 0, n = this->_internal_removeditemids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_removeditemids(i), target);
  }

  // optional string item_json = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_item_json().data(), static_cast<int>(this->_internal_item_json().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CInventory_Response.item_json");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_item_json(), target);
  }

  // optional string itemdef_json = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_itemdef_json().data(), static_cast<int>(this->_internal_itemdef_json().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CInventory_Response.itemdef_json");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_itemdef_json(), target);
  }

  // optional bytes ticket = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_ticket(), target);
  }

  // optional bool replayed = 6 [(.description) = "If true, the requestid given was processed earlier."];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_replayed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CInventory_Response)
  return target;
}

size_t CInventory_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CInventory_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 removeditemids = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->removeditemids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_removeditemids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string etag = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_etag());
    }

    // optional string item_json = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_item_json());
    }

    // optional string itemdef_json = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_itemdef_json());
    }

    // optional bytes ticket = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_ticket());
    }

    // optional bool replayed = 6 [(.description) = "If true, the requestid given was processed earlier."];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CInventory_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CInventory_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CInventory_Response::GetClassData() const { return &_class_data_; }

void CInventory_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CInventory_Response *>(to)->MergeFrom(
      static_cast<const CInventory_Response &>(from));
}


void CInventory_Response::MergeFrom(const CInventory_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CInventory_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  removeditemids_.MergeFrom(from.removeditemids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_etag(from._internal_etag());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_item_json(from._internal_item_json());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_itemdef_json(from._internal_itemdef_json());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_ticket(from._internal_ticket());
    }
    if (cached_has_bits & 0x00000010u) {
      replayed_ = from.replayed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CInventory_Response::CopyFrom(const CInventory_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CInventory_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CInventory_Response::IsInitialized() const {
  return true;
}

void CInventory_Response::InternalSwap(CInventory_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  removeditemids_.InternalSwap(&other->removeditemids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &etag_, lhs_arena,
      &other->etag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &item_json_, lhs_arena,
      &other->item_json_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &itemdef_json_, lhs_arena,
      &other->itemdef_json_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ticket_, lhs_arena,
      &other->ticket_, rhs_arena
  );
  swap(replayed_, other->replayed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CInventory_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5finventory_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5finventory_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5finventory_2esteamclient_2eproto[1]);
}

// ===================================================================

class CInventory_ExchangeItem_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CInventory_ExchangeItem_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_outputitemdefid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CInventory_ExchangeItem_Request::CInventory_ExchangeItem_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  materialsitemid_(arena),
  materialsquantity_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CInventory_ExchangeItem_Request)
}
CInventory_ExchangeItem_Request::CInventory_ExchangeItem_Request(const CInventory_ExchangeItem_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      materialsitemid_(from.materialsitemid_),
      materialsquantity_(from.materialsquantity_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:CInventory_ExchangeItem_Request)
}

inline void CInventory_ExchangeItem_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(appid_));
}

CInventory_ExchangeItem_Request::~CInventory_ExchangeItem_Request() {
  // @@protoc_insertion_point(destructor:CInventory_ExchangeItem_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CInventory_ExchangeItem_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CInventory_ExchangeItem_Request::ArenaDtor(void* object) {
  CInventory_ExchangeItem_Request* _this = reinterpret_cast< CInventory_ExchangeItem_Request* >(object);
  (void)_this;
}
void CInventory_ExchangeItem_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CInventory_ExchangeItem_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CInventory_ExchangeItem_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CInventory_ExchangeItem_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  materialsitemid_.Clear();
  materialsquantity_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&appid_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CInventory_ExchangeItem_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 steamid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 materialsitemid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_materialsitemid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_materialsitemid(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 materialsquantity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_materialsquantity(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_materialsquantity(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 outputitemdefid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_outputitemdefid(&has_bits);
          outputitemdefid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CInventory_ExchangeItem_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CInventory_ExchangeItem_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional uint64 steamid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_steamid(), target);
  }

  // repeated uint64 materialsitemid = 3;
  for (int i = 0, n = this->_internal_materialsitemid_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_materialsitemid(i), target);
  }

  // repeated uint32 materialsquantity = 4;
  for (int i = 0, n = this->_internal_materialsquantity_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_materialsquantity(i), target);
  }

  // optional uint64 outputitemdefid = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_outputitemdefid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CInventory_ExchangeItem_Request)
  return target;
}

size_t CInventory_ExchangeItem_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CInventory_ExchangeItem_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 materialsitemid = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->materialsitemid_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_materialsitemid_size());
    total_size += data_size;
  }

  // repeated uint32 materialsquantity = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->materialsquantity_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_materialsquantity_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 steamid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_steamid());
    }

    // optional uint64 outputitemdefid = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_outputitemdefid());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CInventory_ExchangeItem_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CInventory_ExchangeItem_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CInventory_ExchangeItem_Request::GetClassData() const { return &_class_data_; }

void CInventory_ExchangeItem_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CInventory_ExchangeItem_Request *>(to)->MergeFrom(
      static_cast<const CInventory_ExchangeItem_Request &>(from));
}


void CInventory_ExchangeItem_Request::MergeFrom(const CInventory_ExchangeItem_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CInventory_ExchangeItem_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  materialsitemid_.MergeFrom(from.materialsitemid_);
  materialsquantity_.MergeFrom(from.materialsquantity_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      outputitemdefid_ = from.outputitemdefid_;
    }
    if (cached_has_bits & 0x00000004u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CInventory_ExchangeItem_Request::CopyFrom(const CInventory_ExchangeItem_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CInventory_ExchangeItem_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CInventory_ExchangeItem_Request::IsInitialized() const {
  return true;
}

void CInventory_ExchangeItem_Request::InternalSwap(CInventory_ExchangeItem_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  materialsitemid_.InternalSwap(&other->materialsitemid_);
  materialsquantity_.InternalSwap(&other->materialsquantity_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CInventory_ExchangeItem_Request, appid_)
      + sizeof(CInventory_ExchangeItem_Request::appid_)
      - PROTOBUF_FIELD_OFFSET(CInventory_ExchangeItem_Request, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CInventory_ExchangeItem_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5finventory_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5finventory_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5finventory_2esteamclient_2eproto[2]);
}

// ===================================================================

class CInventory_GetEligiblePromoItemDefIDs_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CInventory_GetEligiblePromoItemDefIDs_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CInventory_GetEligiblePromoItemDefIDs_Request::CInventory_GetEligiblePromoItemDefIDs_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CInventory_GetEligiblePromoItemDefIDs_Request)
}
CInventory_GetEligiblePromoItemDefIDs_Request::CInventory_GetEligiblePromoItemDefIDs_Request(const CInventory_GetEligiblePromoItemDefIDs_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:CInventory_GetEligiblePromoItemDefIDs_Request)
}

inline void CInventory_GetEligiblePromoItemDefIDs_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(appid_));
}

CInventory_GetEligiblePromoItemDefIDs_Request::~CInventory_GetEligiblePromoItemDefIDs_Request() {
  // @@protoc_insertion_point(destructor:CInventory_GetEligiblePromoItemDefIDs_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CInventory_GetEligiblePromoItemDefIDs_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CInventory_GetEligiblePromoItemDefIDs_Request::ArenaDtor(void* object) {
  CInventory_GetEligiblePromoItemDefIDs_Request* _this = reinterpret_cast< CInventory_GetEligiblePromoItemDefIDs_Request* >(object);
  (void)_this;
}
void CInventory_GetEligiblePromoItemDefIDs_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CInventory_GetEligiblePromoItemDefIDs_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CInventory_GetEligiblePromoItemDefIDs_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CInventory_GetEligiblePromoItemDefIDs_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&appid_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CInventory_GetEligiblePromoItemDefIDs_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 steamid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CInventory_GetEligiblePromoItemDefIDs_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CInventory_GetEligiblePromoItemDefIDs_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional uint64 steamid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CInventory_GetEligiblePromoItemDefIDs_Request)
  return target;
}

size_t CInventory_GetEligiblePromoItemDefIDs_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CInventory_GetEligiblePromoItemDefIDs_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 steamid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_steamid());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CInventory_GetEligiblePromoItemDefIDs_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CInventory_GetEligiblePromoItemDefIDs_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CInventory_GetEligiblePromoItemDefIDs_Request::GetClassData() const { return &_class_data_; }

void CInventory_GetEligiblePromoItemDefIDs_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CInventory_GetEligiblePromoItemDefIDs_Request *>(to)->MergeFrom(
      static_cast<const CInventory_GetEligiblePromoItemDefIDs_Request &>(from));
}


void CInventory_GetEligiblePromoItemDefIDs_Request::MergeFrom(const CInventory_GetEligiblePromoItemDefIDs_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CInventory_GetEligiblePromoItemDefIDs_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CInventory_GetEligiblePromoItemDefIDs_Request::CopyFrom(const CInventory_GetEligiblePromoItemDefIDs_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CInventory_GetEligiblePromoItemDefIDs_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CInventory_GetEligiblePromoItemDefIDs_Request::IsInitialized() const {
  return true;
}

void CInventory_GetEligiblePromoItemDefIDs_Request::InternalSwap(CInventory_GetEligiblePromoItemDefIDs_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CInventory_GetEligiblePromoItemDefIDs_Request, appid_)
      + sizeof(CInventory_GetEligiblePromoItemDefIDs_Request::appid_)
      - PROTOBUF_FIELD_OFFSET(CInventory_GetEligiblePromoItemDefIDs_Request, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CInventory_GetEligiblePromoItemDefIDs_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5finventory_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5finventory_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5finventory_2esteamclient_2eproto[3]);
}

// ===================================================================

class CInventory_GetEligiblePromoItemDefIDs_Response::_Internal {
 public:
};

CInventory_GetEligiblePromoItemDefIDs_Response::CInventory_GetEligiblePromoItemDefIDs_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  itemdefids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CInventory_GetEligiblePromoItemDefIDs_Response)
}
CInventory_GetEligiblePromoItemDefIDs_Response::CInventory_GetEligiblePromoItemDefIDs_Response(const CInventory_GetEligiblePromoItemDefIDs_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      itemdefids_(from.itemdefids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CInventory_GetEligiblePromoItemDefIDs_Response)
}

inline void CInventory_GetEligiblePromoItemDefIDs_Response::SharedCtor() {
}

CInventory_GetEligiblePromoItemDefIDs_Response::~CInventory_GetEligiblePromoItemDefIDs_Response() {
  // @@protoc_insertion_point(destructor:CInventory_GetEligiblePromoItemDefIDs_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CInventory_GetEligiblePromoItemDefIDs_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CInventory_GetEligiblePromoItemDefIDs_Response::ArenaDtor(void* object) {
  CInventory_GetEligiblePromoItemDefIDs_Response* _this = reinterpret_cast< CInventory_GetEligiblePromoItemDefIDs_Response* >(object);
  (void)_this;
}
void CInventory_GetEligiblePromoItemDefIDs_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CInventory_GetEligiblePromoItemDefIDs_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CInventory_GetEligiblePromoItemDefIDs_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CInventory_GetEligiblePromoItemDefIDs_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  itemdefids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CInventory_GetEligiblePromoItemDefIDs_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint64 itemdefids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_itemdefids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_itemdefids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CInventory_GetEligiblePromoItemDefIDs_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CInventory_GetEligiblePromoItemDefIDs_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 itemdefids = 1;
  for (int i = 0, n = this->_internal_itemdefids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_itemdefids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CInventory_GetEligiblePromoItemDefIDs_Response)
  return target;
}

size_t CInventory_GetEligiblePromoItemDefIDs_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CInventory_GetEligiblePromoItemDefIDs_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 itemdefids = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->itemdefids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_itemdefids_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CInventory_GetEligiblePromoItemDefIDs_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CInventory_GetEligiblePromoItemDefIDs_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CInventory_GetEligiblePromoItemDefIDs_Response::GetClassData() const { return &_class_data_; }

void CInventory_GetEligiblePromoItemDefIDs_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CInventory_GetEligiblePromoItemDefIDs_Response *>(to)->MergeFrom(
      static_cast<const CInventory_GetEligiblePromoItemDefIDs_Response &>(from));
}


void CInventory_GetEligiblePromoItemDefIDs_Response::MergeFrom(const CInventory_GetEligiblePromoItemDefIDs_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CInventory_GetEligiblePromoItemDefIDs_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  itemdefids_.MergeFrom(from.itemdefids_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CInventory_GetEligiblePromoItemDefIDs_Response::CopyFrom(const CInventory_GetEligiblePromoItemDefIDs_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CInventory_GetEligiblePromoItemDefIDs_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CInventory_GetEligiblePromoItemDefIDs_Response::IsInitialized() const {
  return true;
}

void CInventory_GetEligiblePromoItemDefIDs_Response::InternalSwap(CInventory_GetEligiblePromoItemDefIDs_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  itemdefids_.InternalSwap(&other->itemdefids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CInventory_GetEligiblePromoItemDefIDs_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5finventory_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5finventory_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5finventory_2esteamclient_2eproto[4]);
}

// ===================================================================

class CInventory_AddItem_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CInventory_AddItem_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_notify(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_requestid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_trade_restriction(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_purchase(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CInventory_AddItem_Request::CInventory_AddItem_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  itemdefid_(arena),
  itempropsjson_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CInventory_AddItem_Request)
}
CInventory_AddItem_Request::CInventory_AddItem_Request(const CInventory_AddItem_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      itemdefid_(from.itemdefid_),
      itempropsjson_(from.itempropsjson_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&requestid_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(requestid_));
  // @@protoc_insertion_point(copy_constructor:CInventory_AddItem_Request)
}

inline void CInventory_AddItem_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&requestid_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(requestid_));
}

CInventory_AddItem_Request::~CInventory_AddItem_Request() {
  // @@protoc_insertion_point(destructor:CInventory_AddItem_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CInventory_AddItem_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CInventory_AddItem_Request::ArenaDtor(void* object) {
  CInventory_AddItem_Request* _this = reinterpret_cast< CInventory_AddItem_Request* >(object);
  (void)_this;
}
void CInventory_AddItem_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CInventory_AddItem_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CInventory_AddItem_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CInventory_AddItem_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  itemdefid_.Clear();
  itempropsjson_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&requestid_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(requestid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CInventory_AddItem_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 itemdefid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_itemdefid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_itemdefid(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string itempropsjson = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_itempropsjson();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CInventory_AddItem_Request.itempropsjson");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint64 steamid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool notify = 5 [(.description) = "Should notify the user that the item was added to their Steam Inventory."];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_notify(&has_bits);
          notify_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 requestid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_requestid(&has_bits);
          requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool trade_restriction = 7 [(.description) = "If true, apply the default trade and market restriction times to this item."];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_trade_restriction(&has_bits);
          trade_restriction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_purchase = 8 [default = false, (.description) = "If set, treat requestid as a txnid and create this item as a result of user microtransaction purchase."];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_is_purchase(&has_bits);
          is_purchase_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CInventory_AddItem_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CInventory_AddItem_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // repeated uint64 itemdefid = 2;
  for (int i = 0, n = this->_internal_itemdefid_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_itemdefid(i), target);
  }

  // repeated string itempropsjson = 3;
  for (int i = 0, n = this->_internal_itempropsjson_size(); i < n; i++) {
    const auto& s = this->_internal_itempropsjson(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CInventory_AddItem_Request.itempropsjson");
    target = stream->WriteString(3, s, target);
  }

  // optional uint64 steamid = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_steamid(), target);
  }

  // optional bool notify = 5 [(.description) = "Should notify the user that the item was added to their Steam Inventory."];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_notify(), target);
  }

  // optional uint64 requestid = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_requestid(), target);
  }

  // optional bool trade_restriction = 7 [(.description) = "If true, apply the default trade and market restriction times to this item."];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_trade_restriction(), target);
  }

  // optional bool is_purchase = 8 [default = false, (.description) = "If set, treat requestid as a txnid and create this item as a result of user microtransaction purchase."];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_is_purchase(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CInventory_AddItem_Request)
  return target;
}

size_t CInventory_AddItem_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CInventory_AddItem_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 itemdefid = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->itemdefid_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_itemdefid_size());
    total_size += data_size;
  }

  // repeated string itempropsjson = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(itempropsjson_.size());
  for (int i = 0, n = itempropsjson_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      itempropsjson_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint64 steamid = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_steamid());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional bool notify = 5 [(.description) = "Should notify the user that the item was added to their Steam Inventory."];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool trade_restriction = 7 [(.description) = "If true, apply the default trade and market restriction times to this item."];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool is_purchase = 8 [default = false, (.description) = "If set, treat requestid as a txnid and create this item as a result of user microtransaction purchase."];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional uint64 requestid = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_requestid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CInventory_AddItem_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CInventory_AddItem_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CInventory_AddItem_Request::GetClassData() const { return &_class_data_; }

void CInventory_AddItem_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CInventory_AddItem_Request *>(to)->MergeFrom(
      static_cast<const CInventory_AddItem_Request &>(from));
}


void CInventory_AddItem_Request::MergeFrom(const CInventory_AddItem_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CInventory_AddItem_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  itemdefid_.MergeFrom(from.itemdefid_);
  itempropsjson_.MergeFrom(from.itempropsjson_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000004u) {
      notify_ = from.notify_;
    }
    if (cached_has_bits & 0x00000008u) {
      trade_restriction_ = from.trade_restriction_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_purchase_ = from.is_purchase_;
    }
    if (cached_has_bits & 0x00000020u) {
      requestid_ = from.requestid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CInventory_AddItem_Request::CopyFrom(const CInventory_AddItem_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CInventory_AddItem_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CInventory_AddItem_Request::IsInitialized() const {
  return true;
}

void CInventory_AddItem_Request::InternalSwap(CInventory_AddItem_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  itemdefid_.InternalSwap(&other->itemdefid_);
  itempropsjson_.InternalSwap(&other->itempropsjson_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CInventory_AddItem_Request, requestid_)
      + sizeof(CInventory_AddItem_Request::requestid_)
      - PROTOBUF_FIELD_OFFSET(CInventory_AddItem_Request, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CInventory_AddItem_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5finventory_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5finventory_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5finventory_2esteamclient_2eproto[5]);
}

// ===================================================================

class CInventory_ModifyItems_Request_ItemPropertyUpdate::_Internal {
 public:
  using HasBits = decltype(std::declval<CInventory_ModifyItems_Request_ItemPropertyUpdate>()._has_bits_);
  static void set_has_itemid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_remove_property(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_property_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_property_value_bool(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_property_value_int(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_property_value_string(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_property_value_float(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CInventory_ModifyItems_Request_ItemPropertyUpdate::CInventory_ModifyItems_Request_ItemPropertyUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CInventory_ModifyItems_Request.ItemPropertyUpdate)
}
CInventory_ModifyItems_Request_ItemPropertyUpdate::CInventory_ModifyItems_Request_ItemPropertyUpdate(const CInventory_ModifyItems_Request_ItemPropertyUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  property_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    property_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_property_name()) {
    property_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_property_name(), 
      GetArenaForAllocation());
  }
  property_value_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    property_value_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_property_value_string()) {
    property_value_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_property_value_string(), 
      GetArenaForAllocation());
  }
  ::memcpy(&itemid_, &from.itemid_,
    static_cast<size_t>(reinterpret_cast<char*>(&property_value_int_) -
    reinterpret_cast<char*>(&itemid_)) + sizeof(property_value_int_));
  // @@protoc_insertion_point(copy_constructor:CInventory_ModifyItems_Request.ItemPropertyUpdate)
}

inline void CInventory_ModifyItems_Request_ItemPropertyUpdate::SharedCtor() {
property_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  property_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
property_value_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  property_value_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&itemid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&property_value_int_) -
    reinterpret_cast<char*>(&itemid_)) + sizeof(property_value_int_));
}

CInventory_ModifyItems_Request_ItemPropertyUpdate::~CInventory_ModifyItems_Request_ItemPropertyUpdate() {
  // @@protoc_insertion_point(destructor:CInventory_ModifyItems_Request.ItemPropertyUpdate)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CInventory_ModifyItems_Request_ItemPropertyUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  property_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  property_value_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CInventory_ModifyItems_Request_ItemPropertyUpdate::ArenaDtor(void* object) {
  CInventory_ModifyItems_Request_ItemPropertyUpdate* _this = reinterpret_cast< CInventory_ModifyItems_Request_ItemPropertyUpdate* >(object);
  (void)_this;
}
void CInventory_ModifyItems_Request_ItemPropertyUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CInventory_ModifyItems_Request_ItemPropertyUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CInventory_ModifyItems_Request_ItemPropertyUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:CInventory_ModifyItems_Request.ItemPropertyUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      property_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      property_value_string_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&itemid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&property_value_int_) -
        reinterpret_cast<char*>(&itemid_)) + sizeof(property_value_int_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CInventory_ModifyItems_Request_ItemPropertyUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 itemid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_itemid(&has_bits);
          itemid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool remove_property = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_remove_property(&has_bits);
          remove_property_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string property_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_property_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CInventory_ModifyItems_Request.ItemPropertyUpdate.property_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool property_value_bool = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_property_value_bool(&has_bits);
          property_value_bool_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 property_value_int = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_property_value_int(&has_bits);
          property_value_int_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string property_value_string = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_property_value_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CInventory_ModifyItems_Request.ItemPropertyUpdate.property_value_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float property_value_float = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_property_value_float(&has_bits);
          property_value_float_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CInventory_ModifyItems_Request_ItemPropertyUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CInventory_ModifyItems_Request.ItemPropertyUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 itemid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_itemid(), target);
  }

  // optional bool remove_property = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_remove_property(), target);
  }

  // optional string property_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_property_name().data(), static_cast<int>(this->_internal_property_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CInventory_ModifyItems_Request.ItemPropertyUpdate.property_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_property_name(), target);
  }

  // optional bool property_value_bool = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_property_value_bool(), target);
  }

  // optional int64 property_value_int = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_property_value_int(), target);
  }

  // optional string property_value_string = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_property_value_string().data(), static_cast<int>(this->_internal_property_value_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CInventory_ModifyItems_Request.ItemPropertyUpdate.property_value_string");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_property_value_string(), target);
  }

  // optional float property_value_float = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_property_value_float(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CInventory_ModifyItems_Request.ItemPropertyUpdate)
  return target;
}

size_t CInventory_ModifyItems_Request_ItemPropertyUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CInventory_ModifyItems_Request.ItemPropertyUpdate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string property_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_property_name());
    }

    // optional string property_value_string = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_property_value_string());
    }

    // optional uint64 itemid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_itemid());
    }

    // optional bool remove_property = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool property_value_bool = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional float property_value_float = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional int64 property_value_int = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_property_value_int());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CInventory_ModifyItems_Request_ItemPropertyUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CInventory_ModifyItems_Request_ItemPropertyUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CInventory_ModifyItems_Request_ItemPropertyUpdate::GetClassData() const { return &_class_data_; }

void CInventory_ModifyItems_Request_ItemPropertyUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CInventory_ModifyItems_Request_ItemPropertyUpdate *>(to)->MergeFrom(
      static_cast<const CInventory_ModifyItems_Request_ItemPropertyUpdate &>(from));
}


void CInventory_ModifyItems_Request_ItemPropertyUpdate::MergeFrom(const CInventory_ModifyItems_Request_ItemPropertyUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CInventory_ModifyItems_Request.ItemPropertyUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_property_name(from._internal_property_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_property_value_string(from._internal_property_value_string());
    }
    if (cached_has_bits & 0x00000004u) {
      itemid_ = from.itemid_;
    }
    if (cached_has_bits & 0x00000008u) {
      remove_property_ = from.remove_property_;
    }
    if (cached_has_bits & 0x00000010u) {
      property_value_bool_ = from.property_value_bool_;
    }
    if (cached_has_bits & 0x00000020u) {
      property_value_float_ = from.property_value_float_;
    }
    if (cached_has_bits & 0x00000040u) {
      property_value_int_ = from.property_value_int_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CInventory_ModifyItems_Request_ItemPropertyUpdate::CopyFrom(const CInventory_ModifyItems_Request_ItemPropertyUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CInventory_ModifyItems_Request.ItemPropertyUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CInventory_ModifyItems_Request_ItemPropertyUpdate::IsInitialized() const {
  return true;
}

void CInventory_ModifyItems_Request_ItemPropertyUpdate::InternalSwap(CInventory_ModifyItems_Request_ItemPropertyUpdate* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &property_name_, lhs_arena,
      &other->property_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &property_value_string_, lhs_arena,
      &other->property_value_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CInventory_ModifyItems_Request_ItemPropertyUpdate, property_value_int_)
      + sizeof(CInventory_ModifyItems_Request_ItemPropertyUpdate::property_value_int_)
      - PROTOBUF_FIELD_OFFSET(CInventory_ModifyItems_Request_ItemPropertyUpdate, itemid_)>(
          reinterpret_cast<char*>(&itemid_),
          reinterpret_cast<char*>(&other->itemid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CInventory_ModifyItems_Request_ItemPropertyUpdate::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5finventory_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5finventory_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5finventory_2esteamclient_2eproto[6]);
}

// ===================================================================

class CInventory_ModifyItems_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CInventory_ModifyItems_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CInventory_ModifyItems_Request::CInventory_ModifyItems_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  updates_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CInventory_ModifyItems_Request)
}
CInventory_ModifyItems_Request::CInventory_ModifyItems_Request(const CInventory_ModifyItems_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      updates_(from.updates_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:CInventory_ModifyItems_Request)
}

inline void CInventory_ModifyItems_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(timestamp_));
}

CInventory_ModifyItems_Request::~CInventory_ModifyItems_Request() {
  // @@protoc_insertion_point(destructor:CInventory_ModifyItems_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CInventory_ModifyItems_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CInventory_ModifyItems_Request::ArenaDtor(void* object) {
  CInventory_ModifyItems_Request* _this = reinterpret_cast< CInventory_ModifyItems_Request* >(object);
  (void)_this;
}
void CInventory_ModifyItems_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CInventory_ModifyItems_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CInventory_ModifyItems_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CInventory_ModifyItems_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  updates_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CInventory_ModifyItems_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 steamid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CInventory_ModifyItems_Request.ItemPropertyUpdate updates = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_updates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CInventory_ModifyItems_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CInventory_ModifyItems_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional uint64 steamid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_steamid(), target);
  }

  // repeated .CInventory_ModifyItems_Request.ItemPropertyUpdate updates = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_updates_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_updates(i), target, stream);
  }

  // optional uint32 timestamp = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CInventory_ModifyItems_Request)
  return target;
}

size_t CInventory_ModifyItems_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CInventory_ModifyItems_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CInventory_ModifyItems_Request.ItemPropertyUpdate updates = 3;
  total_size += 1UL * this->_internal_updates_size();
  for (const auto& msg : this->updates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 steamid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_steamid());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional uint32 timestamp = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CInventory_ModifyItems_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CInventory_ModifyItems_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CInventory_ModifyItems_Request::GetClassData() const { return &_class_data_; }

void CInventory_ModifyItems_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CInventory_ModifyItems_Request *>(to)->MergeFrom(
      static_cast<const CInventory_ModifyItems_Request &>(from));
}


void CInventory_ModifyItems_Request::MergeFrom(const CInventory_ModifyItems_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CInventory_ModifyItems_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  updates_.MergeFrom(from.updates_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CInventory_ModifyItems_Request::CopyFrom(const CInventory_ModifyItems_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CInventory_ModifyItems_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CInventory_ModifyItems_Request::IsInitialized() const {
  return true;
}

void CInventory_ModifyItems_Request::InternalSwap(CInventory_ModifyItems_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  updates_.InternalSwap(&other->updates_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CInventory_ModifyItems_Request, timestamp_)
      + sizeof(CInventory_ModifyItems_Request::timestamp_)
      - PROTOBUF_FIELD_OFFSET(CInventory_ModifyItems_Request, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CInventory_ModifyItems_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5finventory_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5finventory_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5finventory_2esteamclient_2eproto[7]);
}

// ===================================================================

class CInventory_ConsumePlaytime_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CInventory_ConsumePlaytime_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_itemdefid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CInventory_ConsumePlaytime_Request::CInventory_ConsumePlaytime_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CInventory_ConsumePlaytime_Request)
}
CInventory_ConsumePlaytime_Request::CInventory_ConsumePlaytime_Request(const CInventory_ConsumePlaytime_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&itemdefid_, &from.itemdefid_,
    static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&itemdefid_)) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:CInventory_ConsumePlaytime_Request)
}

inline void CInventory_ConsumePlaytime_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&itemdefid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&itemdefid_)) + sizeof(appid_));
}

CInventory_ConsumePlaytime_Request::~CInventory_ConsumePlaytime_Request() {
  // @@protoc_insertion_point(destructor:CInventory_ConsumePlaytime_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CInventory_ConsumePlaytime_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CInventory_ConsumePlaytime_Request::ArenaDtor(void* object) {
  CInventory_ConsumePlaytime_Request* _this = reinterpret_cast< CInventory_ConsumePlaytime_Request* >(object);
  (void)_this;
}
void CInventory_ConsumePlaytime_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CInventory_ConsumePlaytime_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CInventory_ConsumePlaytime_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CInventory_ConsumePlaytime_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&itemdefid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&appid_) -
        reinterpret_cast<char*>(&itemdefid_)) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CInventory_ConsumePlaytime_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 itemdefid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_itemdefid(&has_bits);
          itemdefid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CInventory_ConsumePlaytime_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CInventory_ConsumePlaytime_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional uint64 itemdefid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_itemdefid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CInventory_ConsumePlaytime_Request)
  return target;
}

size_t CInventory_ConsumePlaytime_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CInventory_ConsumePlaytime_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 itemdefid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_itemdefid());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CInventory_ConsumePlaytime_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CInventory_ConsumePlaytime_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CInventory_ConsumePlaytime_Request::GetClassData() const { return &_class_data_; }

void CInventory_ConsumePlaytime_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CInventory_ConsumePlaytime_Request *>(to)->MergeFrom(
      static_cast<const CInventory_ConsumePlaytime_Request &>(from));
}


void CInventory_ConsumePlaytime_Request::MergeFrom(const CInventory_ConsumePlaytime_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CInventory_ConsumePlaytime_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      itemdefid_ = from.itemdefid_;
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CInventory_ConsumePlaytime_Request::CopyFrom(const CInventory_ConsumePlaytime_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CInventory_ConsumePlaytime_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CInventory_ConsumePlaytime_Request::IsInitialized() const {
  return true;
}

void CInventory_ConsumePlaytime_Request::InternalSwap(CInventory_ConsumePlaytime_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CInventory_ConsumePlaytime_Request, appid_)
      + sizeof(CInventory_ConsumePlaytime_Request::appid_)
      - PROTOBUF_FIELD_OFFSET(CInventory_ConsumePlaytime_Request, itemdefid_)>(
          reinterpret_cast<char*>(&itemdefid_),
          reinterpret_cast<char*>(&other->itemdefid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CInventory_ConsumePlaytime_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5finventory_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5finventory_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5finventory_2esteamclient_2eproto[8]);
}

// ===================================================================

class CInventory_ConsumeItem_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CInventory_ConsumeItem_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_itemid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_quantity(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_requestid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CInventory_ConsumeItem_Request::CInventory_ConsumeItem_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CInventory_ConsumeItem_Request)
}
CInventory_ConsumeItem_Request::CInventory_ConsumeItem_Request(const CInventory_ConsumeItem_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  timestamp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    timestamp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_timestamp()) {
    timestamp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_timestamp(), 
      GetArenaForAllocation());
  }
  ::memcpy(&itemid_, &from.itemid_,
    static_cast<size_t>(reinterpret_cast<char*>(&requestid_) -
    reinterpret_cast<char*>(&itemid_)) + sizeof(requestid_));
  // @@protoc_insertion_point(copy_constructor:CInventory_ConsumeItem_Request)
}

inline void CInventory_ConsumeItem_Request::SharedCtor() {
timestamp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  timestamp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&itemid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&requestid_) -
    reinterpret_cast<char*>(&itemid_)) + sizeof(requestid_));
}

CInventory_ConsumeItem_Request::~CInventory_ConsumeItem_Request() {
  // @@protoc_insertion_point(destructor:CInventory_ConsumeItem_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CInventory_ConsumeItem_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  timestamp_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CInventory_ConsumeItem_Request::ArenaDtor(void* object) {
  CInventory_ConsumeItem_Request* _this = reinterpret_cast< CInventory_ConsumeItem_Request* >(object);
  (void)_this;
}
void CInventory_ConsumeItem_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CInventory_ConsumeItem_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CInventory_ConsumeItem_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CInventory_ConsumeItem_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    timestamp_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&itemid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&requestid_) -
        reinterpret_cast<char*>(&itemid_)) + sizeof(requestid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CInventory_ConsumeItem_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 itemid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_itemid(&has_bits);
          itemid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 quantity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_quantity(&has_bits);
          quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_timestamp();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CInventory_ConsumeItem_Request.timestamp");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 steamid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 requestid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_requestid(&has_bits);
          requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CInventory_ConsumeItem_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CInventory_ConsumeItem_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional uint64 itemid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_itemid(), target);
  }

  // optional uint32 quantity = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_quantity(), target);
  }

  // optional string timestamp = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_timestamp().data(), static_cast<int>(this->_internal_timestamp().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CInventory_ConsumeItem_Request.timestamp");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_timestamp(), target);
  }

  // optional uint64 steamid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_steamid(), target);
  }

  // optional uint64 requestid = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_requestid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CInventory_ConsumeItem_Request)
  return target;
}

size_t CInventory_ConsumeItem_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CInventory_ConsumeItem_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string timestamp = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_timestamp());
    }

    // optional uint64 itemid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_itemid());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional uint32 quantity = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_quantity());
    }

    // optional uint64 steamid = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_steamid());
    }

    // optional uint64 requestid = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_requestid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CInventory_ConsumeItem_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CInventory_ConsumeItem_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CInventory_ConsumeItem_Request::GetClassData() const { return &_class_data_; }

void CInventory_ConsumeItem_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CInventory_ConsumeItem_Request *>(to)->MergeFrom(
      static_cast<const CInventory_ConsumeItem_Request &>(from));
}


void CInventory_ConsumeItem_Request::MergeFrom(const CInventory_ConsumeItem_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CInventory_ConsumeItem_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_timestamp(from._internal_timestamp());
    }
    if (cached_has_bits & 0x00000002u) {
      itemid_ = from.itemid_;
    }
    if (cached_has_bits & 0x00000004u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000008u) {
      quantity_ = from.quantity_;
    }
    if (cached_has_bits & 0x00000010u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000020u) {
      requestid_ = from.requestid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CInventory_ConsumeItem_Request::CopyFrom(const CInventory_ConsumeItem_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CInventory_ConsumeItem_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CInventory_ConsumeItem_Request::IsInitialized() const {
  return true;
}

void CInventory_ConsumeItem_Request::InternalSwap(CInventory_ConsumeItem_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &timestamp_, lhs_arena,
      &other->timestamp_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CInventory_ConsumeItem_Request, requestid_)
      + sizeof(CInventory_ConsumeItem_Request::requestid_)
      - PROTOBUF_FIELD_OFFSET(CInventory_ConsumeItem_Request, itemid_)>(
          reinterpret_cast<char*>(&itemid_),
          reinterpret_cast<char*>(&other->itemid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CInventory_ConsumeItem_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5finventory_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5finventory_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5finventory_2esteamclient_2eproto[9]);
}

// ===================================================================

class CInventory_DevSetNextDrop_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CInventory_DevSetNextDrop_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_itemdefid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_droptime(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CInventory_DevSetNextDrop_Request::CInventory_DevSetNextDrop_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CInventory_DevSetNextDrop_Request)
}
CInventory_DevSetNextDrop_Request::CInventory_DevSetNextDrop_Request(const CInventory_DevSetNextDrop_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  droptime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    droptime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_droptime()) {
    droptime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_droptime(), 
      GetArenaForAllocation());
  }
  ::memcpy(&itemdefid_, &from.itemdefid_,
    static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&itemdefid_)) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:CInventory_DevSetNextDrop_Request)
}

inline void CInventory_DevSetNextDrop_Request::SharedCtor() {
droptime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  droptime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&itemdefid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&itemdefid_)) + sizeof(appid_));
}

CInventory_DevSetNextDrop_Request::~CInventory_DevSetNextDrop_Request() {
  // @@protoc_insertion_point(destructor:CInventory_DevSetNextDrop_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CInventory_DevSetNextDrop_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  droptime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CInventory_DevSetNextDrop_Request::ArenaDtor(void* object) {
  CInventory_DevSetNextDrop_Request* _this = reinterpret_cast< CInventory_DevSetNextDrop_Request* >(object);
  (void)_this;
}
void CInventory_DevSetNextDrop_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CInventory_DevSetNextDrop_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CInventory_DevSetNextDrop_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CInventory_DevSetNextDrop_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    droptime_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&itemdefid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&appid_) -
        reinterpret_cast<char*>(&itemdefid_)) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CInventory_DevSetNextDrop_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 itemdefid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_itemdefid(&has_bits);
          itemdefid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string droptime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_droptime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CInventory_DevSetNextDrop_Request.droptime");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CInventory_DevSetNextDrop_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CInventory_DevSetNextDrop_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional uint64 itemdefid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_itemdefid(), target);
  }

  // optional string droptime = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_droptime().data(), static_cast<int>(this->_internal_droptime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CInventory_DevSetNextDrop_Request.droptime");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_droptime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CInventory_DevSetNextDrop_Request)
  return target;
}

size_t CInventory_DevSetNextDrop_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CInventory_DevSetNextDrop_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string droptime = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_droptime());
    }

    // optional uint64 itemdefid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_itemdefid());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CInventory_DevSetNextDrop_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CInventory_DevSetNextDrop_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CInventory_DevSetNextDrop_Request::GetClassData() const { return &_class_data_; }

void CInventory_DevSetNextDrop_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CInventory_DevSetNextDrop_Request *>(to)->MergeFrom(
      static_cast<const CInventory_DevSetNextDrop_Request &>(from));
}


void CInventory_DevSetNextDrop_Request::MergeFrom(const CInventory_DevSetNextDrop_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CInventory_DevSetNextDrop_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_droptime(from._internal_droptime());
    }
    if (cached_has_bits & 0x00000002u) {
      itemdefid_ = from.itemdefid_;
    }
    if (cached_has_bits & 0x00000004u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CInventory_DevSetNextDrop_Request::CopyFrom(const CInventory_DevSetNextDrop_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CInventory_DevSetNextDrop_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CInventory_DevSetNextDrop_Request::IsInitialized() const {
  return true;
}

void CInventory_DevSetNextDrop_Request::InternalSwap(CInventory_DevSetNextDrop_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &droptime_, lhs_arena,
      &other->droptime_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CInventory_DevSetNextDrop_Request, appid_)
      + sizeof(CInventory_DevSetNextDrop_Request::appid_)
      - PROTOBUF_FIELD_OFFSET(CInventory_DevSetNextDrop_Request, itemdefid_)>(
          reinterpret_cast<char*>(&itemdefid_),
          reinterpret_cast<char*>(&other->itemdefid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CInventory_DevSetNextDrop_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5finventory_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5finventory_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5finventory_2esteamclient_2eproto[10]);
}

// ===================================================================

class CInventory_SplitItemStack_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CInventory_SplitItemStack_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_itemid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_quantity(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CInventory_SplitItemStack_Request::CInventory_SplitItemStack_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CInventory_SplitItemStack_Request)
}
CInventory_SplitItemStack_Request::CInventory_SplitItemStack_Request(const CInventory_SplitItemStack_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&itemid_, &from.itemid_,
    static_cast<size_t>(reinterpret_cast<char*>(&steamid_) -
    reinterpret_cast<char*>(&itemid_)) + sizeof(steamid_));
  // @@protoc_insertion_point(copy_constructor:CInventory_SplitItemStack_Request)
}

inline void CInventory_SplitItemStack_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&itemid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&steamid_) -
    reinterpret_cast<char*>(&itemid_)) + sizeof(steamid_));
}

CInventory_SplitItemStack_Request::~CInventory_SplitItemStack_Request() {
  // @@protoc_insertion_point(destructor:CInventory_SplitItemStack_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CInventory_SplitItemStack_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CInventory_SplitItemStack_Request::ArenaDtor(void* object) {
  CInventory_SplitItemStack_Request* _this = reinterpret_cast< CInventory_SplitItemStack_Request* >(object);
  (void)_this;
}
void CInventory_SplitItemStack_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CInventory_SplitItemStack_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CInventory_SplitItemStack_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CInventory_SplitItemStack_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&itemid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steamid_) -
        reinterpret_cast<char*>(&itemid_)) + sizeof(steamid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CInventory_SplitItemStack_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 itemid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_itemid(&has_bits);
          itemid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 quantity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_quantity(&has_bits);
          quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 steamid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CInventory_SplitItemStack_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CInventory_SplitItemStack_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional uint64 itemid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_itemid(), target);
  }

  // optional uint32 quantity = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_quantity(), target);
  }

  // optional uint64 steamid = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CInventory_SplitItemStack_Request)
  return target;
}

size_t CInventory_SplitItemStack_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CInventory_SplitItemStack_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 itemid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_itemid());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional uint32 quantity = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_quantity());
    }

    // optional uint64 steamid = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_steamid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CInventory_SplitItemStack_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CInventory_SplitItemStack_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CInventory_SplitItemStack_Request::GetClassData() const { return &_class_data_; }

void CInventory_SplitItemStack_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CInventory_SplitItemStack_Request *>(to)->MergeFrom(
      static_cast<const CInventory_SplitItemStack_Request &>(from));
}


void CInventory_SplitItemStack_Request::MergeFrom(const CInventory_SplitItemStack_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CInventory_SplitItemStack_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      itemid_ = from.itemid_;
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000004u) {
      quantity_ = from.quantity_;
    }
    if (cached_has_bits & 0x00000008u) {
      steamid_ = from.steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CInventory_SplitItemStack_Request::CopyFrom(const CInventory_SplitItemStack_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CInventory_SplitItemStack_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CInventory_SplitItemStack_Request::IsInitialized() const {
  return true;
}

void CInventory_SplitItemStack_Request::InternalSwap(CInventory_SplitItemStack_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CInventory_SplitItemStack_Request, steamid_)
      + sizeof(CInventory_SplitItemStack_Request::steamid_)
      - PROTOBUF_FIELD_OFFSET(CInventory_SplitItemStack_Request, itemid_)>(
          reinterpret_cast<char*>(&itemid_),
          reinterpret_cast<char*>(&other->itemid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CInventory_SplitItemStack_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5finventory_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5finventory_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5finventory_2esteamclient_2eproto[11]);
}

// ===================================================================

class CInventory_CombineItemStacks_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CInventory_CombineItemStacks_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_fromitemid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_destitemid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_quantity(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CInventory_CombineItemStacks_Request::CInventory_CombineItemStacks_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CInventory_CombineItemStacks_Request)
}
CInventory_CombineItemStacks_Request::CInventory_CombineItemStacks_Request(const CInventory_CombineItemStacks_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&fromitemid_, &from.fromitemid_,
    static_cast<size_t>(reinterpret_cast<char*>(&steamid_) -
    reinterpret_cast<char*>(&fromitemid_)) + sizeof(steamid_));
  // @@protoc_insertion_point(copy_constructor:CInventory_CombineItemStacks_Request)
}

inline void CInventory_CombineItemStacks_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&fromitemid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&steamid_) -
    reinterpret_cast<char*>(&fromitemid_)) + sizeof(steamid_));
}

CInventory_CombineItemStacks_Request::~CInventory_CombineItemStacks_Request() {
  // @@protoc_insertion_point(destructor:CInventory_CombineItemStacks_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CInventory_CombineItemStacks_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CInventory_CombineItemStacks_Request::ArenaDtor(void* object) {
  CInventory_CombineItemStacks_Request* _this = reinterpret_cast< CInventory_CombineItemStacks_Request* >(object);
  (void)_this;
}
void CInventory_CombineItemStacks_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CInventory_CombineItemStacks_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CInventory_CombineItemStacks_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CInventory_CombineItemStacks_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&fromitemid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steamid_) -
        reinterpret_cast<char*>(&fromitemid_)) + sizeof(steamid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CInventory_CombineItemStacks_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 fromitemid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_fromitemid(&has_bits);
          fromitemid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 destitemid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_destitemid(&has_bits);
          destitemid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 quantity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_quantity(&has_bits);
          quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 steamid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CInventory_CombineItemStacks_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CInventory_CombineItemStacks_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional uint64 fromitemid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_fromitemid(), target);
  }

  // optional uint64 destitemid = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_destitemid(), target);
  }

  // optional uint32 quantity = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_quantity(), target);
  }

  // optional fixed64 steamid = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(7, this->_internal_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CInventory_CombineItemStacks_Request)
  return target;
}

size_t CInventory_CombineItemStacks_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CInventory_CombineItemStacks_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint64 fromitemid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_fromitemid());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional uint32 quantity = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_quantity());
    }

    // optional uint64 destitemid = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_destitemid());
    }

    // optional fixed64 steamid = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CInventory_CombineItemStacks_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CInventory_CombineItemStacks_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CInventory_CombineItemStacks_Request::GetClassData() const { return &_class_data_; }

void CInventory_CombineItemStacks_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CInventory_CombineItemStacks_Request *>(to)->MergeFrom(
      static_cast<const CInventory_CombineItemStacks_Request &>(from));
}


void CInventory_CombineItemStacks_Request::MergeFrom(const CInventory_CombineItemStacks_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CInventory_CombineItemStacks_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      fromitemid_ = from.fromitemid_;
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000004u) {
      quantity_ = from.quantity_;
    }
    if (cached_has_bits & 0x00000008u) {
      destitemid_ = from.destitemid_;
    }
    if (cached_has_bits & 0x00000010u) {
      steamid_ = from.steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CInventory_CombineItemStacks_Request::CopyFrom(const CInventory_CombineItemStacks_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CInventory_CombineItemStacks_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CInventory_CombineItemStacks_Request::IsInitialized() const {
  return true;
}

void CInventory_CombineItemStacks_Request::InternalSwap(CInventory_CombineItemStacks_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CInventory_CombineItemStacks_Request, steamid_)
      + sizeof(CInventory_CombineItemStacks_Request::steamid_)
      - PROTOBUF_FIELD_OFFSET(CInventory_CombineItemStacks_Request, fromitemid_)>(
          reinterpret_cast<char*>(&fromitemid_),
          reinterpret_cast<char*>(&other->fromitemid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CInventory_CombineItemStacks_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5finventory_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5finventory_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5finventory_2esteamclient_2eproto[12]);
}

// ===================================================================

class CInventory_GetItemDefMeta_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CInventory_GetItemDefMeta_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CInventory_GetItemDefMeta_Request::CInventory_GetItemDefMeta_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CInventory_GetItemDefMeta_Request)
}
CInventory_GetItemDefMeta_Request::CInventory_GetItemDefMeta_Request(const CInventory_GetItemDefMeta_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:CInventory_GetItemDefMeta_Request)
}

inline void CInventory_GetItemDefMeta_Request::SharedCtor() {
appid_ = 0u;
}

CInventory_GetItemDefMeta_Request::~CInventory_GetItemDefMeta_Request() {
  // @@protoc_insertion_point(destructor:CInventory_GetItemDefMeta_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CInventory_GetItemDefMeta_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CInventory_GetItemDefMeta_Request::ArenaDtor(void* object) {
  CInventory_GetItemDefMeta_Request* _this = reinterpret_cast< CInventory_GetItemDefMeta_Request* >(object);
  (void)_this;
}
void CInventory_GetItemDefMeta_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CInventory_GetItemDefMeta_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CInventory_GetItemDefMeta_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CInventory_GetItemDefMeta_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CInventory_GetItemDefMeta_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CInventory_GetItemDefMeta_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CInventory_GetItemDefMeta_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CInventory_GetItemDefMeta_Request)
  return target;
}

size_t CInventory_GetItemDefMeta_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CInventory_GetItemDefMeta_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 appid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CInventory_GetItemDefMeta_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CInventory_GetItemDefMeta_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CInventory_GetItemDefMeta_Request::GetClassData() const { return &_class_data_; }

void CInventory_GetItemDefMeta_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CInventory_GetItemDefMeta_Request *>(to)->MergeFrom(
      static_cast<const CInventory_GetItemDefMeta_Request &>(from));
}


void CInventory_GetItemDefMeta_Request::MergeFrom(const CInventory_GetItemDefMeta_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CInventory_GetItemDefMeta_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_appid()) {
    _internal_set_appid(from._internal_appid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CInventory_GetItemDefMeta_Request::CopyFrom(const CInventory_GetItemDefMeta_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CInventory_GetItemDefMeta_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CInventory_GetItemDefMeta_Request::IsInitialized() const {
  return true;
}

void CInventory_GetItemDefMeta_Request::InternalSwap(CInventory_GetItemDefMeta_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(appid_, other->appid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CInventory_GetItemDefMeta_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5finventory_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5finventory_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5finventory_2esteamclient_2eproto[13]);
}

// ===================================================================

class CInventory_GetItemDefMeta_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CInventory_GetItemDefMeta_Response>()._has_bits_);
  static void set_has_modified(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_digest(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CInventory_GetItemDefMeta_Response::CInventory_GetItemDefMeta_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CInventory_GetItemDefMeta_Response)
}
CInventory_GetItemDefMeta_Response::CInventory_GetItemDefMeta_Response(const CInventory_GetItemDefMeta_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  digest_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    digest_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_digest()) {
    digest_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_digest(), 
      GetArenaForAllocation());
  }
  modified_ = from.modified_;
  // @@protoc_insertion_point(copy_constructor:CInventory_GetItemDefMeta_Response)
}

inline void CInventory_GetItemDefMeta_Response::SharedCtor() {
digest_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  digest_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
modified_ = 0u;
}

CInventory_GetItemDefMeta_Response::~CInventory_GetItemDefMeta_Response() {
  // @@protoc_insertion_point(destructor:CInventory_GetItemDefMeta_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CInventory_GetItemDefMeta_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  digest_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CInventory_GetItemDefMeta_Response::ArenaDtor(void* object) {
  CInventory_GetItemDefMeta_Response* _this = reinterpret_cast< CInventory_GetItemDefMeta_Response* >(object);
  (void)_this;
}
void CInventory_GetItemDefMeta_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CInventory_GetItemDefMeta_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CInventory_GetItemDefMeta_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CInventory_GetItemDefMeta_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    digest_.ClearNonDefaultToEmpty();
  }
  modified_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CInventory_GetItemDefMeta_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 modified = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_modified(&has_bits);
          modified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string digest = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_digest();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CInventory_GetItemDefMeta_Response.digest");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CInventory_GetItemDefMeta_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CInventory_GetItemDefMeta_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 modified = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_modified(), target);
  }

  // optional string digest = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_digest().data(), static_cast<int>(this->_internal_digest().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CInventory_GetItemDefMeta_Response.digest");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_digest(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CInventory_GetItemDefMeta_Response)
  return target;
}

size_t CInventory_GetItemDefMeta_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CInventory_GetItemDefMeta_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string digest = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_digest());
    }

    // optional uint32 modified = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_modified());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CInventory_GetItemDefMeta_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CInventory_GetItemDefMeta_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CInventory_GetItemDefMeta_Response::GetClassData() const { return &_class_data_; }

void CInventory_GetItemDefMeta_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CInventory_GetItemDefMeta_Response *>(to)->MergeFrom(
      static_cast<const CInventory_GetItemDefMeta_Response &>(from));
}


void CInventory_GetItemDefMeta_Response::MergeFrom(const CInventory_GetItemDefMeta_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CInventory_GetItemDefMeta_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_digest(from._internal_digest());
    }
    if (cached_has_bits & 0x00000002u) {
      modified_ = from.modified_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CInventory_GetItemDefMeta_Response::CopyFrom(const CInventory_GetItemDefMeta_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CInventory_GetItemDefMeta_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CInventory_GetItemDefMeta_Response::IsInitialized() const {
  return true;
}

void CInventory_GetItemDefMeta_Response::InternalSwap(CInventory_GetItemDefMeta_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &digest_, lhs_arena,
      &other->digest_, rhs_arena
  );
  swap(modified_, other->modified_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CInventory_GetItemDefMeta_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5finventory_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5finventory_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5finventory_2esteamclient_2eproto[14]);
}

// ===================================================================

class CInventory_GetUserPurchaseInfo_Request::_Internal {
 public:
};

CInventory_GetUserPurchaseInfo_Request::CInventory_GetUserPurchaseInfo_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CInventory_GetUserPurchaseInfo_Request)
}
CInventory_GetUserPurchaseInfo_Request::CInventory_GetUserPurchaseInfo_Request(const CInventory_GetUserPurchaseInfo_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CInventory_GetUserPurchaseInfo_Request)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CInventory_GetUserPurchaseInfo_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CInventory_GetUserPurchaseInfo_Request::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CInventory_GetUserPurchaseInfo_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5finventory_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5finventory_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5finventory_2esteamclient_2eproto[15]);
}

// ===================================================================

class CInventory_GetUserPurchaseInfo_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CInventory_GetUserPurchaseInfo_Response>()._has_bits_);
  static void set_has_ecurrency(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CInventory_GetUserPurchaseInfo_Response::CInventory_GetUserPurchaseInfo_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CInventory_GetUserPurchaseInfo_Response)
}
CInventory_GetUserPurchaseInfo_Response::CInventory_GetUserPurchaseInfo_Response(const CInventory_GetUserPurchaseInfo_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ecurrency_ = from.ecurrency_;
  // @@protoc_insertion_point(copy_constructor:CInventory_GetUserPurchaseInfo_Response)
}

inline void CInventory_GetUserPurchaseInfo_Response::SharedCtor() {
ecurrency_ = 0;
}

CInventory_GetUserPurchaseInfo_Response::~CInventory_GetUserPurchaseInfo_Response() {
  // @@protoc_insertion_point(destructor:CInventory_GetUserPurchaseInfo_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CInventory_GetUserPurchaseInfo_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CInventory_GetUserPurchaseInfo_Response::ArenaDtor(void* object) {
  CInventory_GetUserPurchaseInfo_Response* _this = reinterpret_cast< CInventory_GetUserPurchaseInfo_Response* >(object);
  (void)_this;
}
void CInventory_GetUserPurchaseInfo_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CInventory_GetUserPurchaseInfo_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CInventory_GetUserPurchaseInfo_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CInventory_GetUserPurchaseInfo_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ecurrency_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CInventory_GetUserPurchaseInfo_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 ecurrency = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ecurrency(&has_bits);
          ecurrency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CInventory_GetUserPurchaseInfo_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CInventory_GetUserPurchaseInfo_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ecurrency = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ecurrency(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CInventory_GetUserPurchaseInfo_Response)
  return target;
}

size_t CInventory_GetUserPurchaseInfo_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CInventory_GetUserPurchaseInfo_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 ecurrency = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_ecurrency());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CInventory_GetUserPurchaseInfo_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CInventory_GetUserPurchaseInfo_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CInventory_GetUserPurchaseInfo_Response::GetClassData() const { return &_class_data_; }

void CInventory_GetUserPurchaseInfo_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CInventory_GetUserPurchaseInfo_Response *>(to)->MergeFrom(
      static_cast<const CInventory_GetUserPurchaseInfo_Response &>(from));
}


void CInventory_GetUserPurchaseInfo_Response::MergeFrom(const CInventory_GetUserPurchaseInfo_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CInventory_GetUserPurchaseInfo_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ecurrency()) {
    _internal_set_ecurrency(from._internal_ecurrency());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CInventory_GetUserPurchaseInfo_Response::CopyFrom(const CInventory_GetUserPurchaseInfo_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CInventory_GetUserPurchaseInfo_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CInventory_GetUserPurchaseInfo_Response::IsInitialized() const {
  return true;
}

void CInventory_GetUserPurchaseInfo_Response::InternalSwap(CInventory_GetUserPurchaseInfo_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ecurrency_, other->ecurrency_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CInventory_GetUserPurchaseInfo_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5finventory_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5finventory_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5finventory_2esteamclient_2eproto[16]);
}

// ===================================================================

class CInventory_PurchaseInit_Request_LineItem::_Internal {
 public:
  using HasBits = decltype(std::declval<CInventory_PurchaseInit_Request_LineItem>()._has_bits_);
  static void set_has_itemdefid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_quantity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CInventory_PurchaseInit_Request_LineItem::CInventory_PurchaseInit_Request_LineItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CInventory_PurchaseInit_Request.LineItem)
}
CInventory_PurchaseInit_Request_LineItem::CInventory_PurchaseInit_Request_LineItem(const CInventory_PurchaseInit_Request_LineItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&itemdefid_, &from.itemdefid_,
    static_cast<size_t>(reinterpret_cast<char*>(&quantity_) -
    reinterpret_cast<char*>(&itemdefid_)) + sizeof(quantity_));
  // @@protoc_insertion_point(copy_constructor:CInventory_PurchaseInit_Request.LineItem)
}

inline void CInventory_PurchaseInit_Request_LineItem::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&itemdefid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&quantity_) -
    reinterpret_cast<char*>(&itemdefid_)) + sizeof(quantity_));
}

CInventory_PurchaseInit_Request_LineItem::~CInventory_PurchaseInit_Request_LineItem() {
  // @@protoc_insertion_point(destructor:CInventory_PurchaseInit_Request.LineItem)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CInventory_PurchaseInit_Request_LineItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CInventory_PurchaseInit_Request_LineItem::ArenaDtor(void* object) {
  CInventory_PurchaseInit_Request_LineItem* _this = reinterpret_cast< CInventory_PurchaseInit_Request_LineItem* >(object);
  (void)_this;
}
void CInventory_PurchaseInit_Request_LineItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CInventory_PurchaseInit_Request_LineItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CInventory_PurchaseInit_Request_LineItem::Clear() {
// @@protoc_insertion_point(message_clear_start:CInventory_PurchaseInit_Request.LineItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&itemdefid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&quantity_) -
        reinterpret_cast<char*>(&itemdefid_)) + sizeof(quantity_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CInventory_PurchaseInit_Request_LineItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 itemdefid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_itemdefid(&has_bits);
          itemdefid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 quantity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_quantity(&has_bits);
          quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CInventory_PurchaseInit_Request_LineItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CInventory_PurchaseInit_Request.LineItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 itemdefid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_itemdefid(), target);
  }

  // optional uint32 quantity = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_quantity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CInventory_PurchaseInit_Request.LineItem)
  return target;
}

size_t CInventory_PurchaseInit_Request_LineItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CInventory_PurchaseInit_Request.LineItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 itemdefid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_itemdefid());
    }

    // optional uint32 quantity = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_quantity());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CInventory_PurchaseInit_Request_LineItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CInventory_PurchaseInit_Request_LineItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CInventory_PurchaseInit_Request_LineItem::GetClassData() const { return &_class_data_; }

void CInventory_PurchaseInit_Request_LineItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CInventory_PurchaseInit_Request_LineItem *>(to)->MergeFrom(
      static_cast<const CInventory_PurchaseInit_Request_LineItem &>(from));
}


void CInventory_PurchaseInit_Request_LineItem::MergeFrom(const CInventory_PurchaseInit_Request_LineItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CInventory_PurchaseInit_Request.LineItem)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      itemdefid_ = from.itemdefid_;
    }
    if (cached_has_bits & 0x00000002u) {
      quantity_ = from.quantity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CInventory_PurchaseInit_Request_LineItem::CopyFrom(const CInventory_PurchaseInit_Request_LineItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CInventory_PurchaseInit_Request.LineItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CInventory_PurchaseInit_Request_LineItem::IsInitialized() const {
  return true;
}

void CInventory_PurchaseInit_Request_LineItem::InternalSwap(CInventory_PurchaseInit_Request_LineItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CInventory_PurchaseInit_Request_LineItem, quantity_)
      + sizeof(CInventory_PurchaseInit_Request_LineItem::quantity_)
      - PROTOBUF_FIELD_OFFSET(CInventory_PurchaseInit_Request_LineItem, itemdefid_)>(
          reinterpret_cast<char*>(&itemdefid_),
          reinterpret_cast<char*>(&other->itemdefid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CInventory_PurchaseInit_Request_LineItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5finventory_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5finventory_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5finventory_2esteamclient_2eproto[17]);
}

// ===================================================================

class CInventory_PurchaseInit_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CInventory_PurchaseInit_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CInventory_PurchaseInit_Request::CInventory_PurchaseInit_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  line_items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CInventory_PurchaseInit_Request)
}
CInventory_PurchaseInit_Request::CInventory_PurchaseInit_Request(const CInventory_PurchaseInit_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      line_items_(from.line_items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&language_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(language_));
  // @@protoc_insertion_point(copy_constructor:CInventory_PurchaseInit_Request)
}

inline void CInventory_PurchaseInit_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&appid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&language_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(language_));
}

CInventory_PurchaseInit_Request::~CInventory_PurchaseInit_Request() {
  // @@protoc_insertion_point(destructor:CInventory_PurchaseInit_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CInventory_PurchaseInit_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CInventory_PurchaseInit_Request::ArenaDtor(void* object) {
  CInventory_PurchaseInit_Request* _this = reinterpret_cast< CInventory_PurchaseInit_Request* >(object);
  (void)_this;
}
void CInventory_PurchaseInit_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CInventory_PurchaseInit_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CInventory_PurchaseInit_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CInventory_PurchaseInit_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  line_items_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&language_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(language_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CInventory_PurchaseInit_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 language = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_language(&has_bits);
          language_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CInventory_PurchaseInit_Request.LineItem line_items = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_line_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CInventory_PurchaseInit_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CInventory_PurchaseInit_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional int32 language = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_language(), target);
  }

  // repeated .CInventory_PurchaseInit_Request.LineItem line_items = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_line_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_line_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CInventory_PurchaseInit_Request)
  return target;
}

size_t CInventory_PurchaseInit_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CInventory_PurchaseInit_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CInventory_PurchaseInit_Request.LineItem line_items = 3;
  total_size += 1UL * this->_internal_line_items_size();
  for (const auto& msg : this->line_items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional int32 language = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_language());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CInventory_PurchaseInit_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CInventory_PurchaseInit_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CInventory_PurchaseInit_Request::GetClassData() const { return &_class_data_; }

void CInventory_PurchaseInit_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CInventory_PurchaseInit_Request *>(to)->MergeFrom(
      static_cast<const CInventory_PurchaseInit_Request &>(from));
}


void CInventory_PurchaseInit_Request::MergeFrom(const CInventory_PurchaseInit_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CInventory_PurchaseInit_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  line_items_.MergeFrom(from.line_items_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000002u) {
      language_ = from.language_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CInventory_PurchaseInit_Request::CopyFrom(const CInventory_PurchaseInit_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CInventory_PurchaseInit_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CInventory_PurchaseInit_Request::IsInitialized() const {
  return true;
}

void CInventory_PurchaseInit_Request::InternalSwap(CInventory_PurchaseInit_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  line_items_.InternalSwap(&other->line_items_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CInventory_PurchaseInit_Request, language_)
      + sizeof(CInventory_PurchaseInit_Request::language_)
      - PROTOBUF_FIELD_OFFSET(CInventory_PurchaseInit_Request, appid_)>(
          reinterpret_cast<char*>(&appid_),
          reinterpret_cast<char*>(&other->appid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CInventory_PurchaseInit_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5finventory_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5finventory_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5finventory_2esteamclient_2eproto[18]);
}

// ===================================================================

class CInventory_PurchaseInit_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CInventory_PurchaseInit_Response>()._has_bits_);
  static void set_has_orderid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_transid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CInventory_PurchaseInit_Response::CInventory_PurchaseInit_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CInventory_PurchaseInit_Response)
}
CInventory_PurchaseInit_Response::CInventory_PurchaseInit_Response(const CInventory_PurchaseInit_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&orderid_, &from.orderid_,
    static_cast<size_t>(reinterpret_cast<char*>(&transid_) -
    reinterpret_cast<char*>(&orderid_)) + sizeof(transid_));
  // @@protoc_insertion_point(copy_constructor:CInventory_PurchaseInit_Response)
}

inline void CInventory_PurchaseInit_Response::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&orderid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&transid_) -
    reinterpret_cast<char*>(&orderid_)) + sizeof(transid_));
}

CInventory_PurchaseInit_Response::~CInventory_PurchaseInit_Response() {
  // @@protoc_insertion_point(destructor:CInventory_PurchaseInit_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CInventory_PurchaseInit_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CInventory_PurchaseInit_Response::ArenaDtor(void* object) {
  CInventory_PurchaseInit_Response* _this = reinterpret_cast< CInventory_PurchaseInit_Response* >(object);
  (void)_this;
}
void CInventory_PurchaseInit_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CInventory_PurchaseInit_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CInventory_PurchaseInit_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CInventory_PurchaseInit_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&orderid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&transid_) -
        reinterpret_cast<char*>(&orderid_)) + sizeof(transid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CInventory_PurchaseInit_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 orderid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_orderid(&has_bits);
          orderid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 transid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_transid(&has_bits);
          transid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CInventory_PurchaseInit_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CInventory_PurchaseInit_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 orderid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_orderid(), target);
  }

  // optional uint64 transid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_transid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CInventory_PurchaseInit_Response)
  return target;
}

size_t CInventory_PurchaseInit_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CInventory_PurchaseInit_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 orderid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_orderid());
    }

    // optional uint64 transid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_transid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CInventory_PurchaseInit_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CInventory_PurchaseInit_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CInventory_PurchaseInit_Response::GetClassData() const { return &_class_data_; }

void CInventory_PurchaseInit_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CInventory_PurchaseInit_Response *>(to)->MergeFrom(
      static_cast<const CInventory_PurchaseInit_Response &>(from));
}


void CInventory_PurchaseInit_Response::MergeFrom(const CInventory_PurchaseInit_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CInventory_PurchaseInit_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      orderid_ = from.orderid_;
    }
    if (cached_has_bits & 0x00000002u) {
      transid_ = from.transid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CInventory_PurchaseInit_Response::CopyFrom(const CInventory_PurchaseInit_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CInventory_PurchaseInit_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CInventory_PurchaseInit_Response::IsInitialized() const {
  return true;
}

void CInventory_PurchaseInit_Response::InternalSwap(CInventory_PurchaseInit_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CInventory_PurchaseInit_Response, transid_)
      + sizeof(CInventory_PurchaseInit_Response::transid_)
      - PROTOBUF_FIELD_OFFSET(CInventory_PurchaseInit_Response, orderid_)>(
          reinterpret_cast<char*>(&orderid_),
          reinterpret_cast<char*>(&other->orderid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CInventory_PurchaseInit_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5finventory_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5finventory_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5finventory_2esteamclient_2eproto[19]);
}

// ===================================================================

class CInventory_PurchaseFinalize_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CInventory_PurchaseFinalize_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_orderid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CInventory_PurchaseFinalize_Request::CInventory_PurchaseFinalize_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CInventory_PurchaseFinalize_Request)
}
CInventory_PurchaseFinalize_Request::CInventory_PurchaseFinalize_Request(const CInventory_PurchaseFinalize_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&orderid_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(orderid_));
  // @@protoc_insertion_point(copy_constructor:CInventory_PurchaseFinalize_Request)
}

inline void CInventory_PurchaseFinalize_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&appid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&orderid_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(orderid_));
}

CInventory_PurchaseFinalize_Request::~CInventory_PurchaseFinalize_Request() {
  // @@protoc_insertion_point(destructor:CInventory_PurchaseFinalize_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CInventory_PurchaseFinalize_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CInventory_PurchaseFinalize_Request::ArenaDtor(void* object) {
  CInventory_PurchaseFinalize_Request* _this = reinterpret_cast< CInventory_PurchaseFinalize_Request* >(object);
  (void)_this;
}
void CInventory_PurchaseFinalize_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CInventory_PurchaseFinalize_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CInventory_PurchaseFinalize_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CInventory_PurchaseFinalize_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&orderid_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(orderid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CInventory_PurchaseFinalize_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 language = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_language(&has_bits);
          language_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 orderid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_orderid(&has_bits);
          orderid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CInventory_PurchaseFinalize_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CInventory_PurchaseFinalize_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional int32 language = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_language(), target);
  }

  // optional uint64 orderid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_orderid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CInventory_PurchaseFinalize_Request)
  return target;
}

size_t CInventory_PurchaseFinalize_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CInventory_PurchaseFinalize_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional int32 language = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_language());
    }

    // optional uint64 orderid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_orderid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CInventory_PurchaseFinalize_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CInventory_PurchaseFinalize_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CInventory_PurchaseFinalize_Request::GetClassData() const { return &_class_data_; }

void CInventory_PurchaseFinalize_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CInventory_PurchaseFinalize_Request *>(to)->MergeFrom(
      static_cast<const CInventory_PurchaseFinalize_Request &>(from));
}


void CInventory_PurchaseFinalize_Request::MergeFrom(const CInventory_PurchaseFinalize_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CInventory_PurchaseFinalize_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000002u) {
      language_ = from.language_;
    }
    if (cached_has_bits & 0x00000004u) {
      orderid_ = from.orderid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CInventory_PurchaseFinalize_Request::CopyFrom(const CInventory_PurchaseFinalize_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CInventory_PurchaseFinalize_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CInventory_PurchaseFinalize_Request::IsInitialized() const {
  return true;
}

void CInventory_PurchaseFinalize_Request::InternalSwap(CInventory_PurchaseFinalize_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CInventory_PurchaseFinalize_Request, orderid_)
      + sizeof(CInventory_PurchaseFinalize_Request::orderid_)
      - PROTOBUF_FIELD_OFFSET(CInventory_PurchaseFinalize_Request, appid_)>(
          reinterpret_cast<char*>(&appid_),
          reinterpret_cast<char*>(&other->appid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CInventory_PurchaseFinalize_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5finventory_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5finventory_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5finventory_2esteamclient_2eproto[20]);
}

// ===================================================================

class CInventory_InspectItem_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CInventory_InspectItem_Request>()._has_bits_);
  static void set_has_itemdefid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_itemid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tags(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CInventory_InspectItem_Request::CInventory_InspectItem_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CInventory_InspectItem_Request)
}
CInventory_InspectItem_Request::CInventory_InspectItem_Request(const CInventory_InspectItem_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    tags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tags()) {
    tags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tags(), 
      GetArenaForAllocation());
  }
  ::memcpy(&itemdefid_, &from.itemdefid_,
    static_cast<size_t>(reinterpret_cast<char*>(&itemid_) -
    reinterpret_cast<char*>(&itemdefid_)) + sizeof(itemid_));
  // @@protoc_insertion_point(copy_constructor:CInventory_InspectItem_Request)
}

inline void CInventory_InspectItem_Request::SharedCtor() {
tags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  tags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&itemdefid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&itemid_) -
    reinterpret_cast<char*>(&itemdefid_)) + sizeof(itemid_));
}

CInventory_InspectItem_Request::~CInventory_InspectItem_Request() {
  // @@protoc_insertion_point(destructor:CInventory_InspectItem_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CInventory_InspectItem_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tags_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CInventory_InspectItem_Request::ArenaDtor(void* object) {
  CInventory_InspectItem_Request* _this = reinterpret_cast< CInventory_InspectItem_Request* >(object);
  (void)_this;
}
void CInventory_InspectItem_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CInventory_InspectItem_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CInventory_InspectItem_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CInventory_InspectItem_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    tags_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&itemdefid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&itemid_) -
        reinterpret_cast<char*>(&itemdefid_)) + sizeof(itemid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CInventory_InspectItem_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 itemdefid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_itemdefid(&has_bits);
          itemdefid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 itemid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_itemid(&has_bits);
          itemid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional string tags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_tags();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CInventory_InspectItem_Request.tags");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CInventory_InspectItem_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CInventory_InspectItem_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 itemdefid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_itemdefid(), target);
  }

  // optional fixed64 itemid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_itemid(), target);
  }

  // optional string tags = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tags().data(), static_cast<int>(this->_internal_tags().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CInventory_InspectItem_Request.tags");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_tags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CInventory_InspectItem_Request)
  return target;
}

size_t CInventory_InspectItem_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CInventory_InspectItem_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string tags = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tags());
    }

    // optional uint64 itemdefid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_itemdefid());
    }

    // optional fixed64 itemid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CInventory_InspectItem_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CInventory_InspectItem_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CInventory_InspectItem_Request::GetClassData() const { return &_class_data_; }

void CInventory_InspectItem_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CInventory_InspectItem_Request *>(to)->MergeFrom(
      static_cast<const CInventory_InspectItem_Request &>(from));
}


void CInventory_InspectItem_Request::MergeFrom(const CInventory_InspectItem_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CInventory_InspectItem_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_tags(from._internal_tags());
    }
    if (cached_has_bits & 0x00000002u) {
      itemdefid_ = from.itemdefid_;
    }
    if (cached_has_bits & 0x00000004u) {
      itemid_ = from.itemid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CInventory_InspectItem_Request::CopyFrom(const CInventory_InspectItem_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CInventory_InspectItem_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CInventory_InspectItem_Request::IsInitialized() const {
  return true;
}

void CInventory_InspectItem_Request::InternalSwap(CInventory_InspectItem_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tags_, lhs_arena,
      &other->tags_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CInventory_InspectItem_Request, itemid_)
      + sizeof(CInventory_InspectItem_Request::itemid_)
      - PROTOBUF_FIELD_OFFSET(CInventory_InspectItem_Request, itemdefid_)>(
          reinterpret_cast<char*>(&itemdefid_),
          reinterpret_cast<char*>(&other->itemdefid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CInventory_InspectItem_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5finventory_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5finventory_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5finventory_2esteamclient_2eproto[21]);
}

// ===================================================================

class CInventoryClient_NewItems_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CInventoryClient_NewItems_Notification>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CInventory_Response& inventory_response(const CInventoryClient_NewItems_Notification* msg);
  static void set_has_inventory_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CInventory_Response&
CInventoryClient_NewItems_Notification::_Internal::inventory_response(const CInventoryClient_NewItems_Notification* msg) {
  return *msg->inventory_response_;
}
CInventoryClient_NewItems_Notification::CInventoryClient_NewItems_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CInventoryClient_NewItems_Notification)
}
CInventoryClient_NewItems_Notification::CInventoryClient_NewItems_Notification(const CInventoryClient_NewItems_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_inventory_response()) {
    inventory_response_ = new ::CInventory_Response(*from.inventory_response_);
  } else {
    inventory_response_ = nullptr;
  }
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:CInventoryClient_NewItems_Notification)
}

inline void CInventoryClient_NewItems_Notification::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&inventory_response_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&inventory_response_)) + sizeof(appid_));
}

CInventoryClient_NewItems_Notification::~CInventoryClient_NewItems_Notification() {
  // @@protoc_insertion_point(destructor:CInventoryClient_NewItems_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CInventoryClient_NewItems_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete inventory_response_;
}

void CInventoryClient_NewItems_Notification::ArenaDtor(void* object) {
  CInventoryClient_NewItems_Notification* _this = reinterpret_cast< CInventoryClient_NewItems_Notification* >(object);
  (void)_this;
}
void CInventoryClient_NewItems_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CInventoryClient_NewItems_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CInventoryClient_NewItems_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CInventoryClient_NewItems_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(inventory_response_ != nullptr);
    inventory_response_->Clear();
  }
  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CInventoryClient_NewItems_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CInventory_Response inventory_response = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_inventory_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CInventoryClient_NewItems_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CInventoryClient_NewItems_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional .CInventory_Response inventory_response = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::inventory_response(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CInventoryClient_NewItems_Notification)
  return target;
}

size_t CInventoryClient_NewItems_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CInventoryClient_NewItems_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CInventory_Response inventory_response = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inventory_response_);
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CInventoryClient_NewItems_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CInventoryClient_NewItems_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CInventoryClient_NewItems_Notification::GetClassData() const { return &_class_data_; }

void CInventoryClient_NewItems_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CInventoryClient_NewItems_Notification *>(to)->MergeFrom(
      static_cast<const CInventoryClient_NewItems_Notification &>(from));
}


void CInventoryClient_NewItems_Notification::MergeFrom(const CInventoryClient_NewItems_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CInventoryClient_NewItems_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_inventory_response()->::CInventory_Response::MergeFrom(from._internal_inventory_response());
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CInventoryClient_NewItems_Notification::CopyFrom(const CInventoryClient_NewItems_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CInventoryClient_NewItems_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CInventoryClient_NewItems_Notification::IsInitialized() const {
  return true;
}

void CInventoryClient_NewItems_Notification::InternalSwap(CInventoryClient_NewItems_Notification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CInventoryClient_NewItems_Notification, appid_)
      + sizeof(CInventoryClient_NewItems_Notification::appid_)
      - PROTOBUF_FIELD_OFFSET(CInventoryClient_NewItems_Notification, inventory_response_)>(
          reinterpret_cast<char*>(&inventory_response_),
          reinterpret_cast<char*>(&other->inventory_response_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CInventoryClient_NewItems_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5finventory_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5finventory_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5finventory_2esteamclient_2eproto[22]);
}

// ===================================================================

Inventory::~Inventory() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* Inventory::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5finventory_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5finventory_2esteamclient_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* Inventory::GetDescriptor() {
  return descriptor();
}

void Inventory::GetInventory(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CInventory_GetInventory_Request*,
                         ::CInventory_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetInventory() not implemented.");
  done->Run();
}

void Inventory::ExchangeItem(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CInventory_ExchangeItem_Request*,
                         ::CInventory_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ExchangeItem() not implemented.");
  done->Run();
}

void Inventory::GetEligiblePromoItemDefIDs(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CInventory_GetEligiblePromoItemDefIDs_Request*,
                         ::CInventory_GetEligiblePromoItemDefIDs_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetEligiblePromoItemDefIDs() not implemented.");
  done->Run();
}

void Inventory::AddPromoItem(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CInventory_AddItem_Request*,
                         ::CInventory_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AddPromoItem() not implemented.");
  done->Run();
}

void Inventory::SafeModifyItems(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CInventory_ModifyItems_Request*,
                         ::CInventory_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SafeModifyItems() not implemented.");
  done->Run();
}

void Inventory::ConsumePlaytime(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CInventory_ConsumePlaytime_Request*,
                         ::CInventory_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ConsumePlaytime() not implemented.");
  done->Run();
}

void Inventory::ConsumeItem(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CInventory_ConsumeItem_Request*,
                         ::CInventory_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ConsumeItem() not implemented.");
  done->Run();
}

void Inventory::DevGenerateItem(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CInventory_AddItem_Request*,
                         ::CInventory_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method DevGenerateItem() not implemented.");
  done->Run();
}

void Inventory::DevSetNextDrop(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CInventory_DevSetNextDrop_Request*,
                         ::CInventory_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method DevSetNextDrop() not implemented.");
  done->Run();
}

void Inventory::SplitItemStack(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CInventory_SplitItemStack_Request*,
                         ::CInventory_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SplitItemStack() not implemented.");
  done->Run();
}

void Inventory::CombineItemStacks(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CInventory_CombineItemStacks_Request*,
                         ::CInventory_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CombineItemStacks() not implemented.");
  done->Run();
}

void Inventory::GetItemDefMeta(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CInventory_GetItemDefMeta_Request*,
                         ::CInventory_GetItemDefMeta_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetItemDefMeta() not implemented.");
  done->Run();
}

void Inventory::GetUserPurchaseInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CInventory_GetUserPurchaseInfo_Request*,
                         ::CInventory_GetUserPurchaseInfo_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetUserPurchaseInfo() not implemented.");
  done->Run();
}

void Inventory::PurchaseInit(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CInventory_PurchaseInit_Request*,
                         ::CInventory_PurchaseInit_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method PurchaseInit() not implemented.");
  done->Run();
}

void Inventory::PurchaseFinalize(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CInventory_PurchaseFinalize_Request*,
                         ::CInventory_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method PurchaseFinalize() not implemented.");
  done->Run();
}

void Inventory::InspectItem(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CInventory_InspectItem_Request*,
                         ::CInventory_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method InspectItem() not implemented.");
  done->Run();
}

void Inventory::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5finventory_2esteamclient_2eproto[0]);
  switch(method->index()) {
    case 0:
      GetInventory(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CInventory_GetInventory_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CInventory_Response*>(
                 response),
             done);
      break;
    case 1:
      ExchangeItem(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CInventory_ExchangeItem_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CInventory_Response*>(
                 response),
             done);
      break;
    case 2:
      GetEligiblePromoItemDefIDs(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CInventory_GetEligiblePromoItemDefIDs_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CInventory_GetEligiblePromoItemDefIDs_Response*>(
                 response),
             done);
      break;
    case 3:
      AddPromoItem(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CInventory_AddItem_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CInventory_Response*>(
                 response),
             done);
      break;
    case 4:
      SafeModifyItems(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CInventory_ModifyItems_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CInventory_Response*>(
                 response),
             done);
      break;
    case 5:
      ConsumePlaytime(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CInventory_ConsumePlaytime_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CInventory_Response*>(
                 response),
             done);
      break;
    case 6:
      ConsumeItem(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CInventory_ConsumeItem_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CInventory_Response*>(
                 response),
             done);
      break;
    case 7:
      DevGenerateItem(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CInventory_AddItem_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CInventory_Response*>(
                 response),
             done);
      break;
    case 8:
      DevSetNextDrop(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CInventory_DevSetNextDrop_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CInventory_Response*>(
                 response),
             done);
      break;
    case 9:
      SplitItemStack(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CInventory_SplitItemStack_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CInventory_Response*>(
                 response),
             done);
      break;
    case 10:
      CombineItemStacks(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CInventory_CombineItemStacks_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CInventory_Response*>(
                 response),
             done);
      break;
    case 11:
      GetItemDefMeta(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CInventory_GetItemDefMeta_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CInventory_GetItemDefMeta_Response*>(
                 response),
             done);
      break;
    case 12:
      GetUserPurchaseInfo(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CInventory_GetUserPurchaseInfo_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CInventory_GetUserPurchaseInfo_Response*>(
                 response),
             done);
      break;
    case 13:
      PurchaseInit(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CInventory_PurchaseInit_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CInventory_PurchaseInit_Response*>(
                 response),
             done);
      break;
    case 14:
      PurchaseFinalize(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CInventory_PurchaseFinalize_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CInventory_Response*>(
                 response),
             done);
      break;
    case 15:
      InspectItem(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CInventory_InspectItem_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CInventory_Response*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& Inventory::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CInventory_GetInventory_Request::default_instance();
    case 1:
      return ::CInventory_ExchangeItem_Request::default_instance();
    case 2:
      return ::CInventory_GetEligiblePromoItemDefIDs_Request::default_instance();
    case 3:
      return ::CInventory_AddItem_Request::default_instance();
    case 4:
      return ::CInventory_ModifyItems_Request::default_instance();
    case 5:
      return ::CInventory_ConsumePlaytime_Request::default_instance();
    case 6:
      return ::CInventory_ConsumeItem_Request::default_instance();
    case 7:
      return ::CInventory_AddItem_Request::default_instance();
    case 8:
      return ::CInventory_DevSetNextDrop_Request::default_instance();
    case 9:
      return ::CInventory_SplitItemStack_Request::default_instance();
    case 10:
      return ::CInventory_CombineItemStacks_Request::default_instance();
    case 11:
      return ::CInventory_GetItemDefMeta_Request::default_instance();
    case 12:
      return ::CInventory_GetUserPurchaseInfo_Request::default_instance();
    case 13:
      return ::CInventory_PurchaseInit_Request::default_instance();
    case 14:
      return ::CInventory_PurchaseFinalize_Request::default_instance();
    case 15:
      return ::CInventory_InspectItem_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& Inventory::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CInventory_Response::default_instance();
    case 1:
      return ::CInventory_Response::default_instance();
    case 2:
      return ::CInventory_GetEligiblePromoItemDefIDs_Response::default_instance();
    case 3:
      return ::CInventory_Response::default_instance();
    case 4:
      return ::CInventory_Response::default_instance();
    case 5:
      return ::CInventory_Response::default_instance();
    case 6:
      return ::CInventory_Response::default_instance();
    case 7:
      return ::CInventory_Response::default_instance();
    case 8:
      return ::CInventory_Response::default_instance();
    case 9:
      return ::CInventory_Response::default_instance();
    case 10:
      return ::CInventory_Response::default_instance();
    case 11:
      return ::CInventory_GetItemDefMeta_Response::default_instance();
    case 12:
      return ::CInventory_GetUserPurchaseInfo_Response::default_instance();
    case 13:
      return ::CInventory_PurchaseInit_Response::default_instance();
    case 14:
      return ::CInventory_Response::default_instance();
    case 15:
      return ::CInventory_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

Inventory_Stub::Inventory_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
Inventory_Stub::Inventory_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
Inventory_Stub::~Inventory_Stub() {
  if (owns_channel_) delete channel_;
}

void Inventory_Stub::GetInventory(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CInventory_GetInventory_Request* request,
                              ::CInventory_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void Inventory_Stub::ExchangeItem(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CInventory_ExchangeItem_Request* request,
                              ::CInventory_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void Inventory_Stub::GetEligiblePromoItemDefIDs(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CInventory_GetEligiblePromoItemDefIDs_Request* request,
                              ::CInventory_GetEligiblePromoItemDefIDs_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void Inventory_Stub::AddPromoItem(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CInventory_AddItem_Request* request,
                              ::CInventory_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void Inventory_Stub::SafeModifyItems(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CInventory_ModifyItems_Request* request,
                              ::CInventory_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void Inventory_Stub::ConsumePlaytime(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CInventory_ConsumePlaytime_Request* request,
                              ::CInventory_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void Inventory_Stub::ConsumeItem(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CInventory_ConsumeItem_Request* request,
                              ::CInventory_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void Inventory_Stub::DevGenerateItem(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CInventory_AddItem_Request* request,
                              ::CInventory_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}
void Inventory_Stub::DevSetNextDrop(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CInventory_DevSetNextDrop_Request* request,
                              ::CInventory_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(8),
                       controller, request, response, done);
}
void Inventory_Stub::SplitItemStack(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CInventory_SplitItemStack_Request* request,
                              ::CInventory_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(9),
                       controller, request, response, done);
}
void Inventory_Stub::CombineItemStacks(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CInventory_CombineItemStacks_Request* request,
                              ::CInventory_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(10),
                       controller, request, response, done);
}
void Inventory_Stub::GetItemDefMeta(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CInventory_GetItemDefMeta_Request* request,
                              ::CInventory_GetItemDefMeta_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(11),
                       controller, request, response, done);
}
void Inventory_Stub::GetUserPurchaseInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CInventory_GetUserPurchaseInfo_Request* request,
                              ::CInventory_GetUserPurchaseInfo_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(12),
                       controller, request, response, done);
}
void Inventory_Stub::PurchaseInit(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CInventory_PurchaseInit_Request* request,
                              ::CInventory_PurchaseInit_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(13),
                       controller, request, response, done);
}
void Inventory_Stub::PurchaseFinalize(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CInventory_PurchaseFinalize_Request* request,
                              ::CInventory_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(14),
                       controller, request, response, done);
}
void Inventory_Stub::InspectItem(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CInventory_InspectItem_Request* request,
                              ::CInventory_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(15),
                       controller, request, response, done);
}
// ===================================================================

InventoryClient::~InventoryClient() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* InventoryClient::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5finventory_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5finventory_2esteamclient_2eproto[1];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* InventoryClient::GetDescriptor() {
  return descriptor();
}

void InventoryClient::NotifyNewItems(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CInventoryClient_NewItems_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyNewItems() not implemented.");
  done->Run();
}

void InventoryClient::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5finventory_2esteamclient_2eproto[1]);
  switch(method->index()) {
    case 0:
      NotifyNewItems(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CInventoryClient_NewItems_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& InventoryClient::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CInventoryClient_NewItems_Notification::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& InventoryClient::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::NoResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

InventoryClient_Stub::InventoryClient_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
InventoryClient_Stub::InventoryClient_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
InventoryClient_Stub::~InventoryClient_Stub() {
  if (owns_channel_) delete channel_;
}

void InventoryClient_Stub::NotifyNewItems(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CInventoryClient_NewItems_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CInventory_GetInventory_Request* Arena::CreateMaybeMessage< ::CInventory_GetInventory_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CInventory_GetInventory_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CInventory_Response* Arena::CreateMaybeMessage< ::CInventory_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CInventory_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CInventory_ExchangeItem_Request* Arena::CreateMaybeMessage< ::CInventory_ExchangeItem_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CInventory_ExchangeItem_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CInventory_GetEligiblePromoItemDefIDs_Request* Arena::CreateMaybeMessage< ::CInventory_GetEligiblePromoItemDefIDs_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CInventory_GetEligiblePromoItemDefIDs_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CInventory_GetEligiblePromoItemDefIDs_Response* Arena::CreateMaybeMessage< ::CInventory_GetEligiblePromoItemDefIDs_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CInventory_GetEligiblePromoItemDefIDs_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CInventory_AddItem_Request* Arena::CreateMaybeMessage< ::CInventory_AddItem_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CInventory_AddItem_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CInventory_ModifyItems_Request_ItemPropertyUpdate* Arena::CreateMaybeMessage< ::CInventory_ModifyItems_Request_ItemPropertyUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CInventory_ModifyItems_Request_ItemPropertyUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::CInventory_ModifyItems_Request* Arena::CreateMaybeMessage< ::CInventory_ModifyItems_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CInventory_ModifyItems_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CInventory_ConsumePlaytime_Request* Arena::CreateMaybeMessage< ::CInventory_ConsumePlaytime_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CInventory_ConsumePlaytime_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CInventory_ConsumeItem_Request* Arena::CreateMaybeMessage< ::CInventory_ConsumeItem_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CInventory_ConsumeItem_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CInventory_DevSetNextDrop_Request* Arena::CreateMaybeMessage< ::CInventory_DevSetNextDrop_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CInventory_DevSetNextDrop_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CInventory_SplitItemStack_Request* Arena::CreateMaybeMessage< ::CInventory_SplitItemStack_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CInventory_SplitItemStack_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CInventory_CombineItemStacks_Request* Arena::CreateMaybeMessage< ::CInventory_CombineItemStacks_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CInventory_CombineItemStacks_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CInventory_GetItemDefMeta_Request* Arena::CreateMaybeMessage< ::CInventory_GetItemDefMeta_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CInventory_GetItemDefMeta_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CInventory_GetItemDefMeta_Response* Arena::CreateMaybeMessage< ::CInventory_GetItemDefMeta_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CInventory_GetItemDefMeta_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CInventory_GetUserPurchaseInfo_Request* Arena::CreateMaybeMessage< ::CInventory_GetUserPurchaseInfo_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CInventory_GetUserPurchaseInfo_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CInventory_GetUserPurchaseInfo_Response* Arena::CreateMaybeMessage< ::CInventory_GetUserPurchaseInfo_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CInventory_GetUserPurchaseInfo_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CInventory_PurchaseInit_Request_LineItem* Arena::CreateMaybeMessage< ::CInventory_PurchaseInit_Request_LineItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CInventory_PurchaseInit_Request_LineItem >(arena);
}
template<> PROTOBUF_NOINLINE ::CInventory_PurchaseInit_Request* Arena::CreateMaybeMessage< ::CInventory_PurchaseInit_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CInventory_PurchaseInit_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CInventory_PurchaseInit_Response* Arena::CreateMaybeMessage< ::CInventory_PurchaseInit_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CInventory_PurchaseInit_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CInventory_PurchaseFinalize_Request* Arena::CreateMaybeMessage< ::CInventory_PurchaseFinalize_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CInventory_PurchaseFinalize_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CInventory_InspectItem_Request* Arena::CreateMaybeMessage< ::CInventory_InspectItem_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CInventory_InspectItem_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CInventoryClient_NewItems_Notification* Arena::CreateMaybeMessage< ::CInventoryClient_NewItems_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CInventoryClient_NewItems_Notification >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
