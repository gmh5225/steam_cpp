// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_offline.steamclient.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_steammessages_5foffline_2esteamclient_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_steammessages_5foffline_2esteamclient_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "steammessages_base.pb.h"
#include "steammessages_unified_base.steamclient.pb.h"
#include "offline_ticket.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_5foffline_2esteamclient_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_5foffline_2esteamclient_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5foffline_2esteamclient_2eproto;
class COffline_GetOfflineLogonTicket_Request;
struct COffline_GetOfflineLogonTicket_RequestDefaultTypeInternal;
extern COffline_GetOfflineLogonTicket_RequestDefaultTypeInternal _COffline_GetOfflineLogonTicket_Request_default_instance_;
class COffline_GetOfflineLogonTicket_Response;
struct COffline_GetOfflineLogonTicket_ResponseDefaultTypeInternal;
extern COffline_GetOfflineLogonTicket_ResponseDefaultTypeInternal _COffline_GetOfflineLogonTicket_Response_default_instance_;
class COffline_GetUnsignedOfflineLogonTicket_Request;
struct COffline_GetUnsignedOfflineLogonTicket_RequestDefaultTypeInternal;
extern COffline_GetUnsignedOfflineLogonTicket_RequestDefaultTypeInternal _COffline_GetUnsignedOfflineLogonTicket_Request_default_instance_;
class COffline_GetUnsignedOfflineLogonTicket_Response;
struct COffline_GetUnsignedOfflineLogonTicket_ResponseDefaultTypeInternal;
extern COffline_GetUnsignedOfflineLogonTicket_ResponseDefaultTypeInternal _COffline_GetUnsignedOfflineLogonTicket_Response_default_instance_;
class COffline_OfflineLogonTicket;
struct COffline_OfflineLogonTicketDefaultTypeInternal;
extern COffline_OfflineLogonTicketDefaultTypeInternal _COffline_OfflineLogonTicket_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::COffline_GetOfflineLogonTicket_Request* Arena::CreateMaybeMessage<::COffline_GetOfflineLogonTicket_Request>(Arena*);
template<> ::COffline_GetOfflineLogonTicket_Response* Arena::CreateMaybeMessage<::COffline_GetOfflineLogonTicket_Response>(Arena*);
template<> ::COffline_GetUnsignedOfflineLogonTicket_Request* Arena::CreateMaybeMessage<::COffline_GetUnsignedOfflineLogonTicket_Request>(Arena*);
template<> ::COffline_GetUnsignedOfflineLogonTicket_Response* Arena::CreateMaybeMessage<::COffline_GetUnsignedOfflineLogonTicket_Response>(Arena*);
template<> ::COffline_OfflineLogonTicket* Arena::CreateMaybeMessage<::COffline_OfflineLogonTicket>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class COffline_GetOfflineLogonTicket_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:COffline_GetOfflineLogonTicket_Request) */ {
 public:
  inline COffline_GetOfflineLogonTicket_Request() : COffline_GetOfflineLogonTicket_Request(nullptr) {}
  ~COffline_GetOfflineLogonTicket_Request() override;
  explicit constexpr COffline_GetOfflineLogonTicket_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  COffline_GetOfflineLogonTicket_Request(const COffline_GetOfflineLogonTicket_Request& from);
  COffline_GetOfflineLogonTicket_Request(COffline_GetOfflineLogonTicket_Request&& from) noexcept
    : COffline_GetOfflineLogonTicket_Request() {
    *this = ::std::move(from);
  }

  inline COffline_GetOfflineLogonTicket_Request& operator=(const COffline_GetOfflineLogonTicket_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline COffline_GetOfflineLogonTicket_Request& operator=(COffline_GetOfflineLogonTicket_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const COffline_GetOfflineLogonTicket_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const COffline_GetOfflineLogonTicket_Request* internal_default_instance() {
    return reinterpret_cast<const COffline_GetOfflineLogonTicket_Request*>(
               &_COffline_GetOfflineLogonTicket_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(COffline_GetOfflineLogonTicket_Request& a, COffline_GetOfflineLogonTicket_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(COffline_GetOfflineLogonTicket_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(COffline_GetOfflineLogonTicket_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  COffline_GetOfflineLogonTicket_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<COffline_GetOfflineLogonTicket_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const COffline_GetOfflineLogonTicket_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const COffline_GetOfflineLogonTicket_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(COffline_GetOfflineLogonTicket_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "COffline_GetOfflineLogonTicket_Request";
  }
  protected:
  explicit COffline_GetOfflineLogonTicket_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriorityFieldNumber = 1,
    kPerformEncryptionFieldNumber = 2,
  };
  // optional uint32 priority = 1;
  bool has_priority() const;
  private:
  bool _internal_has_priority() const;
  public:
  void clear_priority();
  uint32_t priority() const;
  void set_priority(uint32_t value);
  private:
  uint32_t _internal_priority() const;
  void _internal_set_priority(uint32_t value);
  public:

  // optional bool perform_encryption = 2;
  bool has_perform_encryption() const;
  private:
  bool _internal_has_perform_encryption() const;
  public:
  void clear_perform_encryption();
  bool perform_encryption() const;
  void set_perform_encryption(bool value);
  private:
  bool _internal_perform_encryption() const;
  void _internal_set_perform_encryption(bool value);
  public:

  // @@protoc_insertion_point(class_scope:COffline_GetOfflineLogonTicket_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t priority_;
  bool perform_encryption_;
  friend struct ::TableStruct_steammessages_5foffline_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class COffline_GetOfflineLogonTicket_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:COffline_GetOfflineLogonTicket_Response) */ {
 public:
  inline COffline_GetOfflineLogonTicket_Response() : COffline_GetOfflineLogonTicket_Response(nullptr) {}
  ~COffline_GetOfflineLogonTicket_Response() override;
  explicit constexpr COffline_GetOfflineLogonTicket_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  COffline_GetOfflineLogonTicket_Response(const COffline_GetOfflineLogonTicket_Response& from);
  COffline_GetOfflineLogonTicket_Response(COffline_GetOfflineLogonTicket_Response&& from) noexcept
    : COffline_GetOfflineLogonTicket_Response() {
    *this = ::std::move(from);
  }

  inline COffline_GetOfflineLogonTicket_Response& operator=(const COffline_GetOfflineLogonTicket_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline COffline_GetOfflineLogonTicket_Response& operator=(COffline_GetOfflineLogonTicket_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const COffline_GetOfflineLogonTicket_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const COffline_GetOfflineLogonTicket_Response* internal_default_instance() {
    return reinterpret_cast<const COffline_GetOfflineLogonTicket_Response*>(
               &_COffline_GetOfflineLogonTicket_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(COffline_GetOfflineLogonTicket_Response& a, COffline_GetOfflineLogonTicket_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(COffline_GetOfflineLogonTicket_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(COffline_GetOfflineLogonTicket_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  COffline_GetOfflineLogonTicket_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<COffline_GetOfflineLogonTicket_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const COffline_GetOfflineLogonTicket_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const COffline_GetOfflineLogonTicket_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(COffline_GetOfflineLogonTicket_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "COffline_GetOfflineLogonTicket_Response";
  }
  protected:
  explicit COffline_GetOfflineLogonTicket_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSerializedTicketFieldNumber = 1,
    kSignatureFieldNumber = 2,
    kEncryptedTicketFieldNumber = 3,
  };
  // optional bytes serialized_ticket = 1;
  bool has_serialized_ticket() const;
  private:
  bool _internal_has_serialized_ticket() const;
  public:
  void clear_serialized_ticket();
  const std::string& serialized_ticket() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serialized_ticket(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serialized_ticket();
  PROTOBUF_NODISCARD std::string* release_serialized_ticket();
  void set_allocated_serialized_ticket(std::string* serialized_ticket);
  private:
  const std::string& _internal_serialized_ticket() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serialized_ticket(const std::string& value);
  std::string* _internal_mutable_serialized_ticket();
  public:

  // optional bytes signature = 2;
  bool has_signature() const;
  private:
  bool _internal_has_signature() const;
  public:
  void clear_signature();
  const std::string& signature() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_signature(ArgT0&& arg0, ArgT... args);
  std::string* mutable_signature();
  PROTOBUF_NODISCARD std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // optional .Offline_Ticket encrypted_ticket = 3;
  bool has_encrypted_ticket() const;
  private:
  bool _internal_has_encrypted_ticket() const;
  public:
  void clear_encrypted_ticket();
  const ::Offline_Ticket& encrypted_ticket() const;
  PROTOBUF_NODISCARD ::Offline_Ticket* release_encrypted_ticket();
  ::Offline_Ticket* mutable_encrypted_ticket();
  void set_allocated_encrypted_ticket(::Offline_Ticket* encrypted_ticket);
  private:
  const ::Offline_Ticket& _internal_encrypted_ticket() const;
  ::Offline_Ticket* _internal_mutable_encrypted_ticket();
  public:
  void unsafe_arena_set_allocated_encrypted_ticket(
      ::Offline_Ticket* encrypted_ticket);
  ::Offline_Ticket* unsafe_arena_release_encrypted_ticket();

  // @@protoc_insertion_point(class_scope:COffline_GetOfflineLogonTicket_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serialized_ticket_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  ::Offline_Ticket* encrypted_ticket_;
  friend struct ::TableStruct_steammessages_5foffline_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class COffline_GetUnsignedOfflineLogonTicket_Request final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:COffline_GetUnsignedOfflineLogonTicket_Request) */ {
 public:
  inline COffline_GetUnsignedOfflineLogonTicket_Request() : COffline_GetUnsignedOfflineLogonTicket_Request(nullptr) {}
  explicit constexpr COffline_GetUnsignedOfflineLogonTicket_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  COffline_GetUnsignedOfflineLogonTicket_Request(const COffline_GetUnsignedOfflineLogonTicket_Request& from);
  COffline_GetUnsignedOfflineLogonTicket_Request(COffline_GetUnsignedOfflineLogonTicket_Request&& from) noexcept
    : COffline_GetUnsignedOfflineLogonTicket_Request() {
    *this = ::std::move(from);
  }

  inline COffline_GetUnsignedOfflineLogonTicket_Request& operator=(const COffline_GetUnsignedOfflineLogonTicket_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline COffline_GetUnsignedOfflineLogonTicket_Request& operator=(COffline_GetUnsignedOfflineLogonTicket_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const COffline_GetUnsignedOfflineLogonTicket_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const COffline_GetUnsignedOfflineLogonTicket_Request* internal_default_instance() {
    return reinterpret_cast<const COffline_GetUnsignedOfflineLogonTicket_Request*>(
               &_COffline_GetUnsignedOfflineLogonTicket_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(COffline_GetUnsignedOfflineLogonTicket_Request& a, COffline_GetUnsignedOfflineLogonTicket_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(COffline_GetUnsignedOfflineLogonTicket_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(COffline_GetUnsignedOfflineLogonTicket_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  COffline_GetUnsignedOfflineLogonTicket_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<COffline_GetUnsignedOfflineLogonTicket_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const COffline_GetUnsignedOfflineLogonTicket_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const COffline_GetUnsignedOfflineLogonTicket_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "COffline_GetUnsignedOfflineLogonTicket_Request";
  }
  protected:
  explicit COffline_GetUnsignedOfflineLogonTicket_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:COffline_GetUnsignedOfflineLogonTicket_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5foffline_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class COffline_OfflineLogonTicket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:COffline_OfflineLogonTicket) */ {
 public:
  inline COffline_OfflineLogonTicket() : COffline_OfflineLogonTicket(nullptr) {}
  ~COffline_OfflineLogonTicket() override;
  explicit constexpr COffline_OfflineLogonTicket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  COffline_OfflineLogonTicket(const COffline_OfflineLogonTicket& from);
  COffline_OfflineLogonTicket(COffline_OfflineLogonTicket&& from) noexcept
    : COffline_OfflineLogonTicket() {
    *this = ::std::move(from);
  }

  inline COffline_OfflineLogonTicket& operator=(const COffline_OfflineLogonTicket& from) {
    CopyFrom(from);
    return *this;
  }
  inline COffline_OfflineLogonTicket& operator=(COffline_OfflineLogonTicket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const COffline_OfflineLogonTicket& default_instance() {
    return *internal_default_instance();
  }
  static inline const COffline_OfflineLogonTicket* internal_default_instance() {
    return reinterpret_cast<const COffline_OfflineLogonTicket*>(
               &_COffline_OfflineLogonTicket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(COffline_OfflineLogonTicket& a, COffline_OfflineLogonTicket& b) {
    a.Swap(&b);
  }
  inline void Swap(COffline_OfflineLogonTicket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(COffline_OfflineLogonTicket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  COffline_OfflineLogonTicket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<COffline_OfflineLogonTicket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const COffline_OfflineLogonTicket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const COffline_OfflineLogonTicket& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(COffline_OfflineLogonTicket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "COffline_OfflineLogonTicket";
  }
  protected:
  explicit COffline_OfflineLogonTicket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountidFieldNumber = 1,
    kRtime32CreationTimeFieldNumber = 2,
  };
  // optional uint32 accountid = 1;
  bool has_accountid() const;
  private:
  bool _internal_has_accountid() const;
  public:
  void clear_accountid();
  uint32_t accountid() const;
  void set_accountid(uint32_t value);
  private:
  uint32_t _internal_accountid() const;
  void _internal_set_accountid(uint32_t value);
  public:

  // optional fixed32 rtime32_creation_time = 2;
  bool has_rtime32_creation_time() const;
  private:
  bool _internal_has_rtime32_creation_time() const;
  public:
  void clear_rtime32_creation_time();
  uint32_t rtime32_creation_time() const;
  void set_rtime32_creation_time(uint32_t value);
  private:
  uint32_t _internal_rtime32_creation_time() const;
  void _internal_set_rtime32_creation_time(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:COffline_OfflineLogonTicket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t accountid_;
  uint32_t rtime32_creation_time_;
  friend struct ::TableStruct_steammessages_5foffline_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class COffline_GetUnsignedOfflineLogonTicket_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:COffline_GetUnsignedOfflineLogonTicket_Response) */ {
 public:
  inline COffline_GetUnsignedOfflineLogonTicket_Response() : COffline_GetUnsignedOfflineLogonTicket_Response(nullptr) {}
  ~COffline_GetUnsignedOfflineLogonTicket_Response() override;
  explicit constexpr COffline_GetUnsignedOfflineLogonTicket_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  COffline_GetUnsignedOfflineLogonTicket_Response(const COffline_GetUnsignedOfflineLogonTicket_Response& from);
  COffline_GetUnsignedOfflineLogonTicket_Response(COffline_GetUnsignedOfflineLogonTicket_Response&& from) noexcept
    : COffline_GetUnsignedOfflineLogonTicket_Response() {
    *this = ::std::move(from);
  }

  inline COffline_GetUnsignedOfflineLogonTicket_Response& operator=(const COffline_GetUnsignedOfflineLogonTicket_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline COffline_GetUnsignedOfflineLogonTicket_Response& operator=(COffline_GetUnsignedOfflineLogonTicket_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const COffline_GetUnsignedOfflineLogonTicket_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const COffline_GetUnsignedOfflineLogonTicket_Response* internal_default_instance() {
    return reinterpret_cast<const COffline_GetUnsignedOfflineLogonTicket_Response*>(
               &_COffline_GetUnsignedOfflineLogonTicket_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(COffline_GetUnsignedOfflineLogonTicket_Response& a, COffline_GetUnsignedOfflineLogonTicket_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(COffline_GetUnsignedOfflineLogonTicket_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(COffline_GetUnsignedOfflineLogonTicket_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  COffline_GetUnsignedOfflineLogonTicket_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<COffline_GetUnsignedOfflineLogonTicket_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const COffline_GetUnsignedOfflineLogonTicket_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const COffline_GetUnsignedOfflineLogonTicket_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(COffline_GetUnsignedOfflineLogonTicket_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "COffline_GetUnsignedOfflineLogonTicket_Response";
  }
  protected:
  explicit COffline_GetUnsignedOfflineLogonTicket_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTicketFieldNumber = 1,
  };
  // optional .COffline_OfflineLogonTicket ticket = 1;
  bool has_ticket() const;
  private:
  bool _internal_has_ticket() const;
  public:
  void clear_ticket();
  const ::COffline_OfflineLogonTicket& ticket() const;
  PROTOBUF_NODISCARD ::COffline_OfflineLogonTicket* release_ticket();
  ::COffline_OfflineLogonTicket* mutable_ticket();
  void set_allocated_ticket(::COffline_OfflineLogonTicket* ticket);
  private:
  const ::COffline_OfflineLogonTicket& _internal_ticket() const;
  ::COffline_OfflineLogonTicket* _internal_mutable_ticket();
  public:
  void unsafe_arena_set_allocated_ticket(
      ::COffline_OfflineLogonTicket* ticket);
  ::COffline_OfflineLogonTicket* unsafe_arena_release_ticket();

  // @@protoc_insertion_point(class_scope:COffline_GetUnsignedOfflineLogonTicket_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::COffline_OfflineLogonTicket* ticket_;
  friend struct ::TableStruct_steammessages_5foffline_2esteamclient_2eproto;
};
// ===================================================================

class Offline_Stub;

class Offline : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline Offline() {};
 public:
  virtual ~Offline();

  typedef Offline_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void GetOfflineLogonTicket(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::COffline_GetOfflineLogonTicket_Request* request,
                       ::COffline_GetOfflineLogonTicket_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetUnsignedOfflineLogonTicket(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::COffline_GetUnsignedOfflineLogonTicket_Request* request,
                       ::COffline_GetUnsignedOfflineLogonTicket_Response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Offline);
};

class Offline_Stub : public Offline {
 public:
  Offline_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  Offline_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~Offline_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements Offline ------------------------------------------

  void GetOfflineLogonTicket(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::COffline_GetOfflineLogonTicket_Request* request,
                       ::COffline_GetOfflineLogonTicket_Response* response,
                       ::google::protobuf::Closure* done);
  void GetUnsignedOfflineLogonTicket(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::COffline_GetUnsignedOfflineLogonTicket_Request* request,
                       ::COffline_GetUnsignedOfflineLogonTicket_Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Offline_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// COffline_GetOfflineLogonTicket_Request

// optional uint32 priority = 1;
inline bool COffline_GetOfflineLogonTicket_Request::_internal_has_priority() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool COffline_GetOfflineLogonTicket_Request::has_priority() const {
  return _internal_has_priority();
}
inline void COffline_GetOfflineLogonTicket_Request::clear_priority() {
  priority_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t COffline_GetOfflineLogonTicket_Request::_internal_priority() const {
  return priority_;
}
inline uint32_t COffline_GetOfflineLogonTicket_Request::priority() const {
  // @@protoc_insertion_point(field_get:COffline_GetOfflineLogonTicket_Request.priority)
  return _internal_priority();
}
inline void COffline_GetOfflineLogonTicket_Request::_internal_set_priority(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  priority_ = value;
}
inline void COffline_GetOfflineLogonTicket_Request::set_priority(uint32_t value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:COffline_GetOfflineLogonTicket_Request.priority)
}

// optional bool perform_encryption = 2;
inline bool COffline_GetOfflineLogonTicket_Request::_internal_has_perform_encryption() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool COffline_GetOfflineLogonTicket_Request::has_perform_encryption() const {
  return _internal_has_perform_encryption();
}
inline void COffline_GetOfflineLogonTicket_Request::clear_perform_encryption() {
  perform_encryption_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool COffline_GetOfflineLogonTicket_Request::_internal_perform_encryption() const {
  return perform_encryption_;
}
inline bool COffline_GetOfflineLogonTicket_Request::perform_encryption() const {
  // @@protoc_insertion_point(field_get:COffline_GetOfflineLogonTicket_Request.perform_encryption)
  return _internal_perform_encryption();
}
inline void COffline_GetOfflineLogonTicket_Request::_internal_set_perform_encryption(bool value) {
  _has_bits_[0] |= 0x00000002u;
  perform_encryption_ = value;
}
inline void COffline_GetOfflineLogonTicket_Request::set_perform_encryption(bool value) {
  _internal_set_perform_encryption(value);
  // @@protoc_insertion_point(field_set:COffline_GetOfflineLogonTicket_Request.perform_encryption)
}

// -------------------------------------------------------------------

// COffline_GetOfflineLogonTicket_Response

// optional bytes serialized_ticket = 1;
inline bool COffline_GetOfflineLogonTicket_Response::_internal_has_serialized_ticket() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool COffline_GetOfflineLogonTicket_Response::has_serialized_ticket() const {
  return _internal_has_serialized_ticket();
}
inline void COffline_GetOfflineLogonTicket_Response::clear_serialized_ticket() {
  serialized_ticket_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& COffline_GetOfflineLogonTicket_Response::serialized_ticket() const {
  // @@protoc_insertion_point(field_get:COffline_GetOfflineLogonTicket_Response.serialized_ticket)
  return _internal_serialized_ticket();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void COffline_GetOfflineLogonTicket_Response::set_serialized_ticket(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 serialized_ticket_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:COffline_GetOfflineLogonTicket_Response.serialized_ticket)
}
inline std::string* COffline_GetOfflineLogonTicket_Response::mutable_serialized_ticket() {
  std::string* _s = _internal_mutable_serialized_ticket();
  // @@protoc_insertion_point(field_mutable:COffline_GetOfflineLogonTicket_Response.serialized_ticket)
  return _s;
}
inline const std::string& COffline_GetOfflineLogonTicket_Response::_internal_serialized_ticket() const {
  return serialized_ticket_.Get();
}
inline void COffline_GetOfflineLogonTicket_Response::_internal_set_serialized_ticket(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  serialized_ticket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* COffline_GetOfflineLogonTicket_Response::_internal_mutable_serialized_ticket() {
  _has_bits_[0] |= 0x00000001u;
  return serialized_ticket_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* COffline_GetOfflineLogonTicket_Response::release_serialized_ticket() {
  // @@protoc_insertion_point(field_release:COffline_GetOfflineLogonTicket_Response.serialized_ticket)
  if (!_internal_has_serialized_ticket()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = serialized_ticket_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (serialized_ticket_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    serialized_ticket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void COffline_GetOfflineLogonTicket_Response::set_allocated_serialized_ticket(std::string* serialized_ticket) {
  if (serialized_ticket != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  serialized_ticket_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serialized_ticket,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (serialized_ticket_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    serialized_ticket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:COffline_GetOfflineLogonTicket_Response.serialized_ticket)
}

// optional bytes signature = 2;
inline bool COffline_GetOfflineLogonTicket_Response::_internal_has_signature() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool COffline_GetOfflineLogonTicket_Response::has_signature() const {
  return _internal_has_signature();
}
inline void COffline_GetOfflineLogonTicket_Response::clear_signature() {
  signature_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& COffline_GetOfflineLogonTicket_Response::signature() const {
  // @@protoc_insertion_point(field_get:COffline_GetOfflineLogonTicket_Response.signature)
  return _internal_signature();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void COffline_GetOfflineLogonTicket_Response::set_signature(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 signature_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:COffline_GetOfflineLogonTicket_Response.signature)
}
inline std::string* COffline_GetOfflineLogonTicket_Response::mutable_signature() {
  std::string* _s = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:COffline_GetOfflineLogonTicket_Response.signature)
  return _s;
}
inline const std::string& COffline_GetOfflineLogonTicket_Response::_internal_signature() const {
  return signature_.Get();
}
inline void COffline_GetOfflineLogonTicket_Response::_internal_set_signature(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* COffline_GetOfflineLogonTicket_Response::_internal_mutable_signature() {
  _has_bits_[0] |= 0x00000002u;
  return signature_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* COffline_GetOfflineLogonTicket_Response::release_signature() {
  // @@protoc_insertion_point(field_release:COffline_GetOfflineLogonTicket_Response.signature)
  if (!_internal_has_signature()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = signature_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (signature_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void COffline_GetOfflineLogonTicket_Response::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  signature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (signature_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:COffline_GetOfflineLogonTicket_Response.signature)
}

// optional .Offline_Ticket encrypted_ticket = 3;
inline bool COffline_GetOfflineLogonTicket_Response::_internal_has_encrypted_ticket() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || encrypted_ticket_ != nullptr);
  return value;
}
inline bool COffline_GetOfflineLogonTicket_Response::has_encrypted_ticket() const {
  return _internal_has_encrypted_ticket();
}
inline const ::Offline_Ticket& COffline_GetOfflineLogonTicket_Response::_internal_encrypted_ticket() const {
  const ::Offline_Ticket* p = encrypted_ticket_;
  return p != nullptr ? *p : reinterpret_cast<const ::Offline_Ticket&>(
      ::_Offline_Ticket_default_instance_);
}
inline const ::Offline_Ticket& COffline_GetOfflineLogonTicket_Response::encrypted_ticket() const {
  // @@protoc_insertion_point(field_get:COffline_GetOfflineLogonTicket_Response.encrypted_ticket)
  return _internal_encrypted_ticket();
}
inline void COffline_GetOfflineLogonTicket_Response::unsafe_arena_set_allocated_encrypted_ticket(
    ::Offline_Ticket* encrypted_ticket) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(encrypted_ticket_);
  }
  encrypted_ticket_ = encrypted_ticket;
  if (encrypted_ticket) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:COffline_GetOfflineLogonTicket_Response.encrypted_ticket)
}
inline ::Offline_Ticket* COffline_GetOfflineLogonTicket_Response::release_encrypted_ticket() {
  _has_bits_[0] &= ~0x00000004u;
  ::Offline_Ticket* temp = encrypted_ticket_;
  encrypted_ticket_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Offline_Ticket* COffline_GetOfflineLogonTicket_Response::unsafe_arena_release_encrypted_ticket() {
  // @@protoc_insertion_point(field_release:COffline_GetOfflineLogonTicket_Response.encrypted_ticket)
  _has_bits_[0] &= ~0x00000004u;
  ::Offline_Ticket* temp = encrypted_ticket_;
  encrypted_ticket_ = nullptr;
  return temp;
}
inline ::Offline_Ticket* COffline_GetOfflineLogonTicket_Response::_internal_mutable_encrypted_ticket() {
  _has_bits_[0] |= 0x00000004u;
  if (encrypted_ticket_ == nullptr) {
    auto* p = CreateMaybeMessage<::Offline_Ticket>(GetArenaForAllocation());
    encrypted_ticket_ = p;
  }
  return encrypted_ticket_;
}
inline ::Offline_Ticket* COffline_GetOfflineLogonTicket_Response::mutable_encrypted_ticket() {
  ::Offline_Ticket* _msg = _internal_mutable_encrypted_ticket();
  // @@protoc_insertion_point(field_mutable:COffline_GetOfflineLogonTicket_Response.encrypted_ticket)
  return _msg;
}
inline void COffline_GetOfflineLogonTicket_Response::set_allocated_encrypted_ticket(::Offline_Ticket* encrypted_ticket) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(encrypted_ticket_);
  }
  if (encrypted_ticket) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(encrypted_ticket));
    if (message_arena != submessage_arena) {
      encrypted_ticket = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, encrypted_ticket, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  encrypted_ticket_ = encrypted_ticket;
  // @@protoc_insertion_point(field_set_allocated:COffline_GetOfflineLogonTicket_Response.encrypted_ticket)
}

// -------------------------------------------------------------------

// COffline_GetUnsignedOfflineLogonTicket_Request

// -------------------------------------------------------------------

// COffline_OfflineLogonTicket

// optional uint32 accountid = 1;
inline bool COffline_OfflineLogonTicket::_internal_has_accountid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool COffline_OfflineLogonTicket::has_accountid() const {
  return _internal_has_accountid();
}
inline void COffline_OfflineLogonTicket::clear_accountid() {
  accountid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t COffline_OfflineLogonTicket::_internal_accountid() const {
  return accountid_;
}
inline uint32_t COffline_OfflineLogonTicket::accountid() const {
  // @@protoc_insertion_point(field_get:COffline_OfflineLogonTicket.accountid)
  return _internal_accountid();
}
inline void COffline_OfflineLogonTicket::_internal_set_accountid(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  accountid_ = value;
}
inline void COffline_OfflineLogonTicket::set_accountid(uint32_t value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:COffline_OfflineLogonTicket.accountid)
}

// optional fixed32 rtime32_creation_time = 2;
inline bool COffline_OfflineLogonTicket::_internal_has_rtime32_creation_time() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool COffline_OfflineLogonTicket::has_rtime32_creation_time() const {
  return _internal_has_rtime32_creation_time();
}
inline void COffline_OfflineLogonTicket::clear_rtime32_creation_time() {
  rtime32_creation_time_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t COffline_OfflineLogonTicket::_internal_rtime32_creation_time() const {
  return rtime32_creation_time_;
}
inline uint32_t COffline_OfflineLogonTicket::rtime32_creation_time() const {
  // @@protoc_insertion_point(field_get:COffline_OfflineLogonTicket.rtime32_creation_time)
  return _internal_rtime32_creation_time();
}
inline void COffline_OfflineLogonTicket::_internal_set_rtime32_creation_time(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  rtime32_creation_time_ = value;
}
inline void COffline_OfflineLogonTicket::set_rtime32_creation_time(uint32_t value) {
  _internal_set_rtime32_creation_time(value);
  // @@protoc_insertion_point(field_set:COffline_OfflineLogonTicket.rtime32_creation_time)
}

// -------------------------------------------------------------------

// COffline_GetUnsignedOfflineLogonTicket_Response

// optional .COffline_OfflineLogonTicket ticket = 1;
inline bool COffline_GetUnsignedOfflineLogonTicket_Response::_internal_has_ticket() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || ticket_ != nullptr);
  return value;
}
inline bool COffline_GetUnsignedOfflineLogonTicket_Response::has_ticket() const {
  return _internal_has_ticket();
}
inline void COffline_GetUnsignedOfflineLogonTicket_Response::clear_ticket() {
  if (ticket_ != nullptr) ticket_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::COffline_OfflineLogonTicket& COffline_GetUnsignedOfflineLogonTicket_Response::_internal_ticket() const {
  const ::COffline_OfflineLogonTicket* p = ticket_;
  return p != nullptr ? *p : reinterpret_cast<const ::COffline_OfflineLogonTicket&>(
      ::_COffline_OfflineLogonTicket_default_instance_);
}
inline const ::COffline_OfflineLogonTicket& COffline_GetUnsignedOfflineLogonTicket_Response::ticket() const {
  // @@protoc_insertion_point(field_get:COffline_GetUnsignedOfflineLogonTicket_Response.ticket)
  return _internal_ticket();
}
inline void COffline_GetUnsignedOfflineLogonTicket_Response::unsafe_arena_set_allocated_ticket(
    ::COffline_OfflineLogonTicket* ticket) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ticket_);
  }
  ticket_ = ticket;
  if (ticket) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:COffline_GetUnsignedOfflineLogonTicket_Response.ticket)
}
inline ::COffline_OfflineLogonTicket* COffline_GetUnsignedOfflineLogonTicket_Response::release_ticket() {
  _has_bits_[0] &= ~0x00000001u;
  ::COffline_OfflineLogonTicket* temp = ticket_;
  ticket_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::COffline_OfflineLogonTicket* COffline_GetUnsignedOfflineLogonTicket_Response::unsafe_arena_release_ticket() {
  // @@protoc_insertion_point(field_release:COffline_GetUnsignedOfflineLogonTicket_Response.ticket)
  _has_bits_[0] &= ~0x00000001u;
  ::COffline_OfflineLogonTicket* temp = ticket_;
  ticket_ = nullptr;
  return temp;
}
inline ::COffline_OfflineLogonTicket* COffline_GetUnsignedOfflineLogonTicket_Response::_internal_mutable_ticket() {
  _has_bits_[0] |= 0x00000001u;
  if (ticket_ == nullptr) {
    auto* p = CreateMaybeMessage<::COffline_OfflineLogonTicket>(GetArenaForAllocation());
    ticket_ = p;
  }
  return ticket_;
}
inline ::COffline_OfflineLogonTicket* COffline_GetUnsignedOfflineLogonTicket_Response::mutable_ticket() {
  ::COffline_OfflineLogonTicket* _msg = _internal_mutable_ticket();
  // @@protoc_insertion_point(field_mutable:COffline_GetUnsignedOfflineLogonTicket_Response.ticket)
  return _msg;
}
inline void COffline_GetUnsignedOfflineLogonTicket_Response::set_allocated_ticket(::COffline_OfflineLogonTicket* ticket) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete ticket_;
  }
  if (ticket) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::COffline_OfflineLogonTicket>::GetOwningArena(ticket);
    if (message_arena != submessage_arena) {
      ticket = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ticket, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ticket_ = ticket;
  // @@protoc_insertion_point(field_set_allocated:COffline_GetUnsignedOfflineLogonTicket_Response.ticket)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_steammessages_5foffline_2esteamclient_2eproto
