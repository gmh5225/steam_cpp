// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steamdatagram_messages_auth.proto

#include "steamdatagram_messages_auth.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CMsgSteamDatagramRelayAuthTicket_ExtraField::CMsgSteamDatagramRelayAuthTicket_ExtraField(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , string_value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , int64_value_(int64_t{0})
  , fixed64_value_(uint64_t{0u}){}
struct CMsgSteamDatagramRelayAuthTicket_ExtraFieldDefaultTypeInternal {
  constexpr CMsgSteamDatagramRelayAuthTicket_ExtraFieldDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSteamDatagramRelayAuthTicket_ExtraFieldDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramRelayAuthTicket_ExtraField _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSteamDatagramRelayAuthTicket_ExtraFieldDefaultTypeInternal _CMsgSteamDatagramRelayAuthTicket_ExtraField_default_instance_;
constexpr CMsgSteamDatagramRelayAuthTicket::CMsgSteamDatagramRelayAuthTicket(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : extra_fields_()
  , gameserver_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , legacy_authorized_client_identity_binary_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , legacy_gameserver_identity_binary_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , authorized_client_identity_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , gameserver_identity_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , legacy_authorized_steam_id_(uint64_t{0u})
  , time_expiry_(0u)
  , authorized_public_ip_(0u)
  , legacy_gameserver_steam_id_(uint64_t{0u})
  , app_id_(0u)
  , legacy_gameserver_pop_id_(0u)
  , virtual_port_(0u){}
struct CMsgSteamDatagramRelayAuthTicketDefaultTypeInternal {
  constexpr CMsgSteamDatagramRelayAuthTicketDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSteamDatagramRelayAuthTicketDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramRelayAuthTicket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSteamDatagramRelayAuthTicketDefaultTypeInternal _CMsgSteamDatagramRelayAuthTicket_default_instance_;
constexpr CMsgSteamDatagramSignedRelayAuthTicket::CMsgSteamDatagramSignedRelayAuthTicket(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : certs_()
  , ticket_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , signature_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , reserved_do_not_use_(uint64_t{0u})
  , key_id_(uint64_t{0u}){}
struct CMsgSteamDatagramSignedRelayAuthTicketDefaultTypeInternal {
  constexpr CMsgSteamDatagramSignedRelayAuthTicketDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSteamDatagramSignedRelayAuthTicketDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramSignedRelayAuthTicket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSteamDatagramSignedRelayAuthTicketDefaultTypeInternal _CMsgSteamDatagramSignedRelayAuthTicket_default_instance_;
constexpr CMsgSteamDatagramCachedCredentialsForApp::CMsgSteamDatagramCachedCredentialsForApp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : relay_tickets_()
  , private_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cert_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CMsgSteamDatagramCachedCredentialsForAppDefaultTypeInternal {
  constexpr CMsgSteamDatagramCachedCredentialsForAppDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSteamDatagramCachedCredentialsForAppDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramCachedCredentialsForApp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSteamDatagramCachedCredentialsForAppDefaultTypeInternal _CMsgSteamDatagramCachedCredentialsForApp_default_instance_;
constexpr CMsgSteamDatagramGameCoordinatorServerLogin::CMsgSteamDatagramGameCoordinatorServerLogin(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : routing_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , appdata_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , legacy_identity_binary_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , identity_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , time_generated_(0u)
  , appid_(0u)
  , dummy_steam_id_(uint64_t{0u}){}
struct CMsgSteamDatagramGameCoordinatorServerLoginDefaultTypeInternal {
  constexpr CMsgSteamDatagramGameCoordinatorServerLoginDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSteamDatagramGameCoordinatorServerLoginDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramGameCoordinatorServerLogin _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSteamDatagramGameCoordinatorServerLoginDefaultTypeInternal _CMsgSteamDatagramGameCoordinatorServerLogin_default_instance_;
constexpr CMsgSteamDatagramSignedGameCoordinatorServerLogin::CMsgSteamDatagramSignedGameCoordinatorServerLogin(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : login_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , signature_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cert_(nullptr){}
struct CMsgSteamDatagramSignedGameCoordinatorServerLoginDefaultTypeInternal {
  constexpr CMsgSteamDatagramSignedGameCoordinatorServerLoginDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSteamDatagramSignedGameCoordinatorServerLoginDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramSignedGameCoordinatorServerLogin _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSteamDatagramSignedGameCoordinatorServerLoginDefaultTypeInternal _CMsgSteamDatagramSignedGameCoordinatorServerLogin_default_instance_;
constexpr CMsgSteamDatagramHostedServerAddressPlaintext::CMsgSteamDatagramHostedServerAddressPlaintext(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ipv6_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ipv4_(0u)
  , port_(0u)
  , routing_secret_(uint64_t{0u})
  , protocol_version_(0u){}
struct CMsgSteamDatagramHostedServerAddressPlaintextDefaultTypeInternal {
  constexpr CMsgSteamDatagramHostedServerAddressPlaintextDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSteamDatagramHostedServerAddressPlaintextDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramHostedServerAddressPlaintext _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSteamDatagramHostedServerAddressPlaintextDefaultTypeInternal _CMsgSteamDatagramHostedServerAddressPlaintext_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steamdatagram_5fmessages_5fauth_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_steamdatagram_5fmessages_5fauth_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_steamdatagram_5fmessages_5fauth_2eproto = nullptr;

const uint32_t TableStruct_steamdatagram_5fmessages_5fauth_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRelayAuthTicket_ExtraField, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRelayAuthTicket_ExtraField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRelayAuthTicket_ExtraField, name_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRelayAuthTicket_ExtraField, string_value_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRelayAuthTicket_ExtraField, int64_value_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRelayAuthTicket_ExtraField, fixed64_value_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRelayAuthTicket, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRelayAuthTicket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRelayAuthTicket, time_expiry_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRelayAuthTicket, authorized_client_identity_string_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRelayAuthTicket, gameserver_identity_string_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRelayAuthTicket, authorized_public_ip_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRelayAuthTicket, gameserver_address_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRelayAuthTicket, app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRelayAuthTicket, virtual_port_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRelayAuthTicket, extra_fields_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRelayAuthTicket, legacy_authorized_steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRelayAuthTicket, legacy_gameserver_steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRelayAuthTicket, legacy_gameserver_pop_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRelayAuthTicket, legacy_authorized_client_identity_binary_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRelayAuthTicket, legacy_gameserver_identity_binary_),
  6,
  3,
  4,
  7,
  0,
  9,
  11,
  ~0u,
  5,
  8,
  10,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramSignedRelayAuthTicket, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramSignedRelayAuthTicket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramSignedRelayAuthTicket, reserved_do_not_use_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramSignedRelayAuthTicket, ticket_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramSignedRelayAuthTicket, signature_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramSignedRelayAuthTicket, key_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramSignedRelayAuthTicket, certs_),
  2,
  0,
  1,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCachedCredentialsForApp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCachedCredentialsForApp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCachedCredentialsForApp, private_key_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCachedCredentialsForApp, cert_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCachedCredentialsForApp, relay_tickets_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameCoordinatorServerLogin, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameCoordinatorServerLogin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameCoordinatorServerLogin, time_generated_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameCoordinatorServerLogin, appid_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameCoordinatorServerLogin, routing_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameCoordinatorServerLogin, appdata_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameCoordinatorServerLogin, legacy_identity_binary_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameCoordinatorServerLogin, identity_string_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameCoordinatorServerLogin, dummy_steam_id_),
  4,
  5,
  0,
  1,
  2,
  3,
  6,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramSignedGameCoordinatorServerLogin, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramSignedGameCoordinatorServerLogin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramSignedGameCoordinatorServerLogin, cert_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramSignedGameCoordinatorServerLogin, login_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramSignedGameCoordinatorServerLogin, signature_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramHostedServerAddressPlaintext, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramHostedServerAddressPlaintext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramHostedServerAddressPlaintext, ipv4_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramHostedServerAddressPlaintext, ipv6_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramHostedServerAddressPlaintext, port_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramHostedServerAddressPlaintext, routing_secret_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramHostedServerAddressPlaintext, protocol_version_),
  1,
  0,
  2,
  3,
  4,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::CMsgSteamDatagramRelayAuthTicket_ExtraField)},
  { 14, 33, -1, sizeof(::CMsgSteamDatagramRelayAuthTicket)},
  { 46, 57, -1, sizeof(::CMsgSteamDatagramSignedRelayAuthTicket)},
  { 62, 71, -1, sizeof(::CMsgSteamDatagramCachedCredentialsForApp)},
  { 74, 87, -1, sizeof(::CMsgSteamDatagramGameCoordinatorServerLogin)},
  { 94, 103, -1, sizeof(::CMsgSteamDatagramSignedGameCoordinatorServerLogin)},
  { 106, 117, -1, sizeof(::CMsgSteamDatagramHostedServerAddressPlaintext)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSteamDatagramRelayAuthTicket_ExtraField_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSteamDatagramRelayAuthTicket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSteamDatagramSignedRelayAuthTicket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSteamDatagramCachedCredentialsForApp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSteamDatagramGameCoordinatorServerLogin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSteamDatagramSignedGameCoordinatorServerLogin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSteamDatagramHostedServerAddressPlaintext_default_instance_),
};

const char descriptor_table_protodef_steamdatagram_5fmessages_5fauth_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n!steamdatagram_messages_auth.proto\032+ste"
  "amnetworkingsockets_messages_certs.proto"
  "\"\317\004\n CMsgSteamDatagramRelayAuthTicket\022\023\n"
  "\013time_expiry\030\001 \001(\007\022)\n!authorized_client_"
  "identity_string\030\016 \001(\t\022\"\n\032gameserver_iden"
  "tity_string\030\017 \001(\t\022\034\n\024authorized_public_i"
  "p\030\003 \001(\007\022\032\n\022gameserver_address\030\013 \001(\014\022\016\n\006a"
  "pp_id\030\007 \001(\r\022\024\n\014virtual_port\030\n \001(\r\022B\n\014ext"
  "ra_fields\030\010 \003(\0132,.CMsgSteamDatagramRelay"
  "AuthTicket.ExtraField\022\"\n\032legacy_authoriz"
  "ed_steam_id\030\002 \001(\006\022\"\n\032legacy_gameserver_s"
  "team_id\030\004 \001(\006\022 \n\030legacy_gameserver_pop_i"
  "d\030\t \001(\007\0220\n(legacy_authorized_client_iden"
  "tity_binary\030\014 \001(\014\022)\n!legacy_gameserver_i"
  "dentity_binary\030\r \001(\014\032\\\n\nExtraField\022\014\n\004na"
  "me\030\001 \001(\t\022\024\n\014string_value\030\002 \001(\t\022\023\n\013int64_"
  "value\030\003 \001(\022\022\025\n\rfixed64_value\030\005 \001(\006\"\254\001\n&C"
  "MsgSteamDatagramSignedRelayAuthTicket\022\033\n"
  "\023reserved_do_not_use\030\001 \001(\006\022\016\n\006ticket\030\003 \001"
  "(\014\022\021\n\tsignature\030\004 \001(\014\022\016\n\006key_id\030\002 \001(\006\0222\n"
  "\005certs\030\005 \003(\0132#.CMsgSteamDatagramCertific"
  "ateSigned\"d\n(CMsgSteamDatagramCachedCred"
  "entialsForApp\022\023\n\013private_key\030\001 \001(\014\022\014\n\004ce"
  "rt\030\002 \001(\014\022\025\n\rrelay_tickets\030\003 \003(\014\"\307\001\n+CMsg"
  "SteamDatagramGameCoordinatorServerLogin\022"
  "\026\n\016time_generated\030\001 \001(\r\022\r\n\005appid\030\002 \001(\r\022\017"
  "\n\007routing\030\003 \001(\014\022\017\n\007appdata\030\004 \001(\014\022\036\n\026lega"
  "cy_identity_binary\030\005 \001(\014\022\027\n\017identity_str"
  "ing\030\006 \001(\t\022\026\n\016dummy_steam_id\030c \001(\006\"\210\001\n1CM"
  "sgSteamDatagramSignedGameCoordinatorServ"
  "erLogin\0221\n\004cert\030\001 \001(\0132#.CMsgSteamDatagra"
  "mCertificateSigned\022\r\n\005login\030\002 \001(\014\022\021\n\tsig"
  "nature\030\003 \001(\014\"\213\001\n-CMsgSteamDatagramHosted"
  "ServerAddressPlaintext\022\014\n\004ipv4\030\001 \001(\007\022\014\n\004"
  "ipv6\030\002 \001(\014\022\014\n\004port\030\003 \001(\r\022\026\n\016routing_secr"
  "et\030\004 \001(\006\022\030\n\020protocol_version\030\005 \001(\rB\005H\001\200\001"
  "\000"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_steamdatagram_5fmessages_5fauth_2eproto_deps[1] = {
  &::descriptor_table_steamnetworkingsockets_5fmessages_5fcerts_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steamdatagram_5fmessages_5fauth_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steamdatagram_5fmessages_5fauth_2eproto = {
  false, false, 1441, descriptor_table_protodef_steamdatagram_5fmessages_5fauth_2eproto, "steamdatagram_messages_auth.proto", 
  &descriptor_table_steamdatagram_5fmessages_5fauth_2eproto_once, descriptor_table_steamdatagram_5fmessages_5fauth_2eproto_deps, 1, 7,
  schemas, file_default_instances, TableStruct_steamdatagram_5fmessages_5fauth_2eproto::offsets,
  file_level_metadata_steamdatagram_5fmessages_5fauth_2eproto, file_level_enum_descriptors_steamdatagram_5fmessages_5fauth_2eproto, file_level_service_descriptors_steamdatagram_5fmessages_5fauth_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_steamdatagram_5fmessages_5fauth_2eproto_getter() {
  return &descriptor_table_steamdatagram_5fmessages_5fauth_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_steamdatagram_5fmessages_5fauth_2eproto(&descriptor_table_steamdatagram_5fmessages_5fauth_2eproto);

// ===================================================================

class CMsgSteamDatagramRelayAuthTicket_ExtraField::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramRelayAuthTicket_ExtraField>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_string_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_int64_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_fixed64_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgSteamDatagramRelayAuthTicket_ExtraField::CMsgSteamDatagramRelayAuthTicket_ExtraField(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramRelayAuthTicket.ExtraField)
}
CMsgSteamDatagramRelayAuthTicket_ExtraField::CMsgSteamDatagramRelayAuthTicket_ExtraField(const CMsgSteamDatagramRelayAuthTicket_ExtraField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    string_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_string_value()) {
    string_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_string_value(), 
      GetArenaForAllocation());
  }
  ::memcpy(&int64_value_, &from.int64_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&fixed64_value_) -
    reinterpret_cast<char*>(&int64_value_)) + sizeof(fixed64_value_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramRelayAuthTicket.ExtraField)
}

inline void CMsgSteamDatagramRelayAuthTicket_ExtraField::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  string_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&int64_value_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fixed64_value_) -
    reinterpret_cast<char*>(&int64_value_)) + sizeof(fixed64_value_));
}

CMsgSteamDatagramRelayAuthTicket_ExtraField::~CMsgSteamDatagramRelayAuthTicket_ExtraField() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramRelayAuthTicket.ExtraField)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgSteamDatagramRelayAuthTicket_ExtraField::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  string_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgSteamDatagramRelayAuthTicket_ExtraField::ArenaDtor(void* object) {
  CMsgSteamDatagramRelayAuthTicket_ExtraField* _this = reinterpret_cast< CMsgSteamDatagramRelayAuthTicket_ExtraField* >(object);
  (void)_this;
}
void CMsgSteamDatagramRelayAuthTicket_ExtraField::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSteamDatagramRelayAuthTicket_ExtraField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSteamDatagramRelayAuthTicket_ExtraField::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramRelayAuthTicket.ExtraField)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      string_value_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&int64_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fixed64_value_) -
        reinterpret_cast<char*>(&int64_value_)) + sizeof(fixed64_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamDatagramRelayAuthTicket_ExtraField::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgSteamDatagramRelayAuthTicket.ExtraField.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string string_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_string_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgSteamDatagramRelayAuthTicket.ExtraField.string_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional sint64 int64_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_int64_value(&has_bits);
          int64_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 fixed64_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_fixed64_value(&has_bits);
          fixed64_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSteamDatagramRelayAuthTicket_ExtraField::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramRelayAuthTicket.ExtraField)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSteamDatagramRelayAuthTicket.ExtraField.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string string_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_string_value().data(), static_cast<int>(this->_internal_string_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSteamDatagramRelayAuthTicket.ExtraField.string_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_string_value(), target);
  }

  // optional sint64 int64_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(3, this->_internal_int64_value(), target);
  }

  // optional fixed64 fixed64_value = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(5, this->_internal_fixed64_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramRelayAuthTicket.ExtraField)
  return target;
}

size_t CMsgSteamDatagramRelayAuthTicket_ExtraField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramRelayAuthTicket.ExtraField)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string string_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string_value());
    }

    // optional sint64 int64_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64SizePlusOne(this->_internal_int64_value());
    }

    // optional fixed64 fixed64_value = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSteamDatagramRelayAuthTicket_ExtraField::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgSteamDatagramRelayAuthTicket_ExtraField::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSteamDatagramRelayAuthTicket_ExtraField::GetClassData() const { return &_class_data_; }

void CMsgSteamDatagramRelayAuthTicket_ExtraField::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgSteamDatagramRelayAuthTicket_ExtraField *>(to)->MergeFrom(
      static_cast<const CMsgSteamDatagramRelayAuthTicket_ExtraField &>(from));
}


void CMsgSteamDatagramRelayAuthTicket_ExtraField::MergeFrom(const CMsgSteamDatagramRelayAuthTicket_ExtraField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramRelayAuthTicket.ExtraField)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_string_value(from._internal_string_value());
    }
    if (cached_has_bits & 0x00000004u) {
      int64_value_ = from.int64_value_;
    }
    if (cached_has_bits & 0x00000008u) {
      fixed64_value_ = from.fixed64_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramRelayAuthTicket_ExtraField::CopyFrom(const CMsgSteamDatagramRelayAuthTicket_ExtraField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramRelayAuthTicket.ExtraField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramRelayAuthTicket_ExtraField::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramRelayAuthTicket_ExtraField::InternalSwap(CMsgSteamDatagramRelayAuthTicket_ExtraField* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &string_value_, lhs_arena,
      &other->string_value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRelayAuthTicket_ExtraField, fixed64_value_)
      + sizeof(CMsgSteamDatagramRelayAuthTicket_ExtraField::fixed64_value_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRelayAuthTicket_ExtraField, int64_value_)>(
          reinterpret_cast<char*>(&int64_value_),
          reinterpret_cast<char*>(&other->int64_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamDatagramRelayAuthTicket_ExtraField::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steamdatagram_5fmessages_5fauth_2eproto_getter, &descriptor_table_steamdatagram_5fmessages_5fauth_2eproto_once,
      file_level_metadata_steamdatagram_5fmessages_5fauth_2eproto[0]);
}

// ===================================================================

class CMsgSteamDatagramRelayAuthTicket::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramRelayAuthTicket>()._has_bits_);
  static void set_has_time_expiry(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_authorized_client_identity_string(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_gameserver_identity_string(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_authorized_public_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_gameserver_address(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_virtual_port(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_legacy_authorized_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_legacy_gameserver_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_legacy_gameserver_pop_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_legacy_authorized_client_identity_binary(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_legacy_gameserver_identity_binary(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgSteamDatagramRelayAuthTicket::CMsgSteamDatagramRelayAuthTicket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  extra_fields_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramRelayAuthTicket)
}
CMsgSteamDatagramRelayAuthTicket::CMsgSteamDatagramRelayAuthTicket(const CMsgSteamDatagramRelayAuthTicket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      extra_fields_(from.extra_fields_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gameserver_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    gameserver_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_gameserver_address()) {
    gameserver_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gameserver_address(), 
      GetArenaForAllocation());
  }
  legacy_authorized_client_identity_binary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    legacy_authorized_client_identity_binary_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_legacy_authorized_client_identity_binary()) {
    legacy_authorized_client_identity_binary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_legacy_authorized_client_identity_binary(), 
      GetArenaForAllocation());
  }
  legacy_gameserver_identity_binary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    legacy_gameserver_identity_binary_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_legacy_gameserver_identity_binary()) {
    legacy_gameserver_identity_binary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_legacy_gameserver_identity_binary(), 
      GetArenaForAllocation());
  }
  authorized_client_identity_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    authorized_client_identity_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_authorized_client_identity_string()) {
    authorized_client_identity_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_authorized_client_identity_string(), 
      GetArenaForAllocation());
  }
  gameserver_identity_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    gameserver_identity_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_gameserver_identity_string()) {
    gameserver_identity_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gameserver_identity_string(), 
      GetArenaForAllocation());
  }
  ::memcpy(&legacy_authorized_steam_id_, &from.legacy_authorized_steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&virtual_port_) -
    reinterpret_cast<char*>(&legacy_authorized_steam_id_)) + sizeof(virtual_port_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramRelayAuthTicket)
}

inline void CMsgSteamDatagramRelayAuthTicket::SharedCtor() {
gameserver_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  gameserver_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
legacy_authorized_client_identity_binary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  legacy_authorized_client_identity_binary_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
legacy_gameserver_identity_binary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  legacy_gameserver_identity_binary_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
authorized_client_identity_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  authorized_client_identity_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
gameserver_identity_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  gameserver_identity_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&legacy_authorized_steam_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&virtual_port_) -
    reinterpret_cast<char*>(&legacy_authorized_steam_id_)) + sizeof(virtual_port_));
}

CMsgSteamDatagramRelayAuthTicket::~CMsgSteamDatagramRelayAuthTicket() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramRelayAuthTicket)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgSteamDatagramRelayAuthTicket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  gameserver_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  legacy_authorized_client_identity_binary_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  legacy_gameserver_identity_binary_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  authorized_client_identity_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gameserver_identity_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgSteamDatagramRelayAuthTicket::ArenaDtor(void* object) {
  CMsgSteamDatagramRelayAuthTicket* _this = reinterpret_cast< CMsgSteamDatagramRelayAuthTicket* >(object);
  (void)_this;
}
void CMsgSteamDatagramRelayAuthTicket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSteamDatagramRelayAuthTicket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSteamDatagramRelayAuthTicket::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramRelayAuthTicket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  extra_fields_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      gameserver_address_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      legacy_authorized_client_identity_binary_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      legacy_gameserver_identity_binary_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      authorized_client_identity_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      gameserver_identity_string_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&legacy_authorized_steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&authorized_public_ip_) -
        reinterpret_cast<char*>(&legacy_authorized_steam_id_)) + sizeof(authorized_public_ip_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&legacy_gameserver_steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&virtual_port_) -
        reinterpret_cast<char*>(&legacy_gameserver_steam_id_)) + sizeof(virtual_port_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamDatagramRelayAuthTicket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed32 time_expiry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_time_expiry(&has_bits);
          time_expiry_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 legacy_authorized_steam_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_legacy_authorized_steam_id(&has_bits);
          legacy_authorized_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 authorized_public_ip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_authorized_public_ip(&has_bits);
          authorized_public_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 legacy_gameserver_steam_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_legacy_gameserver_steam_id(&has_bits);
          legacy_gameserver_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 app_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgSteamDatagramRelayAuthTicket.ExtraField extra_fields = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_extra_fields(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 legacy_gameserver_pop_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_legacy_gameserver_pop_id(&has_bits);
          legacy_gameserver_pop_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 virtual_port = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_virtual_port(&has_bits);
          virtual_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes gameserver_address = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_gameserver_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes legacy_authorized_client_identity_binary = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_legacy_authorized_client_identity_binary();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes legacy_gameserver_identity_binary = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_legacy_gameserver_identity_binary();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string authorized_client_identity_string = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_authorized_client_identity_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgSteamDatagramRelayAuthTicket.authorized_client_identity_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string gameserver_identity_string = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_gameserver_identity_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgSteamDatagramRelayAuthTicket.gameserver_identity_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSteamDatagramRelayAuthTicket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramRelayAuthTicket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 time_expiry = 1;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->_internal_time_expiry(), target);
  }

  // optional fixed64 legacy_authorized_steam_id = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_legacy_authorized_steam_id(), target);
  }

  // optional fixed32 authorized_public_ip = 3;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(3, this->_internal_authorized_public_ip(), target);
  }

  // optional fixed64 legacy_gameserver_steam_id = 4;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(4, this->_internal_legacy_gameserver_steam_id(), target);
  }

  // optional uint32 app_id = 7;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_app_id(), target);
  }

  // repeated .CMsgSteamDatagramRelayAuthTicket.ExtraField extra_fields = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_extra_fields_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_extra_fields(i), target, stream);
  }

  // optional fixed32 legacy_gameserver_pop_id = 9;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(9, this->_internal_legacy_gameserver_pop_id(), target);
  }

  // optional uint32 virtual_port = 10;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_virtual_port(), target);
  }

  // optional bytes gameserver_address = 11;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        11, this->_internal_gameserver_address(), target);
  }

  // optional bytes legacy_authorized_client_identity_binary = 12;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal_legacy_authorized_client_identity_binary(), target);
  }

  // optional bytes legacy_gameserver_identity_binary = 13;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        13, this->_internal_legacy_gameserver_identity_binary(), target);
  }

  // optional string authorized_client_identity_string = 14;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_authorized_client_identity_string().data(), static_cast<int>(this->_internal_authorized_client_identity_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSteamDatagramRelayAuthTicket.authorized_client_identity_string");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_authorized_client_identity_string(), target);
  }

  // optional string gameserver_identity_string = 15;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_gameserver_identity_string().data(), static_cast<int>(this->_internal_gameserver_identity_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSteamDatagramRelayAuthTicket.gameserver_identity_string");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_gameserver_identity_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramRelayAuthTicket)
  return target;
}

size_t CMsgSteamDatagramRelayAuthTicket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramRelayAuthTicket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgSteamDatagramRelayAuthTicket.ExtraField extra_fields = 8;
  total_size += 1UL * this->_internal_extra_fields_size();
  for (const auto& msg : this->extra_fields_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes gameserver_address = 11;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_gameserver_address());
    }

    // optional bytes legacy_authorized_client_identity_binary = 12;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_legacy_authorized_client_identity_binary());
    }

    // optional bytes legacy_gameserver_identity_binary = 13;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_legacy_gameserver_identity_binary());
    }

    // optional string authorized_client_identity_string = 14;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_authorized_client_identity_string());
    }

    // optional string gameserver_identity_string = 15;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_gameserver_identity_string());
    }

    // optional fixed64 legacy_authorized_steam_id = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional fixed32 time_expiry = 1;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional fixed32 authorized_public_ip = 3;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional fixed64 legacy_gameserver_steam_id = 4;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 7;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
    }

    // optional fixed32 legacy_gameserver_pop_id = 9;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional uint32 virtual_port = 10;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_virtual_port());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSteamDatagramRelayAuthTicket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgSteamDatagramRelayAuthTicket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSteamDatagramRelayAuthTicket::GetClassData() const { return &_class_data_; }

void CMsgSteamDatagramRelayAuthTicket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgSteamDatagramRelayAuthTicket *>(to)->MergeFrom(
      static_cast<const CMsgSteamDatagramRelayAuthTicket &>(from));
}


void CMsgSteamDatagramRelayAuthTicket::MergeFrom(const CMsgSteamDatagramRelayAuthTicket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramRelayAuthTicket)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  extra_fields_.MergeFrom(from.extra_fields_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_gameserver_address(from._internal_gameserver_address());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_legacy_authorized_client_identity_binary(from._internal_legacy_authorized_client_identity_binary());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_legacy_gameserver_identity_binary(from._internal_legacy_gameserver_identity_binary());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_authorized_client_identity_string(from._internal_authorized_client_identity_string());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_gameserver_identity_string(from._internal_gameserver_identity_string());
    }
    if (cached_has_bits & 0x00000020u) {
      legacy_authorized_steam_id_ = from.legacy_authorized_steam_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      time_expiry_ = from.time_expiry_;
    }
    if (cached_has_bits & 0x00000080u) {
      authorized_public_ip_ = from.authorized_public_ip_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      legacy_gameserver_steam_id_ = from.legacy_gameserver_steam_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      legacy_gameserver_pop_id_ = from.legacy_gameserver_pop_id_;
    }
    if (cached_has_bits & 0x00000800u) {
      virtual_port_ = from.virtual_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramRelayAuthTicket::CopyFrom(const CMsgSteamDatagramRelayAuthTicket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramRelayAuthTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramRelayAuthTicket::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramRelayAuthTicket::InternalSwap(CMsgSteamDatagramRelayAuthTicket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  extra_fields_.InternalSwap(&other->extra_fields_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &gameserver_address_, lhs_arena,
      &other->gameserver_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &legacy_authorized_client_identity_binary_, lhs_arena,
      &other->legacy_authorized_client_identity_binary_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &legacy_gameserver_identity_binary_, lhs_arena,
      &other->legacy_gameserver_identity_binary_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &authorized_client_identity_string_, lhs_arena,
      &other->authorized_client_identity_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &gameserver_identity_string_, lhs_arena,
      &other->gameserver_identity_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRelayAuthTicket, virtual_port_)
      + sizeof(CMsgSteamDatagramRelayAuthTicket::virtual_port_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRelayAuthTicket, legacy_authorized_steam_id_)>(
          reinterpret_cast<char*>(&legacy_authorized_steam_id_),
          reinterpret_cast<char*>(&other->legacy_authorized_steam_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamDatagramRelayAuthTicket::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steamdatagram_5fmessages_5fauth_2eproto_getter, &descriptor_table_steamdatagram_5fmessages_5fauth_2eproto_once,
      file_level_metadata_steamdatagram_5fmessages_5fauth_2eproto[1]);
}

// ===================================================================

class CMsgSteamDatagramSignedRelayAuthTicket::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramSignedRelayAuthTicket>()._has_bits_);
  static void set_has_reserved_do_not_use(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ticket(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_key_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

void CMsgSteamDatagramSignedRelayAuthTicket::clear_certs() {
  certs_.Clear();
}
CMsgSteamDatagramSignedRelayAuthTicket::CMsgSteamDatagramSignedRelayAuthTicket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  certs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramSignedRelayAuthTicket)
}
CMsgSteamDatagramSignedRelayAuthTicket::CMsgSteamDatagramSignedRelayAuthTicket(const CMsgSteamDatagramSignedRelayAuthTicket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      certs_(from.certs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ticket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ticket()) {
    ticket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ticket(), 
      GetArenaForAllocation());
  }
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_signature()) {
    signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signature(), 
      GetArenaForAllocation());
  }
  ::memcpy(&reserved_do_not_use_, &from.reserved_do_not_use_,
    static_cast<size_t>(reinterpret_cast<char*>(&key_id_) -
    reinterpret_cast<char*>(&reserved_do_not_use_)) + sizeof(key_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramSignedRelayAuthTicket)
}

inline void CMsgSteamDatagramSignedRelayAuthTicket::SharedCtor() {
ticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ticket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&reserved_do_not_use_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&key_id_) -
    reinterpret_cast<char*>(&reserved_do_not_use_)) + sizeof(key_id_));
}

CMsgSteamDatagramSignedRelayAuthTicket::~CMsgSteamDatagramSignedRelayAuthTicket() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramSignedRelayAuthTicket)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgSteamDatagramSignedRelayAuthTicket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ticket_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgSteamDatagramSignedRelayAuthTicket::ArenaDtor(void* object) {
  CMsgSteamDatagramSignedRelayAuthTicket* _this = reinterpret_cast< CMsgSteamDatagramSignedRelayAuthTicket* >(object);
  (void)_this;
}
void CMsgSteamDatagramSignedRelayAuthTicket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSteamDatagramSignedRelayAuthTicket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSteamDatagramSignedRelayAuthTicket::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramSignedRelayAuthTicket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  certs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ticket_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      signature_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&reserved_do_not_use_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&key_id_) -
        reinterpret_cast<char*>(&reserved_do_not_use_)) + sizeof(key_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamDatagramSignedRelayAuthTicket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 reserved_do_not_use = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_reserved_do_not_use(&has_bits);
          reserved_do_not_use_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 key_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_key_id(&has_bits);
          key_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional bytes ticket = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_ticket();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes signature = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgSteamDatagramCertificateSigned certs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_certs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSteamDatagramSignedRelayAuthTicket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramSignedRelayAuthTicket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 reserved_do_not_use = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_reserved_do_not_use(), target);
  }

  // optional fixed64 key_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_key_id(), target);
  }

  // optional bytes ticket = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_ticket(), target);
  }

  // optional bytes signature = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_signature(), target);
  }

  // repeated .CMsgSteamDatagramCertificateSigned certs = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_certs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_certs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramSignedRelayAuthTicket)
  return target;
}

size_t CMsgSteamDatagramSignedRelayAuthTicket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramSignedRelayAuthTicket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgSteamDatagramCertificateSigned certs = 5;
  total_size += 1UL * this->_internal_certs_size();
  for (const auto& msg : this->certs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes ticket = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_ticket());
    }

    // optional bytes signature = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_signature());
    }

    // optional fixed64 reserved_do_not_use = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional fixed64 key_id = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSteamDatagramSignedRelayAuthTicket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgSteamDatagramSignedRelayAuthTicket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSteamDatagramSignedRelayAuthTicket::GetClassData() const { return &_class_data_; }

void CMsgSteamDatagramSignedRelayAuthTicket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgSteamDatagramSignedRelayAuthTicket *>(to)->MergeFrom(
      static_cast<const CMsgSteamDatagramSignedRelayAuthTicket &>(from));
}


void CMsgSteamDatagramSignedRelayAuthTicket::MergeFrom(const CMsgSteamDatagramSignedRelayAuthTicket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramSignedRelayAuthTicket)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  certs_.MergeFrom(from.certs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_ticket(from._internal_ticket());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_signature(from._internal_signature());
    }
    if (cached_has_bits & 0x00000004u) {
      reserved_do_not_use_ = from.reserved_do_not_use_;
    }
    if (cached_has_bits & 0x00000008u) {
      key_id_ = from.key_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramSignedRelayAuthTicket::CopyFrom(const CMsgSteamDatagramSignedRelayAuthTicket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramSignedRelayAuthTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramSignedRelayAuthTicket::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramSignedRelayAuthTicket::InternalSwap(CMsgSteamDatagramSignedRelayAuthTicket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  certs_.InternalSwap(&other->certs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ticket_, lhs_arena,
      &other->ticket_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &signature_, lhs_arena,
      &other->signature_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramSignedRelayAuthTicket, key_id_)
      + sizeof(CMsgSteamDatagramSignedRelayAuthTicket::key_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramSignedRelayAuthTicket, reserved_do_not_use_)>(
          reinterpret_cast<char*>(&reserved_do_not_use_),
          reinterpret_cast<char*>(&other->reserved_do_not_use_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamDatagramSignedRelayAuthTicket::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steamdatagram_5fmessages_5fauth_2eproto_getter, &descriptor_table_steamdatagram_5fmessages_5fauth_2eproto_once,
      file_level_metadata_steamdatagram_5fmessages_5fauth_2eproto[2]);
}

// ===================================================================

class CMsgSteamDatagramCachedCredentialsForApp::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramCachedCredentialsForApp>()._has_bits_);
  static void set_has_private_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cert(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgSteamDatagramCachedCredentialsForApp::CMsgSteamDatagramCachedCredentialsForApp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  relay_tickets_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramCachedCredentialsForApp)
}
CMsgSteamDatagramCachedCredentialsForApp::CMsgSteamDatagramCachedCredentialsForApp(const CMsgSteamDatagramCachedCredentialsForApp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      relay_tickets_(from.relay_tickets_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  private_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    private_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_private_key()) {
    private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_private_key(), 
      GetArenaForAllocation());
  }
  cert_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    cert_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_cert()) {
    cert_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cert(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramCachedCredentialsForApp)
}

inline void CMsgSteamDatagramCachedCredentialsForApp::SharedCtor() {
private_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  private_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
cert_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  cert_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgSteamDatagramCachedCredentialsForApp::~CMsgSteamDatagramCachedCredentialsForApp() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramCachedCredentialsForApp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgSteamDatagramCachedCredentialsForApp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  private_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cert_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgSteamDatagramCachedCredentialsForApp::ArenaDtor(void* object) {
  CMsgSteamDatagramCachedCredentialsForApp* _this = reinterpret_cast< CMsgSteamDatagramCachedCredentialsForApp* >(object);
  (void)_this;
}
void CMsgSteamDatagramCachedCredentialsForApp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSteamDatagramCachedCredentialsForApp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSteamDatagramCachedCredentialsForApp::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramCachedCredentialsForApp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  relay_tickets_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      private_key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      cert_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamDatagramCachedCredentialsForApp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes private_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_private_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes cert = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_cert();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes relay_tickets = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_relay_tickets();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSteamDatagramCachedCredentialsForApp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramCachedCredentialsForApp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes private_key = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_private_key(), target);
  }

  // optional bytes cert = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_cert(), target);
  }

  // repeated bytes relay_tickets = 3;
  for (int i = 0, n = this->_internal_relay_tickets_size(); i < n; i++) {
    const auto& s = this->_internal_relay_tickets(i);
    target = stream->WriteBytes(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramCachedCredentialsForApp)
  return target;
}

size_t CMsgSteamDatagramCachedCredentialsForApp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramCachedCredentialsForApp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes relay_tickets = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(relay_tickets_.size());
  for (int i = 0, n = relay_tickets_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      relay_tickets_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes private_key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_private_key());
    }

    // optional bytes cert = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_cert());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSteamDatagramCachedCredentialsForApp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgSteamDatagramCachedCredentialsForApp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSteamDatagramCachedCredentialsForApp::GetClassData() const { return &_class_data_; }

void CMsgSteamDatagramCachedCredentialsForApp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgSteamDatagramCachedCredentialsForApp *>(to)->MergeFrom(
      static_cast<const CMsgSteamDatagramCachedCredentialsForApp &>(from));
}


void CMsgSteamDatagramCachedCredentialsForApp::MergeFrom(const CMsgSteamDatagramCachedCredentialsForApp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramCachedCredentialsForApp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  relay_tickets_.MergeFrom(from.relay_tickets_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_private_key(from._internal_private_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_cert(from._internal_cert());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramCachedCredentialsForApp::CopyFrom(const CMsgSteamDatagramCachedCredentialsForApp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramCachedCredentialsForApp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramCachedCredentialsForApp::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramCachedCredentialsForApp::InternalSwap(CMsgSteamDatagramCachedCredentialsForApp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  relay_tickets_.InternalSwap(&other->relay_tickets_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &private_key_, lhs_arena,
      &other->private_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &cert_, lhs_arena,
      &other->cert_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamDatagramCachedCredentialsForApp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steamdatagram_5fmessages_5fauth_2eproto_getter, &descriptor_table_steamdatagram_5fmessages_5fauth_2eproto_once,
      file_level_metadata_steamdatagram_5fmessages_5fauth_2eproto[3]);
}

// ===================================================================

class CMsgSteamDatagramGameCoordinatorServerLogin::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramGameCoordinatorServerLogin>()._has_bits_);
  static void set_has_time_generated(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_routing(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_appdata(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_legacy_identity_binary(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_identity_string(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_dummy_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CMsgSteamDatagramGameCoordinatorServerLogin::CMsgSteamDatagramGameCoordinatorServerLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramGameCoordinatorServerLogin)
}
CMsgSteamDatagramGameCoordinatorServerLogin::CMsgSteamDatagramGameCoordinatorServerLogin(const CMsgSteamDatagramGameCoordinatorServerLogin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  routing_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    routing_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_routing()) {
    routing_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_routing(), 
      GetArenaForAllocation());
  }
  appdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    appdata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_appdata()) {
    appdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_appdata(), 
      GetArenaForAllocation());
  }
  legacy_identity_binary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    legacy_identity_binary_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_legacy_identity_binary()) {
    legacy_identity_binary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_legacy_identity_binary(), 
      GetArenaForAllocation());
  }
  identity_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    identity_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_identity_string()) {
    identity_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_identity_string(), 
      GetArenaForAllocation());
  }
  ::memcpy(&time_generated_, &from.time_generated_,
    static_cast<size_t>(reinterpret_cast<char*>(&dummy_steam_id_) -
    reinterpret_cast<char*>(&time_generated_)) + sizeof(dummy_steam_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramGameCoordinatorServerLogin)
}

inline void CMsgSteamDatagramGameCoordinatorServerLogin::SharedCtor() {
routing_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  routing_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
appdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  appdata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
legacy_identity_binary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  legacy_identity_binary_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
identity_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  identity_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&time_generated_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&dummy_steam_id_) -
    reinterpret_cast<char*>(&time_generated_)) + sizeof(dummy_steam_id_));
}

CMsgSteamDatagramGameCoordinatorServerLogin::~CMsgSteamDatagramGameCoordinatorServerLogin() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramGameCoordinatorServerLogin)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgSteamDatagramGameCoordinatorServerLogin::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  routing_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  appdata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  legacy_identity_binary_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  identity_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgSteamDatagramGameCoordinatorServerLogin::ArenaDtor(void* object) {
  CMsgSteamDatagramGameCoordinatorServerLogin* _this = reinterpret_cast< CMsgSteamDatagramGameCoordinatorServerLogin* >(object);
  (void)_this;
}
void CMsgSteamDatagramGameCoordinatorServerLogin::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSteamDatagramGameCoordinatorServerLogin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSteamDatagramGameCoordinatorServerLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramGameCoordinatorServerLogin)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      routing_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      appdata_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      legacy_identity_binary_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      identity_string_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000070u) {
    ::memset(&time_generated_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dummy_steam_id_) -
        reinterpret_cast<char*>(&time_generated_)) + sizeof(dummy_steam_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamDatagramGameCoordinatorServerLogin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 time_generated = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_time_generated(&has_bits);
          time_generated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 appid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes routing = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_routing();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes appdata = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_appdata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes legacy_identity_binary = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_legacy_identity_binary();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string identity_string = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_identity_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgSteamDatagramGameCoordinatorServerLogin.identity_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 dummy_steam_id = 99;
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_dummy_steam_id(&has_bits);
          dummy_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSteamDatagramGameCoordinatorServerLogin::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramGameCoordinatorServerLogin)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 time_generated = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_time_generated(), target);
  }

  // optional uint32 appid = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_appid(), target);
  }

  // optional bytes routing = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_routing(), target);
  }

  // optional bytes appdata = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_appdata(), target);
  }

  // optional bytes legacy_identity_binary = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_legacy_identity_binary(), target);
  }

  // optional string identity_string = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_identity_string().data(), static_cast<int>(this->_internal_identity_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSteamDatagramGameCoordinatorServerLogin.identity_string");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_identity_string(), target);
  }

  // optional fixed64 dummy_steam_id = 99;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(99, this->_internal_dummy_steam_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramGameCoordinatorServerLogin)
  return target;
}

size_t CMsgSteamDatagramGameCoordinatorServerLogin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramGameCoordinatorServerLogin)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional bytes routing = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_routing());
    }

    // optional bytes appdata = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_appdata());
    }

    // optional bytes legacy_identity_binary = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_legacy_identity_binary());
    }

    // optional string identity_string = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_identity_string());
    }

    // optional uint32 time_generated = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_time_generated());
    }

    // optional uint32 appid = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional fixed64 dummy_steam_id = 99;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSteamDatagramGameCoordinatorServerLogin::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgSteamDatagramGameCoordinatorServerLogin::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSteamDatagramGameCoordinatorServerLogin::GetClassData() const { return &_class_data_; }

void CMsgSteamDatagramGameCoordinatorServerLogin::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgSteamDatagramGameCoordinatorServerLogin *>(to)->MergeFrom(
      static_cast<const CMsgSteamDatagramGameCoordinatorServerLogin &>(from));
}


void CMsgSteamDatagramGameCoordinatorServerLogin::MergeFrom(const CMsgSteamDatagramGameCoordinatorServerLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramGameCoordinatorServerLogin)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_routing(from._internal_routing());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_appdata(from._internal_appdata());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_legacy_identity_binary(from._internal_legacy_identity_binary());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_identity_string(from._internal_identity_string());
    }
    if (cached_has_bits & 0x00000010u) {
      time_generated_ = from.time_generated_;
    }
    if (cached_has_bits & 0x00000020u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000040u) {
      dummy_steam_id_ = from.dummy_steam_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramGameCoordinatorServerLogin::CopyFrom(const CMsgSteamDatagramGameCoordinatorServerLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramGameCoordinatorServerLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramGameCoordinatorServerLogin::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramGameCoordinatorServerLogin::InternalSwap(CMsgSteamDatagramGameCoordinatorServerLogin* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &routing_, lhs_arena,
      &other->routing_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &appdata_, lhs_arena,
      &other->appdata_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &legacy_identity_binary_, lhs_arena,
      &other->legacy_identity_binary_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &identity_string_, lhs_arena,
      &other->identity_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameCoordinatorServerLogin, dummy_steam_id_)
      + sizeof(CMsgSteamDatagramGameCoordinatorServerLogin::dummy_steam_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameCoordinatorServerLogin, time_generated_)>(
          reinterpret_cast<char*>(&time_generated_),
          reinterpret_cast<char*>(&other->time_generated_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamDatagramGameCoordinatorServerLogin::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steamdatagram_5fmessages_5fauth_2eproto_getter, &descriptor_table_steamdatagram_5fmessages_5fauth_2eproto_once,
      file_level_metadata_steamdatagram_5fmessages_5fauth_2eproto[4]);
}

// ===================================================================

class CMsgSteamDatagramSignedGameCoordinatorServerLogin::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramSignedGameCoordinatorServerLogin>()._has_bits_);
  static const ::CMsgSteamDatagramCertificateSigned& cert(const CMsgSteamDatagramSignedGameCoordinatorServerLogin* msg);
  static void set_has_cert(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_login(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgSteamDatagramCertificateSigned&
CMsgSteamDatagramSignedGameCoordinatorServerLogin::_Internal::cert(const CMsgSteamDatagramSignedGameCoordinatorServerLogin* msg) {
  return *msg->cert_;
}
void CMsgSteamDatagramSignedGameCoordinatorServerLogin::clear_cert() {
  if (cert_ != nullptr) cert_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
CMsgSteamDatagramSignedGameCoordinatorServerLogin::CMsgSteamDatagramSignedGameCoordinatorServerLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramSignedGameCoordinatorServerLogin)
}
CMsgSteamDatagramSignedGameCoordinatorServerLogin::CMsgSteamDatagramSignedGameCoordinatorServerLogin(const CMsgSteamDatagramSignedGameCoordinatorServerLogin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  login_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    login_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_login()) {
    login_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_login(), 
      GetArenaForAllocation());
  }
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_signature()) {
    signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signature(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_cert()) {
    cert_ = new ::CMsgSteamDatagramCertificateSigned(*from.cert_);
  } else {
    cert_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramSignedGameCoordinatorServerLogin)
}

inline void CMsgSteamDatagramSignedGameCoordinatorServerLogin::SharedCtor() {
login_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  login_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
cert_ = nullptr;
}

CMsgSteamDatagramSignedGameCoordinatorServerLogin::~CMsgSteamDatagramSignedGameCoordinatorServerLogin() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramSignedGameCoordinatorServerLogin)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgSteamDatagramSignedGameCoordinatorServerLogin::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  login_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete cert_;
}

void CMsgSteamDatagramSignedGameCoordinatorServerLogin::ArenaDtor(void* object) {
  CMsgSteamDatagramSignedGameCoordinatorServerLogin* _this = reinterpret_cast< CMsgSteamDatagramSignedGameCoordinatorServerLogin* >(object);
  (void)_this;
}
void CMsgSteamDatagramSignedGameCoordinatorServerLogin::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSteamDatagramSignedGameCoordinatorServerLogin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSteamDatagramSignedGameCoordinatorServerLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramSignedGameCoordinatorServerLogin)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      login_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      signature_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(cert_ != nullptr);
      cert_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamDatagramSignedGameCoordinatorServerLogin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgSteamDatagramCertificateSigned cert = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cert(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes login = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_login();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes signature = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSteamDatagramSignedGameCoordinatorServerLogin::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramSignedGameCoordinatorServerLogin)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgSteamDatagramCertificateSigned cert = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::cert(this), target, stream);
  }

  // optional bytes login = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_login(), target);
  }

  // optional bytes signature = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_signature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramSignedGameCoordinatorServerLogin)
  return target;
}

size_t CMsgSteamDatagramSignedGameCoordinatorServerLogin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramSignedGameCoordinatorServerLogin)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes login = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_login());
    }

    // optional bytes signature = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_signature());
    }

    // optional .CMsgSteamDatagramCertificateSigned cert = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cert_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSteamDatagramSignedGameCoordinatorServerLogin::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgSteamDatagramSignedGameCoordinatorServerLogin::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSteamDatagramSignedGameCoordinatorServerLogin::GetClassData() const { return &_class_data_; }

void CMsgSteamDatagramSignedGameCoordinatorServerLogin::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgSteamDatagramSignedGameCoordinatorServerLogin *>(to)->MergeFrom(
      static_cast<const CMsgSteamDatagramSignedGameCoordinatorServerLogin &>(from));
}


void CMsgSteamDatagramSignedGameCoordinatorServerLogin::MergeFrom(const CMsgSteamDatagramSignedGameCoordinatorServerLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramSignedGameCoordinatorServerLogin)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_login(from._internal_login());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_signature(from._internal_signature());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_cert()->::CMsgSteamDatagramCertificateSigned::MergeFrom(from._internal_cert());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramSignedGameCoordinatorServerLogin::CopyFrom(const CMsgSteamDatagramSignedGameCoordinatorServerLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramSignedGameCoordinatorServerLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramSignedGameCoordinatorServerLogin::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramSignedGameCoordinatorServerLogin::InternalSwap(CMsgSteamDatagramSignedGameCoordinatorServerLogin* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &login_, lhs_arena,
      &other->login_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &signature_, lhs_arena,
      &other->signature_, rhs_arena
  );
  swap(cert_, other->cert_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamDatagramSignedGameCoordinatorServerLogin::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steamdatagram_5fmessages_5fauth_2eproto_getter, &descriptor_table_steamdatagram_5fmessages_5fauth_2eproto_once,
      file_level_metadata_steamdatagram_5fmessages_5fauth_2eproto[5]);
}

// ===================================================================

class CMsgSteamDatagramHostedServerAddressPlaintext::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramHostedServerAddressPlaintext>()._has_bits_);
  static void set_has_ipv4(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ipv6(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_port(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_routing_secret(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_protocol_version(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgSteamDatagramHostedServerAddressPlaintext::CMsgSteamDatagramHostedServerAddressPlaintext(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramHostedServerAddressPlaintext)
}
CMsgSteamDatagramHostedServerAddressPlaintext::CMsgSteamDatagramHostedServerAddressPlaintext(const CMsgSteamDatagramHostedServerAddressPlaintext& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ipv6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ipv6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ipv6()) {
    ipv6_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ipv6(), 
      GetArenaForAllocation());
  }
  ::memcpy(&ipv4_, &from.ipv4_,
    static_cast<size_t>(reinterpret_cast<char*>(&protocol_version_) -
    reinterpret_cast<char*>(&ipv4_)) + sizeof(protocol_version_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramHostedServerAddressPlaintext)
}

inline void CMsgSteamDatagramHostedServerAddressPlaintext::SharedCtor() {
ipv6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ipv6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ipv4_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&protocol_version_) -
    reinterpret_cast<char*>(&ipv4_)) + sizeof(protocol_version_));
}

CMsgSteamDatagramHostedServerAddressPlaintext::~CMsgSteamDatagramHostedServerAddressPlaintext() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramHostedServerAddressPlaintext)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgSteamDatagramHostedServerAddressPlaintext::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ipv6_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgSteamDatagramHostedServerAddressPlaintext::ArenaDtor(void* object) {
  CMsgSteamDatagramHostedServerAddressPlaintext* _this = reinterpret_cast< CMsgSteamDatagramHostedServerAddressPlaintext* >(object);
  (void)_this;
}
void CMsgSteamDatagramHostedServerAddressPlaintext::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSteamDatagramHostedServerAddressPlaintext::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSteamDatagramHostedServerAddressPlaintext::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramHostedServerAddressPlaintext)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ipv6_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&ipv4_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&protocol_version_) -
        reinterpret_cast<char*>(&ipv4_)) + sizeof(protocol_version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamDatagramHostedServerAddressPlaintext::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed32 ipv4 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_ipv4(&has_bits);
          ipv4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional bytes ipv6 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ipv6();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_port(&has_bits);
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 routing_secret = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_routing_secret(&has_bits);
          routing_secret_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 protocol_version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_protocol_version(&has_bits);
          protocol_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSteamDatagramHostedServerAddressPlaintext::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramHostedServerAddressPlaintext)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 ipv4 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->_internal_ipv4(), target);
  }

  // optional bytes ipv6 = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_ipv6(), target);
  }

  // optional uint32 port = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_port(), target);
  }

  // optional fixed64 routing_secret = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(4, this->_internal_routing_secret(), target);
  }

  // optional uint32 protocol_version = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_protocol_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramHostedServerAddressPlaintext)
  return target;
}

size_t CMsgSteamDatagramHostedServerAddressPlaintext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramHostedServerAddressPlaintext)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes ipv6 = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_ipv6());
    }

    // optional fixed32 ipv4 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional uint32 port = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_port());
    }

    // optional fixed64 routing_secret = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional uint32 protocol_version = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_protocol_version());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSteamDatagramHostedServerAddressPlaintext::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgSteamDatagramHostedServerAddressPlaintext::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSteamDatagramHostedServerAddressPlaintext::GetClassData() const { return &_class_data_; }

void CMsgSteamDatagramHostedServerAddressPlaintext::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgSteamDatagramHostedServerAddressPlaintext *>(to)->MergeFrom(
      static_cast<const CMsgSteamDatagramHostedServerAddressPlaintext &>(from));
}


void CMsgSteamDatagramHostedServerAddressPlaintext::MergeFrom(const CMsgSteamDatagramHostedServerAddressPlaintext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramHostedServerAddressPlaintext)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_ipv6(from._internal_ipv6());
    }
    if (cached_has_bits & 0x00000002u) {
      ipv4_ = from.ipv4_;
    }
    if (cached_has_bits & 0x00000004u) {
      port_ = from.port_;
    }
    if (cached_has_bits & 0x00000008u) {
      routing_secret_ = from.routing_secret_;
    }
    if (cached_has_bits & 0x00000010u) {
      protocol_version_ = from.protocol_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramHostedServerAddressPlaintext::CopyFrom(const CMsgSteamDatagramHostedServerAddressPlaintext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramHostedServerAddressPlaintext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramHostedServerAddressPlaintext::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramHostedServerAddressPlaintext::InternalSwap(CMsgSteamDatagramHostedServerAddressPlaintext* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ipv6_, lhs_arena,
      &other->ipv6_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramHostedServerAddressPlaintext, protocol_version_)
      + sizeof(CMsgSteamDatagramHostedServerAddressPlaintext::protocol_version_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramHostedServerAddressPlaintext, ipv4_)>(
          reinterpret_cast<char*>(&ipv4_),
          reinterpret_cast<char*>(&other->ipv4_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamDatagramHostedServerAddressPlaintext::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steamdatagram_5fmessages_5fauth_2eproto_getter, &descriptor_table_steamdatagram_5fmessages_5fauth_2eproto_once,
      file_level_metadata_steamdatagram_5fmessages_5fauth_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMsgSteamDatagramRelayAuthTicket_ExtraField* Arena::CreateMaybeMessage< ::CMsgSteamDatagramRelayAuthTicket_ExtraField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamDatagramRelayAuthTicket_ExtraField >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamDatagramRelayAuthTicket* Arena::CreateMaybeMessage< ::CMsgSteamDatagramRelayAuthTicket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamDatagramRelayAuthTicket >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamDatagramSignedRelayAuthTicket* Arena::CreateMaybeMessage< ::CMsgSteamDatagramSignedRelayAuthTicket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamDatagramSignedRelayAuthTicket >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamDatagramCachedCredentialsForApp* Arena::CreateMaybeMessage< ::CMsgSteamDatagramCachedCredentialsForApp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamDatagramCachedCredentialsForApp >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamDatagramGameCoordinatorServerLogin* Arena::CreateMaybeMessage< ::CMsgSteamDatagramGameCoordinatorServerLogin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamDatagramGameCoordinatorServerLogin >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamDatagramSignedGameCoordinatorServerLogin* Arena::CreateMaybeMessage< ::CMsgSteamDatagramSignedGameCoordinatorServerLogin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamDatagramSignedGameCoordinatorServerLogin >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamDatagramHostedServerAddressPlaintext* Arena::CreateMaybeMessage< ::CMsgSteamDatagramHostedServerAddressPlaintext >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamDatagramHostedServerAddressPlaintext >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
