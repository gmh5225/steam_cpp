// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_useraccount.steamclient.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_steammessages_5fuseraccount_2esteamclient_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_steammessages_5fuseraccount_2esteamclient_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "steammessages_base.pb.h"
#include "steammessages_unified_base.steamclient.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_5fuseraccount_2esteamclient_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_5fuseraccount_2esteamclient_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[29]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fuseraccount_2esteamclient_2eproto;
class CAccountLinking_GetLinkedAccountInfo_Request;
struct CAccountLinking_GetLinkedAccountInfo_RequestDefaultTypeInternal;
extern CAccountLinking_GetLinkedAccountInfo_RequestDefaultTypeInternal _CAccountLinking_GetLinkedAccountInfo_Request_default_instance_;
class CAccountLinking_GetLinkedAccountInfo_Response;
struct CAccountLinking_GetLinkedAccountInfo_ResponseDefaultTypeInternal;
extern CAccountLinking_GetLinkedAccountInfo_ResponseDefaultTypeInternal _CAccountLinking_GetLinkedAccountInfo_Response_default_instance_;
class CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response;
struct CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_ResponseDefaultTypeInternal;
extern CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_ResponseDefaultTypeInternal _CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response_default_instance_;
class CEmbeddedClient_AuthorizeCurrentDevice_Request;
struct CEmbeddedClient_AuthorizeCurrentDevice_RequestDefaultTypeInternal;
extern CEmbeddedClient_AuthorizeCurrentDevice_RequestDefaultTypeInternal _CEmbeddedClient_AuthorizeCurrentDevice_Request_default_instance_;
class CEmbeddedClient_AuthorizeDevice_Response;
struct CEmbeddedClient_AuthorizeDevice_ResponseDefaultTypeInternal;
extern CEmbeddedClient_AuthorizeDevice_ResponseDefaultTypeInternal _CEmbeddedClient_AuthorizeDevice_Response_default_instance_;
class CEmbeddedClient_Token;
struct CEmbeddedClient_TokenDefaultTypeInternal;
extern CEmbeddedClient_TokenDefaultTypeInternal _CEmbeddedClient_Token_default_instance_;
class CUserAccount_CancelLicenseForApp_Request;
struct CUserAccount_CancelLicenseForApp_RequestDefaultTypeInternal;
extern CUserAccount_CancelLicenseForApp_RequestDefaultTypeInternal _CUserAccount_CancelLicenseForApp_Request_default_instance_;
class CUserAccount_CancelLicenseForApp_Response;
struct CUserAccount_CancelLicenseForApp_ResponseDefaultTypeInternal;
extern CUserAccount_CancelLicenseForApp_ResponseDefaultTypeInternal _CUserAccount_CancelLicenseForApp_Response_default_instance_;
class CUserAccount_CreateFriendInviteToken_Request;
struct CUserAccount_CreateFriendInviteToken_RequestDefaultTypeInternal;
extern CUserAccount_CreateFriendInviteToken_RequestDefaultTypeInternal _CUserAccount_CreateFriendInviteToken_Request_default_instance_;
class CUserAccount_CreateFriendInviteToken_Response;
struct CUserAccount_CreateFriendInviteToken_ResponseDefaultTypeInternal;
extern CUserAccount_CreateFriendInviteToken_ResponseDefaultTypeInternal _CUserAccount_CreateFriendInviteToken_Response_default_instance_;
class CUserAccount_GetAccountLinkStatus_Request;
struct CUserAccount_GetAccountLinkStatus_RequestDefaultTypeInternal;
extern CUserAccount_GetAccountLinkStatus_RequestDefaultTypeInternal _CUserAccount_GetAccountLinkStatus_Request_default_instance_;
class CUserAccount_GetAccountLinkStatus_Response;
struct CUserAccount_GetAccountLinkStatus_ResponseDefaultTypeInternal;
extern CUserAccount_GetAccountLinkStatus_ResponseDefaultTypeInternal _CUserAccount_GetAccountLinkStatus_Response_default_instance_;
class CUserAccount_GetAvailableValveDiscountPromotions_Request;
struct CUserAccount_GetAvailableValveDiscountPromotions_RequestDefaultTypeInternal;
extern CUserAccount_GetAvailableValveDiscountPromotions_RequestDefaultTypeInternal _CUserAccount_GetAvailableValveDiscountPromotions_Request_default_instance_;
class CUserAccount_GetAvailableValveDiscountPromotions_Response;
struct CUserAccount_GetAvailableValveDiscountPromotions_ResponseDefaultTypeInternal;
extern CUserAccount_GetAvailableValveDiscountPromotions_ResponseDefaultTypeInternal _CUserAccount_GetAvailableValveDiscountPromotions_Response_default_instance_;
class CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails;
struct CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetailsDefaultTypeInternal;
extern CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetailsDefaultTypeInternal _CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails_default_instance_;
class CUserAccount_GetClientWalletDetails_Request;
struct CUserAccount_GetClientWalletDetails_RequestDefaultTypeInternal;
extern CUserAccount_GetClientWalletDetails_RequestDefaultTypeInternal _CUserAccount_GetClientWalletDetails_Request_default_instance_;
class CUserAccount_GetFriendInviteTokens_Request;
struct CUserAccount_GetFriendInviteTokens_RequestDefaultTypeInternal;
extern CUserAccount_GetFriendInviteTokens_RequestDefaultTypeInternal _CUserAccount_GetFriendInviteTokens_Request_default_instance_;
class CUserAccount_GetFriendInviteTokens_Response;
struct CUserAccount_GetFriendInviteTokens_ResponseDefaultTypeInternal;
extern CUserAccount_GetFriendInviteTokens_ResponseDefaultTypeInternal _CUserAccount_GetFriendInviteTokens_Response_default_instance_;
class CUserAccount_GetUserCountry_Request;
struct CUserAccount_GetUserCountry_RequestDefaultTypeInternal;
extern CUserAccount_GetUserCountry_RequestDefaultTypeInternal _CUserAccount_GetUserCountry_Request_default_instance_;
class CUserAccount_GetUserCountry_Response;
struct CUserAccount_GetUserCountry_ResponseDefaultTypeInternal;
extern CUserAccount_GetUserCountry_ResponseDefaultTypeInternal _CUserAccount_GetUserCountry_Response_default_instance_;
class CUserAccount_GetWalletDetails_Response;
struct CUserAccount_GetWalletDetails_ResponseDefaultTypeInternal;
extern CUserAccount_GetWalletDetails_ResponseDefaultTypeInternal _CUserAccount_GetWalletDetails_Response_default_instance_;
class CUserAccount_RedeemFriendInviteToken_Request;
struct CUserAccount_RedeemFriendInviteToken_RequestDefaultTypeInternal;
extern CUserAccount_RedeemFriendInviteToken_RequestDefaultTypeInternal _CUserAccount_RedeemFriendInviteToken_Request_default_instance_;
class CUserAccount_RedeemFriendInviteToken_Response;
struct CUserAccount_RedeemFriendInviteToken_ResponseDefaultTypeInternal;
extern CUserAccount_RedeemFriendInviteToken_ResponseDefaultTypeInternal _CUserAccount_RedeemFriendInviteToken_Response_default_instance_;
class CUserAccount_RegisterCompatTool_Request;
struct CUserAccount_RegisterCompatTool_RequestDefaultTypeInternal;
extern CUserAccount_RegisterCompatTool_RequestDefaultTypeInternal _CUserAccount_RegisterCompatTool_Request_default_instance_;
class CUserAccount_RegisterCompatTool_Response;
struct CUserAccount_RegisterCompatTool_ResponseDefaultTypeInternal;
extern CUserAccount_RegisterCompatTool_ResponseDefaultTypeInternal _CUserAccount_RegisterCompatTool_Response_default_instance_;
class CUserAccount_RevokeFriendInviteToken_Request;
struct CUserAccount_RevokeFriendInviteToken_RequestDefaultTypeInternal;
extern CUserAccount_RevokeFriendInviteToken_RequestDefaultTypeInternal _CUserAccount_RevokeFriendInviteToken_Request_default_instance_;
class CUserAccount_RevokeFriendInviteToken_Response;
struct CUserAccount_RevokeFriendInviteToken_ResponseDefaultTypeInternal;
extern CUserAccount_RevokeFriendInviteToken_ResponseDefaultTypeInternal _CUserAccount_RevokeFriendInviteToken_Response_default_instance_;
class CUserAccount_ViewFriendInviteToken_Request;
struct CUserAccount_ViewFriendInviteToken_RequestDefaultTypeInternal;
extern CUserAccount_ViewFriendInviteToken_RequestDefaultTypeInternal _CUserAccount_ViewFriendInviteToken_Request_default_instance_;
class CUserAccount_ViewFriendInviteToken_Response;
struct CUserAccount_ViewFriendInviteToken_ResponseDefaultTypeInternal;
extern CUserAccount_ViewFriendInviteToken_ResponseDefaultTypeInternal _CUserAccount_ViewFriendInviteToken_Response_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CAccountLinking_GetLinkedAccountInfo_Request* Arena::CreateMaybeMessage<::CAccountLinking_GetLinkedAccountInfo_Request>(Arena*);
template<> ::CAccountLinking_GetLinkedAccountInfo_Response* Arena::CreateMaybeMessage<::CAccountLinking_GetLinkedAccountInfo_Response>(Arena*);
template<> ::CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response* Arena::CreateMaybeMessage<::CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response>(Arena*);
template<> ::CEmbeddedClient_AuthorizeCurrentDevice_Request* Arena::CreateMaybeMessage<::CEmbeddedClient_AuthorizeCurrentDevice_Request>(Arena*);
template<> ::CEmbeddedClient_AuthorizeDevice_Response* Arena::CreateMaybeMessage<::CEmbeddedClient_AuthorizeDevice_Response>(Arena*);
template<> ::CEmbeddedClient_Token* Arena::CreateMaybeMessage<::CEmbeddedClient_Token>(Arena*);
template<> ::CUserAccount_CancelLicenseForApp_Request* Arena::CreateMaybeMessage<::CUserAccount_CancelLicenseForApp_Request>(Arena*);
template<> ::CUserAccount_CancelLicenseForApp_Response* Arena::CreateMaybeMessage<::CUserAccount_CancelLicenseForApp_Response>(Arena*);
template<> ::CUserAccount_CreateFriendInviteToken_Request* Arena::CreateMaybeMessage<::CUserAccount_CreateFriendInviteToken_Request>(Arena*);
template<> ::CUserAccount_CreateFriendInviteToken_Response* Arena::CreateMaybeMessage<::CUserAccount_CreateFriendInviteToken_Response>(Arena*);
template<> ::CUserAccount_GetAccountLinkStatus_Request* Arena::CreateMaybeMessage<::CUserAccount_GetAccountLinkStatus_Request>(Arena*);
template<> ::CUserAccount_GetAccountLinkStatus_Response* Arena::CreateMaybeMessage<::CUserAccount_GetAccountLinkStatus_Response>(Arena*);
template<> ::CUserAccount_GetAvailableValveDiscountPromotions_Request* Arena::CreateMaybeMessage<::CUserAccount_GetAvailableValveDiscountPromotions_Request>(Arena*);
template<> ::CUserAccount_GetAvailableValveDiscountPromotions_Response* Arena::CreateMaybeMessage<::CUserAccount_GetAvailableValveDiscountPromotions_Response>(Arena*);
template<> ::CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails* Arena::CreateMaybeMessage<::CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails>(Arena*);
template<> ::CUserAccount_GetClientWalletDetails_Request* Arena::CreateMaybeMessage<::CUserAccount_GetClientWalletDetails_Request>(Arena*);
template<> ::CUserAccount_GetFriendInviteTokens_Request* Arena::CreateMaybeMessage<::CUserAccount_GetFriendInviteTokens_Request>(Arena*);
template<> ::CUserAccount_GetFriendInviteTokens_Response* Arena::CreateMaybeMessage<::CUserAccount_GetFriendInviteTokens_Response>(Arena*);
template<> ::CUserAccount_GetUserCountry_Request* Arena::CreateMaybeMessage<::CUserAccount_GetUserCountry_Request>(Arena*);
template<> ::CUserAccount_GetUserCountry_Response* Arena::CreateMaybeMessage<::CUserAccount_GetUserCountry_Response>(Arena*);
template<> ::CUserAccount_GetWalletDetails_Response* Arena::CreateMaybeMessage<::CUserAccount_GetWalletDetails_Response>(Arena*);
template<> ::CUserAccount_RedeemFriendInviteToken_Request* Arena::CreateMaybeMessage<::CUserAccount_RedeemFriendInviteToken_Request>(Arena*);
template<> ::CUserAccount_RedeemFriendInviteToken_Response* Arena::CreateMaybeMessage<::CUserAccount_RedeemFriendInviteToken_Response>(Arena*);
template<> ::CUserAccount_RegisterCompatTool_Request* Arena::CreateMaybeMessage<::CUserAccount_RegisterCompatTool_Request>(Arena*);
template<> ::CUserAccount_RegisterCompatTool_Response* Arena::CreateMaybeMessage<::CUserAccount_RegisterCompatTool_Response>(Arena*);
template<> ::CUserAccount_RevokeFriendInviteToken_Request* Arena::CreateMaybeMessage<::CUserAccount_RevokeFriendInviteToken_Request>(Arena*);
template<> ::CUserAccount_RevokeFriendInviteToken_Response* Arena::CreateMaybeMessage<::CUserAccount_RevokeFriendInviteToken_Response>(Arena*);
template<> ::CUserAccount_ViewFriendInviteToken_Request* Arena::CreateMaybeMessage<::CUserAccount_ViewFriendInviteToken_Request>(Arena*);
template<> ::CUserAccount_ViewFriendInviteToken_Response* Arena::CreateMaybeMessage<::CUserAccount_ViewFriendInviteToken_Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum EInternalAccountType : int {
  k_EInternalSteamAccountType = 1,
  k_EInternalClanType = 2,
  k_EInternalAppType = 3,
  k_EInternalBroadcastChannelType = 4
};
bool EInternalAccountType_IsValid(int value);
constexpr EInternalAccountType EInternalAccountType_MIN = k_EInternalSteamAccountType;
constexpr EInternalAccountType EInternalAccountType_MAX = k_EInternalBroadcastChannelType;
constexpr int EInternalAccountType_ARRAYSIZE = EInternalAccountType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EInternalAccountType_descriptor();
template<typename T>
inline const std::string& EInternalAccountType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EInternalAccountType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EInternalAccountType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EInternalAccountType_descriptor(), enum_t_value);
}
inline bool EInternalAccountType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EInternalAccountType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EInternalAccountType>(
    EInternalAccountType_descriptor(), name, value);
}
enum EExternalAccountType : int {
  k_EExternalNone = 0,
  k_EExternalSteamAccount = 1,
  k_EExternalGoogleAccount = 2,
  k_EExternalFacebookAccount = 3,
  k_EExternalTwitterAccount = 4,
  k_EExternalTwitchAccount = 5,
  k_EExternalYouTubeChannelAccount = 6,
  k_EExternalFacebookPage = 7
};
bool EExternalAccountType_IsValid(int value);
constexpr EExternalAccountType EExternalAccountType_MIN = k_EExternalNone;
constexpr EExternalAccountType EExternalAccountType_MAX = k_EExternalFacebookPage;
constexpr int EExternalAccountType_ARRAYSIZE = EExternalAccountType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EExternalAccountType_descriptor();
template<typename T>
inline const std::string& EExternalAccountType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EExternalAccountType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EExternalAccountType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EExternalAccountType_descriptor(), enum_t_value);
}
inline bool EExternalAccountType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EExternalAccountType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EExternalAccountType>(
    EExternalAccountType_descriptor(), name, value);
}
// ===================================================================

class CUserAccount_GetAvailableValveDiscountPromotions_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CUserAccount_GetAvailableValveDiscountPromotions_Request) */ {
 public:
  inline CUserAccount_GetAvailableValveDiscountPromotions_Request() : CUserAccount_GetAvailableValveDiscountPromotions_Request(nullptr) {}
  ~CUserAccount_GetAvailableValveDiscountPromotions_Request() override;
  explicit constexpr CUserAccount_GetAvailableValveDiscountPromotions_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CUserAccount_GetAvailableValveDiscountPromotions_Request(const CUserAccount_GetAvailableValveDiscountPromotions_Request& from);
  CUserAccount_GetAvailableValveDiscountPromotions_Request(CUserAccount_GetAvailableValveDiscountPromotions_Request&& from) noexcept
    : CUserAccount_GetAvailableValveDiscountPromotions_Request() {
    *this = ::std::move(from);
  }

  inline CUserAccount_GetAvailableValveDiscountPromotions_Request& operator=(const CUserAccount_GetAvailableValveDiscountPromotions_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CUserAccount_GetAvailableValveDiscountPromotions_Request& operator=(CUserAccount_GetAvailableValveDiscountPromotions_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CUserAccount_GetAvailableValveDiscountPromotions_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CUserAccount_GetAvailableValveDiscountPromotions_Request* internal_default_instance() {
    return reinterpret_cast<const CUserAccount_GetAvailableValveDiscountPromotions_Request*>(
               &_CUserAccount_GetAvailableValveDiscountPromotions_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CUserAccount_GetAvailableValveDiscountPromotions_Request& a, CUserAccount_GetAvailableValveDiscountPromotions_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CUserAccount_GetAvailableValveDiscountPromotions_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CUserAccount_GetAvailableValveDiscountPromotions_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CUserAccount_GetAvailableValveDiscountPromotions_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CUserAccount_GetAvailableValveDiscountPromotions_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CUserAccount_GetAvailableValveDiscountPromotions_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CUserAccount_GetAvailableValveDiscountPromotions_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CUserAccount_GetAvailableValveDiscountPromotions_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CUserAccount_GetAvailableValveDiscountPromotions_Request";
  }
  protected:
  explicit CUserAccount_GetAvailableValveDiscountPromotions_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountryCodeFieldNumber = 1,
  };
  // optional string country_code = 1;
  bool has_country_code() const;
  private:
  bool _internal_has_country_code() const;
  public:
  void clear_country_code();
  const std::string& country_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_country_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_country_code();
  PROTOBUF_NODISCARD std::string* release_country_code();
  void set_allocated_country_code(std::string* country_code);
  private:
  const std::string& _internal_country_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_country_code(const std::string& value);
  std::string* _internal_mutable_country_code();
  public:

  // @@protoc_insertion_point(class_scope:CUserAccount_GetAvailableValveDiscountPromotions_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_code_;
  friend struct ::TableStruct_steammessages_5fuseraccount_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails) */ {
 public:
  inline CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails() : CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails(nullptr) {}
  ~CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails() override;
  explicit constexpr CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails(const CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails& from);
  CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails(CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails&& from) noexcept
    : CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails() {
    *this = ::std::move(from);
  }

  inline CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails& operator=(const CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails& operator=(CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails& default_instance() {
    return *internal_default_instance();
  }
  static inline const CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails* internal_default_instance() {
    return reinterpret_cast<const CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails*>(
               &_CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails& a, CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails";
  }
  protected:
  explicit CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPromotionDescriptionFieldNumber = 2,
    kLocalizedNameTokenFieldNumber = 10,
    kMinimumCartAmountFieldNumber = 3,
    kPromotionidFieldNumber = 1,
    kCurrencyCodeFieldNumber = 6,
    kMinimumCartAmountForDisplayFieldNumber = 4,
    kDiscountAmountFieldNumber = 5,
    kAvailableUseCountFieldNumber = 7,
    kPromotionalDiscountTypeFieldNumber = 8,
    kLoyaltyRewardIdFieldNumber = 9,
    kMaxUseCountFieldNumber = 11,
  };
  // optional string promotion_description = 2;
  bool has_promotion_description() const;
  private:
  bool _internal_has_promotion_description() const;
  public:
  void clear_promotion_description();
  const std::string& promotion_description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_promotion_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_promotion_description();
  PROTOBUF_NODISCARD std::string* release_promotion_description();
  void set_allocated_promotion_description(std::string* promotion_description);
  private:
  const std::string& _internal_promotion_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_promotion_description(const std::string& value);
  std::string* _internal_mutable_promotion_description();
  public:

  // optional string localized_name_token = 10;
  bool has_localized_name_token() const;
  private:
  bool _internal_has_localized_name_token() const;
  public:
  void clear_localized_name_token();
  const std::string& localized_name_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_localized_name_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_localized_name_token();
  PROTOBUF_NODISCARD std::string* release_localized_name_token();
  void set_allocated_localized_name_token(std::string* localized_name_token);
  private:
  const std::string& _internal_localized_name_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_localized_name_token(const std::string& value);
  std::string* _internal_mutable_localized_name_token();
  public:

  // optional int64 minimum_cart_amount = 3;
  bool has_minimum_cart_amount() const;
  private:
  bool _internal_has_minimum_cart_amount() const;
  public:
  void clear_minimum_cart_amount();
  int64_t minimum_cart_amount() const;
  void set_minimum_cart_amount(int64_t value);
  private:
  int64_t _internal_minimum_cart_amount() const;
  void _internal_set_minimum_cart_amount(int64_t value);
  public:

  // optional uint32 promotionid = 1;
  bool has_promotionid() const;
  private:
  bool _internal_has_promotionid() const;
  public:
  void clear_promotionid();
  uint32_t promotionid() const;
  void set_promotionid(uint32_t value);
  private:
  uint32_t _internal_promotionid() const;
  void _internal_set_promotionid(uint32_t value);
  public:

  // optional int32 currency_code = 6;
  bool has_currency_code() const;
  private:
  bool _internal_has_currency_code() const;
  public:
  void clear_currency_code();
  int32_t currency_code() const;
  void set_currency_code(int32_t value);
  private:
  int32_t _internal_currency_code() const;
  void _internal_set_currency_code(int32_t value);
  public:

  // optional int64 minimum_cart_amount_for_display = 4;
  bool has_minimum_cart_amount_for_display() const;
  private:
  bool _internal_has_minimum_cart_amount_for_display() const;
  public:
  void clear_minimum_cart_amount_for_display();
  int64_t minimum_cart_amount_for_display() const;
  void set_minimum_cart_amount_for_display(int64_t value);
  private:
  int64_t _internal_minimum_cart_amount_for_display() const;
  void _internal_set_minimum_cart_amount_for_display(int64_t value);
  public:

  // optional int64 discount_amount = 5;
  bool has_discount_amount() const;
  private:
  bool _internal_has_discount_amount() const;
  public:
  void clear_discount_amount();
  int64_t discount_amount() const;
  void set_discount_amount(int64_t value);
  private:
  int64_t _internal_discount_amount() const;
  void _internal_set_discount_amount(int64_t value);
  public:

  // optional int32 available_use_count = 7;
  bool has_available_use_count() const;
  private:
  bool _internal_has_available_use_count() const;
  public:
  void clear_available_use_count();
  int32_t available_use_count() const;
  void set_available_use_count(int32_t value);
  private:
  int32_t _internal_available_use_count() const;
  void _internal_set_available_use_count(int32_t value);
  public:

  // optional int32 promotional_discount_type = 8;
  bool has_promotional_discount_type() const;
  private:
  bool _internal_has_promotional_discount_type() const;
  public:
  void clear_promotional_discount_type();
  int32_t promotional_discount_type() const;
  void set_promotional_discount_type(int32_t value);
  private:
  int32_t _internal_promotional_discount_type() const;
  void _internal_set_promotional_discount_type(int32_t value);
  public:

  // optional int32 loyalty_reward_id = 9;
  bool has_loyalty_reward_id() const;
  private:
  bool _internal_has_loyalty_reward_id() const;
  public:
  void clear_loyalty_reward_id();
  int32_t loyalty_reward_id() const;
  void set_loyalty_reward_id(int32_t value);
  private:
  int32_t _internal_loyalty_reward_id() const;
  void _internal_set_loyalty_reward_id(int32_t value);
  public:

  // optional int32 max_use_count = 11;
  bool has_max_use_count() const;
  private:
  bool _internal_has_max_use_count() const;
  public:
  void clear_max_use_count();
  int32_t max_use_count() const;
  void set_max_use_count(int32_t value);
  private:
  int32_t _internal_max_use_count() const;
  void _internal_set_max_use_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr promotion_description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr localized_name_token_;
  int64_t minimum_cart_amount_;
  uint32_t promotionid_;
  int32_t currency_code_;
  int64_t minimum_cart_amount_for_display_;
  int64_t discount_amount_;
  int32_t available_use_count_;
  int32_t promotional_discount_type_;
  int32_t loyalty_reward_id_;
  int32_t max_use_count_;
  friend struct ::TableStruct_steammessages_5fuseraccount_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CUserAccount_GetAvailableValveDiscountPromotions_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CUserAccount_GetAvailableValveDiscountPromotions_Response) */ {
 public:
  inline CUserAccount_GetAvailableValveDiscountPromotions_Response() : CUserAccount_GetAvailableValveDiscountPromotions_Response(nullptr) {}
  ~CUserAccount_GetAvailableValveDiscountPromotions_Response() override;
  explicit constexpr CUserAccount_GetAvailableValveDiscountPromotions_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CUserAccount_GetAvailableValveDiscountPromotions_Response(const CUserAccount_GetAvailableValveDiscountPromotions_Response& from);
  CUserAccount_GetAvailableValveDiscountPromotions_Response(CUserAccount_GetAvailableValveDiscountPromotions_Response&& from) noexcept
    : CUserAccount_GetAvailableValveDiscountPromotions_Response() {
    *this = ::std::move(from);
  }

  inline CUserAccount_GetAvailableValveDiscountPromotions_Response& operator=(const CUserAccount_GetAvailableValveDiscountPromotions_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CUserAccount_GetAvailableValveDiscountPromotions_Response& operator=(CUserAccount_GetAvailableValveDiscountPromotions_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CUserAccount_GetAvailableValveDiscountPromotions_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CUserAccount_GetAvailableValveDiscountPromotions_Response* internal_default_instance() {
    return reinterpret_cast<const CUserAccount_GetAvailableValveDiscountPromotions_Response*>(
               &_CUserAccount_GetAvailableValveDiscountPromotions_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CUserAccount_GetAvailableValveDiscountPromotions_Response& a, CUserAccount_GetAvailableValveDiscountPromotions_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CUserAccount_GetAvailableValveDiscountPromotions_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CUserAccount_GetAvailableValveDiscountPromotions_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CUserAccount_GetAvailableValveDiscountPromotions_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CUserAccount_GetAvailableValveDiscountPromotions_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CUserAccount_GetAvailableValveDiscountPromotions_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CUserAccount_GetAvailableValveDiscountPromotions_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CUserAccount_GetAvailableValveDiscountPromotions_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CUserAccount_GetAvailableValveDiscountPromotions_Response";
  }
  protected:
  explicit CUserAccount_GetAvailableValveDiscountPromotions_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails ValveDiscountPromotionDetails;

  // accessors -------------------------------------------------------

  enum : int {
    kPromotionsFieldNumber = 1,
  };
  // repeated .CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails promotions = 1;
  int promotions_size() const;
  private:
  int _internal_promotions_size() const;
  public:
  void clear_promotions();
  ::CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails* mutable_promotions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails >*
      mutable_promotions();
  private:
  const ::CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails& _internal_promotions(int index) const;
  ::CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails* _internal_add_promotions();
  public:
  const ::CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails& promotions(int index) const;
  ::CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails* add_promotions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails >&
      promotions() const;

  // @@protoc_insertion_point(class_scope:CUserAccount_GetAvailableValveDiscountPromotions_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails > promotions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fuseraccount_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CUserAccount_GetClientWalletDetails_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CUserAccount_GetClientWalletDetails_Request) */ {
 public:
  inline CUserAccount_GetClientWalletDetails_Request() : CUserAccount_GetClientWalletDetails_Request(nullptr) {}
  ~CUserAccount_GetClientWalletDetails_Request() override;
  explicit constexpr CUserAccount_GetClientWalletDetails_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CUserAccount_GetClientWalletDetails_Request(const CUserAccount_GetClientWalletDetails_Request& from);
  CUserAccount_GetClientWalletDetails_Request(CUserAccount_GetClientWalletDetails_Request&& from) noexcept
    : CUserAccount_GetClientWalletDetails_Request() {
    *this = ::std::move(from);
  }

  inline CUserAccount_GetClientWalletDetails_Request& operator=(const CUserAccount_GetClientWalletDetails_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CUserAccount_GetClientWalletDetails_Request& operator=(CUserAccount_GetClientWalletDetails_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CUserAccount_GetClientWalletDetails_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CUserAccount_GetClientWalletDetails_Request* internal_default_instance() {
    return reinterpret_cast<const CUserAccount_GetClientWalletDetails_Request*>(
               &_CUserAccount_GetClientWalletDetails_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CUserAccount_GetClientWalletDetails_Request& a, CUserAccount_GetClientWalletDetails_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CUserAccount_GetClientWalletDetails_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CUserAccount_GetClientWalletDetails_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CUserAccount_GetClientWalletDetails_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CUserAccount_GetClientWalletDetails_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CUserAccount_GetClientWalletDetails_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CUserAccount_GetClientWalletDetails_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CUserAccount_GetClientWalletDetails_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CUserAccount_GetClientWalletDetails_Request";
  }
  protected:
  explicit CUserAccount_GetClientWalletDetails_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIncludeBalanceInUsdFieldNumber = 1,
    kIncludeFormattedBalanceFieldNumber = 3,
    kWalletRegionFieldNumber = 2,
  };
  // optional bool include_balance_in_usd = 1;
  bool has_include_balance_in_usd() const;
  private:
  bool _internal_has_include_balance_in_usd() const;
  public:
  void clear_include_balance_in_usd();
  bool include_balance_in_usd() const;
  void set_include_balance_in_usd(bool value);
  private:
  bool _internal_include_balance_in_usd() const;
  void _internal_set_include_balance_in_usd(bool value);
  public:

  // optional bool include_formatted_balance = 3;
  bool has_include_formatted_balance() const;
  private:
  bool _internal_has_include_formatted_balance() const;
  public:
  void clear_include_formatted_balance();
  bool include_formatted_balance() const;
  void set_include_formatted_balance(bool value);
  private:
  bool _internal_include_formatted_balance() const;
  void _internal_set_include_formatted_balance(bool value);
  public:

  // optional int32 wallet_region = 2 [default = 1];
  bool has_wallet_region() const;
  private:
  bool _internal_has_wallet_region() const;
  public:
  void clear_wallet_region();
  int32_t wallet_region() const;
  void set_wallet_region(int32_t value);
  private:
  int32_t _internal_wallet_region() const;
  void _internal_set_wallet_region(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CUserAccount_GetClientWalletDetails_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool include_balance_in_usd_;
  bool include_formatted_balance_;
  int32_t wallet_region_;
  friend struct ::TableStruct_steammessages_5fuseraccount_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CUserAccount_GetWalletDetails_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CUserAccount_GetWalletDetails_Response) */ {
 public:
  inline CUserAccount_GetWalletDetails_Response() : CUserAccount_GetWalletDetails_Response(nullptr) {}
  ~CUserAccount_GetWalletDetails_Response() override;
  explicit constexpr CUserAccount_GetWalletDetails_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CUserAccount_GetWalletDetails_Response(const CUserAccount_GetWalletDetails_Response& from);
  CUserAccount_GetWalletDetails_Response(CUserAccount_GetWalletDetails_Response&& from) noexcept
    : CUserAccount_GetWalletDetails_Response() {
    *this = ::std::move(from);
  }

  inline CUserAccount_GetWalletDetails_Response& operator=(const CUserAccount_GetWalletDetails_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CUserAccount_GetWalletDetails_Response& operator=(CUserAccount_GetWalletDetails_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CUserAccount_GetWalletDetails_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CUserAccount_GetWalletDetails_Response* internal_default_instance() {
    return reinterpret_cast<const CUserAccount_GetWalletDetails_Response*>(
               &_CUserAccount_GetWalletDetails_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CUserAccount_GetWalletDetails_Response& a, CUserAccount_GetWalletDetails_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CUserAccount_GetWalletDetails_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CUserAccount_GetWalletDetails_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CUserAccount_GetWalletDetails_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CUserAccount_GetWalletDetails_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CUserAccount_GetWalletDetails_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CUserAccount_GetWalletDetails_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CUserAccount_GetWalletDetails_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CUserAccount_GetWalletDetails_Response";
  }
  protected:
  explicit CUserAccount_GetWalletDetails_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOtherRegionsFieldNumber = 13,
    kUserCountryCodeFieldNumber = 2,
    kWalletCountryCodeFieldNumber = 3,
    kWalletStateFieldNumber = 4,
    kFormattedBalanceFieldNumber = 14,
    kBalanceFieldNumber = 5,
    kDelayedBalanceFieldNumber = 6,
    kHasWalletFieldNumber = 1,
    kHasWalletInOtherRegionsFieldNumber = 12,
    kCurrencyCodeFieldNumber = 7,
    kMostRecentTxnidFieldNumber = 9,
    kBalanceInUsdFieldNumber = 10,
    kDelayedBalanceInUsdFieldNumber = 11,
    kTimeMostRecentTxnFieldNumber = 8,
  };
  // repeated int32 other_regions = 13;
  int other_regions_size() const;
  private:
  int _internal_other_regions_size() const;
  public:
  void clear_other_regions();
  private:
  int32_t _internal_other_regions(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_other_regions() const;
  void _internal_add_other_regions(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_other_regions();
  public:
  int32_t other_regions(int index) const;
  void set_other_regions(int index, int32_t value);
  void add_other_regions(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      other_regions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_other_regions();

  // optional string user_country_code = 2;
  bool has_user_country_code() const;
  private:
  bool _internal_has_user_country_code() const;
  public:
  void clear_user_country_code();
  const std::string& user_country_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_country_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_country_code();
  PROTOBUF_NODISCARD std::string* release_user_country_code();
  void set_allocated_user_country_code(std::string* user_country_code);
  private:
  const std::string& _internal_user_country_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_country_code(const std::string& value);
  std::string* _internal_mutable_user_country_code();
  public:

  // optional string wallet_country_code = 3;
  bool has_wallet_country_code() const;
  private:
  bool _internal_has_wallet_country_code() const;
  public:
  void clear_wallet_country_code();
  const std::string& wallet_country_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_wallet_country_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_wallet_country_code();
  PROTOBUF_NODISCARD std::string* release_wallet_country_code();
  void set_allocated_wallet_country_code(std::string* wallet_country_code);
  private:
  const std::string& _internal_wallet_country_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_wallet_country_code(const std::string& value);
  std::string* _internal_mutable_wallet_country_code();
  public:

  // optional string wallet_state = 4;
  bool has_wallet_state() const;
  private:
  bool _internal_has_wallet_state() const;
  public:
  void clear_wallet_state();
  const std::string& wallet_state() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_wallet_state(ArgT0&& arg0, ArgT... args);
  std::string* mutable_wallet_state();
  PROTOBUF_NODISCARD std::string* release_wallet_state();
  void set_allocated_wallet_state(std::string* wallet_state);
  private:
  const std::string& _internal_wallet_state() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_wallet_state(const std::string& value);
  std::string* _internal_mutable_wallet_state();
  public:

  // optional string formatted_balance = 14;
  bool has_formatted_balance() const;
  private:
  bool _internal_has_formatted_balance() const;
  public:
  void clear_formatted_balance();
  const std::string& formatted_balance() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_formatted_balance(ArgT0&& arg0, ArgT... args);
  std::string* mutable_formatted_balance();
  PROTOBUF_NODISCARD std::string* release_formatted_balance();
  void set_allocated_formatted_balance(std::string* formatted_balance);
  private:
  const std::string& _internal_formatted_balance() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_formatted_balance(const std::string& value);
  std::string* _internal_mutable_formatted_balance();
  public:

  // optional int64 balance = 5;
  bool has_balance() const;
  private:
  bool _internal_has_balance() const;
  public:
  void clear_balance();
  int64_t balance() const;
  void set_balance(int64_t value);
  private:
  int64_t _internal_balance() const;
  void _internal_set_balance(int64_t value);
  public:

  // optional int64 delayed_balance = 6;
  bool has_delayed_balance() const;
  private:
  bool _internal_has_delayed_balance() const;
  public:
  void clear_delayed_balance();
  int64_t delayed_balance() const;
  void set_delayed_balance(int64_t value);
  private:
  int64_t _internal_delayed_balance() const;
  void _internal_set_delayed_balance(int64_t value);
  public:

  // optional bool has_wallet = 1;
  bool has_has_wallet() const;
  private:
  bool _internal_has_has_wallet() const;
  public:
  void clear_has_wallet();
  bool has_wallet() const;
  void set_has_wallet(bool value);
  private:
  bool _internal_has_wallet() const;
  void _internal_set_has_wallet(bool value);
  public:

  // optional bool has_wallet_in_other_regions = 12;
  bool has_has_wallet_in_other_regions() const;
  private:
  bool _internal_has_has_wallet_in_other_regions() const;
  public:
  void clear_has_wallet_in_other_regions();
  bool has_wallet_in_other_regions() const;
  void set_has_wallet_in_other_regions(bool value);
  private:
  bool _internal_has_wallet_in_other_regions() const;
  void _internal_set_has_wallet_in_other_regions(bool value);
  public:

  // optional int32 currency_code = 7;
  bool has_currency_code() const;
  private:
  bool _internal_has_currency_code() const;
  public:
  void clear_currency_code();
  int32_t currency_code() const;
  void set_currency_code(int32_t value);
  private:
  int32_t _internal_currency_code() const;
  void _internal_set_currency_code(int32_t value);
  public:

  // optional uint64 most_recent_txnid = 9;
  bool has_most_recent_txnid() const;
  private:
  bool _internal_has_most_recent_txnid() const;
  public:
  void clear_most_recent_txnid();
  uint64_t most_recent_txnid() const;
  void set_most_recent_txnid(uint64_t value);
  private:
  uint64_t _internal_most_recent_txnid() const;
  void _internal_set_most_recent_txnid(uint64_t value);
  public:

  // optional int64 balance_in_usd = 10;
  bool has_balance_in_usd() const;
  private:
  bool _internal_has_balance_in_usd() const;
  public:
  void clear_balance_in_usd();
  int64_t balance_in_usd() const;
  void set_balance_in_usd(int64_t value);
  private:
  int64_t _internal_balance_in_usd() const;
  void _internal_set_balance_in_usd(int64_t value);
  public:

  // optional int64 delayed_balance_in_usd = 11;
  bool has_delayed_balance_in_usd() const;
  private:
  bool _internal_has_delayed_balance_in_usd() const;
  public:
  void clear_delayed_balance_in_usd();
  int64_t delayed_balance_in_usd() const;
  void set_delayed_balance_in_usd(int64_t value);
  private:
  int64_t _internal_delayed_balance_in_usd() const;
  void _internal_set_delayed_balance_in_usd(int64_t value);
  public:

  // optional uint32 time_most_recent_txn = 8;
  bool has_time_most_recent_txn() const;
  private:
  bool _internal_has_time_most_recent_txn() const;
  public:
  void clear_time_most_recent_txn();
  uint32_t time_most_recent_txn() const;
  void set_time_most_recent_txn(uint32_t value);
  private:
  uint32_t _internal_time_most_recent_txn() const;
  void _internal_set_time_most_recent_txn(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CUserAccount_GetWalletDetails_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > other_regions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_country_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr wallet_country_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr wallet_state_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr formatted_balance_;
  int64_t balance_;
  int64_t delayed_balance_;
  bool has_wallet_;
  bool has_wallet_in_other_regions_;
  int32_t currency_code_;
  uint64_t most_recent_txnid_;
  int64_t balance_in_usd_;
  int64_t delayed_balance_in_usd_;
  uint32_t time_most_recent_txn_;
  friend struct ::TableStruct_steammessages_5fuseraccount_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CUserAccount_GetAccountLinkStatus_Request final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CUserAccount_GetAccountLinkStatus_Request) */ {
 public:
  inline CUserAccount_GetAccountLinkStatus_Request() : CUserAccount_GetAccountLinkStatus_Request(nullptr) {}
  explicit constexpr CUserAccount_GetAccountLinkStatus_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CUserAccount_GetAccountLinkStatus_Request(const CUserAccount_GetAccountLinkStatus_Request& from);
  CUserAccount_GetAccountLinkStatus_Request(CUserAccount_GetAccountLinkStatus_Request&& from) noexcept
    : CUserAccount_GetAccountLinkStatus_Request() {
    *this = ::std::move(from);
  }

  inline CUserAccount_GetAccountLinkStatus_Request& operator=(const CUserAccount_GetAccountLinkStatus_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CUserAccount_GetAccountLinkStatus_Request& operator=(CUserAccount_GetAccountLinkStatus_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CUserAccount_GetAccountLinkStatus_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CUserAccount_GetAccountLinkStatus_Request* internal_default_instance() {
    return reinterpret_cast<const CUserAccount_GetAccountLinkStatus_Request*>(
               &_CUserAccount_GetAccountLinkStatus_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CUserAccount_GetAccountLinkStatus_Request& a, CUserAccount_GetAccountLinkStatus_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CUserAccount_GetAccountLinkStatus_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CUserAccount_GetAccountLinkStatus_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CUserAccount_GetAccountLinkStatus_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CUserAccount_GetAccountLinkStatus_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CUserAccount_GetAccountLinkStatus_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CUserAccount_GetAccountLinkStatus_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CUserAccount_GetAccountLinkStatus_Request";
  }
  protected:
  explicit CUserAccount_GetAccountLinkStatus_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CUserAccount_GetAccountLinkStatus_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fuseraccount_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CUserAccount_GetAccountLinkStatus_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CUserAccount_GetAccountLinkStatus_Response) */ {
 public:
  inline CUserAccount_GetAccountLinkStatus_Response() : CUserAccount_GetAccountLinkStatus_Response(nullptr) {}
  ~CUserAccount_GetAccountLinkStatus_Response() override;
  explicit constexpr CUserAccount_GetAccountLinkStatus_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CUserAccount_GetAccountLinkStatus_Response(const CUserAccount_GetAccountLinkStatus_Response& from);
  CUserAccount_GetAccountLinkStatus_Response(CUserAccount_GetAccountLinkStatus_Response&& from) noexcept
    : CUserAccount_GetAccountLinkStatus_Response() {
    *this = ::std::move(from);
  }

  inline CUserAccount_GetAccountLinkStatus_Response& operator=(const CUserAccount_GetAccountLinkStatus_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CUserAccount_GetAccountLinkStatus_Response& operator=(CUserAccount_GetAccountLinkStatus_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CUserAccount_GetAccountLinkStatus_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CUserAccount_GetAccountLinkStatus_Response* internal_default_instance() {
    return reinterpret_cast<const CUserAccount_GetAccountLinkStatus_Response*>(
               &_CUserAccount_GetAccountLinkStatus_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CUserAccount_GetAccountLinkStatus_Response& a, CUserAccount_GetAccountLinkStatus_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CUserAccount_GetAccountLinkStatus_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CUserAccount_GetAccountLinkStatus_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CUserAccount_GetAccountLinkStatus_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CUserAccount_GetAccountLinkStatus_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CUserAccount_GetAccountLinkStatus_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CUserAccount_GetAccountLinkStatus_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CUserAccount_GetAccountLinkStatus_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CUserAccount_GetAccountLinkStatus_Response";
  }
  protected:
  explicit CUserAccount_GetAccountLinkStatus_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPwidFieldNumber = 1,
    kIdentityVerificationFieldNumber = 2,
    kPerformedAgeVerificationFieldNumber = 3,
  };
  // optional uint32 pwid = 1;
  bool has_pwid() const;
  private:
  bool _internal_has_pwid() const;
  public:
  void clear_pwid();
  uint32_t pwid() const;
  void set_pwid(uint32_t value);
  private:
  uint32_t _internal_pwid() const;
  void _internal_set_pwid(uint32_t value);
  public:

  // optional uint32 identity_verification = 2;
  bool has_identity_verification() const;
  private:
  bool _internal_has_identity_verification() const;
  public:
  void clear_identity_verification();
  uint32_t identity_verification() const;
  void set_identity_verification(uint32_t value);
  private:
  uint32_t _internal_identity_verification() const;
  void _internal_set_identity_verification(uint32_t value);
  public:

  // optional bool performed_age_verification = 3;
  bool has_performed_age_verification() const;
  private:
  bool _internal_has_performed_age_verification() const;
  public:
  void clear_performed_age_verification();
  bool performed_age_verification() const;
  void set_performed_age_verification(bool value);
  private:
  bool _internal_performed_age_verification() const;
  void _internal_set_performed_age_verification(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CUserAccount_GetAccountLinkStatus_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t pwid_;
  uint32_t identity_verification_;
  bool performed_age_verification_;
  friend struct ::TableStruct_steammessages_5fuseraccount_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CUserAccount_CancelLicenseForApp_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CUserAccount_CancelLicenseForApp_Request) */ {
 public:
  inline CUserAccount_CancelLicenseForApp_Request() : CUserAccount_CancelLicenseForApp_Request(nullptr) {}
  ~CUserAccount_CancelLicenseForApp_Request() override;
  explicit constexpr CUserAccount_CancelLicenseForApp_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CUserAccount_CancelLicenseForApp_Request(const CUserAccount_CancelLicenseForApp_Request& from);
  CUserAccount_CancelLicenseForApp_Request(CUserAccount_CancelLicenseForApp_Request&& from) noexcept
    : CUserAccount_CancelLicenseForApp_Request() {
    *this = ::std::move(from);
  }

  inline CUserAccount_CancelLicenseForApp_Request& operator=(const CUserAccount_CancelLicenseForApp_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CUserAccount_CancelLicenseForApp_Request& operator=(CUserAccount_CancelLicenseForApp_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CUserAccount_CancelLicenseForApp_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CUserAccount_CancelLicenseForApp_Request* internal_default_instance() {
    return reinterpret_cast<const CUserAccount_CancelLicenseForApp_Request*>(
               &_CUserAccount_CancelLicenseForApp_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CUserAccount_CancelLicenseForApp_Request& a, CUserAccount_CancelLicenseForApp_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CUserAccount_CancelLicenseForApp_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CUserAccount_CancelLicenseForApp_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CUserAccount_CancelLicenseForApp_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CUserAccount_CancelLicenseForApp_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CUserAccount_CancelLicenseForApp_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CUserAccount_CancelLicenseForApp_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CUserAccount_CancelLicenseForApp_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CUserAccount_CancelLicenseForApp_Request";
  }
  protected:
  explicit CUserAccount_CancelLicenseForApp_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppidFieldNumber = 1,
  };
  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CUserAccount_CancelLicenseForApp_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t appid_;
  friend struct ::TableStruct_steammessages_5fuseraccount_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CUserAccount_CancelLicenseForApp_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CUserAccount_CancelLicenseForApp_Response) */ {
 public:
  inline CUserAccount_CancelLicenseForApp_Response() : CUserAccount_CancelLicenseForApp_Response(nullptr) {}
  explicit constexpr CUserAccount_CancelLicenseForApp_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CUserAccount_CancelLicenseForApp_Response(const CUserAccount_CancelLicenseForApp_Response& from);
  CUserAccount_CancelLicenseForApp_Response(CUserAccount_CancelLicenseForApp_Response&& from) noexcept
    : CUserAccount_CancelLicenseForApp_Response() {
    *this = ::std::move(from);
  }

  inline CUserAccount_CancelLicenseForApp_Response& operator=(const CUserAccount_CancelLicenseForApp_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CUserAccount_CancelLicenseForApp_Response& operator=(CUserAccount_CancelLicenseForApp_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CUserAccount_CancelLicenseForApp_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CUserAccount_CancelLicenseForApp_Response* internal_default_instance() {
    return reinterpret_cast<const CUserAccount_CancelLicenseForApp_Response*>(
               &_CUserAccount_CancelLicenseForApp_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CUserAccount_CancelLicenseForApp_Response& a, CUserAccount_CancelLicenseForApp_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CUserAccount_CancelLicenseForApp_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CUserAccount_CancelLicenseForApp_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CUserAccount_CancelLicenseForApp_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CUserAccount_CancelLicenseForApp_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CUserAccount_CancelLicenseForApp_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CUserAccount_CancelLicenseForApp_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CUserAccount_CancelLicenseForApp_Response";
  }
  protected:
  explicit CUserAccount_CancelLicenseForApp_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CUserAccount_CancelLicenseForApp_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fuseraccount_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CUserAccount_GetUserCountry_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CUserAccount_GetUserCountry_Request) */ {
 public:
  inline CUserAccount_GetUserCountry_Request() : CUserAccount_GetUserCountry_Request(nullptr) {}
  ~CUserAccount_GetUserCountry_Request() override;
  explicit constexpr CUserAccount_GetUserCountry_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CUserAccount_GetUserCountry_Request(const CUserAccount_GetUserCountry_Request& from);
  CUserAccount_GetUserCountry_Request(CUserAccount_GetUserCountry_Request&& from) noexcept
    : CUserAccount_GetUserCountry_Request() {
    *this = ::std::move(from);
  }

  inline CUserAccount_GetUserCountry_Request& operator=(const CUserAccount_GetUserCountry_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CUserAccount_GetUserCountry_Request& operator=(CUserAccount_GetUserCountry_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CUserAccount_GetUserCountry_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CUserAccount_GetUserCountry_Request* internal_default_instance() {
    return reinterpret_cast<const CUserAccount_GetUserCountry_Request*>(
               &_CUserAccount_GetUserCountry_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CUserAccount_GetUserCountry_Request& a, CUserAccount_GetUserCountry_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CUserAccount_GetUserCountry_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CUserAccount_GetUserCountry_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CUserAccount_GetUserCountry_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CUserAccount_GetUserCountry_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CUserAccount_GetUserCountry_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CUserAccount_GetUserCountry_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CUserAccount_GetUserCountry_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CUserAccount_GetUserCountry_Request";
  }
  protected:
  explicit CUserAccount_GetUserCountry_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidFieldNumber = 1,
  };
  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CUserAccount_GetUserCountry_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t steamid_;
  friend struct ::TableStruct_steammessages_5fuseraccount_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CUserAccount_GetUserCountry_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CUserAccount_GetUserCountry_Response) */ {
 public:
  inline CUserAccount_GetUserCountry_Response() : CUserAccount_GetUserCountry_Response(nullptr) {}
  ~CUserAccount_GetUserCountry_Response() override;
  explicit constexpr CUserAccount_GetUserCountry_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CUserAccount_GetUserCountry_Response(const CUserAccount_GetUserCountry_Response& from);
  CUserAccount_GetUserCountry_Response(CUserAccount_GetUserCountry_Response&& from) noexcept
    : CUserAccount_GetUserCountry_Response() {
    *this = ::std::move(from);
  }

  inline CUserAccount_GetUserCountry_Response& operator=(const CUserAccount_GetUserCountry_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CUserAccount_GetUserCountry_Response& operator=(CUserAccount_GetUserCountry_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CUserAccount_GetUserCountry_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CUserAccount_GetUserCountry_Response* internal_default_instance() {
    return reinterpret_cast<const CUserAccount_GetUserCountry_Response*>(
               &_CUserAccount_GetUserCountry_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CUserAccount_GetUserCountry_Response& a, CUserAccount_GetUserCountry_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CUserAccount_GetUserCountry_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CUserAccount_GetUserCountry_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CUserAccount_GetUserCountry_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CUserAccount_GetUserCountry_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CUserAccount_GetUserCountry_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CUserAccount_GetUserCountry_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CUserAccount_GetUserCountry_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CUserAccount_GetUserCountry_Response";
  }
  protected:
  explicit CUserAccount_GetUserCountry_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountryFieldNumber = 1,
  };
  // optional string country = 1;
  bool has_country() const;
  private:
  bool _internal_has_country() const;
  public:
  void clear_country();
  const std::string& country() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_country(ArgT0&& arg0, ArgT... args);
  std::string* mutable_country();
  PROTOBUF_NODISCARD std::string* release_country();
  void set_allocated_country(std::string* country);
  private:
  const std::string& _internal_country() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_country(const std::string& value);
  std::string* _internal_mutable_country();
  public:

  // @@protoc_insertion_point(class_scope:CUserAccount_GetUserCountry_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_;
  friend struct ::TableStruct_steammessages_5fuseraccount_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CUserAccount_CreateFriendInviteToken_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CUserAccount_CreateFriendInviteToken_Request) */ {
 public:
  inline CUserAccount_CreateFriendInviteToken_Request() : CUserAccount_CreateFriendInviteToken_Request(nullptr) {}
  ~CUserAccount_CreateFriendInviteToken_Request() override;
  explicit constexpr CUserAccount_CreateFriendInviteToken_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CUserAccount_CreateFriendInviteToken_Request(const CUserAccount_CreateFriendInviteToken_Request& from);
  CUserAccount_CreateFriendInviteToken_Request(CUserAccount_CreateFriendInviteToken_Request&& from) noexcept
    : CUserAccount_CreateFriendInviteToken_Request() {
    *this = ::std::move(from);
  }

  inline CUserAccount_CreateFriendInviteToken_Request& operator=(const CUserAccount_CreateFriendInviteToken_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CUserAccount_CreateFriendInviteToken_Request& operator=(CUserAccount_CreateFriendInviteToken_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CUserAccount_CreateFriendInviteToken_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CUserAccount_CreateFriendInviteToken_Request* internal_default_instance() {
    return reinterpret_cast<const CUserAccount_CreateFriendInviteToken_Request*>(
               &_CUserAccount_CreateFriendInviteToken_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CUserAccount_CreateFriendInviteToken_Request& a, CUserAccount_CreateFriendInviteToken_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CUserAccount_CreateFriendInviteToken_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CUserAccount_CreateFriendInviteToken_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CUserAccount_CreateFriendInviteToken_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CUserAccount_CreateFriendInviteToken_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CUserAccount_CreateFriendInviteToken_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CUserAccount_CreateFriendInviteToken_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CUserAccount_CreateFriendInviteToken_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CUserAccount_CreateFriendInviteToken_Request";
  }
  protected:
  explicit CUserAccount_CreateFriendInviteToken_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInviteNoteFieldNumber = 3,
    kInviteLimitFieldNumber = 1,
    kInviteDurationFieldNumber = 2,
  };
  // optional string invite_note = 3;
  bool has_invite_note() const;
  private:
  bool _internal_has_invite_note() const;
  public:
  void clear_invite_note();
  const std::string& invite_note() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_invite_note(ArgT0&& arg0, ArgT... args);
  std::string* mutable_invite_note();
  PROTOBUF_NODISCARD std::string* release_invite_note();
  void set_allocated_invite_note(std::string* invite_note);
  private:
  const std::string& _internal_invite_note() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_invite_note(const std::string& value);
  std::string* _internal_mutable_invite_note();
  public:

  // optional uint32 invite_limit = 1;
  bool has_invite_limit() const;
  private:
  bool _internal_has_invite_limit() const;
  public:
  void clear_invite_limit();
  uint32_t invite_limit() const;
  void set_invite_limit(uint32_t value);
  private:
  uint32_t _internal_invite_limit() const;
  void _internal_set_invite_limit(uint32_t value);
  public:

  // optional uint32 invite_duration = 2;
  bool has_invite_duration() const;
  private:
  bool _internal_has_invite_duration() const;
  public:
  void clear_invite_duration();
  uint32_t invite_duration() const;
  void set_invite_duration(uint32_t value);
  private:
  uint32_t _internal_invite_duration() const;
  void _internal_set_invite_duration(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CUserAccount_CreateFriendInviteToken_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr invite_note_;
  uint32_t invite_limit_;
  uint32_t invite_duration_;
  friend struct ::TableStruct_steammessages_5fuseraccount_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CUserAccount_CreateFriendInviteToken_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CUserAccount_CreateFriendInviteToken_Response) */ {
 public:
  inline CUserAccount_CreateFriendInviteToken_Response() : CUserAccount_CreateFriendInviteToken_Response(nullptr) {}
  ~CUserAccount_CreateFriendInviteToken_Response() override;
  explicit constexpr CUserAccount_CreateFriendInviteToken_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CUserAccount_CreateFriendInviteToken_Response(const CUserAccount_CreateFriendInviteToken_Response& from);
  CUserAccount_CreateFriendInviteToken_Response(CUserAccount_CreateFriendInviteToken_Response&& from) noexcept
    : CUserAccount_CreateFriendInviteToken_Response() {
    *this = ::std::move(from);
  }

  inline CUserAccount_CreateFriendInviteToken_Response& operator=(const CUserAccount_CreateFriendInviteToken_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CUserAccount_CreateFriendInviteToken_Response& operator=(CUserAccount_CreateFriendInviteToken_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CUserAccount_CreateFriendInviteToken_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CUserAccount_CreateFriendInviteToken_Response* internal_default_instance() {
    return reinterpret_cast<const CUserAccount_CreateFriendInviteToken_Response*>(
               &_CUserAccount_CreateFriendInviteToken_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CUserAccount_CreateFriendInviteToken_Response& a, CUserAccount_CreateFriendInviteToken_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CUserAccount_CreateFriendInviteToken_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CUserAccount_CreateFriendInviteToken_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CUserAccount_CreateFriendInviteToken_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CUserAccount_CreateFriendInviteToken_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CUserAccount_CreateFriendInviteToken_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CUserAccount_CreateFriendInviteToken_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CUserAccount_CreateFriendInviteToken_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CUserAccount_CreateFriendInviteToken_Response";
  }
  protected:
  explicit CUserAccount_CreateFriendInviteToken_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInviteTokenFieldNumber = 1,
    kInviteLimitFieldNumber = 2,
    kInviteDurationFieldNumber = 3,
    kTimeCreatedFieldNumber = 4,
    kValidFieldNumber = 5,
  };
  // optional string invite_token = 1;
  bool has_invite_token() const;
  private:
  bool _internal_has_invite_token() const;
  public:
  void clear_invite_token();
  const std::string& invite_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_invite_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_invite_token();
  PROTOBUF_NODISCARD std::string* release_invite_token();
  void set_allocated_invite_token(std::string* invite_token);
  private:
  const std::string& _internal_invite_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_invite_token(const std::string& value);
  std::string* _internal_mutable_invite_token();
  public:

  // optional uint64 invite_limit = 2;
  bool has_invite_limit() const;
  private:
  bool _internal_has_invite_limit() const;
  public:
  void clear_invite_limit();
  uint64_t invite_limit() const;
  void set_invite_limit(uint64_t value);
  private:
  uint64_t _internal_invite_limit() const;
  void _internal_set_invite_limit(uint64_t value);
  public:

  // optional uint64 invite_duration = 3;
  bool has_invite_duration() const;
  private:
  bool _internal_has_invite_duration() const;
  public:
  void clear_invite_duration();
  uint64_t invite_duration() const;
  void set_invite_duration(uint64_t value);
  private:
  uint64_t _internal_invite_duration() const;
  void _internal_set_invite_duration(uint64_t value);
  public:

  // optional fixed32 time_created = 4;
  bool has_time_created() const;
  private:
  bool _internal_has_time_created() const;
  public:
  void clear_time_created();
  uint32_t time_created() const;
  void set_time_created(uint32_t value);
  private:
  uint32_t _internal_time_created() const;
  void _internal_set_time_created(uint32_t value);
  public:

  // optional bool valid = 5;
  bool has_valid() const;
  private:
  bool _internal_has_valid() const;
  public:
  void clear_valid();
  bool valid() const;
  void set_valid(bool value);
  private:
  bool _internal_valid() const;
  void _internal_set_valid(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CUserAccount_CreateFriendInviteToken_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr invite_token_;
  uint64_t invite_limit_;
  uint64_t invite_duration_;
  uint32_t time_created_;
  bool valid_;
  friend struct ::TableStruct_steammessages_5fuseraccount_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CUserAccount_GetFriendInviteTokens_Request final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CUserAccount_GetFriendInviteTokens_Request) */ {
 public:
  inline CUserAccount_GetFriendInviteTokens_Request() : CUserAccount_GetFriendInviteTokens_Request(nullptr) {}
  explicit constexpr CUserAccount_GetFriendInviteTokens_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CUserAccount_GetFriendInviteTokens_Request(const CUserAccount_GetFriendInviteTokens_Request& from);
  CUserAccount_GetFriendInviteTokens_Request(CUserAccount_GetFriendInviteTokens_Request&& from) noexcept
    : CUserAccount_GetFriendInviteTokens_Request() {
    *this = ::std::move(from);
  }

  inline CUserAccount_GetFriendInviteTokens_Request& operator=(const CUserAccount_GetFriendInviteTokens_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CUserAccount_GetFriendInviteTokens_Request& operator=(CUserAccount_GetFriendInviteTokens_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CUserAccount_GetFriendInviteTokens_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CUserAccount_GetFriendInviteTokens_Request* internal_default_instance() {
    return reinterpret_cast<const CUserAccount_GetFriendInviteTokens_Request*>(
               &_CUserAccount_GetFriendInviteTokens_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CUserAccount_GetFriendInviteTokens_Request& a, CUserAccount_GetFriendInviteTokens_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CUserAccount_GetFriendInviteTokens_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CUserAccount_GetFriendInviteTokens_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CUserAccount_GetFriendInviteTokens_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CUserAccount_GetFriendInviteTokens_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CUserAccount_GetFriendInviteTokens_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CUserAccount_GetFriendInviteTokens_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CUserAccount_GetFriendInviteTokens_Request";
  }
  protected:
  explicit CUserAccount_GetFriendInviteTokens_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CUserAccount_GetFriendInviteTokens_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fuseraccount_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CUserAccount_GetFriendInviteTokens_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CUserAccount_GetFriendInviteTokens_Response) */ {
 public:
  inline CUserAccount_GetFriendInviteTokens_Response() : CUserAccount_GetFriendInviteTokens_Response(nullptr) {}
  ~CUserAccount_GetFriendInviteTokens_Response() override;
  explicit constexpr CUserAccount_GetFriendInviteTokens_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CUserAccount_GetFriendInviteTokens_Response(const CUserAccount_GetFriendInviteTokens_Response& from);
  CUserAccount_GetFriendInviteTokens_Response(CUserAccount_GetFriendInviteTokens_Response&& from) noexcept
    : CUserAccount_GetFriendInviteTokens_Response() {
    *this = ::std::move(from);
  }

  inline CUserAccount_GetFriendInviteTokens_Response& operator=(const CUserAccount_GetFriendInviteTokens_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CUserAccount_GetFriendInviteTokens_Response& operator=(CUserAccount_GetFriendInviteTokens_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CUserAccount_GetFriendInviteTokens_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CUserAccount_GetFriendInviteTokens_Response* internal_default_instance() {
    return reinterpret_cast<const CUserAccount_GetFriendInviteTokens_Response*>(
               &_CUserAccount_GetFriendInviteTokens_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CUserAccount_GetFriendInviteTokens_Response& a, CUserAccount_GetFriendInviteTokens_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CUserAccount_GetFriendInviteTokens_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CUserAccount_GetFriendInviteTokens_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CUserAccount_GetFriendInviteTokens_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CUserAccount_GetFriendInviteTokens_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CUserAccount_GetFriendInviteTokens_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CUserAccount_GetFriendInviteTokens_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CUserAccount_GetFriendInviteTokens_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CUserAccount_GetFriendInviteTokens_Response";
  }
  protected:
  explicit CUserAccount_GetFriendInviteTokens_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokensFieldNumber = 1,
  };
  // repeated .CUserAccount_CreateFriendInviteToken_Response tokens = 1;
  int tokens_size() const;
  private:
  int _internal_tokens_size() const;
  public:
  void clear_tokens();
  ::CUserAccount_CreateFriendInviteToken_Response* mutable_tokens(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CUserAccount_CreateFriendInviteToken_Response >*
      mutable_tokens();
  private:
  const ::CUserAccount_CreateFriendInviteToken_Response& _internal_tokens(int index) const;
  ::CUserAccount_CreateFriendInviteToken_Response* _internal_add_tokens();
  public:
  const ::CUserAccount_CreateFriendInviteToken_Response& tokens(int index) const;
  ::CUserAccount_CreateFriendInviteToken_Response* add_tokens();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CUserAccount_CreateFriendInviteToken_Response >&
      tokens() const;

  // @@protoc_insertion_point(class_scope:CUserAccount_GetFriendInviteTokens_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CUserAccount_CreateFriendInviteToken_Response > tokens_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fuseraccount_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CUserAccount_ViewFriendInviteToken_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CUserAccount_ViewFriendInviteToken_Request) */ {
 public:
  inline CUserAccount_ViewFriendInviteToken_Request() : CUserAccount_ViewFriendInviteToken_Request(nullptr) {}
  ~CUserAccount_ViewFriendInviteToken_Request() override;
  explicit constexpr CUserAccount_ViewFriendInviteToken_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CUserAccount_ViewFriendInviteToken_Request(const CUserAccount_ViewFriendInviteToken_Request& from);
  CUserAccount_ViewFriendInviteToken_Request(CUserAccount_ViewFriendInviteToken_Request&& from) noexcept
    : CUserAccount_ViewFriendInviteToken_Request() {
    *this = ::std::move(from);
  }

  inline CUserAccount_ViewFriendInviteToken_Request& operator=(const CUserAccount_ViewFriendInviteToken_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CUserAccount_ViewFriendInviteToken_Request& operator=(CUserAccount_ViewFriendInviteToken_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CUserAccount_ViewFriendInviteToken_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CUserAccount_ViewFriendInviteToken_Request* internal_default_instance() {
    return reinterpret_cast<const CUserAccount_ViewFriendInviteToken_Request*>(
               &_CUserAccount_ViewFriendInviteToken_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CUserAccount_ViewFriendInviteToken_Request& a, CUserAccount_ViewFriendInviteToken_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CUserAccount_ViewFriendInviteToken_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CUserAccount_ViewFriendInviteToken_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CUserAccount_ViewFriendInviteToken_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CUserAccount_ViewFriendInviteToken_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CUserAccount_ViewFriendInviteToken_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CUserAccount_ViewFriendInviteToken_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CUserAccount_ViewFriendInviteToken_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CUserAccount_ViewFriendInviteToken_Request";
  }
  protected:
  explicit CUserAccount_ViewFriendInviteToken_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInviteTokenFieldNumber = 2,
    kSteamidFieldNumber = 1,
  };
  // optional string invite_token = 2;
  bool has_invite_token() const;
  private:
  bool _internal_has_invite_token() const;
  public:
  void clear_invite_token();
  const std::string& invite_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_invite_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_invite_token();
  PROTOBUF_NODISCARD std::string* release_invite_token();
  void set_allocated_invite_token(std::string* invite_token);
  private:
  const std::string& _internal_invite_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_invite_token(const std::string& value);
  std::string* _internal_mutable_invite_token();
  public:

  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CUserAccount_ViewFriendInviteToken_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr invite_token_;
  uint64_t steamid_;
  friend struct ::TableStruct_steammessages_5fuseraccount_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CUserAccount_ViewFriendInviteToken_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CUserAccount_ViewFriendInviteToken_Response) */ {
 public:
  inline CUserAccount_ViewFriendInviteToken_Response() : CUserAccount_ViewFriendInviteToken_Response(nullptr) {}
  ~CUserAccount_ViewFriendInviteToken_Response() override;
  explicit constexpr CUserAccount_ViewFriendInviteToken_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CUserAccount_ViewFriendInviteToken_Response(const CUserAccount_ViewFriendInviteToken_Response& from);
  CUserAccount_ViewFriendInviteToken_Response(CUserAccount_ViewFriendInviteToken_Response&& from) noexcept
    : CUserAccount_ViewFriendInviteToken_Response() {
    *this = ::std::move(from);
  }

  inline CUserAccount_ViewFriendInviteToken_Response& operator=(const CUserAccount_ViewFriendInviteToken_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CUserAccount_ViewFriendInviteToken_Response& operator=(CUserAccount_ViewFriendInviteToken_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CUserAccount_ViewFriendInviteToken_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CUserAccount_ViewFriendInviteToken_Response* internal_default_instance() {
    return reinterpret_cast<const CUserAccount_ViewFriendInviteToken_Response*>(
               &_CUserAccount_ViewFriendInviteToken_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CUserAccount_ViewFriendInviteToken_Response& a, CUserAccount_ViewFriendInviteToken_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CUserAccount_ViewFriendInviteToken_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CUserAccount_ViewFriendInviteToken_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CUserAccount_ViewFriendInviteToken_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CUserAccount_ViewFriendInviteToken_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CUserAccount_ViewFriendInviteToken_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CUserAccount_ViewFriendInviteToken_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CUserAccount_ViewFriendInviteToken_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CUserAccount_ViewFriendInviteToken_Response";
  }
  protected:
  explicit CUserAccount_ViewFriendInviteToken_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidFieldNumber = 2,
    kInviteDurationFieldNumber = 3,
    kValidFieldNumber = 1,
  };
  // optional uint64 steamid = 2;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional uint64 invite_duration = 3;
  bool has_invite_duration() const;
  private:
  bool _internal_has_invite_duration() const;
  public:
  void clear_invite_duration();
  uint64_t invite_duration() const;
  void set_invite_duration(uint64_t value);
  private:
  uint64_t _internal_invite_duration() const;
  void _internal_set_invite_duration(uint64_t value);
  public:

  // optional bool valid = 1;
  bool has_valid() const;
  private:
  bool _internal_has_valid() const;
  public:
  void clear_valid();
  bool valid() const;
  void set_valid(bool value);
  private:
  bool _internal_valid() const;
  void _internal_set_valid(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CUserAccount_ViewFriendInviteToken_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t steamid_;
  uint64_t invite_duration_;
  bool valid_;
  friend struct ::TableStruct_steammessages_5fuseraccount_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CUserAccount_RedeemFriendInviteToken_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CUserAccount_RedeemFriendInviteToken_Request) */ {
 public:
  inline CUserAccount_RedeemFriendInviteToken_Request() : CUserAccount_RedeemFriendInviteToken_Request(nullptr) {}
  ~CUserAccount_RedeemFriendInviteToken_Request() override;
  explicit constexpr CUserAccount_RedeemFriendInviteToken_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CUserAccount_RedeemFriendInviteToken_Request(const CUserAccount_RedeemFriendInviteToken_Request& from);
  CUserAccount_RedeemFriendInviteToken_Request(CUserAccount_RedeemFriendInviteToken_Request&& from) noexcept
    : CUserAccount_RedeemFriendInviteToken_Request() {
    *this = ::std::move(from);
  }

  inline CUserAccount_RedeemFriendInviteToken_Request& operator=(const CUserAccount_RedeemFriendInviteToken_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CUserAccount_RedeemFriendInviteToken_Request& operator=(CUserAccount_RedeemFriendInviteToken_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CUserAccount_RedeemFriendInviteToken_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CUserAccount_RedeemFriendInviteToken_Request* internal_default_instance() {
    return reinterpret_cast<const CUserAccount_RedeemFriendInviteToken_Request*>(
               &_CUserAccount_RedeemFriendInviteToken_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CUserAccount_RedeemFriendInviteToken_Request& a, CUserAccount_RedeemFriendInviteToken_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CUserAccount_RedeemFriendInviteToken_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CUserAccount_RedeemFriendInviteToken_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CUserAccount_RedeemFriendInviteToken_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CUserAccount_RedeemFriendInviteToken_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CUserAccount_RedeemFriendInviteToken_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CUserAccount_RedeemFriendInviteToken_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CUserAccount_RedeemFriendInviteToken_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CUserAccount_RedeemFriendInviteToken_Request";
  }
  protected:
  explicit CUserAccount_RedeemFriendInviteToken_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInviteTokenFieldNumber = 2,
    kSteamidFieldNumber = 1,
  };
  // optional string invite_token = 2;
  bool has_invite_token() const;
  private:
  bool _internal_has_invite_token() const;
  public:
  void clear_invite_token();
  const std::string& invite_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_invite_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_invite_token();
  PROTOBUF_NODISCARD std::string* release_invite_token();
  void set_allocated_invite_token(std::string* invite_token);
  private:
  const std::string& _internal_invite_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_invite_token(const std::string& value);
  std::string* _internal_mutable_invite_token();
  public:

  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CUserAccount_RedeemFriendInviteToken_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr invite_token_;
  uint64_t steamid_;
  friend struct ::TableStruct_steammessages_5fuseraccount_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CUserAccount_RedeemFriendInviteToken_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CUserAccount_RedeemFriendInviteToken_Response) */ {
 public:
  inline CUserAccount_RedeemFriendInviteToken_Response() : CUserAccount_RedeemFriendInviteToken_Response(nullptr) {}
  explicit constexpr CUserAccount_RedeemFriendInviteToken_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CUserAccount_RedeemFriendInviteToken_Response(const CUserAccount_RedeemFriendInviteToken_Response& from);
  CUserAccount_RedeemFriendInviteToken_Response(CUserAccount_RedeemFriendInviteToken_Response&& from) noexcept
    : CUserAccount_RedeemFriendInviteToken_Response() {
    *this = ::std::move(from);
  }

  inline CUserAccount_RedeemFriendInviteToken_Response& operator=(const CUserAccount_RedeemFriendInviteToken_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CUserAccount_RedeemFriendInviteToken_Response& operator=(CUserAccount_RedeemFriendInviteToken_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CUserAccount_RedeemFriendInviteToken_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CUserAccount_RedeemFriendInviteToken_Response* internal_default_instance() {
    return reinterpret_cast<const CUserAccount_RedeemFriendInviteToken_Response*>(
               &_CUserAccount_RedeemFriendInviteToken_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CUserAccount_RedeemFriendInviteToken_Response& a, CUserAccount_RedeemFriendInviteToken_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CUserAccount_RedeemFriendInviteToken_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CUserAccount_RedeemFriendInviteToken_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CUserAccount_RedeemFriendInviteToken_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CUserAccount_RedeemFriendInviteToken_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CUserAccount_RedeemFriendInviteToken_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CUserAccount_RedeemFriendInviteToken_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CUserAccount_RedeemFriendInviteToken_Response";
  }
  protected:
  explicit CUserAccount_RedeemFriendInviteToken_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CUserAccount_RedeemFriendInviteToken_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fuseraccount_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CUserAccount_RevokeFriendInviteToken_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CUserAccount_RevokeFriendInviteToken_Request) */ {
 public:
  inline CUserAccount_RevokeFriendInviteToken_Request() : CUserAccount_RevokeFriendInviteToken_Request(nullptr) {}
  ~CUserAccount_RevokeFriendInviteToken_Request() override;
  explicit constexpr CUserAccount_RevokeFriendInviteToken_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CUserAccount_RevokeFriendInviteToken_Request(const CUserAccount_RevokeFriendInviteToken_Request& from);
  CUserAccount_RevokeFriendInviteToken_Request(CUserAccount_RevokeFriendInviteToken_Request&& from) noexcept
    : CUserAccount_RevokeFriendInviteToken_Request() {
    *this = ::std::move(from);
  }

  inline CUserAccount_RevokeFriendInviteToken_Request& operator=(const CUserAccount_RevokeFriendInviteToken_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CUserAccount_RevokeFriendInviteToken_Request& operator=(CUserAccount_RevokeFriendInviteToken_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CUserAccount_RevokeFriendInviteToken_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CUserAccount_RevokeFriendInviteToken_Request* internal_default_instance() {
    return reinterpret_cast<const CUserAccount_RevokeFriendInviteToken_Request*>(
               &_CUserAccount_RevokeFriendInviteToken_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CUserAccount_RevokeFriendInviteToken_Request& a, CUserAccount_RevokeFriendInviteToken_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CUserAccount_RevokeFriendInviteToken_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CUserAccount_RevokeFriendInviteToken_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CUserAccount_RevokeFriendInviteToken_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CUserAccount_RevokeFriendInviteToken_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CUserAccount_RevokeFriendInviteToken_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CUserAccount_RevokeFriendInviteToken_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CUserAccount_RevokeFriendInviteToken_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CUserAccount_RevokeFriendInviteToken_Request";
  }
  protected:
  explicit CUserAccount_RevokeFriendInviteToken_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInviteTokenFieldNumber = 1,
  };
  // optional string invite_token = 1;
  bool has_invite_token() const;
  private:
  bool _internal_has_invite_token() const;
  public:
  void clear_invite_token();
  const std::string& invite_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_invite_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_invite_token();
  PROTOBUF_NODISCARD std::string* release_invite_token();
  void set_allocated_invite_token(std::string* invite_token);
  private:
  const std::string& _internal_invite_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_invite_token(const std::string& value);
  std::string* _internal_mutable_invite_token();
  public:

  // @@protoc_insertion_point(class_scope:CUserAccount_RevokeFriendInviteToken_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr invite_token_;
  friend struct ::TableStruct_steammessages_5fuseraccount_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CUserAccount_RevokeFriendInviteToken_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CUserAccount_RevokeFriendInviteToken_Response) */ {
 public:
  inline CUserAccount_RevokeFriendInviteToken_Response() : CUserAccount_RevokeFriendInviteToken_Response(nullptr) {}
  explicit constexpr CUserAccount_RevokeFriendInviteToken_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CUserAccount_RevokeFriendInviteToken_Response(const CUserAccount_RevokeFriendInviteToken_Response& from);
  CUserAccount_RevokeFriendInviteToken_Response(CUserAccount_RevokeFriendInviteToken_Response&& from) noexcept
    : CUserAccount_RevokeFriendInviteToken_Response() {
    *this = ::std::move(from);
  }

  inline CUserAccount_RevokeFriendInviteToken_Response& operator=(const CUserAccount_RevokeFriendInviteToken_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CUserAccount_RevokeFriendInviteToken_Response& operator=(CUserAccount_RevokeFriendInviteToken_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CUserAccount_RevokeFriendInviteToken_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CUserAccount_RevokeFriendInviteToken_Response* internal_default_instance() {
    return reinterpret_cast<const CUserAccount_RevokeFriendInviteToken_Response*>(
               &_CUserAccount_RevokeFriendInviteToken_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CUserAccount_RevokeFriendInviteToken_Response& a, CUserAccount_RevokeFriendInviteToken_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CUserAccount_RevokeFriendInviteToken_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CUserAccount_RevokeFriendInviteToken_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CUserAccount_RevokeFriendInviteToken_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CUserAccount_RevokeFriendInviteToken_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CUserAccount_RevokeFriendInviteToken_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CUserAccount_RevokeFriendInviteToken_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CUserAccount_RevokeFriendInviteToken_Response";
  }
  protected:
  explicit CUserAccount_RevokeFriendInviteToken_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CUserAccount_RevokeFriendInviteToken_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fuseraccount_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CUserAccount_RegisterCompatTool_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CUserAccount_RegisterCompatTool_Request) */ {
 public:
  inline CUserAccount_RegisterCompatTool_Request() : CUserAccount_RegisterCompatTool_Request(nullptr) {}
  ~CUserAccount_RegisterCompatTool_Request() override;
  explicit constexpr CUserAccount_RegisterCompatTool_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CUserAccount_RegisterCompatTool_Request(const CUserAccount_RegisterCompatTool_Request& from);
  CUserAccount_RegisterCompatTool_Request(CUserAccount_RegisterCompatTool_Request&& from) noexcept
    : CUserAccount_RegisterCompatTool_Request() {
    *this = ::std::move(from);
  }

  inline CUserAccount_RegisterCompatTool_Request& operator=(const CUserAccount_RegisterCompatTool_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CUserAccount_RegisterCompatTool_Request& operator=(CUserAccount_RegisterCompatTool_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CUserAccount_RegisterCompatTool_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CUserAccount_RegisterCompatTool_Request* internal_default_instance() {
    return reinterpret_cast<const CUserAccount_RegisterCompatTool_Request*>(
               &_CUserAccount_RegisterCompatTool_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CUserAccount_RegisterCompatTool_Request& a, CUserAccount_RegisterCompatTool_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CUserAccount_RegisterCompatTool_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CUserAccount_RegisterCompatTool_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CUserAccount_RegisterCompatTool_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CUserAccount_RegisterCompatTool_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CUserAccount_RegisterCompatTool_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CUserAccount_RegisterCompatTool_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CUserAccount_RegisterCompatTool_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CUserAccount_RegisterCompatTool_Request";
  }
  protected:
  explicit CUserAccount_RegisterCompatTool_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCompatToolFieldNumber = 1,
  };
  // optional uint32 compat_tool = 1;
  bool has_compat_tool() const;
  private:
  bool _internal_has_compat_tool() const;
  public:
  void clear_compat_tool();
  uint32_t compat_tool() const;
  void set_compat_tool(uint32_t value);
  private:
  uint32_t _internal_compat_tool() const;
  void _internal_set_compat_tool(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CUserAccount_RegisterCompatTool_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t compat_tool_;
  friend struct ::TableStruct_steammessages_5fuseraccount_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CUserAccount_RegisterCompatTool_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CUserAccount_RegisterCompatTool_Response) */ {
 public:
  inline CUserAccount_RegisterCompatTool_Response() : CUserAccount_RegisterCompatTool_Response(nullptr) {}
  explicit constexpr CUserAccount_RegisterCompatTool_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CUserAccount_RegisterCompatTool_Response(const CUserAccount_RegisterCompatTool_Response& from);
  CUserAccount_RegisterCompatTool_Response(CUserAccount_RegisterCompatTool_Response&& from) noexcept
    : CUserAccount_RegisterCompatTool_Response() {
    *this = ::std::move(from);
  }

  inline CUserAccount_RegisterCompatTool_Response& operator=(const CUserAccount_RegisterCompatTool_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CUserAccount_RegisterCompatTool_Response& operator=(CUserAccount_RegisterCompatTool_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CUserAccount_RegisterCompatTool_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CUserAccount_RegisterCompatTool_Response* internal_default_instance() {
    return reinterpret_cast<const CUserAccount_RegisterCompatTool_Response*>(
               &_CUserAccount_RegisterCompatTool_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CUserAccount_RegisterCompatTool_Response& a, CUserAccount_RegisterCompatTool_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CUserAccount_RegisterCompatTool_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CUserAccount_RegisterCompatTool_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CUserAccount_RegisterCompatTool_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CUserAccount_RegisterCompatTool_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CUserAccount_RegisterCompatTool_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CUserAccount_RegisterCompatTool_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CUserAccount_RegisterCompatTool_Response";
  }
  protected:
  explicit CUserAccount_RegisterCompatTool_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CUserAccount_RegisterCompatTool_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fuseraccount_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CAccountLinking_GetLinkedAccountInfo_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CAccountLinking_GetLinkedAccountInfo_Request) */ {
 public:
  inline CAccountLinking_GetLinkedAccountInfo_Request() : CAccountLinking_GetLinkedAccountInfo_Request(nullptr) {}
  ~CAccountLinking_GetLinkedAccountInfo_Request() override;
  explicit constexpr CAccountLinking_GetLinkedAccountInfo_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CAccountLinking_GetLinkedAccountInfo_Request(const CAccountLinking_GetLinkedAccountInfo_Request& from);
  CAccountLinking_GetLinkedAccountInfo_Request(CAccountLinking_GetLinkedAccountInfo_Request&& from) noexcept
    : CAccountLinking_GetLinkedAccountInfo_Request() {
    *this = ::std::move(from);
  }

  inline CAccountLinking_GetLinkedAccountInfo_Request& operator=(const CAccountLinking_GetLinkedAccountInfo_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CAccountLinking_GetLinkedAccountInfo_Request& operator=(CAccountLinking_GetLinkedAccountInfo_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CAccountLinking_GetLinkedAccountInfo_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CAccountLinking_GetLinkedAccountInfo_Request* internal_default_instance() {
    return reinterpret_cast<const CAccountLinking_GetLinkedAccountInfo_Request*>(
               &_CAccountLinking_GetLinkedAccountInfo_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(CAccountLinking_GetLinkedAccountInfo_Request& a, CAccountLinking_GetLinkedAccountInfo_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CAccountLinking_GetLinkedAccountInfo_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CAccountLinking_GetLinkedAccountInfo_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CAccountLinking_GetLinkedAccountInfo_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CAccountLinking_GetLinkedAccountInfo_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CAccountLinking_GetLinkedAccountInfo_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CAccountLinking_GetLinkedAccountInfo_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CAccountLinking_GetLinkedAccountInfo_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CAccountLinking_GetLinkedAccountInfo_Request";
  }
  protected:
  explicit CAccountLinking_GetLinkedAccountInfo_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 2,
    kFilterFieldNumber = 3,
    kReturnAccessTokenFieldNumber = 4,
    kAccountTypeFieldNumber = 1,
  };
  // optional uint64 account_id = 2 [(.description) = "Internal account ID"];
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint64_t account_id() const;
  void set_account_id(uint64_t value);
  private:
  uint64_t _internal_account_id() const;
  void _internal_set_account_id(uint64_t value);
  public:

  // optional .EExternalAccountType filter = 3 [default = k_EExternalNone, (.description) = "if specified then only return this external account type"];
  bool has_filter() const;
  private:
  bool _internal_has_filter() const;
  public:
  void clear_filter();
  ::EExternalAccountType filter() const;
  void set_filter(::EExternalAccountType value);
  private:
  ::EExternalAccountType _internal_filter() const;
  void _internal_set_filter(::EExternalAccountType value);
  public:

  // optional bool return_access_token = 4 [(.description) = "if provided and true, then returns valid access token if available. It may refresh the token. "];
  bool has_return_access_token() const;
  private:
  bool _internal_has_return_access_token() const;
  public:
  void clear_return_access_token();
  bool return_access_token() const;
  void set_return_access_token(bool value);
  private:
  bool _internal_return_access_token() const;
  void _internal_set_return_access_token(bool value);
  public:

  // optional .EInternalAccountType account_type = 1 [default = k_EInternalSteamAccountType];
  bool has_account_type() const;
  private:
  bool _internal_has_account_type() const;
  public:
  void clear_account_type();
  ::EInternalAccountType account_type() const;
  void set_account_type(::EInternalAccountType value);
  private:
  ::EInternalAccountType _internal_account_type() const;
  void _internal_set_account_type(::EInternalAccountType value);
  public:

  // @@protoc_insertion_point(class_scope:CAccountLinking_GetLinkedAccountInfo_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t account_id_;
  int filter_;
  bool return_access_token_;
  int account_type_;
  friend struct ::TableStruct_steammessages_5fuseraccount_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response) */ {
 public:
  inline CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response() : CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response(nullptr) {}
  ~CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response() override;
  explicit constexpr CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response(const CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response& from);
  CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response(CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response&& from) noexcept
    : CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response() {
    *this = ::std::move(from);
  }

  inline CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response& operator=(const CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response& operator=(CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response* internal_default_instance() {
    return reinterpret_cast<const CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response*>(
               &_CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response& a, CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response";
  }
  protected:
  explicit CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExternalIdFieldNumber = 2,
    kExternalUserNameFieldNumber = 3,
    kExternalUrlFieldNumber = 4,
    kAccessTokenFieldNumber = 5,
    kAccessTokenSecretFieldNumber = 6,
    kExternalTypeFieldNumber = 1,
    kIsValidFieldNumber = 7,
  };
  // optional string external_id = 2 [(.description) = "unique external account identifier"];
  bool has_external_id() const;
  private:
  bool _internal_has_external_id() const;
  public:
  void clear_external_id();
  const std::string& external_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_external_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_external_id();
  PROTOBUF_NODISCARD std::string* release_external_id();
  void set_allocated_external_id(std::string* external_id);
  private:
  const std::string& _internal_external_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_external_id(const std::string& value);
  std::string* _internal_mutable_external_id();
  public:

  // optional string external_user_name = 3 [(.description) = "user readable; best effort"];
  bool has_external_user_name() const;
  private:
  bool _internal_has_external_user_name() const;
  public:
  void clear_external_user_name();
  const std::string& external_user_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_external_user_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_external_user_name();
  PROTOBUF_NODISCARD std::string* release_external_user_name();
  void set_allocated_external_user_name(std::string* external_user_name);
  private:
  const std::string& _internal_external_user_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_external_user_name(const std::string& value);
  std::string* _internal_mutable_external_user_name();
  public:

  // optional string external_url = 4 [(.description) = "required for all, can be a sentinal to verify correctness"];
  bool has_external_url() const;
  private:
  bool _internal_has_external_url() const;
  public:
  void clear_external_url();
  const std::string& external_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_external_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_external_url();
  PROTOBUF_NODISCARD std::string* release_external_url();
  void set_allocated_external_url(std::string* external_url);
  private:
  const std::string& _internal_external_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_external_url(const std::string& value);
  std::string* _internal_mutable_external_url();
  public:

  // optional string access_token = 5 [(.description) = "provided if requeest and it was valid."];
  bool has_access_token() const;
  private:
  bool _internal_has_access_token() const;
  public:
  void clear_access_token();
  const std::string& access_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_access_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_access_token();
  PROTOBUF_NODISCARD std::string* release_access_token();
  void set_allocated_access_token(std::string* access_token);
  private:
  const std::string& _internal_access_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_access_token(const std::string& value);
  std::string* _internal_mutable_access_token();
  public:

  // optional string access_token_secret = 6 [(.description) = "required for OAuth v1 and signing the message, provided with access token."];
  bool has_access_token_secret() const;
  private:
  bool _internal_has_access_token_secret() const;
  public:
  void clear_access_token_secret();
  const std::string& access_token_secret() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_access_token_secret(ArgT0&& arg0, ArgT... args);
  std::string* mutable_access_token_secret();
  PROTOBUF_NODISCARD std::string* release_access_token_secret();
  void set_allocated_access_token_secret(std::string* access_token_secret);
  private:
  const std::string& _internal_access_token_secret() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_access_token_secret(const std::string& value);
  std::string* _internal_mutable_access_token_secret();
  public:

  // optional .EExternalAccountType external_type = 1 [default = k_EExternalNone];
  bool has_external_type() const;
  private:
  bool _internal_has_external_type() const;
  public:
  void clear_external_type();
  ::EExternalAccountType external_type() const;
  void set_external_type(::EExternalAccountType value);
  private:
  ::EExternalAccountType _internal_external_type() const;
  void _internal_set_external_type(::EExternalAccountType value);
  public:

  // optional bool is_valid = 7 [(.description) = "If false, it means access token no longer work (expired, disconnected) and the link is now broken. Inform user to refresh."];
  bool has_is_valid() const;
  private:
  bool _internal_has_is_valid() const;
  public:
  void clear_is_valid();
  bool is_valid() const;
  void set_is_valid(bool value);
  private:
  bool _internal_is_valid() const;
  void _internal_set_is_valid(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr external_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr external_user_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr external_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr access_token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr access_token_secret_;
  int external_type_;
  bool is_valid_;
  friend struct ::TableStruct_steammessages_5fuseraccount_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CAccountLinking_GetLinkedAccountInfo_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CAccountLinking_GetLinkedAccountInfo_Response) */ {
 public:
  inline CAccountLinking_GetLinkedAccountInfo_Response() : CAccountLinking_GetLinkedAccountInfo_Response(nullptr) {}
  ~CAccountLinking_GetLinkedAccountInfo_Response() override;
  explicit constexpr CAccountLinking_GetLinkedAccountInfo_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CAccountLinking_GetLinkedAccountInfo_Response(const CAccountLinking_GetLinkedAccountInfo_Response& from);
  CAccountLinking_GetLinkedAccountInfo_Response(CAccountLinking_GetLinkedAccountInfo_Response&& from) noexcept
    : CAccountLinking_GetLinkedAccountInfo_Response() {
    *this = ::std::move(from);
  }

  inline CAccountLinking_GetLinkedAccountInfo_Response& operator=(const CAccountLinking_GetLinkedAccountInfo_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CAccountLinking_GetLinkedAccountInfo_Response& operator=(CAccountLinking_GetLinkedAccountInfo_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CAccountLinking_GetLinkedAccountInfo_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CAccountLinking_GetLinkedAccountInfo_Response* internal_default_instance() {
    return reinterpret_cast<const CAccountLinking_GetLinkedAccountInfo_Response*>(
               &_CAccountLinking_GetLinkedAccountInfo_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(CAccountLinking_GetLinkedAccountInfo_Response& a, CAccountLinking_GetLinkedAccountInfo_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CAccountLinking_GetLinkedAccountInfo_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CAccountLinking_GetLinkedAccountInfo_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CAccountLinking_GetLinkedAccountInfo_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CAccountLinking_GetLinkedAccountInfo_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CAccountLinking_GetLinkedAccountInfo_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CAccountLinking_GetLinkedAccountInfo_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CAccountLinking_GetLinkedAccountInfo_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CAccountLinking_GetLinkedAccountInfo_Response";
  }
  protected:
  explicit CAccountLinking_GetLinkedAccountInfo_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response CExternalAccountTuple_Response;

  // accessors -------------------------------------------------------

  enum : int {
    kExternalAccountsFieldNumber = 1,
  };
  // repeated .CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response external_accounts = 1;
  int external_accounts_size() const;
  private:
  int _internal_external_accounts_size() const;
  public:
  void clear_external_accounts();
  ::CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response* mutable_external_accounts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response >*
      mutable_external_accounts();
  private:
  const ::CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response& _internal_external_accounts(int index) const;
  ::CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response* _internal_add_external_accounts();
  public:
  const ::CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response& external_accounts(int index) const;
  ::CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response* add_external_accounts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response >&
      external_accounts() const;

  // @@protoc_insertion_point(class_scope:CAccountLinking_GetLinkedAccountInfo_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response > external_accounts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fuseraccount_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CEmbeddedClient_AuthorizeCurrentDevice_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CEmbeddedClient_AuthorizeCurrentDevice_Request) */ {
 public:
  inline CEmbeddedClient_AuthorizeCurrentDevice_Request() : CEmbeddedClient_AuthorizeCurrentDevice_Request(nullptr) {}
  ~CEmbeddedClient_AuthorizeCurrentDevice_Request() override;
  explicit constexpr CEmbeddedClient_AuthorizeCurrentDevice_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CEmbeddedClient_AuthorizeCurrentDevice_Request(const CEmbeddedClient_AuthorizeCurrentDevice_Request& from);
  CEmbeddedClient_AuthorizeCurrentDevice_Request(CEmbeddedClient_AuthorizeCurrentDevice_Request&& from) noexcept
    : CEmbeddedClient_AuthorizeCurrentDevice_Request() {
    *this = ::std::move(from);
  }

  inline CEmbeddedClient_AuthorizeCurrentDevice_Request& operator=(const CEmbeddedClient_AuthorizeCurrentDevice_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CEmbeddedClient_AuthorizeCurrentDevice_Request& operator=(CEmbeddedClient_AuthorizeCurrentDevice_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CEmbeddedClient_AuthorizeCurrentDevice_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CEmbeddedClient_AuthorizeCurrentDevice_Request* internal_default_instance() {
    return reinterpret_cast<const CEmbeddedClient_AuthorizeCurrentDevice_Request*>(
               &_CEmbeddedClient_AuthorizeCurrentDevice_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(CEmbeddedClient_AuthorizeCurrentDevice_Request& a, CEmbeddedClient_AuthorizeCurrentDevice_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CEmbeddedClient_AuthorizeCurrentDevice_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CEmbeddedClient_AuthorizeCurrentDevice_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CEmbeddedClient_AuthorizeCurrentDevice_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CEmbeddedClient_AuthorizeCurrentDevice_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CEmbeddedClient_AuthorizeCurrentDevice_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CEmbeddedClient_AuthorizeCurrentDevice_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CEmbeddedClient_AuthorizeCurrentDevice_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CEmbeddedClient_AuthorizeCurrentDevice_Request";
  }
  protected:
  explicit CEmbeddedClient_AuthorizeCurrentDevice_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceInfoFieldNumber = 3,
    kSteamidFieldNumber = 1,
    kAppidFieldNumber = 2,
    kDeviceidFieldNumber = 4,
  };
  // optional string device_info = 3;
  bool has_device_info() const;
  private:
  bool _internal_has_device_info() const;
  public:
  void clear_device_info();
  const std::string& device_info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_device_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_device_info();
  PROTOBUF_NODISCARD std::string* release_device_info();
  void set_allocated_device_info(std::string* device_info);
  private:
  const std::string& _internal_device_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_info(const std::string& value);
  std::string* _internal_mutable_device_info();
  public:

  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional uint32 appid = 2;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional uint32 deviceid = 4;
  bool has_deviceid() const;
  private:
  bool _internal_has_deviceid() const;
  public:
  void clear_deviceid();
  uint32_t deviceid() const;
  void set_deviceid(uint32_t value);
  private:
  uint32_t _internal_deviceid() const;
  void _internal_set_deviceid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CEmbeddedClient_AuthorizeCurrentDevice_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_info_;
  uint64_t steamid_;
  uint32_t appid_;
  uint32_t deviceid_;
  friend struct ::TableStruct_steammessages_5fuseraccount_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CEmbeddedClient_Token final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CEmbeddedClient_Token) */ {
 public:
  inline CEmbeddedClient_Token() : CEmbeddedClient_Token(nullptr) {}
  ~CEmbeddedClient_Token() override;
  explicit constexpr CEmbeddedClient_Token(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CEmbeddedClient_Token(const CEmbeddedClient_Token& from);
  CEmbeddedClient_Token(CEmbeddedClient_Token&& from) noexcept
    : CEmbeddedClient_Token() {
    *this = ::std::move(from);
  }

  inline CEmbeddedClient_Token& operator=(const CEmbeddedClient_Token& from) {
    CopyFrom(from);
    return *this;
  }
  inline CEmbeddedClient_Token& operator=(CEmbeddedClient_Token&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CEmbeddedClient_Token& default_instance() {
    return *internal_default_instance();
  }
  static inline const CEmbeddedClient_Token* internal_default_instance() {
    return reinterpret_cast<const CEmbeddedClient_Token*>(
               &_CEmbeddedClient_Token_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(CEmbeddedClient_Token& a, CEmbeddedClient_Token& b) {
    a.Swap(&b);
  }
  inline void Swap(CEmbeddedClient_Token* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CEmbeddedClient_Token* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CEmbeddedClient_Token* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CEmbeddedClient_Token>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CEmbeddedClient_Token& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CEmbeddedClient_Token& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CEmbeddedClient_Token* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CEmbeddedClient_Token";
  }
  protected:
  explicit CEmbeddedClient_Token(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientTokenFieldNumber = 2,
    kSteamidFieldNumber = 1,
    kExpiryFieldNumber = 3,
    kDeviceidFieldNumber = 4,
  };
  // optional bytes client_token = 2;
  bool has_client_token() const;
  private:
  bool _internal_has_client_token() const;
  public:
  void clear_client_token();
  const std::string& client_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_client_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_client_token();
  PROTOBUF_NODISCARD std::string* release_client_token();
  void set_allocated_client_token(std::string* client_token);
  private:
  const std::string& _internal_client_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_token(const std::string& value);
  std::string* _internal_mutable_client_token();
  public:

  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional uint32 expiry = 3;
  bool has_expiry() const;
  private:
  bool _internal_has_expiry() const;
  public:
  void clear_expiry();
  uint32_t expiry() const;
  void set_expiry(uint32_t value);
  private:
  uint32_t _internal_expiry() const;
  void _internal_set_expiry(uint32_t value);
  public:

  // optional uint32 deviceid = 4;
  bool has_deviceid() const;
  private:
  bool _internal_has_deviceid() const;
  public:
  void clear_deviceid();
  uint32_t deviceid() const;
  void set_deviceid(uint32_t value);
  private:
  uint32_t _internal_deviceid() const;
  void _internal_set_deviceid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CEmbeddedClient_Token)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_token_;
  uint64_t steamid_;
  uint32_t expiry_;
  uint32_t deviceid_;
  friend struct ::TableStruct_steammessages_5fuseraccount_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CEmbeddedClient_AuthorizeDevice_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CEmbeddedClient_AuthorizeDevice_Response) */ {
 public:
  inline CEmbeddedClient_AuthorizeDevice_Response() : CEmbeddedClient_AuthorizeDevice_Response(nullptr) {}
  ~CEmbeddedClient_AuthorizeDevice_Response() override;
  explicit constexpr CEmbeddedClient_AuthorizeDevice_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CEmbeddedClient_AuthorizeDevice_Response(const CEmbeddedClient_AuthorizeDevice_Response& from);
  CEmbeddedClient_AuthorizeDevice_Response(CEmbeddedClient_AuthorizeDevice_Response&& from) noexcept
    : CEmbeddedClient_AuthorizeDevice_Response() {
    *this = ::std::move(from);
  }

  inline CEmbeddedClient_AuthorizeDevice_Response& operator=(const CEmbeddedClient_AuthorizeDevice_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CEmbeddedClient_AuthorizeDevice_Response& operator=(CEmbeddedClient_AuthorizeDevice_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CEmbeddedClient_AuthorizeDevice_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CEmbeddedClient_AuthorizeDevice_Response* internal_default_instance() {
    return reinterpret_cast<const CEmbeddedClient_AuthorizeDevice_Response*>(
               &_CEmbeddedClient_AuthorizeDevice_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(CEmbeddedClient_AuthorizeDevice_Response& a, CEmbeddedClient_AuthorizeDevice_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CEmbeddedClient_AuthorizeDevice_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CEmbeddedClient_AuthorizeDevice_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CEmbeddedClient_AuthorizeDevice_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CEmbeddedClient_AuthorizeDevice_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CEmbeddedClient_AuthorizeDevice_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CEmbeddedClient_AuthorizeDevice_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CEmbeddedClient_AuthorizeDevice_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CEmbeddedClient_AuthorizeDevice_Response";
  }
  protected:
  explicit CEmbeddedClient_AuthorizeDevice_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // optional .CEmbeddedClient_Token token = 2;
  bool has_token() const;
  private:
  bool _internal_has_token() const;
  public:
  void clear_token();
  const ::CEmbeddedClient_Token& token() const;
  PROTOBUF_NODISCARD ::CEmbeddedClient_Token* release_token();
  ::CEmbeddedClient_Token* mutable_token();
  void set_allocated_token(::CEmbeddedClient_Token* token);
  private:
  const ::CEmbeddedClient_Token& _internal_token() const;
  ::CEmbeddedClient_Token* _internal_mutable_token();
  public:
  void unsafe_arena_set_allocated_token(
      ::CEmbeddedClient_Token* token);
  ::CEmbeddedClient_Token* unsafe_arena_release_token();

  // optional uint32 result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  uint32_t result() const;
  void set_result(uint32_t value);
  private:
  uint32_t _internal_result() const;
  void _internal_set_result(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CEmbeddedClient_AuthorizeDevice_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CEmbeddedClient_Token* token_;
  uint32_t result_;
  friend struct ::TableStruct_steammessages_5fuseraccount_2esteamclient_2eproto;
};
// ===================================================================

class UserAccount_Stub;

class UserAccount : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline UserAccount() {};
 public:
  virtual ~UserAccount();

  typedef UserAccount_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void GetAvailableValveDiscountPromotions(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CUserAccount_GetAvailableValveDiscountPromotions_Request* request,
                       ::CUserAccount_GetAvailableValveDiscountPromotions_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetClientWalletDetails(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CUserAccount_GetClientWalletDetails_Request* request,
                       ::CUserAccount_GetWalletDetails_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetAccountLinkStatus(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CUserAccount_GetAccountLinkStatus_Request* request,
                       ::CUserAccount_GetAccountLinkStatus_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void CancelLicenseForApp(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CUserAccount_CancelLicenseForApp_Request* request,
                       ::CUserAccount_CancelLicenseForApp_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetUserCountry(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CUserAccount_GetUserCountry_Request* request,
                       ::CUserAccount_GetUserCountry_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void CreateFriendInviteToken(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CUserAccount_CreateFriendInviteToken_Request* request,
                       ::CUserAccount_CreateFriendInviteToken_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetFriendInviteTokens(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CUserAccount_GetFriendInviteTokens_Request* request,
                       ::CUserAccount_GetFriendInviteTokens_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void ViewFriendInviteToken(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CUserAccount_ViewFriendInviteToken_Request* request,
                       ::CUserAccount_ViewFriendInviteToken_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void RedeemFriendInviteToken(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CUserAccount_RedeemFriendInviteToken_Request* request,
                       ::CUserAccount_RedeemFriendInviteToken_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void RevokeFriendInviteToken(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CUserAccount_RevokeFriendInviteToken_Request* request,
                       ::CUserAccount_RevokeFriendInviteToken_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void RegisterCompatTool(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CUserAccount_RegisterCompatTool_Request* request,
                       ::CUserAccount_RegisterCompatTool_Response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(UserAccount);
};

class UserAccount_Stub : public UserAccount {
 public:
  UserAccount_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  UserAccount_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~UserAccount_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements UserAccount ------------------------------------------

  void GetAvailableValveDiscountPromotions(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CUserAccount_GetAvailableValveDiscountPromotions_Request* request,
                       ::CUserAccount_GetAvailableValveDiscountPromotions_Response* response,
                       ::google::protobuf::Closure* done);
  void GetClientWalletDetails(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CUserAccount_GetClientWalletDetails_Request* request,
                       ::CUserAccount_GetWalletDetails_Response* response,
                       ::google::protobuf::Closure* done);
  void GetAccountLinkStatus(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CUserAccount_GetAccountLinkStatus_Request* request,
                       ::CUserAccount_GetAccountLinkStatus_Response* response,
                       ::google::protobuf::Closure* done);
  void CancelLicenseForApp(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CUserAccount_CancelLicenseForApp_Request* request,
                       ::CUserAccount_CancelLicenseForApp_Response* response,
                       ::google::protobuf::Closure* done);
  void GetUserCountry(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CUserAccount_GetUserCountry_Request* request,
                       ::CUserAccount_GetUserCountry_Response* response,
                       ::google::protobuf::Closure* done);
  void CreateFriendInviteToken(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CUserAccount_CreateFriendInviteToken_Request* request,
                       ::CUserAccount_CreateFriendInviteToken_Response* response,
                       ::google::protobuf::Closure* done);
  void GetFriendInviteTokens(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CUserAccount_GetFriendInviteTokens_Request* request,
                       ::CUserAccount_GetFriendInviteTokens_Response* response,
                       ::google::protobuf::Closure* done);
  void ViewFriendInviteToken(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CUserAccount_ViewFriendInviteToken_Request* request,
                       ::CUserAccount_ViewFriendInviteToken_Response* response,
                       ::google::protobuf::Closure* done);
  void RedeemFriendInviteToken(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CUserAccount_RedeemFriendInviteToken_Request* request,
                       ::CUserAccount_RedeemFriendInviteToken_Response* response,
                       ::google::protobuf::Closure* done);
  void RevokeFriendInviteToken(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CUserAccount_RevokeFriendInviteToken_Request* request,
                       ::CUserAccount_RevokeFriendInviteToken_Response* response,
                       ::google::protobuf::Closure* done);
  void RegisterCompatTool(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CUserAccount_RegisterCompatTool_Request* request,
                       ::CUserAccount_RegisterCompatTool_Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(UserAccount_Stub);
};


// -------------------------------------------------------------------

class AccountLinking_Stub;

class AccountLinking : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline AccountLinking() {};
 public:
  virtual ~AccountLinking();

  typedef AccountLinking_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void GetLinkedAccountInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CAccountLinking_GetLinkedAccountInfo_Request* request,
                       ::CAccountLinking_GetLinkedAccountInfo_Response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(AccountLinking);
};

class AccountLinking_Stub : public AccountLinking {
 public:
  AccountLinking_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  AccountLinking_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~AccountLinking_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements AccountLinking ------------------------------------------

  void GetLinkedAccountInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CAccountLinking_GetLinkedAccountInfo_Request* request,
                       ::CAccountLinking_GetLinkedAccountInfo_Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(AccountLinking_Stub);
};


// -------------------------------------------------------------------

class EmbeddedClient_Stub;

class EmbeddedClient : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline EmbeddedClient() {};
 public:
  virtual ~EmbeddedClient();

  typedef EmbeddedClient_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void AuthorizeCurrentDevice(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CEmbeddedClient_AuthorizeCurrentDevice_Request* request,
                       ::CEmbeddedClient_AuthorizeDevice_Response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(EmbeddedClient);
};

class EmbeddedClient_Stub : public EmbeddedClient {
 public:
  EmbeddedClient_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  EmbeddedClient_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~EmbeddedClient_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements EmbeddedClient ------------------------------------------

  void AuthorizeCurrentDevice(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CEmbeddedClient_AuthorizeCurrentDevice_Request* request,
                       ::CEmbeddedClient_AuthorizeDevice_Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(EmbeddedClient_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CUserAccount_GetAvailableValveDiscountPromotions_Request

// optional string country_code = 1;
inline bool CUserAccount_GetAvailableValveDiscountPromotions_Request::_internal_has_country_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CUserAccount_GetAvailableValveDiscountPromotions_Request::has_country_code() const {
  return _internal_has_country_code();
}
inline void CUserAccount_GetAvailableValveDiscountPromotions_Request::clear_country_code() {
  country_code_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CUserAccount_GetAvailableValveDiscountPromotions_Request::country_code() const {
  // @@protoc_insertion_point(field_get:CUserAccount_GetAvailableValveDiscountPromotions_Request.country_code)
  return _internal_country_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CUserAccount_GetAvailableValveDiscountPromotions_Request::set_country_code(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 country_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CUserAccount_GetAvailableValveDiscountPromotions_Request.country_code)
}
inline std::string* CUserAccount_GetAvailableValveDiscountPromotions_Request::mutable_country_code() {
  std::string* _s = _internal_mutable_country_code();
  // @@protoc_insertion_point(field_mutable:CUserAccount_GetAvailableValveDiscountPromotions_Request.country_code)
  return _s;
}
inline const std::string& CUserAccount_GetAvailableValveDiscountPromotions_Request::_internal_country_code() const {
  return country_code_.Get();
}
inline void CUserAccount_GetAvailableValveDiscountPromotions_Request::_internal_set_country_code(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  country_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CUserAccount_GetAvailableValveDiscountPromotions_Request::_internal_mutable_country_code() {
  _has_bits_[0] |= 0x00000001u;
  return country_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CUserAccount_GetAvailableValveDiscountPromotions_Request::release_country_code() {
  // @@protoc_insertion_point(field_release:CUserAccount_GetAvailableValveDiscountPromotions_Request.country_code)
  if (!_internal_has_country_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = country_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (country_code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    country_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CUserAccount_GetAvailableValveDiscountPromotions_Request::set_allocated_country_code(std::string* country_code) {
  if (country_code != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  country_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), country_code,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (country_code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    country_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CUserAccount_GetAvailableValveDiscountPromotions_Request.country_code)
}

// -------------------------------------------------------------------

// CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails

// optional uint32 promotionid = 1;
inline bool CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::_internal_has_promotionid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::has_promotionid() const {
  return _internal_has_promotionid();
}
inline void CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::clear_promotionid() {
  promotionid_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::_internal_promotionid() const {
  return promotionid_;
}
inline uint32_t CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::promotionid() const {
  // @@protoc_insertion_point(field_get:CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails.promotionid)
  return _internal_promotionid();
}
inline void CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::_internal_set_promotionid(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  promotionid_ = value;
}
inline void CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::set_promotionid(uint32_t value) {
  _internal_set_promotionid(value);
  // @@protoc_insertion_point(field_set:CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails.promotionid)
}

// optional string promotion_description = 2;
inline bool CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::_internal_has_promotion_description() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::has_promotion_description() const {
  return _internal_has_promotion_description();
}
inline void CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::clear_promotion_description() {
  promotion_description_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::promotion_description() const {
  // @@protoc_insertion_point(field_get:CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails.promotion_description)
  return _internal_promotion_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::set_promotion_description(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 promotion_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails.promotion_description)
}
inline std::string* CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::mutable_promotion_description() {
  std::string* _s = _internal_mutable_promotion_description();
  // @@protoc_insertion_point(field_mutable:CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails.promotion_description)
  return _s;
}
inline const std::string& CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::_internal_promotion_description() const {
  return promotion_description_.Get();
}
inline void CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::_internal_set_promotion_description(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  promotion_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::_internal_mutable_promotion_description() {
  _has_bits_[0] |= 0x00000001u;
  return promotion_description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::release_promotion_description() {
  // @@protoc_insertion_point(field_release:CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails.promotion_description)
  if (!_internal_has_promotion_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = promotion_description_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (promotion_description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    promotion_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::set_allocated_promotion_description(std::string* promotion_description) {
  if (promotion_description != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  promotion_description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), promotion_description,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (promotion_description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    promotion_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails.promotion_description)
}

// optional int64 minimum_cart_amount = 3;
inline bool CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::_internal_has_minimum_cart_amount() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::has_minimum_cart_amount() const {
  return _internal_has_minimum_cart_amount();
}
inline void CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::clear_minimum_cart_amount() {
  minimum_cart_amount_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline int64_t CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::_internal_minimum_cart_amount() const {
  return minimum_cart_amount_;
}
inline int64_t CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::minimum_cart_amount() const {
  // @@protoc_insertion_point(field_get:CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails.minimum_cart_amount)
  return _internal_minimum_cart_amount();
}
inline void CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::_internal_set_minimum_cart_amount(int64_t value) {
  _has_bits_[0] |= 0x00000004u;
  minimum_cart_amount_ = value;
}
inline void CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::set_minimum_cart_amount(int64_t value) {
  _internal_set_minimum_cart_amount(value);
  // @@protoc_insertion_point(field_set:CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails.minimum_cart_amount)
}

// optional int64 minimum_cart_amount_for_display = 4;
inline bool CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::_internal_has_minimum_cart_amount_for_display() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::has_minimum_cart_amount_for_display() const {
  return _internal_has_minimum_cart_amount_for_display();
}
inline void CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::clear_minimum_cart_amount_for_display() {
  minimum_cart_amount_for_display_ = int64_t{0};
  _has_bits_[0] &= ~0x00000020u;
}
inline int64_t CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::_internal_minimum_cart_amount_for_display() const {
  return minimum_cart_amount_for_display_;
}
inline int64_t CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::minimum_cart_amount_for_display() const {
  // @@protoc_insertion_point(field_get:CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails.minimum_cart_amount_for_display)
  return _internal_minimum_cart_amount_for_display();
}
inline void CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::_internal_set_minimum_cart_amount_for_display(int64_t value) {
  _has_bits_[0] |= 0x00000020u;
  minimum_cart_amount_for_display_ = value;
}
inline void CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::set_minimum_cart_amount_for_display(int64_t value) {
  _internal_set_minimum_cart_amount_for_display(value);
  // @@protoc_insertion_point(field_set:CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails.minimum_cart_amount_for_display)
}

// optional int64 discount_amount = 5;
inline bool CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::_internal_has_discount_amount() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::has_discount_amount() const {
  return _internal_has_discount_amount();
}
inline void CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::clear_discount_amount() {
  discount_amount_ = int64_t{0};
  _has_bits_[0] &= ~0x00000040u;
}
inline int64_t CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::_internal_discount_amount() const {
  return discount_amount_;
}
inline int64_t CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::discount_amount() const {
  // @@protoc_insertion_point(field_get:CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails.discount_amount)
  return _internal_discount_amount();
}
inline void CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::_internal_set_discount_amount(int64_t value) {
  _has_bits_[0] |= 0x00000040u;
  discount_amount_ = value;
}
inline void CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::set_discount_amount(int64_t value) {
  _internal_set_discount_amount(value);
  // @@protoc_insertion_point(field_set:CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails.discount_amount)
}

// optional int32 currency_code = 6;
inline bool CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::_internal_has_currency_code() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::has_currency_code() const {
  return _internal_has_currency_code();
}
inline void CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::clear_currency_code() {
  currency_code_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline int32_t CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::_internal_currency_code() const {
  return currency_code_;
}
inline int32_t CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::currency_code() const {
  // @@protoc_insertion_point(field_get:CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails.currency_code)
  return _internal_currency_code();
}
inline void CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::_internal_set_currency_code(int32_t value) {
  _has_bits_[0] |= 0x00000010u;
  currency_code_ = value;
}
inline void CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::set_currency_code(int32_t value) {
  _internal_set_currency_code(value);
  // @@protoc_insertion_point(field_set:CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails.currency_code)
}

// optional int32 available_use_count = 7;
inline bool CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::_internal_has_available_use_count() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::has_available_use_count() const {
  return _internal_has_available_use_count();
}
inline void CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::clear_available_use_count() {
  available_use_count_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline int32_t CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::_internal_available_use_count() const {
  return available_use_count_;
}
inline int32_t CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::available_use_count() const {
  // @@protoc_insertion_point(field_get:CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails.available_use_count)
  return _internal_available_use_count();
}
inline void CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::_internal_set_available_use_count(int32_t value) {
  _has_bits_[0] |= 0x00000080u;
  available_use_count_ = value;
}
inline void CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::set_available_use_count(int32_t value) {
  _internal_set_available_use_count(value);
  // @@protoc_insertion_point(field_set:CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails.available_use_count)
}

// optional int32 promotional_discount_type = 8;
inline bool CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::_internal_has_promotional_discount_type() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::has_promotional_discount_type() const {
  return _internal_has_promotional_discount_type();
}
inline void CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::clear_promotional_discount_type() {
  promotional_discount_type_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline int32_t CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::_internal_promotional_discount_type() const {
  return promotional_discount_type_;
}
inline int32_t CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::promotional_discount_type() const {
  // @@protoc_insertion_point(field_get:CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails.promotional_discount_type)
  return _internal_promotional_discount_type();
}
inline void CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::_internal_set_promotional_discount_type(int32_t value) {
  _has_bits_[0] |= 0x00000100u;
  promotional_discount_type_ = value;
}
inline void CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::set_promotional_discount_type(int32_t value) {
  _internal_set_promotional_discount_type(value);
  // @@protoc_insertion_point(field_set:CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails.promotional_discount_type)
}

// optional int32 loyalty_reward_id = 9;
inline bool CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::_internal_has_loyalty_reward_id() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::has_loyalty_reward_id() const {
  return _internal_has_loyalty_reward_id();
}
inline void CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::clear_loyalty_reward_id() {
  loyalty_reward_id_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline int32_t CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::_internal_loyalty_reward_id() const {
  return loyalty_reward_id_;
}
inline int32_t CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::loyalty_reward_id() const {
  // @@protoc_insertion_point(field_get:CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails.loyalty_reward_id)
  return _internal_loyalty_reward_id();
}
inline void CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::_internal_set_loyalty_reward_id(int32_t value) {
  _has_bits_[0] |= 0x00000200u;
  loyalty_reward_id_ = value;
}
inline void CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::set_loyalty_reward_id(int32_t value) {
  _internal_set_loyalty_reward_id(value);
  // @@protoc_insertion_point(field_set:CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails.loyalty_reward_id)
}

// optional string localized_name_token = 10;
inline bool CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::_internal_has_localized_name_token() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::has_localized_name_token() const {
  return _internal_has_localized_name_token();
}
inline void CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::clear_localized_name_token() {
  localized_name_token_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::localized_name_token() const {
  // @@protoc_insertion_point(field_get:CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails.localized_name_token)
  return _internal_localized_name_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::set_localized_name_token(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 localized_name_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails.localized_name_token)
}
inline std::string* CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::mutable_localized_name_token() {
  std::string* _s = _internal_mutable_localized_name_token();
  // @@protoc_insertion_point(field_mutable:CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails.localized_name_token)
  return _s;
}
inline const std::string& CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::_internal_localized_name_token() const {
  return localized_name_token_.Get();
}
inline void CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::_internal_set_localized_name_token(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  localized_name_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::_internal_mutable_localized_name_token() {
  _has_bits_[0] |= 0x00000002u;
  return localized_name_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::release_localized_name_token() {
  // @@protoc_insertion_point(field_release:CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails.localized_name_token)
  if (!_internal_has_localized_name_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = localized_name_token_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (localized_name_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    localized_name_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::set_allocated_localized_name_token(std::string* localized_name_token) {
  if (localized_name_token != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  localized_name_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), localized_name_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (localized_name_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    localized_name_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails.localized_name_token)
}

// optional int32 max_use_count = 11;
inline bool CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::_internal_has_max_use_count() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::has_max_use_count() const {
  return _internal_has_max_use_count();
}
inline void CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::clear_max_use_count() {
  max_use_count_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline int32_t CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::_internal_max_use_count() const {
  return max_use_count_;
}
inline int32_t CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::max_use_count() const {
  // @@protoc_insertion_point(field_get:CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails.max_use_count)
  return _internal_max_use_count();
}
inline void CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::_internal_set_max_use_count(int32_t value) {
  _has_bits_[0] |= 0x00000400u;
  max_use_count_ = value;
}
inline void CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails::set_max_use_count(int32_t value) {
  _internal_set_max_use_count(value);
  // @@protoc_insertion_point(field_set:CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails.max_use_count)
}

// -------------------------------------------------------------------

// CUserAccount_GetAvailableValveDiscountPromotions_Response

// repeated .CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails promotions = 1;
inline int CUserAccount_GetAvailableValveDiscountPromotions_Response::_internal_promotions_size() const {
  return promotions_.size();
}
inline int CUserAccount_GetAvailableValveDiscountPromotions_Response::promotions_size() const {
  return _internal_promotions_size();
}
inline void CUserAccount_GetAvailableValveDiscountPromotions_Response::clear_promotions() {
  promotions_.Clear();
}
inline ::CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails* CUserAccount_GetAvailableValveDiscountPromotions_Response::mutable_promotions(int index) {
  // @@protoc_insertion_point(field_mutable:CUserAccount_GetAvailableValveDiscountPromotions_Response.promotions)
  return promotions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails >*
CUserAccount_GetAvailableValveDiscountPromotions_Response::mutable_promotions() {
  // @@protoc_insertion_point(field_mutable_list:CUserAccount_GetAvailableValveDiscountPromotions_Response.promotions)
  return &promotions_;
}
inline const ::CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails& CUserAccount_GetAvailableValveDiscountPromotions_Response::_internal_promotions(int index) const {
  return promotions_.Get(index);
}
inline const ::CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails& CUserAccount_GetAvailableValveDiscountPromotions_Response::promotions(int index) const {
  // @@protoc_insertion_point(field_get:CUserAccount_GetAvailableValveDiscountPromotions_Response.promotions)
  return _internal_promotions(index);
}
inline ::CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails* CUserAccount_GetAvailableValveDiscountPromotions_Response::_internal_add_promotions() {
  return promotions_.Add();
}
inline ::CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails* CUserAccount_GetAvailableValveDiscountPromotions_Response::add_promotions() {
  ::CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails* _add = _internal_add_promotions();
  // @@protoc_insertion_point(field_add:CUserAccount_GetAvailableValveDiscountPromotions_Response.promotions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails >&
CUserAccount_GetAvailableValveDiscountPromotions_Response::promotions() const {
  // @@protoc_insertion_point(field_list:CUserAccount_GetAvailableValveDiscountPromotions_Response.promotions)
  return promotions_;
}

// -------------------------------------------------------------------

// CUserAccount_GetClientWalletDetails_Request

// optional bool include_balance_in_usd = 1;
inline bool CUserAccount_GetClientWalletDetails_Request::_internal_has_include_balance_in_usd() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CUserAccount_GetClientWalletDetails_Request::has_include_balance_in_usd() const {
  return _internal_has_include_balance_in_usd();
}
inline void CUserAccount_GetClientWalletDetails_Request::clear_include_balance_in_usd() {
  include_balance_in_usd_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CUserAccount_GetClientWalletDetails_Request::_internal_include_balance_in_usd() const {
  return include_balance_in_usd_;
}
inline bool CUserAccount_GetClientWalletDetails_Request::include_balance_in_usd() const {
  // @@protoc_insertion_point(field_get:CUserAccount_GetClientWalletDetails_Request.include_balance_in_usd)
  return _internal_include_balance_in_usd();
}
inline void CUserAccount_GetClientWalletDetails_Request::_internal_set_include_balance_in_usd(bool value) {
  _has_bits_[0] |= 0x00000001u;
  include_balance_in_usd_ = value;
}
inline void CUserAccount_GetClientWalletDetails_Request::set_include_balance_in_usd(bool value) {
  _internal_set_include_balance_in_usd(value);
  // @@protoc_insertion_point(field_set:CUserAccount_GetClientWalletDetails_Request.include_balance_in_usd)
}

// optional int32 wallet_region = 2 [default = 1];
inline bool CUserAccount_GetClientWalletDetails_Request::_internal_has_wallet_region() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CUserAccount_GetClientWalletDetails_Request::has_wallet_region() const {
  return _internal_has_wallet_region();
}
inline void CUserAccount_GetClientWalletDetails_Request::clear_wallet_region() {
  wallet_region_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t CUserAccount_GetClientWalletDetails_Request::_internal_wallet_region() const {
  return wallet_region_;
}
inline int32_t CUserAccount_GetClientWalletDetails_Request::wallet_region() const {
  // @@protoc_insertion_point(field_get:CUserAccount_GetClientWalletDetails_Request.wallet_region)
  return _internal_wallet_region();
}
inline void CUserAccount_GetClientWalletDetails_Request::_internal_set_wallet_region(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  wallet_region_ = value;
}
inline void CUserAccount_GetClientWalletDetails_Request::set_wallet_region(int32_t value) {
  _internal_set_wallet_region(value);
  // @@protoc_insertion_point(field_set:CUserAccount_GetClientWalletDetails_Request.wallet_region)
}

// optional bool include_formatted_balance = 3;
inline bool CUserAccount_GetClientWalletDetails_Request::_internal_has_include_formatted_balance() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CUserAccount_GetClientWalletDetails_Request::has_include_formatted_balance() const {
  return _internal_has_include_formatted_balance();
}
inline void CUserAccount_GetClientWalletDetails_Request::clear_include_formatted_balance() {
  include_formatted_balance_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CUserAccount_GetClientWalletDetails_Request::_internal_include_formatted_balance() const {
  return include_formatted_balance_;
}
inline bool CUserAccount_GetClientWalletDetails_Request::include_formatted_balance() const {
  // @@protoc_insertion_point(field_get:CUserAccount_GetClientWalletDetails_Request.include_formatted_balance)
  return _internal_include_formatted_balance();
}
inline void CUserAccount_GetClientWalletDetails_Request::_internal_set_include_formatted_balance(bool value) {
  _has_bits_[0] |= 0x00000002u;
  include_formatted_balance_ = value;
}
inline void CUserAccount_GetClientWalletDetails_Request::set_include_formatted_balance(bool value) {
  _internal_set_include_formatted_balance(value);
  // @@protoc_insertion_point(field_set:CUserAccount_GetClientWalletDetails_Request.include_formatted_balance)
}

// -------------------------------------------------------------------

// CUserAccount_GetWalletDetails_Response

// optional bool has_wallet = 1;
inline bool CUserAccount_GetWalletDetails_Response::_internal_has_has_wallet() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CUserAccount_GetWalletDetails_Response::has_has_wallet() const {
  return _internal_has_has_wallet();
}
inline void CUserAccount_GetWalletDetails_Response::clear_has_wallet() {
  has_wallet_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool CUserAccount_GetWalletDetails_Response::_internal_has_wallet() const {
  return has_wallet_;
}
inline bool CUserAccount_GetWalletDetails_Response::has_wallet() const {
  // @@protoc_insertion_point(field_get:CUserAccount_GetWalletDetails_Response.has_wallet)
  return _internal_has_wallet();
}
inline void CUserAccount_GetWalletDetails_Response::_internal_set_has_wallet(bool value) {
  _has_bits_[0] |= 0x00000040u;
  has_wallet_ = value;
}
inline void CUserAccount_GetWalletDetails_Response::set_has_wallet(bool value) {
  _internal_set_has_wallet(value);
  // @@protoc_insertion_point(field_set:CUserAccount_GetWalletDetails_Response.has_wallet)
}

// optional string user_country_code = 2;
inline bool CUserAccount_GetWalletDetails_Response::_internal_has_user_country_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CUserAccount_GetWalletDetails_Response::has_user_country_code() const {
  return _internal_has_user_country_code();
}
inline void CUserAccount_GetWalletDetails_Response::clear_user_country_code() {
  user_country_code_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CUserAccount_GetWalletDetails_Response::user_country_code() const {
  // @@protoc_insertion_point(field_get:CUserAccount_GetWalletDetails_Response.user_country_code)
  return _internal_user_country_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CUserAccount_GetWalletDetails_Response::set_user_country_code(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 user_country_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CUserAccount_GetWalletDetails_Response.user_country_code)
}
inline std::string* CUserAccount_GetWalletDetails_Response::mutable_user_country_code() {
  std::string* _s = _internal_mutable_user_country_code();
  // @@protoc_insertion_point(field_mutable:CUserAccount_GetWalletDetails_Response.user_country_code)
  return _s;
}
inline const std::string& CUserAccount_GetWalletDetails_Response::_internal_user_country_code() const {
  return user_country_code_.Get();
}
inline void CUserAccount_GetWalletDetails_Response::_internal_set_user_country_code(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  user_country_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CUserAccount_GetWalletDetails_Response::_internal_mutable_user_country_code() {
  _has_bits_[0] |= 0x00000001u;
  return user_country_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CUserAccount_GetWalletDetails_Response::release_user_country_code() {
  // @@protoc_insertion_point(field_release:CUserAccount_GetWalletDetails_Response.user_country_code)
  if (!_internal_has_user_country_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = user_country_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (user_country_code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    user_country_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CUserAccount_GetWalletDetails_Response::set_allocated_user_country_code(std::string* user_country_code) {
  if (user_country_code != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  user_country_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_country_code,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (user_country_code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    user_country_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CUserAccount_GetWalletDetails_Response.user_country_code)
}

// optional string wallet_country_code = 3;
inline bool CUserAccount_GetWalletDetails_Response::_internal_has_wallet_country_code() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CUserAccount_GetWalletDetails_Response::has_wallet_country_code() const {
  return _internal_has_wallet_country_code();
}
inline void CUserAccount_GetWalletDetails_Response::clear_wallet_country_code() {
  wallet_country_code_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CUserAccount_GetWalletDetails_Response::wallet_country_code() const {
  // @@protoc_insertion_point(field_get:CUserAccount_GetWalletDetails_Response.wallet_country_code)
  return _internal_wallet_country_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CUserAccount_GetWalletDetails_Response::set_wallet_country_code(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 wallet_country_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CUserAccount_GetWalletDetails_Response.wallet_country_code)
}
inline std::string* CUserAccount_GetWalletDetails_Response::mutable_wallet_country_code() {
  std::string* _s = _internal_mutable_wallet_country_code();
  // @@protoc_insertion_point(field_mutable:CUserAccount_GetWalletDetails_Response.wallet_country_code)
  return _s;
}
inline const std::string& CUserAccount_GetWalletDetails_Response::_internal_wallet_country_code() const {
  return wallet_country_code_.Get();
}
inline void CUserAccount_GetWalletDetails_Response::_internal_set_wallet_country_code(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  wallet_country_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CUserAccount_GetWalletDetails_Response::_internal_mutable_wallet_country_code() {
  _has_bits_[0] |= 0x00000002u;
  return wallet_country_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CUserAccount_GetWalletDetails_Response::release_wallet_country_code() {
  // @@protoc_insertion_point(field_release:CUserAccount_GetWalletDetails_Response.wallet_country_code)
  if (!_internal_has_wallet_country_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = wallet_country_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (wallet_country_code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    wallet_country_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CUserAccount_GetWalletDetails_Response::set_allocated_wallet_country_code(std::string* wallet_country_code) {
  if (wallet_country_code != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  wallet_country_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), wallet_country_code,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (wallet_country_code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    wallet_country_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CUserAccount_GetWalletDetails_Response.wallet_country_code)
}

// optional string wallet_state = 4;
inline bool CUserAccount_GetWalletDetails_Response::_internal_has_wallet_state() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CUserAccount_GetWalletDetails_Response::has_wallet_state() const {
  return _internal_has_wallet_state();
}
inline void CUserAccount_GetWalletDetails_Response::clear_wallet_state() {
  wallet_state_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CUserAccount_GetWalletDetails_Response::wallet_state() const {
  // @@protoc_insertion_point(field_get:CUserAccount_GetWalletDetails_Response.wallet_state)
  return _internal_wallet_state();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CUserAccount_GetWalletDetails_Response::set_wallet_state(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 wallet_state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CUserAccount_GetWalletDetails_Response.wallet_state)
}
inline std::string* CUserAccount_GetWalletDetails_Response::mutable_wallet_state() {
  std::string* _s = _internal_mutable_wallet_state();
  // @@protoc_insertion_point(field_mutable:CUserAccount_GetWalletDetails_Response.wallet_state)
  return _s;
}
inline const std::string& CUserAccount_GetWalletDetails_Response::_internal_wallet_state() const {
  return wallet_state_.Get();
}
inline void CUserAccount_GetWalletDetails_Response::_internal_set_wallet_state(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  wallet_state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CUserAccount_GetWalletDetails_Response::_internal_mutable_wallet_state() {
  _has_bits_[0] |= 0x00000004u;
  return wallet_state_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CUserAccount_GetWalletDetails_Response::release_wallet_state() {
  // @@protoc_insertion_point(field_release:CUserAccount_GetWalletDetails_Response.wallet_state)
  if (!_internal_has_wallet_state()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = wallet_state_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (wallet_state_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    wallet_state_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CUserAccount_GetWalletDetails_Response::set_allocated_wallet_state(std::string* wallet_state) {
  if (wallet_state != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  wallet_state_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), wallet_state,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (wallet_state_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    wallet_state_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CUserAccount_GetWalletDetails_Response.wallet_state)
}

// optional int64 balance = 5;
inline bool CUserAccount_GetWalletDetails_Response::_internal_has_balance() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CUserAccount_GetWalletDetails_Response::has_balance() const {
  return _internal_has_balance();
}
inline void CUserAccount_GetWalletDetails_Response::clear_balance() {
  balance_ = int64_t{0};
  _has_bits_[0] &= ~0x00000010u;
}
inline int64_t CUserAccount_GetWalletDetails_Response::_internal_balance() const {
  return balance_;
}
inline int64_t CUserAccount_GetWalletDetails_Response::balance() const {
  // @@protoc_insertion_point(field_get:CUserAccount_GetWalletDetails_Response.balance)
  return _internal_balance();
}
inline void CUserAccount_GetWalletDetails_Response::_internal_set_balance(int64_t value) {
  _has_bits_[0] |= 0x00000010u;
  balance_ = value;
}
inline void CUserAccount_GetWalletDetails_Response::set_balance(int64_t value) {
  _internal_set_balance(value);
  // @@protoc_insertion_point(field_set:CUserAccount_GetWalletDetails_Response.balance)
}

// optional int64 delayed_balance = 6;
inline bool CUserAccount_GetWalletDetails_Response::_internal_has_delayed_balance() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CUserAccount_GetWalletDetails_Response::has_delayed_balance() const {
  return _internal_has_delayed_balance();
}
inline void CUserAccount_GetWalletDetails_Response::clear_delayed_balance() {
  delayed_balance_ = int64_t{0};
  _has_bits_[0] &= ~0x00000020u;
}
inline int64_t CUserAccount_GetWalletDetails_Response::_internal_delayed_balance() const {
  return delayed_balance_;
}
inline int64_t CUserAccount_GetWalletDetails_Response::delayed_balance() const {
  // @@protoc_insertion_point(field_get:CUserAccount_GetWalletDetails_Response.delayed_balance)
  return _internal_delayed_balance();
}
inline void CUserAccount_GetWalletDetails_Response::_internal_set_delayed_balance(int64_t value) {
  _has_bits_[0] |= 0x00000020u;
  delayed_balance_ = value;
}
inline void CUserAccount_GetWalletDetails_Response::set_delayed_balance(int64_t value) {
  _internal_set_delayed_balance(value);
  // @@protoc_insertion_point(field_set:CUserAccount_GetWalletDetails_Response.delayed_balance)
}

// optional int32 currency_code = 7;
inline bool CUserAccount_GetWalletDetails_Response::_internal_has_currency_code() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CUserAccount_GetWalletDetails_Response::has_currency_code() const {
  return _internal_has_currency_code();
}
inline void CUserAccount_GetWalletDetails_Response::clear_currency_code() {
  currency_code_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline int32_t CUserAccount_GetWalletDetails_Response::_internal_currency_code() const {
  return currency_code_;
}
inline int32_t CUserAccount_GetWalletDetails_Response::currency_code() const {
  // @@protoc_insertion_point(field_get:CUserAccount_GetWalletDetails_Response.currency_code)
  return _internal_currency_code();
}
inline void CUserAccount_GetWalletDetails_Response::_internal_set_currency_code(int32_t value) {
  _has_bits_[0] |= 0x00000100u;
  currency_code_ = value;
}
inline void CUserAccount_GetWalletDetails_Response::set_currency_code(int32_t value) {
  _internal_set_currency_code(value);
  // @@protoc_insertion_point(field_set:CUserAccount_GetWalletDetails_Response.currency_code)
}

// optional uint32 time_most_recent_txn = 8;
inline bool CUserAccount_GetWalletDetails_Response::_internal_has_time_most_recent_txn() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CUserAccount_GetWalletDetails_Response::has_time_most_recent_txn() const {
  return _internal_has_time_most_recent_txn();
}
inline void CUserAccount_GetWalletDetails_Response::clear_time_most_recent_txn() {
  time_most_recent_txn_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline uint32_t CUserAccount_GetWalletDetails_Response::_internal_time_most_recent_txn() const {
  return time_most_recent_txn_;
}
inline uint32_t CUserAccount_GetWalletDetails_Response::time_most_recent_txn() const {
  // @@protoc_insertion_point(field_get:CUserAccount_GetWalletDetails_Response.time_most_recent_txn)
  return _internal_time_most_recent_txn();
}
inline void CUserAccount_GetWalletDetails_Response::_internal_set_time_most_recent_txn(uint32_t value) {
  _has_bits_[0] |= 0x00001000u;
  time_most_recent_txn_ = value;
}
inline void CUserAccount_GetWalletDetails_Response::set_time_most_recent_txn(uint32_t value) {
  _internal_set_time_most_recent_txn(value);
  // @@protoc_insertion_point(field_set:CUserAccount_GetWalletDetails_Response.time_most_recent_txn)
}

// optional uint64 most_recent_txnid = 9;
inline bool CUserAccount_GetWalletDetails_Response::_internal_has_most_recent_txnid() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CUserAccount_GetWalletDetails_Response::has_most_recent_txnid() const {
  return _internal_has_most_recent_txnid();
}
inline void CUserAccount_GetWalletDetails_Response::clear_most_recent_txnid() {
  most_recent_txnid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000200u;
}
inline uint64_t CUserAccount_GetWalletDetails_Response::_internal_most_recent_txnid() const {
  return most_recent_txnid_;
}
inline uint64_t CUserAccount_GetWalletDetails_Response::most_recent_txnid() const {
  // @@protoc_insertion_point(field_get:CUserAccount_GetWalletDetails_Response.most_recent_txnid)
  return _internal_most_recent_txnid();
}
inline void CUserAccount_GetWalletDetails_Response::_internal_set_most_recent_txnid(uint64_t value) {
  _has_bits_[0] |= 0x00000200u;
  most_recent_txnid_ = value;
}
inline void CUserAccount_GetWalletDetails_Response::set_most_recent_txnid(uint64_t value) {
  _internal_set_most_recent_txnid(value);
  // @@protoc_insertion_point(field_set:CUserAccount_GetWalletDetails_Response.most_recent_txnid)
}

// optional int64 balance_in_usd = 10;
inline bool CUserAccount_GetWalletDetails_Response::_internal_has_balance_in_usd() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CUserAccount_GetWalletDetails_Response::has_balance_in_usd() const {
  return _internal_has_balance_in_usd();
}
inline void CUserAccount_GetWalletDetails_Response::clear_balance_in_usd() {
  balance_in_usd_ = int64_t{0};
  _has_bits_[0] &= ~0x00000400u;
}
inline int64_t CUserAccount_GetWalletDetails_Response::_internal_balance_in_usd() const {
  return balance_in_usd_;
}
inline int64_t CUserAccount_GetWalletDetails_Response::balance_in_usd() const {
  // @@protoc_insertion_point(field_get:CUserAccount_GetWalletDetails_Response.balance_in_usd)
  return _internal_balance_in_usd();
}
inline void CUserAccount_GetWalletDetails_Response::_internal_set_balance_in_usd(int64_t value) {
  _has_bits_[0] |= 0x00000400u;
  balance_in_usd_ = value;
}
inline void CUserAccount_GetWalletDetails_Response::set_balance_in_usd(int64_t value) {
  _internal_set_balance_in_usd(value);
  // @@protoc_insertion_point(field_set:CUserAccount_GetWalletDetails_Response.balance_in_usd)
}

// optional int64 delayed_balance_in_usd = 11;
inline bool CUserAccount_GetWalletDetails_Response::_internal_has_delayed_balance_in_usd() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CUserAccount_GetWalletDetails_Response::has_delayed_balance_in_usd() const {
  return _internal_has_delayed_balance_in_usd();
}
inline void CUserAccount_GetWalletDetails_Response::clear_delayed_balance_in_usd() {
  delayed_balance_in_usd_ = int64_t{0};
  _has_bits_[0] &= ~0x00000800u;
}
inline int64_t CUserAccount_GetWalletDetails_Response::_internal_delayed_balance_in_usd() const {
  return delayed_balance_in_usd_;
}
inline int64_t CUserAccount_GetWalletDetails_Response::delayed_balance_in_usd() const {
  // @@protoc_insertion_point(field_get:CUserAccount_GetWalletDetails_Response.delayed_balance_in_usd)
  return _internal_delayed_balance_in_usd();
}
inline void CUserAccount_GetWalletDetails_Response::_internal_set_delayed_balance_in_usd(int64_t value) {
  _has_bits_[0] |= 0x00000800u;
  delayed_balance_in_usd_ = value;
}
inline void CUserAccount_GetWalletDetails_Response::set_delayed_balance_in_usd(int64_t value) {
  _internal_set_delayed_balance_in_usd(value);
  // @@protoc_insertion_point(field_set:CUserAccount_GetWalletDetails_Response.delayed_balance_in_usd)
}

// optional bool has_wallet_in_other_regions = 12;
inline bool CUserAccount_GetWalletDetails_Response::_internal_has_has_wallet_in_other_regions() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CUserAccount_GetWalletDetails_Response::has_has_wallet_in_other_regions() const {
  return _internal_has_has_wallet_in_other_regions();
}
inline void CUserAccount_GetWalletDetails_Response::clear_has_wallet_in_other_regions() {
  has_wallet_in_other_regions_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CUserAccount_GetWalletDetails_Response::_internal_has_wallet_in_other_regions() const {
  return has_wallet_in_other_regions_;
}
inline bool CUserAccount_GetWalletDetails_Response::has_wallet_in_other_regions() const {
  // @@protoc_insertion_point(field_get:CUserAccount_GetWalletDetails_Response.has_wallet_in_other_regions)
  return _internal_has_wallet_in_other_regions();
}
inline void CUserAccount_GetWalletDetails_Response::_internal_set_has_wallet_in_other_regions(bool value) {
  _has_bits_[0] |= 0x00000080u;
  has_wallet_in_other_regions_ = value;
}
inline void CUserAccount_GetWalletDetails_Response::set_has_wallet_in_other_regions(bool value) {
  _internal_set_has_wallet_in_other_regions(value);
  // @@protoc_insertion_point(field_set:CUserAccount_GetWalletDetails_Response.has_wallet_in_other_regions)
}

// repeated int32 other_regions = 13;
inline int CUserAccount_GetWalletDetails_Response::_internal_other_regions_size() const {
  return other_regions_.size();
}
inline int CUserAccount_GetWalletDetails_Response::other_regions_size() const {
  return _internal_other_regions_size();
}
inline void CUserAccount_GetWalletDetails_Response::clear_other_regions() {
  other_regions_.Clear();
}
inline int32_t CUserAccount_GetWalletDetails_Response::_internal_other_regions(int index) const {
  return other_regions_.Get(index);
}
inline int32_t CUserAccount_GetWalletDetails_Response::other_regions(int index) const {
  // @@protoc_insertion_point(field_get:CUserAccount_GetWalletDetails_Response.other_regions)
  return _internal_other_regions(index);
}
inline void CUserAccount_GetWalletDetails_Response::set_other_regions(int index, int32_t value) {
  other_regions_.Set(index, value);
  // @@protoc_insertion_point(field_set:CUserAccount_GetWalletDetails_Response.other_regions)
}
inline void CUserAccount_GetWalletDetails_Response::_internal_add_other_regions(int32_t value) {
  other_regions_.Add(value);
}
inline void CUserAccount_GetWalletDetails_Response::add_other_regions(int32_t value) {
  _internal_add_other_regions(value);
  // @@protoc_insertion_point(field_add:CUserAccount_GetWalletDetails_Response.other_regions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CUserAccount_GetWalletDetails_Response::_internal_other_regions() const {
  return other_regions_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CUserAccount_GetWalletDetails_Response::other_regions() const {
  // @@protoc_insertion_point(field_list:CUserAccount_GetWalletDetails_Response.other_regions)
  return _internal_other_regions();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CUserAccount_GetWalletDetails_Response::_internal_mutable_other_regions() {
  return &other_regions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CUserAccount_GetWalletDetails_Response::mutable_other_regions() {
  // @@protoc_insertion_point(field_mutable_list:CUserAccount_GetWalletDetails_Response.other_regions)
  return _internal_mutable_other_regions();
}

// optional string formatted_balance = 14;
inline bool CUserAccount_GetWalletDetails_Response::_internal_has_formatted_balance() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CUserAccount_GetWalletDetails_Response::has_formatted_balance() const {
  return _internal_has_formatted_balance();
}
inline void CUserAccount_GetWalletDetails_Response::clear_formatted_balance() {
  formatted_balance_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CUserAccount_GetWalletDetails_Response::formatted_balance() const {
  // @@protoc_insertion_point(field_get:CUserAccount_GetWalletDetails_Response.formatted_balance)
  return _internal_formatted_balance();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CUserAccount_GetWalletDetails_Response::set_formatted_balance(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 formatted_balance_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CUserAccount_GetWalletDetails_Response.formatted_balance)
}
inline std::string* CUserAccount_GetWalletDetails_Response::mutable_formatted_balance() {
  std::string* _s = _internal_mutable_formatted_balance();
  // @@protoc_insertion_point(field_mutable:CUserAccount_GetWalletDetails_Response.formatted_balance)
  return _s;
}
inline const std::string& CUserAccount_GetWalletDetails_Response::_internal_formatted_balance() const {
  return formatted_balance_.Get();
}
inline void CUserAccount_GetWalletDetails_Response::_internal_set_formatted_balance(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  formatted_balance_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CUserAccount_GetWalletDetails_Response::_internal_mutable_formatted_balance() {
  _has_bits_[0] |= 0x00000008u;
  return formatted_balance_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CUserAccount_GetWalletDetails_Response::release_formatted_balance() {
  // @@protoc_insertion_point(field_release:CUserAccount_GetWalletDetails_Response.formatted_balance)
  if (!_internal_has_formatted_balance()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = formatted_balance_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (formatted_balance_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    formatted_balance_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CUserAccount_GetWalletDetails_Response::set_allocated_formatted_balance(std::string* formatted_balance) {
  if (formatted_balance != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  formatted_balance_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), formatted_balance,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (formatted_balance_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    formatted_balance_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CUserAccount_GetWalletDetails_Response.formatted_balance)
}

// -------------------------------------------------------------------

// CUserAccount_GetAccountLinkStatus_Request

// -------------------------------------------------------------------

// CUserAccount_GetAccountLinkStatus_Response

// optional uint32 pwid = 1;
inline bool CUserAccount_GetAccountLinkStatus_Response::_internal_has_pwid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CUserAccount_GetAccountLinkStatus_Response::has_pwid() const {
  return _internal_has_pwid();
}
inline void CUserAccount_GetAccountLinkStatus_Response::clear_pwid() {
  pwid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CUserAccount_GetAccountLinkStatus_Response::_internal_pwid() const {
  return pwid_;
}
inline uint32_t CUserAccount_GetAccountLinkStatus_Response::pwid() const {
  // @@protoc_insertion_point(field_get:CUserAccount_GetAccountLinkStatus_Response.pwid)
  return _internal_pwid();
}
inline void CUserAccount_GetAccountLinkStatus_Response::_internal_set_pwid(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  pwid_ = value;
}
inline void CUserAccount_GetAccountLinkStatus_Response::set_pwid(uint32_t value) {
  _internal_set_pwid(value);
  // @@protoc_insertion_point(field_set:CUserAccount_GetAccountLinkStatus_Response.pwid)
}

// optional uint32 identity_verification = 2;
inline bool CUserAccount_GetAccountLinkStatus_Response::_internal_has_identity_verification() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CUserAccount_GetAccountLinkStatus_Response::has_identity_verification() const {
  return _internal_has_identity_verification();
}
inline void CUserAccount_GetAccountLinkStatus_Response::clear_identity_verification() {
  identity_verification_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CUserAccount_GetAccountLinkStatus_Response::_internal_identity_verification() const {
  return identity_verification_;
}
inline uint32_t CUserAccount_GetAccountLinkStatus_Response::identity_verification() const {
  // @@protoc_insertion_point(field_get:CUserAccount_GetAccountLinkStatus_Response.identity_verification)
  return _internal_identity_verification();
}
inline void CUserAccount_GetAccountLinkStatus_Response::_internal_set_identity_verification(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  identity_verification_ = value;
}
inline void CUserAccount_GetAccountLinkStatus_Response::set_identity_verification(uint32_t value) {
  _internal_set_identity_verification(value);
  // @@protoc_insertion_point(field_set:CUserAccount_GetAccountLinkStatus_Response.identity_verification)
}

// optional bool performed_age_verification = 3;
inline bool CUserAccount_GetAccountLinkStatus_Response::_internal_has_performed_age_verification() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CUserAccount_GetAccountLinkStatus_Response::has_performed_age_verification() const {
  return _internal_has_performed_age_verification();
}
inline void CUserAccount_GetAccountLinkStatus_Response::clear_performed_age_verification() {
  performed_age_verification_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CUserAccount_GetAccountLinkStatus_Response::_internal_performed_age_verification() const {
  return performed_age_verification_;
}
inline bool CUserAccount_GetAccountLinkStatus_Response::performed_age_verification() const {
  // @@protoc_insertion_point(field_get:CUserAccount_GetAccountLinkStatus_Response.performed_age_verification)
  return _internal_performed_age_verification();
}
inline void CUserAccount_GetAccountLinkStatus_Response::_internal_set_performed_age_verification(bool value) {
  _has_bits_[0] |= 0x00000004u;
  performed_age_verification_ = value;
}
inline void CUserAccount_GetAccountLinkStatus_Response::set_performed_age_verification(bool value) {
  _internal_set_performed_age_verification(value);
  // @@protoc_insertion_point(field_set:CUserAccount_GetAccountLinkStatus_Response.performed_age_verification)
}

// -------------------------------------------------------------------

// CUserAccount_CancelLicenseForApp_Request

// optional uint32 appid = 1;
inline bool CUserAccount_CancelLicenseForApp_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CUserAccount_CancelLicenseForApp_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CUserAccount_CancelLicenseForApp_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CUserAccount_CancelLicenseForApp_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CUserAccount_CancelLicenseForApp_Request::appid() const {
  // @@protoc_insertion_point(field_get:CUserAccount_CancelLicenseForApp_Request.appid)
  return _internal_appid();
}
inline void CUserAccount_CancelLicenseForApp_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  appid_ = value;
}
inline void CUserAccount_CancelLicenseForApp_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CUserAccount_CancelLicenseForApp_Request.appid)
}

// -------------------------------------------------------------------

// CUserAccount_CancelLicenseForApp_Response

// -------------------------------------------------------------------

// CUserAccount_GetUserCountry_Request

// optional fixed64 steamid = 1;
inline bool CUserAccount_GetUserCountry_Request::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CUserAccount_GetUserCountry_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CUserAccount_GetUserCountry_Request::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CUserAccount_GetUserCountry_Request::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CUserAccount_GetUserCountry_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CUserAccount_GetUserCountry_Request.steamid)
  return _internal_steamid();
}
inline void CUserAccount_GetUserCountry_Request::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
}
inline void CUserAccount_GetUserCountry_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CUserAccount_GetUserCountry_Request.steamid)
}

// -------------------------------------------------------------------

// CUserAccount_GetUserCountry_Response

// optional string country = 1;
inline bool CUserAccount_GetUserCountry_Response::_internal_has_country() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CUserAccount_GetUserCountry_Response::has_country() const {
  return _internal_has_country();
}
inline void CUserAccount_GetUserCountry_Response::clear_country() {
  country_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CUserAccount_GetUserCountry_Response::country() const {
  // @@protoc_insertion_point(field_get:CUserAccount_GetUserCountry_Response.country)
  return _internal_country();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CUserAccount_GetUserCountry_Response::set_country(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 country_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CUserAccount_GetUserCountry_Response.country)
}
inline std::string* CUserAccount_GetUserCountry_Response::mutable_country() {
  std::string* _s = _internal_mutable_country();
  // @@protoc_insertion_point(field_mutable:CUserAccount_GetUserCountry_Response.country)
  return _s;
}
inline const std::string& CUserAccount_GetUserCountry_Response::_internal_country() const {
  return country_.Get();
}
inline void CUserAccount_GetUserCountry_Response::_internal_set_country(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  country_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CUserAccount_GetUserCountry_Response::_internal_mutable_country() {
  _has_bits_[0] |= 0x00000001u;
  return country_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CUserAccount_GetUserCountry_Response::release_country() {
  // @@protoc_insertion_point(field_release:CUserAccount_GetUserCountry_Response.country)
  if (!_internal_has_country()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = country_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (country_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    country_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CUserAccount_GetUserCountry_Response::set_allocated_country(std::string* country) {
  if (country != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  country_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), country,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (country_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    country_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CUserAccount_GetUserCountry_Response.country)
}

// -------------------------------------------------------------------

// CUserAccount_CreateFriendInviteToken_Request

// optional uint32 invite_limit = 1;
inline bool CUserAccount_CreateFriendInviteToken_Request::_internal_has_invite_limit() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CUserAccount_CreateFriendInviteToken_Request::has_invite_limit() const {
  return _internal_has_invite_limit();
}
inline void CUserAccount_CreateFriendInviteToken_Request::clear_invite_limit() {
  invite_limit_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CUserAccount_CreateFriendInviteToken_Request::_internal_invite_limit() const {
  return invite_limit_;
}
inline uint32_t CUserAccount_CreateFriendInviteToken_Request::invite_limit() const {
  // @@protoc_insertion_point(field_get:CUserAccount_CreateFriendInviteToken_Request.invite_limit)
  return _internal_invite_limit();
}
inline void CUserAccount_CreateFriendInviteToken_Request::_internal_set_invite_limit(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  invite_limit_ = value;
}
inline void CUserAccount_CreateFriendInviteToken_Request::set_invite_limit(uint32_t value) {
  _internal_set_invite_limit(value);
  // @@protoc_insertion_point(field_set:CUserAccount_CreateFriendInviteToken_Request.invite_limit)
}

// optional uint32 invite_duration = 2;
inline bool CUserAccount_CreateFriendInviteToken_Request::_internal_has_invite_duration() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CUserAccount_CreateFriendInviteToken_Request::has_invite_duration() const {
  return _internal_has_invite_duration();
}
inline void CUserAccount_CreateFriendInviteToken_Request::clear_invite_duration() {
  invite_duration_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CUserAccount_CreateFriendInviteToken_Request::_internal_invite_duration() const {
  return invite_duration_;
}
inline uint32_t CUserAccount_CreateFriendInviteToken_Request::invite_duration() const {
  // @@protoc_insertion_point(field_get:CUserAccount_CreateFriendInviteToken_Request.invite_duration)
  return _internal_invite_duration();
}
inline void CUserAccount_CreateFriendInviteToken_Request::_internal_set_invite_duration(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  invite_duration_ = value;
}
inline void CUserAccount_CreateFriendInviteToken_Request::set_invite_duration(uint32_t value) {
  _internal_set_invite_duration(value);
  // @@protoc_insertion_point(field_set:CUserAccount_CreateFriendInviteToken_Request.invite_duration)
}

// optional string invite_note = 3;
inline bool CUserAccount_CreateFriendInviteToken_Request::_internal_has_invite_note() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CUserAccount_CreateFriendInviteToken_Request::has_invite_note() const {
  return _internal_has_invite_note();
}
inline void CUserAccount_CreateFriendInviteToken_Request::clear_invite_note() {
  invite_note_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CUserAccount_CreateFriendInviteToken_Request::invite_note() const {
  // @@protoc_insertion_point(field_get:CUserAccount_CreateFriendInviteToken_Request.invite_note)
  return _internal_invite_note();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CUserAccount_CreateFriendInviteToken_Request::set_invite_note(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 invite_note_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CUserAccount_CreateFriendInviteToken_Request.invite_note)
}
inline std::string* CUserAccount_CreateFriendInviteToken_Request::mutable_invite_note() {
  std::string* _s = _internal_mutable_invite_note();
  // @@protoc_insertion_point(field_mutable:CUserAccount_CreateFriendInviteToken_Request.invite_note)
  return _s;
}
inline const std::string& CUserAccount_CreateFriendInviteToken_Request::_internal_invite_note() const {
  return invite_note_.Get();
}
inline void CUserAccount_CreateFriendInviteToken_Request::_internal_set_invite_note(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  invite_note_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CUserAccount_CreateFriendInviteToken_Request::_internal_mutable_invite_note() {
  _has_bits_[0] |= 0x00000001u;
  return invite_note_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CUserAccount_CreateFriendInviteToken_Request::release_invite_note() {
  // @@protoc_insertion_point(field_release:CUserAccount_CreateFriendInviteToken_Request.invite_note)
  if (!_internal_has_invite_note()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = invite_note_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (invite_note_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    invite_note_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CUserAccount_CreateFriendInviteToken_Request::set_allocated_invite_note(std::string* invite_note) {
  if (invite_note != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  invite_note_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), invite_note,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (invite_note_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    invite_note_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CUserAccount_CreateFriendInviteToken_Request.invite_note)
}

// -------------------------------------------------------------------

// CUserAccount_CreateFriendInviteToken_Response

// optional string invite_token = 1;
inline bool CUserAccount_CreateFriendInviteToken_Response::_internal_has_invite_token() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CUserAccount_CreateFriendInviteToken_Response::has_invite_token() const {
  return _internal_has_invite_token();
}
inline void CUserAccount_CreateFriendInviteToken_Response::clear_invite_token() {
  invite_token_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CUserAccount_CreateFriendInviteToken_Response::invite_token() const {
  // @@protoc_insertion_point(field_get:CUserAccount_CreateFriendInviteToken_Response.invite_token)
  return _internal_invite_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CUserAccount_CreateFriendInviteToken_Response::set_invite_token(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 invite_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CUserAccount_CreateFriendInviteToken_Response.invite_token)
}
inline std::string* CUserAccount_CreateFriendInviteToken_Response::mutable_invite_token() {
  std::string* _s = _internal_mutable_invite_token();
  // @@protoc_insertion_point(field_mutable:CUserAccount_CreateFriendInviteToken_Response.invite_token)
  return _s;
}
inline const std::string& CUserAccount_CreateFriendInviteToken_Response::_internal_invite_token() const {
  return invite_token_.Get();
}
inline void CUserAccount_CreateFriendInviteToken_Response::_internal_set_invite_token(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  invite_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CUserAccount_CreateFriendInviteToken_Response::_internal_mutable_invite_token() {
  _has_bits_[0] |= 0x00000001u;
  return invite_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CUserAccount_CreateFriendInviteToken_Response::release_invite_token() {
  // @@protoc_insertion_point(field_release:CUserAccount_CreateFriendInviteToken_Response.invite_token)
  if (!_internal_has_invite_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = invite_token_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (invite_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    invite_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CUserAccount_CreateFriendInviteToken_Response::set_allocated_invite_token(std::string* invite_token) {
  if (invite_token != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  invite_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), invite_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (invite_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    invite_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CUserAccount_CreateFriendInviteToken_Response.invite_token)
}

// optional uint64 invite_limit = 2;
inline bool CUserAccount_CreateFriendInviteToken_Response::_internal_has_invite_limit() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CUserAccount_CreateFriendInviteToken_Response::has_invite_limit() const {
  return _internal_has_invite_limit();
}
inline void CUserAccount_CreateFriendInviteToken_Response::clear_invite_limit() {
  invite_limit_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CUserAccount_CreateFriendInviteToken_Response::_internal_invite_limit() const {
  return invite_limit_;
}
inline uint64_t CUserAccount_CreateFriendInviteToken_Response::invite_limit() const {
  // @@protoc_insertion_point(field_get:CUserAccount_CreateFriendInviteToken_Response.invite_limit)
  return _internal_invite_limit();
}
inline void CUserAccount_CreateFriendInviteToken_Response::_internal_set_invite_limit(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  invite_limit_ = value;
}
inline void CUserAccount_CreateFriendInviteToken_Response::set_invite_limit(uint64_t value) {
  _internal_set_invite_limit(value);
  // @@protoc_insertion_point(field_set:CUserAccount_CreateFriendInviteToken_Response.invite_limit)
}

// optional uint64 invite_duration = 3;
inline bool CUserAccount_CreateFriendInviteToken_Response::_internal_has_invite_duration() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CUserAccount_CreateFriendInviteToken_Response::has_invite_duration() const {
  return _internal_has_invite_duration();
}
inline void CUserAccount_CreateFriendInviteToken_Response::clear_invite_duration() {
  invite_duration_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CUserAccount_CreateFriendInviteToken_Response::_internal_invite_duration() const {
  return invite_duration_;
}
inline uint64_t CUserAccount_CreateFriendInviteToken_Response::invite_duration() const {
  // @@protoc_insertion_point(field_get:CUserAccount_CreateFriendInviteToken_Response.invite_duration)
  return _internal_invite_duration();
}
inline void CUserAccount_CreateFriendInviteToken_Response::_internal_set_invite_duration(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  invite_duration_ = value;
}
inline void CUserAccount_CreateFriendInviteToken_Response::set_invite_duration(uint64_t value) {
  _internal_set_invite_duration(value);
  // @@protoc_insertion_point(field_set:CUserAccount_CreateFriendInviteToken_Response.invite_duration)
}

// optional fixed32 time_created = 4;
inline bool CUserAccount_CreateFriendInviteToken_Response::_internal_has_time_created() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CUserAccount_CreateFriendInviteToken_Response::has_time_created() const {
  return _internal_has_time_created();
}
inline void CUserAccount_CreateFriendInviteToken_Response::clear_time_created() {
  time_created_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CUserAccount_CreateFriendInviteToken_Response::_internal_time_created() const {
  return time_created_;
}
inline uint32_t CUserAccount_CreateFriendInviteToken_Response::time_created() const {
  // @@protoc_insertion_point(field_get:CUserAccount_CreateFriendInviteToken_Response.time_created)
  return _internal_time_created();
}
inline void CUserAccount_CreateFriendInviteToken_Response::_internal_set_time_created(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  time_created_ = value;
}
inline void CUserAccount_CreateFriendInviteToken_Response::set_time_created(uint32_t value) {
  _internal_set_time_created(value);
  // @@protoc_insertion_point(field_set:CUserAccount_CreateFriendInviteToken_Response.time_created)
}

// optional bool valid = 5;
inline bool CUserAccount_CreateFriendInviteToken_Response::_internal_has_valid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CUserAccount_CreateFriendInviteToken_Response::has_valid() const {
  return _internal_has_valid();
}
inline void CUserAccount_CreateFriendInviteToken_Response::clear_valid() {
  valid_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CUserAccount_CreateFriendInviteToken_Response::_internal_valid() const {
  return valid_;
}
inline bool CUserAccount_CreateFriendInviteToken_Response::valid() const {
  // @@protoc_insertion_point(field_get:CUserAccount_CreateFriendInviteToken_Response.valid)
  return _internal_valid();
}
inline void CUserAccount_CreateFriendInviteToken_Response::_internal_set_valid(bool value) {
  _has_bits_[0] |= 0x00000010u;
  valid_ = value;
}
inline void CUserAccount_CreateFriendInviteToken_Response::set_valid(bool value) {
  _internal_set_valid(value);
  // @@protoc_insertion_point(field_set:CUserAccount_CreateFriendInviteToken_Response.valid)
}

// -------------------------------------------------------------------

// CUserAccount_GetFriendInviteTokens_Request

// -------------------------------------------------------------------

// CUserAccount_GetFriendInviteTokens_Response

// repeated .CUserAccount_CreateFriendInviteToken_Response tokens = 1;
inline int CUserAccount_GetFriendInviteTokens_Response::_internal_tokens_size() const {
  return tokens_.size();
}
inline int CUserAccount_GetFriendInviteTokens_Response::tokens_size() const {
  return _internal_tokens_size();
}
inline void CUserAccount_GetFriendInviteTokens_Response::clear_tokens() {
  tokens_.Clear();
}
inline ::CUserAccount_CreateFriendInviteToken_Response* CUserAccount_GetFriendInviteTokens_Response::mutable_tokens(int index) {
  // @@protoc_insertion_point(field_mutable:CUserAccount_GetFriendInviteTokens_Response.tokens)
  return tokens_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CUserAccount_CreateFriendInviteToken_Response >*
CUserAccount_GetFriendInviteTokens_Response::mutable_tokens() {
  // @@protoc_insertion_point(field_mutable_list:CUserAccount_GetFriendInviteTokens_Response.tokens)
  return &tokens_;
}
inline const ::CUserAccount_CreateFriendInviteToken_Response& CUserAccount_GetFriendInviteTokens_Response::_internal_tokens(int index) const {
  return tokens_.Get(index);
}
inline const ::CUserAccount_CreateFriendInviteToken_Response& CUserAccount_GetFriendInviteTokens_Response::tokens(int index) const {
  // @@protoc_insertion_point(field_get:CUserAccount_GetFriendInviteTokens_Response.tokens)
  return _internal_tokens(index);
}
inline ::CUserAccount_CreateFriendInviteToken_Response* CUserAccount_GetFriendInviteTokens_Response::_internal_add_tokens() {
  return tokens_.Add();
}
inline ::CUserAccount_CreateFriendInviteToken_Response* CUserAccount_GetFriendInviteTokens_Response::add_tokens() {
  ::CUserAccount_CreateFriendInviteToken_Response* _add = _internal_add_tokens();
  // @@protoc_insertion_point(field_add:CUserAccount_GetFriendInviteTokens_Response.tokens)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CUserAccount_CreateFriendInviteToken_Response >&
CUserAccount_GetFriendInviteTokens_Response::tokens() const {
  // @@protoc_insertion_point(field_list:CUserAccount_GetFriendInviteTokens_Response.tokens)
  return tokens_;
}

// -------------------------------------------------------------------

// CUserAccount_ViewFriendInviteToken_Request

// optional fixed64 steamid = 1;
inline bool CUserAccount_ViewFriendInviteToken_Request::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CUserAccount_ViewFriendInviteToken_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CUserAccount_ViewFriendInviteToken_Request::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CUserAccount_ViewFriendInviteToken_Request::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CUserAccount_ViewFriendInviteToken_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CUserAccount_ViewFriendInviteToken_Request.steamid)
  return _internal_steamid();
}
inline void CUserAccount_ViewFriendInviteToken_Request::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  steamid_ = value;
}
inline void CUserAccount_ViewFriendInviteToken_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CUserAccount_ViewFriendInviteToken_Request.steamid)
}

// optional string invite_token = 2;
inline bool CUserAccount_ViewFriendInviteToken_Request::_internal_has_invite_token() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CUserAccount_ViewFriendInviteToken_Request::has_invite_token() const {
  return _internal_has_invite_token();
}
inline void CUserAccount_ViewFriendInviteToken_Request::clear_invite_token() {
  invite_token_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CUserAccount_ViewFriendInviteToken_Request::invite_token() const {
  // @@protoc_insertion_point(field_get:CUserAccount_ViewFriendInviteToken_Request.invite_token)
  return _internal_invite_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CUserAccount_ViewFriendInviteToken_Request::set_invite_token(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 invite_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CUserAccount_ViewFriendInviteToken_Request.invite_token)
}
inline std::string* CUserAccount_ViewFriendInviteToken_Request::mutable_invite_token() {
  std::string* _s = _internal_mutable_invite_token();
  // @@protoc_insertion_point(field_mutable:CUserAccount_ViewFriendInviteToken_Request.invite_token)
  return _s;
}
inline const std::string& CUserAccount_ViewFriendInviteToken_Request::_internal_invite_token() const {
  return invite_token_.Get();
}
inline void CUserAccount_ViewFriendInviteToken_Request::_internal_set_invite_token(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  invite_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CUserAccount_ViewFriendInviteToken_Request::_internal_mutable_invite_token() {
  _has_bits_[0] |= 0x00000001u;
  return invite_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CUserAccount_ViewFriendInviteToken_Request::release_invite_token() {
  // @@protoc_insertion_point(field_release:CUserAccount_ViewFriendInviteToken_Request.invite_token)
  if (!_internal_has_invite_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = invite_token_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (invite_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    invite_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CUserAccount_ViewFriendInviteToken_Request::set_allocated_invite_token(std::string* invite_token) {
  if (invite_token != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  invite_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), invite_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (invite_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    invite_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CUserAccount_ViewFriendInviteToken_Request.invite_token)
}

// -------------------------------------------------------------------

// CUserAccount_ViewFriendInviteToken_Response

// optional bool valid = 1;
inline bool CUserAccount_ViewFriendInviteToken_Response::_internal_has_valid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CUserAccount_ViewFriendInviteToken_Response::has_valid() const {
  return _internal_has_valid();
}
inline void CUserAccount_ViewFriendInviteToken_Response::clear_valid() {
  valid_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CUserAccount_ViewFriendInviteToken_Response::_internal_valid() const {
  return valid_;
}
inline bool CUserAccount_ViewFriendInviteToken_Response::valid() const {
  // @@protoc_insertion_point(field_get:CUserAccount_ViewFriendInviteToken_Response.valid)
  return _internal_valid();
}
inline void CUserAccount_ViewFriendInviteToken_Response::_internal_set_valid(bool value) {
  _has_bits_[0] |= 0x00000004u;
  valid_ = value;
}
inline void CUserAccount_ViewFriendInviteToken_Response::set_valid(bool value) {
  _internal_set_valid(value);
  // @@protoc_insertion_point(field_set:CUserAccount_ViewFriendInviteToken_Response.valid)
}

// optional uint64 steamid = 2;
inline bool CUserAccount_ViewFriendInviteToken_Response::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CUserAccount_ViewFriendInviteToken_Response::has_steamid() const {
  return _internal_has_steamid();
}
inline void CUserAccount_ViewFriendInviteToken_Response::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CUserAccount_ViewFriendInviteToken_Response::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CUserAccount_ViewFriendInviteToken_Response::steamid() const {
  // @@protoc_insertion_point(field_get:CUserAccount_ViewFriendInviteToken_Response.steamid)
  return _internal_steamid();
}
inline void CUserAccount_ViewFriendInviteToken_Response::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
}
inline void CUserAccount_ViewFriendInviteToken_Response::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CUserAccount_ViewFriendInviteToken_Response.steamid)
}

// optional uint64 invite_duration = 3;
inline bool CUserAccount_ViewFriendInviteToken_Response::_internal_has_invite_duration() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CUserAccount_ViewFriendInviteToken_Response::has_invite_duration() const {
  return _internal_has_invite_duration();
}
inline void CUserAccount_ViewFriendInviteToken_Response::clear_invite_duration() {
  invite_duration_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CUserAccount_ViewFriendInviteToken_Response::_internal_invite_duration() const {
  return invite_duration_;
}
inline uint64_t CUserAccount_ViewFriendInviteToken_Response::invite_duration() const {
  // @@protoc_insertion_point(field_get:CUserAccount_ViewFriendInviteToken_Response.invite_duration)
  return _internal_invite_duration();
}
inline void CUserAccount_ViewFriendInviteToken_Response::_internal_set_invite_duration(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  invite_duration_ = value;
}
inline void CUserAccount_ViewFriendInviteToken_Response::set_invite_duration(uint64_t value) {
  _internal_set_invite_duration(value);
  // @@protoc_insertion_point(field_set:CUserAccount_ViewFriendInviteToken_Response.invite_duration)
}

// -------------------------------------------------------------------

// CUserAccount_RedeemFriendInviteToken_Request

// optional fixed64 steamid = 1;
inline bool CUserAccount_RedeemFriendInviteToken_Request::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CUserAccount_RedeemFriendInviteToken_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CUserAccount_RedeemFriendInviteToken_Request::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CUserAccount_RedeemFriendInviteToken_Request::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CUserAccount_RedeemFriendInviteToken_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CUserAccount_RedeemFriendInviteToken_Request.steamid)
  return _internal_steamid();
}
inline void CUserAccount_RedeemFriendInviteToken_Request::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  steamid_ = value;
}
inline void CUserAccount_RedeemFriendInviteToken_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CUserAccount_RedeemFriendInviteToken_Request.steamid)
}

// optional string invite_token = 2;
inline bool CUserAccount_RedeemFriendInviteToken_Request::_internal_has_invite_token() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CUserAccount_RedeemFriendInviteToken_Request::has_invite_token() const {
  return _internal_has_invite_token();
}
inline void CUserAccount_RedeemFriendInviteToken_Request::clear_invite_token() {
  invite_token_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CUserAccount_RedeemFriendInviteToken_Request::invite_token() const {
  // @@protoc_insertion_point(field_get:CUserAccount_RedeemFriendInviteToken_Request.invite_token)
  return _internal_invite_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CUserAccount_RedeemFriendInviteToken_Request::set_invite_token(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 invite_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CUserAccount_RedeemFriendInviteToken_Request.invite_token)
}
inline std::string* CUserAccount_RedeemFriendInviteToken_Request::mutable_invite_token() {
  std::string* _s = _internal_mutable_invite_token();
  // @@protoc_insertion_point(field_mutable:CUserAccount_RedeemFriendInviteToken_Request.invite_token)
  return _s;
}
inline const std::string& CUserAccount_RedeemFriendInviteToken_Request::_internal_invite_token() const {
  return invite_token_.Get();
}
inline void CUserAccount_RedeemFriendInviteToken_Request::_internal_set_invite_token(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  invite_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CUserAccount_RedeemFriendInviteToken_Request::_internal_mutable_invite_token() {
  _has_bits_[0] |= 0x00000001u;
  return invite_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CUserAccount_RedeemFriendInviteToken_Request::release_invite_token() {
  // @@protoc_insertion_point(field_release:CUserAccount_RedeemFriendInviteToken_Request.invite_token)
  if (!_internal_has_invite_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = invite_token_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (invite_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    invite_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CUserAccount_RedeemFriendInviteToken_Request::set_allocated_invite_token(std::string* invite_token) {
  if (invite_token != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  invite_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), invite_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (invite_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    invite_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CUserAccount_RedeemFriendInviteToken_Request.invite_token)
}

// -------------------------------------------------------------------

// CUserAccount_RedeemFriendInviteToken_Response

// -------------------------------------------------------------------

// CUserAccount_RevokeFriendInviteToken_Request

// optional string invite_token = 1;
inline bool CUserAccount_RevokeFriendInviteToken_Request::_internal_has_invite_token() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CUserAccount_RevokeFriendInviteToken_Request::has_invite_token() const {
  return _internal_has_invite_token();
}
inline void CUserAccount_RevokeFriendInviteToken_Request::clear_invite_token() {
  invite_token_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CUserAccount_RevokeFriendInviteToken_Request::invite_token() const {
  // @@protoc_insertion_point(field_get:CUserAccount_RevokeFriendInviteToken_Request.invite_token)
  return _internal_invite_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CUserAccount_RevokeFriendInviteToken_Request::set_invite_token(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 invite_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CUserAccount_RevokeFriendInviteToken_Request.invite_token)
}
inline std::string* CUserAccount_RevokeFriendInviteToken_Request::mutable_invite_token() {
  std::string* _s = _internal_mutable_invite_token();
  // @@protoc_insertion_point(field_mutable:CUserAccount_RevokeFriendInviteToken_Request.invite_token)
  return _s;
}
inline const std::string& CUserAccount_RevokeFriendInviteToken_Request::_internal_invite_token() const {
  return invite_token_.Get();
}
inline void CUserAccount_RevokeFriendInviteToken_Request::_internal_set_invite_token(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  invite_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CUserAccount_RevokeFriendInviteToken_Request::_internal_mutable_invite_token() {
  _has_bits_[0] |= 0x00000001u;
  return invite_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CUserAccount_RevokeFriendInviteToken_Request::release_invite_token() {
  // @@protoc_insertion_point(field_release:CUserAccount_RevokeFriendInviteToken_Request.invite_token)
  if (!_internal_has_invite_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = invite_token_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (invite_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    invite_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CUserAccount_RevokeFriendInviteToken_Request::set_allocated_invite_token(std::string* invite_token) {
  if (invite_token != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  invite_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), invite_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (invite_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    invite_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CUserAccount_RevokeFriendInviteToken_Request.invite_token)
}

// -------------------------------------------------------------------

// CUserAccount_RevokeFriendInviteToken_Response

// -------------------------------------------------------------------

// CUserAccount_RegisterCompatTool_Request

// optional uint32 compat_tool = 1;
inline bool CUserAccount_RegisterCompatTool_Request::_internal_has_compat_tool() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CUserAccount_RegisterCompatTool_Request::has_compat_tool() const {
  return _internal_has_compat_tool();
}
inline void CUserAccount_RegisterCompatTool_Request::clear_compat_tool() {
  compat_tool_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CUserAccount_RegisterCompatTool_Request::_internal_compat_tool() const {
  return compat_tool_;
}
inline uint32_t CUserAccount_RegisterCompatTool_Request::compat_tool() const {
  // @@protoc_insertion_point(field_get:CUserAccount_RegisterCompatTool_Request.compat_tool)
  return _internal_compat_tool();
}
inline void CUserAccount_RegisterCompatTool_Request::_internal_set_compat_tool(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  compat_tool_ = value;
}
inline void CUserAccount_RegisterCompatTool_Request::set_compat_tool(uint32_t value) {
  _internal_set_compat_tool(value);
  // @@protoc_insertion_point(field_set:CUserAccount_RegisterCompatTool_Request.compat_tool)
}

// -------------------------------------------------------------------

// CUserAccount_RegisterCompatTool_Response

// -------------------------------------------------------------------

// CAccountLinking_GetLinkedAccountInfo_Request

// optional .EInternalAccountType account_type = 1 [default = k_EInternalSteamAccountType];
inline bool CAccountLinking_GetLinkedAccountInfo_Request::_internal_has_account_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CAccountLinking_GetLinkedAccountInfo_Request::has_account_type() const {
  return _internal_has_account_type();
}
inline void CAccountLinking_GetLinkedAccountInfo_Request::clear_account_type() {
  account_type_ = 1;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::EInternalAccountType CAccountLinking_GetLinkedAccountInfo_Request::_internal_account_type() const {
  return static_cast< ::EInternalAccountType >(account_type_);
}
inline ::EInternalAccountType CAccountLinking_GetLinkedAccountInfo_Request::account_type() const {
  // @@protoc_insertion_point(field_get:CAccountLinking_GetLinkedAccountInfo_Request.account_type)
  return _internal_account_type();
}
inline void CAccountLinking_GetLinkedAccountInfo_Request::_internal_set_account_type(::EInternalAccountType value) {
  assert(::EInternalAccountType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  account_type_ = value;
}
inline void CAccountLinking_GetLinkedAccountInfo_Request::set_account_type(::EInternalAccountType value) {
  _internal_set_account_type(value);
  // @@protoc_insertion_point(field_set:CAccountLinking_GetLinkedAccountInfo_Request.account_type)
}

// optional uint64 account_id = 2 [(.description) = "Internal account ID"];
inline bool CAccountLinking_GetLinkedAccountInfo_Request::_internal_has_account_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CAccountLinking_GetLinkedAccountInfo_Request::has_account_id() const {
  return _internal_has_account_id();
}
inline void CAccountLinking_GetLinkedAccountInfo_Request::clear_account_id() {
  account_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CAccountLinking_GetLinkedAccountInfo_Request::_internal_account_id() const {
  return account_id_;
}
inline uint64_t CAccountLinking_GetLinkedAccountInfo_Request::account_id() const {
  // @@protoc_insertion_point(field_get:CAccountLinking_GetLinkedAccountInfo_Request.account_id)
  return _internal_account_id();
}
inline void CAccountLinking_GetLinkedAccountInfo_Request::_internal_set_account_id(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  account_id_ = value;
}
inline void CAccountLinking_GetLinkedAccountInfo_Request::set_account_id(uint64_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CAccountLinking_GetLinkedAccountInfo_Request.account_id)
}

// optional .EExternalAccountType filter = 3 [default = k_EExternalNone, (.description) = "if specified then only return this external account type"];
inline bool CAccountLinking_GetLinkedAccountInfo_Request::_internal_has_filter() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CAccountLinking_GetLinkedAccountInfo_Request::has_filter() const {
  return _internal_has_filter();
}
inline void CAccountLinking_GetLinkedAccountInfo_Request::clear_filter() {
  filter_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::EExternalAccountType CAccountLinking_GetLinkedAccountInfo_Request::_internal_filter() const {
  return static_cast< ::EExternalAccountType >(filter_);
}
inline ::EExternalAccountType CAccountLinking_GetLinkedAccountInfo_Request::filter() const {
  // @@protoc_insertion_point(field_get:CAccountLinking_GetLinkedAccountInfo_Request.filter)
  return _internal_filter();
}
inline void CAccountLinking_GetLinkedAccountInfo_Request::_internal_set_filter(::EExternalAccountType value) {
  assert(::EExternalAccountType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  filter_ = value;
}
inline void CAccountLinking_GetLinkedAccountInfo_Request::set_filter(::EExternalAccountType value) {
  _internal_set_filter(value);
  // @@protoc_insertion_point(field_set:CAccountLinking_GetLinkedAccountInfo_Request.filter)
}

// optional bool return_access_token = 4 [(.description) = "if provided and true, then returns valid access token if available. It may refresh the token. "];
inline bool CAccountLinking_GetLinkedAccountInfo_Request::_internal_has_return_access_token() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CAccountLinking_GetLinkedAccountInfo_Request::has_return_access_token() const {
  return _internal_has_return_access_token();
}
inline void CAccountLinking_GetLinkedAccountInfo_Request::clear_return_access_token() {
  return_access_token_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CAccountLinking_GetLinkedAccountInfo_Request::_internal_return_access_token() const {
  return return_access_token_;
}
inline bool CAccountLinking_GetLinkedAccountInfo_Request::return_access_token() const {
  // @@protoc_insertion_point(field_get:CAccountLinking_GetLinkedAccountInfo_Request.return_access_token)
  return _internal_return_access_token();
}
inline void CAccountLinking_GetLinkedAccountInfo_Request::_internal_set_return_access_token(bool value) {
  _has_bits_[0] |= 0x00000004u;
  return_access_token_ = value;
}
inline void CAccountLinking_GetLinkedAccountInfo_Request::set_return_access_token(bool value) {
  _internal_set_return_access_token(value);
  // @@protoc_insertion_point(field_set:CAccountLinking_GetLinkedAccountInfo_Request.return_access_token)
}

// -------------------------------------------------------------------

// CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response

// optional .EExternalAccountType external_type = 1 [default = k_EExternalNone];
inline bool CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::_internal_has_external_type() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::has_external_type() const {
  return _internal_has_external_type();
}
inline void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::clear_external_type() {
  external_type_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::EExternalAccountType CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::_internal_external_type() const {
  return static_cast< ::EExternalAccountType >(external_type_);
}
inline ::EExternalAccountType CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::external_type() const {
  // @@protoc_insertion_point(field_get:CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.external_type)
  return _internal_external_type();
}
inline void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::_internal_set_external_type(::EExternalAccountType value) {
  assert(::EExternalAccountType_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  external_type_ = value;
}
inline void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::set_external_type(::EExternalAccountType value) {
  _internal_set_external_type(value);
  // @@protoc_insertion_point(field_set:CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.external_type)
}

// optional string external_id = 2 [(.description) = "unique external account identifier"];
inline bool CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::_internal_has_external_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::has_external_id() const {
  return _internal_has_external_id();
}
inline void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::clear_external_id() {
  external_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::external_id() const {
  // @@protoc_insertion_point(field_get:CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.external_id)
  return _internal_external_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::set_external_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 external_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.external_id)
}
inline std::string* CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::mutable_external_id() {
  std::string* _s = _internal_mutable_external_id();
  // @@protoc_insertion_point(field_mutable:CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.external_id)
  return _s;
}
inline const std::string& CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::_internal_external_id() const {
  return external_id_.Get();
}
inline void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::_internal_set_external_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  external_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::_internal_mutable_external_id() {
  _has_bits_[0] |= 0x00000001u;
  return external_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::release_external_id() {
  // @@protoc_insertion_point(field_release:CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.external_id)
  if (!_internal_has_external_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = external_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (external_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    external_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::set_allocated_external_id(std::string* external_id) {
  if (external_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  external_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), external_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (external_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    external_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.external_id)
}

// optional string external_user_name = 3 [(.description) = "user readable; best effort"];
inline bool CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::_internal_has_external_user_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::has_external_user_name() const {
  return _internal_has_external_user_name();
}
inline void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::clear_external_user_name() {
  external_user_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::external_user_name() const {
  // @@protoc_insertion_point(field_get:CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.external_user_name)
  return _internal_external_user_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::set_external_user_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 external_user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.external_user_name)
}
inline std::string* CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::mutable_external_user_name() {
  std::string* _s = _internal_mutable_external_user_name();
  // @@protoc_insertion_point(field_mutable:CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.external_user_name)
  return _s;
}
inline const std::string& CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::_internal_external_user_name() const {
  return external_user_name_.Get();
}
inline void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::_internal_set_external_user_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  external_user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::_internal_mutable_external_user_name() {
  _has_bits_[0] |= 0x00000002u;
  return external_user_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::release_external_user_name() {
  // @@protoc_insertion_point(field_release:CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.external_user_name)
  if (!_internal_has_external_user_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = external_user_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (external_user_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    external_user_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::set_allocated_external_user_name(std::string* external_user_name) {
  if (external_user_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  external_user_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), external_user_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (external_user_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    external_user_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.external_user_name)
}

// optional string external_url = 4 [(.description) = "required for all, can be a sentinal to verify correctness"];
inline bool CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::_internal_has_external_url() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::has_external_url() const {
  return _internal_has_external_url();
}
inline void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::clear_external_url() {
  external_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::external_url() const {
  // @@protoc_insertion_point(field_get:CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.external_url)
  return _internal_external_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::set_external_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 external_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.external_url)
}
inline std::string* CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::mutable_external_url() {
  std::string* _s = _internal_mutable_external_url();
  // @@protoc_insertion_point(field_mutable:CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.external_url)
  return _s;
}
inline const std::string& CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::_internal_external_url() const {
  return external_url_.Get();
}
inline void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::_internal_set_external_url(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  external_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::_internal_mutable_external_url() {
  _has_bits_[0] |= 0x00000004u;
  return external_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::release_external_url() {
  // @@protoc_insertion_point(field_release:CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.external_url)
  if (!_internal_has_external_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = external_url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (external_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    external_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::set_allocated_external_url(std::string* external_url) {
  if (external_url != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  external_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), external_url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (external_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    external_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.external_url)
}

// optional string access_token = 5 [(.description) = "provided if requeest and it was valid."];
inline bool CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::_internal_has_access_token() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::has_access_token() const {
  return _internal_has_access_token();
}
inline void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::clear_access_token() {
  access_token_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::access_token() const {
  // @@protoc_insertion_point(field_get:CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.access_token)
  return _internal_access_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::set_access_token(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 access_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.access_token)
}
inline std::string* CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::mutable_access_token() {
  std::string* _s = _internal_mutable_access_token();
  // @@protoc_insertion_point(field_mutable:CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.access_token)
  return _s;
}
inline const std::string& CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::_internal_access_token() const {
  return access_token_.Get();
}
inline void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::_internal_set_access_token(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  access_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::_internal_mutable_access_token() {
  _has_bits_[0] |= 0x00000008u;
  return access_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::release_access_token() {
  // @@protoc_insertion_point(field_release:CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.access_token)
  if (!_internal_has_access_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = access_token_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (access_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    access_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::set_allocated_access_token(std::string* access_token) {
  if (access_token != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  access_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), access_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (access_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    access_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.access_token)
}

// optional string access_token_secret = 6 [(.description) = "required for OAuth v1 and signing the message, provided with access token."];
inline bool CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::_internal_has_access_token_secret() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::has_access_token_secret() const {
  return _internal_has_access_token_secret();
}
inline void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::clear_access_token_secret() {
  access_token_secret_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::access_token_secret() const {
  // @@protoc_insertion_point(field_get:CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.access_token_secret)
  return _internal_access_token_secret();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::set_access_token_secret(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 access_token_secret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.access_token_secret)
}
inline std::string* CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::mutable_access_token_secret() {
  std::string* _s = _internal_mutable_access_token_secret();
  // @@protoc_insertion_point(field_mutable:CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.access_token_secret)
  return _s;
}
inline const std::string& CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::_internal_access_token_secret() const {
  return access_token_secret_.Get();
}
inline void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::_internal_set_access_token_secret(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  access_token_secret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::_internal_mutable_access_token_secret() {
  _has_bits_[0] |= 0x00000010u;
  return access_token_secret_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::release_access_token_secret() {
  // @@protoc_insertion_point(field_release:CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.access_token_secret)
  if (!_internal_has_access_token_secret()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  auto* p = access_token_secret_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (access_token_secret_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    access_token_secret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::set_allocated_access_token_secret(std::string* access_token_secret) {
  if (access_token_secret != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  access_token_secret_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), access_token_secret,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (access_token_secret_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    access_token_secret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.access_token_secret)
}

// optional bool is_valid = 7 [(.description) = "If false, it means access token no longer work (expired, disconnected) and the link is now broken. Inform user to refresh."];
inline bool CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::_internal_has_is_valid() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::has_is_valid() const {
  return _internal_has_is_valid();
}
inline void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::clear_is_valid() {
  is_valid_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::_internal_is_valid() const {
  return is_valid_;
}
inline bool CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::is_valid() const {
  // @@protoc_insertion_point(field_get:CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.is_valid)
  return _internal_is_valid();
}
inline void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::_internal_set_is_valid(bool value) {
  _has_bits_[0] |= 0x00000040u;
  is_valid_ = value;
}
inline void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::set_is_valid(bool value) {
  _internal_set_is_valid(value);
  // @@protoc_insertion_point(field_set:CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.is_valid)
}

// -------------------------------------------------------------------

// CAccountLinking_GetLinkedAccountInfo_Response

// repeated .CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response external_accounts = 1;
inline int CAccountLinking_GetLinkedAccountInfo_Response::_internal_external_accounts_size() const {
  return external_accounts_.size();
}
inline int CAccountLinking_GetLinkedAccountInfo_Response::external_accounts_size() const {
  return _internal_external_accounts_size();
}
inline void CAccountLinking_GetLinkedAccountInfo_Response::clear_external_accounts() {
  external_accounts_.Clear();
}
inline ::CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response* CAccountLinking_GetLinkedAccountInfo_Response::mutable_external_accounts(int index) {
  // @@protoc_insertion_point(field_mutable:CAccountLinking_GetLinkedAccountInfo_Response.external_accounts)
  return external_accounts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response >*
CAccountLinking_GetLinkedAccountInfo_Response::mutable_external_accounts() {
  // @@protoc_insertion_point(field_mutable_list:CAccountLinking_GetLinkedAccountInfo_Response.external_accounts)
  return &external_accounts_;
}
inline const ::CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response& CAccountLinking_GetLinkedAccountInfo_Response::_internal_external_accounts(int index) const {
  return external_accounts_.Get(index);
}
inline const ::CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response& CAccountLinking_GetLinkedAccountInfo_Response::external_accounts(int index) const {
  // @@protoc_insertion_point(field_get:CAccountLinking_GetLinkedAccountInfo_Response.external_accounts)
  return _internal_external_accounts(index);
}
inline ::CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response* CAccountLinking_GetLinkedAccountInfo_Response::_internal_add_external_accounts() {
  return external_accounts_.Add();
}
inline ::CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response* CAccountLinking_GetLinkedAccountInfo_Response::add_external_accounts() {
  ::CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response* _add = _internal_add_external_accounts();
  // @@protoc_insertion_point(field_add:CAccountLinking_GetLinkedAccountInfo_Response.external_accounts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response >&
CAccountLinking_GetLinkedAccountInfo_Response::external_accounts() const {
  // @@protoc_insertion_point(field_list:CAccountLinking_GetLinkedAccountInfo_Response.external_accounts)
  return external_accounts_;
}

// -------------------------------------------------------------------

// CEmbeddedClient_AuthorizeCurrentDevice_Request

// optional fixed64 steamid = 1;
inline bool CEmbeddedClient_AuthorizeCurrentDevice_Request::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CEmbeddedClient_AuthorizeCurrentDevice_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CEmbeddedClient_AuthorizeCurrentDevice_Request::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CEmbeddedClient_AuthorizeCurrentDevice_Request::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CEmbeddedClient_AuthorizeCurrentDevice_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CEmbeddedClient_AuthorizeCurrentDevice_Request.steamid)
  return _internal_steamid();
}
inline void CEmbeddedClient_AuthorizeCurrentDevice_Request::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  steamid_ = value;
}
inline void CEmbeddedClient_AuthorizeCurrentDevice_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CEmbeddedClient_AuthorizeCurrentDevice_Request.steamid)
}

// optional uint32 appid = 2;
inline bool CEmbeddedClient_AuthorizeCurrentDevice_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CEmbeddedClient_AuthorizeCurrentDevice_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CEmbeddedClient_AuthorizeCurrentDevice_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CEmbeddedClient_AuthorizeCurrentDevice_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CEmbeddedClient_AuthorizeCurrentDevice_Request::appid() const {
  // @@protoc_insertion_point(field_get:CEmbeddedClient_AuthorizeCurrentDevice_Request.appid)
  return _internal_appid();
}
inline void CEmbeddedClient_AuthorizeCurrentDevice_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  appid_ = value;
}
inline void CEmbeddedClient_AuthorizeCurrentDevice_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CEmbeddedClient_AuthorizeCurrentDevice_Request.appid)
}

// optional string device_info = 3;
inline bool CEmbeddedClient_AuthorizeCurrentDevice_Request::_internal_has_device_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CEmbeddedClient_AuthorizeCurrentDevice_Request::has_device_info() const {
  return _internal_has_device_info();
}
inline void CEmbeddedClient_AuthorizeCurrentDevice_Request::clear_device_info() {
  device_info_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CEmbeddedClient_AuthorizeCurrentDevice_Request::device_info() const {
  // @@protoc_insertion_point(field_get:CEmbeddedClient_AuthorizeCurrentDevice_Request.device_info)
  return _internal_device_info();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CEmbeddedClient_AuthorizeCurrentDevice_Request::set_device_info(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 device_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CEmbeddedClient_AuthorizeCurrentDevice_Request.device_info)
}
inline std::string* CEmbeddedClient_AuthorizeCurrentDevice_Request::mutable_device_info() {
  std::string* _s = _internal_mutable_device_info();
  // @@protoc_insertion_point(field_mutable:CEmbeddedClient_AuthorizeCurrentDevice_Request.device_info)
  return _s;
}
inline const std::string& CEmbeddedClient_AuthorizeCurrentDevice_Request::_internal_device_info() const {
  return device_info_.Get();
}
inline void CEmbeddedClient_AuthorizeCurrentDevice_Request::_internal_set_device_info(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  device_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CEmbeddedClient_AuthorizeCurrentDevice_Request::_internal_mutable_device_info() {
  _has_bits_[0] |= 0x00000001u;
  return device_info_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CEmbeddedClient_AuthorizeCurrentDevice_Request::release_device_info() {
  // @@protoc_insertion_point(field_release:CEmbeddedClient_AuthorizeCurrentDevice_Request.device_info)
  if (!_internal_has_device_info()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = device_info_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (device_info_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    device_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CEmbeddedClient_AuthorizeCurrentDevice_Request::set_allocated_device_info(std::string* device_info) {
  if (device_info != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  device_info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_info,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (device_info_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    device_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CEmbeddedClient_AuthorizeCurrentDevice_Request.device_info)
}

// optional uint32 deviceid = 4;
inline bool CEmbeddedClient_AuthorizeCurrentDevice_Request::_internal_has_deviceid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CEmbeddedClient_AuthorizeCurrentDevice_Request::has_deviceid() const {
  return _internal_has_deviceid();
}
inline void CEmbeddedClient_AuthorizeCurrentDevice_Request::clear_deviceid() {
  deviceid_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CEmbeddedClient_AuthorizeCurrentDevice_Request::_internal_deviceid() const {
  return deviceid_;
}
inline uint32_t CEmbeddedClient_AuthorizeCurrentDevice_Request::deviceid() const {
  // @@protoc_insertion_point(field_get:CEmbeddedClient_AuthorizeCurrentDevice_Request.deviceid)
  return _internal_deviceid();
}
inline void CEmbeddedClient_AuthorizeCurrentDevice_Request::_internal_set_deviceid(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  deviceid_ = value;
}
inline void CEmbeddedClient_AuthorizeCurrentDevice_Request::set_deviceid(uint32_t value) {
  _internal_set_deviceid(value);
  // @@protoc_insertion_point(field_set:CEmbeddedClient_AuthorizeCurrentDevice_Request.deviceid)
}

// -------------------------------------------------------------------

// CEmbeddedClient_Token

// optional fixed64 steamid = 1;
inline bool CEmbeddedClient_Token::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CEmbeddedClient_Token::has_steamid() const {
  return _internal_has_steamid();
}
inline void CEmbeddedClient_Token::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CEmbeddedClient_Token::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CEmbeddedClient_Token::steamid() const {
  // @@protoc_insertion_point(field_get:CEmbeddedClient_Token.steamid)
  return _internal_steamid();
}
inline void CEmbeddedClient_Token::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  steamid_ = value;
}
inline void CEmbeddedClient_Token::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CEmbeddedClient_Token.steamid)
}

// optional bytes client_token = 2;
inline bool CEmbeddedClient_Token::_internal_has_client_token() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CEmbeddedClient_Token::has_client_token() const {
  return _internal_has_client_token();
}
inline void CEmbeddedClient_Token::clear_client_token() {
  client_token_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CEmbeddedClient_Token::client_token() const {
  // @@protoc_insertion_point(field_get:CEmbeddedClient_Token.client_token)
  return _internal_client_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CEmbeddedClient_Token::set_client_token(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 client_token_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CEmbeddedClient_Token.client_token)
}
inline std::string* CEmbeddedClient_Token::mutable_client_token() {
  std::string* _s = _internal_mutable_client_token();
  // @@protoc_insertion_point(field_mutable:CEmbeddedClient_Token.client_token)
  return _s;
}
inline const std::string& CEmbeddedClient_Token::_internal_client_token() const {
  return client_token_.Get();
}
inline void CEmbeddedClient_Token::_internal_set_client_token(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  client_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CEmbeddedClient_Token::_internal_mutable_client_token() {
  _has_bits_[0] |= 0x00000001u;
  return client_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CEmbeddedClient_Token::release_client_token() {
  // @@protoc_insertion_point(field_release:CEmbeddedClient_Token.client_token)
  if (!_internal_has_client_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = client_token_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (client_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    client_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CEmbeddedClient_Token::set_allocated_client_token(std::string* client_token) {
  if (client_token != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  client_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (client_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    client_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CEmbeddedClient_Token.client_token)
}

// optional uint32 expiry = 3;
inline bool CEmbeddedClient_Token::_internal_has_expiry() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CEmbeddedClient_Token::has_expiry() const {
  return _internal_has_expiry();
}
inline void CEmbeddedClient_Token::clear_expiry() {
  expiry_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CEmbeddedClient_Token::_internal_expiry() const {
  return expiry_;
}
inline uint32_t CEmbeddedClient_Token::expiry() const {
  // @@protoc_insertion_point(field_get:CEmbeddedClient_Token.expiry)
  return _internal_expiry();
}
inline void CEmbeddedClient_Token::_internal_set_expiry(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  expiry_ = value;
}
inline void CEmbeddedClient_Token::set_expiry(uint32_t value) {
  _internal_set_expiry(value);
  // @@protoc_insertion_point(field_set:CEmbeddedClient_Token.expiry)
}

// optional uint32 deviceid = 4;
inline bool CEmbeddedClient_Token::_internal_has_deviceid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CEmbeddedClient_Token::has_deviceid() const {
  return _internal_has_deviceid();
}
inline void CEmbeddedClient_Token::clear_deviceid() {
  deviceid_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CEmbeddedClient_Token::_internal_deviceid() const {
  return deviceid_;
}
inline uint32_t CEmbeddedClient_Token::deviceid() const {
  // @@protoc_insertion_point(field_get:CEmbeddedClient_Token.deviceid)
  return _internal_deviceid();
}
inline void CEmbeddedClient_Token::_internal_set_deviceid(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  deviceid_ = value;
}
inline void CEmbeddedClient_Token::set_deviceid(uint32_t value) {
  _internal_set_deviceid(value);
  // @@protoc_insertion_point(field_set:CEmbeddedClient_Token.deviceid)
}

// -------------------------------------------------------------------

// CEmbeddedClient_AuthorizeDevice_Response

// optional uint32 result = 1;
inline bool CEmbeddedClient_AuthorizeDevice_Response::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CEmbeddedClient_AuthorizeDevice_Response::has_result() const {
  return _internal_has_result();
}
inline void CEmbeddedClient_AuthorizeDevice_Response::clear_result() {
  result_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CEmbeddedClient_AuthorizeDevice_Response::_internal_result() const {
  return result_;
}
inline uint32_t CEmbeddedClient_AuthorizeDevice_Response::result() const {
  // @@protoc_insertion_point(field_get:CEmbeddedClient_AuthorizeDevice_Response.result)
  return _internal_result();
}
inline void CEmbeddedClient_AuthorizeDevice_Response::_internal_set_result(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  result_ = value;
}
inline void CEmbeddedClient_AuthorizeDevice_Response::set_result(uint32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:CEmbeddedClient_AuthorizeDevice_Response.result)
}

// optional .CEmbeddedClient_Token token = 2;
inline bool CEmbeddedClient_AuthorizeDevice_Response::_internal_has_token() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || token_ != nullptr);
  return value;
}
inline bool CEmbeddedClient_AuthorizeDevice_Response::has_token() const {
  return _internal_has_token();
}
inline void CEmbeddedClient_AuthorizeDevice_Response::clear_token() {
  if (token_ != nullptr) token_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CEmbeddedClient_Token& CEmbeddedClient_AuthorizeDevice_Response::_internal_token() const {
  const ::CEmbeddedClient_Token* p = token_;
  return p != nullptr ? *p : reinterpret_cast<const ::CEmbeddedClient_Token&>(
      ::_CEmbeddedClient_Token_default_instance_);
}
inline const ::CEmbeddedClient_Token& CEmbeddedClient_AuthorizeDevice_Response::token() const {
  // @@protoc_insertion_point(field_get:CEmbeddedClient_AuthorizeDevice_Response.token)
  return _internal_token();
}
inline void CEmbeddedClient_AuthorizeDevice_Response::unsafe_arena_set_allocated_token(
    ::CEmbeddedClient_Token* token) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(token_);
  }
  token_ = token;
  if (token) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CEmbeddedClient_AuthorizeDevice_Response.token)
}
inline ::CEmbeddedClient_Token* CEmbeddedClient_AuthorizeDevice_Response::release_token() {
  _has_bits_[0] &= ~0x00000001u;
  ::CEmbeddedClient_Token* temp = token_;
  token_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CEmbeddedClient_Token* CEmbeddedClient_AuthorizeDevice_Response::unsafe_arena_release_token() {
  // @@protoc_insertion_point(field_release:CEmbeddedClient_AuthorizeDevice_Response.token)
  _has_bits_[0] &= ~0x00000001u;
  ::CEmbeddedClient_Token* temp = token_;
  token_ = nullptr;
  return temp;
}
inline ::CEmbeddedClient_Token* CEmbeddedClient_AuthorizeDevice_Response::_internal_mutable_token() {
  _has_bits_[0] |= 0x00000001u;
  if (token_ == nullptr) {
    auto* p = CreateMaybeMessage<::CEmbeddedClient_Token>(GetArenaForAllocation());
    token_ = p;
  }
  return token_;
}
inline ::CEmbeddedClient_Token* CEmbeddedClient_AuthorizeDevice_Response::mutable_token() {
  ::CEmbeddedClient_Token* _msg = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:CEmbeddedClient_AuthorizeDevice_Response.token)
  return _msg;
}
inline void CEmbeddedClient_AuthorizeDevice_Response::set_allocated_token(::CEmbeddedClient_Token* token) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete token_;
  }
  if (token) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CEmbeddedClient_Token>::GetOwningArena(token);
    if (message_arena != submessage_arena) {
      token = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, token, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  token_ = token;
  // @@protoc_insertion_point(field_set_allocated:CEmbeddedClient_AuthorizeDevice_Response.token)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::EInternalAccountType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EInternalAccountType>() {
  return ::EInternalAccountType_descriptor();
}
template <> struct is_proto_enum< ::EExternalAccountType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EExternalAccountType>() {
  return ::EExternalAccountType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_steammessages_5fuseraccount_2esteamclient_2eproto
