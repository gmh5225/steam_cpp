// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: offline_ticket.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_offline_5fticket_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_offline_5fticket_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_offline_5fticket_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_offline_5fticket_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_offline_5fticket_2eproto;
class Offline_Ticket;
struct Offline_TicketDefaultTypeInternal;
extern Offline_TicketDefaultTypeInternal _Offline_Ticket_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Offline_Ticket* Arena::CreateMaybeMessage<::Offline_Ticket>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Offline_Ticket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Offline_Ticket) */ {
 public:
  inline Offline_Ticket() : Offline_Ticket(nullptr) {}
  ~Offline_Ticket() override;
  explicit constexpr Offline_Ticket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Offline_Ticket(const Offline_Ticket& from);
  Offline_Ticket(Offline_Ticket&& from) noexcept
    : Offline_Ticket() {
    *this = ::std::move(from);
  }

  inline Offline_Ticket& operator=(const Offline_Ticket& from) {
    CopyFrom(from);
    return *this;
  }
  inline Offline_Ticket& operator=(Offline_Ticket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Offline_Ticket& default_instance() {
    return *internal_default_instance();
  }
  static inline const Offline_Ticket* internal_default_instance() {
    return reinterpret_cast<const Offline_Ticket*>(
               &_Offline_Ticket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Offline_Ticket& a, Offline_Ticket& b) {
    a.Swap(&b);
  }
  inline void Swap(Offline_Ticket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Offline_Ticket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Offline_Ticket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Offline_Ticket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Offline_Ticket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Offline_Ticket& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Offline_Ticket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Offline_Ticket";
  }
  protected:
  explicit Offline_Ticket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncryptedTicketFieldNumber = 1,
    kSignatureFieldNumber = 2,
    kSalt1FieldNumber = 4,
    kSalt2FieldNumber = 6,
    kKdf1FieldNumber = 3,
    kKdf2FieldNumber = 5,
  };
  // optional bytes encrypted_ticket = 1;
  bool has_encrypted_ticket() const;
  private:
  bool _internal_has_encrypted_ticket() const;
  public:
  void clear_encrypted_ticket();
  const std::string& encrypted_ticket() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_encrypted_ticket(ArgT0&& arg0, ArgT... args);
  std::string* mutable_encrypted_ticket();
  PROTOBUF_NODISCARD std::string* release_encrypted_ticket();
  void set_allocated_encrypted_ticket(std::string* encrypted_ticket);
  private:
  const std::string& _internal_encrypted_ticket() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encrypted_ticket(const std::string& value);
  std::string* _internal_mutable_encrypted_ticket();
  public:

  // optional bytes signature = 2;
  bool has_signature() const;
  private:
  bool _internal_has_signature() const;
  public:
  void clear_signature();
  const std::string& signature() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_signature(ArgT0&& arg0, ArgT... args);
  std::string* mutable_signature();
  PROTOBUF_NODISCARD std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // optional bytes salt1 = 4;
  bool has_salt1() const;
  private:
  bool _internal_has_salt1() const;
  public:
  void clear_salt1();
  const std::string& salt1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_salt1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_salt1();
  PROTOBUF_NODISCARD std::string* release_salt1();
  void set_allocated_salt1(std::string* salt1);
  private:
  const std::string& _internal_salt1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_salt1(const std::string& value);
  std::string* _internal_mutable_salt1();
  public:

  // optional bytes salt2 = 6;
  bool has_salt2() const;
  private:
  bool _internal_has_salt2() const;
  public:
  void clear_salt2();
  const std::string& salt2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_salt2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_salt2();
  PROTOBUF_NODISCARD std::string* release_salt2();
  void set_allocated_salt2(std::string* salt2);
  private:
  const std::string& _internal_salt2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_salt2(const std::string& value);
  std::string* _internal_mutable_salt2();
  public:

  // optional int32 kdf1 = 3;
  bool has_kdf1() const;
  private:
  bool _internal_has_kdf1() const;
  public:
  void clear_kdf1();
  int32_t kdf1() const;
  void set_kdf1(int32_t value);
  private:
  int32_t _internal_kdf1() const;
  void _internal_set_kdf1(int32_t value);
  public:

  // optional int32 kdf2 = 5;
  bool has_kdf2() const;
  private:
  bool _internal_has_kdf2() const;
  public:
  void clear_kdf2();
  int32_t kdf2() const;
  void set_kdf2(int32_t value);
  private:
  int32_t _internal_kdf2() const;
  void _internal_set_kdf2(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Offline_Ticket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encrypted_ticket_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr salt1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr salt2_;
  int32_t kdf1_;
  int32_t kdf2_;
  friend struct ::TableStruct_offline_5fticket_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Offline_Ticket

// optional bytes encrypted_ticket = 1;
inline bool Offline_Ticket::_internal_has_encrypted_ticket() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Offline_Ticket::has_encrypted_ticket() const {
  return _internal_has_encrypted_ticket();
}
inline void Offline_Ticket::clear_encrypted_ticket() {
  encrypted_ticket_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Offline_Ticket::encrypted_ticket() const {
  // @@protoc_insertion_point(field_get:Offline_Ticket.encrypted_ticket)
  return _internal_encrypted_ticket();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Offline_Ticket::set_encrypted_ticket(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 encrypted_ticket_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Offline_Ticket.encrypted_ticket)
}
inline std::string* Offline_Ticket::mutable_encrypted_ticket() {
  std::string* _s = _internal_mutable_encrypted_ticket();
  // @@protoc_insertion_point(field_mutable:Offline_Ticket.encrypted_ticket)
  return _s;
}
inline const std::string& Offline_Ticket::_internal_encrypted_ticket() const {
  return encrypted_ticket_.Get();
}
inline void Offline_Ticket::_internal_set_encrypted_ticket(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  encrypted_ticket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Offline_Ticket::_internal_mutable_encrypted_ticket() {
  _has_bits_[0] |= 0x00000001u;
  return encrypted_ticket_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Offline_Ticket::release_encrypted_ticket() {
  // @@protoc_insertion_point(field_release:Offline_Ticket.encrypted_ticket)
  if (!_internal_has_encrypted_ticket()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = encrypted_ticket_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (encrypted_ticket_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    encrypted_ticket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Offline_Ticket::set_allocated_encrypted_ticket(std::string* encrypted_ticket) {
  if (encrypted_ticket != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  encrypted_ticket_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encrypted_ticket,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (encrypted_ticket_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    encrypted_ticket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Offline_Ticket.encrypted_ticket)
}

// optional bytes signature = 2;
inline bool Offline_Ticket::_internal_has_signature() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Offline_Ticket::has_signature() const {
  return _internal_has_signature();
}
inline void Offline_Ticket::clear_signature() {
  signature_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Offline_Ticket::signature() const {
  // @@protoc_insertion_point(field_get:Offline_Ticket.signature)
  return _internal_signature();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Offline_Ticket::set_signature(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 signature_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Offline_Ticket.signature)
}
inline std::string* Offline_Ticket::mutable_signature() {
  std::string* _s = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:Offline_Ticket.signature)
  return _s;
}
inline const std::string& Offline_Ticket::_internal_signature() const {
  return signature_.Get();
}
inline void Offline_Ticket::_internal_set_signature(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Offline_Ticket::_internal_mutable_signature() {
  _has_bits_[0] |= 0x00000002u;
  return signature_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Offline_Ticket::release_signature() {
  // @@protoc_insertion_point(field_release:Offline_Ticket.signature)
  if (!_internal_has_signature()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = signature_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (signature_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Offline_Ticket::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  signature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (signature_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Offline_Ticket.signature)
}

// optional int32 kdf1 = 3;
inline bool Offline_Ticket::_internal_has_kdf1() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Offline_Ticket::has_kdf1() const {
  return _internal_has_kdf1();
}
inline void Offline_Ticket::clear_kdf1() {
  kdf1_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline int32_t Offline_Ticket::_internal_kdf1() const {
  return kdf1_;
}
inline int32_t Offline_Ticket::kdf1() const {
  // @@protoc_insertion_point(field_get:Offline_Ticket.kdf1)
  return _internal_kdf1();
}
inline void Offline_Ticket::_internal_set_kdf1(int32_t value) {
  _has_bits_[0] |= 0x00000010u;
  kdf1_ = value;
}
inline void Offline_Ticket::set_kdf1(int32_t value) {
  _internal_set_kdf1(value);
  // @@protoc_insertion_point(field_set:Offline_Ticket.kdf1)
}

// optional bytes salt1 = 4;
inline bool Offline_Ticket::_internal_has_salt1() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Offline_Ticket::has_salt1() const {
  return _internal_has_salt1();
}
inline void Offline_Ticket::clear_salt1() {
  salt1_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Offline_Ticket::salt1() const {
  // @@protoc_insertion_point(field_get:Offline_Ticket.salt1)
  return _internal_salt1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Offline_Ticket::set_salt1(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 salt1_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Offline_Ticket.salt1)
}
inline std::string* Offline_Ticket::mutable_salt1() {
  std::string* _s = _internal_mutable_salt1();
  // @@protoc_insertion_point(field_mutable:Offline_Ticket.salt1)
  return _s;
}
inline const std::string& Offline_Ticket::_internal_salt1() const {
  return salt1_.Get();
}
inline void Offline_Ticket::_internal_set_salt1(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  salt1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Offline_Ticket::_internal_mutable_salt1() {
  _has_bits_[0] |= 0x00000004u;
  return salt1_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Offline_Ticket::release_salt1() {
  // @@protoc_insertion_point(field_release:Offline_Ticket.salt1)
  if (!_internal_has_salt1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = salt1_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (salt1_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    salt1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Offline_Ticket::set_allocated_salt1(std::string* salt1) {
  if (salt1 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  salt1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), salt1,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (salt1_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    salt1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Offline_Ticket.salt1)
}

// optional int32 kdf2 = 5;
inline bool Offline_Ticket::_internal_has_kdf2() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Offline_Ticket::has_kdf2() const {
  return _internal_has_kdf2();
}
inline void Offline_Ticket::clear_kdf2() {
  kdf2_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline int32_t Offline_Ticket::_internal_kdf2() const {
  return kdf2_;
}
inline int32_t Offline_Ticket::kdf2() const {
  // @@protoc_insertion_point(field_get:Offline_Ticket.kdf2)
  return _internal_kdf2();
}
inline void Offline_Ticket::_internal_set_kdf2(int32_t value) {
  _has_bits_[0] |= 0x00000020u;
  kdf2_ = value;
}
inline void Offline_Ticket::set_kdf2(int32_t value) {
  _internal_set_kdf2(value);
  // @@protoc_insertion_point(field_set:Offline_Ticket.kdf2)
}

// optional bytes salt2 = 6;
inline bool Offline_Ticket::_internal_has_salt2() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Offline_Ticket::has_salt2() const {
  return _internal_has_salt2();
}
inline void Offline_Ticket::clear_salt2() {
  salt2_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Offline_Ticket::salt2() const {
  // @@protoc_insertion_point(field_get:Offline_Ticket.salt2)
  return _internal_salt2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Offline_Ticket::set_salt2(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 salt2_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Offline_Ticket.salt2)
}
inline std::string* Offline_Ticket::mutable_salt2() {
  std::string* _s = _internal_mutable_salt2();
  // @@protoc_insertion_point(field_mutable:Offline_Ticket.salt2)
  return _s;
}
inline const std::string& Offline_Ticket::_internal_salt2() const {
  return salt2_.Get();
}
inline void Offline_Ticket::_internal_set_salt2(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  salt2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Offline_Ticket::_internal_mutable_salt2() {
  _has_bits_[0] |= 0x00000008u;
  return salt2_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Offline_Ticket::release_salt2() {
  // @@protoc_insertion_point(field_release:Offline_Ticket.salt2)
  if (!_internal_has_salt2()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = salt2_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (salt2_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    salt2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Offline_Ticket::set_allocated_salt2(std::string* salt2) {
  if (salt2 != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  salt2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), salt2,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (salt2_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    salt2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Offline_Ticket.salt2)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_offline_5fticket_2eproto
