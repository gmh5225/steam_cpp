// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_inventory.steamclient.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_steammessages_5finventory_2esteamclient_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_steammessages_5finventory_2esteamclient_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "steammessages_base.pb.h"
#include "steammessages_unified_base.steamclient.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_5finventory_2esteamclient_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_5finventory_2esteamclient_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[23]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5finventory_2esteamclient_2eproto;
class CInventoryClient_NewItems_Notification;
struct CInventoryClient_NewItems_NotificationDefaultTypeInternal;
extern CInventoryClient_NewItems_NotificationDefaultTypeInternal _CInventoryClient_NewItems_Notification_default_instance_;
class CInventory_AddItem_Request;
struct CInventory_AddItem_RequestDefaultTypeInternal;
extern CInventory_AddItem_RequestDefaultTypeInternal _CInventory_AddItem_Request_default_instance_;
class CInventory_CombineItemStacks_Request;
struct CInventory_CombineItemStacks_RequestDefaultTypeInternal;
extern CInventory_CombineItemStacks_RequestDefaultTypeInternal _CInventory_CombineItemStacks_Request_default_instance_;
class CInventory_ConsumeItem_Request;
struct CInventory_ConsumeItem_RequestDefaultTypeInternal;
extern CInventory_ConsumeItem_RequestDefaultTypeInternal _CInventory_ConsumeItem_Request_default_instance_;
class CInventory_ConsumePlaytime_Request;
struct CInventory_ConsumePlaytime_RequestDefaultTypeInternal;
extern CInventory_ConsumePlaytime_RequestDefaultTypeInternal _CInventory_ConsumePlaytime_Request_default_instance_;
class CInventory_DevSetNextDrop_Request;
struct CInventory_DevSetNextDrop_RequestDefaultTypeInternal;
extern CInventory_DevSetNextDrop_RequestDefaultTypeInternal _CInventory_DevSetNextDrop_Request_default_instance_;
class CInventory_ExchangeItem_Request;
struct CInventory_ExchangeItem_RequestDefaultTypeInternal;
extern CInventory_ExchangeItem_RequestDefaultTypeInternal _CInventory_ExchangeItem_Request_default_instance_;
class CInventory_GetEligiblePromoItemDefIDs_Request;
struct CInventory_GetEligiblePromoItemDefIDs_RequestDefaultTypeInternal;
extern CInventory_GetEligiblePromoItemDefIDs_RequestDefaultTypeInternal _CInventory_GetEligiblePromoItemDefIDs_Request_default_instance_;
class CInventory_GetEligiblePromoItemDefIDs_Response;
struct CInventory_GetEligiblePromoItemDefIDs_ResponseDefaultTypeInternal;
extern CInventory_GetEligiblePromoItemDefIDs_ResponseDefaultTypeInternal _CInventory_GetEligiblePromoItemDefIDs_Response_default_instance_;
class CInventory_GetInventory_Request;
struct CInventory_GetInventory_RequestDefaultTypeInternal;
extern CInventory_GetInventory_RequestDefaultTypeInternal _CInventory_GetInventory_Request_default_instance_;
class CInventory_GetItemDefMeta_Request;
struct CInventory_GetItemDefMeta_RequestDefaultTypeInternal;
extern CInventory_GetItemDefMeta_RequestDefaultTypeInternal _CInventory_GetItemDefMeta_Request_default_instance_;
class CInventory_GetItemDefMeta_Response;
struct CInventory_GetItemDefMeta_ResponseDefaultTypeInternal;
extern CInventory_GetItemDefMeta_ResponseDefaultTypeInternal _CInventory_GetItemDefMeta_Response_default_instance_;
class CInventory_GetUserPurchaseInfo_Request;
struct CInventory_GetUserPurchaseInfo_RequestDefaultTypeInternal;
extern CInventory_GetUserPurchaseInfo_RequestDefaultTypeInternal _CInventory_GetUserPurchaseInfo_Request_default_instance_;
class CInventory_GetUserPurchaseInfo_Response;
struct CInventory_GetUserPurchaseInfo_ResponseDefaultTypeInternal;
extern CInventory_GetUserPurchaseInfo_ResponseDefaultTypeInternal _CInventory_GetUserPurchaseInfo_Response_default_instance_;
class CInventory_InspectItem_Request;
struct CInventory_InspectItem_RequestDefaultTypeInternal;
extern CInventory_InspectItem_RequestDefaultTypeInternal _CInventory_InspectItem_Request_default_instance_;
class CInventory_ModifyItems_Request;
struct CInventory_ModifyItems_RequestDefaultTypeInternal;
extern CInventory_ModifyItems_RequestDefaultTypeInternal _CInventory_ModifyItems_Request_default_instance_;
class CInventory_ModifyItems_Request_ItemPropertyUpdate;
struct CInventory_ModifyItems_Request_ItemPropertyUpdateDefaultTypeInternal;
extern CInventory_ModifyItems_Request_ItemPropertyUpdateDefaultTypeInternal _CInventory_ModifyItems_Request_ItemPropertyUpdate_default_instance_;
class CInventory_PurchaseFinalize_Request;
struct CInventory_PurchaseFinalize_RequestDefaultTypeInternal;
extern CInventory_PurchaseFinalize_RequestDefaultTypeInternal _CInventory_PurchaseFinalize_Request_default_instance_;
class CInventory_PurchaseInit_Request;
struct CInventory_PurchaseInit_RequestDefaultTypeInternal;
extern CInventory_PurchaseInit_RequestDefaultTypeInternal _CInventory_PurchaseInit_Request_default_instance_;
class CInventory_PurchaseInit_Request_LineItem;
struct CInventory_PurchaseInit_Request_LineItemDefaultTypeInternal;
extern CInventory_PurchaseInit_Request_LineItemDefaultTypeInternal _CInventory_PurchaseInit_Request_LineItem_default_instance_;
class CInventory_PurchaseInit_Response;
struct CInventory_PurchaseInit_ResponseDefaultTypeInternal;
extern CInventory_PurchaseInit_ResponseDefaultTypeInternal _CInventory_PurchaseInit_Response_default_instance_;
class CInventory_Response;
struct CInventory_ResponseDefaultTypeInternal;
extern CInventory_ResponseDefaultTypeInternal _CInventory_Response_default_instance_;
class CInventory_SplitItemStack_Request;
struct CInventory_SplitItemStack_RequestDefaultTypeInternal;
extern CInventory_SplitItemStack_RequestDefaultTypeInternal _CInventory_SplitItemStack_Request_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CInventoryClient_NewItems_Notification* Arena::CreateMaybeMessage<::CInventoryClient_NewItems_Notification>(Arena*);
template<> ::CInventory_AddItem_Request* Arena::CreateMaybeMessage<::CInventory_AddItem_Request>(Arena*);
template<> ::CInventory_CombineItemStacks_Request* Arena::CreateMaybeMessage<::CInventory_CombineItemStacks_Request>(Arena*);
template<> ::CInventory_ConsumeItem_Request* Arena::CreateMaybeMessage<::CInventory_ConsumeItem_Request>(Arena*);
template<> ::CInventory_ConsumePlaytime_Request* Arena::CreateMaybeMessage<::CInventory_ConsumePlaytime_Request>(Arena*);
template<> ::CInventory_DevSetNextDrop_Request* Arena::CreateMaybeMessage<::CInventory_DevSetNextDrop_Request>(Arena*);
template<> ::CInventory_ExchangeItem_Request* Arena::CreateMaybeMessage<::CInventory_ExchangeItem_Request>(Arena*);
template<> ::CInventory_GetEligiblePromoItemDefIDs_Request* Arena::CreateMaybeMessage<::CInventory_GetEligiblePromoItemDefIDs_Request>(Arena*);
template<> ::CInventory_GetEligiblePromoItemDefIDs_Response* Arena::CreateMaybeMessage<::CInventory_GetEligiblePromoItemDefIDs_Response>(Arena*);
template<> ::CInventory_GetInventory_Request* Arena::CreateMaybeMessage<::CInventory_GetInventory_Request>(Arena*);
template<> ::CInventory_GetItemDefMeta_Request* Arena::CreateMaybeMessage<::CInventory_GetItemDefMeta_Request>(Arena*);
template<> ::CInventory_GetItemDefMeta_Response* Arena::CreateMaybeMessage<::CInventory_GetItemDefMeta_Response>(Arena*);
template<> ::CInventory_GetUserPurchaseInfo_Request* Arena::CreateMaybeMessage<::CInventory_GetUserPurchaseInfo_Request>(Arena*);
template<> ::CInventory_GetUserPurchaseInfo_Response* Arena::CreateMaybeMessage<::CInventory_GetUserPurchaseInfo_Response>(Arena*);
template<> ::CInventory_InspectItem_Request* Arena::CreateMaybeMessage<::CInventory_InspectItem_Request>(Arena*);
template<> ::CInventory_ModifyItems_Request* Arena::CreateMaybeMessage<::CInventory_ModifyItems_Request>(Arena*);
template<> ::CInventory_ModifyItems_Request_ItemPropertyUpdate* Arena::CreateMaybeMessage<::CInventory_ModifyItems_Request_ItemPropertyUpdate>(Arena*);
template<> ::CInventory_PurchaseFinalize_Request* Arena::CreateMaybeMessage<::CInventory_PurchaseFinalize_Request>(Arena*);
template<> ::CInventory_PurchaseInit_Request* Arena::CreateMaybeMessage<::CInventory_PurchaseInit_Request>(Arena*);
template<> ::CInventory_PurchaseInit_Request_LineItem* Arena::CreateMaybeMessage<::CInventory_PurchaseInit_Request_LineItem>(Arena*);
template<> ::CInventory_PurchaseInit_Response* Arena::CreateMaybeMessage<::CInventory_PurchaseInit_Response>(Arena*);
template<> ::CInventory_Response* Arena::CreateMaybeMessage<::CInventory_Response>(Arena*);
template<> ::CInventory_SplitItemStack_Request* Arena::CreateMaybeMessage<::CInventory_SplitItemStack_Request>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class CInventory_GetInventory_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CInventory_GetInventory_Request) */ {
 public:
  inline CInventory_GetInventory_Request() : CInventory_GetInventory_Request(nullptr) {}
  ~CInventory_GetInventory_Request() override;
  explicit constexpr CInventory_GetInventory_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CInventory_GetInventory_Request(const CInventory_GetInventory_Request& from);
  CInventory_GetInventory_Request(CInventory_GetInventory_Request&& from) noexcept
    : CInventory_GetInventory_Request() {
    *this = ::std::move(from);
  }

  inline CInventory_GetInventory_Request& operator=(const CInventory_GetInventory_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CInventory_GetInventory_Request& operator=(CInventory_GetInventory_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CInventory_GetInventory_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CInventory_GetInventory_Request* internal_default_instance() {
    return reinterpret_cast<const CInventory_GetInventory_Request*>(
               &_CInventory_GetInventory_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CInventory_GetInventory_Request& a, CInventory_GetInventory_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CInventory_GetInventory_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CInventory_GetInventory_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CInventory_GetInventory_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CInventory_GetInventory_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CInventory_GetInventory_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CInventory_GetInventory_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CInventory_GetInventory_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CInventory_GetInventory_Request";
  }
  protected:
  explicit CInventory_GetInventory_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidFieldNumber = 2,
    kAppidFieldNumber = 1,
  };
  // optional uint64 steamid = 2;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CInventory_GetInventory_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t steamid_;
  uint32_t appid_;
  friend struct ::TableStruct_steammessages_5finventory_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CInventory_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CInventory_Response) */ {
 public:
  inline CInventory_Response() : CInventory_Response(nullptr) {}
  ~CInventory_Response() override;
  explicit constexpr CInventory_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CInventory_Response(const CInventory_Response& from);
  CInventory_Response(CInventory_Response&& from) noexcept
    : CInventory_Response() {
    *this = ::std::move(from);
  }

  inline CInventory_Response& operator=(const CInventory_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CInventory_Response& operator=(CInventory_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CInventory_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CInventory_Response* internal_default_instance() {
    return reinterpret_cast<const CInventory_Response*>(
               &_CInventory_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CInventory_Response& a, CInventory_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CInventory_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CInventory_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CInventory_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CInventory_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CInventory_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CInventory_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CInventory_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CInventory_Response";
  }
  protected:
  explicit CInventory_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRemoveditemidsFieldNumber = 2,
    kEtagFieldNumber = 1,
    kItemJsonFieldNumber = 3,
    kItemdefJsonFieldNumber = 4,
    kTicketFieldNumber = 5,
    kReplayedFieldNumber = 6,
  };
  // repeated uint64 removeditemids = 2;
  int removeditemids_size() const;
  private:
  int _internal_removeditemids_size() const;
  public:
  void clear_removeditemids();
  private:
  uint64_t _internal_removeditemids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_removeditemids() const;
  void _internal_add_removeditemids(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_removeditemids();
  public:
  uint64_t removeditemids(int index) const;
  void set_removeditemids(int index, uint64_t value);
  void add_removeditemids(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      removeditemids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_removeditemids();

  // optional string etag = 1;
  bool has_etag() const;
  private:
  bool _internal_has_etag() const;
  public:
  void clear_etag();
  const std::string& etag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_etag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_etag();
  PROTOBUF_NODISCARD std::string* release_etag();
  void set_allocated_etag(std::string* etag);
  private:
  const std::string& _internal_etag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_etag(const std::string& value);
  std::string* _internal_mutable_etag();
  public:

  // optional string item_json = 3;
  bool has_item_json() const;
  private:
  bool _internal_has_item_json() const;
  public:
  void clear_item_json();
  const std::string& item_json() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_item_json(ArgT0&& arg0, ArgT... args);
  std::string* mutable_item_json();
  PROTOBUF_NODISCARD std::string* release_item_json();
  void set_allocated_item_json(std::string* item_json);
  private:
  const std::string& _internal_item_json() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_item_json(const std::string& value);
  std::string* _internal_mutable_item_json();
  public:

  // optional string itemdef_json = 4;
  bool has_itemdef_json() const;
  private:
  bool _internal_has_itemdef_json() const;
  public:
  void clear_itemdef_json();
  const std::string& itemdef_json() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_itemdef_json(ArgT0&& arg0, ArgT... args);
  std::string* mutable_itemdef_json();
  PROTOBUF_NODISCARD std::string* release_itemdef_json();
  void set_allocated_itemdef_json(std::string* itemdef_json);
  private:
  const std::string& _internal_itemdef_json() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_itemdef_json(const std::string& value);
  std::string* _internal_mutable_itemdef_json();
  public:

  // optional bytes ticket = 5;
  bool has_ticket() const;
  private:
  bool _internal_has_ticket() const;
  public:
  void clear_ticket();
  const std::string& ticket() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ticket(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ticket();
  PROTOBUF_NODISCARD std::string* release_ticket();
  void set_allocated_ticket(std::string* ticket);
  private:
  const std::string& _internal_ticket() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ticket(const std::string& value);
  std::string* _internal_mutable_ticket();
  public:

  // optional bool replayed = 6 [(.description) = "If true, the requestid given was processed earlier."];
  bool has_replayed() const;
  private:
  bool _internal_has_replayed() const;
  public:
  void clear_replayed();
  bool replayed() const;
  void set_replayed(bool value);
  private:
  bool _internal_replayed() const;
  void _internal_set_replayed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CInventory_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > removeditemids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr etag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr item_json_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr itemdef_json_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ticket_;
  bool replayed_;
  friend struct ::TableStruct_steammessages_5finventory_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CInventory_ExchangeItem_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CInventory_ExchangeItem_Request) */ {
 public:
  inline CInventory_ExchangeItem_Request() : CInventory_ExchangeItem_Request(nullptr) {}
  ~CInventory_ExchangeItem_Request() override;
  explicit constexpr CInventory_ExchangeItem_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CInventory_ExchangeItem_Request(const CInventory_ExchangeItem_Request& from);
  CInventory_ExchangeItem_Request(CInventory_ExchangeItem_Request&& from) noexcept
    : CInventory_ExchangeItem_Request() {
    *this = ::std::move(from);
  }

  inline CInventory_ExchangeItem_Request& operator=(const CInventory_ExchangeItem_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CInventory_ExchangeItem_Request& operator=(CInventory_ExchangeItem_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CInventory_ExchangeItem_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CInventory_ExchangeItem_Request* internal_default_instance() {
    return reinterpret_cast<const CInventory_ExchangeItem_Request*>(
               &_CInventory_ExchangeItem_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CInventory_ExchangeItem_Request& a, CInventory_ExchangeItem_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CInventory_ExchangeItem_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CInventory_ExchangeItem_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CInventory_ExchangeItem_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CInventory_ExchangeItem_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CInventory_ExchangeItem_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CInventory_ExchangeItem_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CInventory_ExchangeItem_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CInventory_ExchangeItem_Request";
  }
  protected:
  explicit CInventory_ExchangeItem_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaterialsitemidFieldNumber = 3,
    kMaterialsquantityFieldNumber = 4,
    kSteamidFieldNumber = 2,
    kOutputitemdefidFieldNumber = 5,
    kAppidFieldNumber = 1,
  };
  // repeated uint64 materialsitemid = 3;
  int materialsitemid_size() const;
  private:
  int _internal_materialsitemid_size() const;
  public:
  void clear_materialsitemid();
  private:
  uint64_t _internal_materialsitemid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_materialsitemid() const;
  void _internal_add_materialsitemid(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_materialsitemid();
  public:
  uint64_t materialsitemid(int index) const;
  void set_materialsitemid(int index, uint64_t value);
  void add_materialsitemid(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      materialsitemid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_materialsitemid();

  // repeated uint32 materialsquantity = 4;
  int materialsquantity_size() const;
  private:
  int _internal_materialsquantity_size() const;
  public:
  void clear_materialsquantity();
  private:
  uint32_t _internal_materialsquantity(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_materialsquantity() const;
  void _internal_add_materialsquantity(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_materialsquantity();
  public:
  uint32_t materialsquantity(int index) const;
  void set_materialsquantity(int index, uint32_t value);
  void add_materialsquantity(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      materialsquantity() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_materialsquantity();

  // optional uint64 steamid = 2;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional uint64 outputitemdefid = 5;
  bool has_outputitemdefid() const;
  private:
  bool _internal_has_outputitemdefid() const;
  public:
  void clear_outputitemdefid();
  uint64_t outputitemdefid() const;
  void set_outputitemdefid(uint64_t value);
  private:
  uint64_t _internal_outputitemdefid() const;
  void _internal_set_outputitemdefid(uint64_t value);
  public:

  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CInventory_ExchangeItem_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > materialsitemid_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > materialsquantity_;
  uint64_t steamid_;
  uint64_t outputitemdefid_;
  uint32_t appid_;
  friend struct ::TableStruct_steammessages_5finventory_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CInventory_GetEligiblePromoItemDefIDs_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CInventory_GetEligiblePromoItemDefIDs_Request) */ {
 public:
  inline CInventory_GetEligiblePromoItemDefIDs_Request() : CInventory_GetEligiblePromoItemDefIDs_Request(nullptr) {}
  ~CInventory_GetEligiblePromoItemDefIDs_Request() override;
  explicit constexpr CInventory_GetEligiblePromoItemDefIDs_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CInventory_GetEligiblePromoItemDefIDs_Request(const CInventory_GetEligiblePromoItemDefIDs_Request& from);
  CInventory_GetEligiblePromoItemDefIDs_Request(CInventory_GetEligiblePromoItemDefIDs_Request&& from) noexcept
    : CInventory_GetEligiblePromoItemDefIDs_Request() {
    *this = ::std::move(from);
  }

  inline CInventory_GetEligiblePromoItemDefIDs_Request& operator=(const CInventory_GetEligiblePromoItemDefIDs_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CInventory_GetEligiblePromoItemDefIDs_Request& operator=(CInventory_GetEligiblePromoItemDefIDs_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CInventory_GetEligiblePromoItemDefIDs_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CInventory_GetEligiblePromoItemDefIDs_Request* internal_default_instance() {
    return reinterpret_cast<const CInventory_GetEligiblePromoItemDefIDs_Request*>(
               &_CInventory_GetEligiblePromoItemDefIDs_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CInventory_GetEligiblePromoItemDefIDs_Request& a, CInventory_GetEligiblePromoItemDefIDs_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CInventory_GetEligiblePromoItemDefIDs_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CInventory_GetEligiblePromoItemDefIDs_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CInventory_GetEligiblePromoItemDefIDs_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CInventory_GetEligiblePromoItemDefIDs_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CInventory_GetEligiblePromoItemDefIDs_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CInventory_GetEligiblePromoItemDefIDs_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CInventory_GetEligiblePromoItemDefIDs_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CInventory_GetEligiblePromoItemDefIDs_Request";
  }
  protected:
  explicit CInventory_GetEligiblePromoItemDefIDs_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidFieldNumber = 2,
    kAppidFieldNumber = 1,
  };
  // optional uint64 steamid = 2;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CInventory_GetEligiblePromoItemDefIDs_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t steamid_;
  uint32_t appid_;
  friend struct ::TableStruct_steammessages_5finventory_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CInventory_GetEligiblePromoItemDefIDs_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CInventory_GetEligiblePromoItemDefIDs_Response) */ {
 public:
  inline CInventory_GetEligiblePromoItemDefIDs_Response() : CInventory_GetEligiblePromoItemDefIDs_Response(nullptr) {}
  ~CInventory_GetEligiblePromoItemDefIDs_Response() override;
  explicit constexpr CInventory_GetEligiblePromoItemDefIDs_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CInventory_GetEligiblePromoItemDefIDs_Response(const CInventory_GetEligiblePromoItemDefIDs_Response& from);
  CInventory_GetEligiblePromoItemDefIDs_Response(CInventory_GetEligiblePromoItemDefIDs_Response&& from) noexcept
    : CInventory_GetEligiblePromoItemDefIDs_Response() {
    *this = ::std::move(from);
  }

  inline CInventory_GetEligiblePromoItemDefIDs_Response& operator=(const CInventory_GetEligiblePromoItemDefIDs_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CInventory_GetEligiblePromoItemDefIDs_Response& operator=(CInventory_GetEligiblePromoItemDefIDs_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CInventory_GetEligiblePromoItemDefIDs_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CInventory_GetEligiblePromoItemDefIDs_Response* internal_default_instance() {
    return reinterpret_cast<const CInventory_GetEligiblePromoItemDefIDs_Response*>(
               &_CInventory_GetEligiblePromoItemDefIDs_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CInventory_GetEligiblePromoItemDefIDs_Response& a, CInventory_GetEligiblePromoItemDefIDs_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CInventory_GetEligiblePromoItemDefIDs_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CInventory_GetEligiblePromoItemDefIDs_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CInventory_GetEligiblePromoItemDefIDs_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CInventory_GetEligiblePromoItemDefIDs_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CInventory_GetEligiblePromoItemDefIDs_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CInventory_GetEligiblePromoItemDefIDs_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CInventory_GetEligiblePromoItemDefIDs_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CInventory_GetEligiblePromoItemDefIDs_Response";
  }
  protected:
  explicit CInventory_GetEligiblePromoItemDefIDs_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemdefidsFieldNumber = 1,
  };
  // repeated uint64 itemdefids = 1;
  int itemdefids_size() const;
  private:
  int _internal_itemdefids_size() const;
  public:
  void clear_itemdefids();
  private:
  uint64_t _internal_itemdefids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_itemdefids() const;
  void _internal_add_itemdefids(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_itemdefids();
  public:
  uint64_t itemdefids(int index) const;
  void set_itemdefids(int index, uint64_t value);
  void add_itemdefids(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      itemdefids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_itemdefids();

  // @@protoc_insertion_point(class_scope:CInventory_GetEligiblePromoItemDefIDs_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > itemdefids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5finventory_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CInventory_AddItem_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CInventory_AddItem_Request) */ {
 public:
  inline CInventory_AddItem_Request() : CInventory_AddItem_Request(nullptr) {}
  ~CInventory_AddItem_Request() override;
  explicit constexpr CInventory_AddItem_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CInventory_AddItem_Request(const CInventory_AddItem_Request& from);
  CInventory_AddItem_Request(CInventory_AddItem_Request&& from) noexcept
    : CInventory_AddItem_Request() {
    *this = ::std::move(from);
  }

  inline CInventory_AddItem_Request& operator=(const CInventory_AddItem_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CInventory_AddItem_Request& operator=(CInventory_AddItem_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CInventory_AddItem_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CInventory_AddItem_Request* internal_default_instance() {
    return reinterpret_cast<const CInventory_AddItem_Request*>(
               &_CInventory_AddItem_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CInventory_AddItem_Request& a, CInventory_AddItem_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CInventory_AddItem_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CInventory_AddItem_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CInventory_AddItem_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CInventory_AddItem_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CInventory_AddItem_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CInventory_AddItem_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CInventory_AddItem_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CInventory_AddItem_Request";
  }
  protected:
  explicit CInventory_AddItem_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemdefidFieldNumber = 2,
    kItempropsjsonFieldNumber = 3,
    kSteamidFieldNumber = 4,
    kAppidFieldNumber = 1,
    kNotifyFieldNumber = 5,
    kTradeRestrictionFieldNumber = 7,
    kIsPurchaseFieldNumber = 8,
    kRequestidFieldNumber = 6,
  };
  // repeated uint64 itemdefid = 2;
  int itemdefid_size() const;
  private:
  int _internal_itemdefid_size() const;
  public:
  void clear_itemdefid();
  private:
  uint64_t _internal_itemdefid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_itemdefid() const;
  void _internal_add_itemdefid(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_itemdefid();
  public:
  uint64_t itemdefid(int index) const;
  void set_itemdefid(int index, uint64_t value);
  void add_itemdefid(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      itemdefid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_itemdefid();

  // repeated string itempropsjson = 3;
  int itempropsjson_size() const;
  private:
  int _internal_itempropsjson_size() const;
  public:
  void clear_itempropsjson();
  const std::string& itempropsjson(int index) const;
  std::string* mutable_itempropsjson(int index);
  void set_itempropsjson(int index, const std::string& value);
  void set_itempropsjson(int index, std::string&& value);
  void set_itempropsjson(int index, const char* value);
  void set_itempropsjson(int index, const char* value, size_t size);
  std::string* add_itempropsjson();
  void add_itempropsjson(const std::string& value);
  void add_itempropsjson(std::string&& value);
  void add_itempropsjson(const char* value);
  void add_itempropsjson(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& itempropsjson() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_itempropsjson();
  private:
  const std::string& _internal_itempropsjson(int index) const;
  std::string* _internal_add_itempropsjson();
  public:

  // optional uint64 steamid = 4;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional bool notify = 5 [(.description) = "Should notify the user that the item was added to their Steam Inventory."];
  bool has_notify() const;
  private:
  bool _internal_has_notify() const;
  public:
  void clear_notify();
  bool notify() const;
  void set_notify(bool value);
  private:
  bool _internal_notify() const;
  void _internal_set_notify(bool value);
  public:

  // optional bool trade_restriction = 7 [(.description) = "If true, apply the default trade and market restriction times to this item."];
  bool has_trade_restriction() const;
  private:
  bool _internal_has_trade_restriction() const;
  public:
  void clear_trade_restriction();
  bool trade_restriction() const;
  void set_trade_restriction(bool value);
  private:
  bool _internal_trade_restriction() const;
  void _internal_set_trade_restriction(bool value);
  public:

  // optional bool is_purchase = 8 [default = false, (.description) = "If set, treat requestid as a txnid and create this item as a result of user microtransaction purchase."];
  bool has_is_purchase() const;
  private:
  bool _internal_has_is_purchase() const;
  public:
  void clear_is_purchase();
  bool is_purchase() const;
  void set_is_purchase(bool value);
  private:
  bool _internal_is_purchase() const;
  void _internal_set_is_purchase(bool value);
  public:

  // optional uint64 requestid = 6;
  bool has_requestid() const;
  private:
  bool _internal_has_requestid() const;
  public:
  void clear_requestid();
  uint64_t requestid() const;
  void set_requestid(uint64_t value);
  private:
  uint64_t _internal_requestid() const;
  void _internal_set_requestid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CInventory_AddItem_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > itemdefid_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> itempropsjson_;
  uint64_t steamid_;
  uint32_t appid_;
  bool notify_;
  bool trade_restriction_;
  bool is_purchase_;
  uint64_t requestid_;
  friend struct ::TableStruct_steammessages_5finventory_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CInventory_ModifyItems_Request_ItemPropertyUpdate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CInventory_ModifyItems_Request.ItemPropertyUpdate) */ {
 public:
  inline CInventory_ModifyItems_Request_ItemPropertyUpdate() : CInventory_ModifyItems_Request_ItemPropertyUpdate(nullptr) {}
  ~CInventory_ModifyItems_Request_ItemPropertyUpdate() override;
  explicit constexpr CInventory_ModifyItems_Request_ItemPropertyUpdate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CInventory_ModifyItems_Request_ItemPropertyUpdate(const CInventory_ModifyItems_Request_ItemPropertyUpdate& from);
  CInventory_ModifyItems_Request_ItemPropertyUpdate(CInventory_ModifyItems_Request_ItemPropertyUpdate&& from) noexcept
    : CInventory_ModifyItems_Request_ItemPropertyUpdate() {
    *this = ::std::move(from);
  }

  inline CInventory_ModifyItems_Request_ItemPropertyUpdate& operator=(const CInventory_ModifyItems_Request_ItemPropertyUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline CInventory_ModifyItems_Request_ItemPropertyUpdate& operator=(CInventory_ModifyItems_Request_ItemPropertyUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CInventory_ModifyItems_Request_ItemPropertyUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const CInventory_ModifyItems_Request_ItemPropertyUpdate* internal_default_instance() {
    return reinterpret_cast<const CInventory_ModifyItems_Request_ItemPropertyUpdate*>(
               &_CInventory_ModifyItems_Request_ItemPropertyUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CInventory_ModifyItems_Request_ItemPropertyUpdate& a, CInventory_ModifyItems_Request_ItemPropertyUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(CInventory_ModifyItems_Request_ItemPropertyUpdate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CInventory_ModifyItems_Request_ItemPropertyUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CInventory_ModifyItems_Request_ItemPropertyUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CInventory_ModifyItems_Request_ItemPropertyUpdate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CInventory_ModifyItems_Request_ItemPropertyUpdate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CInventory_ModifyItems_Request_ItemPropertyUpdate& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CInventory_ModifyItems_Request_ItemPropertyUpdate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CInventory_ModifyItems_Request.ItemPropertyUpdate";
  }
  protected:
  explicit CInventory_ModifyItems_Request_ItemPropertyUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertyNameFieldNumber = 3,
    kPropertyValueStringFieldNumber = 6,
    kItemidFieldNumber = 1,
    kRemovePropertyFieldNumber = 2,
    kPropertyValueBoolFieldNumber = 4,
    kPropertyValueFloatFieldNumber = 7,
    kPropertyValueIntFieldNumber = 5,
  };
  // optional string property_name = 3;
  bool has_property_name() const;
  private:
  bool _internal_has_property_name() const;
  public:
  void clear_property_name();
  const std::string& property_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_property_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_property_name();
  PROTOBUF_NODISCARD std::string* release_property_name();
  void set_allocated_property_name(std::string* property_name);
  private:
  const std::string& _internal_property_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_property_name(const std::string& value);
  std::string* _internal_mutable_property_name();
  public:

  // optional string property_value_string = 6;
  bool has_property_value_string() const;
  private:
  bool _internal_has_property_value_string() const;
  public:
  void clear_property_value_string();
  const std::string& property_value_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_property_value_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_property_value_string();
  PROTOBUF_NODISCARD std::string* release_property_value_string();
  void set_allocated_property_value_string(std::string* property_value_string);
  private:
  const std::string& _internal_property_value_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_property_value_string(const std::string& value);
  std::string* _internal_mutable_property_value_string();
  public:

  // optional uint64 itemid = 1;
  bool has_itemid() const;
  private:
  bool _internal_has_itemid() const;
  public:
  void clear_itemid();
  uint64_t itemid() const;
  void set_itemid(uint64_t value);
  private:
  uint64_t _internal_itemid() const;
  void _internal_set_itemid(uint64_t value);
  public:

  // optional bool remove_property = 2;
  bool has_remove_property() const;
  private:
  bool _internal_has_remove_property() const;
  public:
  void clear_remove_property();
  bool remove_property() const;
  void set_remove_property(bool value);
  private:
  bool _internal_remove_property() const;
  void _internal_set_remove_property(bool value);
  public:

  // optional bool property_value_bool = 4;
  bool has_property_value_bool() const;
  private:
  bool _internal_has_property_value_bool() const;
  public:
  void clear_property_value_bool();
  bool property_value_bool() const;
  void set_property_value_bool(bool value);
  private:
  bool _internal_property_value_bool() const;
  void _internal_set_property_value_bool(bool value);
  public:

  // optional float property_value_float = 7;
  bool has_property_value_float() const;
  private:
  bool _internal_has_property_value_float() const;
  public:
  void clear_property_value_float();
  float property_value_float() const;
  void set_property_value_float(float value);
  private:
  float _internal_property_value_float() const;
  void _internal_set_property_value_float(float value);
  public:

  // optional int64 property_value_int = 5;
  bool has_property_value_int() const;
  private:
  bool _internal_has_property_value_int() const;
  public:
  void clear_property_value_int();
  int64_t property_value_int() const;
  void set_property_value_int(int64_t value);
  private:
  int64_t _internal_property_value_int() const;
  void _internal_set_property_value_int(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CInventory_ModifyItems_Request.ItemPropertyUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr property_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr property_value_string_;
  uint64_t itemid_;
  bool remove_property_;
  bool property_value_bool_;
  float property_value_float_;
  int64_t property_value_int_;
  friend struct ::TableStruct_steammessages_5finventory_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CInventory_ModifyItems_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CInventory_ModifyItems_Request) */ {
 public:
  inline CInventory_ModifyItems_Request() : CInventory_ModifyItems_Request(nullptr) {}
  ~CInventory_ModifyItems_Request() override;
  explicit constexpr CInventory_ModifyItems_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CInventory_ModifyItems_Request(const CInventory_ModifyItems_Request& from);
  CInventory_ModifyItems_Request(CInventory_ModifyItems_Request&& from) noexcept
    : CInventory_ModifyItems_Request() {
    *this = ::std::move(from);
  }

  inline CInventory_ModifyItems_Request& operator=(const CInventory_ModifyItems_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CInventory_ModifyItems_Request& operator=(CInventory_ModifyItems_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CInventory_ModifyItems_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CInventory_ModifyItems_Request* internal_default_instance() {
    return reinterpret_cast<const CInventory_ModifyItems_Request*>(
               &_CInventory_ModifyItems_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CInventory_ModifyItems_Request& a, CInventory_ModifyItems_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CInventory_ModifyItems_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CInventory_ModifyItems_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CInventory_ModifyItems_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CInventory_ModifyItems_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CInventory_ModifyItems_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CInventory_ModifyItems_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CInventory_ModifyItems_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CInventory_ModifyItems_Request";
  }
  protected:
  explicit CInventory_ModifyItems_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CInventory_ModifyItems_Request_ItemPropertyUpdate ItemPropertyUpdate;

  // accessors -------------------------------------------------------

  enum : int {
    kUpdatesFieldNumber = 3,
    kSteamidFieldNumber = 2,
    kAppidFieldNumber = 1,
    kTimestampFieldNumber = 4,
  };
  // repeated .CInventory_ModifyItems_Request.ItemPropertyUpdate updates = 3;
  int updates_size() const;
  private:
  int _internal_updates_size() const;
  public:
  void clear_updates();
  ::CInventory_ModifyItems_Request_ItemPropertyUpdate* mutable_updates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CInventory_ModifyItems_Request_ItemPropertyUpdate >*
      mutable_updates();
  private:
  const ::CInventory_ModifyItems_Request_ItemPropertyUpdate& _internal_updates(int index) const;
  ::CInventory_ModifyItems_Request_ItemPropertyUpdate* _internal_add_updates();
  public:
  const ::CInventory_ModifyItems_Request_ItemPropertyUpdate& updates(int index) const;
  ::CInventory_ModifyItems_Request_ItemPropertyUpdate* add_updates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CInventory_ModifyItems_Request_ItemPropertyUpdate >&
      updates() const;

  // optional uint64 steamid = 2;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional uint32 timestamp = 4;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  uint32_t timestamp() const;
  void set_timestamp(uint32_t value);
  private:
  uint32_t _internal_timestamp() const;
  void _internal_set_timestamp(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CInventory_ModifyItems_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CInventory_ModifyItems_Request_ItemPropertyUpdate > updates_;
  uint64_t steamid_;
  uint32_t appid_;
  uint32_t timestamp_;
  friend struct ::TableStruct_steammessages_5finventory_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CInventory_ConsumePlaytime_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CInventory_ConsumePlaytime_Request) */ {
 public:
  inline CInventory_ConsumePlaytime_Request() : CInventory_ConsumePlaytime_Request(nullptr) {}
  ~CInventory_ConsumePlaytime_Request() override;
  explicit constexpr CInventory_ConsumePlaytime_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CInventory_ConsumePlaytime_Request(const CInventory_ConsumePlaytime_Request& from);
  CInventory_ConsumePlaytime_Request(CInventory_ConsumePlaytime_Request&& from) noexcept
    : CInventory_ConsumePlaytime_Request() {
    *this = ::std::move(from);
  }

  inline CInventory_ConsumePlaytime_Request& operator=(const CInventory_ConsumePlaytime_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CInventory_ConsumePlaytime_Request& operator=(CInventory_ConsumePlaytime_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CInventory_ConsumePlaytime_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CInventory_ConsumePlaytime_Request* internal_default_instance() {
    return reinterpret_cast<const CInventory_ConsumePlaytime_Request*>(
               &_CInventory_ConsumePlaytime_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CInventory_ConsumePlaytime_Request& a, CInventory_ConsumePlaytime_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CInventory_ConsumePlaytime_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CInventory_ConsumePlaytime_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CInventory_ConsumePlaytime_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CInventory_ConsumePlaytime_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CInventory_ConsumePlaytime_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CInventory_ConsumePlaytime_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CInventory_ConsumePlaytime_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CInventory_ConsumePlaytime_Request";
  }
  protected:
  explicit CInventory_ConsumePlaytime_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemdefidFieldNumber = 2,
    kAppidFieldNumber = 1,
  };
  // optional uint64 itemdefid = 2;
  bool has_itemdefid() const;
  private:
  bool _internal_has_itemdefid() const;
  public:
  void clear_itemdefid();
  uint64_t itemdefid() const;
  void set_itemdefid(uint64_t value);
  private:
  uint64_t _internal_itemdefid() const;
  void _internal_set_itemdefid(uint64_t value);
  public:

  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CInventory_ConsumePlaytime_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t itemdefid_;
  uint32_t appid_;
  friend struct ::TableStruct_steammessages_5finventory_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CInventory_ConsumeItem_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CInventory_ConsumeItem_Request) */ {
 public:
  inline CInventory_ConsumeItem_Request() : CInventory_ConsumeItem_Request(nullptr) {}
  ~CInventory_ConsumeItem_Request() override;
  explicit constexpr CInventory_ConsumeItem_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CInventory_ConsumeItem_Request(const CInventory_ConsumeItem_Request& from);
  CInventory_ConsumeItem_Request(CInventory_ConsumeItem_Request&& from) noexcept
    : CInventory_ConsumeItem_Request() {
    *this = ::std::move(from);
  }

  inline CInventory_ConsumeItem_Request& operator=(const CInventory_ConsumeItem_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CInventory_ConsumeItem_Request& operator=(CInventory_ConsumeItem_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CInventory_ConsumeItem_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CInventory_ConsumeItem_Request* internal_default_instance() {
    return reinterpret_cast<const CInventory_ConsumeItem_Request*>(
               &_CInventory_ConsumeItem_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CInventory_ConsumeItem_Request& a, CInventory_ConsumeItem_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CInventory_ConsumeItem_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CInventory_ConsumeItem_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CInventory_ConsumeItem_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CInventory_ConsumeItem_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CInventory_ConsumeItem_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CInventory_ConsumeItem_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CInventory_ConsumeItem_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CInventory_ConsumeItem_Request";
  }
  protected:
  explicit CInventory_ConsumeItem_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 4,
    kItemidFieldNumber = 2,
    kAppidFieldNumber = 1,
    kQuantityFieldNumber = 3,
    kSteamidFieldNumber = 5,
    kRequestidFieldNumber = 6,
  };
  // optional string timestamp = 4;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const std::string& timestamp() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_timestamp(ArgT0&& arg0, ArgT... args);
  std::string* mutable_timestamp();
  PROTOBUF_NODISCARD std::string* release_timestamp();
  void set_allocated_timestamp(std::string* timestamp);
  private:
  const std::string& _internal_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timestamp(const std::string& value);
  std::string* _internal_mutable_timestamp();
  public:

  // optional uint64 itemid = 2;
  bool has_itemid() const;
  private:
  bool _internal_has_itemid() const;
  public:
  void clear_itemid();
  uint64_t itemid() const;
  void set_itemid(uint64_t value);
  private:
  uint64_t _internal_itemid() const;
  void _internal_set_itemid(uint64_t value);
  public:

  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional uint32 quantity = 3;
  bool has_quantity() const;
  private:
  bool _internal_has_quantity() const;
  public:
  void clear_quantity();
  uint32_t quantity() const;
  void set_quantity(uint32_t value);
  private:
  uint32_t _internal_quantity() const;
  void _internal_set_quantity(uint32_t value);
  public:

  // optional uint64 steamid = 5;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional uint64 requestid = 6;
  bool has_requestid() const;
  private:
  bool _internal_has_requestid() const;
  public:
  void clear_requestid();
  uint64_t requestid() const;
  void set_requestid(uint64_t value);
  private:
  uint64_t _internal_requestid() const;
  void _internal_set_requestid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CInventory_ConsumeItem_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timestamp_;
  uint64_t itemid_;
  uint32_t appid_;
  uint32_t quantity_;
  uint64_t steamid_;
  uint64_t requestid_;
  friend struct ::TableStruct_steammessages_5finventory_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CInventory_DevSetNextDrop_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CInventory_DevSetNextDrop_Request) */ {
 public:
  inline CInventory_DevSetNextDrop_Request() : CInventory_DevSetNextDrop_Request(nullptr) {}
  ~CInventory_DevSetNextDrop_Request() override;
  explicit constexpr CInventory_DevSetNextDrop_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CInventory_DevSetNextDrop_Request(const CInventory_DevSetNextDrop_Request& from);
  CInventory_DevSetNextDrop_Request(CInventory_DevSetNextDrop_Request&& from) noexcept
    : CInventory_DevSetNextDrop_Request() {
    *this = ::std::move(from);
  }

  inline CInventory_DevSetNextDrop_Request& operator=(const CInventory_DevSetNextDrop_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CInventory_DevSetNextDrop_Request& operator=(CInventory_DevSetNextDrop_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CInventory_DevSetNextDrop_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CInventory_DevSetNextDrop_Request* internal_default_instance() {
    return reinterpret_cast<const CInventory_DevSetNextDrop_Request*>(
               &_CInventory_DevSetNextDrop_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CInventory_DevSetNextDrop_Request& a, CInventory_DevSetNextDrop_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CInventory_DevSetNextDrop_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CInventory_DevSetNextDrop_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CInventory_DevSetNextDrop_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CInventory_DevSetNextDrop_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CInventory_DevSetNextDrop_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CInventory_DevSetNextDrop_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CInventory_DevSetNextDrop_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CInventory_DevSetNextDrop_Request";
  }
  protected:
  explicit CInventory_DevSetNextDrop_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDroptimeFieldNumber = 3,
    kItemdefidFieldNumber = 2,
    kAppidFieldNumber = 1,
  };
  // optional string droptime = 3;
  bool has_droptime() const;
  private:
  bool _internal_has_droptime() const;
  public:
  void clear_droptime();
  const std::string& droptime() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_droptime(ArgT0&& arg0, ArgT... args);
  std::string* mutable_droptime();
  PROTOBUF_NODISCARD std::string* release_droptime();
  void set_allocated_droptime(std::string* droptime);
  private:
  const std::string& _internal_droptime() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_droptime(const std::string& value);
  std::string* _internal_mutable_droptime();
  public:

  // optional uint64 itemdefid = 2;
  bool has_itemdefid() const;
  private:
  bool _internal_has_itemdefid() const;
  public:
  void clear_itemdefid();
  uint64_t itemdefid() const;
  void set_itemdefid(uint64_t value);
  private:
  uint64_t _internal_itemdefid() const;
  void _internal_set_itemdefid(uint64_t value);
  public:

  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CInventory_DevSetNextDrop_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr droptime_;
  uint64_t itemdefid_;
  uint32_t appid_;
  friend struct ::TableStruct_steammessages_5finventory_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CInventory_SplitItemStack_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CInventory_SplitItemStack_Request) */ {
 public:
  inline CInventory_SplitItemStack_Request() : CInventory_SplitItemStack_Request(nullptr) {}
  ~CInventory_SplitItemStack_Request() override;
  explicit constexpr CInventory_SplitItemStack_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CInventory_SplitItemStack_Request(const CInventory_SplitItemStack_Request& from);
  CInventory_SplitItemStack_Request(CInventory_SplitItemStack_Request&& from) noexcept
    : CInventory_SplitItemStack_Request() {
    *this = ::std::move(from);
  }

  inline CInventory_SplitItemStack_Request& operator=(const CInventory_SplitItemStack_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CInventory_SplitItemStack_Request& operator=(CInventory_SplitItemStack_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CInventory_SplitItemStack_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CInventory_SplitItemStack_Request* internal_default_instance() {
    return reinterpret_cast<const CInventory_SplitItemStack_Request*>(
               &_CInventory_SplitItemStack_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CInventory_SplitItemStack_Request& a, CInventory_SplitItemStack_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CInventory_SplitItemStack_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CInventory_SplitItemStack_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CInventory_SplitItemStack_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CInventory_SplitItemStack_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CInventory_SplitItemStack_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CInventory_SplitItemStack_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CInventory_SplitItemStack_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CInventory_SplitItemStack_Request";
  }
  protected:
  explicit CInventory_SplitItemStack_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemidFieldNumber = 2,
    kAppidFieldNumber = 1,
    kQuantityFieldNumber = 3,
    kSteamidFieldNumber = 5,
  };
  // optional uint64 itemid = 2;
  bool has_itemid() const;
  private:
  bool _internal_has_itemid() const;
  public:
  void clear_itemid();
  uint64_t itemid() const;
  void set_itemid(uint64_t value);
  private:
  uint64_t _internal_itemid() const;
  void _internal_set_itemid(uint64_t value);
  public:

  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional uint32 quantity = 3;
  bool has_quantity() const;
  private:
  bool _internal_has_quantity() const;
  public:
  void clear_quantity();
  uint32_t quantity() const;
  void set_quantity(uint32_t value);
  private:
  uint32_t _internal_quantity() const;
  void _internal_set_quantity(uint32_t value);
  public:

  // optional uint64 steamid = 5;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CInventory_SplitItemStack_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t itemid_;
  uint32_t appid_;
  uint32_t quantity_;
  uint64_t steamid_;
  friend struct ::TableStruct_steammessages_5finventory_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CInventory_CombineItemStacks_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CInventory_CombineItemStacks_Request) */ {
 public:
  inline CInventory_CombineItemStacks_Request() : CInventory_CombineItemStacks_Request(nullptr) {}
  ~CInventory_CombineItemStacks_Request() override;
  explicit constexpr CInventory_CombineItemStacks_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CInventory_CombineItemStacks_Request(const CInventory_CombineItemStacks_Request& from);
  CInventory_CombineItemStacks_Request(CInventory_CombineItemStacks_Request&& from) noexcept
    : CInventory_CombineItemStacks_Request() {
    *this = ::std::move(from);
  }

  inline CInventory_CombineItemStacks_Request& operator=(const CInventory_CombineItemStacks_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CInventory_CombineItemStacks_Request& operator=(CInventory_CombineItemStacks_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CInventory_CombineItemStacks_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CInventory_CombineItemStacks_Request* internal_default_instance() {
    return reinterpret_cast<const CInventory_CombineItemStacks_Request*>(
               &_CInventory_CombineItemStacks_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CInventory_CombineItemStacks_Request& a, CInventory_CombineItemStacks_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CInventory_CombineItemStacks_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CInventory_CombineItemStacks_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CInventory_CombineItemStacks_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CInventory_CombineItemStacks_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CInventory_CombineItemStacks_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CInventory_CombineItemStacks_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CInventory_CombineItemStacks_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CInventory_CombineItemStacks_Request";
  }
  protected:
  explicit CInventory_CombineItemStacks_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromitemidFieldNumber = 2,
    kAppidFieldNumber = 1,
    kQuantityFieldNumber = 4,
    kDestitemidFieldNumber = 3,
    kSteamidFieldNumber = 7,
  };
  // optional uint64 fromitemid = 2;
  bool has_fromitemid() const;
  private:
  bool _internal_has_fromitemid() const;
  public:
  void clear_fromitemid();
  uint64_t fromitemid() const;
  void set_fromitemid(uint64_t value);
  private:
  uint64_t _internal_fromitemid() const;
  void _internal_set_fromitemid(uint64_t value);
  public:

  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional uint32 quantity = 4;
  bool has_quantity() const;
  private:
  bool _internal_has_quantity() const;
  public:
  void clear_quantity();
  uint32_t quantity() const;
  void set_quantity(uint32_t value);
  private:
  uint32_t _internal_quantity() const;
  void _internal_set_quantity(uint32_t value);
  public:

  // optional uint64 destitemid = 3;
  bool has_destitemid() const;
  private:
  bool _internal_has_destitemid() const;
  public:
  void clear_destitemid();
  uint64_t destitemid() const;
  void set_destitemid(uint64_t value);
  private:
  uint64_t _internal_destitemid() const;
  void _internal_set_destitemid(uint64_t value);
  public:

  // optional fixed64 steamid = 7;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CInventory_CombineItemStacks_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t fromitemid_;
  uint32_t appid_;
  uint32_t quantity_;
  uint64_t destitemid_;
  uint64_t steamid_;
  friend struct ::TableStruct_steammessages_5finventory_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CInventory_GetItemDefMeta_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CInventory_GetItemDefMeta_Request) */ {
 public:
  inline CInventory_GetItemDefMeta_Request() : CInventory_GetItemDefMeta_Request(nullptr) {}
  ~CInventory_GetItemDefMeta_Request() override;
  explicit constexpr CInventory_GetItemDefMeta_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CInventory_GetItemDefMeta_Request(const CInventory_GetItemDefMeta_Request& from);
  CInventory_GetItemDefMeta_Request(CInventory_GetItemDefMeta_Request&& from) noexcept
    : CInventory_GetItemDefMeta_Request() {
    *this = ::std::move(from);
  }

  inline CInventory_GetItemDefMeta_Request& operator=(const CInventory_GetItemDefMeta_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CInventory_GetItemDefMeta_Request& operator=(CInventory_GetItemDefMeta_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CInventory_GetItemDefMeta_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CInventory_GetItemDefMeta_Request* internal_default_instance() {
    return reinterpret_cast<const CInventory_GetItemDefMeta_Request*>(
               &_CInventory_GetItemDefMeta_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CInventory_GetItemDefMeta_Request& a, CInventory_GetItemDefMeta_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CInventory_GetItemDefMeta_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CInventory_GetItemDefMeta_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CInventory_GetItemDefMeta_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CInventory_GetItemDefMeta_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CInventory_GetItemDefMeta_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CInventory_GetItemDefMeta_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CInventory_GetItemDefMeta_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CInventory_GetItemDefMeta_Request";
  }
  protected:
  explicit CInventory_GetItemDefMeta_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppidFieldNumber = 1,
  };
  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CInventory_GetItemDefMeta_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t appid_;
  friend struct ::TableStruct_steammessages_5finventory_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CInventory_GetItemDefMeta_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CInventory_GetItemDefMeta_Response) */ {
 public:
  inline CInventory_GetItemDefMeta_Response() : CInventory_GetItemDefMeta_Response(nullptr) {}
  ~CInventory_GetItemDefMeta_Response() override;
  explicit constexpr CInventory_GetItemDefMeta_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CInventory_GetItemDefMeta_Response(const CInventory_GetItemDefMeta_Response& from);
  CInventory_GetItemDefMeta_Response(CInventory_GetItemDefMeta_Response&& from) noexcept
    : CInventory_GetItemDefMeta_Response() {
    *this = ::std::move(from);
  }

  inline CInventory_GetItemDefMeta_Response& operator=(const CInventory_GetItemDefMeta_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CInventory_GetItemDefMeta_Response& operator=(CInventory_GetItemDefMeta_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CInventory_GetItemDefMeta_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CInventory_GetItemDefMeta_Response* internal_default_instance() {
    return reinterpret_cast<const CInventory_GetItemDefMeta_Response*>(
               &_CInventory_GetItemDefMeta_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CInventory_GetItemDefMeta_Response& a, CInventory_GetItemDefMeta_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CInventory_GetItemDefMeta_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CInventory_GetItemDefMeta_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CInventory_GetItemDefMeta_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CInventory_GetItemDefMeta_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CInventory_GetItemDefMeta_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CInventory_GetItemDefMeta_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CInventory_GetItemDefMeta_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CInventory_GetItemDefMeta_Response";
  }
  protected:
  explicit CInventory_GetItemDefMeta_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDigestFieldNumber = 2,
    kModifiedFieldNumber = 1,
  };
  // optional string digest = 2;
  bool has_digest() const;
  private:
  bool _internal_has_digest() const;
  public:
  void clear_digest();
  const std::string& digest() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_digest(ArgT0&& arg0, ArgT... args);
  std::string* mutable_digest();
  PROTOBUF_NODISCARD std::string* release_digest();
  void set_allocated_digest(std::string* digest);
  private:
  const std::string& _internal_digest() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_digest(const std::string& value);
  std::string* _internal_mutable_digest();
  public:

  // optional uint32 modified = 1;
  bool has_modified() const;
  private:
  bool _internal_has_modified() const;
  public:
  void clear_modified();
  uint32_t modified() const;
  void set_modified(uint32_t value);
  private:
  uint32_t _internal_modified() const;
  void _internal_set_modified(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CInventory_GetItemDefMeta_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr digest_;
  uint32_t modified_;
  friend struct ::TableStruct_steammessages_5finventory_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CInventory_GetUserPurchaseInfo_Request final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CInventory_GetUserPurchaseInfo_Request) */ {
 public:
  inline CInventory_GetUserPurchaseInfo_Request() : CInventory_GetUserPurchaseInfo_Request(nullptr) {}
  explicit constexpr CInventory_GetUserPurchaseInfo_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CInventory_GetUserPurchaseInfo_Request(const CInventory_GetUserPurchaseInfo_Request& from);
  CInventory_GetUserPurchaseInfo_Request(CInventory_GetUserPurchaseInfo_Request&& from) noexcept
    : CInventory_GetUserPurchaseInfo_Request() {
    *this = ::std::move(from);
  }

  inline CInventory_GetUserPurchaseInfo_Request& operator=(const CInventory_GetUserPurchaseInfo_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CInventory_GetUserPurchaseInfo_Request& operator=(CInventory_GetUserPurchaseInfo_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CInventory_GetUserPurchaseInfo_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CInventory_GetUserPurchaseInfo_Request* internal_default_instance() {
    return reinterpret_cast<const CInventory_GetUserPurchaseInfo_Request*>(
               &_CInventory_GetUserPurchaseInfo_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CInventory_GetUserPurchaseInfo_Request& a, CInventory_GetUserPurchaseInfo_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CInventory_GetUserPurchaseInfo_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CInventory_GetUserPurchaseInfo_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CInventory_GetUserPurchaseInfo_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CInventory_GetUserPurchaseInfo_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CInventory_GetUserPurchaseInfo_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CInventory_GetUserPurchaseInfo_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CInventory_GetUserPurchaseInfo_Request";
  }
  protected:
  explicit CInventory_GetUserPurchaseInfo_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CInventory_GetUserPurchaseInfo_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5finventory_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CInventory_GetUserPurchaseInfo_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CInventory_GetUserPurchaseInfo_Response) */ {
 public:
  inline CInventory_GetUserPurchaseInfo_Response() : CInventory_GetUserPurchaseInfo_Response(nullptr) {}
  ~CInventory_GetUserPurchaseInfo_Response() override;
  explicit constexpr CInventory_GetUserPurchaseInfo_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CInventory_GetUserPurchaseInfo_Response(const CInventory_GetUserPurchaseInfo_Response& from);
  CInventory_GetUserPurchaseInfo_Response(CInventory_GetUserPurchaseInfo_Response&& from) noexcept
    : CInventory_GetUserPurchaseInfo_Response() {
    *this = ::std::move(from);
  }

  inline CInventory_GetUserPurchaseInfo_Response& operator=(const CInventory_GetUserPurchaseInfo_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CInventory_GetUserPurchaseInfo_Response& operator=(CInventory_GetUserPurchaseInfo_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CInventory_GetUserPurchaseInfo_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CInventory_GetUserPurchaseInfo_Response* internal_default_instance() {
    return reinterpret_cast<const CInventory_GetUserPurchaseInfo_Response*>(
               &_CInventory_GetUserPurchaseInfo_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CInventory_GetUserPurchaseInfo_Response& a, CInventory_GetUserPurchaseInfo_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CInventory_GetUserPurchaseInfo_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CInventory_GetUserPurchaseInfo_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CInventory_GetUserPurchaseInfo_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CInventory_GetUserPurchaseInfo_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CInventory_GetUserPurchaseInfo_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CInventory_GetUserPurchaseInfo_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CInventory_GetUserPurchaseInfo_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CInventory_GetUserPurchaseInfo_Response";
  }
  protected:
  explicit CInventory_GetUserPurchaseInfo_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEcurrencyFieldNumber = 1,
  };
  // optional int32 ecurrency = 1;
  bool has_ecurrency() const;
  private:
  bool _internal_has_ecurrency() const;
  public:
  void clear_ecurrency();
  int32_t ecurrency() const;
  void set_ecurrency(int32_t value);
  private:
  int32_t _internal_ecurrency() const;
  void _internal_set_ecurrency(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CInventory_GetUserPurchaseInfo_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t ecurrency_;
  friend struct ::TableStruct_steammessages_5finventory_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CInventory_PurchaseInit_Request_LineItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CInventory_PurchaseInit_Request.LineItem) */ {
 public:
  inline CInventory_PurchaseInit_Request_LineItem() : CInventory_PurchaseInit_Request_LineItem(nullptr) {}
  ~CInventory_PurchaseInit_Request_LineItem() override;
  explicit constexpr CInventory_PurchaseInit_Request_LineItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CInventory_PurchaseInit_Request_LineItem(const CInventory_PurchaseInit_Request_LineItem& from);
  CInventory_PurchaseInit_Request_LineItem(CInventory_PurchaseInit_Request_LineItem&& from) noexcept
    : CInventory_PurchaseInit_Request_LineItem() {
    *this = ::std::move(from);
  }

  inline CInventory_PurchaseInit_Request_LineItem& operator=(const CInventory_PurchaseInit_Request_LineItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline CInventory_PurchaseInit_Request_LineItem& operator=(CInventory_PurchaseInit_Request_LineItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CInventory_PurchaseInit_Request_LineItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const CInventory_PurchaseInit_Request_LineItem* internal_default_instance() {
    return reinterpret_cast<const CInventory_PurchaseInit_Request_LineItem*>(
               &_CInventory_PurchaseInit_Request_LineItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CInventory_PurchaseInit_Request_LineItem& a, CInventory_PurchaseInit_Request_LineItem& b) {
    a.Swap(&b);
  }
  inline void Swap(CInventory_PurchaseInit_Request_LineItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CInventory_PurchaseInit_Request_LineItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CInventory_PurchaseInit_Request_LineItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CInventory_PurchaseInit_Request_LineItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CInventory_PurchaseInit_Request_LineItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CInventory_PurchaseInit_Request_LineItem& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CInventory_PurchaseInit_Request_LineItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CInventory_PurchaseInit_Request.LineItem";
  }
  protected:
  explicit CInventory_PurchaseInit_Request_LineItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemdefidFieldNumber = 1,
    kQuantityFieldNumber = 2,
  };
  // optional uint64 itemdefid = 1;
  bool has_itemdefid() const;
  private:
  bool _internal_has_itemdefid() const;
  public:
  void clear_itemdefid();
  uint64_t itemdefid() const;
  void set_itemdefid(uint64_t value);
  private:
  uint64_t _internal_itemdefid() const;
  void _internal_set_itemdefid(uint64_t value);
  public:

  // optional uint32 quantity = 2;
  bool has_quantity() const;
  private:
  bool _internal_has_quantity() const;
  public:
  void clear_quantity();
  uint32_t quantity() const;
  void set_quantity(uint32_t value);
  private:
  uint32_t _internal_quantity() const;
  void _internal_set_quantity(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CInventory_PurchaseInit_Request.LineItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t itemdefid_;
  uint32_t quantity_;
  friend struct ::TableStruct_steammessages_5finventory_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CInventory_PurchaseInit_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CInventory_PurchaseInit_Request) */ {
 public:
  inline CInventory_PurchaseInit_Request() : CInventory_PurchaseInit_Request(nullptr) {}
  ~CInventory_PurchaseInit_Request() override;
  explicit constexpr CInventory_PurchaseInit_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CInventory_PurchaseInit_Request(const CInventory_PurchaseInit_Request& from);
  CInventory_PurchaseInit_Request(CInventory_PurchaseInit_Request&& from) noexcept
    : CInventory_PurchaseInit_Request() {
    *this = ::std::move(from);
  }

  inline CInventory_PurchaseInit_Request& operator=(const CInventory_PurchaseInit_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CInventory_PurchaseInit_Request& operator=(CInventory_PurchaseInit_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CInventory_PurchaseInit_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CInventory_PurchaseInit_Request* internal_default_instance() {
    return reinterpret_cast<const CInventory_PurchaseInit_Request*>(
               &_CInventory_PurchaseInit_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CInventory_PurchaseInit_Request& a, CInventory_PurchaseInit_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CInventory_PurchaseInit_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CInventory_PurchaseInit_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CInventory_PurchaseInit_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CInventory_PurchaseInit_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CInventory_PurchaseInit_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CInventory_PurchaseInit_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CInventory_PurchaseInit_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CInventory_PurchaseInit_Request";
  }
  protected:
  explicit CInventory_PurchaseInit_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CInventory_PurchaseInit_Request_LineItem LineItem;

  // accessors -------------------------------------------------------

  enum : int {
    kLineItemsFieldNumber = 3,
    kAppidFieldNumber = 1,
    kLanguageFieldNumber = 2,
  };
  // repeated .CInventory_PurchaseInit_Request.LineItem line_items = 3;
  int line_items_size() const;
  private:
  int _internal_line_items_size() const;
  public:
  void clear_line_items();
  ::CInventory_PurchaseInit_Request_LineItem* mutable_line_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CInventory_PurchaseInit_Request_LineItem >*
      mutable_line_items();
  private:
  const ::CInventory_PurchaseInit_Request_LineItem& _internal_line_items(int index) const;
  ::CInventory_PurchaseInit_Request_LineItem* _internal_add_line_items();
  public:
  const ::CInventory_PurchaseInit_Request_LineItem& line_items(int index) const;
  ::CInventory_PurchaseInit_Request_LineItem* add_line_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CInventory_PurchaseInit_Request_LineItem >&
      line_items() const;

  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional int32 language = 2;
  bool has_language() const;
  private:
  bool _internal_has_language() const;
  public:
  void clear_language();
  int32_t language() const;
  void set_language(int32_t value);
  private:
  int32_t _internal_language() const;
  void _internal_set_language(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CInventory_PurchaseInit_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CInventory_PurchaseInit_Request_LineItem > line_items_;
  uint32_t appid_;
  int32_t language_;
  friend struct ::TableStruct_steammessages_5finventory_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CInventory_PurchaseInit_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CInventory_PurchaseInit_Response) */ {
 public:
  inline CInventory_PurchaseInit_Response() : CInventory_PurchaseInit_Response(nullptr) {}
  ~CInventory_PurchaseInit_Response() override;
  explicit constexpr CInventory_PurchaseInit_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CInventory_PurchaseInit_Response(const CInventory_PurchaseInit_Response& from);
  CInventory_PurchaseInit_Response(CInventory_PurchaseInit_Response&& from) noexcept
    : CInventory_PurchaseInit_Response() {
    *this = ::std::move(from);
  }

  inline CInventory_PurchaseInit_Response& operator=(const CInventory_PurchaseInit_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CInventory_PurchaseInit_Response& operator=(CInventory_PurchaseInit_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CInventory_PurchaseInit_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CInventory_PurchaseInit_Response* internal_default_instance() {
    return reinterpret_cast<const CInventory_PurchaseInit_Response*>(
               &_CInventory_PurchaseInit_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CInventory_PurchaseInit_Response& a, CInventory_PurchaseInit_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CInventory_PurchaseInit_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CInventory_PurchaseInit_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CInventory_PurchaseInit_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CInventory_PurchaseInit_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CInventory_PurchaseInit_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CInventory_PurchaseInit_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CInventory_PurchaseInit_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CInventory_PurchaseInit_Response";
  }
  protected:
  explicit CInventory_PurchaseInit_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderidFieldNumber = 1,
    kTransidFieldNumber = 2,
  };
  // optional uint64 orderid = 1;
  bool has_orderid() const;
  private:
  bool _internal_has_orderid() const;
  public:
  void clear_orderid();
  uint64_t orderid() const;
  void set_orderid(uint64_t value);
  private:
  uint64_t _internal_orderid() const;
  void _internal_set_orderid(uint64_t value);
  public:

  // optional uint64 transid = 2;
  bool has_transid() const;
  private:
  bool _internal_has_transid() const;
  public:
  void clear_transid();
  uint64_t transid() const;
  void set_transid(uint64_t value);
  private:
  uint64_t _internal_transid() const;
  void _internal_set_transid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CInventory_PurchaseInit_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t orderid_;
  uint64_t transid_;
  friend struct ::TableStruct_steammessages_5finventory_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CInventory_PurchaseFinalize_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CInventory_PurchaseFinalize_Request) */ {
 public:
  inline CInventory_PurchaseFinalize_Request() : CInventory_PurchaseFinalize_Request(nullptr) {}
  ~CInventory_PurchaseFinalize_Request() override;
  explicit constexpr CInventory_PurchaseFinalize_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CInventory_PurchaseFinalize_Request(const CInventory_PurchaseFinalize_Request& from);
  CInventory_PurchaseFinalize_Request(CInventory_PurchaseFinalize_Request&& from) noexcept
    : CInventory_PurchaseFinalize_Request() {
    *this = ::std::move(from);
  }

  inline CInventory_PurchaseFinalize_Request& operator=(const CInventory_PurchaseFinalize_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CInventory_PurchaseFinalize_Request& operator=(CInventory_PurchaseFinalize_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CInventory_PurchaseFinalize_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CInventory_PurchaseFinalize_Request* internal_default_instance() {
    return reinterpret_cast<const CInventory_PurchaseFinalize_Request*>(
               &_CInventory_PurchaseFinalize_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CInventory_PurchaseFinalize_Request& a, CInventory_PurchaseFinalize_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CInventory_PurchaseFinalize_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CInventory_PurchaseFinalize_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CInventory_PurchaseFinalize_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CInventory_PurchaseFinalize_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CInventory_PurchaseFinalize_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CInventory_PurchaseFinalize_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CInventory_PurchaseFinalize_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CInventory_PurchaseFinalize_Request";
  }
  protected:
  explicit CInventory_PurchaseFinalize_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppidFieldNumber = 1,
    kLanguageFieldNumber = 2,
    kOrderidFieldNumber = 3,
  };
  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional int32 language = 2;
  bool has_language() const;
  private:
  bool _internal_has_language() const;
  public:
  void clear_language();
  int32_t language() const;
  void set_language(int32_t value);
  private:
  int32_t _internal_language() const;
  void _internal_set_language(int32_t value);
  public:

  // optional uint64 orderid = 3;
  bool has_orderid() const;
  private:
  bool _internal_has_orderid() const;
  public:
  void clear_orderid();
  uint64_t orderid() const;
  void set_orderid(uint64_t value);
  private:
  uint64_t _internal_orderid() const;
  void _internal_set_orderid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CInventory_PurchaseFinalize_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t appid_;
  int32_t language_;
  uint64_t orderid_;
  friend struct ::TableStruct_steammessages_5finventory_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CInventory_InspectItem_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CInventory_InspectItem_Request) */ {
 public:
  inline CInventory_InspectItem_Request() : CInventory_InspectItem_Request(nullptr) {}
  ~CInventory_InspectItem_Request() override;
  explicit constexpr CInventory_InspectItem_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CInventory_InspectItem_Request(const CInventory_InspectItem_Request& from);
  CInventory_InspectItem_Request(CInventory_InspectItem_Request&& from) noexcept
    : CInventory_InspectItem_Request() {
    *this = ::std::move(from);
  }

  inline CInventory_InspectItem_Request& operator=(const CInventory_InspectItem_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CInventory_InspectItem_Request& operator=(CInventory_InspectItem_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CInventory_InspectItem_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CInventory_InspectItem_Request* internal_default_instance() {
    return reinterpret_cast<const CInventory_InspectItem_Request*>(
               &_CInventory_InspectItem_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CInventory_InspectItem_Request& a, CInventory_InspectItem_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CInventory_InspectItem_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CInventory_InspectItem_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CInventory_InspectItem_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CInventory_InspectItem_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CInventory_InspectItem_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CInventory_InspectItem_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CInventory_InspectItem_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CInventory_InspectItem_Request";
  }
  protected:
  explicit CInventory_InspectItem_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 3,
    kItemdefidFieldNumber = 1,
    kItemidFieldNumber = 2,
  };
  // optional string tags = 3;
  bool has_tags() const;
  private:
  bool _internal_has_tags() const;
  public:
  void clear_tags();
  const std::string& tags() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tags(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tags();
  PROTOBUF_NODISCARD std::string* release_tags();
  void set_allocated_tags(std::string* tags);
  private:
  const std::string& _internal_tags() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tags(const std::string& value);
  std::string* _internal_mutable_tags();
  public:

  // optional uint64 itemdefid = 1;
  bool has_itemdefid() const;
  private:
  bool _internal_has_itemdefid() const;
  public:
  void clear_itemdefid();
  uint64_t itemdefid() const;
  void set_itemdefid(uint64_t value);
  private:
  uint64_t _internal_itemdefid() const;
  void _internal_set_itemdefid(uint64_t value);
  public:

  // optional fixed64 itemid = 2;
  bool has_itemid() const;
  private:
  bool _internal_has_itemid() const;
  public:
  void clear_itemid();
  uint64_t itemid() const;
  void set_itemid(uint64_t value);
  private:
  uint64_t _internal_itemid() const;
  void _internal_set_itemid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CInventory_InspectItem_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tags_;
  uint64_t itemdefid_;
  uint64_t itemid_;
  friend struct ::TableStruct_steammessages_5finventory_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CInventoryClient_NewItems_Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CInventoryClient_NewItems_Notification) */ {
 public:
  inline CInventoryClient_NewItems_Notification() : CInventoryClient_NewItems_Notification(nullptr) {}
  ~CInventoryClient_NewItems_Notification() override;
  explicit constexpr CInventoryClient_NewItems_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CInventoryClient_NewItems_Notification(const CInventoryClient_NewItems_Notification& from);
  CInventoryClient_NewItems_Notification(CInventoryClient_NewItems_Notification&& from) noexcept
    : CInventoryClient_NewItems_Notification() {
    *this = ::std::move(from);
  }

  inline CInventoryClient_NewItems_Notification& operator=(const CInventoryClient_NewItems_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CInventoryClient_NewItems_Notification& operator=(CInventoryClient_NewItems_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CInventoryClient_NewItems_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CInventoryClient_NewItems_Notification* internal_default_instance() {
    return reinterpret_cast<const CInventoryClient_NewItems_Notification*>(
               &_CInventoryClient_NewItems_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CInventoryClient_NewItems_Notification& a, CInventoryClient_NewItems_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CInventoryClient_NewItems_Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CInventoryClient_NewItems_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CInventoryClient_NewItems_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CInventoryClient_NewItems_Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CInventoryClient_NewItems_Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CInventoryClient_NewItems_Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CInventoryClient_NewItems_Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CInventoryClient_NewItems_Notification";
  }
  protected:
  explicit CInventoryClient_NewItems_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInventoryResponseFieldNumber = 2,
    kAppidFieldNumber = 1,
  };
  // optional .CInventory_Response inventory_response = 2;
  bool has_inventory_response() const;
  private:
  bool _internal_has_inventory_response() const;
  public:
  void clear_inventory_response();
  const ::CInventory_Response& inventory_response() const;
  PROTOBUF_NODISCARD ::CInventory_Response* release_inventory_response();
  ::CInventory_Response* mutable_inventory_response();
  void set_allocated_inventory_response(::CInventory_Response* inventory_response);
  private:
  const ::CInventory_Response& _internal_inventory_response() const;
  ::CInventory_Response* _internal_mutable_inventory_response();
  public:
  void unsafe_arena_set_allocated_inventory_response(
      ::CInventory_Response* inventory_response);
  ::CInventory_Response* unsafe_arena_release_inventory_response();

  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CInventoryClient_NewItems_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CInventory_Response* inventory_response_;
  uint32_t appid_;
  friend struct ::TableStruct_steammessages_5finventory_2esteamclient_2eproto;
};
// ===================================================================

class Inventory_Stub;

class Inventory : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline Inventory() {};
 public:
  virtual ~Inventory();

  typedef Inventory_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void GetInventory(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CInventory_GetInventory_Request* request,
                       ::CInventory_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void ExchangeItem(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CInventory_ExchangeItem_Request* request,
                       ::CInventory_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetEligiblePromoItemDefIDs(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CInventory_GetEligiblePromoItemDefIDs_Request* request,
                       ::CInventory_GetEligiblePromoItemDefIDs_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void AddPromoItem(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CInventory_AddItem_Request* request,
                       ::CInventory_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void SafeModifyItems(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CInventory_ModifyItems_Request* request,
                       ::CInventory_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void ConsumePlaytime(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CInventory_ConsumePlaytime_Request* request,
                       ::CInventory_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void ConsumeItem(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CInventory_ConsumeItem_Request* request,
                       ::CInventory_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void DevGenerateItem(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CInventory_AddItem_Request* request,
                       ::CInventory_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void DevSetNextDrop(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CInventory_DevSetNextDrop_Request* request,
                       ::CInventory_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void SplitItemStack(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CInventory_SplitItemStack_Request* request,
                       ::CInventory_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void CombineItemStacks(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CInventory_CombineItemStacks_Request* request,
                       ::CInventory_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetItemDefMeta(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CInventory_GetItemDefMeta_Request* request,
                       ::CInventory_GetItemDefMeta_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetUserPurchaseInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CInventory_GetUserPurchaseInfo_Request* request,
                       ::CInventory_GetUserPurchaseInfo_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void PurchaseInit(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CInventory_PurchaseInit_Request* request,
                       ::CInventory_PurchaseInit_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void PurchaseFinalize(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CInventory_PurchaseFinalize_Request* request,
                       ::CInventory_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void InspectItem(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CInventory_InspectItem_Request* request,
                       ::CInventory_Response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Inventory);
};

class Inventory_Stub : public Inventory {
 public:
  Inventory_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  Inventory_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~Inventory_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements Inventory ------------------------------------------

  void GetInventory(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CInventory_GetInventory_Request* request,
                       ::CInventory_Response* response,
                       ::google::protobuf::Closure* done);
  void ExchangeItem(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CInventory_ExchangeItem_Request* request,
                       ::CInventory_Response* response,
                       ::google::protobuf::Closure* done);
  void GetEligiblePromoItemDefIDs(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CInventory_GetEligiblePromoItemDefIDs_Request* request,
                       ::CInventory_GetEligiblePromoItemDefIDs_Response* response,
                       ::google::protobuf::Closure* done);
  void AddPromoItem(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CInventory_AddItem_Request* request,
                       ::CInventory_Response* response,
                       ::google::protobuf::Closure* done);
  void SafeModifyItems(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CInventory_ModifyItems_Request* request,
                       ::CInventory_Response* response,
                       ::google::protobuf::Closure* done);
  void ConsumePlaytime(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CInventory_ConsumePlaytime_Request* request,
                       ::CInventory_Response* response,
                       ::google::protobuf::Closure* done);
  void ConsumeItem(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CInventory_ConsumeItem_Request* request,
                       ::CInventory_Response* response,
                       ::google::protobuf::Closure* done);
  void DevGenerateItem(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CInventory_AddItem_Request* request,
                       ::CInventory_Response* response,
                       ::google::protobuf::Closure* done);
  void DevSetNextDrop(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CInventory_DevSetNextDrop_Request* request,
                       ::CInventory_Response* response,
                       ::google::protobuf::Closure* done);
  void SplitItemStack(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CInventory_SplitItemStack_Request* request,
                       ::CInventory_Response* response,
                       ::google::protobuf::Closure* done);
  void CombineItemStacks(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CInventory_CombineItemStacks_Request* request,
                       ::CInventory_Response* response,
                       ::google::protobuf::Closure* done);
  void GetItemDefMeta(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CInventory_GetItemDefMeta_Request* request,
                       ::CInventory_GetItemDefMeta_Response* response,
                       ::google::protobuf::Closure* done);
  void GetUserPurchaseInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CInventory_GetUserPurchaseInfo_Request* request,
                       ::CInventory_GetUserPurchaseInfo_Response* response,
                       ::google::protobuf::Closure* done);
  void PurchaseInit(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CInventory_PurchaseInit_Request* request,
                       ::CInventory_PurchaseInit_Response* response,
                       ::google::protobuf::Closure* done);
  void PurchaseFinalize(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CInventory_PurchaseFinalize_Request* request,
                       ::CInventory_Response* response,
                       ::google::protobuf::Closure* done);
  void InspectItem(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CInventory_InspectItem_Request* request,
                       ::CInventory_Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Inventory_Stub);
};


// -------------------------------------------------------------------

class InventoryClient_Stub;

class InventoryClient : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline InventoryClient() {};
 public:
  virtual ~InventoryClient();

  typedef InventoryClient_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void NotifyNewItems(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CInventoryClient_NewItems_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(InventoryClient);
};

class InventoryClient_Stub : public InventoryClient {
 public:
  InventoryClient_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  InventoryClient_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~InventoryClient_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements InventoryClient ------------------------------------------

  void NotifyNewItems(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CInventoryClient_NewItems_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(InventoryClient_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CInventory_GetInventory_Request

// optional uint32 appid = 1;
inline bool CInventory_GetInventory_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CInventory_GetInventory_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CInventory_GetInventory_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CInventory_GetInventory_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CInventory_GetInventory_Request::appid() const {
  // @@protoc_insertion_point(field_get:CInventory_GetInventory_Request.appid)
  return _internal_appid();
}
inline void CInventory_GetInventory_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  appid_ = value;
}
inline void CInventory_GetInventory_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CInventory_GetInventory_Request.appid)
}

// optional uint64 steamid = 2;
inline bool CInventory_GetInventory_Request::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CInventory_GetInventory_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CInventory_GetInventory_Request::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CInventory_GetInventory_Request::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CInventory_GetInventory_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CInventory_GetInventory_Request.steamid)
  return _internal_steamid();
}
inline void CInventory_GetInventory_Request::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
}
inline void CInventory_GetInventory_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CInventory_GetInventory_Request.steamid)
}

// -------------------------------------------------------------------

// CInventory_Response

// optional string etag = 1;
inline bool CInventory_Response::_internal_has_etag() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CInventory_Response::has_etag() const {
  return _internal_has_etag();
}
inline void CInventory_Response::clear_etag() {
  etag_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CInventory_Response::etag() const {
  // @@protoc_insertion_point(field_get:CInventory_Response.etag)
  return _internal_etag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CInventory_Response::set_etag(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 etag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CInventory_Response.etag)
}
inline std::string* CInventory_Response::mutable_etag() {
  std::string* _s = _internal_mutable_etag();
  // @@protoc_insertion_point(field_mutable:CInventory_Response.etag)
  return _s;
}
inline const std::string& CInventory_Response::_internal_etag() const {
  return etag_.Get();
}
inline void CInventory_Response::_internal_set_etag(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  etag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CInventory_Response::_internal_mutable_etag() {
  _has_bits_[0] |= 0x00000001u;
  return etag_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CInventory_Response::release_etag() {
  // @@protoc_insertion_point(field_release:CInventory_Response.etag)
  if (!_internal_has_etag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = etag_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (etag_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    etag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CInventory_Response::set_allocated_etag(std::string* etag) {
  if (etag != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  etag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), etag,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (etag_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    etag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CInventory_Response.etag)
}

// repeated uint64 removeditemids = 2;
inline int CInventory_Response::_internal_removeditemids_size() const {
  return removeditemids_.size();
}
inline int CInventory_Response::removeditemids_size() const {
  return _internal_removeditemids_size();
}
inline void CInventory_Response::clear_removeditemids() {
  removeditemids_.Clear();
}
inline uint64_t CInventory_Response::_internal_removeditemids(int index) const {
  return removeditemids_.Get(index);
}
inline uint64_t CInventory_Response::removeditemids(int index) const {
  // @@protoc_insertion_point(field_get:CInventory_Response.removeditemids)
  return _internal_removeditemids(index);
}
inline void CInventory_Response::set_removeditemids(int index, uint64_t value) {
  removeditemids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CInventory_Response.removeditemids)
}
inline void CInventory_Response::_internal_add_removeditemids(uint64_t value) {
  removeditemids_.Add(value);
}
inline void CInventory_Response::add_removeditemids(uint64_t value) {
  _internal_add_removeditemids(value);
  // @@protoc_insertion_point(field_add:CInventory_Response.removeditemids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CInventory_Response::_internal_removeditemids() const {
  return removeditemids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CInventory_Response::removeditemids() const {
  // @@protoc_insertion_point(field_list:CInventory_Response.removeditemids)
  return _internal_removeditemids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CInventory_Response::_internal_mutable_removeditemids() {
  return &removeditemids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CInventory_Response::mutable_removeditemids() {
  // @@protoc_insertion_point(field_mutable_list:CInventory_Response.removeditemids)
  return _internal_mutable_removeditemids();
}

// optional string item_json = 3;
inline bool CInventory_Response::_internal_has_item_json() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CInventory_Response::has_item_json() const {
  return _internal_has_item_json();
}
inline void CInventory_Response::clear_item_json() {
  item_json_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CInventory_Response::item_json() const {
  // @@protoc_insertion_point(field_get:CInventory_Response.item_json)
  return _internal_item_json();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CInventory_Response::set_item_json(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 item_json_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CInventory_Response.item_json)
}
inline std::string* CInventory_Response::mutable_item_json() {
  std::string* _s = _internal_mutable_item_json();
  // @@protoc_insertion_point(field_mutable:CInventory_Response.item_json)
  return _s;
}
inline const std::string& CInventory_Response::_internal_item_json() const {
  return item_json_.Get();
}
inline void CInventory_Response::_internal_set_item_json(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  item_json_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CInventory_Response::_internal_mutable_item_json() {
  _has_bits_[0] |= 0x00000002u;
  return item_json_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CInventory_Response::release_item_json() {
  // @@protoc_insertion_point(field_release:CInventory_Response.item_json)
  if (!_internal_has_item_json()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = item_json_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (item_json_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    item_json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CInventory_Response::set_allocated_item_json(std::string* item_json) {
  if (item_json != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  item_json_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), item_json,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (item_json_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    item_json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CInventory_Response.item_json)
}

// optional string itemdef_json = 4;
inline bool CInventory_Response::_internal_has_itemdef_json() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CInventory_Response::has_itemdef_json() const {
  return _internal_has_itemdef_json();
}
inline void CInventory_Response::clear_itemdef_json() {
  itemdef_json_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CInventory_Response::itemdef_json() const {
  // @@protoc_insertion_point(field_get:CInventory_Response.itemdef_json)
  return _internal_itemdef_json();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CInventory_Response::set_itemdef_json(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 itemdef_json_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CInventory_Response.itemdef_json)
}
inline std::string* CInventory_Response::mutable_itemdef_json() {
  std::string* _s = _internal_mutable_itemdef_json();
  // @@protoc_insertion_point(field_mutable:CInventory_Response.itemdef_json)
  return _s;
}
inline const std::string& CInventory_Response::_internal_itemdef_json() const {
  return itemdef_json_.Get();
}
inline void CInventory_Response::_internal_set_itemdef_json(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  itemdef_json_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CInventory_Response::_internal_mutable_itemdef_json() {
  _has_bits_[0] |= 0x00000004u;
  return itemdef_json_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CInventory_Response::release_itemdef_json() {
  // @@protoc_insertion_point(field_release:CInventory_Response.itemdef_json)
  if (!_internal_has_itemdef_json()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = itemdef_json_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (itemdef_json_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    itemdef_json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CInventory_Response::set_allocated_itemdef_json(std::string* itemdef_json) {
  if (itemdef_json != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  itemdef_json_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), itemdef_json,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (itemdef_json_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    itemdef_json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CInventory_Response.itemdef_json)
}

// optional bytes ticket = 5;
inline bool CInventory_Response::_internal_has_ticket() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CInventory_Response::has_ticket() const {
  return _internal_has_ticket();
}
inline void CInventory_Response::clear_ticket() {
  ticket_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CInventory_Response::ticket() const {
  // @@protoc_insertion_point(field_get:CInventory_Response.ticket)
  return _internal_ticket();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CInventory_Response::set_ticket(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 ticket_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CInventory_Response.ticket)
}
inline std::string* CInventory_Response::mutable_ticket() {
  std::string* _s = _internal_mutable_ticket();
  // @@protoc_insertion_point(field_mutable:CInventory_Response.ticket)
  return _s;
}
inline const std::string& CInventory_Response::_internal_ticket() const {
  return ticket_.Get();
}
inline void CInventory_Response::_internal_set_ticket(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  ticket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CInventory_Response::_internal_mutable_ticket() {
  _has_bits_[0] |= 0x00000008u;
  return ticket_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CInventory_Response::release_ticket() {
  // @@protoc_insertion_point(field_release:CInventory_Response.ticket)
  if (!_internal_has_ticket()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = ticket_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ticket_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ticket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CInventory_Response::set_allocated_ticket(std::string* ticket) {
  if (ticket != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  ticket_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ticket,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ticket_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ticket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CInventory_Response.ticket)
}

// optional bool replayed = 6 [(.description) = "If true, the requestid given was processed earlier."];
inline bool CInventory_Response::_internal_has_replayed() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CInventory_Response::has_replayed() const {
  return _internal_has_replayed();
}
inline void CInventory_Response::clear_replayed() {
  replayed_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CInventory_Response::_internal_replayed() const {
  return replayed_;
}
inline bool CInventory_Response::replayed() const {
  // @@protoc_insertion_point(field_get:CInventory_Response.replayed)
  return _internal_replayed();
}
inline void CInventory_Response::_internal_set_replayed(bool value) {
  _has_bits_[0] |= 0x00000010u;
  replayed_ = value;
}
inline void CInventory_Response::set_replayed(bool value) {
  _internal_set_replayed(value);
  // @@protoc_insertion_point(field_set:CInventory_Response.replayed)
}

// -------------------------------------------------------------------

// CInventory_ExchangeItem_Request

// optional uint32 appid = 1;
inline bool CInventory_ExchangeItem_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CInventory_ExchangeItem_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CInventory_ExchangeItem_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CInventory_ExchangeItem_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CInventory_ExchangeItem_Request::appid() const {
  // @@protoc_insertion_point(field_get:CInventory_ExchangeItem_Request.appid)
  return _internal_appid();
}
inline void CInventory_ExchangeItem_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  appid_ = value;
}
inline void CInventory_ExchangeItem_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CInventory_ExchangeItem_Request.appid)
}

// optional uint64 steamid = 2;
inline bool CInventory_ExchangeItem_Request::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CInventory_ExchangeItem_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CInventory_ExchangeItem_Request::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CInventory_ExchangeItem_Request::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CInventory_ExchangeItem_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CInventory_ExchangeItem_Request.steamid)
  return _internal_steamid();
}
inline void CInventory_ExchangeItem_Request::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
}
inline void CInventory_ExchangeItem_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CInventory_ExchangeItem_Request.steamid)
}

// repeated uint64 materialsitemid = 3;
inline int CInventory_ExchangeItem_Request::_internal_materialsitemid_size() const {
  return materialsitemid_.size();
}
inline int CInventory_ExchangeItem_Request::materialsitemid_size() const {
  return _internal_materialsitemid_size();
}
inline void CInventory_ExchangeItem_Request::clear_materialsitemid() {
  materialsitemid_.Clear();
}
inline uint64_t CInventory_ExchangeItem_Request::_internal_materialsitemid(int index) const {
  return materialsitemid_.Get(index);
}
inline uint64_t CInventory_ExchangeItem_Request::materialsitemid(int index) const {
  // @@protoc_insertion_point(field_get:CInventory_ExchangeItem_Request.materialsitemid)
  return _internal_materialsitemid(index);
}
inline void CInventory_ExchangeItem_Request::set_materialsitemid(int index, uint64_t value) {
  materialsitemid_.Set(index, value);
  // @@protoc_insertion_point(field_set:CInventory_ExchangeItem_Request.materialsitemid)
}
inline void CInventory_ExchangeItem_Request::_internal_add_materialsitemid(uint64_t value) {
  materialsitemid_.Add(value);
}
inline void CInventory_ExchangeItem_Request::add_materialsitemid(uint64_t value) {
  _internal_add_materialsitemid(value);
  // @@protoc_insertion_point(field_add:CInventory_ExchangeItem_Request.materialsitemid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CInventory_ExchangeItem_Request::_internal_materialsitemid() const {
  return materialsitemid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CInventory_ExchangeItem_Request::materialsitemid() const {
  // @@protoc_insertion_point(field_list:CInventory_ExchangeItem_Request.materialsitemid)
  return _internal_materialsitemid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CInventory_ExchangeItem_Request::_internal_mutable_materialsitemid() {
  return &materialsitemid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CInventory_ExchangeItem_Request::mutable_materialsitemid() {
  // @@protoc_insertion_point(field_mutable_list:CInventory_ExchangeItem_Request.materialsitemid)
  return _internal_mutable_materialsitemid();
}

// repeated uint32 materialsquantity = 4;
inline int CInventory_ExchangeItem_Request::_internal_materialsquantity_size() const {
  return materialsquantity_.size();
}
inline int CInventory_ExchangeItem_Request::materialsquantity_size() const {
  return _internal_materialsquantity_size();
}
inline void CInventory_ExchangeItem_Request::clear_materialsquantity() {
  materialsquantity_.Clear();
}
inline uint32_t CInventory_ExchangeItem_Request::_internal_materialsquantity(int index) const {
  return materialsquantity_.Get(index);
}
inline uint32_t CInventory_ExchangeItem_Request::materialsquantity(int index) const {
  // @@protoc_insertion_point(field_get:CInventory_ExchangeItem_Request.materialsquantity)
  return _internal_materialsquantity(index);
}
inline void CInventory_ExchangeItem_Request::set_materialsquantity(int index, uint32_t value) {
  materialsquantity_.Set(index, value);
  // @@protoc_insertion_point(field_set:CInventory_ExchangeItem_Request.materialsquantity)
}
inline void CInventory_ExchangeItem_Request::_internal_add_materialsquantity(uint32_t value) {
  materialsquantity_.Add(value);
}
inline void CInventory_ExchangeItem_Request::add_materialsquantity(uint32_t value) {
  _internal_add_materialsquantity(value);
  // @@protoc_insertion_point(field_add:CInventory_ExchangeItem_Request.materialsquantity)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CInventory_ExchangeItem_Request::_internal_materialsquantity() const {
  return materialsquantity_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CInventory_ExchangeItem_Request::materialsquantity() const {
  // @@protoc_insertion_point(field_list:CInventory_ExchangeItem_Request.materialsquantity)
  return _internal_materialsquantity();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CInventory_ExchangeItem_Request::_internal_mutable_materialsquantity() {
  return &materialsquantity_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CInventory_ExchangeItem_Request::mutable_materialsquantity() {
  // @@protoc_insertion_point(field_mutable_list:CInventory_ExchangeItem_Request.materialsquantity)
  return _internal_mutable_materialsquantity();
}

// optional uint64 outputitemdefid = 5;
inline bool CInventory_ExchangeItem_Request::_internal_has_outputitemdefid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CInventory_ExchangeItem_Request::has_outputitemdefid() const {
  return _internal_has_outputitemdefid();
}
inline void CInventory_ExchangeItem_Request::clear_outputitemdefid() {
  outputitemdefid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CInventory_ExchangeItem_Request::_internal_outputitemdefid() const {
  return outputitemdefid_;
}
inline uint64_t CInventory_ExchangeItem_Request::outputitemdefid() const {
  // @@protoc_insertion_point(field_get:CInventory_ExchangeItem_Request.outputitemdefid)
  return _internal_outputitemdefid();
}
inline void CInventory_ExchangeItem_Request::_internal_set_outputitemdefid(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  outputitemdefid_ = value;
}
inline void CInventory_ExchangeItem_Request::set_outputitemdefid(uint64_t value) {
  _internal_set_outputitemdefid(value);
  // @@protoc_insertion_point(field_set:CInventory_ExchangeItem_Request.outputitemdefid)
}

// -------------------------------------------------------------------

// CInventory_GetEligiblePromoItemDefIDs_Request

// optional uint32 appid = 1;
inline bool CInventory_GetEligiblePromoItemDefIDs_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CInventory_GetEligiblePromoItemDefIDs_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CInventory_GetEligiblePromoItemDefIDs_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CInventory_GetEligiblePromoItemDefIDs_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CInventory_GetEligiblePromoItemDefIDs_Request::appid() const {
  // @@protoc_insertion_point(field_get:CInventory_GetEligiblePromoItemDefIDs_Request.appid)
  return _internal_appid();
}
inline void CInventory_GetEligiblePromoItemDefIDs_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  appid_ = value;
}
inline void CInventory_GetEligiblePromoItemDefIDs_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CInventory_GetEligiblePromoItemDefIDs_Request.appid)
}

// optional uint64 steamid = 2;
inline bool CInventory_GetEligiblePromoItemDefIDs_Request::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CInventory_GetEligiblePromoItemDefIDs_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CInventory_GetEligiblePromoItemDefIDs_Request::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CInventory_GetEligiblePromoItemDefIDs_Request::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CInventory_GetEligiblePromoItemDefIDs_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CInventory_GetEligiblePromoItemDefIDs_Request.steamid)
  return _internal_steamid();
}
inline void CInventory_GetEligiblePromoItemDefIDs_Request::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
}
inline void CInventory_GetEligiblePromoItemDefIDs_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CInventory_GetEligiblePromoItemDefIDs_Request.steamid)
}

// -------------------------------------------------------------------

// CInventory_GetEligiblePromoItemDefIDs_Response

// repeated uint64 itemdefids = 1;
inline int CInventory_GetEligiblePromoItemDefIDs_Response::_internal_itemdefids_size() const {
  return itemdefids_.size();
}
inline int CInventory_GetEligiblePromoItemDefIDs_Response::itemdefids_size() const {
  return _internal_itemdefids_size();
}
inline void CInventory_GetEligiblePromoItemDefIDs_Response::clear_itemdefids() {
  itemdefids_.Clear();
}
inline uint64_t CInventory_GetEligiblePromoItemDefIDs_Response::_internal_itemdefids(int index) const {
  return itemdefids_.Get(index);
}
inline uint64_t CInventory_GetEligiblePromoItemDefIDs_Response::itemdefids(int index) const {
  // @@protoc_insertion_point(field_get:CInventory_GetEligiblePromoItemDefIDs_Response.itemdefids)
  return _internal_itemdefids(index);
}
inline void CInventory_GetEligiblePromoItemDefIDs_Response::set_itemdefids(int index, uint64_t value) {
  itemdefids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CInventory_GetEligiblePromoItemDefIDs_Response.itemdefids)
}
inline void CInventory_GetEligiblePromoItemDefIDs_Response::_internal_add_itemdefids(uint64_t value) {
  itemdefids_.Add(value);
}
inline void CInventory_GetEligiblePromoItemDefIDs_Response::add_itemdefids(uint64_t value) {
  _internal_add_itemdefids(value);
  // @@protoc_insertion_point(field_add:CInventory_GetEligiblePromoItemDefIDs_Response.itemdefids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CInventory_GetEligiblePromoItemDefIDs_Response::_internal_itemdefids() const {
  return itemdefids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CInventory_GetEligiblePromoItemDefIDs_Response::itemdefids() const {
  // @@protoc_insertion_point(field_list:CInventory_GetEligiblePromoItemDefIDs_Response.itemdefids)
  return _internal_itemdefids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CInventory_GetEligiblePromoItemDefIDs_Response::_internal_mutable_itemdefids() {
  return &itemdefids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CInventory_GetEligiblePromoItemDefIDs_Response::mutable_itemdefids() {
  // @@protoc_insertion_point(field_mutable_list:CInventory_GetEligiblePromoItemDefIDs_Response.itemdefids)
  return _internal_mutable_itemdefids();
}

// -------------------------------------------------------------------

// CInventory_AddItem_Request

// optional uint32 appid = 1;
inline bool CInventory_AddItem_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CInventory_AddItem_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CInventory_AddItem_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CInventory_AddItem_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CInventory_AddItem_Request::appid() const {
  // @@protoc_insertion_point(field_get:CInventory_AddItem_Request.appid)
  return _internal_appid();
}
inline void CInventory_AddItem_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  appid_ = value;
}
inline void CInventory_AddItem_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CInventory_AddItem_Request.appid)
}

// repeated uint64 itemdefid = 2;
inline int CInventory_AddItem_Request::_internal_itemdefid_size() const {
  return itemdefid_.size();
}
inline int CInventory_AddItem_Request::itemdefid_size() const {
  return _internal_itemdefid_size();
}
inline void CInventory_AddItem_Request::clear_itemdefid() {
  itemdefid_.Clear();
}
inline uint64_t CInventory_AddItem_Request::_internal_itemdefid(int index) const {
  return itemdefid_.Get(index);
}
inline uint64_t CInventory_AddItem_Request::itemdefid(int index) const {
  // @@protoc_insertion_point(field_get:CInventory_AddItem_Request.itemdefid)
  return _internal_itemdefid(index);
}
inline void CInventory_AddItem_Request::set_itemdefid(int index, uint64_t value) {
  itemdefid_.Set(index, value);
  // @@protoc_insertion_point(field_set:CInventory_AddItem_Request.itemdefid)
}
inline void CInventory_AddItem_Request::_internal_add_itemdefid(uint64_t value) {
  itemdefid_.Add(value);
}
inline void CInventory_AddItem_Request::add_itemdefid(uint64_t value) {
  _internal_add_itemdefid(value);
  // @@protoc_insertion_point(field_add:CInventory_AddItem_Request.itemdefid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CInventory_AddItem_Request::_internal_itemdefid() const {
  return itemdefid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CInventory_AddItem_Request::itemdefid() const {
  // @@protoc_insertion_point(field_list:CInventory_AddItem_Request.itemdefid)
  return _internal_itemdefid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CInventory_AddItem_Request::_internal_mutable_itemdefid() {
  return &itemdefid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CInventory_AddItem_Request::mutable_itemdefid() {
  // @@protoc_insertion_point(field_mutable_list:CInventory_AddItem_Request.itemdefid)
  return _internal_mutable_itemdefid();
}

// repeated string itempropsjson = 3;
inline int CInventory_AddItem_Request::_internal_itempropsjson_size() const {
  return itempropsjson_.size();
}
inline int CInventory_AddItem_Request::itempropsjson_size() const {
  return _internal_itempropsjson_size();
}
inline void CInventory_AddItem_Request::clear_itempropsjson() {
  itempropsjson_.Clear();
}
inline std::string* CInventory_AddItem_Request::add_itempropsjson() {
  std::string* _s = _internal_add_itempropsjson();
  // @@protoc_insertion_point(field_add_mutable:CInventory_AddItem_Request.itempropsjson)
  return _s;
}
inline const std::string& CInventory_AddItem_Request::_internal_itempropsjson(int index) const {
  return itempropsjson_.Get(index);
}
inline const std::string& CInventory_AddItem_Request::itempropsjson(int index) const {
  // @@protoc_insertion_point(field_get:CInventory_AddItem_Request.itempropsjson)
  return _internal_itempropsjson(index);
}
inline std::string* CInventory_AddItem_Request::mutable_itempropsjson(int index) {
  // @@protoc_insertion_point(field_mutable:CInventory_AddItem_Request.itempropsjson)
  return itempropsjson_.Mutable(index);
}
inline void CInventory_AddItem_Request::set_itempropsjson(int index, const std::string& value) {
  itempropsjson_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:CInventory_AddItem_Request.itempropsjson)
}
inline void CInventory_AddItem_Request::set_itempropsjson(int index, std::string&& value) {
  itempropsjson_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:CInventory_AddItem_Request.itempropsjson)
}
inline void CInventory_AddItem_Request::set_itempropsjson(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  itempropsjson_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CInventory_AddItem_Request.itempropsjson)
}
inline void CInventory_AddItem_Request::set_itempropsjson(int index, const char* value, size_t size) {
  itempropsjson_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CInventory_AddItem_Request.itempropsjson)
}
inline std::string* CInventory_AddItem_Request::_internal_add_itempropsjson() {
  return itempropsjson_.Add();
}
inline void CInventory_AddItem_Request::add_itempropsjson(const std::string& value) {
  itempropsjson_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CInventory_AddItem_Request.itempropsjson)
}
inline void CInventory_AddItem_Request::add_itempropsjson(std::string&& value) {
  itempropsjson_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CInventory_AddItem_Request.itempropsjson)
}
inline void CInventory_AddItem_Request::add_itempropsjson(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  itempropsjson_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CInventory_AddItem_Request.itempropsjson)
}
inline void CInventory_AddItem_Request::add_itempropsjson(const char* value, size_t size) {
  itempropsjson_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CInventory_AddItem_Request.itempropsjson)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CInventory_AddItem_Request::itempropsjson() const {
  // @@protoc_insertion_point(field_list:CInventory_AddItem_Request.itempropsjson)
  return itempropsjson_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CInventory_AddItem_Request::mutable_itempropsjson() {
  // @@protoc_insertion_point(field_mutable_list:CInventory_AddItem_Request.itempropsjson)
  return &itempropsjson_;
}

// optional uint64 steamid = 4;
inline bool CInventory_AddItem_Request::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CInventory_AddItem_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CInventory_AddItem_Request::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CInventory_AddItem_Request::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CInventory_AddItem_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CInventory_AddItem_Request.steamid)
  return _internal_steamid();
}
inline void CInventory_AddItem_Request::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
}
inline void CInventory_AddItem_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CInventory_AddItem_Request.steamid)
}

// optional bool notify = 5 [(.description) = "Should notify the user that the item was added to their Steam Inventory."];
inline bool CInventory_AddItem_Request::_internal_has_notify() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CInventory_AddItem_Request::has_notify() const {
  return _internal_has_notify();
}
inline void CInventory_AddItem_Request::clear_notify() {
  notify_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CInventory_AddItem_Request::_internal_notify() const {
  return notify_;
}
inline bool CInventory_AddItem_Request::notify() const {
  // @@protoc_insertion_point(field_get:CInventory_AddItem_Request.notify)
  return _internal_notify();
}
inline void CInventory_AddItem_Request::_internal_set_notify(bool value) {
  _has_bits_[0] |= 0x00000004u;
  notify_ = value;
}
inline void CInventory_AddItem_Request::set_notify(bool value) {
  _internal_set_notify(value);
  // @@protoc_insertion_point(field_set:CInventory_AddItem_Request.notify)
}

// optional uint64 requestid = 6;
inline bool CInventory_AddItem_Request::_internal_has_requestid() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CInventory_AddItem_Request::has_requestid() const {
  return _internal_has_requestid();
}
inline void CInventory_AddItem_Request::clear_requestid() {
  requestid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000020u;
}
inline uint64_t CInventory_AddItem_Request::_internal_requestid() const {
  return requestid_;
}
inline uint64_t CInventory_AddItem_Request::requestid() const {
  // @@protoc_insertion_point(field_get:CInventory_AddItem_Request.requestid)
  return _internal_requestid();
}
inline void CInventory_AddItem_Request::_internal_set_requestid(uint64_t value) {
  _has_bits_[0] |= 0x00000020u;
  requestid_ = value;
}
inline void CInventory_AddItem_Request::set_requestid(uint64_t value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:CInventory_AddItem_Request.requestid)
}

// optional bool trade_restriction = 7 [(.description) = "If true, apply the default trade and market restriction times to this item."];
inline bool CInventory_AddItem_Request::_internal_has_trade_restriction() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CInventory_AddItem_Request::has_trade_restriction() const {
  return _internal_has_trade_restriction();
}
inline void CInventory_AddItem_Request::clear_trade_restriction() {
  trade_restriction_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CInventory_AddItem_Request::_internal_trade_restriction() const {
  return trade_restriction_;
}
inline bool CInventory_AddItem_Request::trade_restriction() const {
  // @@protoc_insertion_point(field_get:CInventory_AddItem_Request.trade_restriction)
  return _internal_trade_restriction();
}
inline void CInventory_AddItem_Request::_internal_set_trade_restriction(bool value) {
  _has_bits_[0] |= 0x00000008u;
  trade_restriction_ = value;
}
inline void CInventory_AddItem_Request::set_trade_restriction(bool value) {
  _internal_set_trade_restriction(value);
  // @@protoc_insertion_point(field_set:CInventory_AddItem_Request.trade_restriction)
}

// optional bool is_purchase = 8 [default = false, (.description) = "If set, treat requestid as a txnid and create this item as a result of user microtransaction purchase."];
inline bool CInventory_AddItem_Request::_internal_has_is_purchase() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CInventory_AddItem_Request::has_is_purchase() const {
  return _internal_has_is_purchase();
}
inline void CInventory_AddItem_Request::clear_is_purchase() {
  is_purchase_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CInventory_AddItem_Request::_internal_is_purchase() const {
  return is_purchase_;
}
inline bool CInventory_AddItem_Request::is_purchase() const {
  // @@protoc_insertion_point(field_get:CInventory_AddItem_Request.is_purchase)
  return _internal_is_purchase();
}
inline void CInventory_AddItem_Request::_internal_set_is_purchase(bool value) {
  _has_bits_[0] |= 0x00000010u;
  is_purchase_ = value;
}
inline void CInventory_AddItem_Request::set_is_purchase(bool value) {
  _internal_set_is_purchase(value);
  // @@protoc_insertion_point(field_set:CInventory_AddItem_Request.is_purchase)
}

// -------------------------------------------------------------------

// CInventory_ModifyItems_Request_ItemPropertyUpdate

// optional uint64 itemid = 1;
inline bool CInventory_ModifyItems_Request_ItemPropertyUpdate::_internal_has_itemid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CInventory_ModifyItems_Request_ItemPropertyUpdate::has_itemid() const {
  return _internal_has_itemid();
}
inline void CInventory_ModifyItems_Request_ItemPropertyUpdate::clear_itemid() {
  itemid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CInventory_ModifyItems_Request_ItemPropertyUpdate::_internal_itemid() const {
  return itemid_;
}
inline uint64_t CInventory_ModifyItems_Request_ItemPropertyUpdate::itemid() const {
  // @@protoc_insertion_point(field_get:CInventory_ModifyItems_Request.ItemPropertyUpdate.itemid)
  return _internal_itemid();
}
inline void CInventory_ModifyItems_Request_ItemPropertyUpdate::_internal_set_itemid(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  itemid_ = value;
}
inline void CInventory_ModifyItems_Request_ItemPropertyUpdate::set_itemid(uint64_t value) {
  _internal_set_itemid(value);
  // @@protoc_insertion_point(field_set:CInventory_ModifyItems_Request.ItemPropertyUpdate.itemid)
}

// optional bool remove_property = 2;
inline bool CInventory_ModifyItems_Request_ItemPropertyUpdate::_internal_has_remove_property() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CInventory_ModifyItems_Request_ItemPropertyUpdate::has_remove_property() const {
  return _internal_has_remove_property();
}
inline void CInventory_ModifyItems_Request_ItemPropertyUpdate::clear_remove_property() {
  remove_property_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CInventory_ModifyItems_Request_ItemPropertyUpdate::_internal_remove_property() const {
  return remove_property_;
}
inline bool CInventory_ModifyItems_Request_ItemPropertyUpdate::remove_property() const {
  // @@protoc_insertion_point(field_get:CInventory_ModifyItems_Request.ItemPropertyUpdate.remove_property)
  return _internal_remove_property();
}
inline void CInventory_ModifyItems_Request_ItemPropertyUpdate::_internal_set_remove_property(bool value) {
  _has_bits_[0] |= 0x00000008u;
  remove_property_ = value;
}
inline void CInventory_ModifyItems_Request_ItemPropertyUpdate::set_remove_property(bool value) {
  _internal_set_remove_property(value);
  // @@protoc_insertion_point(field_set:CInventory_ModifyItems_Request.ItemPropertyUpdate.remove_property)
}

// optional string property_name = 3;
inline bool CInventory_ModifyItems_Request_ItemPropertyUpdate::_internal_has_property_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CInventory_ModifyItems_Request_ItemPropertyUpdate::has_property_name() const {
  return _internal_has_property_name();
}
inline void CInventory_ModifyItems_Request_ItemPropertyUpdate::clear_property_name() {
  property_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CInventory_ModifyItems_Request_ItemPropertyUpdate::property_name() const {
  // @@protoc_insertion_point(field_get:CInventory_ModifyItems_Request.ItemPropertyUpdate.property_name)
  return _internal_property_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CInventory_ModifyItems_Request_ItemPropertyUpdate::set_property_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 property_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CInventory_ModifyItems_Request.ItemPropertyUpdate.property_name)
}
inline std::string* CInventory_ModifyItems_Request_ItemPropertyUpdate::mutable_property_name() {
  std::string* _s = _internal_mutable_property_name();
  // @@protoc_insertion_point(field_mutable:CInventory_ModifyItems_Request.ItemPropertyUpdate.property_name)
  return _s;
}
inline const std::string& CInventory_ModifyItems_Request_ItemPropertyUpdate::_internal_property_name() const {
  return property_name_.Get();
}
inline void CInventory_ModifyItems_Request_ItemPropertyUpdate::_internal_set_property_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  property_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CInventory_ModifyItems_Request_ItemPropertyUpdate::_internal_mutable_property_name() {
  _has_bits_[0] |= 0x00000001u;
  return property_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CInventory_ModifyItems_Request_ItemPropertyUpdate::release_property_name() {
  // @@protoc_insertion_point(field_release:CInventory_ModifyItems_Request.ItemPropertyUpdate.property_name)
  if (!_internal_has_property_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = property_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (property_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    property_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CInventory_ModifyItems_Request_ItemPropertyUpdate::set_allocated_property_name(std::string* property_name) {
  if (property_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  property_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), property_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (property_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    property_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CInventory_ModifyItems_Request.ItemPropertyUpdate.property_name)
}

// optional bool property_value_bool = 4;
inline bool CInventory_ModifyItems_Request_ItemPropertyUpdate::_internal_has_property_value_bool() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CInventory_ModifyItems_Request_ItemPropertyUpdate::has_property_value_bool() const {
  return _internal_has_property_value_bool();
}
inline void CInventory_ModifyItems_Request_ItemPropertyUpdate::clear_property_value_bool() {
  property_value_bool_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CInventory_ModifyItems_Request_ItemPropertyUpdate::_internal_property_value_bool() const {
  return property_value_bool_;
}
inline bool CInventory_ModifyItems_Request_ItemPropertyUpdate::property_value_bool() const {
  // @@protoc_insertion_point(field_get:CInventory_ModifyItems_Request.ItemPropertyUpdate.property_value_bool)
  return _internal_property_value_bool();
}
inline void CInventory_ModifyItems_Request_ItemPropertyUpdate::_internal_set_property_value_bool(bool value) {
  _has_bits_[0] |= 0x00000010u;
  property_value_bool_ = value;
}
inline void CInventory_ModifyItems_Request_ItemPropertyUpdate::set_property_value_bool(bool value) {
  _internal_set_property_value_bool(value);
  // @@protoc_insertion_point(field_set:CInventory_ModifyItems_Request.ItemPropertyUpdate.property_value_bool)
}

// optional int64 property_value_int = 5;
inline bool CInventory_ModifyItems_Request_ItemPropertyUpdate::_internal_has_property_value_int() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CInventory_ModifyItems_Request_ItemPropertyUpdate::has_property_value_int() const {
  return _internal_has_property_value_int();
}
inline void CInventory_ModifyItems_Request_ItemPropertyUpdate::clear_property_value_int() {
  property_value_int_ = int64_t{0};
  _has_bits_[0] &= ~0x00000040u;
}
inline int64_t CInventory_ModifyItems_Request_ItemPropertyUpdate::_internal_property_value_int() const {
  return property_value_int_;
}
inline int64_t CInventory_ModifyItems_Request_ItemPropertyUpdate::property_value_int() const {
  // @@protoc_insertion_point(field_get:CInventory_ModifyItems_Request.ItemPropertyUpdate.property_value_int)
  return _internal_property_value_int();
}
inline void CInventory_ModifyItems_Request_ItemPropertyUpdate::_internal_set_property_value_int(int64_t value) {
  _has_bits_[0] |= 0x00000040u;
  property_value_int_ = value;
}
inline void CInventory_ModifyItems_Request_ItemPropertyUpdate::set_property_value_int(int64_t value) {
  _internal_set_property_value_int(value);
  // @@protoc_insertion_point(field_set:CInventory_ModifyItems_Request.ItemPropertyUpdate.property_value_int)
}

// optional string property_value_string = 6;
inline bool CInventory_ModifyItems_Request_ItemPropertyUpdate::_internal_has_property_value_string() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CInventory_ModifyItems_Request_ItemPropertyUpdate::has_property_value_string() const {
  return _internal_has_property_value_string();
}
inline void CInventory_ModifyItems_Request_ItemPropertyUpdate::clear_property_value_string() {
  property_value_string_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CInventory_ModifyItems_Request_ItemPropertyUpdate::property_value_string() const {
  // @@protoc_insertion_point(field_get:CInventory_ModifyItems_Request.ItemPropertyUpdate.property_value_string)
  return _internal_property_value_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CInventory_ModifyItems_Request_ItemPropertyUpdate::set_property_value_string(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 property_value_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CInventory_ModifyItems_Request.ItemPropertyUpdate.property_value_string)
}
inline std::string* CInventory_ModifyItems_Request_ItemPropertyUpdate::mutable_property_value_string() {
  std::string* _s = _internal_mutable_property_value_string();
  // @@protoc_insertion_point(field_mutable:CInventory_ModifyItems_Request.ItemPropertyUpdate.property_value_string)
  return _s;
}
inline const std::string& CInventory_ModifyItems_Request_ItemPropertyUpdate::_internal_property_value_string() const {
  return property_value_string_.Get();
}
inline void CInventory_ModifyItems_Request_ItemPropertyUpdate::_internal_set_property_value_string(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  property_value_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CInventory_ModifyItems_Request_ItemPropertyUpdate::_internal_mutable_property_value_string() {
  _has_bits_[0] |= 0x00000002u;
  return property_value_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CInventory_ModifyItems_Request_ItemPropertyUpdate::release_property_value_string() {
  // @@protoc_insertion_point(field_release:CInventory_ModifyItems_Request.ItemPropertyUpdate.property_value_string)
  if (!_internal_has_property_value_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = property_value_string_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (property_value_string_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    property_value_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CInventory_ModifyItems_Request_ItemPropertyUpdate::set_allocated_property_value_string(std::string* property_value_string) {
  if (property_value_string != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  property_value_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), property_value_string,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (property_value_string_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    property_value_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CInventory_ModifyItems_Request.ItemPropertyUpdate.property_value_string)
}

// optional float property_value_float = 7;
inline bool CInventory_ModifyItems_Request_ItemPropertyUpdate::_internal_has_property_value_float() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CInventory_ModifyItems_Request_ItemPropertyUpdate::has_property_value_float() const {
  return _internal_has_property_value_float();
}
inline void CInventory_ModifyItems_Request_ItemPropertyUpdate::clear_property_value_float() {
  property_value_float_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float CInventory_ModifyItems_Request_ItemPropertyUpdate::_internal_property_value_float() const {
  return property_value_float_;
}
inline float CInventory_ModifyItems_Request_ItemPropertyUpdate::property_value_float() const {
  // @@protoc_insertion_point(field_get:CInventory_ModifyItems_Request.ItemPropertyUpdate.property_value_float)
  return _internal_property_value_float();
}
inline void CInventory_ModifyItems_Request_ItemPropertyUpdate::_internal_set_property_value_float(float value) {
  _has_bits_[0] |= 0x00000020u;
  property_value_float_ = value;
}
inline void CInventory_ModifyItems_Request_ItemPropertyUpdate::set_property_value_float(float value) {
  _internal_set_property_value_float(value);
  // @@protoc_insertion_point(field_set:CInventory_ModifyItems_Request.ItemPropertyUpdate.property_value_float)
}

// -------------------------------------------------------------------

// CInventory_ModifyItems_Request

// optional uint32 appid = 1;
inline bool CInventory_ModifyItems_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CInventory_ModifyItems_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CInventory_ModifyItems_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CInventory_ModifyItems_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CInventory_ModifyItems_Request::appid() const {
  // @@protoc_insertion_point(field_get:CInventory_ModifyItems_Request.appid)
  return _internal_appid();
}
inline void CInventory_ModifyItems_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  appid_ = value;
}
inline void CInventory_ModifyItems_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CInventory_ModifyItems_Request.appid)
}

// optional uint64 steamid = 2;
inline bool CInventory_ModifyItems_Request::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CInventory_ModifyItems_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CInventory_ModifyItems_Request::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CInventory_ModifyItems_Request::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CInventory_ModifyItems_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CInventory_ModifyItems_Request.steamid)
  return _internal_steamid();
}
inline void CInventory_ModifyItems_Request::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
}
inline void CInventory_ModifyItems_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CInventory_ModifyItems_Request.steamid)
}

// repeated .CInventory_ModifyItems_Request.ItemPropertyUpdate updates = 3;
inline int CInventory_ModifyItems_Request::_internal_updates_size() const {
  return updates_.size();
}
inline int CInventory_ModifyItems_Request::updates_size() const {
  return _internal_updates_size();
}
inline void CInventory_ModifyItems_Request::clear_updates() {
  updates_.Clear();
}
inline ::CInventory_ModifyItems_Request_ItemPropertyUpdate* CInventory_ModifyItems_Request::mutable_updates(int index) {
  // @@protoc_insertion_point(field_mutable:CInventory_ModifyItems_Request.updates)
  return updates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CInventory_ModifyItems_Request_ItemPropertyUpdate >*
CInventory_ModifyItems_Request::mutable_updates() {
  // @@protoc_insertion_point(field_mutable_list:CInventory_ModifyItems_Request.updates)
  return &updates_;
}
inline const ::CInventory_ModifyItems_Request_ItemPropertyUpdate& CInventory_ModifyItems_Request::_internal_updates(int index) const {
  return updates_.Get(index);
}
inline const ::CInventory_ModifyItems_Request_ItemPropertyUpdate& CInventory_ModifyItems_Request::updates(int index) const {
  // @@protoc_insertion_point(field_get:CInventory_ModifyItems_Request.updates)
  return _internal_updates(index);
}
inline ::CInventory_ModifyItems_Request_ItemPropertyUpdate* CInventory_ModifyItems_Request::_internal_add_updates() {
  return updates_.Add();
}
inline ::CInventory_ModifyItems_Request_ItemPropertyUpdate* CInventory_ModifyItems_Request::add_updates() {
  ::CInventory_ModifyItems_Request_ItemPropertyUpdate* _add = _internal_add_updates();
  // @@protoc_insertion_point(field_add:CInventory_ModifyItems_Request.updates)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CInventory_ModifyItems_Request_ItemPropertyUpdate >&
CInventory_ModifyItems_Request::updates() const {
  // @@protoc_insertion_point(field_list:CInventory_ModifyItems_Request.updates)
  return updates_;
}

// optional uint32 timestamp = 4;
inline bool CInventory_ModifyItems_Request::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CInventory_ModifyItems_Request::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void CInventory_ModifyItems_Request::clear_timestamp() {
  timestamp_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CInventory_ModifyItems_Request::_internal_timestamp() const {
  return timestamp_;
}
inline uint32_t CInventory_ModifyItems_Request::timestamp() const {
  // @@protoc_insertion_point(field_get:CInventory_ModifyItems_Request.timestamp)
  return _internal_timestamp();
}
inline void CInventory_ModifyItems_Request::_internal_set_timestamp(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  timestamp_ = value;
}
inline void CInventory_ModifyItems_Request::set_timestamp(uint32_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:CInventory_ModifyItems_Request.timestamp)
}

// -------------------------------------------------------------------

// CInventory_ConsumePlaytime_Request

// optional uint32 appid = 1;
inline bool CInventory_ConsumePlaytime_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CInventory_ConsumePlaytime_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CInventory_ConsumePlaytime_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CInventory_ConsumePlaytime_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CInventory_ConsumePlaytime_Request::appid() const {
  // @@protoc_insertion_point(field_get:CInventory_ConsumePlaytime_Request.appid)
  return _internal_appid();
}
inline void CInventory_ConsumePlaytime_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  appid_ = value;
}
inline void CInventory_ConsumePlaytime_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CInventory_ConsumePlaytime_Request.appid)
}

// optional uint64 itemdefid = 2;
inline bool CInventory_ConsumePlaytime_Request::_internal_has_itemdefid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CInventory_ConsumePlaytime_Request::has_itemdefid() const {
  return _internal_has_itemdefid();
}
inline void CInventory_ConsumePlaytime_Request::clear_itemdefid() {
  itemdefid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CInventory_ConsumePlaytime_Request::_internal_itemdefid() const {
  return itemdefid_;
}
inline uint64_t CInventory_ConsumePlaytime_Request::itemdefid() const {
  // @@protoc_insertion_point(field_get:CInventory_ConsumePlaytime_Request.itemdefid)
  return _internal_itemdefid();
}
inline void CInventory_ConsumePlaytime_Request::_internal_set_itemdefid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  itemdefid_ = value;
}
inline void CInventory_ConsumePlaytime_Request::set_itemdefid(uint64_t value) {
  _internal_set_itemdefid(value);
  // @@protoc_insertion_point(field_set:CInventory_ConsumePlaytime_Request.itemdefid)
}

// -------------------------------------------------------------------

// CInventory_ConsumeItem_Request

// optional uint32 appid = 1;
inline bool CInventory_ConsumeItem_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CInventory_ConsumeItem_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CInventory_ConsumeItem_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CInventory_ConsumeItem_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CInventory_ConsumeItem_Request::appid() const {
  // @@protoc_insertion_point(field_get:CInventory_ConsumeItem_Request.appid)
  return _internal_appid();
}
inline void CInventory_ConsumeItem_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  appid_ = value;
}
inline void CInventory_ConsumeItem_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CInventory_ConsumeItem_Request.appid)
}

// optional uint64 itemid = 2;
inline bool CInventory_ConsumeItem_Request::_internal_has_itemid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CInventory_ConsumeItem_Request::has_itemid() const {
  return _internal_has_itemid();
}
inline void CInventory_ConsumeItem_Request::clear_itemid() {
  itemid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CInventory_ConsumeItem_Request::_internal_itemid() const {
  return itemid_;
}
inline uint64_t CInventory_ConsumeItem_Request::itemid() const {
  // @@protoc_insertion_point(field_get:CInventory_ConsumeItem_Request.itemid)
  return _internal_itemid();
}
inline void CInventory_ConsumeItem_Request::_internal_set_itemid(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  itemid_ = value;
}
inline void CInventory_ConsumeItem_Request::set_itemid(uint64_t value) {
  _internal_set_itemid(value);
  // @@protoc_insertion_point(field_set:CInventory_ConsumeItem_Request.itemid)
}

// optional uint32 quantity = 3;
inline bool CInventory_ConsumeItem_Request::_internal_has_quantity() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CInventory_ConsumeItem_Request::has_quantity() const {
  return _internal_has_quantity();
}
inline void CInventory_ConsumeItem_Request::clear_quantity() {
  quantity_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CInventory_ConsumeItem_Request::_internal_quantity() const {
  return quantity_;
}
inline uint32_t CInventory_ConsumeItem_Request::quantity() const {
  // @@protoc_insertion_point(field_get:CInventory_ConsumeItem_Request.quantity)
  return _internal_quantity();
}
inline void CInventory_ConsumeItem_Request::_internal_set_quantity(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  quantity_ = value;
}
inline void CInventory_ConsumeItem_Request::set_quantity(uint32_t value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:CInventory_ConsumeItem_Request.quantity)
}

// optional string timestamp = 4;
inline bool CInventory_ConsumeItem_Request::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CInventory_ConsumeItem_Request::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void CInventory_ConsumeItem_Request::clear_timestamp() {
  timestamp_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CInventory_ConsumeItem_Request::timestamp() const {
  // @@protoc_insertion_point(field_get:CInventory_ConsumeItem_Request.timestamp)
  return _internal_timestamp();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CInventory_ConsumeItem_Request::set_timestamp(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 timestamp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CInventory_ConsumeItem_Request.timestamp)
}
inline std::string* CInventory_ConsumeItem_Request::mutable_timestamp() {
  std::string* _s = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:CInventory_ConsumeItem_Request.timestamp)
  return _s;
}
inline const std::string& CInventory_ConsumeItem_Request::_internal_timestamp() const {
  return timestamp_.Get();
}
inline void CInventory_ConsumeItem_Request::_internal_set_timestamp(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CInventory_ConsumeItem_Request::_internal_mutable_timestamp() {
  _has_bits_[0] |= 0x00000001u;
  return timestamp_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CInventory_ConsumeItem_Request::release_timestamp() {
  // @@protoc_insertion_point(field_release:CInventory_ConsumeItem_Request.timestamp)
  if (!_internal_has_timestamp()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = timestamp_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (timestamp_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    timestamp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CInventory_ConsumeItem_Request::set_allocated_timestamp(std::string* timestamp) {
  if (timestamp != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  timestamp_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timestamp,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (timestamp_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    timestamp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CInventory_ConsumeItem_Request.timestamp)
}

// optional uint64 steamid = 5;
inline bool CInventory_ConsumeItem_Request::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CInventory_ConsumeItem_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CInventory_ConsumeItem_Request::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000010u;
}
inline uint64_t CInventory_ConsumeItem_Request::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CInventory_ConsumeItem_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CInventory_ConsumeItem_Request.steamid)
  return _internal_steamid();
}
inline void CInventory_ConsumeItem_Request::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000010u;
  steamid_ = value;
}
inline void CInventory_ConsumeItem_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CInventory_ConsumeItem_Request.steamid)
}

// optional uint64 requestid = 6;
inline bool CInventory_ConsumeItem_Request::_internal_has_requestid() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CInventory_ConsumeItem_Request::has_requestid() const {
  return _internal_has_requestid();
}
inline void CInventory_ConsumeItem_Request::clear_requestid() {
  requestid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000020u;
}
inline uint64_t CInventory_ConsumeItem_Request::_internal_requestid() const {
  return requestid_;
}
inline uint64_t CInventory_ConsumeItem_Request::requestid() const {
  // @@protoc_insertion_point(field_get:CInventory_ConsumeItem_Request.requestid)
  return _internal_requestid();
}
inline void CInventory_ConsumeItem_Request::_internal_set_requestid(uint64_t value) {
  _has_bits_[0] |= 0x00000020u;
  requestid_ = value;
}
inline void CInventory_ConsumeItem_Request::set_requestid(uint64_t value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:CInventory_ConsumeItem_Request.requestid)
}

// -------------------------------------------------------------------

// CInventory_DevSetNextDrop_Request

// optional uint32 appid = 1;
inline bool CInventory_DevSetNextDrop_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CInventory_DevSetNextDrop_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CInventory_DevSetNextDrop_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CInventory_DevSetNextDrop_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CInventory_DevSetNextDrop_Request::appid() const {
  // @@protoc_insertion_point(field_get:CInventory_DevSetNextDrop_Request.appid)
  return _internal_appid();
}
inline void CInventory_DevSetNextDrop_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  appid_ = value;
}
inline void CInventory_DevSetNextDrop_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CInventory_DevSetNextDrop_Request.appid)
}

// optional uint64 itemdefid = 2;
inline bool CInventory_DevSetNextDrop_Request::_internal_has_itemdefid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CInventory_DevSetNextDrop_Request::has_itemdefid() const {
  return _internal_has_itemdefid();
}
inline void CInventory_DevSetNextDrop_Request::clear_itemdefid() {
  itemdefid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CInventory_DevSetNextDrop_Request::_internal_itemdefid() const {
  return itemdefid_;
}
inline uint64_t CInventory_DevSetNextDrop_Request::itemdefid() const {
  // @@protoc_insertion_point(field_get:CInventory_DevSetNextDrop_Request.itemdefid)
  return _internal_itemdefid();
}
inline void CInventory_DevSetNextDrop_Request::_internal_set_itemdefid(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  itemdefid_ = value;
}
inline void CInventory_DevSetNextDrop_Request::set_itemdefid(uint64_t value) {
  _internal_set_itemdefid(value);
  // @@protoc_insertion_point(field_set:CInventory_DevSetNextDrop_Request.itemdefid)
}

// optional string droptime = 3;
inline bool CInventory_DevSetNextDrop_Request::_internal_has_droptime() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CInventory_DevSetNextDrop_Request::has_droptime() const {
  return _internal_has_droptime();
}
inline void CInventory_DevSetNextDrop_Request::clear_droptime() {
  droptime_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CInventory_DevSetNextDrop_Request::droptime() const {
  // @@protoc_insertion_point(field_get:CInventory_DevSetNextDrop_Request.droptime)
  return _internal_droptime();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CInventory_DevSetNextDrop_Request::set_droptime(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 droptime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CInventory_DevSetNextDrop_Request.droptime)
}
inline std::string* CInventory_DevSetNextDrop_Request::mutable_droptime() {
  std::string* _s = _internal_mutable_droptime();
  // @@protoc_insertion_point(field_mutable:CInventory_DevSetNextDrop_Request.droptime)
  return _s;
}
inline const std::string& CInventory_DevSetNextDrop_Request::_internal_droptime() const {
  return droptime_.Get();
}
inline void CInventory_DevSetNextDrop_Request::_internal_set_droptime(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  droptime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CInventory_DevSetNextDrop_Request::_internal_mutable_droptime() {
  _has_bits_[0] |= 0x00000001u;
  return droptime_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CInventory_DevSetNextDrop_Request::release_droptime() {
  // @@protoc_insertion_point(field_release:CInventory_DevSetNextDrop_Request.droptime)
  if (!_internal_has_droptime()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = droptime_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (droptime_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    droptime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CInventory_DevSetNextDrop_Request::set_allocated_droptime(std::string* droptime) {
  if (droptime != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  droptime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), droptime,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (droptime_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    droptime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CInventory_DevSetNextDrop_Request.droptime)
}

// -------------------------------------------------------------------

// CInventory_SplitItemStack_Request

// optional uint32 appid = 1;
inline bool CInventory_SplitItemStack_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CInventory_SplitItemStack_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CInventory_SplitItemStack_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CInventory_SplitItemStack_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CInventory_SplitItemStack_Request::appid() const {
  // @@protoc_insertion_point(field_get:CInventory_SplitItemStack_Request.appid)
  return _internal_appid();
}
inline void CInventory_SplitItemStack_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  appid_ = value;
}
inline void CInventory_SplitItemStack_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CInventory_SplitItemStack_Request.appid)
}

// optional uint64 itemid = 2;
inline bool CInventory_SplitItemStack_Request::_internal_has_itemid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CInventory_SplitItemStack_Request::has_itemid() const {
  return _internal_has_itemid();
}
inline void CInventory_SplitItemStack_Request::clear_itemid() {
  itemid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CInventory_SplitItemStack_Request::_internal_itemid() const {
  return itemid_;
}
inline uint64_t CInventory_SplitItemStack_Request::itemid() const {
  // @@protoc_insertion_point(field_get:CInventory_SplitItemStack_Request.itemid)
  return _internal_itemid();
}
inline void CInventory_SplitItemStack_Request::_internal_set_itemid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  itemid_ = value;
}
inline void CInventory_SplitItemStack_Request::set_itemid(uint64_t value) {
  _internal_set_itemid(value);
  // @@protoc_insertion_point(field_set:CInventory_SplitItemStack_Request.itemid)
}

// optional uint32 quantity = 3;
inline bool CInventory_SplitItemStack_Request::_internal_has_quantity() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CInventory_SplitItemStack_Request::has_quantity() const {
  return _internal_has_quantity();
}
inline void CInventory_SplitItemStack_Request::clear_quantity() {
  quantity_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CInventory_SplitItemStack_Request::_internal_quantity() const {
  return quantity_;
}
inline uint32_t CInventory_SplitItemStack_Request::quantity() const {
  // @@protoc_insertion_point(field_get:CInventory_SplitItemStack_Request.quantity)
  return _internal_quantity();
}
inline void CInventory_SplitItemStack_Request::_internal_set_quantity(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  quantity_ = value;
}
inline void CInventory_SplitItemStack_Request::set_quantity(uint32_t value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:CInventory_SplitItemStack_Request.quantity)
}

// optional uint64 steamid = 5;
inline bool CInventory_SplitItemStack_Request::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CInventory_SplitItemStack_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CInventory_SplitItemStack_Request::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline uint64_t CInventory_SplitItemStack_Request::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CInventory_SplitItemStack_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CInventory_SplitItemStack_Request.steamid)
  return _internal_steamid();
}
inline void CInventory_SplitItemStack_Request::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000008u;
  steamid_ = value;
}
inline void CInventory_SplitItemStack_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CInventory_SplitItemStack_Request.steamid)
}

// -------------------------------------------------------------------

// CInventory_CombineItemStacks_Request

// optional uint32 appid = 1;
inline bool CInventory_CombineItemStacks_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CInventory_CombineItemStacks_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CInventory_CombineItemStacks_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CInventory_CombineItemStacks_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CInventory_CombineItemStacks_Request::appid() const {
  // @@protoc_insertion_point(field_get:CInventory_CombineItemStacks_Request.appid)
  return _internal_appid();
}
inline void CInventory_CombineItemStacks_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  appid_ = value;
}
inline void CInventory_CombineItemStacks_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CInventory_CombineItemStacks_Request.appid)
}

// optional uint64 fromitemid = 2;
inline bool CInventory_CombineItemStacks_Request::_internal_has_fromitemid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CInventory_CombineItemStacks_Request::has_fromitemid() const {
  return _internal_has_fromitemid();
}
inline void CInventory_CombineItemStacks_Request::clear_fromitemid() {
  fromitemid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CInventory_CombineItemStacks_Request::_internal_fromitemid() const {
  return fromitemid_;
}
inline uint64_t CInventory_CombineItemStacks_Request::fromitemid() const {
  // @@protoc_insertion_point(field_get:CInventory_CombineItemStacks_Request.fromitemid)
  return _internal_fromitemid();
}
inline void CInventory_CombineItemStacks_Request::_internal_set_fromitemid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  fromitemid_ = value;
}
inline void CInventory_CombineItemStacks_Request::set_fromitemid(uint64_t value) {
  _internal_set_fromitemid(value);
  // @@protoc_insertion_point(field_set:CInventory_CombineItemStacks_Request.fromitemid)
}

// optional uint64 destitemid = 3;
inline bool CInventory_CombineItemStacks_Request::_internal_has_destitemid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CInventory_CombineItemStacks_Request::has_destitemid() const {
  return _internal_has_destitemid();
}
inline void CInventory_CombineItemStacks_Request::clear_destitemid() {
  destitemid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline uint64_t CInventory_CombineItemStacks_Request::_internal_destitemid() const {
  return destitemid_;
}
inline uint64_t CInventory_CombineItemStacks_Request::destitemid() const {
  // @@protoc_insertion_point(field_get:CInventory_CombineItemStacks_Request.destitemid)
  return _internal_destitemid();
}
inline void CInventory_CombineItemStacks_Request::_internal_set_destitemid(uint64_t value) {
  _has_bits_[0] |= 0x00000008u;
  destitemid_ = value;
}
inline void CInventory_CombineItemStacks_Request::set_destitemid(uint64_t value) {
  _internal_set_destitemid(value);
  // @@protoc_insertion_point(field_set:CInventory_CombineItemStacks_Request.destitemid)
}

// optional uint32 quantity = 4;
inline bool CInventory_CombineItemStacks_Request::_internal_has_quantity() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CInventory_CombineItemStacks_Request::has_quantity() const {
  return _internal_has_quantity();
}
inline void CInventory_CombineItemStacks_Request::clear_quantity() {
  quantity_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CInventory_CombineItemStacks_Request::_internal_quantity() const {
  return quantity_;
}
inline uint32_t CInventory_CombineItemStacks_Request::quantity() const {
  // @@protoc_insertion_point(field_get:CInventory_CombineItemStacks_Request.quantity)
  return _internal_quantity();
}
inline void CInventory_CombineItemStacks_Request::_internal_set_quantity(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  quantity_ = value;
}
inline void CInventory_CombineItemStacks_Request::set_quantity(uint32_t value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:CInventory_CombineItemStacks_Request.quantity)
}

// optional fixed64 steamid = 7;
inline bool CInventory_CombineItemStacks_Request::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CInventory_CombineItemStacks_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CInventory_CombineItemStacks_Request::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000010u;
}
inline uint64_t CInventory_CombineItemStacks_Request::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CInventory_CombineItemStacks_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CInventory_CombineItemStacks_Request.steamid)
  return _internal_steamid();
}
inline void CInventory_CombineItemStacks_Request::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000010u;
  steamid_ = value;
}
inline void CInventory_CombineItemStacks_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CInventory_CombineItemStacks_Request.steamid)
}

// -------------------------------------------------------------------

// CInventory_GetItemDefMeta_Request

// optional uint32 appid = 1;
inline bool CInventory_GetItemDefMeta_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CInventory_GetItemDefMeta_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CInventory_GetItemDefMeta_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CInventory_GetItemDefMeta_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CInventory_GetItemDefMeta_Request::appid() const {
  // @@protoc_insertion_point(field_get:CInventory_GetItemDefMeta_Request.appid)
  return _internal_appid();
}
inline void CInventory_GetItemDefMeta_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  appid_ = value;
}
inline void CInventory_GetItemDefMeta_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CInventory_GetItemDefMeta_Request.appid)
}

// -------------------------------------------------------------------

// CInventory_GetItemDefMeta_Response

// optional uint32 modified = 1;
inline bool CInventory_GetItemDefMeta_Response::_internal_has_modified() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CInventory_GetItemDefMeta_Response::has_modified() const {
  return _internal_has_modified();
}
inline void CInventory_GetItemDefMeta_Response::clear_modified() {
  modified_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CInventory_GetItemDefMeta_Response::_internal_modified() const {
  return modified_;
}
inline uint32_t CInventory_GetItemDefMeta_Response::modified() const {
  // @@protoc_insertion_point(field_get:CInventory_GetItemDefMeta_Response.modified)
  return _internal_modified();
}
inline void CInventory_GetItemDefMeta_Response::_internal_set_modified(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  modified_ = value;
}
inline void CInventory_GetItemDefMeta_Response::set_modified(uint32_t value) {
  _internal_set_modified(value);
  // @@protoc_insertion_point(field_set:CInventory_GetItemDefMeta_Response.modified)
}

// optional string digest = 2;
inline bool CInventory_GetItemDefMeta_Response::_internal_has_digest() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CInventory_GetItemDefMeta_Response::has_digest() const {
  return _internal_has_digest();
}
inline void CInventory_GetItemDefMeta_Response::clear_digest() {
  digest_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CInventory_GetItemDefMeta_Response::digest() const {
  // @@protoc_insertion_point(field_get:CInventory_GetItemDefMeta_Response.digest)
  return _internal_digest();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CInventory_GetItemDefMeta_Response::set_digest(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 digest_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CInventory_GetItemDefMeta_Response.digest)
}
inline std::string* CInventory_GetItemDefMeta_Response::mutable_digest() {
  std::string* _s = _internal_mutable_digest();
  // @@protoc_insertion_point(field_mutable:CInventory_GetItemDefMeta_Response.digest)
  return _s;
}
inline const std::string& CInventory_GetItemDefMeta_Response::_internal_digest() const {
  return digest_.Get();
}
inline void CInventory_GetItemDefMeta_Response::_internal_set_digest(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  digest_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CInventory_GetItemDefMeta_Response::_internal_mutable_digest() {
  _has_bits_[0] |= 0x00000001u;
  return digest_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CInventory_GetItemDefMeta_Response::release_digest() {
  // @@protoc_insertion_point(field_release:CInventory_GetItemDefMeta_Response.digest)
  if (!_internal_has_digest()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = digest_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (digest_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    digest_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CInventory_GetItemDefMeta_Response::set_allocated_digest(std::string* digest) {
  if (digest != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  digest_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), digest,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (digest_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    digest_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CInventory_GetItemDefMeta_Response.digest)
}

// -------------------------------------------------------------------

// CInventory_GetUserPurchaseInfo_Request

// -------------------------------------------------------------------

// CInventory_GetUserPurchaseInfo_Response

// optional int32 ecurrency = 1;
inline bool CInventory_GetUserPurchaseInfo_Response::_internal_has_ecurrency() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CInventory_GetUserPurchaseInfo_Response::has_ecurrency() const {
  return _internal_has_ecurrency();
}
inline void CInventory_GetUserPurchaseInfo_Response::clear_ecurrency() {
  ecurrency_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t CInventory_GetUserPurchaseInfo_Response::_internal_ecurrency() const {
  return ecurrency_;
}
inline int32_t CInventory_GetUserPurchaseInfo_Response::ecurrency() const {
  // @@protoc_insertion_point(field_get:CInventory_GetUserPurchaseInfo_Response.ecurrency)
  return _internal_ecurrency();
}
inline void CInventory_GetUserPurchaseInfo_Response::_internal_set_ecurrency(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  ecurrency_ = value;
}
inline void CInventory_GetUserPurchaseInfo_Response::set_ecurrency(int32_t value) {
  _internal_set_ecurrency(value);
  // @@protoc_insertion_point(field_set:CInventory_GetUserPurchaseInfo_Response.ecurrency)
}

// -------------------------------------------------------------------

// CInventory_PurchaseInit_Request_LineItem

// optional uint64 itemdefid = 1;
inline bool CInventory_PurchaseInit_Request_LineItem::_internal_has_itemdefid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CInventory_PurchaseInit_Request_LineItem::has_itemdefid() const {
  return _internal_has_itemdefid();
}
inline void CInventory_PurchaseInit_Request_LineItem::clear_itemdefid() {
  itemdefid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CInventory_PurchaseInit_Request_LineItem::_internal_itemdefid() const {
  return itemdefid_;
}
inline uint64_t CInventory_PurchaseInit_Request_LineItem::itemdefid() const {
  // @@protoc_insertion_point(field_get:CInventory_PurchaseInit_Request.LineItem.itemdefid)
  return _internal_itemdefid();
}
inline void CInventory_PurchaseInit_Request_LineItem::_internal_set_itemdefid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  itemdefid_ = value;
}
inline void CInventory_PurchaseInit_Request_LineItem::set_itemdefid(uint64_t value) {
  _internal_set_itemdefid(value);
  // @@protoc_insertion_point(field_set:CInventory_PurchaseInit_Request.LineItem.itemdefid)
}

// optional uint32 quantity = 2;
inline bool CInventory_PurchaseInit_Request_LineItem::_internal_has_quantity() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CInventory_PurchaseInit_Request_LineItem::has_quantity() const {
  return _internal_has_quantity();
}
inline void CInventory_PurchaseInit_Request_LineItem::clear_quantity() {
  quantity_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CInventory_PurchaseInit_Request_LineItem::_internal_quantity() const {
  return quantity_;
}
inline uint32_t CInventory_PurchaseInit_Request_LineItem::quantity() const {
  // @@protoc_insertion_point(field_get:CInventory_PurchaseInit_Request.LineItem.quantity)
  return _internal_quantity();
}
inline void CInventory_PurchaseInit_Request_LineItem::_internal_set_quantity(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  quantity_ = value;
}
inline void CInventory_PurchaseInit_Request_LineItem::set_quantity(uint32_t value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:CInventory_PurchaseInit_Request.LineItem.quantity)
}

// -------------------------------------------------------------------

// CInventory_PurchaseInit_Request

// optional uint32 appid = 1;
inline bool CInventory_PurchaseInit_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CInventory_PurchaseInit_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CInventory_PurchaseInit_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CInventory_PurchaseInit_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CInventory_PurchaseInit_Request::appid() const {
  // @@protoc_insertion_point(field_get:CInventory_PurchaseInit_Request.appid)
  return _internal_appid();
}
inline void CInventory_PurchaseInit_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  appid_ = value;
}
inline void CInventory_PurchaseInit_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CInventory_PurchaseInit_Request.appid)
}

// optional int32 language = 2;
inline bool CInventory_PurchaseInit_Request::_internal_has_language() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CInventory_PurchaseInit_Request::has_language() const {
  return _internal_has_language();
}
inline void CInventory_PurchaseInit_Request::clear_language() {
  language_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t CInventory_PurchaseInit_Request::_internal_language() const {
  return language_;
}
inline int32_t CInventory_PurchaseInit_Request::language() const {
  // @@protoc_insertion_point(field_get:CInventory_PurchaseInit_Request.language)
  return _internal_language();
}
inline void CInventory_PurchaseInit_Request::_internal_set_language(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  language_ = value;
}
inline void CInventory_PurchaseInit_Request::set_language(int32_t value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:CInventory_PurchaseInit_Request.language)
}

// repeated .CInventory_PurchaseInit_Request.LineItem line_items = 3;
inline int CInventory_PurchaseInit_Request::_internal_line_items_size() const {
  return line_items_.size();
}
inline int CInventory_PurchaseInit_Request::line_items_size() const {
  return _internal_line_items_size();
}
inline void CInventory_PurchaseInit_Request::clear_line_items() {
  line_items_.Clear();
}
inline ::CInventory_PurchaseInit_Request_LineItem* CInventory_PurchaseInit_Request::mutable_line_items(int index) {
  // @@protoc_insertion_point(field_mutable:CInventory_PurchaseInit_Request.line_items)
  return line_items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CInventory_PurchaseInit_Request_LineItem >*
CInventory_PurchaseInit_Request::mutable_line_items() {
  // @@protoc_insertion_point(field_mutable_list:CInventory_PurchaseInit_Request.line_items)
  return &line_items_;
}
inline const ::CInventory_PurchaseInit_Request_LineItem& CInventory_PurchaseInit_Request::_internal_line_items(int index) const {
  return line_items_.Get(index);
}
inline const ::CInventory_PurchaseInit_Request_LineItem& CInventory_PurchaseInit_Request::line_items(int index) const {
  // @@protoc_insertion_point(field_get:CInventory_PurchaseInit_Request.line_items)
  return _internal_line_items(index);
}
inline ::CInventory_PurchaseInit_Request_LineItem* CInventory_PurchaseInit_Request::_internal_add_line_items() {
  return line_items_.Add();
}
inline ::CInventory_PurchaseInit_Request_LineItem* CInventory_PurchaseInit_Request::add_line_items() {
  ::CInventory_PurchaseInit_Request_LineItem* _add = _internal_add_line_items();
  // @@protoc_insertion_point(field_add:CInventory_PurchaseInit_Request.line_items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CInventory_PurchaseInit_Request_LineItem >&
CInventory_PurchaseInit_Request::line_items() const {
  // @@protoc_insertion_point(field_list:CInventory_PurchaseInit_Request.line_items)
  return line_items_;
}

// -------------------------------------------------------------------

// CInventory_PurchaseInit_Response

// optional uint64 orderid = 1;
inline bool CInventory_PurchaseInit_Response::_internal_has_orderid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CInventory_PurchaseInit_Response::has_orderid() const {
  return _internal_has_orderid();
}
inline void CInventory_PurchaseInit_Response::clear_orderid() {
  orderid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CInventory_PurchaseInit_Response::_internal_orderid() const {
  return orderid_;
}
inline uint64_t CInventory_PurchaseInit_Response::orderid() const {
  // @@protoc_insertion_point(field_get:CInventory_PurchaseInit_Response.orderid)
  return _internal_orderid();
}
inline void CInventory_PurchaseInit_Response::_internal_set_orderid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  orderid_ = value;
}
inline void CInventory_PurchaseInit_Response::set_orderid(uint64_t value) {
  _internal_set_orderid(value);
  // @@protoc_insertion_point(field_set:CInventory_PurchaseInit_Response.orderid)
}

// optional uint64 transid = 2;
inline bool CInventory_PurchaseInit_Response::_internal_has_transid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CInventory_PurchaseInit_Response::has_transid() const {
  return _internal_has_transid();
}
inline void CInventory_PurchaseInit_Response::clear_transid() {
  transid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CInventory_PurchaseInit_Response::_internal_transid() const {
  return transid_;
}
inline uint64_t CInventory_PurchaseInit_Response::transid() const {
  // @@protoc_insertion_point(field_get:CInventory_PurchaseInit_Response.transid)
  return _internal_transid();
}
inline void CInventory_PurchaseInit_Response::_internal_set_transid(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  transid_ = value;
}
inline void CInventory_PurchaseInit_Response::set_transid(uint64_t value) {
  _internal_set_transid(value);
  // @@protoc_insertion_point(field_set:CInventory_PurchaseInit_Response.transid)
}

// -------------------------------------------------------------------

// CInventory_PurchaseFinalize_Request

// optional uint32 appid = 1;
inline bool CInventory_PurchaseFinalize_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CInventory_PurchaseFinalize_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CInventory_PurchaseFinalize_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CInventory_PurchaseFinalize_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CInventory_PurchaseFinalize_Request::appid() const {
  // @@protoc_insertion_point(field_get:CInventory_PurchaseFinalize_Request.appid)
  return _internal_appid();
}
inline void CInventory_PurchaseFinalize_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  appid_ = value;
}
inline void CInventory_PurchaseFinalize_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CInventory_PurchaseFinalize_Request.appid)
}

// optional int32 language = 2;
inline bool CInventory_PurchaseFinalize_Request::_internal_has_language() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CInventory_PurchaseFinalize_Request::has_language() const {
  return _internal_has_language();
}
inline void CInventory_PurchaseFinalize_Request::clear_language() {
  language_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t CInventory_PurchaseFinalize_Request::_internal_language() const {
  return language_;
}
inline int32_t CInventory_PurchaseFinalize_Request::language() const {
  // @@protoc_insertion_point(field_get:CInventory_PurchaseFinalize_Request.language)
  return _internal_language();
}
inline void CInventory_PurchaseFinalize_Request::_internal_set_language(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  language_ = value;
}
inline void CInventory_PurchaseFinalize_Request::set_language(int32_t value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:CInventory_PurchaseFinalize_Request.language)
}

// optional uint64 orderid = 3;
inline bool CInventory_PurchaseFinalize_Request::_internal_has_orderid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CInventory_PurchaseFinalize_Request::has_orderid() const {
  return _internal_has_orderid();
}
inline void CInventory_PurchaseFinalize_Request::clear_orderid() {
  orderid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CInventory_PurchaseFinalize_Request::_internal_orderid() const {
  return orderid_;
}
inline uint64_t CInventory_PurchaseFinalize_Request::orderid() const {
  // @@protoc_insertion_point(field_get:CInventory_PurchaseFinalize_Request.orderid)
  return _internal_orderid();
}
inline void CInventory_PurchaseFinalize_Request::_internal_set_orderid(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  orderid_ = value;
}
inline void CInventory_PurchaseFinalize_Request::set_orderid(uint64_t value) {
  _internal_set_orderid(value);
  // @@protoc_insertion_point(field_set:CInventory_PurchaseFinalize_Request.orderid)
}

// -------------------------------------------------------------------

// CInventory_InspectItem_Request

// optional uint64 itemdefid = 1;
inline bool CInventory_InspectItem_Request::_internal_has_itemdefid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CInventory_InspectItem_Request::has_itemdefid() const {
  return _internal_has_itemdefid();
}
inline void CInventory_InspectItem_Request::clear_itemdefid() {
  itemdefid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CInventory_InspectItem_Request::_internal_itemdefid() const {
  return itemdefid_;
}
inline uint64_t CInventory_InspectItem_Request::itemdefid() const {
  // @@protoc_insertion_point(field_get:CInventory_InspectItem_Request.itemdefid)
  return _internal_itemdefid();
}
inline void CInventory_InspectItem_Request::_internal_set_itemdefid(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  itemdefid_ = value;
}
inline void CInventory_InspectItem_Request::set_itemdefid(uint64_t value) {
  _internal_set_itemdefid(value);
  // @@protoc_insertion_point(field_set:CInventory_InspectItem_Request.itemdefid)
}

// optional fixed64 itemid = 2;
inline bool CInventory_InspectItem_Request::_internal_has_itemid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CInventory_InspectItem_Request::has_itemid() const {
  return _internal_has_itemid();
}
inline void CInventory_InspectItem_Request::clear_itemid() {
  itemid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CInventory_InspectItem_Request::_internal_itemid() const {
  return itemid_;
}
inline uint64_t CInventory_InspectItem_Request::itemid() const {
  // @@protoc_insertion_point(field_get:CInventory_InspectItem_Request.itemid)
  return _internal_itemid();
}
inline void CInventory_InspectItem_Request::_internal_set_itemid(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  itemid_ = value;
}
inline void CInventory_InspectItem_Request::set_itemid(uint64_t value) {
  _internal_set_itemid(value);
  // @@protoc_insertion_point(field_set:CInventory_InspectItem_Request.itemid)
}

// optional string tags = 3;
inline bool CInventory_InspectItem_Request::_internal_has_tags() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CInventory_InspectItem_Request::has_tags() const {
  return _internal_has_tags();
}
inline void CInventory_InspectItem_Request::clear_tags() {
  tags_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CInventory_InspectItem_Request::tags() const {
  // @@protoc_insertion_point(field_get:CInventory_InspectItem_Request.tags)
  return _internal_tags();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CInventory_InspectItem_Request::set_tags(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 tags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CInventory_InspectItem_Request.tags)
}
inline std::string* CInventory_InspectItem_Request::mutable_tags() {
  std::string* _s = _internal_mutable_tags();
  // @@protoc_insertion_point(field_mutable:CInventory_InspectItem_Request.tags)
  return _s;
}
inline const std::string& CInventory_InspectItem_Request::_internal_tags() const {
  return tags_.Get();
}
inline void CInventory_InspectItem_Request::_internal_set_tags(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  tags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CInventory_InspectItem_Request::_internal_mutable_tags() {
  _has_bits_[0] |= 0x00000001u;
  return tags_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CInventory_InspectItem_Request::release_tags() {
  // @@protoc_insertion_point(field_release:CInventory_InspectItem_Request.tags)
  if (!_internal_has_tags()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = tags_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tags_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    tags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CInventory_InspectItem_Request::set_allocated_tags(std::string* tags) {
  if (tags != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tags_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tags,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tags_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    tags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CInventory_InspectItem_Request.tags)
}

// -------------------------------------------------------------------

// CInventoryClient_NewItems_Notification

// optional uint32 appid = 1;
inline bool CInventoryClient_NewItems_Notification::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CInventoryClient_NewItems_Notification::has_appid() const {
  return _internal_has_appid();
}
inline void CInventoryClient_NewItems_Notification::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CInventoryClient_NewItems_Notification::_internal_appid() const {
  return appid_;
}
inline uint32_t CInventoryClient_NewItems_Notification::appid() const {
  // @@protoc_insertion_point(field_get:CInventoryClient_NewItems_Notification.appid)
  return _internal_appid();
}
inline void CInventoryClient_NewItems_Notification::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  appid_ = value;
}
inline void CInventoryClient_NewItems_Notification::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CInventoryClient_NewItems_Notification.appid)
}

// optional .CInventory_Response inventory_response = 2;
inline bool CInventoryClient_NewItems_Notification::_internal_has_inventory_response() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || inventory_response_ != nullptr);
  return value;
}
inline bool CInventoryClient_NewItems_Notification::has_inventory_response() const {
  return _internal_has_inventory_response();
}
inline void CInventoryClient_NewItems_Notification::clear_inventory_response() {
  if (inventory_response_ != nullptr) inventory_response_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CInventory_Response& CInventoryClient_NewItems_Notification::_internal_inventory_response() const {
  const ::CInventory_Response* p = inventory_response_;
  return p != nullptr ? *p : reinterpret_cast<const ::CInventory_Response&>(
      ::_CInventory_Response_default_instance_);
}
inline const ::CInventory_Response& CInventoryClient_NewItems_Notification::inventory_response() const {
  // @@protoc_insertion_point(field_get:CInventoryClient_NewItems_Notification.inventory_response)
  return _internal_inventory_response();
}
inline void CInventoryClient_NewItems_Notification::unsafe_arena_set_allocated_inventory_response(
    ::CInventory_Response* inventory_response) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inventory_response_);
  }
  inventory_response_ = inventory_response;
  if (inventory_response) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CInventoryClient_NewItems_Notification.inventory_response)
}
inline ::CInventory_Response* CInventoryClient_NewItems_Notification::release_inventory_response() {
  _has_bits_[0] &= ~0x00000001u;
  ::CInventory_Response* temp = inventory_response_;
  inventory_response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CInventory_Response* CInventoryClient_NewItems_Notification::unsafe_arena_release_inventory_response() {
  // @@protoc_insertion_point(field_release:CInventoryClient_NewItems_Notification.inventory_response)
  _has_bits_[0] &= ~0x00000001u;
  ::CInventory_Response* temp = inventory_response_;
  inventory_response_ = nullptr;
  return temp;
}
inline ::CInventory_Response* CInventoryClient_NewItems_Notification::_internal_mutable_inventory_response() {
  _has_bits_[0] |= 0x00000001u;
  if (inventory_response_ == nullptr) {
    auto* p = CreateMaybeMessage<::CInventory_Response>(GetArenaForAllocation());
    inventory_response_ = p;
  }
  return inventory_response_;
}
inline ::CInventory_Response* CInventoryClient_NewItems_Notification::mutable_inventory_response() {
  ::CInventory_Response* _msg = _internal_mutable_inventory_response();
  // @@protoc_insertion_point(field_mutable:CInventoryClient_NewItems_Notification.inventory_response)
  return _msg;
}
inline void CInventoryClient_NewItems_Notification::set_allocated_inventory_response(::CInventory_Response* inventory_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete inventory_response_;
  }
  if (inventory_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CInventory_Response>::GetOwningArena(inventory_response);
    if (message_arena != submessage_arena) {
      inventory_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inventory_response, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  inventory_response_ = inventory_response;
  // @@protoc_insertion_point(field_set_allocated:CInventoryClient_NewItems_Notification.inventory_response)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_steammessages_5finventory_2esteamclient_2eproto
