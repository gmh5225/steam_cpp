// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_marketingmessages.steamclient.proto

#include "steammessages_marketingmessages.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CMarketingMessages_GetActiveMarketingMessages_Request::CMarketingMessages_GetActiveMarketingMessages_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : country_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , anonymous_user_(false){}
struct CMarketingMessages_GetActiveMarketingMessages_RequestDefaultTypeInternal {
  constexpr CMarketingMessages_GetActiveMarketingMessages_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMarketingMessages_GetActiveMarketingMessages_RequestDefaultTypeInternal() {}
  union {
    CMarketingMessages_GetActiveMarketingMessages_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMarketingMessages_GetActiveMarketingMessages_RequestDefaultTypeInternal _CMarketingMessages_GetActiveMarketingMessages_Request_default_instance_;
constexpr CMarketingMessageProto::CMarketingMessageProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , associated_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , country_allow_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , country_deny_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , additional_restrictions_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , template_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , template_vars_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , creator_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , template_vars_json_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , additional_restrictions_json_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , gid_(uint64_t{0u})
  , type_(0)

  , priority_(0u)
  , association_type_(0)

  , associated_id_(0u)
  , start_date_(0u)
  , end_date_(0u)
  , ownership_restrictions_overridden_(false)
  , must_own_appid_(0u)
  , must_not_own_appid_(0u)
  , must_own_packageid_(0u)
  , must_not_own_packageid_(0u)
  , must_have_launched_appid_(0u)
  , flags_(0u)
  , visibility_(1)
{}
struct CMarketingMessageProtoDefaultTypeInternal {
  constexpr CMarketingMessageProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMarketingMessageProtoDefaultTypeInternal() {}
  union {
    CMarketingMessageProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMarketingMessageProtoDefaultTypeInternal _CMarketingMessageProto_default_instance_;
constexpr CMarketingMessages_GetActiveMarketingMessages_Response::CMarketingMessages_GetActiveMarketingMessages_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : messages_()
  , time_next_message_age_(0u){}
struct CMarketingMessages_GetActiveMarketingMessages_ResponseDefaultTypeInternal {
  constexpr CMarketingMessages_GetActiveMarketingMessages_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMarketingMessages_GetActiveMarketingMessages_ResponseDefaultTypeInternal() {}
  union {
    CMarketingMessages_GetActiveMarketingMessages_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMarketingMessages_GetActiveMarketingMessages_ResponseDefaultTypeInternal _CMarketingMessages_GetActiveMarketingMessages_Response_default_instance_;
constexpr CMarketingMessages_GetMarketingMessagesForUser_Request::CMarketingMessages_GetMarketingMessagesForUser_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : country_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , context_(nullptr)
  , data_request_(nullptr)
  , include_seen_messages_(false)
  , elanguage_(0)
  , operating_system_(0)
  , client_package_version_(0){}
struct CMarketingMessages_GetMarketingMessagesForUser_RequestDefaultTypeInternal {
  constexpr CMarketingMessages_GetMarketingMessagesForUser_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMarketingMessages_GetMarketingMessagesForUser_RequestDefaultTypeInternal() {}
  union {
    CMarketingMessages_GetMarketingMessagesForUser_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMarketingMessages_GetMarketingMessagesForUser_RequestDefaultTypeInternal _CMarketingMessages_GetMarketingMessagesForUser_Request_default_instance_;
constexpr CDisplayMarketingMessage::CDisplayMarketingMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , associated_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , template_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , template_vars_json_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , associated_item_id_(nullptr)
  , associated_item_(nullptr)
  , gid_(uint64_t{0u})
  , type_(0)
{}
struct CDisplayMarketingMessageDefaultTypeInternal {
  constexpr CDisplayMarketingMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDisplayMarketingMessageDefaultTypeInternal() {}
  union {
    CDisplayMarketingMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDisplayMarketingMessageDefaultTypeInternal _CDisplayMarketingMessage_default_instance_;
constexpr CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser::CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(nullptr)
  , already_seen_(false){}
struct CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUserDefaultTypeInternal {
  constexpr CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUserDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUserDefaultTypeInternal() {}
  union {
    CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUserDefaultTypeInternal _CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser_default_instance_;
constexpr CMarketingMessages_GetMarketingMessagesForUser_Response::CMarketingMessages_GetMarketingMessagesForUser_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : messages_(){}
struct CMarketingMessages_GetMarketingMessagesForUser_ResponseDefaultTypeInternal {
  constexpr CMarketingMessages_GetMarketingMessagesForUser_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMarketingMessages_GetMarketingMessagesForUser_ResponseDefaultTypeInternal() {}
  union {
    CMarketingMessages_GetMarketingMessagesForUser_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMarketingMessages_GetMarketingMessagesForUser_ResponseDefaultTypeInternal _CMarketingMessages_GetMarketingMessagesForUser_Response_default_instance_;
constexpr CMarketingMessages_DoesUserHavePendingMarketingMessages_Request::CMarketingMessages_DoesUserHavePendingMarketingMessages_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : country_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , elanguage_(0)
  , operating_system_(0)
  , client_package_version_(0){}
struct CMarketingMessages_DoesUserHavePendingMarketingMessages_RequestDefaultTypeInternal {
  constexpr CMarketingMessages_DoesUserHavePendingMarketingMessages_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMarketingMessages_DoesUserHavePendingMarketingMessages_RequestDefaultTypeInternal() {}
  union {
    CMarketingMessages_DoesUserHavePendingMarketingMessages_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMarketingMessages_DoesUserHavePendingMarketingMessages_RequestDefaultTypeInternal _CMarketingMessages_DoesUserHavePendingMarketingMessages_Request_default_instance_;
constexpr CMarketingMessages_DoesUserHavePendingMarketingMessages_Response::CMarketingMessages_DoesUserHavePendingMarketingMessages_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : has_pending_messages_(false)
  , pending_message_count_(0){}
struct CMarketingMessages_DoesUserHavePendingMarketingMessages_ResponseDefaultTypeInternal {
  constexpr CMarketingMessages_DoesUserHavePendingMarketingMessages_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMarketingMessages_DoesUserHavePendingMarketingMessages_ResponseDefaultTypeInternal() {}
  union {
    CMarketingMessages_DoesUserHavePendingMarketingMessages_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMarketingMessages_DoesUserHavePendingMarketingMessages_ResponseDefaultTypeInternal _CMarketingMessages_DoesUserHavePendingMarketingMessages_Response_default_instance_;
constexpr CMarketingMessages_GetDisplayMarketingMessage_Request::CMarketingMessages_GetDisplayMarketingMessage_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : context_(nullptr)
  , data_request_(nullptr)
  , gid_(uint64_t{0u}){}
struct CMarketingMessages_GetDisplayMarketingMessage_RequestDefaultTypeInternal {
  constexpr CMarketingMessages_GetDisplayMarketingMessage_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMarketingMessages_GetDisplayMarketingMessage_RequestDefaultTypeInternal() {}
  union {
    CMarketingMessages_GetDisplayMarketingMessage_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMarketingMessages_GetDisplayMarketingMessage_RequestDefaultTypeInternal _CMarketingMessages_GetDisplayMarketingMessage_Request_default_instance_;
constexpr CMarketingMessages_GetDisplayMarketingMessage_Response::CMarketingMessages_GetDisplayMarketingMessage_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(nullptr){}
struct CMarketingMessages_GetDisplayMarketingMessage_ResponseDefaultTypeInternal {
  constexpr CMarketingMessages_GetDisplayMarketingMessage_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMarketingMessages_GetDisplayMarketingMessage_ResponseDefaultTypeInternal() {}
  union {
    CMarketingMessages_GetDisplayMarketingMessage_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMarketingMessages_GetDisplayMarketingMessage_ResponseDefaultTypeInternal _CMarketingMessages_GetDisplayMarketingMessage_Response_default_instance_;
constexpr CMarketingMessages_MarkMessageSeen_Notification::CMarketingMessages_MarkMessageSeen_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : gid_(uint64_t{0u})
  , display_index_(0u)
  , template_type_(0)
{}
struct CMarketingMessages_MarkMessageSeen_NotificationDefaultTypeInternal {
  constexpr CMarketingMessages_MarkMessageSeen_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMarketingMessages_MarkMessageSeen_NotificationDefaultTypeInternal() {}
  union {
    CMarketingMessages_MarkMessageSeen_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMarketingMessages_MarkMessageSeen_NotificationDefaultTypeInternal _CMarketingMessages_MarkMessageSeen_Notification_default_instance_;
constexpr CMarketingMessages_GetMarketingMessage_Request::CMarketingMessages_GetMarketingMessage_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : gid_(uint64_t{0u}){}
struct CMarketingMessages_GetMarketingMessage_RequestDefaultTypeInternal {
  constexpr CMarketingMessages_GetMarketingMessage_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMarketingMessages_GetMarketingMessage_RequestDefaultTypeInternal() {}
  union {
    CMarketingMessages_GetMarketingMessage_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMarketingMessages_GetMarketingMessage_RequestDefaultTypeInternal _CMarketingMessages_GetMarketingMessage_Request_default_instance_;
constexpr CMarketingMessages_GetMarketingMessage_Response::CMarketingMessages_GetMarketingMessage_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(nullptr){}
struct CMarketingMessages_GetMarketingMessage_ResponseDefaultTypeInternal {
  constexpr CMarketingMessages_GetMarketingMessage_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMarketingMessages_GetMarketingMessage_ResponseDefaultTypeInternal() {}
  union {
    CMarketingMessages_GetMarketingMessage_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMarketingMessages_GetMarketingMessage_ResponseDefaultTypeInternal _CMarketingMessages_GetMarketingMessage_Response_default_instance_;
constexpr CMarketingMessages_CreateMarketingMessage_Request::CMarketingMessages_CreateMarketingMessage_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(nullptr)
  , from_json_(false){}
struct CMarketingMessages_CreateMarketingMessage_RequestDefaultTypeInternal {
  constexpr CMarketingMessages_CreateMarketingMessage_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMarketingMessages_CreateMarketingMessage_RequestDefaultTypeInternal() {}
  union {
    CMarketingMessages_CreateMarketingMessage_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMarketingMessages_CreateMarketingMessage_RequestDefaultTypeInternal _CMarketingMessages_CreateMarketingMessage_Request_default_instance_;
constexpr CMarketingMessages_CreateMarketingMessage_Response::CMarketingMessages_CreateMarketingMessage_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : gid_(uint64_t{0u}){}
struct CMarketingMessages_CreateMarketingMessage_ResponseDefaultTypeInternal {
  constexpr CMarketingMessages_CreateMarketingMessage_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMarketingMessages_CreateMarketingMessage_ResponseDefaultTypeInternal() {}
  union {
    CMarketingMessages_CreateMarketingMessage_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMarketingMessages_CreateMarketingMessage_ResponseDefaultTypeInternal _CMarketingMessages_CreateMarketingMessage_Response_default_instance_;
constexpr CMarketingMessages_UpdateMarketingMessage_Request::CMarketingMessages_UpdateMarketingMessage_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(nullptr)
  , gid_(uint64_t{0u})
  , from_json_(false){}
struct CMarketingMessages_UpdateMarketingMessage_RequestDefaultTypeInternal {
  constexpr CMarketingMessages_UpdateMarketingMessage_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMarketingMessages_UpdateMarketingMessage_RequestDefaultTypeInternal() {}
  union {
    CMarketingMessages_UpdateMarketingMessage_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMarketingMessages_UpdateMarketingMessage_RequestDefaultTypeInternal _CMarketingMessages_UpdateMarketingMessage_Request_default_instance_;
constexpr CMarketingMessages_UpdateMarketingMessage_Response::CMarketingMessages_UpdateMarketingMessage_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMarketingMessages_UpdateMarketingMessage_ResponseDefaultTypeInternal {
  constexpr CMarketingMessages_UpdateMarketingMessage_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMarketingMessages_UpdateMarketingMessage_ResponseDefaultTypeInternal() {}
  union {
    CMarketingMessages_UpdateMarketingMessage_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMarketingMessages_UpdateMarketingMessage_ResponseDefaultTypeInternal _CMarketingMessages_UpdateMarketingMessage_Response_default_instance_;
constexpr CMarketingMessages_DeleteMarketingMessage_Request::CMarketingMessages_DeleteMarketingMessage_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : gid_(uint64_t{0u}){}
struct CMarketingMessages_DeleteMarketingMessage_RequestDefaultTypeInternal {
  constexpr CMarketingMessages_DeleteMarketingMessage_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMarketingMessages_DeleteMarketingMessage_RequestDefaultTypeInternal() {}
  union {
    CMarketingMessages_DeleteMarketingMessage_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMarketingMessages_DeleteMarketingMessage_RequestDefaultTypeInternal _CMarketingMessages_DeleteMarketingMessage_Request_default_instance_;
constexpr CMarketingMessages_DeleteMarketingMessage_Response::CMarketingMessages_DeleteMarketingMessage_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMarketingMessages_DeleteMarketingMessage_ResponseDefaultTypeInternal {
  constexpr CMarketingMessages_DeleteMarketingMessage_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMarketingMessages_DeleteMarketingMessage_ResponseDefaultTypeInternal() {}
  union {
    CMarketingMessages_DeleteMarketingMessage_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMarketingMessages_DeleteMarketingMessage_ResponseDefaultTypeInternal _CMarketingMessages_DeleteMarketingMessage_Response_default_instance_;
constexpr CMarketingMessages_FindMarketingMessages_Request::CMarketingMessages_FindMarketingMessages_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : gidlist_()
  , title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , gid_(uint64_t{0u})
  , lookup_type_(0)

  , message_type_(0)
{}
struct CMarketingMessages_FindMarketingMessages_RequestDefaultTypeInternal {
  constexpr CMarketingMessages_FindMarketingMessages_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMarketingMessages_FindMarketingMessages_RequestDefaultTypeInternal() {}
  union {
    CMarketingMessages_FindMarketingMessages_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMarketingMessages_FindMarketingMessages_RequestDefaultTypeInternal _CMarketingMessages_FindMarketingMessages_Request_default_instance_;
constexpr CMarketingMessages_FindMarketingMessages_Response::CMarketingMessages_FindMarketingMessages_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : messages_(){}
struct CMarketingMessages_FindMarketingMessages_ResponseDefaultTypeInternal {
  constexpr CMarketingMessages_FindMarketingMessages_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMarketingMessages_FindMarketingMessages_ResponseDefaultTypeInternal() {}
  union {
    CMarketingMessages_FindMarketingMessages_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMarketingMessages_FindMarketingMessages_ResponseDefaultTypeInternal _CMarketingMessages_FindMarketingMessages_Response_default_instance_;
constexpr CMarketingMessages_GetMarketingMessageViewerStats_Request::CMarketingMessages_GetMarketingMessageViewerStats_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : gid_(uint64_t{0u}){}
struct CMarketingMessages_GetMarketingMessageViewerStats_RequestDefaultTypeInternal {
  constexpr CMarketingMessages_GetMarketingMessageViewerStats_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMarketingMessages_GetMarketingMessageViewerStats_RequestDefaultTypeInternal() {}
  union {
    CMarketingMessages_GetMarketingMessageViewerStats_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMarketingMessages_GetMarketingMessageViewerStats_RequestDefaultTypeInternal _CMarketingMessages_GetMarketingMessageViewerStats_Request_default_instance_;
constexpr CMarketingMessageHourlyStats::CMarketingMessageHourlyStats(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rt_time_hour_(0u)
  , seen_count_(0u)
  , template_type_(0)

  , display_index_(0u){}
struct CMarketingMessageHourlyStatsDefaultTypeInternal {
  constexpr CMarketingMessageHourlyStatsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMarketingMessageHourlyStatsDefaultTypeInternal() {}
  union {
    CMarketingMessageHourlyStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMarketingMessageHourlyStatsDefaultTypeInternal _CMarketingMessageHourlyStats_default_instance_;
constexpr CMarketingMessages_GetMarketingMessageViewerStats_Response::CMarketingMessages_GetMarketingMessageViewerStats_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stats_(){}
struct CMarketingMessages_GetMarketingMessageViewerStats_ResponseDefaultTypeInternal {
  constexpr CMarketingMessages_GetMarketingMessageViewerStats_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMarketingMessages_GetMarketingMessageViewerStats_ResponseDefaultTypeInternal() {}
  union {
    CMarketingMessages_GetMarketingMessageViewerStats_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMarketingMessages_GetMarketingMessageViewerStats_ResponseDefaultTypeInternal _CMarketingMessages_GetMarketingMessageViewerStats_Response_default_instance_;
constexpr CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request::CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rt_start_time_(0u)
  , rt_end_time_(0u){}
struct CMarketingMessages_GetMarketingMessagesViewerRangeStats_RequestDefaultTypeInternal {
  constexpr CMarketingMessages_GetMarketingMessagesViewerRangeStats_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMarketingMessages_GetMarketingMessagesViewerRangeStats_RequestDefaultTypeInternal() {}
  union {
    CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMarketingMessages_GetMarketingMessagesViewerRangeStats_RequestDefaultTypeInternal _CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request_default_instance_;
constexpr CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response::CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stats_(){}
struct CMarketingMessages_GetMarketingMessagesViewerRangeStats_ResponseDefaultTypeInternal {
  constexpr CMarketingMessages_GetMarketingMessagesViewerRangeStats_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMarketingMessages_GetMarketingMessagesViewerRangeStats_ResponseDefaultTypeInternal() {}
  union {
    CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMarketingMessages_GetMarketingMessagesViewerRangeStats_ResponseDefaultTypeInternal _CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steammessages_5fmarketingmessages_2esteamclient_2eproto[27];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_steammessages_5fmarketingmessages_2esteamclient_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_steammessages_5fmarketingmessages_2esteamclient_2eproto[1];

const uint32_t TableStruct_steammessages_5fmarketingmessages_2esteamclient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_GetActiveMarketingMessages_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_GetActiveMarketingMessages_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_GetActiveMarketingMessages_Request, country_),
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_GetActiveMarketingMessages_Request, anonymous_user_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMarketingMessageProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMarketingMessageProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMarketingMessageProto, gid_),
  PROTOBUF_FIELD_OFFSET(::CMarketingMessageProto, title_),
  PROTOBUF_FIELD_OFFSET(::CMarketingMessageProto, type_),
  PROTOBUF_FIELD_OFFSET(::CMarketingMessageProto, visibility_),
  PROTOBUF_FIELD_OFFSET(::CMarketingMessageProto, priority_),
  PROTOBUF_FIELD_OFFSET(::CMarketingMessageProto, association_type_),
  PROTOBUF_FIELD_OFFSET(::CMarketingMessageProto, associated_id_),
  PROTOBUF_FIELD_OFFSET(::CMarketingMessageProto, associated_name_),
  PROTOBUF_FIELD_OFFSET(::CMarketingMessageProto, start_date_),
  PROTOBUF_FIELD_OFFSET(::CMarketingMessageProto, end_date_),
  PROTOBUF_FIELD_OFFSET(::CMarketingMessageProto, country_allow_),
  PROTOBUF_FIELD_OFFSET(::CMarketingMessageProto, country_deny_),
  PROTOBUF_FIELD_OFFSET(::CMarketingMessageProto, ownership_restrictions_overridden_),
  PROTOBUF_FIELD_OFFSET(::CMarketingMessageProto, must_own_appid_),
  PROTOBUF_FIELD_OFFSET(::CMarketingMessageProto, must_not_own_appid_),
  PROTOBUF_FIELD_OFFSET(::CMarketingMessageProto, must_own_packageid_),
  PROTOBUF_FIELD_OFFSET(::CMarketingMessageProto, must_not_own_packageid_),
  PROTOBUF_FIELD_OFFSET(::CMarketingMessageProto, must_have_launched_appid_),
  PROTOBUF_FIELD_OFFSET(::CMarketingMessageProto, additional_restrictions_),
  PROTOBUF_FIELD_OFFSET(::CMarketingMessageProto, template_type_),
  PROTOBUF_FIELD_OFFSET(::CMarketingMessageProto, template_vars_),
  PROTOBUF_FIELD_OFFSET(::CMarketingMessageProto, flags_),
  PROTOBUF_FIELD_OFFSET(::CMarketingMessageProto, creator_name_),
  PROTOBUF_FIELD_OFFSET(::CMarketingMessageProto, template_vars_json_),
  PROTOBUF_FIELD_OFFSET(::CMarketingMessageProto, additional_restrictions_json_),
  10,
  0,
  11,
  24,
  12,
  13,
  14,
  1,
  15,
  16,
  2,
  3,
  17,
  18,
  19,
  20,
  21,
  22,
  4,
  5,
  6,
  23,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_GetActiveMarketingMessages_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_GetActiveMarketingMessages_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_GetActiveMarketingMessages_Response, messages_),
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_GetActiveMarketingMessages_Response, time_next_message_age_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_GetMarketingMessagesForUser_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_GetMarketingMessagesForUser_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_GetMarketingMessagesForUser_Request, include_seen_messages_),
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_GetMarketingMessagesForUser_Request, country_code_),
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_GetMarketingMessagesForUser_Request, elanguage_),
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_GetMarketingMessagesForUser_Request, operating_system_),
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_GetMarketingMessagesForUser_Request, client_package_version_),
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_GetMarketingMessagesForUser_Request, context_),
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_GetMarketingMessagesForUser_Request, data_request_),
  3,
  0,
  4,
  5,
  6,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CDisplayMarketingMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDisplayMarketingMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDisplayMarketingMessage, gid_),
  PROTOBUF_FIELD_OFFSET(::CDisplayMarketingMessage, title_),
  PROTOBUF_FIELD_OFFSET(::CDisplayMarketingMessage, type_),
  PROTOBUF_FIELD_OFFSET(::CDisplayMarketingMessage, associated_item_id_),
  PROTOBUF_FIELD_OFFSET(::CDisplayMarketingMessage, associated_item_),
  PROTOBUF_FIELD_OFFSET(::CDisplayMarketingMessage, associated_name_),
  PROTOBUF_FIELD_OFFSET(::CDisplayMarketingMessage, template_type_),
  PROTOBUF_FIELD_OFFSET(::CDisplayMarketingMessage, template_vars_json_),
  6,
  0,
  7,
  4,
  5,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser, already_seen_),
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser, message_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_GetMarketingMessagesForUser_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_GetMarketingMessagesForUser_Response, messages_),
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_DoesUserHavePendingMarketingMessages_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_DoesUserHavePendingMarketingMessages_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_DoesUserHavePendingMarketingMessages_Request, country_code_),
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_DoesUserHavePendingMarketingMessages_Request, elanguage_),
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_DoesUserHavePendingMarketingMessages_Request, operating_system_),
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_DoesUserHavePendingMarketingMessages_Request, client_package_version_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_DoesUserHavePendingMarketingMessages_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_DoesUserHavePendingMarketingMessages_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_DoesUserHavePendingMarketingMessages_Response, has_pending_messages_),
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_DoesUserHavePendingMarketingMessages_Response, pending_message_count_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_GetDisplayMarketingMessage_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_GetDisplayMarketingMessage_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_GetDisplayMarketingMessage_Request, gid_),
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_GetDisplayMarketingMessage_Request, context_),
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_GetDisplayMarketingMessage_Request, data_request_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_GetDisplayMarketingMessage_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_GetDisplayMarketingMessage_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_GetDisplayMarketingMessage_Response, message_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_MarkMessageSeen_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_MarkMessageSeen_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_MarkMessageSeen_Notification, gid_),
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_MarkMessageSeen_Notification, display_index_),
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_MarkMessageSeen_Notification, template_type_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_GetMarketingMessage_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_GetMarketingMessage_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_GetMarketingMessage_Request, gid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_GetMarketingMessage_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_GetMarketingMessage_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_GetMarketingMessage_Response, message_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_CreateMarketingMessage_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_CreateMarketingMessage_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_CreateMarketingMessage_Request, message_),
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_CreateMarketingMessage_Request, from_json_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_CreateMarketingMessage_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_CreateMarketingMessage_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_CreateMarketingMessage_Response, gid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_UpdateMarketingMessage_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_UpdateMarketingMessage_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_UpdateMarketingMessage_Request, gid_),
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_UpdateMarketingMessage_Request, message_),
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_UpdateMarketingMessage_Request, from_json_),
  1,
  0,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_UpdateMarketingMessage_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_DeleteMarketingMessage_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_DeleteMarketingMessage_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_DeleteMarketingMessage_Request, gid_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_DeleteMarketingMessage_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_FindMarketingMessages_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_FindMarketingMessages_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_FindMarketingMessages_Request, lookup_type_),
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_FindMarketingMessages_Request, gid_),
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_FindMarketingMessages_Request, message_type_),
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_FindMarketingMessages_Request, gidlist_),
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_FindMarketingMessages_Request, title_),
  2,
  1,
  3,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_FindMarketingMessages_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_FindMarketingMessages_Response, messages_),
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_GetMarketingMessageViewerStats_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_GetMarketingMessageViewerStats_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_GetMarketingMessageViewerStats_Request, gid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMarketingMessageHourlyStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMarketingMessageHourlyStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMarketingMessageHourlyStats, rt_time_hour_),
  PROTOBUF_FIELD_OFFSET(::CMarketingMessageHourlyStats, seen_count_),
  PROTOBUF_FIELD_OFFSET(::CMarketingMessageHourlyStats, template_type_),
  PROTOBUF_FIELD_OFFSET(::CMarketingMessageHourlyStats, display_index_),
  0,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_GetMarketingMessageViewerStats_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_GetMarketingMessageViewerStats_Response, stats_),
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request, rt_start_time_),
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request, rt_end_time_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response, stats_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::CMarketingMessages_GetActiveMarketingMessages_Request)},
  { 10, 41, -1, sizeof(::CMarketingMessageProto)},
  { 66, 74, -1, sizeof(::CMarketingMessages_GetActiveMarketingMessages_Response)},
  { 76, 89, -1, sizeof(::CMarketingMessages_GetMarketingMessagesForUser_Request)},
  { 96, 110, -1, sizeof(::CDisplayMarketingMessage)},
  { 118, 126, -1, sizeof(::CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser)},
  { 128, -1, -1, sizeof(::CMarketingMessages_GetMarketingMessagesForUser_Response)},
  { 135, 145, -1, sizeof(::CMarketingMessages_DoesUserHavePendingMarketingMessages_Request)},
  { 149, 157, -1, sizeof(::CMarketingMessages_DoesUserHavePendingMarketingMessages_Response)},
  { 159, 168, -1, sizeof(::CMarketingMessages_GetDisplayMarketingMessage_Request)},
  { 171, 178, -1, sizeof(::CMarketingMessages_GetDisplayMarketingMessage_Response)},
  { 179, 188, -1, sizeof(::CMarketingMessages_MarkMessageSeen_Notification)},
  { 191, 198, -1, sizeof(::CMarketingMessages_GetMarketingMessage_Request)},
  { 199, 206, -1, sizeof(::CMarketingMessages_GetMarketingMessage_Response)},
  { 207, 215, -1, sizeof(::CMarketingMessages_CreateMarketingMessage_Request)},
  { 217, 224, -1, sizeof(::CMarketingMessages_CreateMarketingMessage_Response)},
  { 225, 234, -1, sizeof(::CMarketingMessages_UpdateMarketingMessage_Request)},
  { 237, -1, -1, sizeof(::CMarketingMessages_UpdateMarketingMessage_Response)},
  { 243, 250, -1, sizeof(::CMarketingMessages_DeleteMarketingMessage_Request)},
  { 251, -1, -1, sizeof(::CMarketingMessages_DeleteMarketingMessage_Response)},
  { 257, 268, -1, sizeof(::CMarketingMessages_FindMarketingMessages_Request)},
  { 273, -1, -1, sizeof(::CMarketingMessages_FindMarketingMessages_Response)},
  { 280, 287, -1, sizeof(::CMarketingMessages_GetMarketingMessageViewerStats_Request)},
  { 288, 298, -1, sizeof(::CMarketingMessageHourlyStats)},
  { 302, -1, -1, sizeof(::CMarketingMessages_GetMarketingMessageViewerStats_Response)},
  { 309, 317, -1, sizeof(::CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request)},
  { 319, -1, -1, sizeof(::CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMarketingMessages_GetActiveMarketingMessages_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMarketingMessageProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMarketingMessages_GetActiveMarketingMessages_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMarketingMessages_GetMarketingMessagesForUser_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDisplayMarketingMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMarketingMessages_GetMarketingMessagesForUser_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMarketingMessages_DoesUserHavePendingMarketingMessages_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMarketingMessages_DoesUserHavePendingMarketingMessages_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMarketingMessages_GetDisplayMarketingMessage_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMarketingMessages_GetDisplayMarketingMessage_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMarketingMessages_MarkMessageSeen_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMarketingMessages_GetMarketingMessage_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMarketingMessages_GetMarketingMessage_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMarketingMessages_CreateMarketingMessage_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMarketingMessages_CreateMarketingMessage_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMarketingMessages_UpdateMarketingMessage_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMarketingMessages_UpdateMarketingMessage_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMarketingMessages_DeleteMarketingMessage_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMarketingMessages_DeleteMarketingMessage_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMarketingMessages_FindMarketingMessages_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMarketingMessages_FindMarketingMessages_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMarketingMessages_GetMarketingMessageViewerStats_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMarketingMessageHourlyStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMarketingMessages_GetMarketingMessageViewerStats_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response_default_instance_),
};

const char descriptor_table_protodef_steammessages_5fmarketingmessages_2esteamclient_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n1steammessages_marketingmessages.steamc"
  "lient.proto\032\030steammessages_base.proto\032,s"
  "teammessages_unified_base.steamclient.pr"
  "oto\032+steammessages_storebrowse.steamclie"
  "nt.proto\"\265\001\n5CMarketingMessages_GetActiv"
  "eMarketingMessages_Request\022\017\n\007country\030\001 "
  "\001(\t\022k\n\016anonymous_user\030\002 \001(\010BS\202\265\030OWill no"
  "t return any marketing message that requ"
  "ires ownership/playtime/wishlist\"\257\006\n\026CMa"
  "rketingMessageProto\022\013\n\003gid\030\001 \001(\006\022\r\n\005titl"
  "e\030\002 \001(\t\022@\n\004type\030\003 \001(\0162\026.EMarketingMessag"
  "eType:\032k_EMarketingMessageInvalid\022P\n\nvis"
  "ibility\030\004 \001(\0162\034.EMarketingMessageVisibil"
  "ity:\036k_EMarketingMessageVisibleBeta\022\020\n\010p"
  "riority\030\005 \001(\r\022]\n\020association_type\030\006 \001(\0162"
  "!.EMarketingMessageAssociationType: k_EM"
  "arketingMessageNoAssociation\022\025\n\rassociat"
  "ed_id\030\007 \001(\r\022\027\n\017associated_name\030\010 \001(\t\022\022\n\n"
  "start_date\030\t \001(\r\022\020\n\010end_date\030\n \001(\r\022\025\n\rco"
  "untry_allow\030\013 \001(\t\022\024\n\014country_deny\030\014 \001(\t\022"
  ")\n!ownership_restrictions_overridden\030\r \001"
  "(\010\022\026\n\016must_own_appid\030\016 \001(\r\022\032\n\022must_not_o"
  "wn_appid\030\017 \001(\r\022\032\n\022must_own_packageid\030\020 \001"
  "(\r\022\036\n\026must_not_own_packageid\030\021 \001(\r\022 \n\030mu"
  "st_have_launched_appid\030\022 \001(\r\022\037\n\027addition"
  "al_restrictions\030\023 \001(\t\022\025\n\rtemplate_type\030\024"
  " \001(\t\022\025\n\rtemplate_vars\030\025 \001(\t\022\r\n\005flags\030\026 \001"
  "(\r\022\024\n\014creator_name\030\027 \001(\t\022\032\n\022template_var"
  "s_json\030\030 \001(\t\022$\n\034additional_restrictions_"
  "json\030\031 \001(\t\"\202\001\n6CMarketingMessages_GetAct"
  "iveMarketingMessages_Response\022)\n\010message"
  "s\030\001 \003(\0132\027.CMarketingMessageProto\022\035\n\025time"
  "_next_message_age\030\002 \001(\r\"\237\003\n6CMarketingMe"
  "ssages_GetMarketingMessagesForUser_Reque"
  "st\022\035\n\025include_seen_messages\030\001 \001(\010\022\024\n\014cou"
  "ntry_code\030\002 \001(\t\022\021\n\telanguage\030\003 \001(\005\0221\n\020op"
  "erating_system\030\004 \001(\005B\027\202\265\030\023EOSType from c"
  "lient\022\036\n\026client_package_version\030\005 \001(\005\022l\n"
  "\007context\030\006 \001(\0132\023.StoreBrowseContextBF\202\265\030"
  "BOptional, server can fill in from count"
  "ry code/language if not set\022\\\n\014data_requ"
  "est\030\007 \001(\0132\033.StoreBrowseItemDataRequestB)"
  "\202\265\030%If passed, item data will be returne"
  "d\"\223\002\n\030CDisplayMarketingMessage\022\013\n\003gid\030\001 "
  "\001(\006\022\r\n\005title\030\002 \001(\t\022@\n\004type\030\003 \001(\0162\026.EMark"
  "etingMessageType:\032k_EMarketingMessageInv"
  "alid\022(\n\022associated_item_id\030\004 \001(\0132\014.Store"
  "ItemID\022#\n\017associated_item\030\005 \001(\0132\n.StoreI"
  "tem\022\027\n\017associated_name\030\006 \001(\t\022\025\n\rtemplate"
  "_type\030\n \001(\t\022\032\n\022template_vars_json\030\013 \001(\t\""
  "\372\001\n7CMarketingMessages_GetMarketingMessa"
  "gesForUser_Response\022b\n\010messages\030\001 \003(\0132P."
  "CMarketingMessages_GetMarketingMessagesF"
  "orUser_Response.MarketingMessageForUser\032"
  "[\n\027MarketingMessageForUser\022\024\n\014already_se"
  "en\030\001 \001(\010\022*\n\007message\030\002 \001(\0132\031.CDisplayMark"
  "etingMessage\"\275\001\n\?CMarketingMessages_Does"
  "UserHavePendingMarketingMessages_Request"
  "\022\024\n\014country_code\030\002 \001(\t\022\021\n\telanguage\030\003 \001("
  "\005\0221\n\020operating_system\030\004 \001(\005B\027\202\265\030\023EOSType"
  " from client\022\036\n\026client_package_version\030\005"
  " \001(\005\"\177\n@CMarketingMessages_DoesUserHaveP"
  "endingMarketingMessages_Response\022\034\n\024has_"
  "pending_messages\030\001 \001(\010\022\035\n\025pending_messag"
  "e_count\030\002 \001(\005\"\310\001\n5CMarketingMessages_Get"
  "DisplayMarketingMessage_Request\022\013\n\003gid\030\001"
  " \001(\006\022$\n\007context\030\002 \001(\0132\023.StoreBrowseConte"
  "xt\022\\\n\014data_request\030\003 \001(\0132\033.StoreBrowseIt"
  "emDataRequestB)\202\265\030%If passed, item data "
  "will be returned\"d\n6CMarketingMessages_G"
  "etDisplayMarketingMessage_Response\022*\n\007me"
  "ssage\030\001 \001(\0132\031.CDisplayMarketingMessage\"\263"
  "\002\n/CMarketingMessages_MarkMessageSeen_No"
  "tification\022\013\n\003gid\030\001 \001(\006\022m\n\rdisplay_index"
  "\030\002 \001(\r:\0010BS\202\265\030OWhere in the stack was th"
  "e marketing message, 1-based, zero means"
  " we don\'t know\022\203\001\n\rtemplate_type\030\003 \001(\0162\036"
  ".EMarketingMessageTemplateType:#k_EMarke"
  "tingMessageTemplate_UnknownB\'\202\265\030#Which t"
  "ype of template did they see\"=\n.CMarketi"
  "ngMessages_GetMarketingMessage_Request\022\013"
  "\n\003gid\030\001 \001(\006\"[\n/CMarketingMessages_GetMar"
  "ketingMessage_Response\022(\n\007message\030\001 \001(\0132"
  "\027.CMarketingMessageProto\"\316\001\n1CMarketingM"
  "essages_CreateMarketingMessage_Request\022("
  "\n\007message\030\001 \001(\0132\027.CMarketingMessageProto"
  "\022o\n\tfrom_json\030\002 \001(\010B\\\202\265\030XIf set, then ov"
  "erwrite the template_vars and additional"
  "_restrictions keyvalues from json\"A\n2CMa"
  "rketingMessages_CreateMarketingMessage_R"
  "esponse\022\013\n\003gid\030\001 \001(\006\"\333\001\n1CMarketingMessa"
  "ges_UpdateMarketingMessage_Request\022\013\n\003gi"
  "d\030\001 \001(\006\022(\n\007message\030\002 \001(\0132\027.CMarketingMes"
  "sageProto\022o\n\tfrom_json\030\003 \001(\010B\\\202\265\030XIf set"
  ", then overwrite the template_vars and a"
  "dditional_restrictions keyvalues from js"
  "on\"4\n2CMarketingMessages_UpdateMarketing"
  "Message_Response\"@\n1CMarketingMessages_D"
  "eleteMarketingMessage_Request\022\013\n\003gid\030\001 \001"
  "(\006\"4\n2CMarketingMessages_DeleteMarketing"
  "Message_Response\"\376\001\n0CMarketingMessages_"
  "FindMarketingMessages_Request\022S\n\013lookup_"
  "type\030\001 \001(\0162\034.EMarketingMessageLookupType"
  ": k_EMarketingMessageLookupInvalid\022\013\n\003gi"
  "d\030\002 \001(\006\022H\n\014message_type\030\003 \001(\0162\026.EMarketi"
  "ngMessageType:\032k_EMarketingMessageInvali"
  "d\022\017\n\007gidlist\030\004 \003(\006\022\r\n\005title\030\005 \001(\t\"^\n1CMa"
  "rketingMessages_FindMarketingMessages_Re"
  "sponse\022)\n\010messages\030\001 \003(\0132\027.CMarketingMes"
  "sageProto\"H\n9CMarketingMessages_GetMarke"
  "tingMessageViewerStats_Request\022\013\n\003gid\030\001 "
  "\001(\006\"\315\002\n\034CMarketingMessageHourlyStats\022\024\n\014"
  "rt_time_hour\030\001 \001(\r\022.\n\nseen_count\030\002 \001(\rB\032"
  "\202\265\030\026within the hour period\022\221\001\n\rtemplate_"
  "type\030\003 \001(\0162\036.EMarketingMessageTemplateTy"
  "pe:#k_EMarketingMessageTemplate_UnknownB"
  "5\202\265\0301Which template type was shown, usua"
  "lly just IMAGE\022S\n\rdisplay_index\030\004 \001(\rB<\202"
  "\265\0308Zero is invalid/we don\'t have informa"
  "tion; 1 based index\"j\n:CMarketingMessage"
  "s_GetMarketingMessageViewerStats_Respons"
  "e\022,\n\005stats\030\001 \003(\0132\035.CMarketingMessageHour"
  "lyStats\"m\n\?CMarketingMessages_GetMarketi"
  "ngMessagesViewerRangeStats_Request\022\025\n\rrt"
  "_start_time\030\001 \001(\r\022\023\n\013rt_end_time\030\002 \001(\r\"\235"
  "\001\n@CMarketingMessages_GetMarketingMessag"
  "esViewerRangeStats_Response\022Y\n\005stats\030\001 \003"
  "(\0132\035.CMarketingMessageHourlyStatsB+\202\265\030\'F"
  "latterns results for the range of time*\317"
  "\003\n\025EMarketingMessageType\022\036\n\032k_EMarketing"
  "MessageInvalid\020\000\022#\n\037k_EMarketingMessageN"
  "owAvailable\020\001\022\"\n\036k_EMarketingMessageWeek"
  "endDeal\020\002\022\"\n\036k_EMarketingMessagePrePurch"
  "ase\020\003\022\036\n\032k_EMarketingMessagePlayNow\020\004\022!\n"
  "\035k_EMarketingMessagePreloadNow\020\005\022\036\n\032k_EM"
  "arketingMessageGeneral\020\006\022\037\n\033k_EMarketing"
  "MessageDemoQuit\020\007\022\036\n\032k_EMarketingMessage"
  "Gifting\020\010\022 \n\034k_EMarketingMessageEJsKorne"
  "r\020\t\022\035\n\031k_EMarketingMessageUpdate\020\n\022\"\n\036k_"
  "EMarketingMessageMidweekDeal\020\013\022 \n\034k_EMar"
  "ketingMessageDailyDeal\020\014*g\n\033EMarketingMe"
  "ssageVisibility\022\"\n\036k_EMarketingMessageVi"
  "sibleBeta\020\001\022$\n k_EMarketingMessageVisibl"
  "ePublic\020\002*\237\002\n EMarketingMessageAssociati"
  "onType\022$\n k_EMarketingMessageNoAssociati"
  "on\020\000\022%\n!k_EMarketingMessageAppAssociatio"
  "n\020\001\022.\n*k_EMarketingMessageSubscriptionAs"
  "sociation\020\002\022+\n\'k_EMarketingMessagePublis"
  "herAssociation\020\003\022\'\n#k_EMarketingMessageG"
  "enreAssociation\020\004\022(\n$k_EMarketingMessage"
  "BundleAssociation\020\005*\304\002\n\035EMarketingMessag"
  "eTemplateType\022\'\n#k_EMarketingMessageTemp"
  "late_Unknown\020\000\022%\n!k_EMarketingMessageTem"
  "plate_Image\020\001\022(\n$k_EMarketingMessageTemp"
  "late_Animated\020\002\022.\n*k_EMarketingMessageTe"
  "mplate_Featured_Video\020\003\022,\n(k_EMarketingM"
  "essageTemplate_DLC_Override\020\004\022&\n\"k_EMark"
  "etingMessageTemplate_Replay\020\005\022#\n\037k_EMark"
  "etingMessageTemplate_MAX\020\006*\342\001\n\033EMarketin"
  "gMessageLookupType\022$\n k_EMarketingMessag"
  "eLookupInvalid\020\000\022\"\n\036k_EMarketingMessageL"
  "ookupByGID\020\001\022#\n\037k_EMarketingMessageLooku"
  "pActive\020\002\022,\n(k_EMarketingMessageLookupBy"
  "TitleWithType\020\003\022&\n\"k_EMarketingMessageLo"
  "okupByGIDList\020\0042\310\025\n\021MarketingMessages\022\273\001"
  "\n\032GetActiveMarketingMessages\0226.CMarketin"
  "gMessages_GetActiveMarketingMessages_Req"
  "uest\0327.CMarketingMessages_GetActiveMarke"
  "tingMessages_Response\",\202\265\030(Get a list of"
  " active marketing messages.\022\333\001\n\033GetMarke"
  "tingMessagesForUser\0227.CMarketingMessages"
  "_GetMarketingMessagesForUser_Request\0328.C"
  "MarketingMessages_GetMarketingMessagesFo"
  "rUser_Response\"I\202\265\030EGet a list of active"
  " marketing messages filtered for a speci"
  "fic user.\022\204\002\n$DoesUserHavePendingMarketi"
  "ngMessages\022@.CMarketingMessages_DoesUser"
  "HavePendingMarketingMessages_Request\032A.C"
  "MarketingMessages_DoesUserHavePendingMar"
  "ketingMessages_Response\"W\202\265\030SReturns a b"
  "oolean if the user has pending marketing"
  " messages.  Intended to be fast.\022\275\001\n\032Get"
  "DisplayMarketingMessage\0226.CMarketingMess"
  "ages_GetDisplayMarketingMessage_Request\032"
  "7.CMarketingMessages_GetDisplayMarketing"
  "Message_Response\".\202\265\030*Get a single marke"
  "ting message, cacheable.\022\320\001\n\037GetDisplayM"
  "arketingMessageAdmin\0226.CMarketingMessage"
  "s_GetDisplayMarketingMessage_Request\0327.C"
  "MarketingMessages_GetDisplayMarketingMes"
  "sage_Response\"<\202\265\0308Get a single marketin"
  "g message for Admin, not cacheable.\022\231\001\n\017"
  "MarkMessageSeen\0220.CMarketingMessages_Mar"
  "kMessageSeen_Notification\032\013.NoResponse\"G"
  "\202\265\030CMark that a user has viewed a messag"
  "e (so we won\'t show it again)\'.\022\313\001\n\023GetM"
  "arketingMessage\022/.CMarketingMessages_Get"
  "MarketingMessage_Request\0320.CMarketingMes"
  "sages_GetMarketingMessage_Response\"Q\202\265\030M"
  "Get a single marketing message.  Admin a"
  "ccount needed for non-active messages\022\246\001"
  "\n\026CreateMarketingMessage\0222.CMarketingMes"
  "sages_CreateMarketingMessage_Request\0323.C"
  "MarketingMessages_CreateMarketingMessage"
  "_Response\"#\202\265\030\037Create a new marketing me"
  "ssage.\022\242\001\n\026UpdateMarketingMessage\0222.CMar"
  "ketingMessages_UpdateMarketingMessage_Re"
  "quest\0323.CMarketingMessages_UpdateMarketi"
  "ngMessage_Response\"\037\202\265\030\033Modify a marketi"
  "ng message.\022\242\001\n\026DeleteMarketingMessage\0222"
  ".CMarketingMessages_DeleteMarketingMessa"
  "ge_Request\0323.CMarketingMessages_DeleteMa"
  "rketingMessage_Response\"\037\202\265\030\033Delete a ma"
  "rketing message.\022\265\001\n\025FindMarketingMessag"
  "es\0221.CMarketingMessages_FindMarketingMes"
  "sages_Request\0322.CMarketingMessages_FindM"
  "arketingMessages_Response\"5\202\265\0301Search fo"
  "r marketing messages by name, type, etc."
  "\022\241\002\n\036GetMarketingMessageViewerStats\022:.CM"
  "arketingMessages_GetMarketingMessageView"
  "erStats_Request\032;.CMarketingMessages_Get"
  "MarketingMessageViewerStats_Response\"\205\001\202"
  "\265\030\200\001For a specific marketing message, th"
  "en all of the viewership stats for the d"
  "ate range it was intended to be visible "
  "to customers\022\375\001\n$GetMarketingMessagesVie"
  "werRangeStats\022@.CMarketingMessages_GetMa"
  "rketingMessagesViewerRangeStats_Request\032"
  "A.CMarketingMessages_GetMarketingMessage"
  "sViewerRangeStats_Response\"P\202\265\030LFor a ti"
  "me range, return the seen stats across a"
  "ll of the marketing messages\032D\202\265\030@Market"
  "ing message data (\"Steam News\" updates a"
  "t client startup).B\003\200\001\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_steammessages_5fmarketingmessages_2esteamclient_2eproto_deps[3] = {
  &::descriptor_table_steammessages_5fbase_2eproto,
  &::descriptor_table_steammessages_5fstorebrowse_2esteamclient_2eproto,
  &::descriptor_table_steammessages_5funified_5fbase_2esteamclient_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steammessages_5fmarketingmessages_2esteamclient_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fmarketingmessages_2esteamclient_2eproto = {
  false, false, 9343, descriptor_table_protodef_steammessages_5fmarketingmessages_2esteamclient_2eproto, "steammessages_marketingmessages.steamclient.proto", 
  &descriptor_table_steammessages_5fmarketingmessages_2esteamclient_2eproto_once, descriptor_table_steammessages_5fmarketingmessages_2esteamclient_2eproto_deps, 3, 27,
  schemas, file_default_instances, TableStruct_steammessages_5fmarketingmessages_2esteamclient_2eproto::offsets,
  file_level_metadata_steammessages_5fmarketingmessages_2esteamclient_2eproto, file_level_enum_descriptors_steammessages_5fmarketingmessages_2esteamclient_2eproto, file_level_service_descriptors_steammessages_5fmarketingmessages_2esteamclient_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_steammessages_5fmarketingmessages_2esteamclient_2eproto_getter() {
  return &descriptor_table_steammessages_5fmarketingmessages_2esteamclient_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_steammessages_5fmarketingmessages_2esteamclient_2eproto(&descriptor_table_steammessages_5fmarketingmessages_2esteamclient_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMarketingMessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fmarketingmessages_2esteamclient_2eproto);
  return file_level_enum_descriptors_steammessages_5fmarketingmessages_2esteamclient_2eproto[0];
}
bool EMarketingMessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMarketingMessageVisibility_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fmarketingmessages_2esteamclient_2eproto);
  return file_level_enum_descriptors_steammessages_5fmarketingmessages_2esteamclient_2eproto[1];
}
bool EMarketingMessageVisibility_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMarketingMessageAssociationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fmarketingmessages_2esteamclient_2eproto);
  return file_level_enum_descriptors_steammessages_5fmarketingmessages_2esteamclient_2eproto[2];
}
bool EMarketingMessageAssociationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMarketingMessageTemplateType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fmarketingmessages_2esteamclient_2eproto);
  return file_level_enum_descriptors_steammessages_5fmarketingmessages_2esteamclient_2eproto[3];
}
bool EMarketingMessageTemplateType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMarketingMessageLookupType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fmarketingmessages_2esteamclient_2eproto);
  return file_level_enum_descriptors_steammessages_5fmarketingmessages_2esteamclient_2eproto[4];
}
bool EMarketingMessageLookupType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CMarketingMessages_GetActiveMarketingMessages_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CMarketingMessages_GetActiveMarketingMessages_Request>()._has_bits_);
  static void set_has_country(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_anonymous_user(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMarketingMessages_GetActiveMarketingMessages_Request::CMarketingMessages_GetActiveMarketingMessages_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMarketingMessages_GetActiveMarketingMessages_Request)
}
CMarketingMessages_GetActiveMarketingMessages_Request::CMarketingMessages_GetActiveMarketingMessages_Request(const CMarketingMessages_GetActiveMarketingMessages_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    country_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_country()) {
    country_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_country(), 
      GetArenaForAllocation());
  }
  anonymous_user_ = from.anonymous_user_;
  // @@protoc_insertion_point(copy_constructor:CMarketingMessages_GetActiveMarketingMessages_Request)
}

inline void CMarketingMessages_GetActiveMarketingMessages_Request::SharedCtor() {
country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  country_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
anonymous_user_ = false;
}

CMarketingMessages_GetActiveMarketingMessages_Request::~CMarketingMessages_GetActiveMarketingMessages_Request() {
  // @@protoc_insertion_point(destructor:CMarketingMessages_GetActiveMarketingMessages_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMarketingMessages_GetActiveMarketingMessages_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  country_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMarketingMessages_GetActiveMarketingMessages_Request::ArenaDtor(void* object) {
  CMarketingMessages_GetActiveMarketingMessages_Request* _this = reinterpret_cast< CMarketingMessages_GetActiveMarketingMessages_Request* >(object);
  (void)_this;
}
void CMarketingMessages_GetActiveMarketingMessages_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMarketingMessages_GetActiveMarketingMessages_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMarketingMessages_GetActiveMarketingMessages_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CMarketingMessages_GetActiveMarketingMessages_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    country_.ClearNonDefaultToEmpty();
  }
  anonymous_user_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMarketingMessages_GetActiveMarketingMessages_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string country = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_country();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMarketingMessages_GetActiveMarketingMessages_Request.country");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool anonymous_user = 2 [(.description) = "Will not return any marketing message that requires ownership/playtime/wishlist"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_anonymous_user(&has_bits);
          anonymous_user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMarketingMessages_GetActiveMarketingMessages_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMarketingMessages_GetActiveMarketingMessages_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string country = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_country().data(), static_cast<int>(this->_internal_country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMarketingMessages_GetActiveMarketingMessages_Request.country");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_country(), target);
  }

  // optional bool anonymous_user = 2 [(.description) = "Will not return any marketing message that requires ownership/playtime/wishlist"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_anonymous_user(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMarketingMessages_GetActiveMarketingMessages_Request)
  return target;
}

size_t CMarketingMessages_GetActiveMarketingMessages_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMarketingMessages_GetActiveMarketingMessages_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string country = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_country());
    }

    // optional bool anonymous_user = 2 [(.description) = "Will not return any marketing message that requires ownership/playtime/wishlist"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMarketingMessages_GetActiveMarketingMessages_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMarketingMessages_GetActiveMarketingMessages_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMarketingMessages_GetActiveMarketingMessages_Request::GetClassData() const { return &_class_data_; }

void CMarketingMessages_GetActiveMarketingMessages_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMarketingMessages_GetActiveMarketingMessages_Request *>(to)->MergeFrom(
      static_cast<const CMarketingMessages_GetActiveMarketingMessages_Request &>(from));
}


void CMarketingMessages_GetActiveMarketingMessages_Request::MergeFrom(const CMarketingMessages_GetActiveMarketingMessages_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMarketingMessages_GetActiveMarketingMessages_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_country(from._internal_country());
    }
    if (cached_has_bits & 0x00000002u) {
      anonymous_user_ = from.anonymous_user_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMarketingMessages_GetActiveMarketingMessages_Request::CopyFrom(const CMarketingMessages_GetActiveMarketingMessages_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMarketingMessages_GetActiveMarketingMessages_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMarketingMessages_GetActiveMarketingMessages_Request::IsInitialized() const {
  return true;
}

void CMarketingMessages_GetActiveMarketingMessages_Request::InternalSwap(CMarketingMessages_GetActiveMarketingMessages_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &country_, lhs_arena,
      &other->country_, rhs_arena
  );
  swap(anonymous_user_, other->anonymous_user_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMarketingMessages_GetActiveMarketingMessages_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fmarketingmessages_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fmarketingmessages_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fmarketingmessages_2esteamclient_2eproto[0]);
}

// ===================================================================

class CMarketingMessageProto::_Internal {
 public:
  using HasBits = decltype(std::declval<CMarketingMessageProto>()._has_bits_);
  static void set_has_gid(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_visibility(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_association_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_associated_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_associated_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_start_date(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_end_date(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_country_allow(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_country_deny(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ownership_restrictions_overridden(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_must_own_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_must_not_own_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_must_own_packageid(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_must_not_own_packageid(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_must_have_launched_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_additional_restrictions(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_template_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_template_vars(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_creator_name(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_template_vars_json(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_additional_restrictions_json(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

CMarketingMessageProto::CMarketingMessageProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMarketingMessageProto)
}
CMarketingMessageProto::CMarketingMessageProto(const CMarketingMessageProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArenaForAllocation());
  }
  associated_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    associated_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_associated_name()) {
    associated_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_associated_name(), 
      GetArenaForAllocation());
  }
  country_allow_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    country_allow_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_country_allow()) {
    country_allow_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_country_allow(), 
      GetArenaForAllocation());
  }
  country_deny_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    country_deny_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_country_deny()) {
    country_deny_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_country_deny(), 
      GetArenaForAllocation());
  }
  additional_restrictions_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    additional_restrictions_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_additional_restrictions()) {
    additional_restrictions_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_additional_restrictions(), 
      GetArenaForAllocation());
  }
  template_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    template_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_template_type()) {
    template_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_template_type(), 
      GetArenaForAllocation());
  }
  template_vars_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    template_vars_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_template_vars()) {
    template_vars_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_template_vars(), 
      GetArenaForAllocation());
  }
  creator_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    creator_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_creator_name()) {
    creator_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_creator_name(), 
      GetArenaForAllocation());
  }
  template_vars_json_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    template_vars_json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_template_vars_json()) {
    template_vars_json_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_template_vars_json(), 
      GetArenaForAllocation());
  }
  additional_restrictions_json_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    additional_restrictions_json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_additional_restrictions_json()) {
    additional_restrictions_json_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_additional_restrictions_json(), 
      GetArenaForAllocation());
  }
  ::memcpy(&gid_, &from.gid_,
    static_cast<size_t>(reinterpret_cast<char*>(&visibility_) -
    reinterpret_cast<char*>(&gid_)) + sizeof(visibility_));
  // @@protoc_insertion_point(copy_constructor:CMarketingMessageProto)
}

inline void CMarketingMessageProto::SharedCtor() {
title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
associated_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  associated_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
country_allow_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  country_allow_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
country_deny_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  country_deny_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
additional_restrictions_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  additional_restrictions_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
template_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  template_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
template_vars_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  template_vars_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
creator_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  creator_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
template_vars_json_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  template_vars_json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
additional_restrictions_json_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  additional_restrictions_json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&gid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&gid_)) + sizeof(flags_));
visibility_ = 1;
}

CMarketingMessageProto::~CMarketingMessageProto() {
  // @@protoc_insertion_point(destructor:CMarketingMessageProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMarketingMessageProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  associated_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_allow_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_deny_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  additional_restrictions_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  template_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  template_vars_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  creator_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  template_vars_json_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  additional_restrictions_json_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMarketingMessageProto::ArenaDtor(void* object) {
  CMarketingMessageProto* _this = reinterpret_cast< CMarketingMessageProto* >(object);
  (void)_this;
}
void CMarketingMessageProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMarketingMessageProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMarketingMessageProto::Clear() {
// @@protoc_insertion_point(message_clear_start:CMarketingMessageProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      associated_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      country_allow_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      country_deny_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      additional_restrictions_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      template_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      template_vars_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      creator_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      template_vars_json_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      additional_restrictions_json_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000fc00u) {
    ::memset(&gid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&start_date_) -
        reinterpret_cast<char*>(&gid_)) + sizeof(start_date_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&end_date_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&flags_) -
        reinterpret_cast<char*>(&end_date_)) + sizeof(flags_));
  }
  visibility_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMarketingMessageProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 gid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_gid(&has_bits);
          gid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMarketingMessageProto.title");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EMarketingMessageType type = 3 [default = k_EMarketingMessageInvalid];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EMarketingMessageType_IsValid(val))) {
            _internal_set_type(static_cast<::EMarketingMessageType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .EMarketingMessageVisibility visibility = 4 [default = k_EMarketingMessageVisibleBeta];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EMarketingMessageVisibility_IsValid(val))) {
            _internal_set_visibility(static_cast<::EMarketingMessageVisibility>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 priority = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_priority(&has_bits);
          priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EMarketingMessageAssociationType association_type = 6 [default = k_EMarketingMessageNoAssociation];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EMarketingMessageAssociationType_IsValid(val))) {
            _internal_set_association_type(static_cast<::EMarketingMessageAssociationType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 associated_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_associated_id(&has_bits);
          associated_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string associated_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_associated_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMarketingMessageProto.associated_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 start_date = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_start_date(&has_bits);
          start_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 end_date = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_end_date(&has_bits);
          end_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string country_allow = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_country_allow();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMarketingMessageProto.country_allow");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string country_deny = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_country_deny();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMarketingMessageProto.country_deny");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool ownership_restrictions_overridden = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_ownership_restrictions_overridden(&has_bits);
          ownership_restrictions_overridden_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 must_own_appid = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_must_own_appid(&has_bits);
          must_own_appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 must_not_own_appid = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_must_not_own_appid(&has_bits);
          must_not_own_appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 must_own_packageid = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_must_own_packageid(&has_bits);
          must_own_packageid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 must_not_own_packageid = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_must_not_own_packageid(&has_bits);
          must_not_own_packageid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 must_have_launched_appid = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_must_have_launched_appid(&has_bits);
          must_have_launched_appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string additional_restrictions = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_additional_restrictions();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMarketingMessageProto.additional_restrictions");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string template_type = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_template_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMarketingMessageProto.template_type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string template_vars = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_template_vars();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMarketingMessageProto.template_vars");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 flags = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string creator_name = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          auto str = _internal_mutable_creator_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMarketingMessageProto.creator_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string template_vars_json = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          auto str = _internal_mutable_template_vars_json();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMarketingMessageProto.template_vars_json");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string additional_restrictions_json = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          auto str = _internal_mutable_additional_restrictions_json();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMarketingMessageProto.additional_restrictions_json");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMarketingMessageProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMarketingMessageProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 gid = 1;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_gid(), target);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMarketingMessageProto.title");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  // optional .EMarketingMessageType type = 3 [default = k_EMarketingMessageInvalid];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // optional .EMarketingMessageVisibility visibility = 4 [default = k_EMarketingMessageVisibleBeta];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_visibility(), target);
  }

  // optional uint32 priority = 5;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_priority(), target);
  }

  // optional .EMarketingMessageAssociationType association_type = 6 [default = k_EMarketingMessageNoAssociation];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_association_type(), target);
  }

  // optional uint32 associated_id = 7;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_associated_id(), target);
  }

  // optional string associated_name = 8;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_associated_name().data(), static_cast<int>(this->_internal_associated_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMarketingMessageProto.associated_name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_associated_name(), target);
  }

  // optional uint32 start_date = 9;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_start_date(), target);
  }

  // optional uint32 end_date = 10;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_end_date(), target);
  }

  // optional string country_allow = 11;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_country_allow().data(), static_cast<int>(this->_internal_country_allow().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMarketingMessageProto.country_allow");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_country_allow(), target);
  }

  // optional string country_deny = 12;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_country_deny().data(), static_cast<int>(this->_internal_country_deny().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMarketingMessageProto.country_deny");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_country_deny(), target);
  }

  // optional bool ownership_restrictions_overridden = 13;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_ownership_restrictions_overridden(), target);
  }

  // optional uint32 must_own_appid = 14;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_must_own_appid(), target);
  }

  // optional uint32 must_not_own_appid = 15;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_must_not_own_appid(), target);
  }

  // optional uint32 must_own_packageid = 16;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_must_own_packageid(), target);
  }

  // optional uint32 must_not_own_packageid = 17;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_must_not_own_packageid(), target);
  }

  // optional uint32 must_have_launched_appid = 18;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_must_have_launched_appid(), target);
  }

  // optional string additional_restrictions = 19;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_additional_restrictions().data(), static_cast<int>(this->_internal_additional_restrictions().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMarketingMessageProto.additional_restrictions");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_additional_restrictions(), target);
  }

  // optional string template_type = 20;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_template_type().data(), static_cast<int>(this->_internal_template_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMarketingMessageProto.template_type");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_template_type(), target);
  }

  // optional string template_vars = 21;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_template_vars().data(), static_cast<int>(this->_internal_template_vars().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMarketingMessageProto.template_vars");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_template_vars(), target);
  }

  // optional uint32 flags = 22;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_flags(), target);
  }

  // optional string creator_name = 23;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_creator_name().data(), static_cast<int>(this->_internal_creator_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMarketingMessageProto.creator_name");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_creator_name(), target);
  }

  // optional string template_vars_json = 24;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_template_vars_json().data(), static_cast<int>(this->_internal_template_vars_json().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMarketingMessageProto.template_vars_json");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_template_vars_json(), target);
  }

  // optional string additional_restrictions_json = 25;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_additional_restrictions_json().data(), static_cast<int>(this->_internal_additional_restrictions_json().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMarketingMessageProto.additional_restrictions_json");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_additional_restrictions_json(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMarketingMessageProto)
  return target;
}

size_t CMarketingMessageProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMarketingMessageProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string title = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional string associated_name = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_associated_name());
    }

    // optional string country_allow = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_country_allow());
    }

    // optional string country_deny = 12;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_country_deny());
    }

    // optional string additional_restrictions = 19;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_additional_restrictions());
    }

    // optional string template_type = 20;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_template_type());
    }

    // optional string template_vars = 21;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_template_vars());
    }

    // optional string creator_name = 23;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_creator_name());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional string template_vars_json = 24;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_template_vars_json());
    }

    // optional string additional_restrictions_json = 25;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_additional_restrictions_json());
    }

    // optional fixed64 gid = 1;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional .EMarketingMessageType type = 3 [default = k_EMarketingMessageInvalid];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional uint32 priority = 5;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_priority());
    }

    // optional .EMarketingMessageAssociationType association_type = 6 [default = k_EMarketingMessageNoAssociation];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_association_type());
    }

    // optional uint32 associated_id = 7;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_associated_id());
    }

    // optional uint32 start_date = 9;
    if (cached_has_bits & 0x00008000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_start_date());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 end_date = 10;
    if (cached_has_bits & 0x00010000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_end_date());
    }

    // optional bool ownership_restrictions_overridden = 13;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 1;
    }

    // optional uint32 must_own_appid = 14;
    if (cached_has_bits & 0x00040000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_must_own_appid());
    }

    // optional uint32 must_not_own_appid = 15;
    if (cached_has_bits & 0x00080000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_must_not_own_appid());
    }

    // optional uint32 must_own_packageid = 16;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_must_own_packageid());
    }

    // optional uint32 must_not_own_packageid = 17;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_must_not_own_packageid());
    }

    // optional uint32 must_have_launched_appid = 18;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_must_have_launched_appid());
    }

    // optional uint32 flags = 22;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_flags());
    }

  }
  // optional .EMarketingMessageVisibility visibility = 4 [default = k_EMarketingMessageVisibleBeta];
  if (cached_has_bits & 0x01000000u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_visibility());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMarketingMessageProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMarketingMessageProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMarketingMessageProto::GetClassData() const { return &_class_data_; }

void CMarketingMessageProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMarketingMessageProto *>(to)->MergeFrom(
      static_cast<const CMarketingMessageProto &>(from));
}


void CMarketingMessageProto::MergeFrom(const CMarketingMessageProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMarketingMessageProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_associated_name(from._internal_associated_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_country_allow(from._internal_country_allow());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_country_deny(from._internal_country_deny());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_additional_restrictions(from._internal_additional_restrictions());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_template_type(from._internal_template_type());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_template_vars(from._internal_template_vars());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_creator_name(from._internal_creator_name());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_set_template_vars_json(from._internal_template_vars_json());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_set_additional_restrictions_json(from._internal_additional_restrictions_json());
    }
    if (cached_has_bits & 0x00000400u) {
      gid_ = from.gid_;
    }
    if (cached_has_bits & 0x00000800u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00001000u) {
      priority_ = from.priority_;
    }
    if (cached_has_bits & 0x00002000u) {
      association_type_ = from.association_type_;
    }
    if (cached_has_bits & 0x00004000u) {
      associated_id_ = from.associated_id_;
    }
    if (cached_has_bits & 0x00008000u) {
      start_date_ = from.start_date_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      end_date_ = from.end_date_;
    }
    if (cached_has_bits & 0x00020000u) {
      ownership_restrictions_overridden_ = from.ownership_restrictions_overridden_;
    }
    if (cached_has_bits & 0x00040000u) {
      must_own_appid_ = from.must_own_appid_;
    }
    if (cached_has_bits & 0x00080000u) {
      must_not_own_appid_ = from.must_not_own_appid_;
    }
    if (cached_has_bits & 0x00100000u) {
      must_own_packageid_ = from.must_own_packageid_;
    }
    if (cached_has_bits & 0x00200000u) {
      must_not_own_packageid_ = from.must_not_own_packageid_;
    }
    if (cached_has_bits & 0x00400000u) {
      must_have_launched_appid_ = from.must_have_launched_appid_;
    }
    if (cached_has_bits & 0x00800000u) {
      flags_ = from.flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x01000000u) {
    _internal_set_visibility(from._internal_visibility());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMarketingMessageProto::CopyFrom(const CMarketingMessageProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMarketingMessageProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMarketingMessageProto::IsInitialized() const {
  return true;
}

void CMarketingMessageProto::InternalSwap(CMarketingMessageProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &title_, lhs_arena,
      &other->title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &associated_name_, lhs_arena,
      &other->associated_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &country_allow_, lhs_arena,
      &other->country_allow_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &country_deny_, lhs_arena,
      &other->country_deny_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &additional_restrictions_, lhs_arena,
      &other->additional_restrictions_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &template_type_, lhs_arena,
      &other->template_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &template_vars_, lhs_arena,
      &other->template_vars_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &creator_name_, lhs_arena,
      &other->creator_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &template_vars_json_, lhs_arena,
      &other->template_vars_json_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &additional_restrictions_json_, lhs_arena,
      &other->additional_restrictions_json_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMarketingMessageProto, flags_)
      + sizeof(CMarketingMessageProto::flags_)
      - PROTOBUF_FIELD_OFFSET(CMarketingMessageProto, gid_)>(
          reinterpret_cast<char*>(&gid_),
          reinterpret_cast<char*>(&other->gid_));
  swap(visibility_, other->visibility_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMarketingMessageProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fmarketingmessages_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fmarketingmessages_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fmarketingmessages_2esteamclient_2eproto[1]);
}

// ===================================================================

class CMarketingMessages_GetActiveMarketingMessages_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CMarketingMessages_GetActiveMarketingMessages_Response>()._has_bits_);
  static void set_has_time_next_message_age(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMarketingMessages_GetActiveMarketingMessages_Response::CMarketingMessages_GetActiveMarketingMessages_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  messages_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMarketingMessages_GetActiveMarketingMessages_Response)
}
CMarketingMessages_GetActiveMarketingMessages_Response::CMarketingMessages_GetActiveMarketingMessages_Response(const CMarketingMessages_GetActiveMarketingMessages_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      messages_(from.messages_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  time_next_message_age_ = from.time_next_message_age_;
  // @@protoc_insertion_point(copy_constructor:CMarketingMessages_GetActiveMarketingMessages_Response)
}

inline void CMarketingMessages_GetActiveMarketingMessages_Response::SharedCtor() {
time_next_message_age_ = 0u;
}

CMarketingMessages_GetActiveMarketingMessages_Response::~CMarketingMessages_GetActiveMarketingMessages_Response() {
  // @@protoc_insertion_point(destructor:CMarketingMessages_GetActiveMarketingMessages_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMarketingMessages_GetActiveMarketingMessages_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMarketingMessages_GetActiveMarketingMessages_Response::ArenaDtor(void* object) {
  CMarketingMessages_GetActiveMarketingMessages_Response* _this = reinterpret_cast< CMarketingMessages_GetActiveMarketingMessages_Response* >(object);
  (void)_this;
}
void CMarketingMessages_GetActiveMarketingMessages_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMarketingMessages_GetActiveMarketingMessages_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMarketingMessages_GetActiveMarketingMessages_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CMarketingMessages_GetActiveMarketingMessages_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  messages_.Clear();
  time_next_message_age_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMarketingMessages_GetActiveMarketingMessages_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMarketingMessageProto messages = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 time_next_message_age = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_time_next_message_age(&has_bits);
          time_next_message_age_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMarketingMessages_GetActiveMarketingMessages_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMarketingMessages_GetActiveMarketingMessages_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMarketingMessageProto messages = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_messages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_messages(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 time_next_message_age = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_time_next_message_age(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMarketingMessages_GetActiveMarketingMessages_Response)
  return target;
}

size_t CMarketingMessages_GetActiveMarketingMessages_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMarketingMessages_GetActiveMarketingMessages_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMarketingMessageProto messages = 1;
  total_size += 1UL * this->_internal_messages_size();
  for (const auto& msg : this->messages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 time_next_message_age = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_time_next_message_age());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMarketingMessages_GetActiveMarketingMessages_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMarketingMessages_GetActiveMarketingMessages_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMarketingMessages_GetActiveMarketingMessages_Response::GetClassData() const { return &_class_data_; }

void CMarketingMessages_GetActiveMarketingMessages_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMarketingMessages_GetActiveMarketingMessages_Response *>(to)->MergeFrom(
      static_cast<const CMarketingMessages_GetActiveMarketingMessages_Response &>(from));
}


void CMarketingMessages_GetActiveMarketingMessages_Response::MergeFrom(const CMarketingMessages_GetActiveMarketingMessages_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMarketingMessages_GetActiveMarketingMessages_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  messages_.MergeFrom(from.messages_);
  if (from._internal_has_time_next_message_age()) {
    _internal_set_time_next_message_age(from._internal_time_next_message_age());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMarketingMessages_GetActiveMarketingMessages_Response::CopyFrom(const CMarketingMessages_GetActiveMarketingMessages_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMarketingMessages_GetActiveMarketingMessages_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMarketingMessages_GetActiveMarketingMessages_Response::IsInitialized() const {
  return true;
}

void CMarketingMessages_GetActiveMarketingMessages_Response::InternalSwap(CMarketingMessages_GetActiveMarketingMessages_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  messages_.InternalSwap(&other->messages_);
  swap(time_next_message_age_, other->time_next_message_age_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMarketingMessages_GetActiveMarketingMessages_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fmarketingmessages_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fmarketingmessages_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fmarketingmessages_2esteamclient_2eproto[2]);
}

// ===================================================================

class CMarketingMessages_GetMarketingMessagesForUser_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CMarketingMessages_GetMarketingMessagesForUser_Request>()._has_bits_);
  static void set_has_include_seen_messages(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_country_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_elanguage(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_operating_system(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_client_package_version(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::StoreBrowseContext& context(const CMarketingMessages_GetMarketingMessagesForUser_Request* msg);
  static void set_has_context(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::StoreBrowseItemDataRequest& data_request(const CMarketingMessages_GetMarketingMessagesForUser_Request* msg);
  static void set_has_data_request(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::StoreBrowseContext&
CMarketingMessages_GetMarketingMessagesForUser_Request::_Internal::context(const CMarketingMessages_GetMarketingMessagesForUser_Request* msg) {
  return *msg->context_;
}
const ::StoreBrowseItemDataRequest&
CMarketingMessages_GetMarketingMessagesForUser_Request::_Internal::data_request(const CMarketingMessages_GetMarketingMessagesForUser_Request* msg) {
  return *msg->data_request_;
}
void CMarketingMessages_GetMarketingMessagesForUser_Request::clear_context() {
  if (context_ != nullptr) context_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CMarketingMessages_GetMarketingMessagesForUser_Request::clear_data_request() {
  if (data_request_ != nullptr) data_request_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
CMarketingMessages_GetMarketingMessagesForUser_Request::CMarketingMessages_GetMarketingMessagesForUser_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMarketingMessages_GetMarketingMessagesForUser_Request)
}
CMarketingMessages_GetMarketingMessagesForUser_Request::CMarketingMessages_GetMarketingMessagesForUser_Request(const CMarketingMessages_GetMarketingMessagesForUser_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  country_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    country_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_country_code()) {
    country_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_country_code(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_context()) {
    context_ = new ::StoreBrowseContext(*from.context_);
  } else {
    context_ = nullptr;
  }
  if (from._internal_has_data_request()) {
    data_request_ = new ::StoreBrowseItemDataRequest(*from.data_request_);
  } else {
    data_request_ = nullptr;
  }
  ::memcpy(&include_seen_messages_, &from.include_seen_messages_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_package_version_) -
    reinterpret_cast<char*>(&include_seen_messages_)) + sizeof(client_package_version_));
  // @@protoc_insertion_point(copy_constructor:CMarketingMessages_GetMarketingMessagesForUser_Request)
}

inline void CMarketingMessages_GetMarketingMessagesForUser_Request::SharedCtor() {
country_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  country_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&context_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&client_package_version_) -
    reinterpret_cast<char*>(&context_)) + sizeof(client_package_version_));
}

CMarketingMessages_GetMarketingMessagesForUser_Request::~CMarketingMessages_GetMarketingMessagesForUser_Request() {
  // @@protoc_insertion_point(destructor:CMarketingMessages_GetMarketingMessagesForUser_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMarketingMessages_GetMarketingMessagesForUser_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  country_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete context_;
  if (this != internal_default_instance()) delete data_request_;
}

void CMarketingMessages_GetMarketingMessagesForUser_Request::ArenaDtor(void* object) {
  CMarketingMessages_GetMarketingMessagesForUser_Request* _this = reinterpret_cast< CMarketingMessages_GetMarketingMessagesForUser_Request* >(object);
  (void)_this;
}
void CMarketingMessages_GetMarketingMessagesForUser_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMarketingMessages_GetMarketingMessagesForUser_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMarketingMessages_GetMarketingMessagesForUser_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CMarketingMessages_GetMarketingMessagesForUser_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      country_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(context_ != nullptr);
      context_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(data_request_ != nullptr);
      data_request_->Clear();
    }
  }
  if (cached_has_bits & 0x00000078u) {
    ::memset(&include_seen_messages_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&client_package_version_) -
        reinterpret_cast<char*>(&include_seen_messages_)) + sizeof(client_package_version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMarketingMessages_GetMarketingMessagesForUser_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool include_seen_messages = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_include_seen_messages(&has_bits);
          include_seen_messages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string country_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_country_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMarketingMessages_GetMarketingMessagesForUser_Request.country_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 elanguage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_elanguage(&has_bits);
          elanguage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 operating_system = 4 [(.description) = "EOSType from client"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_operating_system(&has_bits);
          operating_system_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 client_package_version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_client_package_version(&has_bits);
          client_package_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .StoreBrowseContext context = 6 [(.description) = "Optional, server can fill in from country code/language if not set"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_context(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .StoreBrowseItemDataRequest data_request = 7 [(.description) = "If passed, item data will be returned"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMarketingMessages_GetMarketingMessagesForUser_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMarketingMessages_GetMarketingMessagesForUser_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool include_seen_messages = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_include_seen_messages(), target);
  }

  // optional string country_code = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_country_code().data(), static_cast<int>(this->_internal_country_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMarketingMessages_GetMarketingMessagesForUser_Request.country_code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_country_code(), target);
  }

  // optional int32 elanguage = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_elanguage(), target);
  }

  // optional int32 operating_system = 4 [(.description) = "EOSType from client"];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_operating_system(), target);
  }

  // optional int32 client_package_version = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_client_package_version(), target);
  }

  // optional .StoreBrowseContext context = 6 [(.description) = "Optional, server can fill in from country code/language if not set"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::context(this), target, stream);
  }

  // optional .StoreBrowseItemDataRequest data_request = 7 [(.description) = "If passed, item data will be returned"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::data_request(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMarketingMessages_GetMarketingMessagesForUser_Request)
  return target;
}

size_t CMarketingMessages_GetMarketingMessagesForUser_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMarketingMessages_GetMarketingMessagesForUser_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string country_code = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_country_code());
    }

    // optional .StoreBrowseContext context = 6 [(.description) = "Optional, server can fill in from country code/language if not set"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *context_);
    }

    // optional .StoreBrowseItemDataRequest data_request = 7 [(.description) = "If passed, item data will be returned"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_request_);
    }

    // optional bool include_seen_messages = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional int32 elanguage = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_elanguage());
    }

    // optional int32 operating_system = 4 [(.description) = "EOSType from client"];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_operating_system());
    }

    // optional int32 client_package_version = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_client_package_version());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMarketingMessages_GetMarketingMessagesForUser_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMarketingMessages_GetMarketingMessagesForUser_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMarketingMessages_GetMarketingMessagesForUser_Request::GetClassData() const { return &_class_data_; }

void CMarketingMessages_GetMarketingMessagesForUser_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMarketingMessages_GetMarketingMessagesForUser_Request *>(to)->MergeFrom(
      static_cast<const CMarketingMessages_GetMarketingMessagesForUser_Request &>(from));
}


void CMarketingMessages_GetMarketingMessagesForUser_Request::MergeFrom(const CMarketingMessages_GetMarketingMessagesForUser_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMarketingMessages_GetMarketingMessagesForUser_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_country_code(from._internal_country_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_context()->::StoreBrowseContext::MergeFrom(from._internal_context());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_data_request()->::StoreBrowseItemDataRequest::MergeFrom(from._internal_data_request());
    }
    if (cached_has_bits & 0x00000008u) {
      include_seen_messages_ = from.include_seen_messages_;
    }
    if (cached_has_bits & 0x00000010u) {
      elanguage_ = from.elanguage_;
    }
    if (cached_has_bits & 0x00000020u) {
      operating_system_ = from.operating_system_;
    }
    if (cached_has_bits & 0x00000040u) {
      client_package_version_ = from.client_package_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMarketingMessages_GetMarketingMessagesForUser_Request::CopyFrom(const CMarketingMessages_GetMarketingMessagesForUser_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMarketingMessages_GetMarketingMessagesForUser_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMarketingMessages_GetMarketingMessagesForUser_Request::IsInitialized() const {
  return true;
}

void CMarketingMessages_GetMarketingMessagesForUser_Request::InternalSwap(CMarketingMessages_GetMarketingMessagesForUser_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &country_code_, lhs_arena,
      &other->country_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMarketingMessages_GetMarketingMessagesForUser_Request, client_package_version_)
      + sizeof(CMarketingMessages_GetMarketingMessagesForUser_Request::client_package_version_)
      - PROTOBUF_FIELD_OFFSET(CMarketingMessages_GetMarketingMessagesForUser_Request, context_)>(
          reinterpret_cast<char*>(&context_),
          reinterpret_cast<char*>(&other->context_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMarketingMessages_GetMarketingMessagesForUser_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fmarketingmessages_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fmarketingmessages_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fmarketingmessages_2esteamclient_2eproto[3]);
}

// ===================================================================

class CDisplayMarketingMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<CDisplayMarketingMessage>()._has_bits_);
  static void set_has_gid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::StoreItemID& associated_item_id(const CDisplayMarketingMessage* msg);
  static void set_has_associated_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::StoreItem& associated_item(const CDisplayMarketingMessage* msg);
  static void set_has_associated_item(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_associated_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_template_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_template_vars_json(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::StoreItemID&
CDisplayMarketingMessage::_Internal::associated_item_id(const CDisplayMarketingMessage* msg) {
  return *msg->associated_item_id_;
}
const ::StoreItem&
CDisplayMarketingMessage::_Internal::associated_item(const CDisplayMarketingMessage* msg) {
  return *msg->associated_item_;
}
void CDisplayMarketingMessage::clear_associated_item_id() {
  if (associated_item_id_ != nullptr) associated_item_id_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void CDisplayMarketingMessage::clear_associated_item() {
  if (associated_item_ != nullptr) associated_item_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
CDisplayMarketingMessage::CDisplayMarketingMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CDisplayMarketingMessage)
}
CDisplayMarketingMessage::CDisplayMarketingMessage(const CDisplayMarketingMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArenaForAllocation());
  }
  associated_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    associated_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_associated_name()) {
    associated_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_associated_name(), 
      GetArenaForAllocation());
  }
  template_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    template_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_template_type()) {
    template_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_template_type(), 
      GetArenaForAllocation());
  }
  template_vars_json_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    template_vars_json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_template_vars_json()) {
    template_vars_json_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_template_vars_json(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_associated_item_id()) {
    associated_item_id_ = new ::StoreItemID(*from.associated_item_id_);
  } else {
    associated_item_id_ = nullptr;
  }
  if (from._internal_has_associated_item()) {
    associated_item_ = new ::StoreItem(*from.associated_item_);
  } else {
    associated_item_ = nullptr;
  }
  ::memcpy(&gid_, &from.gid_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&gid_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:CDisplayMarketingMessage)
}

inline void CDisplayMarketingMessage::SharedCtor() {
title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
associated_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  associated_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
template_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  template_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
template_vars_json_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  template_vars_json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&associated_item_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&associated_item_id_)) + sizeof(type_));
}

CDisplayMarketingMessage::~CDisplayMarketingMessage() {
  // @@protoc_insertion_point(destructor:CDisplayMarketingMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CDisplayMarketingMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  associated_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  template_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  template_vars_json_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete associated_item_id_;
  if (this != internal_default_instance()) delete associated_item_;
}

void CDisplayMarketingMessage::ArenaDtor(void* object) {
  CDisplayMarketingMessage* _this = reinterpret_cast< CDisplayMarketingMessage* >(object);
  (void)_this;
}
void CDisplayMarketingMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDisplayMarketingMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDisplayMarketingMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CDisplayMarketingMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      associated_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      template_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      template_vars_json_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(associated_item_id_ != nullptr);
      associated_item_id_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(associated_item_ != nullptr);
      associated_item_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&gid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&gid_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDisplayMarketingMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 gid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_gid(&has_bits);
          gid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDisplayMarketingMessage.title");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EMarketingMessageType type = 3 [default = k_EMarketingMessageInvalid];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EMarketingMessageType_IsValid(val))) {
            _internal_set_type(static_cast<::EMarketingMessageType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .StoreItemID associated_item_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_associated_item_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .StoreItem associated_item = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_associated_item(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string associated_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_associated_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDisplayMarketingMessage.associated_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string template_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_template_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDisplayMarketingMessage.template_type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string template_vars_json = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_template_vars_json();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDisplayMarketingMessage.template_vars_json");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDisplayMarketingMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDisplayMarketingMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 gid = 1;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_gid(), target);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDisplayMarketingMessage.title");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  // optional .EMarketingMessageType type = 3 [default = k_EMarketingMessageInvalid];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // optional .StoreItemID associated_item_id = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::associated_item_id(this), target, stream);
  }

  // optional .StoreItem associated_item = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::associated_item(this), target, stream);
  }

  // optional string associated_name = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_associated_name().data(), static_cast<int>(this->_internal_associated_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDisplayMarketingMessage.associated_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_associated_name(), target);
  }

  // optional string template_type = 10;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_template_type().data(), static_cast<int>(this->_internal_template_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDisplayMarketingMessage.template_type");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_template_type(), target);
  }

  // optional string template_vars_json = 11;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_template_vars_json().data(), static_cast<int>(this->_internal_template_vars_json().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDisplayMarketingMessage.template_vars_json");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_template_vars_json(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDisplayMarketingMessage)
  return target;
}

size_t CDisplayMarketingMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDisplayMarketingMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string title = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional string associated_name = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_associated_name());
    }

    // optional string template_type = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_template_type());
    }

    // optional string template_vars_json = 11;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_template_vars_json());
    }

    // optional .StoreItemID associated_item_id = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *associated_item_id_);
    }

    // optional .StoreItem associated_item = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *associated_item_);
    }

    // optional fixed64 gid = 1;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional .EMarketingMessageType type = 3 [default = k_EMarketingMessageInvalid];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDisplayMarketingMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CDisplayMarketingMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDisplayMarketingMessage::GetClassData() const { return &_class_data_; }

void CDisplayMarketingMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CDisplayMarketingMessage *>(to)->MergeFrom(
      static_cast<const CDisplayMarketingMessage &>(from));
}


void CDisplayMarketingMessage::MergeFrom(const CDisplayMarketingMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDisplayMarketingMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_associated_name(from._internal_associated_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_template_type(from._internal_template_type());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_template_vars_json(from._internal_template_vars_json());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_associated_item_id()->::StoreItemID::MergeFrom(from._internal_associated_item_id());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_associated_item()->::StoreItem::MergeFrom(from._internal_associated_item());
    }
    if (cached_has_bits & 0x00000040u) {
      gid_ = from.gid_;
    }
    if (cached_has_bits & 0x00000080u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDisplayMarketingMessage::CopyFrom(const CDisplayMarketingMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDisplayMarketingMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDisplayMarketingMessage::IsInitialized() const {
  return true;
}

void CDisplayMarketingMessage::InternalSwap(CDisplayMarketingMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &title_, lhs_arena,
      &other->title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &associated_name_, lhs_arena,
      &other->associated_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &template_type_, lhs_arena,
      &other->template_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &template_vars_json_, lhs_arena,
      &other->template_vars_json_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDisplayMarketingMessage, type_)
      + sizeof(CDisplayMarketingMessage::type_)
      - PROTOBUF_FIELD_OFFSET(CDisplayMarketingMessage, associated_item_id_)>(
          reinterpret_cast<char*>(&associated_item_id_),
          reinterpret_cast<char*>(&other->associated_item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDisplayMarketingMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fmarketingmessages_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fmarketingmessages_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fmarketingmessages_2esteamclient_2eproto[4]);
}

// ===================================================================

class CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser::_Internal {
 public:
  using HasBits = decltype(std::declval<CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser>()._has_bits_);
  static void set_has_already_seen(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CDisplayMarketingMessage& message(const CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser* msg);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CDisplayMarketingMessage&
CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser::_Internal::message(const CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser* msg) {
  return *msg->message_;
}
CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser::CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMarketingMessages_GetMarketingMessagesForUser_Response.MarketingMessageForUser)
}
CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser::CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser(const CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_message()) {
    message_ = new ::CDisplayMarketingMessage(*from.message_);
  } else {
    message_ = nullptr;
  }
  already_seen_ = from.already_seen_;
  // @@protoc_insertion_point(copy_constructor:CMarketingMessages_GetMarketingMessagesForUser_Response.MarketingMessageForUser)
}

inline void CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&message_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&already_seen_) -
    reinterpret_cast<char*>(&message_)) + sizeof(already_seen_));
}

CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser::~CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser() {
  // @@protoc_insertion_point(destructor:CMarketingMessages_GetMarketingMessagesForUser_Response.MarketingMessageForUser)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete message_;
}

void CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser::ArenaDtor(void* object) {
  CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser* _this = reinterpret_cast< CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser* >(object);
  (void)_this;
}
void CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser::Clear() {
// @@protoc_insertion_point(message_clear_start:CMarketingMessages_GetMarketingMessagesForUser_Response.MarketingMessageForUser)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(message_ != nullptr);
    message_->Clear();
  }
  already_seen_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool already_seen = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_already_seen(&has_bits);
          already_seen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CDisplayMarketingMessage message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMarketingMessages_GetMarketingMessagesForUser_Response.MarketingMessageForUser)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool already_seen = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_already_seen(), target);
  }

  // optional .CDisplayMarketingMessage message = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::message(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMarketingMessages_GetMarketingMessagesForUser_Response.MarketingMessageForUser)
  return target;
}

size_t CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMarketingMessages_GetMarketingMessagesForUser_Response.MarketingMessageForUser)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CDisplayMarketingMessage message = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_);
    }

    // optional bool already_seen = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser::GetClassData() const { return &_class_data_; }

void CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser *>(to)->MergeFrom(
      static_cast<const CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser &>(from));
}


void CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser::MergeFrom(const CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMarketingMessages_GetMarketingMessagesForUser_Response.MarketingMessageForUser)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_message()->::CDisplayMarketingMessage::MergeFrom(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      already_seen_ = from.already_seen_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser::CopyFrom(const CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMarketingMessages_GetMarketingMessagesForUser_Response.MarketingMessageForUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser::IsInitialized() const {
  return true;
}

void CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser::InternalSwap(CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser, already_seen_)
      + sizeof(CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser::already_seen_)
      - PROTOBUF_FIELD_OFFSET(CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser, message_)>(
          reinterpret_cast<char*>(&message_),
          reinterpret_cast<char*>(&other->message_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fmarketingmessages_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fmarketingmessages_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fmarketingmessages_2esteamclient_2eproto[5]);
}

// ===================================================================

class CMarketingMessages_GetMarketingMessagesForUser_Response::_Internal {
 public:
};

CMarketingMessages_GetMarketingMessagesForUser_Response::CMarketingMessages_GetMarketingMessagesForUser_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  messages_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMarketingMessages_GetMarketingMessagesForUser_Response)
}
CMarketingMessages_GetMarketingMessagesForUser_Response::CMarketingMessages_GetMarketingMessagesForUser_Response(const CMarketingMessages_GetMarketingMessagesForUser_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      messages_(from.messages_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMarketingMessages_GetMarketingMessagesForUser_Response)
}

inline void CMarketingMessages_GetMarketingMessagesForUser_Response::SharedCtor() {
}

CMarketingMessages_GetMarketingMessagesForUser_Response::~CMarketingMessages_GetMarketingMessagesForUser_Response() {
  // @@protoc_insertion_point(destructor:CMarketingMessages_GetMarketingMessagesForUser_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMarketingMessages_GetMarketingMessagesForUser_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMarketingMessages_GetMarketingMessagesForUser_Response::ArenaDtor(void* object) {
  CMarketingMessages_GetMarketingMessagesForUser_Response* _this = reinterpret_cast< CMarketingMessages_GetMarketingMessagesForUser_Response* >(object);
  (void)_this;
}
void CMarketingMessages_GetMarketingMessagesForUser_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMarketingMessages_GetMarketingMessagesForUser_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMarketingMessages_GetMarketingMessagesForUser_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CMarketingMessages_GetMarketingMessagesForUser_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  messages_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMarketingMessages_GetMarketingMessagesForUser_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMarketingMessages_GetMarketingMessagesForUser_Response.MarketingMessageForUser messages = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMarketingMessages_GetMarketingMessagesForUser_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMarketingMessages_GetMarketingMessagesForUser_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMarketingMessages_GetMarketingMessagesForUser_Response.MarketingMessageForUser messages = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_messages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_messages(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMarketingMessages_GetMarketingMessagesForUser_Response)
  return target;
}

size_t CMarketingMessages_GetMarketingMessagesForUser_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMarketingMessages_GetMarketingMessagesForUser_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMarketingMessages_GetMarketingMessagesForUser_Response.MarketingMessageForUser messages = 1;
  total_size += 1UL * this->_internal_messages_size();
  for (const auto& msg : this->messages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMarketingMessages_GetMarketingMessagesForUser_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMarketingMessages_GetMarketingMessagesForUser_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMarketingMessages_GetMarketingMessagesForUser_Response::GetClassData() const { return &_class_data_; }

void CMarketingMessages_GetMarketingMessagesForUser_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMarketingMessages_GetMarketingMessagesForUser_Response *>(to)->MergeFrom(
      static_cast<const CMarketingMessages_GetMarketingMessagesForUser_Response &>(from));
}


void CMarketingMessages_GetMarketingMessagesForUser_Response::MergeFrom(const CMarketingMessages_GetMarketingMessagesForUser_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMarketingMessages_GetMarketingMessagesForUser_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  messages_.MergeFrom(from.messages_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMarketingMessages_GetMarketingMessagesForUser_Response::CopyFrom(const CMarketingMessages_GetMarketingMessagesForUser_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMarketingMessages_GetMarketingMessagesForUser_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMarketingMessages_GetMarketingMessagesForUser_Response::IsInitialized() const {
  return true;
}

void CMarketingMessages_GetMarketingMessagesForUser_Response::InternalSwap(CMarketingMessages_GetMarketingMessagesForUser_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  messages_.InternalSwap(&other->messages_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMarketingMessages_GetMarketingMessagesForUser_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fmarketingmessages_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fmarketingmessages_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fmarketingmessages_2esteamclient_2eproto[6]);
}

// ===================================================================

class CMarketingMessages_DoesUserHavePendingMarketingMessages_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CMarketingMessages_DoesUserHavePendingMarketingMessages_Request>()._has_bits_);
  static void set_has_country_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_elanguage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_operating_system(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_client_package_version(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMarketingMessages_DoesUserHavePendingMarketingMessages_Request::CMarketingMessages_DoesUserHavePendingMarketingMessages_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMarketingMessages_DoesUserHavePendingMarketingMessages_Request)
}
CMarketingMessages_DoesUserHavePendingMarketingMessages_Request::CMarketingMessages_DoesUserHavePendingMarketingMessages_Request(const CMarketingMessages_DoesUserHavePendingMarketingMessages_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  country_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    country_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_country_code()) {
    country_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_country_code(), 
      GetArenaForAllocation());
  }
  ::memcpy(&elanguage_, &from.elanguage_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_package_version_) -
    reinterpret_cast<char*>(&elanguage_)) + sizeof(client_package_version_));
  // @@protoc_insertion_point(copy_constructor:CMarketingMessages_DoesUserHavePendingMarketingMessages_Request)
}

inline void CMarketingMessages_DoesUserHavePendingMarketingMessages_Request::SharedCtor() {
country_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  country_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&elanguage_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&client_package_version_) -
    reinterpret_cast<char*>(&elanguage_)) + sizeof(client_package_version_));
}

CMarketingMessages_DoesUserHavePendingMarketingMessages_Request::~CMarketingMessages_DoesUserHavePendingMarketingMessages_Request() {
  // @@protoc_insertion_point(destructor:CMarketingMessages_DoesUserHavePendingMarketingMessages_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMarketingMessages_DoesUserHavePendingMarketingMessages_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  country_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMarketingMessages_DoesUserHavePendingMarketingMessages_Request::ArenaDtor(void* object) {
  CMarketingMessages_DoesUserHavePendingMarketingMessages_Request* _this = reinterpret_cast< CMarketingMessages_DoesUserHavePendingMarketingMessages_Request* >(object);
  (void)_this;
}
void CMarketingMessages_DoesUserHavePendingMarketingMessages_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMarketingMessages_DoesUserHavePendingMarketingMessages_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMarketingMessages_DoesUserHavePendingMarketingMessages_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CMarketingMessages_DoesUserHavePendingMarketingMessages_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    country_code_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&elanguage_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&client_package_version_) -
        reinterpret_cast<char*>(&elanguage_)) + sizeof(client_package_version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMarketingMessages_DoesUserHavePendingMarketingMessages_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string country_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_country_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMarketingMessages_DoesUserHavePendingMarketingMessages_Request.country_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 elanguage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_elanguage(&has_bits);
          elanguage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 operating_system = 4 [(.description) = "EOSType from client"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_operating_system(&has_bits);
          operating_system_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 client_package_version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_client_package_version(&has_bits);
          client_package_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMarketingMessages_DoesUserHavePendingMarketingMessages_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMarketingMessages_DoesUserHavePendingMarketingMessages_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string country_code = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_country_code().data(), static_cast<int>(this->_internal_country_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMarketingMessages_DoesUserHavePendingMarketingMessages_Request.country_code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_country_code(), target);
  }

  // optional int32 elanguage = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_elanguage(), target);
  }

  // optional int32 operating_system = 4 [(.description) = "EOSType from client"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_operating_system(), target);
  }

  // optional int32 client_package_version = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_client_package_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMarketingMessages_DoesUserHavePendingMarketingMessages_Request)
  return target;
}

size_t CMarketingMessages_DoesUserHavePendingMarketingMessages_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMarketingMessages_DoesUserHavePendingMarketingMessages_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string country_code = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_country_code());
    }

    // optional int32 elanguage = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_elanguage());
    }

    // optional int32 operating_system = 4 [(.description) = "EOSType from client"];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_operating_system());
    }

    // optional int32 client_package_version = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_client_package_version());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMarketingMessages_DoesUserHavePendingMarketingMessages_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMarketingMessages_DoesUserHavePendingMarketingMessages_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMarketingMessages_DoesUserHavePendingMarketingMessages_Request::GetClassData() const { return &_class_data_; }

void CMarketingMessages_DoesUserHavePendingMarketingMessages_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMarketingMessages_DoesUserHavePendingMarketingMessages_Request *>(to)->MergeFrom(
      static_cast<const CMarketingMessages_DoesUserHavePendingMarketingMessages_Request &>(from));
}


void CMarketingMessages_DoesUserHavePendingMarketingMessages_Request::MergeFrom(const CMarketingMessages_DoesUserHavePendingMarketingMessages_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMarketingMessages_DoesUserHavePendingMarketingMessages_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_country_code(from._internal_country_code());
    }
    if (cached_has_bits & 0x00000002u) {
      elanguage_ = from.elanguage_;
    }
    if (cached_has_bits & 0x00000004u) {
      operating_system_ = from.operating_system_;
    }
    if (cached_has_bits & 0x00000008u) {
      client_package_version_ = from.client_package_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMarketingMessages_DoesUserHavePendingMarketingMessages_Request::CopyFrom(const CMarketingMessages_DoesUserHavePendingMarketingMessages_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMarketingMessages_DoesUserHavePendingMarketingMessages_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMarketingMessages_DoesUserHavePendingMarketingMessages_Request::IsInitialized() const {
  return true;
}

void CMarketingMessages_DoesUserHavePendingMarketingMessages_Request::InternalSwap(CMarketingMessages_DoesUserHavePendingMarketingMessages_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &country_code_, lhs_arena,
      &other->country_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMarketingMessages_DoesUserHavePendingMarketingMessages_Request, client_package_version_)
      + sizeof(CMarketingMessages_DoesUserHavePendingMarketingMessages_Request::client_package_version_)
      - PROTOBUF_FIELD_OFFSET(CMarketingMessages_DoesUserHavePendingMarketingMessages_Request, elanguage_)>(
          reinterpret_cast<char*>(&elanguage_),
          reinterpret_cast<char*>(&other->elanguage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMarketingMessages_DoesUserHavePendingMarketingMessages_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fmarketingmessages_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fmarketingmessages_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fmarketingmessages_2esteamclient_2eproto[7]);
}

// ===================================================================

class CMarketingMessages_DoesUserHavePendingMarketingMessages_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CMarketingMessages_DoesUserHavePendingMarketingMessages_Response>()._has_bits_);
  static void set_has_has_pending_messages(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pending_message_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMarketingMessages_DoesUserHavePendingMarketingMessages_Response::CMarketingMessages_DoesUserHavePendingMarketingMessages_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMarketingMessages_DoesUserHavePendingMarketingMessages_Response)
}
CMarketingMessages_DoesUserHavePendingMarketingMessages_Response::CMarketingMessages_DoesUserHavePendingMarketingMessages_Response(const CMarketingMessages_DoesUserHavePendingMarketingMessages_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&has_pending_messages_, &from.has_pending_messages_,
    static_cast<size_t>(reinterpret_cast<char*>(&pending_message_count_) -
    reinterpret_cast<char*>(&has_pending_messages_)) + sizeof(pending_message_count_));
  // @@protoc_insertion_point(copy_constructor:CMarketingMessages_DoesUserHavePendingMarketingMessages_Response)
}

inline void CMarketingMessages_DoesUserHavePendingMarketingMessages_Response::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&has_pending_messages_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pending_message_count_) -
    reinterpret_cast<char*>(&has_pending_messages_)) + sizeof(pending_message_count_));
}

CMarketingMessages_DoesUserHavePendingMarketingMessages_Response::~CMarketingMessages_DoesUserHavePendingMarketingMessages_Response() {
  // @@protoc_insertion_point(destructor:CMarketingMessages_DoesUserHavePendingMarketingMessages_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMarketingMessages_DoesUserHavePendingMarketingMessages_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMarketingMessages_DoesUserHavePendingMarketingMessages_Response::ArenaDtor(void* object) {
  CMarketingMessages_DoesUserHavePendingMarketingMessages_Response* _this = reinterpret_cast< CMarketingMessages_DoesUserHavePendingMarketingMessages_Response* >(object);
  (void)_this;
}
void CMarketingMessages_DoesUserHavePendingMarketingMessages_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMarketingMessages_DoesUserHavePendingMarketingMessages_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMarketingMessages_DoesUserHavePendingMarketingMessages_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CMarketingMessages_DoesUserHavePendingMarketingMessages_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&has_pending_messages_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pending_message_count_) -
        reinterpret_cast<char*>(&has_pending_messages_)) + sizeof(pending_message_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMarketingMessages_DoesUserHavePendingMarketingMessages_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool has_pending_messages = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_has_pending_messages(&has_bits);
          has_pending_messages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 pending_message_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_pending_message_count(&has_bits);
          pending_message_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMarketingMessages_DoesUserHavePendingMarketingMessages_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMarketingMessages_DoesUserHavePendingMarketingMessages_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool has_pending_messages = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_has_pending_messages(), target);
  }

  // optional int32 pending_message_count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_pending_message_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMarketingMessages_DoesUserHavePendingMarketingMessages_Response)
  return target;
}

size_t CMarketingMessages_DoesUserHavePendingMarketingMessages_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMarketingMessages_DoesUserHavePendingMarketingMessages_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool has_pending_messages = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional int32 pending_message_count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_pending_message_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMarketingMessages_DoesUserHavePendingMarketingMessages_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMarketingMessages_DoesUserHavePendingMarketingMessages_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMarketingMessages_DoesUserHavePendingMarketingMessages_Response::GetClassData() const { return &_class_data_; }

void CMarketingMessages_DoesUserHavePendingMarketingMessages_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMarketingMessages_DoesUserHavePendingMarketingMessages_Response *>(to)->MergeFrom(
      static_cast<const CMarketingMessages_DoesUserHavePendingMarketingMessages_Response &>(from));
}


void CMarketingMessages_DoesUserHavePendingMarketingMessages_Response::MergeFrom(const CMarketingMessages_DoesUserHavePendingMarketingMessages_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMarketingMessages_DoesUserHavePendingMarketingMessages_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      has_pending_messages_ = from.has_pending_messages_;
    }
    if (cached_has_bits & 0x00000002u) {
      pending_message_count_ = from.pending_message_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMarketingMessages_DoesUserHavePendingMarketingMessages_Response::CopyFrom(const CMarketingMessages_DoesUserHavePendingMarketingMessages_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMarketingMessages_DoesUserHavePendingMarketingMessages_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMarketingMessages_DoesUserHavePendingMarketingMessages_Response::IsInitialized() const {
  return true;
}

void CMarketingMessages_DoesUserHavePendingMarketingMessages_Response::InternalSwap(CMarketingMessages_DoesUserHavePendingMarketingMessages_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMarketingMessages_DoesUserHavePendingMarketingMessages_Response, pending_message_count_)
      + sizeof(CMarketingMessages_DoesUserHavePendingMarketingMessages_Response::pending_message_count_)
      - PROTOBUF_FIELD_OFFSET(CMarketingMessages_DoesUserHavePendingMarketingMessages_Response, has_pending_messages_)>(
          reinterpret_cast<char*>(&has_pending_messages_),
          reinterpret_cast<char*>(&other->has_pending_messages_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMarketingMessages_DoesUserHavePendingMarketingMessages_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fmarketingmessages_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fmarketingmessages_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fmarketingmessages_2esteamclient_2eproto[8]);
}

// ===================================================================

class CMarketingMessages_GetDisplayMarketingMessage_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CMarketingMessages_GetDisplayMarketingMessage_Request>()._has_bits_);
  static void set_has_gid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::StoreBrowseContext& context(const CMarketingMessages_GetDisplayMarketingMessage_Request* msg);
  static void set_has_context(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::StoreBrowseItemDataRequest& data_request(const CMarketingMessages_GetDisplayMarketingMessage_Request* msg);
  static void set_has_data_request(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::StoreBrowseContext&
CMarketingMessages_GetDisplayMarketingMessage_Request::_Internal::context(const CMarketingMessages_GetDisplayMarketingMessage_Request* msg) {
  return *msg->context_;
}
const ::StoreBrowseItemDataRequest&
CMarketingMessages_GetDisplayMarketingMessage_Request::_Internal::data_request(const CMarketingMessages_GetDisplayMarketingMessage_Request* msg) {
  return *msg->data_request_;
}
void CMarketingMessages_GetDisplayMarketingMessage_Request::clear_context() {
  if (context_ != nullptr) context_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CMarketingMessages_GetDisplayMarketingMessage_Request::clear_data_request() {
  if (data_request_ != nullptr) data_request_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CMarketingMessages_GetDisplayMarketingMessage_Request::CMarketingMessages_GetDisplayMarketingMessage_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMarketingMessages_GetDisplayMarketingMessage_Request)
}
CMarketingMessages_GetDisplayMarketingMessage_Request::CMarketingMessages_GetDisplayMarketingMessage_Request(const CMarketingMessages_GetDisplayMarketingMessage_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_context()) {
    context_ = new ::StoreBrowseContext(*from.context_);
  } else {
    context_ = nullptr;
  }
  if (from._internal_has_data_request()) {
    data_request_ = new ::StoreBrowseItemDataRequest(*from.data_request_);
  } else {
    data_request_ = nullptr;
  }
  gid_ = from.gid_;
  // @@protoc_insertion_point(copy_constructor:CMarketingMessages_GetDisplayMarketingMessage_Request)
}

inline void CMarketingMessages_GetDisplayMarketingMessage_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&context_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&gid_) -
    reinterpret_cast<char*>(&context_)) + sizeof(gid_));
}

CMarketingMessages_GetDisplayMarketingMessage_Request::~CMarketingMessages_GetDisplayMarketingMessage_Request() {
  // @@protoc_insertion_point(destructor:CMarketingMessages_GetDisplayMarketingMessage_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMarketingMessages_GetDisplayMarketingMessage_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete context_;
  if (this != internal_default_instance()) delete data_request_;
}

void CMarketingMessages_GetDisplayMarketingMessage_Request::ArenaDtor(void* object) {
  CMarketingMessages_GetDisplayMarketingMessage_Request* _this = reinterpret_cast< CMarketingMessages_GetDisplayMarketingMessage_Request* >(object);
  (void)_this;
}
void CMarketingMessages_GetDisplayMarketingMessage_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMarketingMessages_GetDisplayMarketingMessage_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMarketingMessages_GetDisplayMarketingMessage_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CMarketingMessages_GetDisplayMarketingMessage_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(context_ != nullptr);
      context_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(data_request_ != nullptr);
      data_request_->Clear();
    }
  }
  gid_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMarketingMessages_GetDisplayMarketingMessage_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 gid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_gid(&has_bits);
          gid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional .StoreBrowseContext context = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_context(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .StoreBrowseItemDataRequest data_request = 3 [(.description) = "If passed, item data will be returned"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMarketingMessages_GetDisplayMarketingMessage_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMarketingMessages_GetDisplayMarketingMessage_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 gid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_gid(), target);
  }

  // optional .StoreBrowseContext context = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::context(this), target, stream);
  }

  // optional .StoreBrowseItemDataRequest data_request = 3 [(.description) = "If passed, item data will be returned"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::data_request(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMarketingMessages_GetDisplayMarketingMessage_Request)
  return target;
}

size_t CMarketingMessages_GetDisplayMarketingMessage_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMarketingMessages_GetDisplayMarketingMessage_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .StoreBrowseContext context = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *context_);
    }

    // optional .StoreBrowseItemDataRequest data_request = 3 [(.description) = "If passed, item data will be returned"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_request_);
    }

    // optional fixed64 gid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMarketingMessages_GetDisplayMarketingMessage_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMarketingMessages_GetDisplayMarketingMessage_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMarketingMessages_GetDisplayMarketingMessage_Request::GetClassData() const { return &_class_data_; }

void CMarketingMessages_GetDisplayMarketingMessage_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMarketingMessages_GetDisplayMarketingMessage_Request *>(to)->MergeFrom(
      static_cast<const CMarketingMessages_GetDisplayMarketingMessage_Request &>(from));
}


void CMarketingMessages_GetDisplayMarketingMessage_Request::MergeFrom(const CMarketingMessages_GetDisplayMarketingMessage_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMarketingMessages_GetDisplayMarketingMessage_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_context()->::StoreBrowseContext::MergeFrom(from._internal_context());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_data_request()->::StoreBrowseItemDataRequest::MergeFrom(from._internal_data_request());
    }
    if (cached_has_bits & 0x00000004u) {
      gid_ = from.gid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMarketingMessages_GetDisplayMarketingMessage_Request::CopyFrom(const CMarketingMessages_GetDisplayMarketingMessage_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMarketingMessages_GetDisplayMarketingMessage_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMarketingMessages_GetDisplayMarketingMessage_Request::IsInitialized() const {
  return true;
}

void CMarketingMessages_GetDisplayMarketingMessage_Request::InternalSwap(CMarketingMessages_GetDisplayMarketingMessage_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMarketingMessages_GetDisplayMarketingMessage_Request, gid_)
      + sizeof(CMarketingMessages_GetDisplayMarketingMessage_Request::gid_)
      - PROTOBUF_FIELD_OFFSET(CMarketingMessages_GetDisplayMarketingMessage_Request, context_)>(
          reinterpret_cast<char*>(&context_),
          reinterpret_cast<char*>(&other->context_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMarketingMessages_GetDisplayMarketingMessage_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fmarketingmessages_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fmarketingmessages_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fmarketingmessages_2esteamclient_2eproto[9]);
}

// ===================================================================

class CMarketingMessages_GetDisplayMarketingMessage_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CMarketingMessages_GetDisplayMarketingMessage_Response>()._has_bits_);
  static const ::CDisplayMarketingMessage& message(const CMarketingMessages_GetDisplayMarketingMessage_Response* msg);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CDisplayMarketingMessage&
CMarketingMessages_GetDisplayMarketingMessage_Response::_Internal::message(const CMarketingMessages_GetDisplayMarketingMessage_Response* msg) {
  return *msg->message_;
}
CMarketingMessages_GetDisplayMarketingMessage_Response::CMarketingMessages_GetDisplayMarketingMessage_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMarketingMessages_GetDisplayMarketingMessage_Response)
}
CMarketingMessages_GetDisplayMarketingMessage_Response::CMarketingMessages_GetDisplayMarketingMessage_Response(const CMarketingMessages_GetDisplayMarketingMessage_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_message()) {
    message_ = new ::CDisplayMarketingMessage(*from.message_);
  } else {
    message_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CMarketingMessages_GetDisplayMarketingMessage_Response)
}

inline void CMarketingMessages_GetDisplayMarketingMessage_Response::SharedCtor() {
message_ = nullptr;
}

CMarketingMessages_GetDisplayMarketingMessage_Response::~CMarketingMessages_GetDisplayMarketingMessage_Response() {
  // @@protoc_insertion_point(destructor:CMarketingMessages_GetDisplayMarketingMessage_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMarketingMessages_GetDisplayMarketingMessage_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete message_;
}

void CMarketingMessages_GetDisplayMarketingMessage_Response::ArenaDtor(void* object) {
  CMarketingMessages_GetDisplayMarketingMessage_Response* _this = reinterpret_cast< CMarketingMessages_GetDisplayMarketingMessage_Response* >(object);
  (void)_this;
}
void CMarketingMessages_GetDisplayMarketingMessage_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMarketingMessages_GetDisplayMarketingMessage_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMarketingMessages_GetDisplayMarketingMessage_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CMarketingMessages_GetDisplayMarketingMessage_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(message_ != nullptr);
    message_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMarketingMessages_GetDisplayMarketingMessage_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CDisplayMarketingMessage message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMarketingMessages_GetDisplayMarketingMessage_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMarketingMessages_GetDisplayMarketingMessage_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CDisplayMarketingMessage message = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::message(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMarketingMessages_GetDisplayMarketingMessage_Response)
  return target;
}

size_t CMarketingMessages_GetDisplayMarketingMessage_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMarketingMessages_GetDisplayMarketingMessage_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CDisplayMarketingMessage message = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *message_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMarketingMessages_GetDisplayMarketingMessage_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMarketingMessages_GetDisplayMarketingMessage_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMarketingMessages_GetDisplayMarketingMessage_Response::GetClassData() const { return &_class_data_; }

void CMarketingMessages_GetDisplayMarketingMessage_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMarketingMessages_GetDisplayMarketingMessage_Response *>(to)->MergeFrom(
      static_cast<const CMarketingMessages_GetDisplayMarketingMessage_Response &>(from));
}


void CMarketingMessages_GetDisplayMarketingMessage_Response::MergeFrom(const CMarketingMessages_GetDisplayMarketingMessage_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMarketingMessages_GetDisplayMarketingMessage_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_message()) {
    _internal_mutable_message()->::CDisplayMarketingMessage::MergeFrom(from._internal_message());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMarketingMessages_GetDisplayMarketingMessage_Response::CopyFrom(const CMarketingMessages_GetDisplayMarketingMessage_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMarketingMessages_GetDisplayMarketingMessage_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMarketingMessages_GetDisplayMarketingMessage_Response::IsInitialized() const {
  return true;
}

void CMarketingMessages_GetDisplayMarketingMessage_Response::InternalSwap(CMarketingMessages_GetDisplayMarketingMessage_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(message_, other->message_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMarketingMessages_GetDisplayMarketingMessage_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fmarketingmessages_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fmarketingmessages_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fmarketingmessages_2esteamclient_2eproto[10]);
}

// ===================================================================

class CMarketingMessages_MarkMessageSeen_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CMarketingMessages_MarkMessageSeen_Notification>()._has_bits_);
  static void set_has_gid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_display_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_template_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMarketingMessages_MarkMessageSeen_Notification::CMarketingMessages_MarkMessageSeen_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMarketingMessages_MarkMessageSeen_Notification)
}
CMarketingMessages_MarkMessageSeen_Notification::CMarketingMessages_MarkMessageSeen_Notification(const CMarketingMessages_MarkMessageSeen_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&gid_, &from.gid_,
    static_cast<size_t>(reinterpret_cast<char*>(&template_type_) -
    reinterpret_cast<char*>(&gid_)) + sizeof(template_type_));
  // @@protoc_insertion_point(copy_constructor:CMarketingMessages_MarkMessageSeen_Notification)
}

inline void CMarketingMessages_MarkMessageSeen_Notification::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&gid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&template_type_) -
    reinterpret_cast<char*>(&gid_)) + sizeof(template_type_));
}

CMarketingMessages_MarkMessageSeen_Notification::~CMarketingMessages_MarkMessageSeen_Notification() {
  // @@protoc_insertion_point(destructor:CMarketingMessages_MarkMessageSeen_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMarketingMessages_MarkMessageSeen_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMarketingMessages_MarkMessageSeen_Notification::ArenaDtor(void* object) {
  CMarketingMessages_MarkMessageSeen_Notification* _this = reinterpret_cast< CMarketingMessages_MarkMessageSeen_Notification* >(object);
  (void)_this;
}
void CMarketingMessages_MarkMessageSeen_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMarketingMessages_MarkMessageSeen_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMarketingMessages_MarkMessageSeen_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CMarketingMessages_MarkMessageSeen_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&gid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&template_type_) -
        reinterpret_cast<char*>(&gid_)) + sizeof(template_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMarketingMessages_MarkMessageSeen_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 gid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_gid(&has_bits);
          gid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 display_index = 2 [default = 0, (.description) = "Where in the stack was the marketing message, 1-based, zero means we don\'t know"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_display_index(&has_bits);
          display_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EMarketingMessageTemplateType template_type = 3 [default = k_EMarketingMessageTemplate_Unknown, (.description) = "Which type of template did they see"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EMarketingMessageTemplateType_IsValid(val))) {
            _internal_set_template_type(static_cast<::EMarketingMessageTemplateType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMarketingMessages_MarkMessageSeen_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMarketingMessages_MarkMessageSeen_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 gid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_gid(), target);
  }

  // optional uint32 display_index = 2 [default = 0, (.description) = "Where in the stack was the marketing message, 1-based, zero means we don\'t know"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_display_index(), target);
  }

  // optional .EMarketingMessageTemplateType template_type = 3 [default = k_EMarketingMessageTemplate_Unknown, (.description) = "Which type of template did they see"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_template_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMarketingMessages_MarkMessageSeen_Notification)
  return target;
}

size_t CMarketingMessages_MarkMessageSeen_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMarketingMessages_MarkMessageSeen_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 gid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 display_index = 2 [default = 0, (.description) = "Where in the stack was the marketing message, 1-based, zero means we don\'t know"];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_display_index());
    }

    // optional .EMarketingMessageTemplateType template_type = 3 [default = k_EMarketingMessageTemplate_Unknown, (.description) = "Which type of template did they see"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_template_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMarketingMessages_MarkMessageSeen_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMarketingMessages_MarkMessageSeen_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMarketingMessages_MarkMessageSeen_Notification::GetClassData() const { return &_class_data_; }

void CMarketingMessages_MarkMessageSeen_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMarketingMessages_MarkMessageSeen_Notification *>(to)->MergeFrom(
      static_cast<const CMarketingMessages_MarkMessageSeen_Notification &>(from));
}


void CMarketingMessages_MarkMessageSeen_Notification::MergeFrom(const CMarketingMessages_MarkMessageSeen_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMarketingMessages_MarkMessageSeen_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      gid_ = from.gid_;
    }
    if (cached_has_bits & 0x00000002u) {
      display_index_ = from.display_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      template_type_ = from.template_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMarketingMessages_MarkMessageSeen_Notification::CopyFrom(const CMarketingMessages_MarkMessageSeen_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMarketingMessages_MarkMessageSeen_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMarketingMessages_MarkMessageSeen_Notification::IsInitialized() const {
  return true;
}

void CMarketingMessages_MarkMessageSeen_Notification::InternalSwap(CMarketingMessages_MarkMessageSeen_Notification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMarketingMessages_MarkMessageSeen_Notification, template_type_)
      + sizeof(CMarketingMessages_MarkMessageSeen_Notification::template_type_)
      - PROTOBUF_FIELD_OFFSET(CMarketingMessages_MarkMessageSeen_Notification, gid_)>(
          reinterpret_cast<char*>(&gid_),
          reinterpret_cast<char*>(&other->gid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMarketingMessages_MarkMessageSeen_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fmarketingmessages_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fmarketingmessages_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fmarketingmessages_2esteamclient_2eproto[11]);
}

// ===================================================================

class CMarketingMessages_GetMarketingMessage_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CMarketingMessages_GetMarketingMessage_Request>()._has_bits_);
  static void set_has_gid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMarketingMessages_GetMarketingMessage_Request::CMarketingMessages_GetMarketingMessage_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMarketingMessages_GetMarketingMessage_Request)
}
CMarketingMessages_GetMarketingMessage_Request::CMarketingMessages_GetMarketingMessage_Request(const CMarketingMessages_GetMarketingMessage_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gid_ = from.gid_;
  // @@protoc_insertion_point(copy_constructor:CMarketingMessages_GetMarketingMessage_Request)
}

inline void CMarketingMessages_GetMarketingMessage_Request::SharedCtor() {
gid_ = uint64_t{0u};
}

CMarketingMessages_GetMarketingMessage_Request::~CMarketingMessages_GetMarketingMessage_Request() {
  // @@protoc_insertion_point(destructor:CMarketingMessages_GetMarketingMessage_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMarketingMessages_GetMarketingMessage_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMarketingMessages_GetMarketingMessage_Request::ArenaDtor(void* object) {
  CMarketingMessages_GetMarketingMessage_Request* _this = reinterpret_cast< CMarketingMessages_GetMarketingMessage_Request* >(object);
  (void)_this;
}
void CMarketingMessages_GetMarketingMessage_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMarketingMessages_GetMarketingMessage_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMarketingMessages_GetMarketingMessage_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CMarketingMessages_GetMarketingMessage_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gid_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMarketingMessages_GetMarketingMessage_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 gid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_gid(&has_bits);
          gid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMarketingMessages_GetMarketingMessage_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMarketingMessages_GetMarketingMessage_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 gid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_gid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMarketingMessages_GetMarketingMessage_Request)
  return target;
}

size_t CMarketingMessages_GetMarketingMessage_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMarketingMessages_GetMarketingMessage_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 gid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMarketingMessages_GetMarketingMessage_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMarketingMessages_GetMarketingMessage_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMarketingMessages_GetMarketingMessage_Request::GetClassData() const { return &_class_data_; }

void CMarketingMessages_GetMarketingMessage_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMarketingMessages_GetMarketingMessage_Request *>(to)->MergeFrom(
      static_cast<const CMarketingMessages_GetMarketingMessage_Request &>(from));
}


void CMarketingMessages_GetMarketingMessage_Request::MergeFrom(const CMarketingMessages_GetMarketingMessage_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMarketingMessages_GetMarketingMessage_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_gid()) {
    _internal_set_gid(from._internal_gid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMarketingMessages_GetMarketingMessage_Request::CopyFrom(const CMarketingMessages_GetMarketingMessage_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMarketingMessages_GetMarketingMessage_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMarketingMessages_GetMarketingMessage_Request::IsInitialized() const {
  return true;
}

void CMarketingMessages_GetMarketingMessage_Request::InternalSwap(CMarketingMessages_GetMarketingMessage_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(gid_, other->gid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMarketingMessages_GetMarketingMessage_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fmarketingmessages_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fmarketingmessages_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fmarketingmessages_2esteamclient_2eproto[12]);
}

// ===================================================================

class CMarketingMessages_GetMarketingMessage_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CMarketingMessages_GetMarketingMessage_Response>()._has_bits_);
  static const ::CMarketingMessageProto& message(const CMarketingMessages_GetMarketingMessage_Response* msg);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMarketingMessageProto&
CMarketingMessages_GetMarketingMessage_Response::_Internal::message(const CMarketingMessages_GetMarketingMessage_Response* msg) {
  return *msg->message_;
}
CMarketingMessages_GetMarketingMessage_Response::CMarketingMessages_GetMarketingMessage_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMarketingMessages_GetMarketingMessage_Response)
}
CMarketingMessages_GetMarketingMessage_Response::CMarketingMessages_GetMarketingMessage_Response(const CMarketingMessages_GetMarketingMessage_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_message()) {
    message_ = new ::CMarketingMessageProto(*from.message_);
  } else {
    message_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CMarketingMessages_GetMarketingMessage_Response)
}

inline void CMarketingMessages_GetMarketingMessage_Response::SharedCtor() {
message_ = nullptr;
}

CMarketingMessages_GetMarketingMessage_Response::~CMarketingMessages_GetMarketingMessage_Response() {
  // @@protoc_insertion_point(destructor:CMarketingMessages_GetMarketingMessage_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMarketingMessages_GetMarketingMessage_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete message_;
}

void CMarketingMessages_GetMarketingMessage_Response::ArenaDtor(void* object) {
  CMarketingMessages_GetMarketingMessage_Response* _this = reinterpret_cast< CMarketingMessages_GetMarketingMessage_Response* >(object);
  (void)_this;
}
void CMarketingMessages_GetMarketingMessage_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMarketingMessages_GetMarketingMessage_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMarketingMessages_GetMarketingMessage_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CMarketingMessages_GetMarketingMessage_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(message_ != nullptr);
    message_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMarketingMessages_GetMarketingMessage_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMarketingMessageProto message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMarketingMessages_GetMarketingMessage_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMarketingMessages_GetMarketingMessage_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMarketingMessageProto message = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::message(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMarketingMessages_GetMarketingMessage_Response)
  return target;
}

size_t CMarketingMessages_GetMarketingMessage_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMarketingMessages_GetMarketingMessage_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMarketingMessageProto message = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *message_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMarketingMessages_GetMarketingMessage_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMarketingMessages_GetMarketingMessage_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMarketingMessages_GetMarketingMessage_Response::GetClassData() const { return &_class_data_; }

void CMarketingMessages_GetMarketingMessage_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMarketingMessages_GetMarketingMessage_Response *>(to)->MergeFrom(
      static_cast<const CMarketingMessages_GetMarketingMessage_Response &>(from));
}


void CMarketingMessages_GetMarketingMessage_Response::MergeFrom(const CMarketingMessages_GetMarketingMessage_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMarketingMessages_GetMarketingMessage_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_message()) {
    _internal_mutable_message()->::CMarketingMessageProto::MergeFrom(from._internal_message());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMarketingMessages_GetMarketingMessage_Response::CopyFrom(const CMarketingMessages_GetMarketingMessage_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMarketingMessages_GetMarketingMessage_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMarketingMessages_GetMarketingMessage_Response::IsInitialized() const {
  return true;
}

void CMarketingMessages_GetMarketingMessage_Response::InternalSwap(CMarketingMessages_GetMarketingMessage_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(message_, other->message_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMarketingMessages_GetMarketingMessage_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fmarketingmessages_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fmarketingmessages_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fmarketingmessages_2esteamclient_2eproto[13]);
}

// ===================================================================

class CMarketingMessages_CreateMarketingMessage_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CMarketingMessages_CreateMarketingMessage_Request>()._has_bits_);
  static const ::CMarketingMessageProto& message(const CMarketingMessages_CreateMarketingMessage_Request* msg);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_from_json(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMarketingMessageProto&
CMarketingMessages_CreateMarketingMessage_Request::_Internal::message(const CMarketingMessages_CreateMarketingMessage_Request* msg) {
  return *msg->message_;
}
CMarketingMessages_CreateMarketingMessage_Request::CMarketingMessages_CreateMarketingMessage_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMarketingMessages_CreateMarketingMessage_Request)
}
CMarketingMessages_CreateMarketingMessage_Request::CMarketingMessages_CreateMarketingMessage_Request(const CMarketingMessages_CreateMarketingMessage_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_message()) {
    message_ = new ::CMarketingMessageProto(*from.message_);
  } else {
    message_ = nullptr;
  }
  from_json_ = from.from_json_;
  // @@protoc_insertion_point(copy_constructor:CMarketingMessages_CreateMarketingMessage_Request)
}

inline void CMarketingMessages_CreateMarketingMessage_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&message_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&from_json_) -
    reinterpret_cast<char*>(&message_)) + sizeof(from_json_));
}

CMarketingMessages_CreateMarketingMessage_Request::~CMarketingMessages_CreateMarketingMessage_Request() {
  // @@protoc_insertion_point(destructor:CMarketingMessages_CreateMarketingMessage_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMarketingMessages_CreateMarketingMessage_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete message_;
}

void CMarketingMessages_CreateMarketingMessage_Request::ArenaDtor(void* object) {
  CMarketingMessages_CreateMarketingMessage_Request* _this = reinterpret_cast< CMarketingMessages_CreateMarketingMessage_Request* >(object);
  (void)_this;
}
void CMarketingMessages_CreateMarketingMessage_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMarketingMessages_CreateMarketingMessage_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMarketingMessages_CreateMarketingMessage_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CMarketingMessages_CreateMarketingMessage_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(message_ != nullptr);
    message_->Clear();
  }
  from_json_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMarketingMessages_CreateMarketingMessage_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMarketingMessageProto message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool from_json = 2 [(.description) = "If set, then overwrite the template_vars and additional_restrictions keyvalues from json"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_from_json(&has_bits);
          from_json_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMarketingMessages_CreateMarketingMessage_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMarketingMessages_CreateMarketingMessage_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMarketingMessageProto message = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::message(this), target, stream);
  }

  // optional bool from_json = 2 [(.description) = "If set, then overwrite the template_vars and additional_restrictions keyvalues from json"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_from_json(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMarketingMessages_CreateMarketingMessage_Request)
  return target;
}

size_t CMarketingMessages_CreateMarketingMessage_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMarketingMessages_CreateMarketingMessage_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMarketingMessageProto message = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_);
    }

    // optional bool from_json = 2 [(.description) = "If set, then overwrite the template_vars and additional_restrictions keyvalues from json"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMarketingMessages_CreateMarketingMessage_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMarketingMessages_CreateMarketingMessage_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMarketingMessages_CreateMarketingMessage_Request::GetClassData() const { return &_class_data_; }

void CMarketingMessages_CreateMarketingMessage_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMarketingMessages_CreateMarketingMessage_Request *>(to)->MergeFrom(
      static_cast<const CMarketingMessages_CreateMarketingMessage_Request &>(from));
}


void CMarketingMessages_CreateMarketingMessage_Request::MergeFrom(const CMarketingMessages_CreateMarketingMessage_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMarketingMessages_CreateMarketingMessage_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_message()->::CMarketingMessageProto::MergeFrom(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      from_json_ = from.from_json_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMarketingMessages_CreateMarketingMessage_Request::CopyFrom(const CMarketingMessages_CreateMarketingMessage_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMarketingMessages_CreateMarketingMessage_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMarketingMessages_CreateMarketingMessage_Request::IsInitialized() const {
  return true;
}

void CMarketingMessages_CreateMarketingMessage_Request::InternalSwap(CMarketingMessages_CreateMarketingMessage_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMarketingMessages_CreateMarketingMessage_Request, from_json_)
      + sizeof(CMarketingMessages_CreateMarketingMessage_Request::from_json_)
      - PROTOBUF_FIELD_OFFSET(CMarketingMessages_CreateMarketingMessage_Request, message_)>(
          reinterpret_cast<char*>(&message_),
          reinterpret_cast<char*>(&other->message_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMarketingMessages_CreateMarketingMessage_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fmarketingmessages_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fmarketingmessages_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fmarketingmessages_2esteamclient_2eproto[14]);
}

// ===================================================================

class CMarketingMessages_CreateMarketingMessage_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CMarketingMessages_CreateMarketingMessage_Response>()._has_bits_);
  static void set_has_gid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMarketingMessages_CreateMarketingMessage_Response::CMarketingMessages_CreateMarketingMessage_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMarketingMessages_CreateMarketingMessage_Response)
}
CMarketingMessages_CreateMarketingMessage_Response::CMarketingMessages_CreateMarketingMessage_Response(const CMarketingMessages_CreateMarketingMessage_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gid_ = from.gid_;
  // @@protoc_insertion_point(copy_constructor:CMarketingMessages_CreateMarketingMessage_Response)
}

inline void CMarketingMessages_CreateMarketingMessage_Response::SharedCtor() {
gid_ = uint64_t{0u};
}

CMarketingMessages_CreateMarketingMessage_Response::~CMarketingMessages_CreateMarketingMessage_Response() {
  // @@protoc_insertion_point(destructor:CMarketingMessages_CreateMarketingMessage_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMarketingMessages_CreateMarketingMessage_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMarketingMessages_CreateMarketingMessage_Response::ArenaDtor(void* object) {
  CMarketingMessages_CreateMarketingMessage_Response* _this = reinterpret_cast< CMarketingMessages_CreateMarketingMessage_Response* >(object);
  (void)_this;
}
void CMarketingMessages_CreateMarketingMessage_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMarketingMessages_CreateMarketingMessage_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMarketingMessages_CreateMarketingMessage_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CMarketingMessages_CreateMarketingMessage_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gid_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMarketingMessages_CreateMarketingMessage_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 gid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_gid(&has_bits);
          gid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMarketingMessages_CreateMarketingMessage_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMarketingMessages_CreateMarketingMessage_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 gid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_gid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMarketingMessages_CreateMarketingMessage_Response)
  return target;
}

size_t CMarketingMessages_CreateMarketingMessage_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMarketingMessages_CreateMarketingMessage_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 gid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMarketingMessages_CreateMarketingMessage_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMarketingMessages_CreateMarketingMessage_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMarketingMessages_CreateMarketingMessage_Response::GetClassData() const { return &_class_data_; }

void CMarketingMessages_CreateMarketingMessage_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMarketingMessages_CreateMarketingMessage_Response *>(to)->MergeFrom(
      static_cast<const CMarketingMessages_CreateMarketingMessage_Response &>(from));
}


void CMarketingMessages_CreateMarketingMessage_Response::MergeFrom(const CMarketingMessages_CreateMarketingMessage_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMarketingMessages_CreateMarketingMessage_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_gid()) {
    _internal_set_gid(from._internal_gid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMarketingMessages_CreateMarketingMessage_Response::CopyFrom(const CMarketingMessages_CreateMarketingMessage_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMarketingMessages_CreateMarketingMessage_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMarketingMessages_CreateMarketingMessage_Response::IsInitialized() const {
  return true;
}

void CMarketingMessages_CreateMarketingMessage_Response::InternalSwap(CMarketingMessages_CreateMarketingMessage_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(gid_, other->gid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMarketingMessages_CreateMarketingMessage_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fmarketingmessages_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fmarketingmessages_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fmarketingmessages_2esteamclient_2eproto[15]);
}

// ===================================================================

class CMarketingMessages_UpdateMarketingMessage_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CMarketingMessages_UpdateMarketingMessage_Request>()._has_bits_);
  static void set_has_gid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMarketingMessageProto& message(const CMarketingMessages_UpdateMarketingMessage_Request* msg);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_from_json(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::CMarketingMessageProto&
CMarketingMessages_UpdateMarketingMessage_Request::_Internal::message(const CMarketingMessages_UpdateMarketingMessage_Request* msg) {
  return *msg->message_;
}
CMarketingMessages_UpdateMarketingMessage_Request::CMarketingMessages_UpdateMarketingMessage_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMarketingMessages_UpdateMarketingMessage_Request)
}
CMarketingMessages_UpdateMarketingMessage_Request::CMarketingMessages_UpdateMarketingMessage_Request(const CMarketingMessages_UpdateMarketingMessage_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_message()) {
    message_ = new ::CMarketingMessageProto(*from.message_);
  } else {
    message_ = nullptr;
  }
  ::memcpy(&gid_, &from.gid_,
    static_cast<size_t>(reinterpret_cast<char*>(&from_json_) -
    reinterpret_cast<char*>(&gid_)) + sizeof(from_json_));
  // @@protoc_insertion_point(copy_constructor:CMarketingMessages_UpdateMarketingMessage_Request)
}

inline void CMarketingMessages_UpdateMarketingMessage_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&message_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&from_json_) -
    reinterpret_cast<char*>(&message_)) + sizeof(from_json_));
}

CMarketingMessages_UpdateMarketingMessage_Request::~CMarketingMessages_UpdateMarketingMessage_Request() {
  // @@protoc_insertion_point(destructor:CMarketingMessages_UpdateMarketingMessage_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMarketingMessages_UpdateMarketingMessage_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete message_;
}

void CMarketingMessages_UpdateMarketingMessage_Request::ArenaDtor(void* object) {
  CMarketingMessages_UpdateMarketingMessage_Request* _this = reinterpret_cast< CMarketingMessages_UpdateMarketingMessage_Request* >(object);
  (void)_this;
}
void CMarketingMessages_UpdateMarketingMessage_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMarketingMessages_UpdateMarketingMessage_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMarketingMessages_UpdateMarketingMessage_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CMarketingMessages_UpdateMarketingMessage_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(message_ != nullptr);
    message_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&gid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&from_json_) -
        reinterpret_cast<char*>(&gid_)) + sizeof(from_json_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMarketingMessages_UpdateMarketingMessage_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 gid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_gid(&has_bits);
          gid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional .CMarketingMessageProto message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool from_json = 3 [(.description) = "If set, then overwrite the template_vars and additional_restrictions keyvalues from json"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_from_json(&has_bits);
          from_json_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMarketingMessages_UpdateMarketingMessage_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMarketingMessages_UpdateMarketingMessage_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 gid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_gid(), target);
  }

  // optional .CMarketingMessageProto message = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::message(this), target, stream);
  }

  // optional bool from_json = 3 [(.description) = "If set, then overwrite the template_vars and additional_restrictions keyvalues from json"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_from_json(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMarketingMessages_UpdateMarketingMessage_Request)
  return target;
}

size_t CMarketingMessages_UpdateMarketingMessage_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMarketingMessages_UpdateMarketingMessage_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CMarketingMessageProto message = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_);
    }

    // optional fixed64 gid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional bool from_json = 3 [(.description) = "If set, then overwrite the template_vars and additional_restrictions keyvalues from json"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMarketingMessages_UpdateMarketingMessage_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMarketingMessages_UpdateMarketingMessage_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMarketingMessages_UpdateMarketingMessage_Request::GetClassData() const { return &_class_data_; }

void CMarketingMessages_UpdateMarketingMessage_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMarketingMessages_UpdateMarketingMessage_Request *>(to)->MergeFrom(
      static_cast<const CMarketingMessages_UpdateMarketingMessage_Request &>(from));
}


void CMarketingMessages_UpdateMarketingMessage_Request::MergeFrom(const CMarketingMessages_UpdateMarketingMessage_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMarketingMessages_UpdateMarketingMessage_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_message()->::CMarketingMessageProto::MergeFrom(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      gid_ = from.gid_;
    }
    if (cached_has_bits & 0x00000004u) {
      from_json_ = from.from_json_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMarketingMessages_UpdateMarketingMessage_Request::CopyFrom(const CMarketingMessages_UpdateMarketingMessage_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMarketingMessages_UpdateMarketingMessage_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMarketingMessages_UpdateMarketingMessage_Request::IsInitialized() const {
  return true;
}

void CMarketingMessages_UpdateMarketingMessage_Request::InternalSwap(CMarketingMessages_UpdateMarketingMessage_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMarketingMessages_UpdateMarketingMessage_Request, from_json_)
      + sizeof(CMarketingMessages_UpdateMarketingMessage_Request::from_json_)
      - PROTOBUF_FIELD_OFFSET(CMarketingMessages_UpdateMarketingMessage_Request, message_)>(
          reinterpret_cast<char*>(&message_),
          reinterpret_cast<char*>(&other->message_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMarketingMessages_UpdateMarketingMessage_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fmarketingmessages_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fmarketingmessages_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fmarketingmessages_2esteamclient_2eproto[16]);
}

// ===================================================================

class CMarketingMessages_UpdateMarketingMessage_Response::_Internal {
 public:
};

CMarketingMessages_UpdateMarketingMessage_Response::CMarketingMessages_UpdateMarketingMessage_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CMarketingMessages_UpdateMarketingMessage_Response)
}
CMarketingMessages_UpdateMarketingMessage_Response::CMarketingMessages_UpdateMarketingMessage_Response(const CMarketingMessages_UpdateMarketingMessage_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMarketingMessages_UpdateMarketingMessage_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMarketingMessages_UpdateMarketingMessage_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMarketingMessages_UpdateMarketingMessage_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CMarketingMessages_UpdateMarketingMessage_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fmarketingmessages_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fmarketingmessages_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fmarketingmessages_2esteamclient_2eproto[17]);
}

// ===================================================================

class CMarketingMessages_DeleteMarketingMessage_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CMarketingMessages_DeleteMarketingMessage_Request>()._has_bits_);
  static void set_has_gid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMarketingMessages_DeleteMarketingMessage_Request::CMarketingMessages_DeleteMarketingMessage_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMarketingMessages_DeleteMarketingMessage_Request)
}
CMarketingMessages_DeleteMarketingMessage_Request::CMarketingMessages_DeleteMarketingMessage_Request(const CMarketingMessages_DeleteMarketingMessage_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gid_ = from.gid_;
  // @@protoc_insertion_point(copy_constructor:CMarketingMessages_DeleteMarketingMessage_Request)
}

inline void CMarketingMessages_DeleteMarketingMessage_Request::SharedCtor() {
gid_ = uint64_t{0u};
}

CMarketingMessages_DeleteMarketingMessage_Request::~CMarketingMessages_DeleteMarketingMessage_Request() {
  // @@protoc_insertion_point(destructor:CMarketingMessages_DeleteMarketingMessage_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMarketingMessages_DeleteMarketingMessage_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMarketingMessages_DeleteMarketingMessage_Request::ArenaDtor(void* object) {
  CMarketingMessages_DeleteMarketingMessage_Request* _this = reinterpret_cast< CMarketingMessages_DeleteMarketingMessage_Request* >(object);
  (void)_this;
}
void CMarketingMessages_DeleteMarketingMessage_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMarketingMessages_DeleteMarketingMessage_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMarketingMessages_DeleteMarketingMessage_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CMarketingMessages_DeleteMarketingMessage_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gid_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMarketingMessages_DeleteMarketingMessage_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 gid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_gid(&has_bits);
          gid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMarketingMessages_DeleteMarketingMessage_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMarketingMessages_DeleteMarketingMessage_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 gid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_gid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMarketingMessages_DeleteMarketingMessage_Request)
  return target;
}

size_t CMarketingMessages_DeleteMarketingMessage_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMarketingMessages_DeleteMarketingMessage_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 gid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMarketingMessages_DeleteMarketingMessage_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMarketingMessages_DeleteMarketingMessage_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMarketingMessages_DeleteMarketingMessage_Request::GetClassData() const { return &_class_data_; }

void CMarketingMessages_DeleteMarketingMessage_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMarketingMessages_DeleteMarketingMessage_Request *>(to)->MergeFrom(
      static_cast<const CMarketingMessages_DeleteMarketingMessage_Request &>(from));
}


void CMarketingMessages_DeleteMarketingMessage_Request::MergeFrom(const CMarketingMessages_DeleteMarketingMessage_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMarketingMessages_DeleteMarketingMessage_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_gid()) {
    _internal_set_gid(from._internal_gid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMarketingMessages_DeleteMarketingMessage_Request::CopyFrom(const CMarketingMessages_DeleteMarketingMessage_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMarketingMessages_DeleteMarketingMessage_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMarketingMessages_DeleteMarketingMessage_Request::IsInitialized() const {
  return true;
}

void CMarketingMessages_DeleteMarketingMessage_Request::InternalSwap(CMarketingMessages_DeleteMarketingMessage_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(gid_, other->gid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMarketingMessages_DeleteMarketingMessage_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fmarketingmessages_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fmarketingmessages_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fmarketingmessages_2esteamclient_2eproto[18]);
}

// ===================================================================

class CMarketingMessages_DeleteMarketingMessage_Response::_Internal {
 public:
};

CMarketingMessages_DeleteMarketingMessage_Response::CMarketingMessages_DeleteMarketingMessage_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CMarketingMessages_DeleteMarketingMessage_Response)
}
CMarketingMessages_DeleteMarketingMessage_Response::CMarketingMessages_DeleteMarketingMessage_Response(const CMarketingMessages_DeleteMarketingMessage_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMarketingMessages_DeleteMarketingMessage_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMarketingMessages_DeleteMarketingMessage_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMarketingMessages_DeleteMarketingMessage_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CMarketingMessages_DeleteMarketingMessage_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fmarketingmessages_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fmarketingmessages_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fmarketingmessages_2esteamclient_2eproto[19]);
}

// ===================================================================

class CMarketingMessages_FindMarketingMessages_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CMarketingMessages_FindMarketingMessages_Request>()._has_bits_);
  static void set_has_lookup_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_gid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_message_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMarketingMessages_FindMarketingMessages_Request::CMarketingMessages_FindMarketingMessages_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  gidlist_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMarketingMessages_FindMarketingMessages_Request)
}
CMarketingMessages_FindMarketingMessages_Request::CMarketingMessages_FindMarketingMessages_Request(const CMarketingMessages_FindMarketingMessages_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      gidlist_(from.gidlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArenaForAllocation());
  }
  ::memcpy(&gid_, &from.gid_,
    static_cast<size_t>(reinterpret_cast<char*>(&message_type_) -
    reinterpret_cast<char*>(&gid_)) + sizeof(message_type_));
  // @@protoc_insertion_point(copy_constructor:CMarketingMessages_FindMarketingMessages_Request)
}

inline void CMarketingMessages_FindMarketingMessages_Request::SharedCtor() {
title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&gid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&message_type_) -
    reinterpret_cast<char*>(&gid_)) + sizeof(message_type_));
}

CMarketingMessages_FindMarketingMessages_Request::~CMarketingMessages_FindMarketingMessages_Request() {
  // @@protoc_insertion_point(destructor:CMarketingMessages_FindMarketingMessages_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMarketingMessages_FindMarketingMessages_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMarketingMessages_FindMarketingMessages_Request::ArenaDtor(void* object) {
  CMarketingMessages_FindMarketingMessages_Request* _this = reinterpret_cast< CMarketingMessages_FindMarketingMessages_Request* >(object);
  (void)_this;
}
void CMarketingMessages_FindMarketingMessages_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMarketingMessages_FindMarketingMessages_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMarketingMessages_FindMarketingMessages_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CMarketingMessages_FindMarketingMessages_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gidlist_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    title_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&gid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&message_type_) -
        reinterpret_cast<char*>(&gid_)) + sizeof(message_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMarketingMessages_FindMarketingMessages_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .EMarketingMessageLookupType lookup_type = 1 [default = k_EMarketingMessageLookupInvalid];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EMarketingMessageLookupType_IsValid(val))) {
            _internal_set_lookup_type(static_cast<::EMarketingMessageLookupType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 gid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_gid(&has_bits);
          gid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional .EMarketingMessageType message_type = 3 [default = k_EMarketingMessageInvalid];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EMarketingMessageType_IsValid(val))) {
            _internal_set_message_type(static_cast<::EMarketingMessageType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated fixed64 gidlist = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_gidlist(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr));
            ptr += sizeof(uint64_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<33>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_gidlist(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string title = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMarketingMessages_FindMarketingMessages_Request.title");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMarketingMessages_FindMarketingMessages_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMarketingMessages_FindMarketingMessages_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .EMarketingMessageLookupType lookup_type = 1 [default = k_EMarketingMessageLookupInvalid];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_lookup_type(), target);
  }

  // optional fixed64 gid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_gid(), target);
  }

  // optional .EMarketingMessageType message_type = 3 [default = k_EMarketingMessageInvalid];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_message_type(), target);
  }

  // repeated fixed64 gidlist = 4;
  for (int i = 0, n = this->_internal_gidlist_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(4, this->_internal_gidlist(i), target);
  }

  // optional string title = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMarketingMessages_FindMarketingMessages_Request.title");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_title(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMarketingMessages_FindMarketingMessages_Request)
  return target;
}

size_t CMarketingMessages_FindMarketingMessages_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMarketingMessages_FindMarketingMessages_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 gidlist = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_gidlist_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_gidlist_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string title = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional fixed64 gid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional .EMarketingMessageLookupType lookup_type = 1 [default = k_EMarketingMessageLookupInvalid];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_lookup_type());
    }

    // optional .EMarketingMessageType message_type = 3 [default = k_EMarketingMessageInvalid];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_message_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMarketingMessages_FindMarketingMessages_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMarketingMessages_FindMarketingMessages_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMarketingMessages_FindMarketingMessages_Request::GetClassData() const { return &_class_data_; }

void CMarketingMessages_FindMarketingMessages_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMarketingMessages_FindMarketingMessages_Request *>(to)->MergeFrom(
      static_cast<const CMarketingMessages_FindMarketingMessages_Request &>(from));
}


void CMarketingMessages_FindMarketingMessages_Request::MergeFrom(const CMarketingMessages_FindMarketingMessages_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMarketingMessages_FindMarketingMessages_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  gidlist_.MergeFrom(from.gidlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000002u) {
      gid_ = from.gid_;
    }
    if (cached_has_bits & 0x00000004u) {
      lookup_type_ = from.lookup_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      message_type_ = from.message_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMarketingMessages_FindMarketingMessages_Request::CopyFrom(const CMarketingMessages_FindMarketingMessages_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMarketingMessages_FindMarketingMessages_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMarketingMessages_FindMarketingMessages_Request::IsInitialized() const {
  return true;
}

void CMarketingMessages_FindMarketingMessages_Request::InternalSwap(CMarketingMessages_FindMarketingMessages_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  gidlist_.InternalSwap(&other->gidlist_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &title_, lhs_arena,
      &other->title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMarketingMessages_FindMarketingMessages_Request, message_type_)
      + sizeof(CMarketingMessages_FindMarketingMessages_Request::message_type_)
      - PROTOBUF_FIELD_OFFSET(CMarketingMessages_FindMarketingMessages_Request, gid_)>(
          reinterpret_cast<char*>(&gid_),
          reinterpret_cast<char*>(&other->gid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMarketingMessages_FindMarketingMessages_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fmarketingmessages_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fmarketingmessages_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fmarketingmessages_2esteamclient_2eproto[20]);
}

// ===================================================================

class CMarketingMessages_FindMarketingMessages_Response::_Internal {
 public:
};

CMarketingMessages_FindMarketingMessages_Response::CMarketingMessages_FindMarketingMessages_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  messages_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMarketingMessages_FindMarketingMessages_Response)
}
CMarketingMessages_FindMarketingMessages_Response::CMarketingMessages_FindMarketingMessages_Response(const CMarketingMessages_FindMarketingMessages_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      messages_(from.messages_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMarketingMessages_FindMarketingMessages_Response)
}

inline void CMarketingMessages_FindMarketingMessages_Response::SharedCtor() {
}

CMarketingMessages_FindMarketingMessages_Response::~CMarketingMessages_FindMarketingMessages_Response() {
  // @@protoc_insertion_point(destructor:CMarketingMessages_FindMarketingMessages_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMarketingMessages_FindMarketingMessages_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMarketingMessages_FindMarketingMessages_Response::ArenaDtor(void* object) {
  CMarketingMessages_FindMarketingMessages_Response* _this = reinterpret_cast< CMarketingMessages_FindMarketingMessages_Response* >(object);
  (void)_this;
}
void CMarketingMessages_FindMarketingMessages_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMarketingMessages_FindMarketingMessages_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMarketingMessages_FindMarketingMessages_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CMarketingMessages_FindMarketingMessages_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  messages_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMarketingMessages_FindMarketingMessages_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMarketingMessageProto messages = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMarketingMessages_FindMarketingMessages_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMarketingMessages_FindMarketingMessages_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMarketingMessageProto messages = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_messages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_messages(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMarketingMessages_FindMarketingMessages_Response)
  return target;
}

size_t CMarketingMessages_FindMarketingMessages_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMarketingMessages_FindMarketingMessages_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMarketingMessageProto messages = 1;
  total_size += 1UL * this->_internal_messages_size();
  for (const auto& msg : this->messages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMarketingMessages_FindMarketingMessages_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMarketingMessages_FindMarketingMessages_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMarketingMessages_FindMarketingMessages_Response::GetClassData() const { return &_class_data_; }

void CMarketingMessages_FindMarketingMessages_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMarketingMessages_FindMarketingMessages_Response *>(to)->MergeFrom(
      static_cast<const CMarketingMessages_FindMarketingMessages_Response &>(from));
}


void CMarketingMessages_FindMarketingMessages_Response::MergeFrom(const CMarketingMessages_FindMarketingMessages_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMarketingMessages_FindMarketingMessages_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  messages_.MergeFrom(from.messages_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMarketingMessages_FindMarketingMessages_Response::CopyFrom(const CMarketingMessages_FindMarketingMessages_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMarketingMessages_FindMarketingMessages_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMarketingMessages_FindMarketingMessages_Response::IsInitialized() const {
  return true;
}

void CMarketingMessages_FindMarketingMessages_Response::InternalSwap(CMarketingMessages_FindMarketingMessages_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  messages_.InternalSwap(&other->messages_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMarketingMessages_FindMarketingMessages_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fmarketingmessages_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fmarketingmessages_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fmarketingmessages_2esteamclient_2eproto[21]);
}

// ===================================================================

class CMarketingMessages_GetMarketingMessageViewerStats_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CMarketingMessages_GetMarketingMessageViewerStats_Request>()._has_bits_);
  static void set_has_gid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMarketingMessages_GetMarketingMessageViewerStats_Request::CMarketingMessages_GetMarketingMessageViewerStats_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMarketingMessages_GetMarketingMessageViewerStats_Request)
}
CMarketingMessages_GetMarketingMessageViewerStats_Request::CMarketingMessages_GetMarketingMessageViewerStats_Request(const CMarketingMessages_GetMarketingMessageViewerStats_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gid_ = from.gid_;
  // @@protoc_insertion_point(copy_constructor:CMarketingMessages_GetMarketingMessageViewerStats_Request)
}

inline void CMarketingMessages_GetMarketingMessageViewerStats_Request::SharedCtor() {
gid_ = uint64_t{0u};
}

CMarketingMessages_GetMarketingMessageViewerStats_Request::~CMarketingMessages_GetMarketingMessageViewerStats_Request() {
  // @@protoc_insertion_point(destructor:CMarketingMessages_GetMarketingMessageViewerStats_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMarketingMessages_GetMarketingMessageViewerStats_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMarketingMessages_GetMarketingMessageViewerStats_Request::ArenaDtor(void* object) {
  CMarketingMessages_GetMarketingMessageViewerStats_Request* _this = reinterpret_cast< CMarketingMessages_GetMarketingMessageViewerStats_Request* >(object);
  (void)_this;
}
void CMarketingMessages_GetMarketingMessageViewerStats_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMarketingMessages_GetMarketingMessageViewerStats_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMarketingMessages_GetMarketingMessageViewerStats_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CMarketingMessages_GetMarketingMessageViewerStats_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gid_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMarketingMessages_GetMarketingMessageViewerStats_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 gid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_gid(&has_bits);
          gid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMarketingMessages_GetMarketingMessageViewerStats_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMarketingMessages_GetMarketingMessageViewerStats_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 gid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_gid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMarketingMessages_GetMarketingMessageViewerStats_Request)
  return target;
}

size_t CMarketingMessages_GetMarketingMessageViewerStats_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMarketingMessages_GetMarketingMessageViewerStats_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 gid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMarketingMessages_GetMarketingMessageViewerStats_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMarketingMessages_GetMarketingMessageViewerStats_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMarketingMessages_GetMarketingMessageViewerStats_Request::GetClassData() const { return &_class_data_; }

void CMarketingMessages_GetMarketingMessageViewerStats_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMarketingMessages_GetMarketingMessageViewerStats_Request *>(to)->MergeFrom(
      static_cast<const CMarketingMessages_GetMarketingMessageViewerStats_Request &>(from));
}


void CMarketingMessages_GetMarketingMessageViewerStats_Request::MergeFrom(const CMarketingMessages_GetMarketingMessageViewerStats_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMarketingMessages_GetMarketingMessageViewerStats_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_gid()) {
    _internal_set_gid(from._internal_gid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMarketingMessages_GetMarketingMessageViewerStats_Request::CopyFrom(const CMarketingMessages_GetMarketingMessageViewerStats_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMarketingMessages_GetMarketingMessageViewerStats_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMarketingMessages_GetMarketingMessageViewerStats_Request::IsInitialized() const {
  return true;
}

void CMarketingMessages_GetMarketingMessageViewerStats_Request::InternalSwap(CMarketingMessages_GetMarketingMessageViewerStats_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(gid_, other->gid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMarketingMessages_GetMarketingMessageViewerStats_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fmarketingmessages_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fmarketingmessages_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fmarketingmessages_2esteamclient_2eproto[22]);
}

// ===================================================================

class CMarketingMessageHourlyStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CMarketingMessageHourlyStats>()._has_bits_);
  static void set_has_rt_time_hour(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_seen_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_template_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_display_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMarketingMessageHourlyStats::CMarketingMessageHourlyStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMarketingMessageHourlyStats)
}
CMarketingMessageHourlyStats::CMarketingMessageHourlyStats(const CMarketingMessageHourlyStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&rt_time_hour_, &from.rt_time_hour_,
    static_cast<size_t>(reinterpret_cast<char*>(&display_index_) -
    reinterpret_cast<char*>(&rt_time_hour_)) + sizeof(display_index_));
  // @@protoc_insertion_point(copy_constructor:CMarketingMessageHourlyStats)
}

inline void CMarketingMessageHourlyStats::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&rt_time_hour_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&display_index_) -
    reinterpret_cast<char*>(&rt_time_hour_)) + sizeof(display_index_));
}

CMarketingMessageHourlyStats::~CMarketingMessageHourlyStats() {
  // @@protoc_insertion_point(destructor:CMarketingMessageHourlyStats)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMarketingMessageHourlyStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMarketingMessageHourlyStats::ArenaDtor(void* object) {
  CMarketingMessageHourlyStats* _this = reinterpret_cast< CMarketingMessageHourlyStats* >(object);
  (void)_this;
}
void CMarketingMessageHourlyStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMarketingMessageHourlyStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMarketingMessageHourlyStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMarketingMessageHourlyStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&rt_time_hour_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&display_index_) -
        reinterpret_cast<char*>(&rt_time_hour_)) + sizeof(display_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMarketingMessageHourlyStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 rt_time_hour = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_rt_time_hour(&has_bits);
          rt_time_hour_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 seen_count = 2 [(.description) = "within the hour period"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_seen_count(&has_bits);
          seen_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EMarketingMessageTemplateType template_type = 3 [default = k_EMarketingMessageTemplate_Unknown, (.description) = "Which template type was shown, usually just IMAGE"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EMarketingMessageTemplateType_IsValid(val))) {
            _internal_set_template_type(static_cast<::EMarketingMessageTemplateType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 display_index = 4 [(.description) = "Zero is invalid/we don\'t have information; 1 based index"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_display_index(&has_bits);
          display_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMarketingMessageHourlyStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMarketingMessageHourlyStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 rt_time_hour = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_rt_time_hour(), target);
  }

  // optional uint32 seen_count = 2 [(.description) = "within the hour period"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_seen_count(), target);
  }

  // optional .EMarketingMessageTemplateType template_type = 3 [default = k_EMarketingMessageTemplate_Unknown, (.description) = "Which template type was shown, usually just IMAGE"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_template_type(), target);
  }

  // optional uint32 display_index = 4 [(.description) = "Zero is invalid/we don\'t have information; 1 based index"];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_display_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMarketingMessageHourlyStats)
  return target;
}

size_t CMarketingMessageHourlyStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMarketingMessageHourlyStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 rt_time_hour = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_rt_time_hour());
    }

    // optional uint32 seen_count = 2 [(.description) = "within the hour period"];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_seen_count());
    }

    // optional .EMarketingMessageTemplateType template_type = 3 [default = k_EMarketingMessageTemplate_Unknown, (.description) = "Which template type was shown, usually just IMAGE"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_template_type());
    }

    // optional uint32 display_index = 4 [(.description) = "Zero is invalid/we don\'t have information; 1 based index"];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_display_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMarketingMessageHourlyStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMarketingMessageHourlyStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMarketingMessageHourlyStats::GetClassData() const { return &_class_data_; }

void CMarketingMessageHourlyStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMarketingMessageHourlyStats *>(to)->MergeFrom(
      static_cast<const CMarketingMessageHourlyStats &>(from));
}


void CMarketingMessageHourlyStats::MergeFrom(const CMarketingMessageHourlyStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMarketingMessageHourlyStats)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      rt_time_hour_ = from.rt_time_hour_;
    }
    if (cached_has_bits & 0x00000002u) {
      seen_count_ = from.seen_count_;
    }
    if (cached_has_bits & 0x00000004u) {
      template_type_ = from.template_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      display_index_ = from.display_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMarketingMessageHourlyStats::CopyFrom(const CMarketingMessageHourlyStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMarketingMessageHourlyStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMarketingMessageHourlyStats::IsInitialized() const {
  return true;
}

void CMarketingMessageHourlyStats::InternalSwap(CMarketingMessageHourlyStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMarketingMessageHourlyStats, display_index_)
      + sizeof(CMarketingMessageHourlyStats::display_index_)
      - PROTOBUF_FIELD_OFFSET(CMarketingMessageHourlyStats, rt_time_hour_)>(
          reinterpret_cast<char*>(&rt_time_hour_),
          reinterpret_cast<char*>(&other->rt_time_hour_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMarketingMessageHourlyStats::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fmarketingmessages_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fmarketingmessages_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fmarketingmessages_2esteamclient_2eproto[23]);
}

// ===================================================================

class CMarketingMessages_GetMarketingMessageViewerStats_Response::_Internal {
 public:
};

CMarketingMessages_GetMarketingMessageViewerStats_Response::CMarketingMessages_GetMarketingMessageViewerStats_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  stats_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMarketingMessages_GetMarketingMessageViewerStats_Response)
}
CMarketingMessages_GetMarketingMessageViewerStats_Response::CMarketingMessages_GetMarketingMessageViewerStats_Response(const CMarketingMessages_GetMarketingMessageViewerStats_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      stats_(from.stats_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMarketingMessages_GetMarketingMessageViewerStats_Response)
}

inline void CMarketingMessages_GetMarketingMessageViewerStats_Response::SharedCtor() {
}

CMarketingMessages_GetMarketingMessageViewerStats_Response::~CMarketingMessages_GetMarketingMessageViewerStats_Response() {
  // @@protoc_insertion_point(destructor:CMarketingMessages_GetMarketingMessageViewerStats_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMarketingMessages_GetMarketingMessageViewerStats_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMarketingMessages_GetMarketingMessageViewerStats_Response::ArenaDtor(void* object) {
  CMarketingMessages_GetMarketingMessageViewerStats_Response* _this = reinterpret_cast< CMarketingMessages_GetMarketingMessageViewerStats_Response* >(object);
  (void)_this;
}
void CMarketingMessages_GetMarketingMessageViewerStats_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMarketingMessages_GetMarketingMessageViewerStats_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMarketingMessages_GetMarketingMessageViewerStats_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CMarketingMessages_GetMarketingMessageViewerStats_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stats_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMarketingMessages_GetMarketingMessageViewerStats_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMarketingMessageHourlyStats stats = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMarketingMessages_GetMarketingMessageViewerStats_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMarketingMessages_GetMarketingMessageViewerStats_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMarketingMessageHourlyStats stats = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stats_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_stats(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMarketingMessages_GetMarketingMessageViewerStats_Response)
  return target;
}

size_t CMarketingMessages_GetMarketingMessageViewerStats_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMarketingMessages_GetMarketingMessageViewerStats_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMarketingMessageHourlyStats stats = 1;
  total_size += 1UL * this->_internal_stats_size();
  for (const auto& msg : this->stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMarketingMessages_GetMarketingMessageViewerStats_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMarketingMessages_GetMarketingMessageViewerStats_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMarketingMessages_GetMarketingMessageViewerStats_Response::GetClassData() const { return &_class_data_; }

void CMarketingMessages_GetMarketingMessageViewerStats_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMarketingMessages_GetMarketingMessageViewerStats_Response *>(to)->MergeFrom(
      static_cast<const CMarketingMessages_GetMarketingMessageViewerStats_Response &>(from));
}


void CMarketingMessages_GetMarketingMessageViewerStats_Response::MergeFrom(const CMarketingMessages_GetMarketingMessageViewerStats_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMarketingMessages_GetMarketingMessageViewerStats_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  stats_.MergeFrom(from.stats_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMarketingMessages_GetMarketingMessageViewerStats_Response::CopyFrom(const CMarketingMessages_GetMarketingMessageViewerStats_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMarketingMessages_GetMarketingMessageViewerStats_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMarketingMessages_GetMarketingMessageViewerStats_Response::IsInitialized() const {
  return true;
}

void CMarketingMessages_GetMarketingMessageViewerStats_Response::InternalSwap(CMarketingMessages_GetMarketingMessageViewerStats_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  stats_.InternalSwap(&other->stats_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMarketingMessages_GetMarketingMessageViewerStats_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fmarketingmessages_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fmarketingmessages_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fmarketingmessages_2esteamclient_2eproto[24]);
}

// ===================================================================

class CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request>()._has_bits_);
  static void set_has_rt_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rt_end_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request::CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request)
}
CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request::CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request(const CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&rt_start_time_, &from.rt_start_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&rt_end_time_) -
    reinterpret_cast<char*>(&rt_start_time_)) + sizeof(rt_end_time_));
  // @@protoc_insertion_point(copy_constructor:CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request)
}

inline void CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&rt_start_time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rt_end_time_) -
    reinterpret_cast<char*>(&rt_start_time_)) + sizeof(rt_end_time_));
}

CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request::~CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request() {
  // @@protoc_insertion_point(destructor:CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request::ArenaDtor(void* object) {
  CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request* _this = reinterpret_cast< CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request* >(object);
  (void)_this;
}
void CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&rt_start_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rt_end_time_) -
        reinterpret_cast<char*>(&rt_start_time_)) + sizeof(rt_end_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 rt_start_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_rt_start_time(&has_bits);
          rt_start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rt_end_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_rt_end_time(&has_bits);
          rt_end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 rt_start_time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_rt_start_time(), target);
  }

  // optional uint32 rt_end_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_rt_end_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request)
  return target;
}

size_t CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 rt_start_time = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_rt_start_time());
    }

    // optional uint32 rt_end_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_rt_end_time());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request::GetClassData() const { return &_class_data_; }

void CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request *>(to)->MergeFrom(
      static_cast<const CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request &>(from));
}


void CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request::MergeFrom(const CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      rt_start_time_ = from.rt_start_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      rt_end_time_ = from.rt_end_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request::CopyFrom(const CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request::IsInitialized() const {
  return true;
}

void CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request::InternalSwap(CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request, rt_end_time_)
      + sizeof(CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request::rt_end_time_)
      - PROTOBUF_FIELD_OFFSET(CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request, rt_start_time_)>(
          reinterpret_cast<char*>(&rt_start_time_),
          reinterpret_cast<char*>(&other->rt_start_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fmarketingmessages_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fmarketingmessages_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fmarketingmessages_2esteamclient_2eproto[25]);
}

// ===================================================================

class CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response::_Internal {
 public:
};

CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response::CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  stats_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response)
}
CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response::CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response(const CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      stats_(from.stats_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response)
}

inline void CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response::SharedCtor() {
}

CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response::~CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response() {
  // @@protoc_insertion_point(destructor:CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response::ArenaDtor(void* object) {
  CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response* _this = reinterpret_cast< CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response* >(object);
  (void)_this;
}
void CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stats_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMarketingMessageHourlyStats stats = 1 [(.description) = "Flatterns results for the range of time"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMarketingMessageHourlyStats stats = 1 [(.description) = "Flatterns results for the range of time"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stats_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_stats(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response)
  return target;
}

size_t CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMarketingMessageHourlyStats stats = 1 [(.description) = "Flatterns results for the range of time"];
  total_size += 1UL * this->_internal_stats_size();
  for (const auto& msg : this->stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response::GetClassData() const { return &_class_data_; }

void CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response *>(to)->MergeFrom(
      static_cast<const CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response &>(from));
}


void CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response::MergeFrom(const CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  stats_.MergeFrom(from.stats_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response::CopyFrom(const CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response::IsInitialized() const {
  return true;
}

void CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response::InternalSwap(CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  stats_.InternalSwap(&other->stats_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fmarketingmessages_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fmarketingmessages_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fmarketingmessages_2esteamclient_2eproto[26]);
}

// ===================================================================

MarketingMessages::~MarketingMessages() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* MarketingMessages::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fmarketingmessages_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5fmarketingmessages_2esteamclient_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* MarketingMessages::GetDescriptor() {
  return descriptor();
}

void MarketingMessages::GetActiveMarketingMessages(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CMarketingMessages_GetActiveMarketingMessages_Request*,
                         ::CMarketingMessages_GetActiveMarketingMessages_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetActiveMarketingMessages() not implemented.");
  done->Run();
}

void MarketingMessages::GetMarketingMessagesForUser(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CMarketingMessages_GetMarketingMessagesForUser_Request*,
                         ::CMarketingMessages_GetMarketingMessagesForUser_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetMarketingMessagesForUser() not implemented.");
  done->Run();
}

void MarketingMessages::DoesUserHavePendingMarketingMessages(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CMarketingMessages_DoesUserHavePendingMarketingMessages_Request*,
                         ::CMarketingMessages_DoesUserHavePendingMarketingMessages_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method DoesUserHavePendingMarketingMessages() not implemented.");
  done->Run();
}

void MarketingMessages::GetDisplayMarketingMessage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CMarketingMessages_GetDisplayMarketingMessage_Request*,
                         ::CMarketingMessages_GetDisplayMarketingMessage_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetDisplayMarketingMessage() not implemented.");
  done->Run();
}

void MarketingMessages::GetDisplayMarketingMessageAdmin(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CMarketingMessages_GetDisplayMarketingMessage_Request*,
                         ::CMarketingMessages_GetDisplayMarketingMessage_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetDisplayMarketingMessageAdmin() not implemented.");
  done->Run();
}

void MarketingMessages::MarkMessageSeen(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CMarketingMessages_MarkMessageSeen_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method MarkMessageSeen() not implemented.");
  done->Run();
}

void MarketingMessages::GetMarketingMessage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CMarketingMessages_GetMarketingMessage_Request*,
                         ::CMarketingMessages_GetMarketingMessage_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetMarketingMessage() not implemented.");
  done->Run();
}

void MarketingMessages::CreateMarketingMessage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CMarketingMessages_CreateMarketingMessage_Request*,
                         ::CMarketingMessages_CreateMarketingMessage_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CreateMarketingMessage() not implemented.");
  done->Run();
}

void MarketingMessages::UpdateMarketingMessage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CMarketingMessages_UpdateMarketingMessage_Request*,
                         ::CMarketingMessages_UpdateMarketingMessage_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method UpdateMarketingMessage() not implemented.");
  done->Run();
}

void MarketingMessages::DeleteMarketingMessage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CMarketingMessages_DeleteMarketingMessage_Request*,
                         ::CMarketingMessages_DeleteMarketingMessage_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method DeleteMarketingMessage() not implemented.");
  done->Run();
}

void MarketingMessages::FindMarketingMessages(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CMarketingMessages_FindMarketingMessages_Request*,
                         ::CMarketingMessages_FindMarketingMessages_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method FindMarketingMessages() not implemented.");
  done->Run();
}

void MarketingMessages::GetMarketingMessageViewerStats(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CMarketingMessages_GetMarketingMessageViewerStats_Request*,
                         ::CMarketingMessages_GetMarketingMessageViewerStats_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetMarketingMessageViewerStats() not implemented.");
  done->Run();
}

void MarketingMessages::GetMarketingMessagesViewerRangeStats(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request*,
                         ::CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetMarketingMessagesViewerRangeStats() not implemented.");
  done->Run();
}

void MarketingMessages::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5fmarketingmessages_2esteamclient_2eproto[0]);
  switch(method->index()) {
    case 0:
      GetActiveMarketingMessages(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CMarketingMessages_GetActiveMarketingMessages_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CMarketingMessages_GetActiveMarketingMessages_Response*>(
                 response),
             done);
      break;
    case 1:
      GetMarketingMessagesForUser(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CMarketingMessages_GetMarketingMessagesForUser_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CMarketingMessages_GetMarketingMessagesForUser_Response*>(
                 response),
             done);
      break;
    case 2:
      DoesUserHavePendingMarketingMessages(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CMarketingMessages_DoesUserHavePendingMarketingMessages_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CMarketingMessages_DoesUserHavePendingMarketingMessages_Response*>(
                 response),
             done);
      break;
    case 3:
      GetDisplayMarketingMessage(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CMarketingMessages_GetDisplayMarketingMessage_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CMarketingMessages_GetDisplayMarketingMessage_Response*>(
                 response),
             done);
      break;
    case 4:
      GetDisplayMarketingMessageAdmin(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CMarketingMessages_GetDisplayMarketingMessage_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CMarketingMessages_GetDisplayMarketingMessage_Response*>(
                 response),
             done);
      break;
    case 5:
      MarkMessageSeen(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CMarketingMessages_MarkMessageSeen_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    case 6:
      GetMarketingMessage(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CMarketingMessages_GetMarketingMessage_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CMarketingMessages_GetMarketingMessage_Response*>(
                 response),
             done);
      break;
    case 7:
      CreateMarketingMessage(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CMarketingMessages_CreateMarketingMessage_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CMarketingMessages_CreateMarketingMessage_Response*>(
                 response),
             done);
      break;
    case 8:
      UpdateMarketingMessage(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CMarketingMessages_UpdateMarketingMessage_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CMarketingMessages_UpdateMarketingMessage_Response*>(
                 response),
             done);
      break;
    case 9:
      DeleteMarketingMessage(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CMarketingMessages_DeleteMarketingMessage_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CMarketingMessages_DeleteMarketingMessage_Response*>(
                 response),
             done);
      break;
    case 10:
      FindMarketingMessages(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CMarketingMessages_FindMarketingMessages_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CMarketingMessages_FindMarketingMessages_Response*>(
                 response),
             done);
      break;
    case 11:
      GetMarketingMessageViewerStats(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CMarketingMessages_GetMarketingMessageViewerStats_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CMarketingMessages_GetMarketingMessageViewerStats_Response*>(
                 response),
             done);
      break;
    case 12:
      GetMarketingMessagesViewerRangeStats(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& MarketingMessages::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CMarketingMessages_GetActiveMarketingMessages_Request::default_instance();
    case 1:
      return ::CMarketingMessages_GetMarketingMessagesForUser_Request::default_instance();
    case 2:
      return ::CMarketingMessages_DoesUserHavePendingMarketingMessages_Request::default_instance();
    case 3:
      return ::CMarketingMessages_GetDisplayMarketingMessage_Request::default_instance();
    case 4:
      return ::CMarketingMessages_GetDisplayMarketingMessage_Request::default_instance();
    case 5:
      return ::CMarketingMessages_MarkMessageSeen_Notification::default_instance();
    case 6:
      return ::CMarketingMessages_GetMarketingMessage_Request::default_instance();
    case 7:
      return ::CMarketingMessages_CreateMarketingMessage_Request::default_instance();
    case 8:
      return ::CMarketingMessages_UpdateMarketingMessage_Request::default_instance();
    case 9:
      return ::CMarketingMessages_DeleteMarketingMessage_Request::default_instance();
    case 10:
      return ::CMarketingMessages_FindMarketingMessages_Request::default_instance();
    case 11:
      return ::CMarketingMessages_GetMarketingMessageViewerStats_Request::default_instance();
    case 12:
      return ::CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& MarketingMessages::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CMarketingMessages_GetActiveMarketingMessages_Response::default_instance();
    case 1:
      return ::CMarketingMessages_GetMarketingMessagesForUser_Response::default_instance();
    case 2:
      return ::CMarketingMessages_DoesUserHavePendingMarketingMessages_Response::default_instance();
    case 3:
      return ::CMarketingMessages_GetDisplayMarketingMessage_Response::default_instance();
    case 4:
      return ::CMarketingMessages_GetDisplayMarketingMessage_Response::default_instance();
    case 5:
      return ::NoResponse::default_instance();
    case 6:
      return ::CMarketingMessages_GetMarketingMessage_Response::default_instance();
    case 7:
      return ::CMarketingMessages_CreateMarketingMessage_Response::default_instance();
    case 8:
      return ::CMarketingMessages_UpdateMarketingMessage_Response::default_instance();
    case 9:
      return ::CMarketingMessages_DeleteMarketingMessage_Response::default_instance();
    case 10:
      return ::CMarketingMessages_FindMarketingMessages_Response::default_instance();
    case 11:
      return ::CMarketingMessages_GetMarketingMessageViewerStats_Response::default_instance();
    case 12:
      return ::CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

MarketingMessages_Stub::MarketingMessages_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
MarketingMessages_Stub::MarketingMessages_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
MarketingMessages_Stub::~MarketingMessages_Stub() {
  if (owns_channel_) delete channel_;
}

void MarketingMessages_Stub::GetActiveMarketingMessages(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CMarketingMessages_GetActiveMarketingMessages_Request* request,
                              ::CMarketingMessages_GetActiveMarketingMessages_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void MarketingMessages_Stub::GetMarketingMessagesForUser(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CMarketingMessages_GetMarketingMessagesForUser_Request* request,
                              ::CMarketingMessages_GetMarketingMessagesForUser_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void MarketingMessages_Stub::DoesUserHavePendingMarketingMessages(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CMarketingMessages_DoesUserHavePendingMarketingMessages_Request* request,
                              ::CMarketingMessages_DoesUserHavePendingMarketingMessages_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void MarketingMessages_Stub::GetDisplayMarketingMessage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CMarketingMessages_GetDisplayMarketingMessage_Request* request,
                              ::CMarketingMessages_GetDisplayMarketingMessage_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void MarketingMessages_Stub::GetDisplayMarketingMessageAdmin(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CMarketingMessages_GetDisplayMarketingMessage_Request* request,
                              ::CMarketingMessages_GetDisplayMarketingMessage_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void MarketingMessages_Stub::MarkMessageSeen(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CMarketingMessages_MarkMessageSeen_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void MarketingMessages_Stub::GetMarketingMessage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CMarketingMessages_GetMarketingMessage_Request* request,
                              ::CMarketingMessages_GetMarketingMessage_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void MarketingMessages_Stub::CreateMarketingMessage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CMarketingMessages_CreateMarketingMessage_Request* request,
                              ::CMarketingMessages_CreateMarketingMessage_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}
void MarketingMessages_Stub::UpdateMarketingMessage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CMarketingMessages_UpdateMarketingMessage_Request* request,
                              ::CMarketingMessages_UpdateMarketingMessage_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(8),
                       controller, request, response, done);
}
void MarketingMessages_Stub::DeleteMarketingMessage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CMarketingMessages_DeleteMarketingMessage_Request* request,
                              ::CMarketingMessages_DeleteMarketingMessage_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(9),
                       controller, request, response, done);
}
void MarketingMessages_Stub::FindMarketingMessages(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CMarketingMessages_FindMarketingMessages_Request* request,
                              ::CMarketingMessages_FindMarketingMessages_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(10),
                       controller, request, response, done);
}
void MarketingMessages_Stub::GetMarketingMessageViewerStats(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CMarketingMessages_GetMarketingMessageViewerStats_Request* request,
                              ::CMarketingMessages_GetMarketingMessageViewerStats_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(11),
                       controller, request, response, done);
}
void MarketingMessages_Stub::GetMarketingMessagesViewerRangeStats(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request* request,
                              ::CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(12),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMarketingMessages_GetActiveMarketingMessages_Request* Arena::CreateMaybeMessage< ::CMarketingMessages_GetActiveMarketingMessages_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMarketingMessages_GetActiveMarketingMessages_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CMarketingMessageProto* Arena::CreateMaybeMessage< ::CMarketingMessageProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMarketingMessageProto >(arena);
}
template<> PROTOBUF_NOINLINE ::CMarketingMessages_GetActiveMarketingMessages_Response* Arena::CreateMaybeMessage< ::CMarketingMessages_GetActiveMarketingMessages_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMarketingMessages_GetActiveMarketingMessages_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CMarketingMessages_GetMarketingMessagesForUser_Request* Arena::CreateMaybeMessage< ::CMarketingMessages_GetMarketingMessagesForUser_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMarketingMessages_GetMarketingMessagesForUser_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CDisplayMarketingMessage* Arena::CreateMaybeMessage< ::CDisplayMarketingMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDisplayMarketingMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser* Arena::CreateMaybeMessage< ::CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser >(arena);
}
template<> PROTOBUF_NOINLINE ::CMarketingMessages_GetMarketingMessagesForUser_Response* Arena::CreateMaybeMessage< ::CMarketingMessages_GetMarketingMessagesForUser_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMarketingMessages_GetMarketingMessagesForUser_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CMarketingMessages_DoesUserHavePendingMarketingMessages_Request* Arena::CreateMaybeMessage< ::CMarketingMessages_DoesUserHavePendingMarketingMessages_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMarketingMessages_DoesUserHavePendingMarketingMessages_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CMarketingMessages_DoesUserHavePendingMarketingMessages_Response* Arena::CreateMaybeMessage< ::CMarketingMessages_DoesUserHavePendingMarketingMessages_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMarketingMessages_DoesUserHavePendingMarketingMessages_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CMarketingMessages_GetDisplayMarketingMessage_Request* Arena::CreateMaybeMessage< ::CMarketingMessages_GetDisplayMarketingMessage_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMarketingMessages_GetDisplayMarketingMessage_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CMarketingMessages_GetDisplayMarketingMessage_Response* Arena::CreateMaybeMessage< ::CMarketingMessages_GetDisplayMarketingMessage_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMarketingMessages_GetDisplayMarketingMessage_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CMarketingMessages_MarkMessageSeen_Notification* Arena::CreateMaybeMessage< ::CMarketingMessages_MarkMessageSeen_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMarketingMessages_MarkMessageSeen_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CMarketingMessages_GetMarketingMessage_Request* Arena::CreateMaybeMessage< ::CMarketingMessages_GetMarketingMessage_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMarketingMessages_GetMarketingMessage_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CMarketingMessages_GetMarketingMessage_Response* Arena::CreateMaybeMessage< ::CMarketingMessages_GetMarketingMessage_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMarketingMessages_GetMarketingMessage_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CMarketingMessages_CreateMarketingMessage_Request* Arena::CreateMaybeMessage< ::CMarketingMessages_CreateMarketingMessage_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMarketingMessages_CreateMarketingMessage_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CMarketingMessages_CreateMarketingMessage_Response* Arena::CreateMaybeMessage< ::CMarketingMessages_CreateMarketingMessage_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMarketingMessages_CreateMarketingMessage_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CMarketingMessages_UpdateMarketingMessage_Request* Arena::CreateMaybeMessage< ::CMarketingMessages_UpdateMarketingMessage_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMarketingMessages_UpdateMarketingMessage_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CMarketingMessages_UpdateMarketingMessage_Response* Arena::CreateMaybeMessage< ::CMarketingMessages_UpdateMarketingMessage_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMarketingMessages_UpdateMarketingMessage_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CMarketingMessages_DeleteMarketingMessage_Request* Arena::CreateMaybeMessage< ::CMarketingMessages_DeleteMarketingMessage_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMarketingMessages_DeleteMarketingMessage_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CMarketingMessages_DeleteMarketingMessage_Response* Arena::CreateMaybeMessage< ::CMarketingMessages_DeleteMarketingMessage_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMarketingMessages_DeleteMarketingMessage_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CMarketingMessages_FindMarketingMessages_Request* Arena::CreateMaybeMessage< ::CMarketingMessages_FindMarketingMessages_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMarketingMessages_FindMarketingMessages_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CMarketingMessages_FindMarketingMessages_Response* Arena::CreateMaybeMessage< ::CMarketingMessages_FindMarketingMessages_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMarketingMessages_FindMarketingMessages_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CMarketingMessages_GetMarketingMessageViewerStats_Request* Arena::CreateMaybeMessage< ::CMarketingMessages_GetMarketingMessageViewerStats_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMarketingMessages_GetMarketingMessageViewerStats_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CMarketingMessageHourlyStats* Arena::CreateMaybeMessage< ::CMarketingMessageHourlyStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMarketingMessageHourlyStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMarketingMessages_GetMarketingMessageViewerStats_Response* Arena::CreateMaybeMessage< ::CMarketingMessages_GetMarketingMessageViewerStats_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMarketingMessages_GetMarketingMessageViewerStats_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request* Arena::CreateMaybeMessage< ::CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response* Arena::CreateMaybeMessage< ::CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
