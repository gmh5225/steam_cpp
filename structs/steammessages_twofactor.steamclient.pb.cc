// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_twofactor.steamclient.proto

#include "steammessages_twofactor.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CTwoFactor_Time_Request::CTwoFactor_Time_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sender_time_(uint64_t{0u}){}
struct CTwoFactor_Time_RequestDefaultTypeInternal {
  constexpr CTwoFactor_Time_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CTwoFactor_Time_RequestDefaultTypeInternal() {}
  union {
    CTwoFactor_Time_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CTwoFactor_Time_RequestDefaultTypeInternal _CTwoFactor_Time_Request_default_instance_;
constexpr CTwoFactor_Time_Response::CTwoFactor_Time_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : server_time_(uint64_t{0u})
  , skew_tolerance_seconds_(uint64_t{0u})
  , large_time_jink_(uint64_t{0u})
  , probe_frequency_seconds_(0u)
  , adjusted_time_probe_frequency_seconds_(0u)
  , hint_probe_frequency_seconds_(0u)
  , sync_timeout_(0u)
  , try_again_seconds_(0u)
  , max_attempts_(0u){}
struct CTwoFactor_Time_ResponseDefaultTypeInternal {
  constexpr CTwoFactor_Time_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CTwoFactor_Time_ResponseDefaultTypeInternal() {}
  union {
    CTwoFactor_Time_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CTwoFactor_Time_ResponseDefaultTypeInternal _CTwoFactor_Time_Response_default_instance_;
constexpr CTwoFactor_Status_Request::CTwoFactor_Status_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(uint64_t{0u}){}
struct CTwoFactor_Status_RequestDefaultTypeInternal {
  constexpr CTwoFactor_Status_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CTwoFactor_Status_RequestDefaultTypeInternal() {}
  union {
    CTwoFactor_Status_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CTwoFactor_Status_RequestDefaultTypeInternal _CTwoFactor_Status_Request_default_instance_;
constexpr CTwoFactor_Status_Response::CTwoFactor_Status_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : token_gid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , device_identifier_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , classified_agent_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , state_(0u)
  , inactivation_reason_(0u)
  , authenticator_type_(0u)
  , steamguard_scheme_(0u)
  , authenticator_allowed_(false)
  , email_validated_(false)
  , allow_external_authenticator_(false)
  , time_created_(0u)
  , revocation_attempts_remaining_(0u)
  , time_transferred_(0u)
  , version_(0u){}
struct CTwoFactor_Status_ResponseDefaultTypeInternal {
  constexpr CTwoFactor_Status_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CTwoFactor_Status_ResponseDefaultTypeInternal() {}
  union {
    CTwoFactor_Status_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CTwoFactor_Status_ResponseDefaultTypeInternal _CTwoFactor_Status_Response_default_instance_;
constexpr CTwoFactor_AddAuthenticator_Request::CTwoFactor_AddAuthenticator_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : http_headers_()
  , device_identifier_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sms_phone_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steamid_(uint64_t{0u})
  , authenticator_time_(uint64_t{0u})
  , serial_number_(uint64_t{0u})
  , authenticator_type_(0u)
  , version_(1u){}
struct CTwoFactor_AddAuthenticator_RequestDefaultTypeInternal {
  constexpr CTwoFactor_AddAuthenticator_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CTwoFactor_AddAuthenticator_RequestDefaultTypeInternal() {}
  union {
    CTwoFactor_AddAuthenticator_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CTwoFactor_AddAuthenticator_RequestDefaultTypeInternal _CTwoFactor_AddAuthenticator_Request_default_instance_;
constexpr CTwoFactor_AddAuthenticator_Response::CTwoFactor_AddAuthenticator_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : shared_secret_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , revocation_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , uri_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , account_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , token_gid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , identity_secret_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , secret_1_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , phone_number_hint_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , serial_number_(uint64_t{0u})
  , server_time_(uint64_t{0u})
  , status_(0){}
struct CTwoFactor_AddAuthenticator_ResponseDefaultTypeInternal {
  constexpr CTwoFactor_AddAuthenticator_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CTwoFactor_AddAuthenticator_ResponseDefaultTypeInternal() {}
  union {
    CTwoFactor_AddAuthenticator_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CTwoFactor_AddAuthenticator_ResponseDefaultTypeInternal _CTwoFactor_AddAuthenticator_Response_default_instance_;
constexpr CTwoFactor_SendEmail_Request::CTwoFactor_SendEmail_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(uint64_t{0u})
  , email_type_(0u)
  , include_activation_code_(false){}
struct CTwoFactor_SendEmail_RequestDefaultTypeInternal {
  constexpr CTwoFactor_SendEmail_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CTwoFactor_SendEmail_RequestDefaultTypeInternal() {}
  union {
    CTwoFactor_SendEmail_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CTwoFactor_SendEmail_RequestDefaultTypeInternal _CTwoFactor_SendEmail_Request_default_instance_;
constexpr CTwoFactor_SendEmail_Response::CTwoFactor_SendEmail_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CTwoFactor_SendEmail_ResponseDefaultTypeInternal {
  constexpr CTwoFactor_SendEmail_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CTwoFactor_SendEmail_ResponseDefaultTypeInternal() {}
  union {
    CTwoFactor_SendEmail_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CTwoFactor_SendEmail_ResponseDefaultTypeInternal _CTwoFactor_SendEmail_Response_default_instance_;
constexpr CTwoFactor_FinalizeAddAuthenticator_Request::CTwoFactor_FinalizeAddAuthenticator_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : http_headers_()
  , authenticator_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , activation_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steamid_(uint64_t{0u})
  , authenticator_time_(uint64_t{0u})
  , validate_sms_code_(false){}
struct CTwoFactor_FinalizeAddAuthenticator_RequestDefaultTypeInternal {
  constexpr CTwoFactor_FinalizeAddAuthenticator_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CTwoFactor_FinalizeAddAuthenticator_RequestDefaultTypeInternal() {}
  union {
    CTwoFactor_FinalizeAddAuthenticator_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CTwoFactor_FinalizeAddAuthenticator_RequestDefaultTypeInternal _CTwoFactor_FinalizeAddAuthenticator_Request_default_instance_;
constexpr CTwoFactor_FinalizeAddAuthenticator_Response::CTwoFactor_FinalizeAddAuthenticator_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : success_(false)
  , want_more_(false)
  , status_(0)
  , server_time_(uint64_t{0u}){}
struct CTwoFactor_FinalizeAddAuthenticator_ResponseDefaultTypeInternal {
  constexpr CTwoFactor_FinalizeAddAuthenticator_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CTwoFactor_FinalizeAddAuthenticator_ResponseDefaultTypeInternal() {}
  union {
    CTwoFactor_FinalizeAddAuthenticator_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CTwoFactor_FinalizeAddAuthenticator_ResponseDefaultTypeInternal _CTwoFactor_FinalizeAddAuthenticator_Response_default_instance_;
constexpr CTwoFactor_UpdateTokenVersion_Request::CTwoFactor_UpdateTokenVersion_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : signature_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steamid_(uint64_t{0u})
  , version_(0u){}
struct CTwoFactor_UpdateTokenVersion_RequestDefaultTypeInternal {
  constexpr CTwoFactor_UpdateTokenVersion_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CTwoFactor_UpdateTokenVersion_RequestDefaultTypeInternal() {}
  union {
    CTwoFactor_UpdateTokenVersion_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CTwoFactor_UpdateTokenVersion_RequestDefaultTypeInternal _CTwoFactor_UpdateTokenVersion_Request_default_instance_;
constexpr CTwoFactor_UpdateTokenVersion_Response::CTwoFactor_UpdateTokenVersion_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CTwoFactor_UpdateTokenVersion_ResponseDefaultTypeInternal {
  constexpr CTwoFactor_UpdateTokenVersion_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CTwoFactor_UpdateTokenVersion_ResponseDefaultTypeInternal() {}
  union {
    CTwoFactor_UpdateTokenVersion_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CTwoFactor_UpdateTokenVersion_ResponseDefaultTypeInternal _CTwoFactor_UpdateTokenVersion_Response_default_instance_;
constexpr CTwoFactor_RemoveAuthenticator_Request::CTwoFactor_RemoveAuthenticator_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : revocation_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , remove_all_steamguard_cookies_(false)
  , revocation_reason_(0u)
  , steamguard_scheme_(0u){}
struct CTwoFactor_RemoveAuthenticator_RequestDefaultTypeInternal {
  constexpr CTwoFactor_RemoveAuthenticator_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CTwoFactor_RemoveAuthenticator_RequestDefaultTypeInternal() {}
  union {
    CTwoFactor_RemoveAuthenticator_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CTwoFactor_RemoveAuthenticator_RequestDefaultTypeInternal _CTwoFactor_RemoveAuthenticator_Request_default_instance_;
constexpr CTwoFactor_RemoveAuthenticator_Response::CTwoFactor_RemoveAuthenticator_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : server_time_(uint64_t{0u})
  , success_(false)
  , revocation_attempts_remaining_(0u){}
struct CTwoFactor_RemoveAuthenticator_ResponseDefaultTypeInternal {
  constexpr CTwoFactor_RemoveAuthenticator_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CTwoFactor_RemoveAuthenticator_ResponseDefaultTypeInternal() {}
  union {
    CTwoFactor_RemoveAuthenticator_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CTwoFactor_RemoveAuthenticator_ResponseDefaultTypeInternal _CTwoFactor_RemoveAuthenticator_Response_default_instance_;
constexpr CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request::CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CTwoFactor_RemoveAuthenticatorViaChallengeStart_RequestDefaultTypeInternal {
  constexpr CTwoFactor_RemoveAuthenticatorViaChallengeStart_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CTwoFactor_RemoveAuthenticatorViaChallengeStart_RequestDefaultTypeInternal() {}
  union {
    CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CTwoFactor_RemoveAuthenticatorViaChallengeStart_RequestDefaultTypeInternal _CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request_default_instance_;
constexpr CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response::CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : success_(false){}
struct CTwoFactor_RemoveAuthenticatorViaChallengeStart_ResponseDefaultTypeInternal {
  constexpr CTwoFactor_RemoveAuthenticatorViaChallengeStart_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CTwoFactor_RemoveAuthenticatorViaChallengeStart_ResponseDefaultTypeInternal() {}
  union {
    CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CTwoFactor_RemoveAuthenticatorViaChallengeStart_ResponseDefaultTypeInternal _CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response_default_instance_;
constexpr CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request::CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sms_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , generate_new_token_(false)
  , version_(1u){}
struct CTwoFactor_RemoveAuthenticatorViaChallengeContinue_RequestDefaultTypeInternal {
  constexpr CTwoFactor_RemoveAuthenticatorViaChallengeContinue_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CTwoFactor_RemoveAuthenticatorViaChallengeContinue_RequestDefaultTypeInternal() {}
  union {
    CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CTwoFactor_RemoveAuthenticatorViaChallengeContinue_RequestDefaultTypeInternal _CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request_default_instance_;
constexpr CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::CRemoveAuthenticatorViaChallengeContinue_Replacement_Token(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : shared_secret_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , revocation_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , uri_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , account_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , token_gid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , identity_secret_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , secret_1_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , serial_number_(uint64_t{0u})
  , server_time_(uint64_t{0u})
  , status_(0)
  , steamguard_scheme_(0u)
  , steamid_(uint64_t{0u}){}
struct CRemoveAuthenticatorViaChallengeContinue_Replacement_TokenDefaultTypeInternal {
  constexpr CRemoveAuthenticatorViaChallengeContinue_Replacement_TokenDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemoveAuthenticatorViaChallengeContinue_Replacement_TokenDefaultTypeInternal() {}
  union {
    CRemoveAuthenticatorViaChallengeContinue_Replacement_Token _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemoveAuthenticatorViaChallengeContinue_Replacement_TokenDefaultTypeInternal _CRemoveAuthenticatorViaChallengeContinue_Replacement_Token_default_instance_;
constexpr CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response::CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : replacement_token_(nullptr)
  , success_(false){}
struct CTwoFactor_RemoveAuthenticatorViaChallengeContinue_ResponseDefaultTypeInternal {
  constexpr CTwoFactor_RemoveAuthenticatorViaChallengeContinue_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CTwoFactor_RemoveAuthenticatorViaChallengeContinue_ResponseDefaultTypeInternal() {}
  union {
    CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CTwoFactor_RemoveAuthenticatorViaChallengeContinue_ResponseDefaultTypeInternal _CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steammessages_5ftwofactor_2esteamclient_2eproto[19];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_steammessages_5ftwofactor_2esteamclient_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_steammessages_5ftwofactor_2esteamclient_2eproto[1];

const uint32_t TableStruct_steammessages_5ftwofactor_2esteamclient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_Time_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_Time_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_Time_Request, sender_time_),
  0,
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_Time_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_Time_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_Time_Response, server_time_),
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_Time_Response, skew_tolerance_seconds_),
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_Time_Response, large_time_jink_),
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_Time_Response, probe_frequency_seconds_),
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_Time_Response, adjusted_time_probe_frequency_seconds_),
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_Time_Response, hint_probe_frequency_seconds_),
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_Time_Response, sync_timeout_),
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_Time_Response, try_again_seconds_),
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_Time_Response, max_attempts_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_Status_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_Status_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_Status_Request, steamid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_Status_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_Status_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_Status_Response, state_),
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_Status_Response, inactivation_reason_),
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_Status_Response, authenticator_type_),
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_Status_Response, authenticator_allowed_),
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_Status_Response, steamguard_scheme_),
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_Status_Response, token_gid_),
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_Status_Response, email_validated_),
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_Status_Response, device_identifier_),
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_Status_Response, time_created_),
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_Status_Response, revocation_attempts_remaining_),
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_Status_Response, classified_agent_),
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_Status_Response, allow_external_authenticator_),
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_Status_Response, time_transferred_),
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_Status_Response, version_),
  3,
  4,
  5,
  7,
  6,
  0,
  8,
  1,
  10,
  11,
  2,
  9,
  12,
  13,
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_AddAuthenticator_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_AddAuthenticator_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_AddAuthenticator_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_AddAuthenticator_Request, authenticator_time_),
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_AddAuthenticator_Request, serial_number_),
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_AddAuthenticator_Request, authenticator_type_),
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_AddAuthenticator_Request, device_identifier_),
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_AddAuthenticator_Request, sms_phone_id_),
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_AddAuthenticator_Request, http_headers_),
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_AddAuthenticator_Request, version_),
  2,
  3,
  4,
  5,
  0,
  1,
  ~0u,
  6,
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_AddAuthenticator_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_AddAuthenticator_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_AddAuthenticator_Response, shared_secret_),
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_AddAuthenticator_Response, serial_number_),
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_AddAuthenticator_Response, revocation_code_),
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_AddAuthenticator_Response, uri_),
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_AddAuthenticator_Response, server_time_),
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_AddAuthenticator_Response, account_name_),
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_AddAuthenticator_Response, token_gid_),
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_AddAuthenticator_Response, identity_secret_),
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_AddAuthenticator_Response, secret_1_),
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_AddAuthenticator_Response, status_),
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_AddAuthenticator_Response, phone_number_hint_),
  0,
  8,
  1,
  2,
  9,
  3,
  4,
  5,
  6,
  10,
  7,
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_SendEmail_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_SendEmail_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_SendEmail_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_SendEmail_Request, email_type_),
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_SendEmail_Request, include_activation_code_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_SendEmail_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_FinalizeAddAuthenticator_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_FinalizeAddAuthenticator_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_FinalizeAddAuthenticator_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_FinalizeAddAuthenticator_Request, authenticator_code_),
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_FinalizeAddAuthenticator_Request, authenticator_time_),
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_FinalizeAddAuthenticator_Request, activation_code_),
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_FinalizeAddAuthenticator_Request, http_headers_),
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_FinalizeAddAuthenticator_Request, validate_sms_code_),
  2,
  0,
  3,
  1,
  ~0u,
  4,
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_FinalizeAddAuthenticator_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_FinalizeAddAuthenticator_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_FinalizeAddAuthenticator_Response, success_),
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_FinalizeAddAuthenticator_Response, want_more_),
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_FinalizeAddAuthenticator_Response, server_time_),
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_FinalizeAddAuthenticator_Response, status_),
  0,
  1,
  3,
  2,
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_UpdateTokenVersion_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_UpdateTokenVersion_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_UpdateTokenVersion_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_UpdateTokenVersion_Request, version_),
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_UpdateTokenVersion_Request, signature_),
  1,
  2,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_UpdateTokenVersion_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_RemoveAuthenticator_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_RemoveAuthenticator_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_RemoveAuthenticator_Request, revocation_code_),
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_RemoveAuthenticator_Request, revocation_reason_),
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_RemoveAuthenticator_Request, steamguard_scheme_),
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_RemoveAuthenticator_Request, remove_all_steamguard_cookies_),
  0,
  2,
  3,
  1,
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_RemoveAuthenticator_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_RemoveAuthenticator_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_RemoveAuthenticator_Response, success_),
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_RemoveAuthenticator_Response, server_time_),
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_RemoveAuthenticator_Response, revocation_attempts_remaining_),
  1,
  0,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response, success_),
  0,
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request, sms_code_),
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request, generate_new_token_),
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request, version_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CRemoveAuthenticatorViaChallengeContinue_Replacement_Token, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CRemoveAuthenticatorViaChallengeContinue_Replacement_Token, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CRemoveAuthenticatorViaChallengeContinue_Replacement_Token, shared_secret_),
  PROTOBUF_FIELD_OFFSET(::CRemoveAuthenticatorViaChallengeContinue_Replacement_Token, serial_number_),
  PROTOBUF_FIELD_OFFSET(::CRemoveAuthenticatorViaChallengeContinue_Replacement_Token, revocation_code_),
  PROTOBUF_FIELD_OFFSET(::CRemoveAuthenticatorViaChallengeContinue_Replacement_Token, uri_),
  PROTOBUF_FIELD_OFFSET(::CRemoveAuthenticatorViaChallengeContinue_Replacement_Token, server_time_),
  PROTOBUF_FIELD_OFFSET(::CRemoveAuthenticatorViaChallengeContinue_Replacement_Token, account_name_),
  PROTOBUF_FIELD_OFFSET(::CRemoveAuthenticatorViaChallengeContinue_Replacement_Token, token_gid_),
  PROTOBUF_FIELD_OFFSET(::CRemoveAuthenticatorViaChallengeContinue_Replacement_Token, identity_secret_),
  PROTOBUF_FIELD_OFFSET(::CRemoveAuthenticatorViaChallengeContinue_Replacement_Token, secret_1_),
  PROTOBUF_FIELD_OFFSET(::CRemoveAuthenticatorViaChallengeContinue_Replacement_Token, status_),
  PROTOBUF_FIELD_OFFSET(::CRemoveAuthenticatorViaChallengeContinue_Replacement_Token, steamguard_scheme_),
  PROTOBUF_FIELD_OFFSET(::CRemoveAuthenticatorViaChallengeContinue_Replacement_Token, steamid_),
  0,
  7,
  1,
  2,
  8,
  3,
  4,
  5,
  6,
  9,
  10,
  11,
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response, success_),
  PROTOBUF_FIELD_OFFSET(::CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response, replacement_token_),
  1,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, -1, sizeof(::CTwoFactor_Time_Request)},
  { 8, 23, -1, sizeof(::CTwoFactor_Time_Response)},
  { 32, 39, -1, sizeof(::CTwoFactor_Status_Request)},
  { 40, 60, -1, sizeof(::CTwoFactor_Status_Response)},
  { 74, 88, -1, sizeof(::CTwoFactor_AddAuthenticator_Request)},
  { 96, 113, -1, sizeof(::CTwoFactor_AddAuthenticator_Response)},
  { 124, 133, -1, sizeof(::CTwoFactor_SendEmail_Request)},
  { 136, -1, -1, sizeof(::CTwoFactor_SendEmail_Response)},
  { 142, 154, -1, sizeof(::CTwoFactor_FinalizeAddAuthenticator_Request)},
  { 160, 170, -1, sizeof(::CTwoFactor_FinalizeAddAuthenticator_Response)},
  { 174, 183, -1, sizeof(::CTwoFactor_UpdateTokenVersion_Request)},
  { 186, -1, -1, sizeof(::CTwoFactor_UpdateTokenVersion_Response)},
  { 192, 202, -1, sizeof(::CTwoFactor_RemoveAuthenticator_Request)},
  { 206, 215, -1, sizeof(::CTwoFactor_RemoveAuthenticator_Response)},
  { 218, -1, -1, sizeof(::CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request)},
  { 224, 231, -1, sizeof(::CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response)},
  { 232, 241, -1, sizeof(::CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request)},
  { 244, 262, -1, sizeof(::CRemoveAuthenticatorViaChallengeContinue_Replacement_Token)},
  { 274, 282, -1, sizeof(::CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CTwoFactor_Time_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CTwoFactor_Time_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CTwoFactor_Status_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CTwoFactor_Status_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CTwoFactor_AddAuthenticator_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CTwoFactor_AddAuthenticator_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CTwoFactor_SendEmail_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CTwoFactor_SendEmail_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CTwoFactor_FinalizeAddAuthenticator_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CTwoFactor_FinalizeAddAuthenticator_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CTwoFactor_UpdateTokenVersion_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CTwoFactor_UpdateTokenVersion_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CTwoFactor_RemoveAuthenticator_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CTwoFactor_RemoveAuthenticator_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemoveAuthenticatorViaChallengeContinue_Replacement_Token_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response_default_instance_),
};

const char descriptor_table_protodef_steammessages_5ftwofactor_2esteamclient_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n)steammessages_twofactor.steamclient.pr"
  "oto\032\030steammessages_base.proto\032,steammess"
  "ages_unified_base.steamclient.proto\"l\n\027C"
  "TwoFactor_Time_Request\022Q\n\013sender_time\030\001 "
  "\001(\004B<\202\265\0308Current time on the sender (for"
  " stats, don\'t trust this)\"\351\005\n\030CTwoFactor"
  "_Time_Response\022,\n\013server_time\030\001 \001(\004B\027\202\265\030"
  "\023Current server time\022Z\n\026skew_tolerance_s"
  "econds\030\002 \001(\004B:\202\265\0306Time skew we\'ll tolera"
  "te before applying an adjustment\022G\n\017larg"
  "e_time_jink\030\003 \001(\004B.\202\265\030*Re-sync if local "
  "time jitters by this much\022W\n\027probe_frequ"
  "ency_seconds\030\004 \001(\rB6\202\265\0302Time probe frequ"
  "ency if phone time is synchronized\022i\n%ad"
  "justed_time_probe_frequency_seconds\030\005 \001("
  "\rB:\202\265\0306Time probe frequency if phone tim"
  "e is not synchronized\022R\n\034hint_probe_freq"
  "uency_seconds\030\006 \001(\rB,\202\265\030(Floor of probe "
  "frequency, no matter what\022M\n\014sync_timeou"
  "t\030\007 \001(\rB7\202\265\0303More than this, and we call"
  " the current sync failed\022G\n\021try_again_se"
  "conds\030\010 \001(\rB,\202\265\030(Seconds to try again af"
  "ter a failed sync\022J\n\014max_attempts\030\t \001(\rB"
  "4\202\265\0300# times we\'ll ask for server time b"
  "efore we bail\"@\n\031CTwoFactor_Status_Reque"
  "st\022#\n\007steamid\030\001 \001(\006B\022\202\265\030\016steamid to use\""
  "\362\007\n\032CTwoFactor_Status_Response\022&\n\005state\030"
  "\001 \001(\rB\027\202\265\030\023Authenticator state\022=\n\023inacti"
  "vation_reason\030\002 \001(\rB \202\265\030\034Inactivation re"
  "ason (if any)\0225\n\022authenticator_type\030\003 \001("
  "\rB\031\202\265\030\025Type of authenticator\022L\n\025authenti"
  "cator_allowed\030\004 \001(\010B-\202\265\030)Account allowed"
  " to have an authenticator\?\022;\n\021steamguard"
  "_scheme\030\005 \001(\rB \202\265\030\034Steam Guard scheme in"
  " effect\022A\n\ttoken_gid\030\006 \001(\tB.\202\265\030*String r"
  "ep of token GID assigned by server\022B\n\017em"
  "ail_validated\030\007 \001(\010B)\202\265\030%Account has ver"
  "ified email capability\022\?\n\021device_identif"
  "ier\030\010 \001(\tB$\202\265\030 Authenticator (phone) ide"
  "ntifier\0224\n\014time_created\030\t \001(\rB\036\202\265\030\032When "
  "the token was created\022W\n\035revocation_atte"
  "mpts_remaining\030\n \001(\rB0\202\265\030,Number of revo"
  "cation code attempts remaining\022^\n\020classi"
  "fied_agent\030\013 \001(\tBD\202\265\030@Agent that added t"
  "he authenticator (e.g., ios / android / "
  "other)\022g\n\034allow_external_authenticator\030\014"
  " \001(\010BA\202\265\030=Allow a third-party authentica"
  "tor (in addition to two-factor)\022_\n\020time_"
  "transferred\030\r \001(\rBE\202\265\030AWhen the token wa"
  "s transferred from another device, if ap"
  "plicable\022*\n\007version\030\016 \001(\rB\031\202\265\030\025Current t"
  "oken version\"\363\003\n#CTwoFactor_AddAuthentic"
  "ator_Request\022#\n\007steamid\030\001 \001(\006B\022\202\265\030\016steam"
  "id to use\022:\n\022authenticator_time\030\002 \001(\004B\036\202"
  "\265\030\032Current authenticator time\022\?\n\rserial_"
  "number\030\003 \001(\006B(\202\265\030$locally computed seria"
  "l (deprecated)\0222\n\022authenticator_type\030\004 \001"
  "(\rB\026\202\265\030\022Authenticator type\0227\n\021device_ide"
  "ntifier\030\005 \001(\tB\034\202\265\030\030Authenticator identif"
  "ier\022A\n\014sms_phone_id\030\006 \001(\tB+\202\265\030\'ID of pho"
  "ne to use for SMS verification\0229\n\014http_h"
  "eaders\030\007 \003(\tB#\202\265\030\037HTTP headers alternati"
  "ng by K/V\022\?\n\007version\030\010 \001(\r:\0011B+\202\265\030\'What "
  "the version of our token should be\"\312\005\n$C"
  "TwoFactor_AddAuthenticator_Response\022I\n\rs"
  "hared_secret\030\001 \001(\014B2\202\265\030.Shared secret be"
  "tween server and authenticator\022I\n\rserial"
  "_number\030\002 \001(\006B2\202\265\030.Authenticator serial "
  "number (unique per token)\022>\n\017revocation_"
  "code\030\003 \001(\tB%\202\265\030!code used to revoke auth"
  "enticator\022+\n\003uri\030\004 \001(\tB\036\202\265\030\032URI for QR c"
  "ode generation\022,\n\013server_time\030\005 \001(\004B\027\202\265\030"
  "\023Current server time\022A\n\014account_name\030\006 \001"
  "(\tB+\202\265\030\'Account name to display on token"
  " client\0223\n\ttoken_gid\030\007 \001(\tB \202\265\030\034Token GI"
  "D assigned by server\022V\n\017identity_secret\030"
  "\010 \001(\014B=\202\265\0309Secret used for identity atte"
  "station (e.g., for eventing)\022)\n\010secret_1"
  "\030\t \001(\014B\027\202\265\030\023Spare shared secret\022\037\n\006statu"
  "s\030\n \001(\005B\017\202\265\030\013Result code\022U\n\021phone_number"
  "_hint\030\013 \001(\tB:\202\265\0306a portion of the phone "
  "number the SMS code was sent to\"\335\001\n\034CTwo"
  "Factor_SendEmail_Request\022#\n\007steamid\030\001 \001("
  "\006B\022\202\265\030\016Steamid to use\022F\n\nemail_type\030\002 \001("
  "\rB2\202\265\030.Type of email to send (ETwoFactor"
  "EmailType::*)\022P\n\027include_activation_code"
  "\030\003 \001(\010B/\202\265\030+Include activation code in e"
  "mail parameters\"\037\n\035CTwoFactor_SendEmail_"
  "Response\"\307\003\n+CTwoFactor_FinalizeAddAuthe"
  "nticator_Request\022#\n\007steamid\030\001 \001(\006B\022\202\265\030\016s"
  "teamid to use\0221\n\022authenticator_code\030\002 \001("
  "\tB\025\202\265\030\021Current auth code\022:\n\022authenticato"
  "r_time\030\003 \001(\004B\036\202\265\030\032Current authenticator "
  "time\022E\n\017activation_code\030\004 \001(\tB,\202\265\030(Activ"
  "ation code from out-of-band message\0229\n\014h"
  "ttp_headers\030\005 \003(\tB#\202\265\030\037HTTP headers alte"
  "rnating by K/V\022\201\001\n\021validate_sms_code\030\006 \001"
  "(\010Bf\202\265\030bWhen finalizing with an SMS code"
  ", pass the request on to the PhoneServic"
  "e to update its state too.\"\351\001\n,CTwoFacto"
  "r_FinalizeAddAuthenticator_Response\022:\n\007s"
  "uccess\030\001 \001(\010B)\202\265\030%True if succeeded, or "
  "want more tries\022.\n\twant_more\030\002 \001(\010B\033\202\265\030\027"
  "True if want more tries\022,\n\013server_time\030\003"
  " \001(\004B\027\202\265\030\023Current server time\022\037\n\006status\030"
  "\004 \001(\005B\017\202\265\030\013Result code\"\262\001\n%CTwoFactor_Up"
  "dateTokenVersion_Request\022\017\n\007steamid\030\001 \001("
  "\006\022<\n\007version\030\002 \001(\rB+\202\265\030\'What the version"
  " of our token should be\022:\n\tsignature\030\003 \001"
  "(\014B\'\202\265\030#HMAC digest over user\'s private "
  "key\"(\n&CTwoFactor_UpdateTokenVersion_Res"
  "ponse\"\313\002\n&CTwoFactor_RemoveAuthenticator"
  "_Request\022<\n\017revocation_code\030\002 \001(\tB#\202\265\030\037P"
  "assword needed to remove token\022H\n\021revoca"
  "tion_reason\030\005 \001(\rB-\202\265\030)Reason the authen"
  "ticator is being removed\022O\n\021steamguard_s"
  "cheme\030\006 \001(\rB4\202\265\0300Type of Steam Guard to "
  "use once token is removed\022H\n\035remove_all_"
  "steamguard_cookies\030\007 \001(\010B!\202\265\030\035Remove all"
  " steamguard cookies\"\376\001\n\'CTwoFactor_Remov"
  "eAuthenticator_Response\022L\n\007success\030\001 \001(\010"
  "B;\202\265\0307True if request succeeeded. The mo"
  "bile app checks this.\022,\n\013server_time\030\003 \001"
  "(\004B\027\202\265\030\023Current server time\022W\n\035revocatio"
  "n_attempts_remaining\030\005 \001(\rB0\202\265\030,Number o"
  "f revocation code attempts remaining\"9\n7"
  "CTwoFactor_RemoveAuthenticatorViaChallen"
  "geStart_Request\"\221\001\n8CTwoFactor_RemoveAut"
  "henticatorViaChallengeStart_Response\022U\n\007"
  "success\030\001 \001(\010BD\202\265\030@True if succeeded, or"
  " want more tries with an authenticator_c"
  "ode\"\364\001\n:CTwoFactor_RemoveAuthenticatorVi"
  "aChallengeContinue_Request\022#\n\010sms_code\030\001"
  " \001(\tB\021\202\265\030\rCode from SMS\022P\n\022generate_new_"
  "token\030\002 \001(\010B4\202\265\0300Generate new token (ins"
  "tead of removing old one)\022\?\n\007version\030\003 \001"
  "(\r:\0011B+\202\265\030\'What the version of our token"
  " should be\"\215\006\n:CRemoveAuthenticatorViaCh"
  "allengeContinue_Replacement_Token\022I\n\rsha"
  "red_secret\030\001 \001(\014B2\202\265\030.Shared secret betw"
  "een server and authenticator\022I\n\rserial_n"
  "umber\030\002 \001(\006B2\202\265\030.Authenticator serial nu"
  "mber (unique per token)\022>\n\017revocation_co"
  "de\030\003 \001(\tB%\202\265\030!code used to revoke authen"
  "ticator\022+\n\003uri\030\004 \001(\tB\036\202\265\030\032URI for QR cod"
  "e generation\022,\n\013server_time\030\005 \001(\004B\027\202\265\030\023C"
  "urrent server time\022A\n\014account_name\030\006 \001(\t"
  "B+\202\265\030\'Account name to display on token c"
  "lient\0223\n\ttoken_gid\030\007 \001(\tB \202\265\030\034Token GID "
  "assigned by server\022V\n\017identity_secret\030\010 "
  "\001(\014B=\202\265\0309Secret used for identity attest"
  "ation (e.g., for eventing)\022)\n\010secret_1\030\t"
  " \001(\014B\027\202\265\030\023Spare shared secret\022\037\n\006status\030"
  "\n \001(\005B\017\202\265\030\013Result code\022O\n\021steamguard_sch"
  "eme\030\013 \001(\rB4\202\265\0300Type of Steam Guard to us"
  "e once token is removed\0221\n\007steamid\030\014 \001(\006"
  "B \202\265\030\034steamid that owns the secret\"\211\002\n;C"
  "TwoFactor_RemoveAuthenticatorViaChalleng"
  "eContinue_Response\022U\n\007success\030\001 \001(\010BD\202\265\030"
  "@True if succeeded, or want more tries w"
  "ith an authenticator_code\022s\n\021replacement"
  "_token\030\002 \001(\0132;.CRemoveAuthenticatorViaCh"
  "allengeContinue_Replacement_TokenB\033\202\265\030\027F"
  "resh secret to install2\346\013\n\tTwoFactor\022k\n\t"
  "QueryTime\022\030.CTwoFactor_Time_Request\032\031.CT"
  "woFactor_Time_Response\")\202\265\030%Get server\'s"
  " idea of the current time\022\214\001\n\013QueryStatu"
  "s\022\032.CTwoFactor_Status_Request\032\033.CTwoFact"
  "or_Status_Response\"D\202\265\030@Get two-factor a"
  "uthentication settings for the logged-in"
  " account\022\232\001\n\020AddAuthenticator\022$.CTwoFact"
  "or_AddAuthenticator_Request\032%.CTwoFactor"
  "_AddAuthenticator_Response\"9\202\265\0305Add two-"
  "factor authenticator to the logged-in ac"
  "count\022i\n\tSendEmail\022\035.CTwoFactor_SendEmai"
  "l_Request\032\036.CTwoFactor_SendEmail_Respons"
  "e\"\035\202\265\030\031Send email to the account\022\301\001\n\030Fin"
  "alizeAddAuthenticator\022,.CTwoFactor_Final"
  "izeAddAuthenticator_Request\032-.CTwoFactor"
  "_FinalizeAddAuthenticator_Response\"H\202\265\030D"
  "Finalize two-factor authentication addit"
  "ion to the logged-in account\022\212\001\n\022UpdateT"
  "okenVersion\022&.CTwoFactor_UpdateTokenVers"
  "ion_Request\032\'.CTwoFactor_UpdateTokenVers"
  "ion_Response\"#\202\265\030\037Update the version for"
  " my token\022\262\001\n\023RemoveAuthenticator\022\'.CTwo"
  "Factor_RemoveAuthenticator_Request\032(.CTw"
  "oFactor_RemoveAuthenticator_Response\"H\202\265"
  "\030DRemove two-factor authentication addit"
  "ion from the logged-in account\022\314\001\n$Remov"
  "eAuthenticatorViaChallengeStart\0228.CTwoFa"
  "ctor_RemoveAuthenticatorViaChallengeStar"
  "t_Request\0329.CTwoFactor_RemoveAuthenticat"
  "orViaChallengeStart_Response\"/\202\265\030+Start "
  "challenge-based authenticator removal\022\330\001"
  "\n\'RemoveAuthenticatorViaChallengeContinu"
  "e\022;.CTwoFactor_RemoveAuthenticatorViaCha"
  "llengeContinue_Request\032<.CTwoFactor_Remo"
  "veAuthenticatorViaChallengeContinue_Resp"
  "onse\"2\202\265\030.Continue challenge-based authe"
  "nticator removal\032%\202\265\030!Two Factor Authent"
  "ication ServiceB\003\200\001\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_steammessages_5ftwofactor_2esteamclient_2eproto_deps[2] = {
  &::descriptor_table_steammessages_5fbase_2eproto,
  &::descriptor_table_steammessages_5funified_5fbase_2esteamclient_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steammessages_5ftwofactor_2esteamclient_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5ftwofactor_2esteamclient_2eproto = {
  false, false, 8060, descriptor_table_protodef_steammessages_5ftwofactor_2esteamclient_2eproto, "steammessages_twofactor.steamclient.proto", 
  &descriptor_table_steammessages_5ftwofactor_2esteamclient_2eproto_once, descriptor_table_steammessages_5ftwofactor_2esteamclient_2eproto_deps, 2, 19,
  schemas, file_default_instances, TableStruct_steammessages_5ftwofactor_2esteamclient_2eproto::offsets,
  file_level_metadata_steammessages_5ftwofactor_2esteamclient_2eproto, file_level_enum_descriptors_steammessages_5ftwofactor_2esteamclient_2eproto, file_level_service_descriptors_steammessages_5ftwofactor_2esteamclient_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_steammessages_5ftwofactor_2esteamclient_2eproto_getter() {
  return &descriptor_table_steammessages_5ftwofactor_2esteamclient_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_steammessages_5ftwofactor_2esteamclient_2eproto(&descriptor_table_steammessages_5ftwofactor_2esteamclient_2eproto);

// ===================================================================

class CTwoFactor_Time_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CTwoFactor_Time_Request>()._has_bits_);
  static void set_has_sender_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CTwoFactor_Time_Request::CTwoFactor_Time_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CTwoFactor_Time_Request)
}
CTwoFactor_Time_Request::CTwoFactor_Time_Request(const CTwoFactor_Time_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sender_time_ = from.sender_time_;
  // @@protoc_insertion_point(copy_constructor:CTwoFactor_Time_Request)
}

inline void CTwoFactor_Time_Request::SharedCtor() {
sender_time_ = uint64_t{0u};
}

CTwoFactor_Time_Request::~CTwoFactor_Time_Request() {
  // @@protoc_insertion_point(destructor:CTwoFactor_Time_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CTwoFactor_Time_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CTwoFactor_Time_Request::ArenaDtor(void* object) {
  CTwoFactor_Time_Request* _this = reinterpret_cast< CTwoFactor_Time_Request* >(object);
  (void)_this;
}
void CTwoFactor_Time_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CTwoFactor_Time_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CTwoFactor_Time_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CTwoFactor_Time_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sender_time_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CTwoFactor_Time_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 sender_time = 1 [(.description) = "Current time on the sender (for stats, don\'t trust this)"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_sender_time(&has_bits);
          sender_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CTwoFactor_Time_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CTwoFactor_Time_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 sender_time = 1 [(.description) = "Current time on the sender (for stats, don\'t trust this)"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_sender_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CTwoFactor_Time_Request)
  return target;
}

size_t CTwoFactor_Time_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CTwoFactor_Time_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 sender_time = 1 [(.description) = "Current time on the sender (for stats, don\'t trust this)"];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_sender_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CTwoFactor_Time_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CTwoFactor_Time_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CTwoFactor_Time_Request::GetClassData() const { return &_class_data_; }

void CTwoFactor_Time_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CTwoFactor_Time_Request *>(to)->MergeFrom(
      static_cast<const CTwoFactor_Time_Request &>(from));
}


void CTwoFactor_Time_Request::MergeFrom(const CTwoFactor_Time_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CTwoFactor_Time_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_sender_time()) {
    _internal_set_sender_time(from._internal_sender_time());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CTwoFactor_Time_Request::CopyFrom(const CTwoFactor_Time_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CTwoFactor_Time_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTwoFactor_Time_Request::IsInitialized() const {
  return true;
}

void CTwoFactor_Time_Request::InternalSwap(CTwoFactor_Time_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(sender_time_, other->sender_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CTwoFactor_Time_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5ftwofactor_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5ftwofactor_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5ftwofactor_2esteamclient_2eproto[0]);
}

// ===================================================================

class CTwoFactor_Time_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CTwoFactor_Time_Response>()._has_bits_);
  static void set_has_server_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_skew_tolerance_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_large_time_jink(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_probe_frequency_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_adjusted_time_probe_frequency_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_hint_probe_frequency_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_sync_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_try_again_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_max_attempts(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

CTwoFactor_Time_Response::CTwoFactor_Time_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CTwoFactor_Time_Response)
}
CTwoFactor_Time_Response::CTwoFactor_Time_Response(const CTwoFactor_Time_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&server_time_, &from.server_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_attempts_) -
    reinterpret_cast<char*>(&server_time_)) + sizeof(max_attempts_));
  // @@protoc_insertion_point(copy_constructor:CTwoFactor_Time_Response)
}

inline void CTwoFactor_Time_Response::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&server_time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_attempts_) -
    reinterpret_cast<char*>(&server_time_)) + sizeof(max_attempts_));
}

CTwoFactor_Time_Response::~CTwoFactor_Time_Response() {
  // @@protoc_insertion_point(destructor:CTwoFactor_Time_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CTwoFactor_Time_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CTwoFactor_Time_Response::ArenaDtor(void* object) {
  CTwoFactor_Time_Response* _this = reinterpret_cast< CTwoFactor_Time_Response* >(object);
  (void)_this;
}
void CTwoFactor_Time_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CTwoFactor_Time_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CTwoFactor_Time_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CTwoFactor_Time_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&server_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&try_again_seconds_) -
        reinterpret_cast<char*>(&server_time_)) + sizeof(try_again_seconds_));
  }
  max_attempts_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CTwoFactor_Time_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 server_time = 1 [(.description) = "Current server time"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_server_time(&has_bits);
          server_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 skew_tolerance_seconds = 2 [(.description) = "Time skew we\'ll tolerate before applying an adjustment"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_skew_tolerance_seconds(&has_bits);
          skew_tolerance_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 large_time_jink = 3 [(.description) = "Re-sync if local time jitters by this much"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_large_time_jink(&has_bits);
          large_time_jink_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 probe_frequency_seconds = 4 [(.description) = "Time probe frequency if phone time is synchronized"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_probe_frequency_seconds(&has_bits);
          probe_frequency_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 adjusted_time_probe_frequency_seconds = 5 [(.description) = "Time probe frequency if phone time is not synchronized"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_adjusted_time_probe_frequency_seconds(&has_bits);
          adjusted_time_probe_frequency_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 hint_probe_frequency_seconds = 6 [(.description) = "Floor of probe frequency, no matter what"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_hint_probe_frequency_seconds(&has_bits);
          hint_probe_frequency_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 sync_timeout = 7 [(.description) = "More than this, and we call the current sync failed"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_sync_timeout(&has_bits);
          sync_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 try_again_seconds = 8 [(.description) = "Seconds to try again after a failed sync"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_try_again_seconds(&has_bits);
          try_again_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 max_attempts = 9 [(.description) = "# times we\'ll ask for server time before we bail"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_max_attempts(&has_bits);
          max_attempts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CTwoFactor_Time_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CTwoFactor_Time_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 server_time = 1 [(.description) = "Current server time"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_server_time(), target);
  }

  // optional uint64 skew_tolerance_seconds = 2 [(.description) = "Time skew we\'ll tolerate before applying an adjustment"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_skew_tolerance_seconds(), target);
  }

  // optional uint64 large_time_jink = 3 [(.description) = "Re-sync if local time jitters by this much"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_large_time_jink(), target);
  }

  // optional uint32 probe_frequency_seconds = 4 [(.description) = "Time probe frequency if phone time is synchronized"];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_probe_frequency_seconds(), target);
  }

  // optional uint32 adjusted_time_probe_frequency_seconds = 5 [(.description) = "Time probe frequency if phone time is not synchronized"];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_adjusted_time_probe_frequency_seconds(), target);
  }

  // optional uint32 hint_probe_frequency_seconds = 6 [(.description) = "Floor of probe frequency, no matter what"];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_hint_probe_frequency_seconds(), target);
  }

  // optional uint32 sync_timeout = 7 [(.description) = "More than this, and we call the current sync failed"];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_sync_timeout(), target);
  }

  // optional uint32 try_again_seconds = 8 [(.description) = "Seconds to try again after a failed sync"];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_try_again_seconds(), target);
  }

  // optional uint32 max_attempts = 9 [(.description) = "# times we\'ll ask for server time before we bail"];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_max_attempts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CTwoFactor_Time_Response)
  return target;
}

size_t CTwoFactor_Time_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CTwoFactor_Time_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 server_time = 1 [(.description) = "Current server time"];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_server_time());
    }

    // optional uint64 skew_tolerance_seconds = 2 [(.description) = "Time skew we\'ll tolerate before applying an adjustment"];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_skew_tolerance_seconds());
    }

    // optional uint64 large_time_jink = 3 [(.description) = "Re-sync if local time jitters by this much"];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_large_time_jink());
    }

    // optional uint32 probe_frequency_seconds = 4 [(.description) = "Time probe frequency if phone time is synchronized"];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_probe_frequency_seconds());
    }

    // optional uint32 adjusted_time_probe_frequency_seconds = 5 [(.description) = "Time probe frequency if phone time is not synchronized"];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_adjusted_time_probe_frequency_seconds());
    }

    // optional uint32 hint_probe_frequency_seconds = 6 [(.description) = "Floor of probe frequency, no matter what"];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_hint_probe_frequency_seconds());
    }

    // optional uint32 sync_timeout = 7 [(.description) = "More than this, and we call the current sync failed"];
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_sync_timeout());
    }

    // optional uint32 try_again_seconds = 8 [(.description) = "Seconds to try again after a failed sync"];
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_try_again_seconds());
    }

  }
  // optional uint32 max_attempts = 9 [(.description) = "# times we\'ll ask for server time before we bail"];
  if (cached_has_bits & 0x00000100u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_max_attempts());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CTwoFactor_Time_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CTwoFactor_Time_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CTwoFactor_Time_Response::GetClassData() const { return &_class_data_; }

void CTwoFactor_Time_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CTwoFactor_Time_Response *>(to)->MergeFrom(
      static_cast<const CTwoFactor_Time_Response &>(from));
}


void CTwoFactor_Time_Response::MergeFrom(const CTwoFactor_Time_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CTwoFactor_Time_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      server_time_ = from.server_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      skew_tolerance_seconds_ = from.skew_tolerance_seconds_;
    }
    if (cached_has_bits & 0x00000004u) {
      large_time_jink_ = from.large_time_jink_;
    }
    if (cached_has_bits & 0x00000008u) {
      probe_frequency_seconds_ = from.probe_frequency_seconds_;
    }
    if (cached_has_bits & 0x00000010u) {
      adjusted_time_probe_frequency_seconds_ = from.adjusted_time_probe_frequency_seconds_;
    }
    if (cached_has_bits & 0x00000020u) {
      hint_probe_frequency_seconds_ = from.hint_probe_frequency_seconds_;
    }
    if (cached_has_bits & 0x00000040u) {
      sync_timeout_ = from.sync_timeout_;
    }
    if (cached_has_bits & 0x00000080u) {
      try_again_seconds_ = from.try_again_seconds_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_max_attempts(from._internal_max_attempts());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CTwoFactor_Time_Response::CopyFrom(const CTwoFactor_Time_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CTwoFactor_Time_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTwoFactor_Time_Response::IsInitialized() const {
  return true;
}

void CTwoFactor_Time_Response::InternalSwap(CTwoFactor_Time_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CTwoFactor_Time_Response, max_attempts_)
      + sizeof(CTwoFactor_Time_Response::max_attempts_)
      - PROTOBUF_FIELD_OFFSET(CTwoFactor_Time_Response, server_time_)>(
          reinterpret_cast<char*>(&server_time_),
          reinterpret_cast<char*>(&other->server_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CTwoFactor_Time_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5ftwofactor_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5ftwofactor_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5ftwofactor_2esteamclient_2eproto[1]);
}

// ===================================================================

class CTwoFactor_Status_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CTwoFactor_Status_Request>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CTwoFactor_Status_Request::CTwoFactor_Status_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CTwoFactor_Status_Request)
}
CTwoFactor_Status_Request::CTwoFactor_Status_Request(const CTwoFactor_Status_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:CTwoFactor_Status_Request)
}

inline void CTwoFactor_Status_Request::SharedCtor() {
steamid_ = uint64_t{0u};
}

CTwoFactor_Status_Request::~CTwoFactor_Status_Request() {
  // @@protoc_insertion_point(destructor:CTwoFactor_Status_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CTwoFactor_Status_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CTwoFactor_Status_Request::ArenaDtor(void* object) {
  CTwoFactor_Status_Request* _this = reinterpret_cast< CTwoFactor_Status_Request* >(object);
  (void)_this;
}
void CTwoFactor_Status_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CTwoFactor_Status_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CTwoFactor_Status_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CTwoFactor_Status_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steamid_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CTwoFactor_Status_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1 [(.description) = "steamid to use"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CTwoFactor_Status_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CTwoFactor_Status_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1 [(.description) = "steamid to use"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CTwoFactor_Status_Request)
  return target;
}

size_t CTwoFactor_Status_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CTwoFactor_Status_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 steamid = 1 [(.description) = "steamid to use"];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CTwoFactor_Status_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CTwoFactor_Status_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CTwoFactor_Status_Request::GetClassData() const { return &_class_data_; }

void CTwoFactor_Status_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CTwoFactor_Status_Request *>(to)->MergeFrom(
      static_cast<const CTwoFactor_Status_Request &>(from));
}


void CTwoFactor_Status_Request::MergeFrom(const CTwoFactor_Status_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CTwoFactor_Status_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_steamid()) {
    _internal_set_steamid(from._internal_steamid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CTwoFactor_Status_Request::CopyFrom(const CTwoFactor_Status_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CTwoFactor_Status_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTwoFactor_Status_Request::IsInitialized() const {
  return true;
}

void CTwoFactor_Status_Request::InternalSwap(CTwoFactor_Status_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_, other->steamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CTwoFactor_Status_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5ftwofactor_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5ftwofactor_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5ftwofactor_2esteamclient_2eproto[2]);
}

// ===================================================================

class CTwoFactor_Status_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CTwoFactor_Status_Response>()._has_bits_);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_inactivation_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_authenticator_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_authenticator_allowed(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_steamguard_scheme(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_token_gid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_email_validated(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_device_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_time_created(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_revocation_attempts_remaining(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_classified_agent(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_allow_external_authenticator(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_time_transferred(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

CTwoFactor_Status_Response::CTwoFactor_Status_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CTwoFactor_Status_Response)
}
CTwoFactor_Status_Response::CTwoFactor_Status_Response(const CTwoFactor_Status_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_gid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    token_gid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_token_gid()) {
    token_gid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token_gid(), 
      GetArenaForAllocation());
  }
  device_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    device_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_device_identifier()) {
    device_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device_identifier(), 
      GetArenaForAllocation());
  }
  classified_agent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    classified_agent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_classified_agent()) {
    classified_agent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_classified_agent(), 
      GetArenaForAllocation());
  }
  ::memcpy(&state_, &from.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&state_)) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:CTwoFactor_Status_Response)
}

inline void CTwoFactor_Status_Response::SharedCtor() {
token_gid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  token_gid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
device_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  device_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
classified_agent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  classified_agent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&state_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&state_)) + sizeof(version_));
}

CTwoFactor_Status_Response::~CTwoFactor_Status_Response() {
  // @@protoc_insertion_point(destructor:CTwoFactor_Status_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CTwoFactor_Status_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  token_gid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  classified_agent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CTwoFactor_Status_Response::ArenaDtor(void* object) {
  CTwoFactor_Status_Response* _this = reinterpret_cast< CTwoFactor_Status_Response* >(object);
  (void)_this;
}
void CTwoFactor_Status_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CTwoFactor_Status_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CTwoFactor_Status_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CTwoFactor_Status_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      token_gid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      device_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      classified_agent_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&state_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&authenticator_allowed_) -
        reinterpret_cast<char*>(&state_)) + sizeof(authenticator_allowed_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&email_validated_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&version_) -
        reinterpret_cast<char*>(&email_validated_)) + sizeof(version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CTwoFactor_Status_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 state = 1 [(.description) = "Authenticator state"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_state(&has_bits);
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 inactivation_reason = 2 [(.description) = "Inactivation reason (if any)"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_inactivation_reason(&has_bits);
          inactivation_reason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 authenticator_type = 3 [(.description) = "Type of authenticator"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_authenticator_type(&has_bits);
          authenticator_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool authenticator_allowed = 4 [(.description) = "Account allowed to have an authenticator?"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_authenticator_allowed(&has_bits);
          authenticator_allowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 steamguard_scheme = 5 [(.description) = "Steam Guard scheme in effect"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_steamguard_scheme(&has_bits);
          steamguard_scheme_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string token_gid = 6 [(.description) = "String rep of token GID assigned by server"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_token_gid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CTwoFactor_Status_Response.token_gid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool email_validated = 7 [(.description) = "Account has verified email capability"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_email_validated(&has_bits);
          email_validated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string device_identifier = 8 [(.description) = "Authenticator (phone) identifier"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_device_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CTwoFactor_Status_Response.device_identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 time_created = 9 [(.description) = "When the token was created"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_time_created(&has_bits);
          time_created_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 revocation_attempts_remaining = 10 [(.description) = "Number of revocation code attempts remaining"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_revocation_attempts_remaining(&has_bits);
          revocation_attempts_remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string classified_agent = 11 [(.description) = "Agent that added the authenticator (e.g., ios / android / other)"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_classified_agent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CTwoFactor_Status_Response.classified_agent");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool allow_external_authenticator = 12 [(.description) = "Allow a third-party authenticator (in addition to two-factor)"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_allow_external_authenticator(&has_bits);
          allow_external_authenticator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 time_transferred = 13 [(.description) = "When the token was transferred from another device, if applicable"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_time_transferred(&has_bits);
          time_transferred_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 version = 14 [(.description) = "Current token version"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CTwoFactor_Status_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CTwoFactor_Status_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 state = 1 [(.description) = "Authenticator state"];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_state(), target);
  }

  // optional uint32 inactivation_reason = 2 [(.description) = "Inactivation reason (if any)"];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_inactivation_reason(), target);
  }

  // optional uint32 authenticator_type = 3 [(.description) = "Type of authenticator"];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_authenticator_type(), target);
  }

  // optional bool authenticator_allowed = 4 [(.description) = "Account allowed to have an authenticator?"];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_authenticator_allowed(), target);
  }

  // optional uint32 steamguard_scheme = 5 [(.description) = "Steam Guard scheme in effect"];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_steamguard_scheme(), target);
  }

  // optional string token_gid = 6 [(.description) = "String rep of token GID assigned by server"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_token_gid().data(), static_cast<int>(this->_internal_token_gid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CTwoFactor_Status_Response.token_gid");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_token_gid(), target);
  }

  // optional bool email_validated = 7 [(.description) = "Account has verified email capability"];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_email_validated(), target);
  }

  // optional string device_identifier = 8 [(.description) = "Authenticator (phone) identifier"];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_device_identifier().data(), static_cast<int>(this->_internal_device_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CTwoFactor_Status_Response.device_identifier");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_device_identifier(), target);
  }

  // optional uint32 time_created = 9 [(.description) = "When the token was created"];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_time_created(), target);
  }

  // optional uint32 revocation_attempts_remaining = 10 [(.description) = "Number of revocation code attempts remaining"];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_revocation_attempts_remaining(), target);
  }

  // optional string classified_agent = 11 [(.description) = "Agent that added the authenticator (e.g., ios / android / other)"];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_classified_agent().data(), static_cast<int>(this->_internal_classified_agent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CTwoFactor_Status_Response.classified_agent");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_classified_agent(), target);
  }

  // optional bool allow_external_authenticator = 12 [(.description) = "Allow a third-party authenticator (in addition to two-factor)"];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_allow_external_authenticator(), target);
  }

  // optional uint32 time_transferred = 13 [(.description) = "When the token was transferred from another device, if applicable"];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_time_transferred(), target);
  }

  // optional uint32 version = 14 [(.description) = "Current token version"];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CTwoFactor_Status_Response)
  return target;
}

size_t CTwoFactor_Status_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CTwoFactor_Status_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string token_gid = 6 [(.description) = "String rep of token GID assigned by server"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_token_gid());
    }

    // optional string device_identifier = 8 [(.description) = "Authenticator (phone) identifier"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_device_identifier());
    }

    // optional string classified_agent = 11 [(.description) = "Agent that added the authenticator (e.g., ios / android / other)"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_classified_agent());
    }

    // optional uint32 state = 1 [(.description) = "Authenticator state"];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_state());
    }

    // optional uint32 inactivation_reason = 2 [(.description) = "Inactivation reason (if any)"];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_inactivation_reason());
    }

    // optional uint32 authenticator_type = 3 [(.description) = "Type of authenticator"];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_authenticator_type());
    }

    // optional uint32 steamguard_scheme = 5 [(.description) = "Steam Guard scheme in effect"];
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_steamguard_scheme());
    }

    // optional bool authenticator_allowed = 4 [(.description) = "Account allowed to have an authenticator?"];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional bool email_validated = 7 [(.description) = "Account has verified email capability"];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool allow_external_authenticator = 12 [(.description) = "Allow a third-party authenticator (in addition to two-factor)"];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional uint32 time_created = 9 [(.description) = "When the token was created"];
    if (cached_has_bits & 0x00000400u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_time_created());
    }

    // optional uint32 revocation_attempts_remaining = 10 [(.description) = "Number of revocation code attempts remaining"];
    if (cached_has_bits & 0x00000800u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_revocation_attempts_remaining());
    }

    // optional uint32 time_transferred = 13 [(.description) = "When the token was transferred from another device, if applicable"];
    if (cached_has_bits & 0x00001000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_time_transferred());
    }

    // optional uint32 version = 14 [(.description) = "Current token version"];
    if (cached_has_bits & 0x00002000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_version());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CTwoFactor_Status_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CTwoFactor_Status_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CTwoFactor_Status_Response::GetClassData() const { return &_class_data_; }

void CTwoFactor_Status_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CTwoFactor_Status_Response *>(to)->MergeFrom(
      static_cast<const CTwoFactor_Status_Response &>(from));
}


void CTwoFactor_Status_Response::MergeFrom(const CTwoFactor_Status_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CTwoFactor_Status_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_token_gid(from._internal_token_gid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_device_identifier(from._internal_device_identifier());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_classified_agent(from._internal_classified_agent());
    }
    if (cached_has_bits & 0x00000008u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000010u) {
      inactivation_reason_ = from.inactivation_reason_;
    }
    if (cached_has_bits & 0x00000020u) {
      authenticator_type_ = from.authenticator_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      steamguard_scheme_ = from.steamguard_scheme_;
    }
    if (cached_has_bits & 0x00000080u) {
      authenticator_allowed_ = from.authenticator_allowed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      email_validated_ = from.email_validated_;
    }
    if (cached_has_bits & 0x00000200u) {
      allow_external_authenticator_ = from.allow_external_authenticator_;
    }
    if (cached_has_bits & 0x00000400u) {
      time_created_ = from.time_created_;
    }
    if (cached_has_bits & 0x00000800u) {
      revocation_attempts_remaining_ = from.revocation_attempts_remaining_;
    }
    if (cached_has_bits & 0x00001000u) {
      time_transferred_ = from.time_transferred_;
    }
    if (cached_has_bits & 0x00002000u) {
      version_ = from.version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CTwoFactor_Status_Response::CopyFrom(const CTwoFactor_Status_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CTwoFactor_Status_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTwoFactor_Status_Response::IsInitialized() const {
  return true;
}

void CTwoFactor_Status_Response::InternalSwap(CTwoFactor_Status_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &token_gid_, lhs_arena,
      &other->token_gid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &device_identifier_, lhs_arena,
      &other->device_identifier_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &classified_agent_, lhs_arena,
      &other->classified_agent_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CTwoFactor_Status_Response, version_)
      + sizeof(CTwoFactor_Status_Response::version_)
      - PROTOBUF_FIELD_OFFSET(CTwoFactor_Status_Response, state_)>(
          reinterpret_cast<char*>(&state_),
          reinterpret_cast<char*>(&other->state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CTwoFactor_Status_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5ftwofactor_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5ftwofactor_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5ftwofactor_2esteamclient_2eproto[3]);
}

// ===================================================================

class CTwoFactor_AddAuthenticator_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CTwoFactor_AddAuthenticator_Request>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_authenticator_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_serial_number(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_authenticator_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_device_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sms_phone_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CTwoFactor_AddAuthenticator_Request::CTwoFactor_AddAuthenticator_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  http_headers_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CTwoFactor_AddAuthenticator_Request)
}
CTwoFactor_AddAuthenticator_Request::CTwoFactor_AddAuthenticator_Request(const CTwoFactor_AddAuthenticator_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      http_headers_(from.http_headers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    device_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_device_identifier()) {
    device_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device_identifier(), 
      GetArenaForAllocation());
  }
  sms_phone_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sms_phone_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sms_phone_id()) {
    sms_phone_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sms_phone_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:CTwoFactor_AddAuthenticator_Request)
}

inline void CTwoFactor_AddAuthenticator_Request::SharedCtor() {
device_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  device_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
sms_phone_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sms_phone_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&authenticator_type_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(authenticator_type_));
version_ = 1u;
}

CTwoFactor_AddAuthenticator_Request::~CTwoFactor_AddAuthenticator_Request() {
  // @@protoc_insertion_point(destructor:CTwoFactor_AddAuthenticator_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CTwoFactor_AddAuthenticator_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  device_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sms_phone_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CTwoFactor_AddAuthenticator_Request::ArenaDtor(void* object) {
  CTwoFactor_AddAuthenticator_Request* _this = reinterpret_cast< CTwoFactor_AddAuthenticator_Request* >(object);
  (void)_this;
}
void CTwoFactor_AddAuthenticator_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CTwoFactor_AddAuthenticator_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CTwoFactor_AddAuthenticator_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CTwoFactor_AddAuthenticator_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  http_headers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      device_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      sms_phone_id_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&authenticator_type_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(authenticator_type_));
    version_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CTwoFactor_AddAuthenticator_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1 [(.description) = "steamid to use"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 authenticator_time = 2 [(.description) = "Current authenticator time"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_authenticator_time(&has_bits);
          authenticator_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 serial_number = 3 [(.description) = "locally computed serial (deprecated)"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_serial_number(&has_bits);
          serial_number_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 authenticator_type = 4 [(.description) = "Authenticator type"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_authenticator_type(&has_bits);
          authenticator_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string device_identifier = 5 [(.description) = "Authenticator identifier"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_device_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CTwoFactor_AddAuthenticator_Request.device_identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string sms_phone_id = 6 [(.description) = "ID of phone to use for SMS verification"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_sms_phone_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CTwoFactor_AddAuthenticator_Request.sms_phone_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string http_headers = 7 [(.description) = "HTTP headers alternating by K/V"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_http_headers();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CTwoFactor_AddAuthenticator_Request.http_headers");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 version = 8 [default = 1, (.description) = "What the version of our token should be"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CTwoFactor_AddAuthenticator_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CTwoFactor_AddAuthenticator_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1 [(.description) = "steamid to use"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional uint64 authenticator_time = 2 [(.description) = "Current authenticator time"];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_authenticator_time(), target);
  }

  // optional fixed64 serial_number = 3 [(.description) = "locally computed serial (deprecated)"];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_serial_number(), target);
  }

  // optional uint32 authenticator_type = 4 [(.description) = "Authenticator type"];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_authenticator_type(), target);
  }

  // optional string device_identifier = 5 [(.description) = "Authenticator identifier"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_device_identifier().data(), static_cast<int>(this->_internal_device_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CTwoFactor_AddAuthenticator_Request.device_identifier");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_device_identifier(), target);
  }

  // optional string sms_phone_id = 6 [(.description) = "ID of phone to use for SMS verification"];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sms_phone_id().data(), static_cast<int>(this->_internal_sms_phone_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CTwoFactor_AddAuthenticator_Request.sms_phone_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_sms_phone_id(), target);
  }

  // repeated string http_headers = 7 [(.description) = "HTTP headers alternating by K/V"];
  for (int i = 0, n = this->_internal_http_headers_size(); i < n; i++) {
    const auto& s = this->_internal_http_headers(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CTwoFactor_AddAuthenticator_Request.http_headers");
    target = stream->WriteString(7, s, target);
  }

  // optional uint32 version = 8 [default = 1, (.description) = "What the version of our token should be"];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CTwoFactor_AddAuthenticator_Request)
  return target;
}

size_t CTwoFactor_AddAuthenticator_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CTwoFactor_AddAuthenticator_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string http_headers = 7 [(.description) = "HTTP headers alternating by K/V"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(http_headers_.size());
  for (int i = 0, n = http_headers_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      http_headers_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string device_identifier = 5 [(.description) = "Authenticator identifier"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_device_identifier());
    }

    // optional string sms_phone_id = 6 [(.description) = "ID of phone to use for SMS verification"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sms_phone_id());
    }

    // optional fixed64 steamid = 1 [(.description) = "steamid to use"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint64 authenticator_time = 2 [(.description) = "Current authenticator time"];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_authenticator_time());
    }

    // optional fixed64 serial_number = 3 [(.description) = "locally computed serial (deprecated)"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional uint32 authenticator_type = 4 [(.description) = "Authenticator type"];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_authenticator_type());
    }

    // optional uint32 version = 8 [default = 1, (.description) = "What the version of our token should be"];
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_version());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CTwoFactor_AddAuthenticator_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CTwoFactor_AddAuthenticator_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CTwoFactor_AddAuthenticator_Request::GetClassData() const { return &_class_data_; }

void CTwoFactor_AddAuthenticator_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CTwoFactor_AddAuthenticator_Request *>(to)->MergeFrom(
      static_cast<const CTwoFactor_AddAuthenticator_Request &>(from));
}


void CTwoFactor_AddAuthenticator_Request::MergeFrom(const CTwoFactor_AddAuthenticator_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CTwoFactor_AddAuthenticator_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  http_headers_.MergeFrom(from.http_headers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_device_identifier(from._internal_device_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_sms_phone_id(from._internal_sms_phone_id());
    }
    if (cached_has_bits & 0x00000004u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000008u) {
      authenticator_time_ = from.authenticator_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      serial_number_ = from.serial_number_;
    }
    if (cached_has_bits & 0x00000020u) {
      authenticator_type_ = from.authenticator_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      version_ = from.version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CTwoFactor_AddAuthenticator_Request::CopyFrom(const CTwoFactor_AddAuthenticator_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CTwoFactor_AddAuthenticator_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTwoFactor_AddAuthenticator_Request::IsInitialized() const {
  return true;
}

void CTwoFactor_AddAuthenticator_Request::InternalSwap(CTwoFactor_AddAuthenticator_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  http_headers_.InternalSwap(&other->http_headers_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &device_identifier_, lhs_arena,
      &other->device_identifier_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sms_phone_id_, lhs_arena,
      &other->sms_phone_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CTwoFactor_AddAuthenticator_Request, authenticator_type_)
      + sizeof(CTwoFactor_AddAuthenticator_Request::authenticator_type_)
      - PROTOBUF_FIELD_OFFSET(CTwoFactor_AddAuthenticator_Request, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
  swap(version_, other->version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CTwoFactor_AddAuthenticator_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5ftwofactor_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5ftwofactor_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5ftwofactor_2esteamclient_2eproto[4]);
}

// ===================================================================

class CTwoFactor_AddAuthenticator_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CTwoFactor_AddAuthenticator_Response>()._has_bits_);
  static void set_has_shared_secret(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_serial_number(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_revocation_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_uri(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_server_time(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_account_name(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_token_gid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_identity_secret(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_secret_1(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_phone_number_hint(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CTwoFactor_AddAuthenticator_Response::CTwoFactor_AddAuthenticator_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CTwoFactor_AddAuthenticator_Response)
}
CTwoFactor_AddAuthenticator_Response::CTwoFactor_AddAuthenticator_Response(const CTwoFactor_AddAuthenticator_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  shared_secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    shared_secret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_shared_secret()) {
    shared_secret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_shared_secret(), 
      GetArenaForAllocation());
  }
  revocation_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    revocation_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_revocation_code()) {
    revocation_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_revocation_code(), 
      GetArenaForAllocation());
  }
  uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_uri()) {
    uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_uri(), 
      GetArenaForAllocation());
  }
  account_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    account_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_account_name()) {
    account_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account_name(), 
      GetArenaForAllocation());
  }
  token_gid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    token_gid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_token_gid()) {
    token_gid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token_gid(), 
      GetArenaForAllocation());
  }
  identity_secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    identity_secret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_identity_secret()) {
    identity_secret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_identity_secret(), 
      GetArenaForAllocation());
  }
  secret_1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    secret_1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_secret_1()) {
    secret_1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_secret_1(), 
      GetArenaForAllocation());
  }
  phone_number_hint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    phone_number_hint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_phone_number_hint()) {
    phone_number_hint_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_phone_number_hint(), 
      GetArenaForAllocation());
  }
  ::memcpy(&serial_number_, &from.serial_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&serial_number_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:CTwoFactor_AddAuthenticator_Response)
}

inline void CTwoFactor_AddAuthenticator_Response::SharedCtor() {
shared_secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  shared_secret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
revocation_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  revocation_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
account_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  account_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
token_gid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  token_gid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
identity_secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  identity_secret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
secret_1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  secret_1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
phone_number_hint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  phone_number_hint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&serial_number_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&serial_number_)) + sizeof(status_));
}

CTwoFactor_AddAuthenticator_Response::~CTwoFactor_AddAuthenticator_Response() {
  // @@protoc_insertion_point(destructor:CTwoFactor_AddAuthenticator_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CTwoFactor_AddAuthenticator_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  shared_secret_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  revocation_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uri_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_gid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  identity_secret_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phone_number_hint_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CTwoFactor_AddAuthenticator_Response::ArenaDtor(void* object) {
  CTwoFactor_AddAuthenticator_Response* _this = reinterpret_cast< CTwoFactor_AddAuthenticator_Response* >(object);
  (void)_this;
}
void CTwoFactor_AddAuthenticator_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CTwoFactor_AddAuthenticator_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CTwoFactor_AddAuthenticator_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CTwoFactor_AddAuthenticator_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      shared_secret_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      revocation_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      uri_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      account_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      token_gid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      identity_secret_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      secret_1_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      phone_number_hint_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&serial_number_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_) -
        reinterpret_cast<char*>(&serial_number_)) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CTwoFactor_AddAuthenticator_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes shared_secret = 1 [(.description) = "Shared secret between server and authenticator"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_shared_secret();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 serial_number = 2 [(.description) = "Authenticator serial number (unique per token)"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_serial_number(&has_bits);
          serial_number_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional string revocation_code = 3 [(.description) = "code used to revoke authenticator"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_revocation_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CTwoFactor_AddAuthenticator_Response.revocation_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string uri = 4 [(.description) = "URI for QR code generation"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_uri();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CTwoFactor_AddAuthenticator_Response.uri");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 server_time = 5 [(.description) = "Current server time"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_server_time(&has_bits);
          server_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string account_name = 6 [(.description) = "Account name to display on token client"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_account_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CTwoFactor_AddAuthenticator_Response.account_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string token_gid = 7 [(.description) = "Token GID assigned by server"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_token_gid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CTwoFactor_AddAuthenticator_Response.token_gid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes identity_secret = 8 [(.description) = "Secret used for identity attestation (e.g., for eventing)"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_identity_secret();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes secret_1 = 9 [(.description) = "Spare shared secret"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_secret_1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 status = 10 [(.description) = "Result code"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_status(&has_bits);
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string phone_number_hint = 11 [(.description) = "a portion of the phone number the SMS code was sent to"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_phone_number_hint();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CTwoFactor_AddAuthenticator_Response.phone_number_hint");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CTwoFactor_AddAuthenticator_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CTwoFactor_AddAuthenticator_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes shared_secret = 1 [(.description) = "Shared secret between server and authenticator"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_shared_secret(), target);
  }

  // optional fixed64 serial_number = 2 [(.description) = "Authenticator serial number (unique per token)"];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_serial_number(), target);
  }

  // optional string revocation_code = 3 [(.description) = "code used to revoke authenticator"];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_revocation_code().data(), static_cast<int>(this->_internal_revocation_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CTwoFactor_AddAuthenticator_Response.revocation_code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_revocation_code(), target);
  }

  // optional string uri = 4 [(.description) = "URI for QR code generation"];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_uri().data(), static_cast<int>(this->_internal_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CTwoFactor_AddAuthenticator_Response.uri");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_uri(), target);
  }

  // optional uint64 server_time = 5 [(.description) = "Current server time"];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_server_time(), target);
  }

  // optional string account_name = 6 [(.description) = "Account name to display on token client"];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_account_name().data(), static_cast<int>(this->_internal_account_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CTwoFactor_AddAuthenticator_Response.account_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_account_name(), target);
  }

  // optional string token_gid = 7 [(.description) = "Token GID assigned by server"];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_token_gid().data(), static_cast<int>(this->_internal_token_gid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CTwoFactor_AddAuthenticator_Response.token_gid");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_token_gid(), target);
  }

  // optional bytes identity_secret = 8 [(.description) = "Secret used for identity attestation (e.g., for eventing)"];
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_identity_secret(), target);
  }

  // optional bytes secret_1 = 9 [(.description) = "Spare shared secret"];
  if (cached_has_bits & 0x00000040u) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_secret_1(), target);
  }

  // optional int32 status = 10 [(.description) = "Result code"];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_status(), target);
  }

  // optional string phone_number_hint = 11 [(.description) = "a portion of the phone number the SMS code was sent to"];
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_phone_number_hint().data(), static_cast<int>(this->_internal_phone_number_hint().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CTwoFactor_AddAuthenticator_Response.phone_number_hint");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_phone_number_hint(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CTwoFactor_AddAuthenticator_Response)
  return target;
}

size_t CTwoFactor_AddAuthenticator_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CTwoFactor_AddAuthenticator_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes shared_secret = 1 [(.description) = "Shared secret between server and authenticator"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_shared_secret());
    }

    // optional string revocation_code = 3 [(.description) = "code used to revoke authenticator"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_revocation_code());
    }

    // optional string uri = 4 [(.description) = "URI for QR code generation"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_uri());
    }

    // optional string account_name = 6 [(.description) = "Account name to display on token client"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_account_name());
    }

    // optional string token_gid = 7 [(.description) = "Token GID assigned by server"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_token_gid());
    }

    // optional bytes identity_secret = 8 [(.description) = "Secret used for identity attestation (e.g., for eventing)"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_identity_secret());
    }

    // optional bytes secret_1 = 9 [(.description) = "Spare shared secret"];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_secret_1());
    }

    // optional string phone_number_hint = 11 [(.description) = "a portion of the phone number the SMS code was sent to"];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_phone_number_hint());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional fixed64 serial_number = 2 [(.description) = "Authenticator serial number (unique per token)"];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional uint64 server_time = 5 [(.description) = "Current server time"];
    if (cached_has_bits & 0x00000200u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_server_time());
    }

    // optional int32 status = 10 [(.description) = "Result code"];
    if (cached_has_bits & 0x00000400u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_status());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CTwoFactor_AddAuthenticator_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CTwoFactor_AddAuthenticator_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CTwoFactor_AddAuthenticator_Response::GetClassData() const { return &_class_data_; }

void CTwoFactor_AddAuthenticator_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CTwoFactor_AddAuthenticator_Response *>(to)->MergeFrom(
      static_cast<const CTwoFactor_AddAuthenticator_Response &>(from));
}


void CTwoFactor_AddAuthenticator_Response::MergeFrom(const CTwoFactor_AddAuthenticator_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CTwoFactor_AddAuthenticator_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_shared_secret(from._internal_shared_secret());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_revocation_code(from._internal_revocation_code());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_uri(from._internal_uri());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_account_name(from._internal_account_name());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_token_gid(from._internal_token_gid());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_identity_secret(from._internal_identity_secret());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_secret_1(from._internal_secret_1());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_phone_number_hint(from._internal_phone_number_hint());
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      serial_number_ = from.serial_number_;
    }
    if (cached_has_bits & 0x00000200u) {
      server_time_ = from.server_time_;
    }
    if (cached_has_bits & 0x00000400u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CTwoFactor_AddAuthenticator_Response::CopyFrom(const CTwoFactor_AddAuthenticator_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CTwoFactor_AddAuthenticator_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTwoFactor_AddAuthenticator_Response::IsInitialized() const {
  return true;
}

void CTwoFactor_AddAuthenticator_Response::InternalSwap(CTwoFactor_AddAuthenticator_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &shared_secret_, lhs_arena,
      &other->shared_secret_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &revocation_code_, lhs_arena,
      &other->revocation_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &uri_, lhs_arena,
      &other->uri_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &account_name_, lhs_arena,
      &other->account_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &token_gid_, lhs_arena,
      &other->token_gid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &identity_secret_, lhs_arena,
      &other->identity_secret_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &secret_1_, lhs_arena,
      &other->secret_1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &phone_number_hint_, lhs_arena,
      &other->phone_number_hint_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CTwoFactor_AddAuthenticator_Response, status_)
      + sizeof(CTwoFactor_AddAuthenticator_Response::status_)
      - PROTOBUF_FIELD_OFFSET(CTwoFactor_AddAuthenticator_Response, serial_number_)>(
          reinterpret_cast<char*>(&serial_number_),
          reinterpret_cast<char*>(&other->serial_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CTwoFactor_AddAuthenticator_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5ftwofactor_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5ftwofactor_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5ftwofactor_2esteamclient_2eproto[5]);
}

// ===================================================================

class CTwoFactor_SendEmail_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CTwoFactor_SendEmail_Request>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_email_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_include_activation_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CTwoFactor_SendEmail_Request::CTwoFactor_SendEmail_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CTwoFactor_SendEmail_Request)
}
CTwoFactor_SendEmail_Request::CTwoFactor_SendEmail_Request(const CTwoFactor_SendEmail_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&include_activation_code_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(include_activation_code_));
  // @@protoc_insertion_point(copy_constructor:CTwoFactor_SendEmail_Request)
}

inline void CTwoFactor_SendEmail_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&include_activation_code_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(include_activation_code_));
}

CTwoFactor_SendEmail_Request::~CTwoFactor_SendEmail_Request() {
  // @@protoc_insertion_point(destructor:CTwoFactor_SendEmail_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CTwoFactor_SendEmail_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CTwoFactor_SendEmail_Request::ArenaDtor(void* object) {
  CTwoFactor_SendEmail_Request* _this = reinterpret_cast< CTwoFactor_SendEmail_Request* >(object);
  (void)_this;
}
void CTwoFactor_SendEmail_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CTwoFactor_SendEmail_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CTwoFactor_SendEmail_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CTwoFactor_SendEmail_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&include_activation_code_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(include_activation_code_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CTwoFactor_SendEmail_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1 [(.description) = "Steamid to use"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 email_type = 2 [(.description) = "Type of email to send (ETwoFactorEmailType::*)"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_email_type(&has_bits);
          email_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool include_activation_code = 3 [(.description) = "Include activation code in email parameters"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_include_activation_code(&has_bits);
          include_activation_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CTwoFactor_SendEmail_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CTwoFactor_SendEmail_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1 [(.description) = "Steamid to use"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional uint32 email_type = 2 [(.description) = "Type of email to send (ETwoFactorEmailType::*)"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_email_type(), target);
  }

  // optional bool include_activation_code = 3 [(.description) = "Include activation code in email parameters"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_include_activation_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CTwoFactor_SendEmail_Request)
  return target;
}

size_t CTwoFactor_SendEmail_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CTwoFactor_SendEmail_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 steamid = 1 [(.description) = "Steamid to use"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 email_type = 2 [(.description) = "Type of email to send (ETwoFactorEmailType::*)"];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_email_type());
    }

    // optional bool include_activation_code = 3 [(.description) = "Include activation code in email parameters"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CTwoFactor_SendEmail_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CTwoFactor_SendEmail_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CTwoFactor_SendEmail_Request::GetClassData() const { return &_class_data_; }

void CTwoFactor_SendEmail_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CTwoFactor_SendEmail_Request *>(to)->MergeFrom(
      static_cast<const CTwoFactor_SendEmail_Request &>(from));
}


void CTwoFactor_SendEmail_Request::MergeFrom(const CTwoFactor_SendEmail_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CTwoFactor_SendEmail_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      email_type_ = from.email_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      include_activation_code_ = from.include_activation_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CTwoFactor_SendEmail_Request::CopyFrom(const CTwoFactor_SendEmail_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CTwoFactor_SendEmail_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTwoFactor_SendEmail_Request::IsInitialized() const {
  return true;
}

void CTwoFactor_SendEmail_Request::InternalSwap(CTwoFactor_SendEmail_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CTwoFactor_SendEmail_Request, include_activation_code_)
      + sizeof(CTwoFactor_SendEmail_Request::include_activation_code_)
      - PROTOBUF_FIELD_OFFSET(CTwoFactor_SendEmail_Request, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CTwoFactor_SendEmail_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5ftwofactor_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5ftwofactor_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5ftwofactor_2esteamclient_2eproto[6]);
}

// ===================================================================

class CTwoFactor_SendEmail_Response::_Internal {
 public:
};

CTwoFactor_SendEmail_Response::CTwoFactor_SendEmail_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CTwoFactor_SendEmail_Response)
}
CTwoFactor_SendEmail_Response::CTwoFactor_SendEmail_Response(const CTwoFactor_SendEmail_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CTwoFactor_SendEmail_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CTwoFactor_SendEmail_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CTwoFactor_SendEmail_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CTwoFactor_SendEmail_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5ftwofactor_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5ftwofactor_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5ftwofactor_2esteamclient_2eproto[7]);
}

// ===================================================================

class CTwoFactor_FinalizeAddAuthenticator_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CTwoFactor_FinalizeAddAuthenticator_Request>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_authenticator_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_authenticator_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_activation_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_validate_sms_code(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CTwoFactor_FinalizeAddAuthenticator_Request::CTwoFactor_FinalizeAddAuthenticator_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  http_headers_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CTwoFactor_FinalizeAddAuthenticator_Request)
}
CTwoFactor_FinalizeAddAuthenticator_Request::CTwoFactor_FinalizeAddAuthenticator_Request(const CTwoFactor_FinalizeAddAuthenticator_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      http_headers_(from.http_headers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  authenticator_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    authenticator_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_authenticator_code()) {
    authenticator_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_authenticator_code(), 
      GetArenaForAllocation());
  }
  activation_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    activation_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_activation_code()) {
    activation_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_activation_code(), 
      GetArenaForAllocation());
  }
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&validate_sms_code_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(validate_sms_code_));
  // @@protoc_insertion_point(copy_constructor:CTwoFactor_FinalizeAddAuthenticator_Request)
}

inline void CTwoFactor_FinalizeAddAuthenticator_Request::SharedCtor() {
authenticator_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  authenticator_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
activation_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  activation_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&validate_sms_code_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(validate_sms_code_));
}

CTwoFactor_FinalizeAddAuthenticator_Request::~CTwoFactor_FinalizeAddAuthenticator_Request() {
  // @@protoc_insertion_point(destructor:CTwoFactor_FinalizeAddAuthenticator_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CTwoFactor_FinalizeAddAuthenticator_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  authenticator_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  activation_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CTwoFactor_FinalizeAddAuthenticator_Request::ArenaDtor(void* object) {
  CTwoFactor_FinalizeAddAuthenticator_Request* _this = reinterpret_cast< CTwoFactor_FinalizeAddAuthenticator_Request* >(object);
  (void)_this;
}
void CTwoFactor_FinalizeAddAuthenticator_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CTwoFactor_FinalizeAddAuthenticator_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CTwoFactor_FinalizeAddAuthenticator_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CTwoFactor_FinalizeAddAuthenticator_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  http_headers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      authenticator_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      activation_code_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&validate_sms_code_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(validate_sms_code_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CTwoFactor_FinalizeAddAuthenticator_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1 [(.description) = "steamid to use"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional string authenticator_code = 2 [(.description) = "Current auth code"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_authenticator_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CTwoFactor_FinalizeAddAuthenticator_Request.authenticator_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 authenticator_time = 3 [(.description) = "Current authenticator time"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_authenticator_time(&has_bits);
          authenticator_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string activation_code = 4 [(.description) = "Activation code from out-of-band message"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_activation_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CTwoFactor_FinalizeAddAuthenticator_Request.activation_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string http_headers = 5 [(.description) = "HTTP headers alternating by K/V"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_http_headers();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CTwoFactor_FinalizeAddAuthenticator_Request.http_headers");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool validate_sms_code = 6 [(.description) = "When finalizing with an SMS code, pass the request on to the PhoneService to update its state too."];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_validate_sms_code(&has_bits);
          validate_sms_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CTwoFactor_FinalizeAddAuthenticator_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CTwoFactor_FinalizeAddAuthenticator_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1 [(.description) = "steamid to use"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional string authenticator_code = 2 [(.description) = "Current auth code"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_authenticator_code().data(), static_cast<int>(this->_internal_authenticator_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CTwoFactor_FinalizeAddAuthenticator_Request.authenticator_code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_authenticator_code(), target);
  }

  // optional uint64 authenticator_time = 3 [(.description) = "Current authenticator time"];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_authenticator_time(), target);
  }

  // optional string activation_code = 4 [(.description) = "Activation code from out-of-band message"];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_activation_code().data(), static_cast<int>(this->_internal_activation_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CTwoFactor_FinalizeAddAuthenticator_Request.activation_code");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_activation_code(), target);
  }

  // repeated string http_headers = 5 [(.description) = "HTTP headers alternating by K/V"];
  for (int i = 0, n = this->_internal_http_headers_size(); i < n; i++) {
    const auto& s = this->_internal_http_headers(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CTwoFactor_FinalizeAddAuthenticator_Request.http_headers");
    target = stream->WriteString(5, s, target);
  }

  // optional bool validate_sms_code = 6 [(.description) = "When finalizing with an SMS code, pass the request on to the PhoneService to update its state too."];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_validate_sms_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CTwoFactor_FinalizeAddAuthenticator_Request)
  return target;
}

size_t CTwoFactor_FinalizeAddAuthenticator_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CTwoFactor_FinalizeAddAuthenticator_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string http_headers = 5 [(.description) = "HTTP headers alternating by K/V"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(http_headers_.size());
  for (int i = 0, n = http_headers_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      http_headers_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string authenticator_code = 2 [(.description) = "Current auth code"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_authenticator_code());
    }

    // optional string activation_code = 4 [(.description) = "Activation code from out-of-band message"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_activation_code());
    }

    // optional fixed64 steamid = 1 [(.description) = "steamid to use"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint64 authenticator_time = 3 [(.description) = "Current authenticator time"];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_authenticator_time());
    }

    // optional bool validate_sms_code = 6 [(.description) = "When finalizing with an SMS code, pass the request on to the PhoneService to update its state too."];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CTwoFactor_FinalizeAddAuthenticator_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CTwoFactor_FinalizeAddAuthenticator_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CTwoFactor_FinalizeAddAuthenticator_Request::GetClassData() const { return &_class_data_; }

void CTwoFactor_FinalizeAddAuthenticator_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CTwoFactor_FinalizeAddAuthenticator_Request *>(to)->MergeFrom(
      static_cast<const CTwoFactor_FinalizeAddAuthenticator_Request &>(from));
}


void CTwoFactor_FinalizeAddAuthenticator_Request::MergeFrom(const CTwoFactor_FinalizeAddAuthenticator_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CTwoFactor_FinalizeAddAuthenticator_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  http_headers_.MergeFrom(from.http_headers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_authenticator_code(from._internal_authenticator_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_activation_code(from._internal_activation_code());
    }
    if (cached_has_bits & 0x00000004u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000008u) {
      authenticator_time_ = from.authenticator_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      validate_sms_code_ = from.validate_sms_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CTwoFactor_FinalizeAddAuthenticator_Request::CopyFrom(const CTwoFactor_FinalizeAddAuthenticator_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CTwoFactor_FinalizeAddAuthenticator_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTwoFactor_FinalizeAddAuthenticator_Request::IsInitialized() const {
  return true;
}

void CTwoFactor_FinalizeAddAuthenticator_Request::InternalSwap(CTwoFactor_FinalizeAddAuthenticator_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  http_headers_.InternalSwap(&other->http_headers_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &authenticator_code_, lhs_arena,
      &other->authenticator_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &activation_code_, lhs_arena,
      &other->activation_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CTwoFactor_FinalizeAddAuthenticator_Request, validate_sms_code_)
      + sizeof(CTwoFactor_FinalizeAddAuthenticator_Request::validate_sms_code_)
      - PROTOBUF_FIELD_OFFSET(CTwoFactor_FinalizeAddAuthenticator_Request, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CTwoFactor_FinalizeAddAuthenticator_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5ftwofactor_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5ftwofactor_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5ftwofactor_2esteamclient_2eproto[8]);
}

// ===================================================================

class CTwoFactor_FinalizeAddAuthenticator_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CTwoFactor_FinalizeAddAuthenticator_Response>()._has_bits_);
  static void set_has_success(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_want_more(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_server_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CTwoFactor_FinalizeAddAuthenticator_Response::CTwoFactor_FinalizeAddAuthenticator_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CTwoFactor_FinalizeAddAuthenticator_Response)
}
CTwoFactor_FinalizeAddAuthenticator_Response::CTwoFactor_FinalizeAddAuthenticator_Response(const CTwoFactor_FinalizeAddAuthenticator_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&success_, &from.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&server_time_) -
    reinterpret_cast<char*>(&success_)) + sizeof(server_time_));
  // @@protoc_insertion_point(copy_constructor:CTwoFactor_FinalizeAddAuthenticator_Response)
}

inline void CTwoFactor_FinalizeAddAuthenticator_Response::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&success_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&server_time_) -
    reinterpret_cast<char*>(&success_)) + sizeof(server_time_));
}

CTwoFactor_FinalizeAddAuthenticator_Response::~CTwoFactor_FinalizeAddAuthenticator_Response() {
  // @@protoc_insertion_point(destructor:CTwoFactor_FinalizeAddAuthenticator_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CTwoFactor_FinalizeAddAuthenticator_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CTwoFactor_FinalizeAddAuthenticator_Response::ArenaDtor(void* object) {
  CTwoFactor_FinalizeAddAuthenticator_Response* _this = reinterpret_cast< CTwoFactor_FinalizeAddAuthenticator_Response* >(object);
  (void)_this;
}
void CTwoFactor_FinalizeAddAuthenticator_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CTwoFactor_FinalizeAddAuthenticator_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CTwoFactor_FinalizeAddAuthenticator_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CTwoFactor_FinalizeAddAuthenticator_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&success_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&server_time_) -
        reinterpret_cast<char*>(&success_)) + sizeof(server_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CTwoFactor_FinalizeAddAuthenticator_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool success = 1 [(.description) = "True if succeeded, or want more tries"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_success(&has_bits);
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool want_more = 2 [(.description) = "True if want more tries"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_want_more(&has_bits);
          want_more_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 server_time = 3 [(.description) = "Current server time"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_server_time(&has_bits);
          server_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 status = 4 [(.description) = "Result code"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_status(&has_bits);
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CTwoFactor_FinalizeAddAuthenticator_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CTwoFactor_FinalizeAddAuthenticator_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool success = 1 [(.description) = "True if succeeded, or want more tries"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // optional bool want_more = 2 [(.description) = "True if want more tries"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_want_more(), target);
  }

  // optional uint64 server_time = 3 [(.description) = "Current server time"];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_server_time(), target);
  }

  // optional int32 status = 4 [(.description) = "Result code"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CTwoFactor_FinalizeAddAuthenticator_Response)
  return target;
}

size_t CTwoFactor_FinalizeAddAuthenticator_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CTwoFactor_FinalizeAddAuthenticator_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bool success = 1 [(.description) = "True if succeeded, or want more tries"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool want_more = 2 [(.description) = "True if want more tries"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional int32 status = 4 [(.description) = "Result code"];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_status());
    }

    // optional uint64 server_time = 3 [(.description) = "Current server time"];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_server_time());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CTwoFactor_FinalizeAddAuthenticator_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CTwoFactor_FinalizeAddAuthenticator_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CTwoFactor_FinalizeAddAuthenticator_Response::GetClassData() const { return &_class_data_; }

void CTwoFactor_FinalizeAddAuthenticator_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CTwoFactor_FinalizeAddAuthenticator_Response *>(to)->MergeFrom(
      static_cast<const CTwoFactor_FinalizeAddAuthenticator_Response &>(from));
}


void CTwoFactor_FinalizeAddAuthenticator_Response::MergeFrom(const CTwoFactor_FinalizeAddAuthenticator_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CTwoFactor_FinalizeAddAuthenticator_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      success_ = from.success_;
    }
    if (cached_has_bits & 0x00000002u) {
      want_more_ = from.want_more_;
    }
    if (cached_has_bits & 0x00000004u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000008u) {
      server_time_ = from.server_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CTwoFactor_FinalizeAddAuthenticator_Response::CopyFrom(const CTwoFactor_FinalizeAddAuthenticator_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CTwoFactor_FinalizeAddAuthenticator_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTwoFactor_FinalizeAddAuthenticator_Response::IsInitialized() const {
  return true;
}

void CTwoFactor_FinalizeAddAuthenticator_Response::InternalSwap(CTwoFactor_FinalizeAddAuthenticator_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CTwoFactor_FinalizeAddAuthenticator_Response, server_time_)
      + sizeof(CTwoFactor_FinalizeAddAuthenticator_Response::server_time_)
      - PROTOBUF_FIELD_OFFSET(CTwoFactor_FinalizeAddAuthenticator_Response, success_)>(
          reinterpret_cast<char*>(&success_),
          reinterpret_cast<char*>(&other->success_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CTwoFactor_FinalizeAddAuthenticator_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5ftwofactor_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5ftwofactor_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5ftwofactor_2esteamclient_2eproto[9]);
}

// ===================================================================

class CTwoFactor_UpdateTokenVersion_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CTwoFactor_UpdateTokenVersion_Request>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CTwoFactor_UpdateTokenVersion_Request::CTwoFactor_UpdateTokenVersion_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CTwoFactor_UpdateTokenVersion_Request)
}
CTwoFactor_UpdateTokenVersion_Request::CTwoFactor_UpdateTokenVersion_Request(const CTwoFactor_UpdateTokenVersion_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_signature()) {
    signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signature(), 
      GetArenaForAllocation());
  }
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:CTwoFactor_UpdateTokenVersion_Request)
}

inline void CTwoFactor_UpdateTokenVersion_Request::SharedCtor() {
signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(version_));
}

CTwoFactor_UpdateTokenVersion_Request::~CTwoFactor_UpdateTokenVersion_Request() {
  // @@protoc_insertion_point(destructor:CTwoFactor_UpdateTokenVersion_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CTwoFactor_UpdateTokenVersion_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CTwoFactor_UpdateTokenVersion_Request::ArenaDtor(void* object) {
  CTwoFactor_UpdateTokenVersion_Request* _this = reinterpret_cast< CTwoFactor_UpdateTokenVersion_Request* >(object);
  (void)_this;
}
void CTwoFactor_UpdateTokenVersion_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CTwoFactor_UpdateTokenVersion_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CTwoFactor_UpdateTokenVersion_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CTwoFactor_UpdateTokenVersion_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    signature_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&version_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CTwoFactor_UpdateTokenVersion_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 version = 2 [(.description) = "What the version of our token should be"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes signature = 3 [(.description) = "HMAC digest over user\'s private key"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CTwoFactor_UpdateTokenVersion_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CTwoFactor_UpdateTokenVersion_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional uint32 version = 2 [(.description) = "What the version of our token should be"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_version(), target);
  }

  // optional bytes signature = 3 [(.description) = "HMAC digest over user\'s private key"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_signature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CTwoFactor_UpdateTokenVersion_Request)
  return target;
}

size_t CTwoFactor_UpdateTokenVersion_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CTwoFactor_UpdateTokenVersion_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes signature = 3 [(.description) = "HMAC digest over user\'s private key"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_signature());
    }

    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 version = 2 [(.description) = "What the version of our token should be"];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_version());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CTwoFactor_UpdateTokenVersion_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CTwoFactor_UpdateTokenVersion_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CTwoFactor_UpdateTokenVersion_Request::GetClassData() const { return &_class_data_; }

void CTwoFactor_UpdateTokenVersion_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CTwoFactor_UpdateTokenVersion_Request *>(to)->MergeFrom(
      static_cast<const CTwoFactor_UpdateTokenVersion_Request &>(from));
}


void CTwoFactor_UpdateTokenVersion_Request::MergeFrom(const CTwoFactor_UpdateTokenVersion_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CTwoFactor_UpdateTokenVersion_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_signature(from._internal_signature());
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      version_ = from.version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CTwoFactor_UpdateTokenVersion_Request::CopyFrom(const CTwoFactor_UpdateTokenVersion_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CTwoFactor_UpdateTokenVersion_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTwoFactor_UpdateTokenVersion_Request::IsInitialized() const {
  return true;
}

void CTwoFactor_UpdateTokenVersion_Request::InternalSwap(CTwoFactor_UpdateTokenVersion_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &signature_, lhs_arena,
      &other->signature_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CTwoFactor_UpdateTokenVersion_Request, version_)
      + sizeof(CTwoFactor_UpdateTokenVersion_Request::version_)
      - PROTOBUF_FIELD_OFFSET(CTwoFactor_UpdateTokenVersion_Request, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CTwoFactor_UpdateTokenVersion_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5ftwofactor_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5ftwofactor_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5ftwofactor_2esteamclient_2eproto[10]);
}

// ===================================================================

class CTwoFactor_UpdateTokenVersion_Response::_Internal {
 public:
};

CTwoFactor_UpdateTokenVersion_Response::CTwoFactor_UpdateTokenVersion_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CTwoFactor_UpdateTokenVersion_Response)
}
CTwoFactor_UpdateTokenVersion_Response::CTwoFactor_UpdateTokenVersion_Response(const CTwoFactor_UpdateTokenVersion_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CTwoFactor_UpdateTokenVersion_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CTwoFactor_UpdateTokenVersion_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CTwoFactor_UpdateTokenVersion_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CTwoFactor_UpdateTokenVersion_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5ftwofactor_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5ftwofactor_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5ftwofactor_2esteamclient_2eproto[11]);
}

// ===================================================================

class CTwoFactor_RemoveAuthenticator_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CTwoFactor_RemoveAuthenticator_Request>()._has_bits_);
  static void set_has_revocation_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_revocation_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_steamguard_scheme(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_remove_all_steamguard_cookies(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CTwoFactor_RemoveAuthenticator_Request::CTwoFactor_RemoveAuthenticator_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CTwoFactor_RemoveAuthenticator_Request)
}
CTwoFactor_RemoveAuthenticator_Request::CTwoFactor_RemoveAuthenticator_Request(const CTwoFactor_RemoveAuthenticator_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  revocation_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    revocation_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_revocation_code()) {
    revocation_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_revocation_code(), 
      GetArenaForAllocation());
  }
  ::memcpy(&remove_all_steamguard_cookies_, &from.remove_all_steamguard_cookies_,
    static_cast<size_t>(reinterpret_cast<char*>(&steamguard_scheme_) -
    reinterpret_cast<char*>(&remove_all_steamguard_cookies_)) + sizeof(steamguard_scheme_));
  // @@protoc_insertion_point(copy_constructor:CTwoFactor_RemoveAuthenticator_Request)
}

inline void CTwoFactor_RemoveAuthenticator_Request::SharedCtor() {
revocation_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  revocation_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&remove_all_steamguard_cookies_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&steamguard_scheme_) -
    reinterpret_cast<char*>(&remove_all_steamguard_cookies_)) + sizeof(steamguard_scheme_));
}

CTwoFactor_RemoveAuthenticator_Request::~CTwoFactor_RemoveAuthenticator_Request() {
  // @@protoc_insertion_point(destructor:CTwoFactor_RemoveAuthenticator_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CTwoFactor_RemoveAuthenticator_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  revocation_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CTwoFactor_RemoveAuthenticator_Request::ArenaDtor(void* object) {
  CTwoFactor_RemoveAuthenticator_Request* _this = reinterpret_cast< CTwoFactor_RemoveAuthenticator_Request* >(object);
  (void)_this;
}
void CTwoFactor_RemoveAuthenticator_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CTwoFactor_RemoveAuthenticator_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CTwoFactor_RemoveAuthenticator_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CTwoFactor_RemoveAuthenticator_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    revocation_code_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&remove_all_steamguard_cookies_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steamguard_scheme_) -
        reinterpret_cast<char*>(&remove_all_steamguard_cookies_)) + sizeof(steamguard_scheme_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CTwoFactor_RemoveAuthenticator_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string revocation_code = 2 [(.description) = "Password needed to remove token"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_revocation_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CTwoFactor_RemoveAuthenticator_Request.revocation_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 revocation_reason = 5 [(.description) = "Reason the authenticator is being removed"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_revocation_reason(&has_bits);
          revocation_reason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 steamguard_scheme = 6 [(.description) = "Type of Steam Guard to use once token is removed"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_steamguard_scheme(&has_bits);
          steamguard_scheme_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool remove_all_steamguard_cookies = 7 [(.description) = "Remove all steamguard cookies"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_remove_all_steamguard_cookies(&has_bits);
          remove_all_steamguard_cookies_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CTwoFactor_RemoveAuthenticator_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CTwoFactor_RemoveAuthenticator_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string revocation_code = 2 [(.description) = "Password needed to remove token"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_revocation_code().data(), static_cast<int>(this->_internal_revocation_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CTwoFactor_RemoveAuthenticator_Request.revocation_code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_revocation_code(), target);
  }

  // optional uint32 revocation_reason = 5 [(.description) = "Reason the authenticator is being removed"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_revocation_reason(), target);
  }

  // optional uint32 steamguard_scheme = 6 [(.description) = "Type of Steam Guard to use once token is removed"];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_steamguard_scheme(), target);
  }

  // optional bool remove_all_steamguard_cookies = 7 [(.description) = "Remove all steamguard cookies"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_remove_all_steamguard_cookies(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CTwoFactor_RemoveAuthenticator_Request)
  return target;
}

size_t CTwoFactor_RemoveAuthenticator_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CTwoFactor_RemoveAuthenticator_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string revocation_code = 2 [(.description) = "Password needed to remove token"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_revocation_code());
    }

    // optional bool remove_all_steamguard_cookies = 7 [(.description) = "Remove all steamguard cookies"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional uint32 revocation_reason = 5 [(.description) = "Reason the authenticator is being removed"];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_revocation_reason());
    }

    // optional uint32 steamguard_scheme = 6 [(.description) = "Type of Steam Guard to use once token is removed"];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_steamguard_scheme());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CTwoFactor_RemoveAuthenticator_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CTwoFactor_RemoveAuthenticator_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CTwoFactor_RemoveAuthenticator_Request::GetClassData() const { return &_class_data_; }

void CTwoFactor_RemoveAuthenticator_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CTwoFactor_RemoveAuthenticator_Request *>(to)->MergeFrom(
      static_cast<const CTwoFactor_RemoveAuthenticator_Request &>(from));
}


void CTwoFactor_RemoveAuthenticator_Request::MergeFrom(const CTwoFactor_RemoveAuthenticator_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CTwoFactor_RemoveAuthenticator_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_revocation_code(from._internal_revocation_code());
    }
    if (cached_has_bits & 0x00000002u) {
      remove_all_steamguard_cookies_ = from.remove_all_steamguard_cookies_;
    }
    if (cached_has_bits & 0x00000004u) {
      revocation_reason_ = from.revocation_reason_;
    }
    if (cached_has_bits & 0x00000008u) {
      steamguard_scheme_ = from.steamguard_scheme_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CTwoFactor_RemoveAuthenticator_Request::CopyFrom(const CTwoFactor_RemoveAuthenticator_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CTwoFactor_RemoveAuthenticator_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTwoFactor_RemoveAuthenticator_Request::IsInitialized() const {
  return true;
}

void CTwoFactor_RemoveAuthenticator_Request::InternalSwap(CTwoFactor_RemoveAuthenticator_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &revocation_code_, lhs_arena,
      &other->revocation_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CTwoFactor_RemoveAuthenticator_Request, steamguard_scheme_)
      + sizeof(CTwoFactor_RemoveAuthenticator_Request::steamguard_scheme_)
      - PROTOBUF_FIELD_OFFSET(CTwoFactor_RemoveAuthenticator_Request, remove_all_steamguard_cookies_)>(
          reinterpret_cast<char*>(&remove_all_steamguard_cookies_),
          reinterpret_cast<char*>(&other->remove_all_steamguard_cookies_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CTwoFactor_RemoveAuthenticator_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5ftwofactor_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5ftwofactor_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5ftwofactor_2esteamclient_2eproto[12]);
}

// ===================================================================

class CTwoFactor_RemoveAuthenticator_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CTwoFactor_RemoveAuthenticator_Response>()._has_bits_);
  static void set_has_success(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_server_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_revocation_attempts_remaining(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CTwoFactor_RemoveAuthenticator_Response::CTwoFactor_RemoveAuthenticator_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CTwoFactor_RemoveAuthenticator_Response)
}
CTwoFactor_RemoveAuthenticator_Response::CTwoFactor_RemoveAuthenticator_Response(const CTwoFactor_RemoveAuthenticator_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&server_time_, &from.server_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&revocation_attempts_remaining_) -
    reinterpret_cast<char*>(&server_time_)) + sizeof(revocation_attempts_remaining_));
  // @@protoc_insertion_point(copy_constructor:CTwoFactor_RemoveAuthenticator_Response)
}

inline void CTwoFactor_RemoveAuthenticator_Response::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&server_time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&revocation_attempts_remaining_) -
    reinterpret_cast<char*>(&server_time_)) + sizeof(revocation_attempts_remaining_));
}

CTwoFactor_RemoveAuthenticator_Response::~CTwoFactor_RemoveAuthenticator_Response() {
  // @@protoc_insertion_point(destructor:CTwoFactor_RemoveAuthenticator_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CTwoFactor_RemoveAuthenticator_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CTwoFactor_RemoveAuthenticator_Response::ArenaDtor(void* object) {
  CTwoFactor_RemoveAuthenticator_Response* _this = reinterpret_cast< CTwoFactor_RemoveAuthenticator_Response* >(object);
  (void)_this;
}
void CTwoFactor_RemoveAuthenticator_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CTwoFactor_RemoveAuthenticator_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CTwoFactor_RemoveAuthenticator_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CTwoFactor_RemoveAuthenticator_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&server_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&revocation_attempts_remaining_) -
        reinterpret_cast<char*>(&server_time_)) + sizeof(revocation_attempts_remaining_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CTwoFactor_RemoveAuthenticator_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool success = 1 [(.description) = "True if request succeeeded. The mobile app checks this."];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_success(&has_bits);
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 server_time = 3 [(.description) = "Current server time"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_server_time(&has_bits);
          server_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 revocation_attempts_remaining = 5 [(.description) = "Number of revocation code attempts remaining"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_revocation_attempts_remaining(&has_bits);
          revocation_attempts_remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CTwoFactor_RemoveAuthenticator_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CTwoFactor_RemoveAuthenticator_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool success = 1 [(.description) = "True if request succeeeded. The mobile app checks this."];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // optional uint64 server_time = 3 [(.description) = "Current server time"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_server_time(), target);
  }

  // optional uint32 revocation_attempts_remaining = 5 [(.description) = "Number of revocation code attempts remaining"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_revocation_attempts_remaining(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CTwoFactor_RemoveAuthenticator_Response)
  return target;
}

size_t CTwoFactor_RemoveAuthenticator_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CTwoFactor_RemoveAuthenticator_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 server_time = 3 [(.description) = "Current server time"];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_server_time());
    }

    // optional bool success = 1 [(.description) = "True if request succeeeded. The mobile app checks this."];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional uint32 revocation_attempts_remaining = 5 [(.description) = "Number of revocation code attempts remaining"];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_revocation_attempts_remaining());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CTwoFactor_RemoveAuthenticator_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CTwoFactor_RemoveAuthenticator_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CTwoFactor_RemoveAuthenticator_Response::GetClassData() const { return &_class_data_; }

void CTwoFactor_RemoveAuthenticator_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CTwoFactor_RemoveAuthenticator_Response *>(to)->MergeFrom(
      static_cast<const CTwoFactor_RemoveAuthenticator_Response &>(from));
}


void CTwoFactor_RemoveAuthenticator_Response::MergeFrom(const CTwoFactor_RemoveAuthenticator_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CTwoFactor_RemoveAuthenticator_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      server_time_ = from.server_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      success_ = from.success_;
    }
    if (cached_has_bits & 0x00000004u) {
      revocation_attempts_remaining_ = from.revocation_attempts_remaining_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CTwoFactor_RemoveAuthenticator_Response::CopyFrom(const CTwoFactor_RemoveAuthenticator_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CTwoFactor_RemoveAuthenticator_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTwoFactor_RemoveAuthenticator_Response::IsInitialized() const {
  return true;
}

void CTwoFactor_RemoveAuthenticator_Response::InternalSwap(CTwoFactor_RemoveAuthenticator_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CTwoFactor_RemoveAuthenticator_Response, revocation_attempts_remaining_)
      + sizeof(CTwoFactor_RemoveAuthenticator_Response::revocation_attempts_remaining_)
      - PROTOBUF_FIELD_OFFSET(CTwoFactor_RemoveAuthenticator_Response, server_time_)>(
          reinterpret_cast<char*>(&server_time_),
          reinterpret_cast<char*>(&other->server_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CTwoFactor_RemoveAuthenticator_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5ftwofactor_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5ftwofactor_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5ftwofactor_2esteamclient_2eproto[13]);
}

// ===================================================================

class CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request::_Internal {
 public:
};

CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request::CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request)
}
CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request::CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request(const CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5ftwofactor_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5ftwofactor_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5ftwofactor_2esteamclient_2eproto[14]);
}

// ===================================================================

class CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response>()._has_bits_);
  static void set_has_success(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response::CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response)
}
CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response::CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response(const CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response)
}

inline void CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response::SharedCtor() {
success_ = false;
}

CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response::~CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response() {
  // @@protoc_insertion_point(destructor:CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response::ArenaDtor(void* object) {
  CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response* _this = reinterpret_cast< CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response* >(object);
  (void)_this;
}
void CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool success = 1 [(.description) = "True if succeeded, or want more tries with an authenticator_code"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_success(&has_bits);
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool success = 1 [(.description) = "True if succeeded, or want more tries with an authenticator_code"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response)
  return target;
}

size_t CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool success = 1 [(.description) = "True if succeeded, or want more tries with an authenticator_code"];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response::GetClassData() const { return &_class_data_; }

void CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response *>(to)->MergeFrom(
      static_cast<const CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response &>(from));
}


void CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response::MergeFrom(const CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_success()) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response::CopyFrom(const CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response::IsInitialized() const {
  return true;
}

void CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response::InternalSwap(CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5ftwofactor_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5ftwofactor_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5ftwofactor_2esteamclient_2eproto[15]);
}

// ===================================================================

class CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request>()._has_bits_);
  static void set_has_sms_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_generate_new_token(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request::CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request)
}
CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request::CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request(const CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sms_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sms_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sms_code()) {
    sms_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sms_code(), 
      GetArenaForAllocation());
  }
  ::memcpy(&generate_new_token_, &from.generate_new_token_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&generate_new_token_)) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request)
}

inline void CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request::SharedCtor() {
sms_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sms_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
generate_new_token_ = false;
version_ = 1u;
}

CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request::~CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request() {
  // @@protoc_insertion_point(destructor:CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sms_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request::ArenaDtor(void* object) {
  CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request* _this = reinterpret_cast< CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request* >(object);
  (void)_this;
}
void CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    sms_code_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    generate_new_token_ = false;
    version_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string sms_code = 1 [(.description) = "Code from SMS"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sms_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request.sms_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool generate_new_token = 2 [(.description) = "Generate new token (instead of removing old one)"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_generate_new_token(&has_bits);
          generate_new_token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 version = 3 [default = 1, (.description) = "What the version of our token should be"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string sms_code = 1 [(.description) = "Code from SMS"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sms_code().data(), static_cast<int>(this->_internal_sms_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request.sms_code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sms_code(), target);
  }

  // optional bool generate_new_token = 2 [(.description) = "Generate new token (instead of removing old one)"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_generate_new_token(), target);
  }

  // optional uint32 version = 3 [default = 1, (.description) = "What the version of our token should be"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request)
  return target;
}

size_t CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string sms_code = 1 [(.description) = "Code from SMS"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sms_code());
    }

    // optional bool generate_new_token = 2 [(.description) = "Generate new token (instead of removing old one)"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional uint32 version = 3 [default = 1, (.description) = "What the version of our token should be"];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_version());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request::GetClassData() const { return &_class_data_; }

void CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request *>(to)->MergeFrom(
      static_cast<const CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request &>(from));
}


void CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request::MergeFrom(const CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_sms_code(from._internal_sms_code());
    }
    if (cached_has_bits & 0x00000002u) {
      generate_new_token_ = from.generate_new_token_;
    }
    if (cached_has_bits & 0x00000004u) {
      version_ = from.version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request::CopyFrom(const CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request::IsInitialized() const {
  return true;
}

void CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request::InternalSwap(CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sms_code_, lhs_arena,
      &other->sms_code_, rhs_arena
  );
  swap(generate_new_token_, other->generate_new_token_);
  swap(version_, other->version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5ftwofactor_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5ftwofactor_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5ftwofactor_2esteamclient_2eproto[16]);
}

// ===================================================================

class CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::_Internal {
 public:
  using HasBits = decltype(std::declval<CRemoveAuthenticatorViaChallengeContinue_Replacement_Token>()._has_bits_);
  static void set_has_shared_secret(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_serial_number(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_revocation_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_uri(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_server_time(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_account_name(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_token_gid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_identity_secret(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_secret_1(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_steamguard_scheme(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::CRemoveAuthenticatorViaChallengeContinue_Replacement_Token(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CRemoveAuthenticatorViaChallengeContinue_Replacement_Token)
}
CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::CRemoveAuthenticatorViaChallengeContinue_Replacement_Token(const CRemoveAuthenticatorViaChallengeContinue_Replacement_Token& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  shared_secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    shared_secret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_shared_secret()) {
    shared_secret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_shared_secret(), 
      GetArenaForAllocation());
  }
  revocation_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    revocation_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_revocation_code()) {
    revocation_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_revocation_code(), 
      GetArenaForAllocation());
  }
  uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_uri()) {
    uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_uri(), 
      GetArenaForAllocation());
  }
  account_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    account_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_account_name()) {
    account_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account_name(), 
      GetArenaForAllocation());
  }
  token_gid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    token_gid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_token_gid()) {
    token_gid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token_gid(), 
      GetArenaForAllocation());
  }
  identity_secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    identity_secret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_identity_secret()) {
    identity_secret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_identity_secret(), 
      GetArenaForAllocation());
  }
  secret_1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    secret_1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_secret_1()) {
    secret_1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_secret_1(), 
      GetArenaForAllocation());
  }
  ::memcpy(&serial_number_, &from.serial_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&steamid_) -
    reinterpret_cast<char*>(&serial_number_)) + sizeof(steamid_));
  // @@protoc_insertion_point(copy_constructor:CRemoveAuthenticatorViaChallengeContinue_Replacement_Token)
}

inline void CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::SharedCtor() {
shared_secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  shared_secret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
revocation_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  revocation_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
account_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  account_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
token_gid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  token_gid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
identity_secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  identity_secret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
secret_1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  secret_1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&serial_number_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&steamid_) -
    reinterpret_cast<char*>(&serial_number_)) + sizeof(steamid_));
}

CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::~CRemoveAuthenticatorViaChallengeContinue_Replacement_Token() {
  // @@protoc_insertion_point(destructor:CRemoveAuthenticatorViaChallengeContinue_Replacement_Token)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  shared_secret_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  revocation_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uri_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_gid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  identity_secret_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::ArenaDtor(void* object) {
  CRemoveAuthenticatorViaChallengeContinue_Replacement_Token* _this = reinterpret_cast< CRemoveAuthenticatorViaChallengeContinue_Replacement_Token* >(object);
  (void)_this;
}
void CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::Clear() {
// @@protoc_insertion_point(message_clear_start:CRemoveAuthenticatorViaChallengeContinue_Replacement_Token)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      shared_secret_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      revocation_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      uri_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      account_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      token_gid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      identity_secret_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      secret_1_.ClearNonDefaultToEmpty();
    }
  }
  serial_number_ = uint64_t{0u};
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&server_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steamid_) -
        reinterpret_cast<char*>(&server_time_)) + sizeof(steamid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes shared_secret = 1 [(.description) = "Shared secret between server and authenticator"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_shared_secret();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 serial_number = 2 [(.description) = "Authenticator serial number (unique per token)"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_serial_number(&has_bits);
          serial_number_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional string revocation_code = 3 [(.description) = "code used to revoke authenticator"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_revocation_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CRemoveAuthenticatorViaChallengeContinue_Replacement_Token.revocation_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string uri = 4 [(.description) = "URI for QR code generation"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_uri();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CRemoveAuthenticatorViaChallengeContinue_Replacement_Token.uri");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 server_time = 5 [(.description) = "Current server time"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_server_time(&has_bits);
          server_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string account_name = 6 [(.description) = "Account name to display on token client"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_account_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CRemoveAuthenticatorViaChallengeContinue_Replacement_Token.account_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string token_gid = 7 [(.description) = "Token GID assigned by server"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_token_gid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CRemoveAuthenticatorViaChallengeContinue_Replacement_Token.token_gid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes identity_secret = 8 [(.description) = "Secret used for identity attestation (e.g., for eventing)"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_identity_secret();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes secret_1 = 9 [(.description) = "Spare shared secret"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_secret_1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 status = 10 [(.description) = "Result code"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_status(&has_bits);
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 steamguard_scheme = 11 [(.description) = "Type of Steam Guard to use once token is removed"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_steamguard_scheme(&has_bits);
          steamguard_scheme_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 steamid = 12 [(.description) = "steamid that owns the secret"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRemoveAuthenticatorViaChallengeContinue_Replacement_Token)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes shared_secret = 1 [(.description) = "Shared secret between server and authenticator"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_shared_secret(), target);
  }

  // optional fixed64 serial_number = 2 [(.description) = "Authenticator serial number (unique per token)"];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_serial_number(), target);
  }

  // optional string revocation_code = 3 [(.description) = "code used to revoke authenticator"];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_revocation_code().data(), static_cast<int>(this->_internal_revocation_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CRemoveAuthenticatorViaChallengeContinue_Replacement_Token.revocation_code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_revocation_code(), target);
  }

  // optional string uri = 4 [(.description) = "URI for QR code generation"];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_uri().data(), static_cast<int>(this->_internal_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CRemoveAuthenticatorViaChallengeContinue_Replacement_Token.uri");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_uri(), target);
  }

  // optional uint64 server_time = 5 [(.description) = "Current server time"];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_server_time(), target);
  }

  // optional string account_name = 6 [(.description) = "Account name to display on token client"];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_account_name().data(), static_cast<int>(this->_internal_account_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CRemoveAuthenticatorViaChallengeContinue_Replacement_Token.account_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_account_name(), target);
  }

  // optional string token_gid = 7 [(.description) = "Token GID assigned by server"];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_token_gid().data(), static_cast<int>(this->_internal_token_gid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CRemoveAuthenticatorViaChallengeContinue_Replacement_Token.token_gid");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_token_gid(), target);
  }

  // optional bytes identity_secret = 8 [(.description) = "Secret used for identity attestation (e.g., for eventing)"];
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_identity_secret(), target);
  }

  // optional bytes secret_1 = 9 [(.description) = "Spare shared secret"];
  if (cached_has_bits & 0x00000040u) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_secret_1(), target);
  }

  // optional int32 status = 10 [(.description) = "Result code"];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_status(), target);
  }

  // optional uint32 steamguard_scheme = 11 [(.description) = "Type of Steam Guard to use once token is removed"];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_steamguard_scheme(), target);
  }

  // optional fixed64 steamid = 12 [(.description) = "steamid that owns the secret"];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(12, this->_internal_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRemoveAuthenticatorViaChallengeContinue_Replacement_Token)
  return target;
}

size_t CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRemoveAuthenticatorViaChallengeContinue_Replacement_Token)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes shared_secret = 1 [(.description) = "Shared secret between server and authenticator"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_shared_secret());
    }

    // optional string revocation_code = 3 [(.description) = "code used to revoke authenticator"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_revocation_code());
    }

    // optional string uri = 4 [(.description) = "URI for QR code generation"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_uri());
    }

    // optional string account_name = 6 [(.description) = "Account name to display on token client"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_account_name());
    }

    // optional string token_gid = 7 [(.description) = "Token GID assigned by server"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_token_gid());
    }

    // optional bytes identity_secret = 8 [(.description) = "Secret used for identity attestation (e.g., for eventing)"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_identity_secret());
    }

    // optional bytes secret_1 = 9 [(.description) = "Spare shared secret"];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_secret_1());
    }

    // optional fixed64 serial_number = 2 [(.description) = "Authenticator serial number (unique per token)"];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional uint64 server_time = 5 [(.description) = "Current server time"];
    if (cached_has_bits & 0x00000100u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_server_time());
    }

    // optional int32 status = 10 [(.description) = "Result code"];
    if (cached_has_bits & 0x00000200u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_status());
    }

    // optional uint32 steamguard_scheme = 11 [(.description) = "Type of Steam Guard to use once token is removed"];
    if (cached_has_bits & 0x00000400u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_steamguard_scheme());
    }

    // optional fixed64 steamid = 12 [(.description) = "steamid that owns the secret"];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::GetClassData() const { return &_class_data_; }

void CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CRemoveAuthenticatorViaChallengeContinue_Replacement_Token *>(to)->MergeFrom(
      static_cast<const CRemoveAuthenticatorViaChallengeContinue_Replacement_Token &>(from));
}


void CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::MergeFrom(const CRemoveAuthenticatorViaChallengeContinue_Replacement_Token& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRemoveAuthenticatorViaChallengeContinue_Replacement_Token)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_shared_secret(from._internal_shared_secret());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_revocation_code(from._internal_revocation_code());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_uri(from._internal_uri());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_account_name(from._internal_account_name());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_token_gid(from._internal_token_gid());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_identity_secret(from._internal_identity_secret());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_secret_1(from._internal_secret_1());
    }
    if (cached_has_bits & 0x00000080u) {
      serial_number_ = from.serial_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      server_time_ = from.server_time_;
    }
    if (cached_has_bits & 0x00000200u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000400u) {
      steamguard_scheme_ = from.steamguard_scheme_;
    }
    if (cached_has_bits & 0x00000800u) {
      steamid_ = from.steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::CopyFrom(const CRemoveAuthenticatorViaChallengeContinue_Replacement_Token& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRemoveAuthenticatorViaChallengeContinue_Replacement_Token)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::IsInitialized() const {
  return true;
}

void CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::InternalSwap(CRemoveAuthenticatorViaChallengeContinue_Replacement_Token* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &shared_secret_, lhs_arena,
      &other->shared_secret_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &revocation_code_, lhs_arena,
      &other->revocation_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &uri_, lhs_arena,
      &other->uri_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &account_name_, lhs_arena,
      &other->account_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &token_gid_, lhs_arena,
      &other->token_gid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &identity_secret_, lhs_arena,
      &other->identity_secret_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &secret_1_, lhs_arena,
      &other->secret_1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CRemoveAuthenticatorViaChallengeContinue_Replacement_Token, steamid_)
      + sizeof(CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::steamid_)
      - PROTOBUF_FIELD_OFFSET(CRemoveAuthenticatorViaChallengeContinue_Replacement_Token, serial_number_)>(
          reinterpret_cast<char*>(&serial_number_),
          reinterpret_cast<char*>(&other->serial_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5ftwofactor_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5ftwofactor_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5ftwofactor_2esteamclient_2eproto[17]);
}

// ===================================================================

class CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response>()._has_bits_);
  static void set_has_success(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CRemoveAuthenticatorViaChallengeContinue_Replacement_Token& replacement_token(const CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response* msg);
  static void set_has_replacement_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CRemoveAuthenticatorViaChallengeContinue_Replacement_Token&
CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response::_Internal::replacement_token(const CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response* msg) {
  return *msg->replacement_token_;
}
CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response::CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response)
}
CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response::CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response(const CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_replacement_token()) {
    replacement_token_ = new ::CRemoveAuthenticatorViaChallengeContinue_Replacement_Token(*from.replacement_token_);
  } else {
    replacement_token_ = nullptr;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response)
}

inline void CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&replacement_token_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&replacement_token_)) + sizeof(success_));
}

CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response::~CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response() {
  // @@protoc_insertion_point(destructor:CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete replacement_token_;
}

void CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response::ArenaDtor(void* object) {
  CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response* _this = reinterpret_cast< CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response* >(object);
  (void)_this;
}
void CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(replacement_token_ != nullptr);
    replacement_token_->Clear();
  }
  success_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool success = 1 [(.description) = "True if succeeded, or want more tries with an authenticator_code"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_success(&has_bits);
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CRemoveAuthenticatorViaChallengeContinue_Replacement_Token replacement_token = 2 [(.description) = "Fresh secret to install"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_replacement_token(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool success = 1 [(.description) = "True if succeeded, or want more tries with an authenticator_code"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // optional .CRemoveAuthenticatorViaChallengeContinue_Replacement_Token replacement_token = 2 [(.description) = "Fresh secret to install"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::replacement_token(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response)
  return target;
}

size_t CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CRemoveAuthenticatorViaChallengeContinue_Replacement_Token replacement_token = 2 [(.description) = "Fresh secret to install"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *replacement_token_);
    }

    // optional bool success = 1 [(.description) = "True if succeeded, or want more tries with an authenticator_code"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response::GetClassData() const { return &_class_data_; }

void CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response *>(to)->MergeFrom(
      static_cast<const CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response &>(from));
}


void CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response::MergeFrom(const CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_replacement_token()->::CRemoveAuthenticatorViaChallengeContinue_Replacement_Token::MergeFrom(from._internal_replacement_token());
    }
    if (cached_has_bits & 0x00000002u) {
      success_ = from.success_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response::CopyFrom(const CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response::IsInitialized() const {
  return true;
}

void CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response::InternalSwap(CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response, success_)
      + sizeof(CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response::success_)
      - PROTOBUF_FIELD_OFFSET(CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response, replacement_token_)>(
          reinterpret_cast<char*>(&replacement_token_),
          reinterpret_cast<char*>(&other->replacement_token_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5ftwofactor_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5ftwofactor_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5ftwofactor_2esteamclient_2eproto[18]);
}

// ===================================================================

TwoFactor::~TwoFactor() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* TwoFactor::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5ftwofactor_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5ftwofactor_2esteamclient_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* TwoFactor::GetDescriptor() {
  return descriptor();
}

void TwoFactor::QueryTime(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CTwoFactor_Time_Request*,
                         ::CTwoFactor_Time_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method QueryTime() not implemented.");
  done->Run();
}

void TwoFactor::QueryStatus(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CTwoFactor_Status_Request*,
                         ::CTwoFactor_Status_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method QueryStatus() not implemented.");
  done->Run();
}

void TwoFactor::AddAuthenticator(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CTwoFactor_AddAuthenticator_Request*,
                         ::CTwoFactor_AddAuthenticator_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AddAuthenticator() not implemented.");
  done->Run();
}

void TwoFactor::SendEmail(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CTwoFactor_SendEmail_Request*,
                         ::CTwoFactor_SendEmail_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SendEmail() not implemented.");
  done->Run();
}

void TwoFactor::FinalizeAddAuthenticator(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CTwoFactor_FinalizeAddAuthenticator_Request*,
                         ::CTwoFactor_FinalizeAddAuthenticator_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method FinalizeAddAuthenticator() not implemented.");
  done->Run();
}

void TwoFactor::UpdateTokenVersion(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CTwoFactor_UpdateTokenVersion_Request*,
                         ::CTwoFactor_UpdateTokenVersion_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method UpdateTokenVersion() not implemented.");
  done->Run();
}

void TwoFactor::RemoveAuthenticator(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CTwoFactor_RemoveAuthenticator_Request*,
                         ::CTwoFactor_RemoveAuthenticator_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RemoveAuthenticator() not implemented.");
  done->Run();
}

void TwoFactor::RemoveAuthenticatorViaChallengeStart(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request*,
                         ::CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RemoveAuthenticatorViaChallengeStart() not implemented.");
  done->Run();
}

void TwoFactor::RemoveAuthenticatorViaChallengeContinue(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request*,
                         ::CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RemoveAuthenticatorViaChallengeContinue() not implemented.");
  done->Run();
}

void TwoFactor::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5ftwofactor_2esteamclient_2eproto[0]);
  switch(method->index()) {
    case 0:
      QueryTime(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CTwoFactor_Time_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CTwoFactor_Time_Response*>(
                 response),
             done);
      break;
    case 1:
      QueryStatus(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CTwoFactor_Status_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CTwoFactor_Status_Response*>(
                 response),
             done);
      break;
    case 2:
      AddAuthenticator(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CTwoFactor_AddAuthenticator_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CTwoFactor_AddAuthenticator_Response*>(
                 response),
             done);
      break;
    case 3:
      SendEmail(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CTwoFactor_SendEmail_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CTwoFactor_SendEmail_Response*>(
                 response),
             done);
      break;
    case 4:
      FinalizeAddAuthenticator(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CTwoFactor_FinalizeAddAuthenticator_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CTwoFactor_FinalizeAddAuthenticator_Response*>(
                 response),
             done);
      break;
    case 5:
      UpdateTokenVersion(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CTwoFactor_UpdateTokenVersion_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CTwoFactor_UpdateTokenVersion_Response*>(
                 response),
             done);
      break;
    case 6:
      RemoveAuthenticator(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CTwoFactor_RemoveAuthenticator_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CTwoFactor_RemoveAuthenticator_Response*>(
                 response),
             done);
      break;
    case 7:
      RemoveAuthenticatorViaChallengeStart(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response*>(
                 response),
             done);
      break;
    case 8:
      RemoveAuthenticatorViaChallengeContinue(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& TwoFactor::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CTwoFactor_Time_Request::default_instance();
    case 1:
      return ::CTwoFactor_Status_Request::default_instance();
    case 2:
      return ::CTwoFactor_AddAuthenticator_Request::default_instance();
    case 3:
      return ::CTwoFactor_SendEmail_Request::default_instance();
    case 4:
      return ::CTwoFactor_FinalizeAddAuthenticator_Request::default_instance();
    case 5:
      return ::CTwoFactor_UpdateTokenVersion_Request::default_instance();
    case 6:
      return ::CTwoFactor_RemoveAuthenticator_Request::default_instance();
    case 7:
      return ::CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request::default_instance();
    case 8:
      return ::CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& TwoFactor::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CTwoFactor_Time_Response::default_instance();
    case 1:
      return ::CTwoFactor_Status_Response::default_instance();
    case 2:
      return ::CTwoFactor_AddAuthenticator_Response::default_instance();
    case 3:
      return ::CTwoFactor_SendEmail_Response::default_instance();
    case 4:
      return ::CTwoFactor_FinalizeAddAuthenticator_Response::default_instance();
    case 5:
      return ::CTwoFactor_UpdateTokenVersion_Response::default_instance();
    case 6:
      return ::CTwoFactor_RemoveAuthenticator_Response::default_instance();
    case 7:
      return ::CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response::default_instance();
    case 8:
      return ::CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

TwoFactor_Stub::TwoFactor_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
TwoFactor_Stub::TwoFactor_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
TwoFactor_Stub::~TwoFactor_Stub() {
  if (owns_channel_) delete channel_;
}

void TwoFactor_Stub::QueryTime(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CTwoFactor_Time_Request* request,
                              ::CTwoFactor_Time_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void TwoFactor_Stub::QueryStatus(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CTwoFactor_Status_Request* request,
                              ::CTwoFactor_Status_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void TwoFactor_Stub::AddAuthenticator(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CTwoFactor_AddAuthenticator_Request* request,
                              ::CTwoFactor_AddAuthenticator_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void TwoFactor_Stub::SendEmail(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CTwoFactor_SendEmail_Request* request,
                              ::CTwoFactor_SendEmail_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void TwoFactor_Stub::FinalizeAddAuthenticator(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CTwoFactor_FinalizeAddAuthenticator_Request* request,
                              ::CTwoFactor_FinalizeAddAuthenticator_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void TwoFactor_Stub::UpdateTokenVersion(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CTwoFactor_UpdateTokenVersion_Request* request,
                              ::CTwoFactor_UpdateTokenVersion_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void TwoFactor_Stub::RemoveAuthenticator(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CTwoFactor_RemoveAuthenticator_Request* request,
                              ::CTwoFactor_RemoveAuthenticator_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void TwoFactor_Stub::RemoveAuthenticatorViaChallengeStart(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request* request,
                              ::CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}
void TwoFactor_Stub::RemoveAuthenticatorViaChallengeContinue(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request* request,
                              ::CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(8),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CTwoFactor_Time_Request* Arena::CreateMaybeMessage< ::CTwoFactor_Time_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CTwoFactor_Time_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CTwoFactor_Time_Response* Arena::CreateMaybeMessage< ::CTwoFactor_Time_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CTwoFactor_Time_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CTwoFactor_Status_Request* Arena::CreateMaybeMessage< ::CTwoFactor_Status_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CTwoFactor_Status_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CTwoFactor_Status_Response* Arena::CreateMaybeMessage< ::CTwoFactor_Status_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CTwoFactor_Status_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CTwoFactor_AddAuthenticator_Request* Arena::CreateMaybeMessage< ::CTwoFactor_AddAuthenticator_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CTwoFactor_AddAuthenticator_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CTwoFactor_AddAuthenticator_Response* Arena::CreateMaybeMessage< ::CTwoFactor_AddAuthenticator_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CTwoFactor_AddAuthenticator_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CTwoFactor_SendEmail_Request* Arena::CreateMaybeMessage< ::CTwoFactor_SendEmail_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CTwoFactor_SendEmail_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CTwoFactor_SendEmail_Response* Arena::CreateMaybeMessage< ::CTwoFactor_SendEmail_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CTwoFactor_SendEmail_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CTwoFactor_FinalizeAddAuthenticator_Request* Arena::CreateMaybeMessage< ::CTwoFactor_FinalizeAddAuthenticator_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CTwoFactor_FinalizeAddAuthenticator_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CTwoFactor_FinalizeAddAuthenticator_Response* Arena::CreateMaybeMessage< ::CTwoFactor_FinalizeAddAuthenticator_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CTwoFactor_FinalizeAddAuthenticator_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CTwoFactor_UpdateTokenVersion_Request* Arena::CreateMaybeMessage< ::CTwoFactor_UpdateTokenVersion_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CTwoFactor_UpdateTokenVersion_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CTwoFactor_UpdateTokenVersion_Response* Arena::CreateMaybeMessage< ::CTwoFactor_UpdateTokenVersion_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CTwoFactor_UpdateTokenVersion_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CTwoFactor_RemoveAuthenticator_Request* Arena::CreateMaybeMessage< ::CTwoFactor_RemoveAuthenticator_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CTwoFactor_RemoveAuthenticator_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CTwoFactor_RemoveAuthenticator_Response* Arena::CreateMaybeMessage< ::CTwoFactor_RemoveAuthenticator_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CTwoFactor_RemoveAuthenticator_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request* Arena::CreateMaybeMessage< ::CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response* Arena::CreateMaybeMessage< ::CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request* Arena::CreateMaybeMessage< ::CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CRemoveAuthenticatorViaChallengeContinue_Replacement_Token* Arena::CreateMaybeMessage< ::CRemoveAuthenticatorViaChallengeContinue_Replacement_Token >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemoveAuthenticatorViaChallengeContinue_Replacement_Token >(arena);
}
template<> PROTOBUF_NOINLINE ::CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response* Arena::CreateMaybeMessage< ::CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
